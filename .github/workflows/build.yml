name: Build and Test

on:
  pull_request:
  push:
    branches:
      - master
env:
  RUSTFLAGS: -Dwarnings

jobs:
  cargo_fmt:
    runs-on: windows-2019
    name: Check cargo formatting
    steps:
      - name: Checkout
        uses: actions/checkout@v3
      - name: Update toolchain
        run: rustup update --no-self-update nightly && rustup default nightly-x86_64-pc-windows-msvc
      - name: Install rustfmt
        run: rustup component add rustfmt
      - name: Run cargo fmt
        run: cargo +nightly fmt --all -- --check

  cargo_clippy:
    name: Check clippy
    runs-on: windows-2019
    steps:
      - name: Checkout
        uses: actions/checkout@v3
      - name: Update toolchain
        run: rustup update --no-self-update nightly && rustup default nightly-x86_64-pc-windows-msvc
      - name: Install clippy
        run: rustup component add clippy
      - name: Configure environment
        shell: pwsh
        run: |
          "C:\Program Files (x86)\Windows Kits\10\bin\10.0.22000.0\x64" >> $env:GITHUB_PATH
          ((Resolve-Path "C:\Program Files (x86)\Microsoft Visual Studio\2019\Enterprise\VC\Tools\MSVC\*\bin\Hostx64\x64")
            | Sort-Object -Descending | Select -First 1).ToString() >> $env:GITHUB_PATH
          (Join-Path $env:GITHUB_WORKSPACE "target\debug\deps").ToString() >> $env:GITHUB_PATH
          (Join-Path $env:GITHUB_WORKSPACE "target\test\debug\deps").ToString() >> $env:GITHUB_PATH
          "INCLUDE=C:\Program Files (x86)\Windows Kits\10\include\10.0.22000.0\winrt;C:\Program Files (x86)\Windows Kits\10\include\10.0.22000.0\cppwinrt" `
            >> $env:GITHUB_ENV
      - name: Run cargo clippy
        run: |
          cargo clippy --workspace

  cargo_doc:
    runs-on: windows-2019
    name: Check cargo docs
    steps:
      - name: Checkout
        uses: actions/checkout@v3
      - name: Run cargo doc
        run: cargo doc --no-deps -p windows_app

  generation:
    strategy:
      matrix:
        tool: [windows_app, targets]
    name: Check generation of `tool_${{ matrix.tool }}`
    runs-on: windows-2019
    steps:
      - name: Checkout
        uses: actions/checkout@v3
      - name: Run tool_${{ matrix.tool }}
        run: cargo run -p tool_${{ matrix.tool }}
      - name: Compare
        shell: bash
        run: git diff --exit-code || (echo '::error::Generated `tool_${{ matrix.tool }}` is out-of-date. Please run `cargo run -p tool_${{ matrix.tool }}`'; exit 1)

  test:
    strategy:
      matrix:
        rust: [stable, nightly]
        target: [x86_64-pc-windows-msvc, i686-pc-windows-msvc]
        os: [windows-2019]
    runs-on: ${{ matrix.os }}
    steps:
    - name: Checkout
      uses: actions/checkout@v3
    - name: Update toolchain
      run: rustup update --no-self-update ${{ matrix.rust }} && rustup default ${{ matrix.rust }}
    - name: Set target
      run: rustup target add ${{ matrix.target }}
    - name: Configure environment
      shell: pwsh
      run: |
        switch -Wildcard ("${{ matrix.target }}")
        {
          "i686*"
          {
            "C:\Program Files (x86)\Windows Kits\10\bin\10.0.22000.0\x86" >> $env:GITHUB_PATH
            ((Resolve-Path "C:\Program Files (x86)\Microsoft Visual Studio\2019\Enterprise\VC\Tools\MSVC\*\bin\Hostx86\x86")
              | Sort-Object -Descending | Select -First 1).ToString() >> $env:GITHUB_PATH
          }
          "x86_64*"
          {
            "C:\Program Files (x86)\Windows Kits\10\bin\10.0.22000.0\x64" >> $env:GITHUB_PATH
            ((Resolve-Path "C:\Program Files (x86)\Microsoft Visual Studio\2019\Enterprise\VC\Tools\MSVC\*\bin\Hostx64\x64")
              | Sort-Object -Descending | Select -First 1).ToString() >> $env:GITHUB_PATH
          }
        }
    - name: Run cargo check
      run: cargo check --target ${{ matrix.target }} -p windows_app --all-features
    - name: Install AppSDK
      run: Invoke-webrequest -uri https://aka.ms/windowsappsdk/1.2/1.2.220930.4-preview2/windowsappruntimeinstall-x64.exe -OutFile windowsappruntimeinstall.exe
      shell: pwsh
    - run: '&.\windowsappruntimeinstall.exe'
      if: ${{ startsWith(matrix.target, "x86_64") }}
      shell: pwsh
    - name: Run tests
      if: ${{ startsWith(matrix.target, "x86_64") }}
      run: >
        cargo test --target ${{ matrix.target }} -p test_interop &&
        cargo test --target ${{ matrix.target }} -p test_dwritecore
