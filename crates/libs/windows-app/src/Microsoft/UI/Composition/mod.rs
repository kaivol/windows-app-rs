#[cfg(feature = "UI_Composition_Core")]
pub mod Core;
#[cfg(feature = "UI_Composition_Diagnostics")]
pub mod Diagnostics;
#[cfg(feature = "UI_Composition_Effects")]
pub mod Effects;
#[cfg(feature = "UI_Composition_Interactions")]
pub mod Interactions;
#[cfg(feature = "UI_Composition_Scenes")]
pub mod Scenes;
#[cfg(feature = "UI_Composition_SystemBackdrops")]
pub mod SystemBackdrops;
#[doc(hidden)]
#[repr(transparent)]
pub struct IAmbientLight(::windows::core::IUnknown);
unsafe impl ::windows::core::Vtable for IAmbientLight {
    type Vtable = IAmbientLight_Vtbl;
}
unsafe impl ::windows::core::Interface for IAmbientLight {
    const IID: ::windows::core::GUID =
        ::windows::core::GUID::from_u128(0x4540525e_b70d_5a14_bbfa_63bef42313c7);
}
#[repr(C)]
#[doc(hidden)]
pub struct IAmbientLight_Vtbl {
    pub base__: ::windows::core::IInspectable_Vtbl,
    pub Color: unsafe extern "system" fn(
        this: *mut ::core::ffi::c_void,
        result__: *mut ::windows::UI::Color,
    ) -> ::windows::core::HRESULT,
    pub SetColor: unsafe extern "system" fn(
        this: *mut ::core::ffi::c_void,
        value: ::windows::UI::Color,
    ) -> ::windows::core::HRESULT,
}
#[doc(hidden)]
#[repr(transparent)]
pub struct IAmbientLight2(::windows::core::IUnknown);
unsafe impl ::windows::core::Vtable for IAmbientLight2 {
    type Vtable = IAmbientLight2_Vtbl;
}
unsafe impl ::windows::core::Interface for IAmbientLight2 {
    const IID: ::windows::core::GUID =
        ::windows::core::GUID::from_u128(0x3356f963_040c_54d4_9dfc_b61c51aaadd1);
}
#[repr(C)]
#[doc(hidden)]
pub struct IAmbientLight2_Vtbl {
    pub base__: ::windows::core::IInspectable_Vtbl,
    pub Intensity: unsafe extern "system" fn(
        this: *mut ::core::ffi::c_void,
        result__: *mut f32,
    ) -> ::windows::core::HRESULT,
    pub SetIntensity: unsafe extern "system" fn(
        this: *mut ::core::ffi::c_void,
        value: f32,
    ) -> ::windows::core::HRESULT,
}
#[doc(hidden)]
#[repr(transparent)]
pub struct IAnimationController(::windows::core::IUnknown);
unsafe impl ::windows::core::Vtable for IAnimationController {
    type Vtable = IAnimationController_Vtbl;
}
unsafe impl ::windows::core::Interface for IAnimationController {
    const IID: ::windows::core::GUID =
        ::windows::core::GUID::from_u128(0xbd0f88a8_a415_5322_8c3d_1a6d9192754f);
}
#[repr(C)]
#[doc(hidden)]
pub struct IAnimationController_Vtbl {
    pub base__: ::windows::core::IInspectable_Vtbl,
    pub PlaybackRate: unsafe extern "system" fn(
        this: *mut ::core::ffi::c_void,
        result__: *mut f32,
    ) -> ::windows::core::HRESULT,
    pub SetPlaybackRate: unsafe extern "system" fn(
        this: *mut ::core::ffi::c_void,
        value: f32,
    ) -> ::windows::core::HRESULT,
    pub Progress: unsafe extern "system" fn(
        this: *mut ::core::ffi::c_void,
        result__: *mut f32,
    ) -> ::windows::core::HRESULT,
    pub SetProgress: unsafe extern "system" fn(
        this: *mut ::core::ffi::c_void,
        value: f32,
    ) -> ::windows::core::HRESULT,
    pub ProgressBehavior: unsafe extern "system" fn(
        this: *mut ::core::ffi::c_void,
        result__: *mut AnimationControllerProgressBehavior,
    ) -> ::windows::core::HRESULT,
    pub SetProgressBehavior: unsafe extern "system" fn(
        this: *mut ::core::ffi::c_void,
        value: AnimationControllerProgressBehavior,
    ) -> ::windows::core::HRESULT,
    pub Pause:
        unsafe extern "system" fn(this: *mut ::core::ffi::c_void) -> ::windows::core::HRESULT,
    pub Resume:
        unsafe extern "system" fn(this: *mut ::core::ffi::c_void) -> ::windows::core::HRESULT,
}
#[doc(hidden)]
#[repr(transparent)]
pub struct IAnimationControllerStatics(::windows::core::IUnknown);
unsafe impl ::windows::core::Vtable for IAnimationControllerStatics {
    type Vtable = IAnimationControllerStatics_Vtbl;
}
unsafe impl ::windows::core::Interface for IAnimationControllerStatics {
    const IID: ::windows::core::GUID =
        ::windows::core::GUID::from_u128(0xb63b0fb6_286b_57af_b096_16066d43dc00);
}
#[repr(C)]
#[doc(hidden)]
pub struct IAnimationControllerStatics_Vtbl {
    pub base__: ::windows::core::IInspectable_Vtbl,
    pub MaxPlaybackRate: unsafe extern "system" fn(
        this: *mut ::core::ffi::c_void,
        result__: *mut f32,
    ) -> ::windows::core::HRESULT,
    pub MinPlaybackRate: unsafe extern "system" fn(
        this: *mut ::core::ffi::c_void,
        result__: *mut f32,
    ) -> ::windows::core::HRESULT,
}
#[doc = "*Required features: `\"UI_Composition\"`*"]
#[repr(transparent)]
pub struct IAnimationObject(::windows::core::IUnknown);
impl IAnimationObject {
    pub fn PopulatePropertyInfo(
        &self,
        propertyname: &::windows::core::HSTRING,
        propertyinfo: &AnimationPropertyInfo,
    ) -> ::windows::core::Result<()> {
        let this = self;
        unsafe {
            (::windows::core::Vtable::vtable(this).PopulatePropertyInfo)(
                ::windows::core::Vtable::as_raw(this),
                ::core::mem::transmute_copy(propertyname),
                ::core::mem::transmute_copy(propertyinfo),
            )
            .ok()
        }
    }
}
::windows::core::interface_hierarchy!(
    IAnimationObject,
    ::windows::core::IUnknown,
    ::windows::core::IInspectable
);
impl ::core::clone::Clone for IAnimationObject {
    fn clone(&self) -> Self {
        Self(self.0.clone())
    }
}
impl ::core::cmp::PartialEq for IAnimationObject {
    fn eq(&self, other: &Self) -> bool {
        self.0 == other.0
    }
}
impl ::core::cmp::Eq for IAnimationObject {}
impl ::core::fmt::Debug for IAnimationObject {
    fn fmt(&self, f: &mut ::core::fmt::Formatter<'_>) -> ::core::fmt::Result {
        f.debug_tuple("IAnimationObject").field(&self.0).finish()
    }
}
unsafe impl ::windows::core::RuntimeType for IAnimationObject {
    const SIGNATURE: ::windows::core::ConstBuffer =
        ::windows::core::ConstBuffer::from_slice(b"{8f56119d-b96d-58d0-9916-d1c5e390f890}");
    type DefaultType = ::core::option::Option<Self>;
    fn from_default(from: &Self::DefaultType) -> ::windows::core::Result<Self> {
        from.as_ref().cloned().ok_or(::windows::core::Error::OK)
    }
}
unsafe impl ::windows::core::Vtable for IAnimationObject {
    type Vtable = IAnimationObject_Vtbl;
}
unsafe impl ::windows::core::Interface for IAnimationObject {
    const IID: ::windows::core::GUID =
        ::windows::core::GUID::from_u128(0x8f56119d_b96d_58d0_9916_d1c5e390f890);
}
#[repr(C)]
#[doc(hidden)]
pub struct IAnimationObject_Vtbl {
    pub base__: ::windows::core::IInspectable_Vtbl,
    pub PopulatePropertyInfo: unsafe extern "system" fn(
        this: *mut ::core::ffi::c_void,
        propertyname: ::core::mem::ManuallyDrop<::windows::core::HSTRING>,
        propertyinfo: *mut ::core::ffi::c_void,
    ) -> ::windows::core::HRESULT,
}
#[doc(hidden)]
#[repr(transparent)]
pub struct IAnimationPropertyInfo(::windows::core::IUnknown);
unsafe impl ::windows::core::Vtable for IAnimationPropertyInfo {
    type Vtable = IAnimationPropertyInfo_Vtbl;
}
unsafe impl ::windows::core::Interface for IAnimationPropertyInfo {
    const IID: ::windows::core::GUID =
        ::windows::core::GUID::from_u128(0x3d721a2b_9ccd_57bd_b6c2_ce9e04ae3606);
}
#[repr(C)]
#[doc(hidden)]
pub struct IAnimationPropertyInfo_Vtbl {
    pub base__: ::windows::core::IInspectable_Vtbl,
    pub AccessMode: unsafe extern "system" fn(
        this: *mut ::core::ffi::c_void,
        result__: *mut AnimationPropertyAccessMode,
    ) -> ::windows::core::HRESULT,
    pub SetAccessMode: unsafe extern "system" fn(
        this: *mut ::core::ffi::c_void,
        value: AnimationPropertyAccessMode,
    ) -> ::windows::core::HRESULT,
}
#[doc(hidden)]
#[repr(transparent)]
pub struct IAnimationPropertyInfo2(::windows::core::IUnknown);
unsafe impl ::windows::core::Vtable for IAnimationPropertyInfo2 {
    type Vtable = IAnimationPropertyInfo2_Vtbl;
}
unsafe impl ::windows::core::Interface for IAnimationPropertyInfo2 {
    const IID: ::windows::core::GUID =
        ::windows::core::GUID::from_u128(0xed14fb09_de28_540d_9311_80cfdcc97338);
}
#[repr(C)]
#[doc(hidden)]
pub struct IAnimationPropertyInfo2_Vtbl {
    pub base__: ::windows::core::IInspectable_Vtbl,
    pub GetResolvedCompositionObject: unsafe extern "system" fn(
        this: *mut ::core::ffi::c_void,
        result__: *mut *mut ::core::ffi::c_void,
    ) -> ::windows::core::HRESULT,
    pub GetResolvedCompositionObjectProperty: unsafe extern "system" fn(
        this: *mut ::core::ffi::c_void,
        result__: *mut ::core::mem::ManuallyDrop<::windows::core::HSTRING>,
    )
        -> ::windows::core::HRESULT,
}
#[doc(hidden)]
#[repr(transparent)]
pub struct IBackEasingFunction(::windows::core::IUnknown);
unsafe impl ::windows::core::Vtable for IBackEasingFunction {
    type Vtable = IBackEasingFunction_Vtbl;
}
unsafe impl ::windows::core::Interface for IBackEasingFunction {
    const IID: ::windows::core::GUID =
        ::windows::core::GUID::from_u128(0x27c75bab_317a_5362_bf25_fffbb98a51b9);
}
#[repr(C)]
#[doc(hidden)]
pub struct IBackEasingFunction_Vtbl {
    pub base__: ::windows::core::IInspectable_Vtbl,
    pub Mode: unsafe extern "system" fn(
        this: *mut ::core::ffi::c_void,
        result__: *mut CompositionEasingFunctionMode,
    ) -> ::windows::core::HRESULT,
    pub Amplitude: unsafe extern "system" fn(
        this: *mut ::core::ffi::c_void,
        result__: *mut f32,
    ) -> ::windows::core::HRESULT,
}
#[doc(hidden)]
#[repr(transparent)]
pub struct IBooleanKeyFrameAnimation(::windows::core::IUnknown);
unsafe impl ::windows::core::Vtable for IBooleanKeyFrameAnimation {
    type Vtable = IBooleanKeyFrameAnimation_Vtbl;
}
unsafe impl ::windows::core::Interface for IBooleanKeyFrameAnimation {
    const IID: ::windows::core::GUID =
        ::windows::core::GUID::from_u128(0x7fe485e9_e874_5ff3_8ddc_826c3818bfc3);
}
#[repr(C)]
#[doc(hidden)]
pub struct IBooleanKeyFrameAnimation_Vtbl {
    pub base__: ::windows::core::IInspectable_Vtbl,
    pub InsertKeyFrame: unsafe extern "system" fn(
        this: *mut ::core::ffi::c_void,
        normalizedprogresskey: f32,
        value: bool,
    ) -> ::windows::core::HRESULT,
}
#[doc(hidden)]
#[repr(transparent)]
pub struct IBounceEasingFunction(::windows::core::IUnknown);
unsafe impl ::windows::core::Vtable for IBounceEasingFunction {
    type Vtable = IBounceEasingFunction_Vtbl;
}
unsafe impl ::windows::core::Interface for IBounceEasingFunction {
    const IID: ::windows::core::GUID =
        ::windows::core::GUID::from_u128(0xfa11f3c0_697b_562f_af46_c6af666b6ec4);
}
#[repr(C)]
#[doc(hidden)]
pub struct IBounceEasingFunction_Vtbl {
    pub base__: ::windows::core::IInspectable_Vtbl,
    pub Mode: unsafe extern "system" fn(
        this: *mut ::core::ffi::c_void,
        result__: *mut CompositionEasingFunctionMode,
    ) -> ::windows::core::HRESULT,
    pub Bounces: unsafe extern "system" fn(
        this: *mut ::core::ffi::c_void,
        result__: *mut i32,
    ) -> ::windows::core::HRESULT,
    pub Bounciness: unsafe extern "system" fn(
        this: *mut ::core::ffi::c_void,
        result__: *mut f32,
    ) -> ::windows::core::HRESULT,
}
#[doc(hidden)]
#[repr(transparent)]
pub struct IBounceScalarNaturalMotionAnimation(::windows::core::IUnknown);
unsafe impl ::windows::core::Vtable for IBounceScalarNaturalMotionAnimation {
    type Vtable = IBounceScalarNaturalMotionAnimation_Vtbl;
}
unsafe impl ::windows::core::Interface for IBounceScalarNaturalMotionAnimation {
    const IID: ::windows::core::GUID =
        ::windows::core::GUID::from_u128(0x1c0c4b76_c4d6_5dd9_8dd6_dbe35c7b7e55);
}
#[repr(C)]
#[doc(hidden)]
pub struct IBounceScalarNaturalMotionAnimation_Vtbl {
    pub base__: ::windows::core::IInspectable_Vtbl,
    pub Acceleration: unsafe extern "system" fn(
        this: *mut ::core::ffi::c_void,
        result__: *mut f32,
    ) -> ::windows::core::HRESULT,
    pub SetAcceleration: unsafe extern "system" fn(
        this: *mut ::core::ffi::c_void,
        value: f32,
    ) -> ::windows::core::HRESULT,
    pub Restitution: unsafe extern "system" fn(
        this: *mut ::core::ffi::c_void,
        result__: *mut f32,
    ) -> ::windows::core::HRESULT,
    pub SetRestitution: unsafe extern "system" fn(
        this: *mut ::core::ffi::c_void,
        value: f32,
    ) -> ::windows::core::HRESULT,
}
#[doc(hidden)]
#[repr(transparent)]
pub struct IBounceVector2NaturalMotionAnimation(::windows::core::IUnknown);
unsafe impl ::windows::core::Vtable for IBounceVector2NaturalMotionAnimation {
    type Vtable = IBounceVector2NaturalMotionAnimation_Vtbl;
}
unsafe impl ::windows::core::Interface for IBounceVector2NaturalMotionAnimation {
    const IID: ::windows::core::GUID =
        ::windows::core::GUID::from_u128(0xec528d1f_22e2_573e_ab87_757071e50012);
}
#[repr(C)]
#[doc(hidden)]
pub struct IBounceVector2NaturalMotionAnimation_Vtbl {
    pub base__: ::windows::core::IInspectable_Vtbl,
    pub Acceleration: unsafe extern "system" fn(
        this: *mut ::core::ffi::c_void,
        result__: *mut f32,
    ) -> ::windows::core::HRESULT,
    pub SetAcceleration: unsafe extern "system" fn(
        this: *mut ::core::ffi::c_void,
        value: f32,
    ) -> ::windows::core::HRESULT,
    pub Restitution: unsafe extern "system" fn(
        this: *mut ::core::ffi::c_void,
        result__: *mut f32,
    ) -> ::windows::core::HRESULT,
    pub SetRestitution: unsafe extern "system" fn(
        this: *mut ::core::ffi::c_void,
        value: f32,
    ) -> ::windows::core::HRESULT,
}
#[doc(hidden)]
#[repr(transparent)]
pub struct IBounceVector3NaturalMotionAnimation(::windows::core::IUnknown);
unsafe impl ::windows::core::Vtable for IBounceVector3NaturalMotionAnimation {
    type Vtable = IBounceVector3NaturalMotionAnimation_Vtbl;
}
unsafe impl ::windows::core::Interface for IBounceVector3NaturalMotionAnimation {
    const IID: ::windows::core::GUID =
        ::windows::core::GUID::from_u128(0xe3e2ee98_1211_586d_8a6d_fea5efc3957f);
}
#[repr(C)]
#[doc(hidden)]
pub struct IBounceVector3NaturalMotionAnimation_Vtbl {
    pub base__: ::windows::core::IInspectable_Vtbl,
    pub Acceleration: unsafe extern "system" fn(
        this: *mut ::core::ffi::c_void,
        result__: *mut f32,
    ) -> ::windows::core::HRESULT,
    pub SetAcceleration: unsafe extern "system" fn(
        this: *mut ::core::ffi::c_void,
        value: f32,
    ) -> ::windows::core::HRESULT,
    pub Restitution: unsafe extern "system" fn(
        this: *mut ::core::ffi::c_void,
        result__: *mut f32,
    ) -> ::windows::core::HRESULT,
    pub SetRestitution: unsafe extern "system" fn(
        this: *mut ::core::ffi::c_void,
        value: f32,
    ) -> ::windows::core::HRESULT,
}
#[doc(hidden)]
#[repr(transparent)]
pub struct ICircleEasingFunction(::windows::core::IUnknown);
unsafe impl ::windows::core::Vtable for ICircleEasingFunction {
    type Vtable = ICircleEasingFunction_Vtbl;
}
unsafe impl ::windows::core::Interface for ICircleEasingFunction {
    const IID: ::windows::core::GUID =
        ::windows::core::GUID::from_u128(0x414b172c_bf27_5ead_93e0_35915322db2c);
}
#[repr(C)]
#[doc(hidden)]
pub struct ICircleEasingFunction_Vtbl {
    pub base__: ::windows::core::IInspectable_Vtbl,
    pub Mode: unsafe extern "system" fn(
        this: *mut ::core::ffi::c_void,
        result__: *mut CompositionEasingFunctionMode,
    ) -> ::windows::core::HRESULT,
}
#[doc(hidden)]
#[repr(transparent)]
pub struct IColorKeyFrameAnimation(::windows::core::IUnknown);
unsafe impl ::windows::core::Vtable for IColorKeyFrameAnimation {
    type Vtable = IColorKeyFrameAnimation_Vtbl;
}
unsafe impl ::windows::core::Interface for IColorKeyFrameAnimation {
    const IID: ::windows::core::GUID =
        ::windows::core::GUID::from_u128(0xf0237928_353c_5867_be93_71547e989f44);
}
#[repr(C)]
#[doc(hidden)]
pub struct IColorKeyFrameAnimation_Vtbl {
    pub base__: ::windows::core::IInspectable_Vtbl,
    pub InterpolationColorSpace: unsafe extern "system" fn(
        this: *mut ::core::ffi::c_void,
        result__: *mut CompositionColorSpace,
    ) -> ::windows::core::HRESULT,
    pub SetInterpolationColorSpace: unsafe extern "system" fn(
        this: *mut ::core::ffi::c_void,
        value: CompositionColorSpace,
    ) -> ::windows::core::HRESULT,
    pub InsertKeyFrame: unsafe extern "system" fn(
        this: *mut ::core::ffi::c_void,
        normalizedprogresskey: f32,
        value: ::windows::UI::Color,
    ) -> ::windows::core::HRESULT,
    pub InsertKeyFrameWithEasingFunction: unsafe extern "system" fn(
        this: *mut ::core::ffi::c_void,
        normalizedprogresskey: f32,
        value: ::windows::UI::Color,
        easingfunction: *mut ::core::ffi::c_void,
    )
        -> ::windows::core::HRESULT,
}
#[doc(hidden)]
#[repr(transparent)]
pub struct ICompositionAnimation(::windows::core::IUnknown);
unsafe impl ::windows::core::Vtable for ICompositionAnimation {
    type Vtable = ICompositionAnimation_Vtbl;
}
unsafe impl ::windows::core::Interface for ICompositionAnimation {
    const IID: ::windows::core::GUID =
        ::windows::core::GUID::from_u128(0xa829ccc8_6fde_5b90_ad37_efd307e1b631);
}
#[repr(C)]
#[doc(hidden)]
pub struct ICompositionAnimation_Vtbl {
    pub base__: ::windows::core::IInspectable_Vtbl,
    pub ClearAllParameters:
        unsafe extern "system" fn(this: *mut ::core::ffi::c_void) -> ::windows::core::HRESULT,
    pub ClearParameter: unsafe extern "system" fn(
        this: *mut ::core::ffi::c_void,
        key: ::core::mem::ManuallyDrop<::windows::core::HSTRING>,
    ) -> ::windows::core::HRESULT,
    pub SetColorParameter: unsafe extern "system" fn(
        this: *mut ::core::ffi::c_void,
        key: ::core::mem::ManuallyDrop<::windows::core::HSTRING>,
        value: ::windows::UI::Color,
    ) -> ::windows::core::HRESULT,
    pub SetMatrix3x2Parameter: unsafe extern "system" fn(
        this: *mut ::core::ffi::c_void,
        key: ::core::mem::ManuallyDrop<::windows::core::HSTRING>,
        value: ::windows::Foundation::Numerics::Matrix3x2,
    ) -> ::windows::core::HRESULT,
    pub SetMatrix4x4Parameter: unsafe extern "system" fn(
        this: *mut ::core::ffi::c_void,
        key: ::core::mem::ManuallyDrop<::windows::core::HSTRING>,
        value: ::windows::Foundation::Numerics::Matrix4x4,
    ) -> ::windows::core::HRESULT,
    pub SetQuaternionParameter: unsafe extern "system" fn(
        this: *mut ::core::ffi::c_void,
        key: ::core::mem::ManuallyDrop<::windows::core::HSTRING>,
        value: ::windows::Foundation::Numerics::Quaternion,
    ) -> ::windows::core::HRESULT,
    pub SetReferenceParameter: unsafe extern "system" fn(
        this: *mut ::core::ffi::c_void,
        key: ::core::mem::ManuallyDrop<::windows::core::HSTRING>,
        compositionobject: *mut ::core::ffi::c_void,
    ) -> ::windows::core::HRESULT,
    pub SetScalarParameter: unsafe extern "system" fn(
        this: *mut ::core::ffi::c_void,
        key: ::core::mem::ManuallyDrop<::windows::core::HSTRING>,
        value: f32,
    ) -> ::windows::core::HRESULT,
    pub SetVector2Parameter: unsafe extern "system" fn(
        this: *mut ::core::ffi::c_void,
        key: ::core::mem::ManuallyDrop<::windows::core::HSTRING>,
        value: ::windows::Foundation::Numerics::Vector2,
    ) -> ::windows::core::HRESULT,
    pub SetVector3Parameter: unsafe extern "system" fn(
        this: *mut ::core::ffi::c_void,
        key: ::core::mem::ManuallyDrop<::windows::core::HSTRING>,
        value: ::windows::Foundation::Numerics::Vector3,
    ) -> ::windows::core::HRESULT,
    pub SetVector4Parameter: unsafe extern "system" fn(
        this: *mut ::core::ffi::c_void,
        key: ::core::mem::ManuallyDrop<::windows::core::HSTRING>,
        value: ::windows::Foundation::Numerics::Vector4,
    ) -> ::windows::core::HRESULT,
}
#[doc(hidden)]
#[repr(transparent)]
pub struct ICompositionAnimation2(::windows::core::IUnknown);
unsafe impl ::windows::core::Vtable for ICompositionAnimation2 {
    type Vtable = ICompositionAnimation2_Vtbl;
}
unsafe impl ::windows::core::Interface for ICompositionAnimation2 {
    const IID: ::windows::core::GUID =
        ::windows::core::GUID::from_u128(0x0926eb58_8965_5c74_bdac_852ebb5e8542);
}
#[repr(C)]
#[doc(hidden)]
pub struct ICompositionAnimation2_Vtbl {
    pub base__: ::windows::core::IInspectable_Vtbl,
    pub SetBooleanParameter: unsafe extern "system" fn(
        this: *mut ::core::ffi::c_void,
        key: ::core::mem::ManuallyDrop<::windows::core::HSTRING>,
        value: bool,
    ) -> ::windows::core::HRESULT,
    pub Target: unsafe extern "system" fn(
        this: *mut ::core::ffi::c_void,
        result__: *mut ::core::mem::ManuallyDrop<::windows::core::HSTRING>,
    ) -> ::windows::core::HRESULT,
    pub SetTarget: unsafe extern "system" fn(
        this: *mut ::core::ffi::c_void,
        value: ::core::mem::ManuallyDrop<::windows::core::HSTRING>,
    ) -> ::windows::core::HRESULT,
}
#[doc(hidden)]
#[repr(transparent)]
pub struct ICompositionAnimation3(::windows::core::IUnknown);
unsafe impl ::windows::core::Vtable for ICompositionAnimation3 {
    type Vtable = ICompositionAnimation3_Vtbl;
}
unsafe impl ::windows::core::Interface for ICompositionAnimation3 {
    const IID: ::windows::core::GUID =
        ::windows::core::GUID::from_u128(0x60063f53_4167_5914_a2f1_9efcc2f86c76);
}
#[repr(C)]
#[doc(hidden)]
pub struct ICompositionAnimation3_Vtbl {
    pub base__: ::windows::core::IInspectable_Vtbl,
    pub InitialValueExpressions: unsafe extern "system" fn(
        this: *mut ::core::ffi::c_void,
        result__: *mut *mut ::core::ffi::c_void,
    ) -> ::windows::core::HRESULT,
}
#[doc(hidden)]
#[repr(transparent)]
pub struct ICompositionAnimation4(::windows::core::IUnknown);
unsafe impl ::windows::core::Vtable for ICompositionAnimation4 {
    type Vtable = ICompositionAnimation4_Vtbl;
}
unsafe impl ::windows::core::Interface for ICompositionAnimation4 {
    const IID: ::windows::core::GUID =
        ::windows::core::GUID::from_u128(0xc4101447_dfe4_597f_b5bc_96443f5d18a1);
}
#[repr(C)]
#[doc(hidden)]
pub struct ICompositionAnimation4_Vtbl {
    pub base__: ::windows::core::IInspectable_Vtbl,
    pub SetExpressionReferenceParameter: unsafe extern "system" fn(
        this: *mut ::core::ffi::c_void,
        parametername: ::core::mem::ManuallyDrop<::windows::core::HSTRING>,
        source: *mut ::core::ffi::c_void,
    ) -> ::windows::core::HRESULT,
}
#[doc = "*Required features: `\"UI_Composition\"`*"]
#[repr(transparent)]
pub struct ICompositionAnimationBase(::windows::core::IUnknown);
impl ICompositionAnimationBase {}
::windows::core::interface_hierarchy!(
    ICompositionAnimationBase,
    ::windows::core::IUnknown,
    ::windows::core::IInspectable
);
impl ::core::clone::Clone for ICompositionAnimationBase {
    fn clone(&self) -> Self {
        Self(self.0.clone())
    }
}
impl ::core::cmp::PartialEq for ICompositionAnimationBase {
    fn eq(&self, other: &Self) -> bool {
        self.0 == other.0
    }
}
impl ::core::cmp::Eq for ICompositionAnimationBase {}
impl ::core::fmt::Debug for ICompositionAnimationBase {
    fn fmt(&self, f: &mut ::core::fmt::Formatter<'_>) -> ::core::fmt::Result {
        f.debug_tuple("ICompositionAnimationBase").field(&self.0).finish()
    }
}
unsafe impl ::windows::core::RuntimeType for ICompositionAnimationBase {
    const SIGNATURE: ::windows::core::ConstBuffer =
        ::windows::core::ConstBuffer::from_slice(b"{a77c0e5a-f059-4e85-bcef-c068694cec78}");
    type DefaultType = ::core::option::Option<Self>;
    fn from_default(from: &Self::DefaultType) -> ::windows::core::Result<Self> {
        from.as_ref().cloned().ok_or(::windows::core::Error::OK)
    }
}
unsafe impl ::windows::core::Vtable for ICompositionAnimationBase {
    type Vtable = ICompositionAnimationBase_Vtbl;
}
unsafe impl ::windows::core::Interface for ICompositionAnimationBase {
    const IID: ::windows::core::GUID =
        ::windows::core::GUID::from_u128(0xa77c0e5a_f059_4e85_bcef_c068694cec78);
}
#[repr(C)]
#[doc(hidden)]
pub struct ICompositionAnimationBase_Vtbl {
    pub base__: ::windows::core::IInspectable_Vtbl,
}
#[doc(hidden)]
#[repr(transparent)]
pub struct ICompositionAnimationFactory(::windows::core::IUnknown);
unsafe impl ::windows::core::Vtable for ICompositionAnimationFactory {
    type Vtable = ICompositionAnimationFactory_Vtbl;
}
unsafe impl ::windows::core::Interface for ICompositionAnimationFactory {
    const IID: ::windows::core::GUID =
        ::windows::core::GUID::from_u128(0x2ed278ca_4cca_5f7f_8d47_f930552a7769);
}
#[repr(C)]
#[doc(hidden)]
pub struct ICompositionAnimationFactory_Vtbl {
    pub base__: ::windows::core::IInspectable_Vtbl,
}
#[doc(hidden)]
#[repr(transparent)]
pub struct ICompositionAnimationGroup(::windows::core::IUnknown);
unsafe impl ::windows::core::Vtable for ICompositionAnimationGroup {
    type Vtable = ICompositionAnimationGroup_Vtbl;
}
unsafe impl ::windows::core::Interface for ICompositionAnimationGroup {
    const IID: ::windows::core::GUID =
        ::windows::core::GUID::from_u128(0xa51cdcac_b972_5ae7_81d0_9d91c71ecb7a);
}
#[repr(C)]
#[doc(hidden)]
pub struct ICompositionAnimationGroup_Vtbl {
    pub base__: ::windows::core::IInspectable_Vtbl,
    pub Count: unsafe extern "system" fn(
        this: *mut ::core::ffi::c_void,
        result__: *mut i32,
    ) -> ::windows::core::HRESULT,
    pub Add: unsafe extern "system" fn(
        this: *mut ::core::ffi::c_void,
        value: *mut ::core::ffi::c_void,
    ) -> ::windows::core::HRESULT,
    pub Remove: unsafe extern "system" fn(
        this: *mut ::core::ffi::c_void,
        value: *mut ::core::ffi::c_void,
    ) -> ::windows::core::HRESULT,
    pub RemoveAll:
        unsafe extern "system" fn(this: *mut ::core::ffi::c_void) -> ::windows::core::HRESULT,
}
#[doc(hidden)]
#[repr(transparent)]
pub struct ICompositionApiInformationStatics(::windows::core::IUnknown);
unsafe impl ::windows::core::Vtable for ICompositionApiInformationStatics {
    type Vtable = ICompositionApiInformationStatics_Vtbl;
}
unsafe impl ::windows::core::Interface for ICompositionApiInformationStatics {
    const IID: ::windows::core::GUID =
        ::windows::core::GUID::from_u128(0x85260ed3_365b_5e70_b79a_f9f1d10fa4b5);
}
#[repr(C)]
#[doc(hidden)]
pub struct ICompositionApiInformationStatics_Vtbl {
    pub base__: ::windows::core::IInspectable_Vtbl,
    pub ApiVersion: unsafe extern "system" fn(
        this: *mut ::core::ffi::c_void,
        result__: *mut u64,
    ) -> ::windows::core::HRESULT,
}
#[doc(hidden)]
#[repr(transparent)]
pub struct ICompositionBackdropBrush(::windows::core::IUnknown);
unsafe impl ::windows::core::Vtable for ICompositionBackdropBrush {
    type Vtable = ICompositionBackdropBrush_Vtbl;
}
unsafe impl ::windows::core::Interface for ICompositionBackdropBrush {
    const IID: ::windows::core::GUID =
        ::windows::core::GUID::from_u128(0x6c866bb3_172a_570c_82ac_bf9848d99a59);
}
#[repr(C)]
#[doc(hidden)]
pub struct ICompositionBackdropBrush_Vtbl {
    pub base__: ::windows::core::IInspectable_Vtbl,
}
#[doc(hidden)]
#[repr(transparent)]
pub struct ICompositionBatchCompletedEventArgs(::windows::core::IUnknown);
unsafe impl ::windows::core::Vtable for ICompositionBatchCompletedEventArgs {
    type Vtable = ICompositionBatchCompletedEventArgs_Vtbl;
}
unsafe impl ::windows::core::Interface for ICompositionBatchCompletedEventArgs {
    const IID: ::windows::core::GUID =
        ::windows::core::GUID::from_u128(0xac400334_4358_5fb0_bfc3_117fe581998f);
}
#[repr(C)]
#[doc(hidden)]
pub struct ICompositionBatchCompletedEventArgs_Vtbl {
    pub base__: ::windows::core::IInspectable_Vtbl,
}
#[doc(hidden)]
#[repr(transparent)]
pub struct ICompositionBrush(::windows::core::IUnknown);
unsafe impl ::windows::core::Vtable for ICompositionBrush {
    type Vtable = ICompositionBrush_Vtbl;
}
unsafe impl ::windows::core::Interface for ICompositionBrush {
    const IID: ::windows::core::GUID =
        ::windows::core::GUID::from_u128(0x483924e7_99a5_5377_968b_dec6d40bbccd);
}
#[repr(C)]
#[doc(hidden)]
pub struct ICompositionBrush_Vtbl {
    pub base__: ::windows::core::IInspectable_Vtbl,
}
#[doc(hidden)]
#[repr(transparent)]
pub struct ICompositionBrushFactory(::windows::core::IUnknown);
unsafe impl ::windows::core::Vtable for ICompositionBrushFactory {
    type Vtable = ICompositionBrushFactory_Vtbl;
}
unsafe impl ::windows::core::Interface for ICompositionBrushFactory {
    const IID: ::windows::core::GUID =
        ::windows::core::GUID::from_u128(0xabf2b354_7130_53d9_8324_365d7e02ede7);
}
#[repr(C)]
#[doc(hidden)]
pub struct ICompositionBrushFactory_Vtbl {
    pub base__: ::windows::core::IInspectable_Vtbl,
}
#[doc(hidden)]
#[repr(transparent)]
pub struct ICompositionCapabilities(::windows::core::IUnknown);
unsafe impl ::windows::core::Vtable for ICompositionCapabilities {
    type Vtable = ICompositionCapabilities_Vtbl;
}
unsafe impl ::windows::core::Interface for ICompositionCapabilities {
    const IID: ::windows::core::GUID =
        ::windows::core::GUID::from_u128(0x7689bf12_75c0_52ea_81cb_463ed1c16c45);
}
#[repr(C)]
#[doc(hidden)]
pub struct ICompositionCapabilities_Vtbl {
    pub base__: ::windows::core::IInspectable_Vtbl,
    pub AreEffectsSupported: unsafe extern "system" fn(
        this: *mut ::core::ffi::c_void,
        result__: *mut bool,
    ) -> ::windows::core::HRESULT,
    pub AreEffectsFast: unsafe extern "system" fn(
        this: *mut ::core::ffi::c_void,
        result__: *mut bool,
    ) -> ::windows::core::HRESULT,
    pub Changed: unsafe extern "system" fn(
        this: *mut ::core::ffi::c_void,
        handler: *mut ::core::ffi::c_void,
        result__: *mut ::windows::Foundation::EventRegistrationToken,
    ) -> ::windows::core::HRESULT,
    pub RemoveChanged: unsafe extern "system" fn(
        this: *mut ::core::ffi::c_void,
        token: ::windows::Foundation::EventRegistrationToken,
    ) -> ::windows::core::HRESULT,
}
#[doc(hidden)]
#[repr(transparent)]
pub struct ICompositionClip(::windows::core::IUnknown);
unsafe impl ::windows::core::Vtable for ICompositionClip {
    type Vtable = ICompositionClip_Vtbl;
}
unsafe impl ::windows::core::Interface for ICompositionClip {
    const IID: ::windows::core::GUID =
        ::windows::core::GUID::from_u128(0xb66b55cb_b5a5_5bee_8972_ae78233cb34c);
}
#[repr(C)]
#[doc(hidden)]
pub struct ICompositionClip_Vtbl {
    pub base__: ::windows::core::IInspectable_Vtbl,
}
#[doc(hidden)]
#[repr(transparent)]
pub struct ICompositionClip2(::windows::core::IUnknown);
unsafe impl ::windows::core::Vtable for ICompositionClip2 {
    type Vtable = ICompositionClip2_Vtbl;
}
unsafe impl ::windows::core::Interface for ICompositionClip2 {
    const IID: ::windows::core::GUID =
        ::windows::core::GUID::from_u128(0xcdf6bf80_afd7_57dc_8148_6ccbbb5d78bb);
}
#[repr(C)]
#[doc(hidden)]
pub struct ICompositionClip2_Vtbl {
    pub base__: ::windows::core::IInspectable_Vtbl,
    pub AnchorPoint: unsafe extern "system" fn(
        this: *mut ::core::ffi::c_void,
        result__: *mut ::windows::Foundation::Numerics::Vector2,
    ) -> ::windows::core::HRESULT,
    pub SetAnchorPoint: unsafe extern "system" fn(
        this: *mut ::core::ffi::c_void,
        value: ::windows::Foundation::Numerics::Vector2,
    ) -> ::windows::core::HRESULT,
    pub CenterPoint: unsafe extern "system" fn(
        this: *mut ::core::ffi::c_void,
        result__: *mut ::windows::Foundation::Numerics::Vector2,
    ) -> ::windows::core::HRESULT,
    pub SetCenterPoint: unsafe extern "system" fn(
        this: *mut ::core::ffi::c_void,
        value: ::windows::Foundation::Numerics::Vector2,
    ) -> ::windows::core::HRESULT,
    pub Offset: unsafe extern "system" fn(
        this: *mut ::core::ffi::c_void,
        result__: *mut ::windows::Foundation::Numerics::Vector2,
    ) -> ::windows::core::HRESULT,
    pub SetOffset: unsafe extern "system" fn(
        this: *mut ::core::ffi::c_void,
        value: ::windows::Foundation::Numerics::Vector2,
    ) -> ::windows::core::HRESULT,
    pub RotationAngle: unsafe extern "system" fn(
        this: *mut ::core::ffi::c_void,
        result__: *mut f32,
    ) -> ::windows::core::HRESULT,
    pub SetRotationAngle: unsafe extern "system" fn(
        this: *mut ::core::ffi::c_void,
        value: f32,
    ) -> ::windows::core::HRESULT,
    pub RotationAngleInDegrees: unsafe extern "system" fn(
        this: *mut ::core::ffi::c_void,
        result__: *mut f32,
    ) -> ::windows::core::HRESULT,
    pub SetRotationAngleInDegrees: unsafe extern "system" fn(
        this: *mut ::core::ffi::c_void,
        value: f32,
    ) -> ::windows::core::HRESULT,
    pub Scale: unsafe extern "system" fn(
        this: *mut ::core::ffi::c_void,
        result__: *mut ::windows::Foundation::Numerics::Vector2,
    ) -> ::windows::core::HRESULT,
    pub SetScale: unsafe extern "system" fn(
        this: *mut ::core::ffi::c_void,
        value: ::windows::Foundation::Numerics::Vector2,
    ) -> ::windows::core::HRESULT,
    pub TransformMatrix: unsafe extern "system" fn(
        this: *mut ::core::ffi::c_void,
        result__: *mut ::windows::Foundation::Numerics::Matrix3x2,
    ) -> ::windows::core::HRESULT,
    pub SetTransformMatrix: unsafe extern "system" fn(
        this: *mut ::core::ffi::c_void,
        value: ::windows::Foundation::Numerics::Matrix3x2,
    ) -> ::windows::core::HRESULT,
}
#[doc(hidden)]
#[repr(transparent)]
pub struct ICompositionClipFactory(::windows::core::IUnknown);
unsafe impl ::windows::core::Vtable for ICompositionClipFactory {
    type Vtable = ICompositionClipFactory_Vtbl;
}
unsafe impl ::windows::core::Interface for ICompositionClipFactory {
    const IID: ::windows::core::GUID =
        ::windows::core::GUID::from_u128(0x611dec65_d302_52bc_92ab_a295bd141ae4);
}
#[repr(C)]
#[doc(hidden)]
pub struct ICompositionClipFactory_Vtbl {
    pub base__: ::windows::core::IInspectable_Vtbl,
}
#[doc(hidden)]
#[repr(transparent)]
pub struct ICompositionColorBrush(::windows::core::IUnknown);
unsafe impl ::windows::core::Vtable for ICompositionColorBrush {
    type Vtable = ICompositionColorBrush_Vtbl;
}
unsafe impl ::windows::core::Interface for ICompositionColorBrush {
    const IID: ::windows::core::GUID =
        ::windows::core::GUID::from_u128(0x3f8ffb69_3e71_55a7_8e79_f27a214c56ae);
}
#[repr(C)]
#[doc(hidden)]
pub struct ICompositionColorBrush_Vtbl {
    pub base__: ::windows::core::IInspectable_Vtbl,
    pub Color: unsafe extern "system" fn(
        this: *mut ::core::ffi::c_void,
        result__: *mut ::windows::UI::Color,
    ) -> ::windows::core::HRESULT,
    pub SetColor: unsafe extern "system" fn(
        this: *mut ::core::ffi::c_void,
        value: ::windows::UI::Color,
    ) -> ::windows::core::HRESULT,
}
#[doc(hidden)]
#[repr(transparent)]
pub struct ICompositionColorGradientStop(::windows::core::IUnknown);
unsafe impl ::windows::core::Vtable for ICompositionColorGradientStop {
    type Vtable = ICompositionColorGradientStop_Vtbl;
}
unsafe impl ::windows::core::Interface for ICompositionColorGradientStop {
    const IID: ::windows::core::GUID =
        ::windows::core::GUID::from_u128(0x868030d8_c5c0_5dd8_a765_e32cd3497aa9);
}
#[repr(C)]
#[doc(hidden)]
pub struct ICompositionColorGradientStop_Vtbl {
    pub base__: ::windows::core::IInspectable_Vtbl,
    pub Color: unsafe extern "system" fn(
        this: *mut ::core::ffi::c_void,
        result__: *mut ::windows::UI::Color,
    ) -> ::windows::core::HRESULT,
    pub SetColor: unsafe extern "system" fn(
        this: *mut ::core::ffi::c_void,
        value: ::windows::UI::Color,
    ) -> ::windows::core::HRESULT,
    pub Offset: unsafe extern "system" fn(
        this: *mut ::core::ffi::c_void,
        result__: *mut f32,
    ) -> ::windows::core::HRESULT,
    pub SetOffset: unsafe extern "system" fn(
        this: *mut ::core::ffi::c_void,
        value: f32,
    ) -> ::windows::core::HRESULT,
}
#[doc(hidden)]
#[repr(transparent)]
pub struct ICompositionColorGradientStopCollection(::windows::core::IUnknown);
unsafe impl ::windows::core::Vtable for ICompositionColorGradientStopCollection {
    type Vtable = ICompositionColorGradientStopCollection_Vtbl;
}
unsafe impl ::windows::core::Interface for ICompositionColorGradientStopCollection {
    const IID: ::windows::core::GUID =
        ::windows::core::GUID::from_u128(0x4794cb29_ce9d_5837_9fc9_847df3e197de);
}
#[repr(C)]
#[doc(hidden)]
pub struct ICompositionColorGradientStopCollection_Vtbl {
    pub base__: ::windows::core::IInspectable_Vtbl,
}
#[doc(hidden)]
#[repr(transparent)]
pub struct ICompositionCommitBatch(::windows::core::IUnknown);
unsafe impl ::windows::core::Vtable for ICompositionCommitBatch {
    type Vtable = ICompositionCommitBatch_Vtbl;
}
unsafe impl ::windows::core::Interface for ICompositionCommitBatch {
    const IID: ::windows::core::GUID =
        ::windows::core::GUID::from_u128(0xc4550fa8_a7f2_5259_bf74_33b2f5240a28);
}
#[repr(C)]
#[doc(hidden)]
pub struct ICompositionCommitBatch_Vtbl {
    pub base__: ::windows::core::IInspectable_Vtbl,
    pub IsActive: unsafe extern "system" fn(
        this: *mut ::core::ffi::c_void,
        result__: *mut bool,
    ) -> ::windows::core::HRESULT,
    pub IsEnded: unsafe extern "system" fn(
        this: *mut ::core::ffi::c_void,
        result__: *mut bool,
    ) -> ::windows::core::HRESULT,
    pub Completed: unsafe extern "system" fn(
        this: *mut ::core::ffi::c_void,
        handler: *mut ::core::ffi::c_void,
        result__: *mut ::windows::Foundation::EventRegistrationToken,
    ) -> ::windows::core::HRESULT,
    pub RemoveCompleted: unsafe extern "system" fn(
        this: *mut ::core::ffi::c_void,
        token: ::windows::Foundation::EventRegistrationToken,
    ) -> ::windows::core::HRESULT,
}
#[doc(hidden)]
#[repr(transparent)]
pub struct ICompositionContainerShape(::windows::core::IUnknown);
unsafe impl ::windows::core::Vtable for ICompositionContainerShape {
    type Vtable = ICompositionContainerShape_Vtbl;
}
unsafe impl ::windows::core::Interface for ICompositionContainerShape {
    const IID: ::windows::core::GUID =
        ::windows::core::GUID::from_u128(0x064aabd5_2dab_52d3_824b_c72456540f29);
}
#[repr(C)]
#[doc(hidden)]
pub struct ICompositionContainerShape_Vtbl {
    pub base__: ::windows::core::IInspectable_Vtbl,
    pub Shapes: unsafe extern "system" fn(
        this: *mut ::core::ffi::c_void,
        result__: *mut *mut ::core::ffi::c_void,
    ) -> ::windows::core::HRESULT,
}
#[doc(hidden)]
#[repr(transparent)]
pub struct ICompositionDrawingSurface(::windows::core::IUnknown);
unsafe impl ::windows::core::Vtable for ICompositionDrawingSurface {
    type Vtable = ICompositionDrawingSurface_Vtbl;
}
unsafe impl ::windows::core::Interface for ICompositionDrawingSurface {
    const IID: ::windows::core::GUID =
        ::windows::core::GUID::from_u128(0x216cab97_a2ee_5a29_ad6b_0bc2df4a1504);
}
#[repr(C)]
#[doc(hidden)]
pub struct ICompositionDrawingSurface_Vtbl {
    pub base__: ::windows::core::IInspectable_Vtbl,
    #[cfg(feature = "Graphics_DirectX")]
    pub AlphaMode: unsafe extern "system" fn(
        this: *mut ::core::ffi::c_void,
        result__: *mut super::super::Graphics::DirectX::DirectXAlphaMode,
    ) -> ::windows::core::HRESULT,
    #[cfg(not(feature = "Graphics_DirectX"))]
    AlphaMode: usize,
    #[cfg(feature = "Graphics_DirectX")]
    pub PixelFormat: unsafe extern "system" fn(
        this: *mut ::core::ffi::c_void,
        result__: *mut super::super::Graphics::DirectX::DirectXPixelFormat,
    ) -> ::windows::core::HRESULT,
    #[cfg(not(feature = "Graphics_DirectX"))]
    PixelFormat: usize,
    pub Size: unsafe extern "system" fn(
        this: *mut ::core::ffi::c_void,
        result__: *mut ::windows::Foundation::Size,
    ) -> ::windows::core::HRESULT,
}
#[doc(hidden)]
#[repr(transparent)]
pub struct ICompositionDrawingSurface2(::windows::core::IUnknown);
unsafe impl ::windows::core::Vtable for ICompositionDrawingSurface2 {
    type Vtable = ICompositionDrawingSurface2_Vtbl;
}
unsafe impl ::windows::core::Interface for ICompositionDrawingSurface2 {
    const IID: ::windows::core::GUID =
        ::windows::core::GUID::from_u128(0x6be6f652_bec8_5adf_a6af_5acfc00a968e);
}
#[repr(C)]
#[doc(hidden)]
pub struct ICompositionDrawingSurface2_Vtbl {
    pub base__: ::windows::core::IInspectable_Vtbl,
    pub SizeInt32: unsafe extern "system" fn(
        this: *mut ::core::ffi::c_void,
        result__: *mut ::windows::Graphics::SizeInt32,
    ) -> ::windows::core::HRESULT,
    pub Resize: unsafe extern "system" fn(
        this: *mut ::core::ffi::c_void,
        sizepixels: ::windows::Graphics::SizeInt32,
    ) -> ::windows::core::HRESULT,
    pub Scroll: unsafe extern "system" fn(
        this: *mut ::core::ffi::c_void,
        offset: ::windows::Graphics::PointInt32,
    ) -> ::windows::core::HRESULT,
    pub ScrollRect: unsafe extern "system" fn(
        this: *mut ::core::ffi::c_void,
        offset: ::windows::Graphics::PointInt32,
        scrollrect: ::windows::Graphics::RectInt32,
    ) -> ::windows::core::HRESULT,
    pub ScrollWithClip: unsafe extern "system" fn(
        this: *mut ::core::ffi::c_void,
        offset: ::windows::Graphics::PointInt32,
        cliprect: ::windows::Graphics::RectInt32,
    ) -> ::windows::core::HRESULT,
    pub ScrollRectWithClip: unsafe extern "system" fn(
        this: *mut ::core::ffi::c_void,
        offset: ::windows::Graphics::PointInt32,
        cliprect: ::windows::Graphics::RectInt32,
        scrollrect: ::windows::Graphics::RectInt32,
    ) -> ::windows::core::HRESULT,
}
#[doc(hidden)]
#[repr(transparent)]
pub struct ICompositionDrawingSurfaceFactory(::windows::core::IUnknown);
unsafe impl ::windows::core::Vtable for ICompositionDrawingSurfaceFactory {
    type Vtable = ICompositionDrawingSurfaceFactory_Vtbl;
}
unsafe impl ::windows::core::Interface for ICompositionDrawingSurfaceFactory {
    const IID: ::windows::core::GUID =
        ::windows::core::GUID::from_u128(0x4791e19a_c83b_58b0_ac86_dfc58494f5f9);
}
#[repr(C)]
#[doc(hidden)]
pub struct ICompositionDrawingSurfaceFactory_Vtbl {
    pub base__: ::windows::core::IInspectable_Vtbl,
}
#[doc(hidden)]
#[repr(transparent)]
pub struct ICompositionEasingFunction(::windows::core::IUnknown);
unsafe impl ::windows::core::Vtable for ICompositionEasingFunction {
    type Vtable = ICompositionEasingFunction_Vtbl;
}
unsafe impl ::windows::core::Interface for ICompositionEasingFunction {
    const IID: ::windows::core::GUID =
        ::windows::core::GUID::from_u128(0x8e1ecd0d_57d8_5bc9_9bcd_e43d0dd733c4);
}
#[repr(C)]
#[doc(hidden)]
pub struct ICompositionEasingFunction_Vtbl {
    pub base__: ::windows::core::IInspectable_Vtbl,
}
#[doc(hidden)]
#[repr(transparent)]
pub struct ICompositionEasingFunctionFactory(::windows::core::IUnknown);
unsafe impl ::windows::core::Vtable for ICompositionEasingFunctionFactory {
    type Vtable = ICompositionEasingFunctionFactory_Vtbl;
}
unsafe impl ::windows::core::Interface for ICompositionEasingFunctionFactory {
    const IID: ::windows::core::GUID =
        ::windows::core::GUID::from_u128(0x7d7d32c3_574b_5620_9902_db426851802f);
}
#[repr(C)]
#[doc(hidden)]
pub struct ICompositionEasingFunctionFactory_Vtbl {
    pub base__: ::windows::core::IInspectable_Vtbl,
}
#[doc(hidden)]
#[repr(transparent)]
pub struct ICompositionEasingFunctionStatics(::windows::core::IUnknown);
unsafe impl ::windows::core::Vtable for ICompositionEasingFunctionStatics {
    type Vtable = ICompositionEasingFunctionStatics_Vtbl;
}
unsafe impl ::windows::core::Interface for ICompositionEasingFunctionStatics {
    const IID: ::windows::core::GUID =
        ::windows::core::GUID::from_u128(0x9d4b87ff_6dca_5ce2_b69c_e52705b0fef4);
}
#[repr(C)]
#[doc(hidden)]
pub struct ICompositionEasingFunctionStatics_Vtbl {
    pub base__: ::windows::core::IInspectable_Vtbl,
    pub CreateCubicBezierEasingFunction: unsafe extern "system" fn(
        this: *mut ::core::ffi::c_void,
        owner: *mut ::core::ffi::c_void,
        controlpoint1: ::windows::Foundation::Numerics::Vector2,
        controlpoint2: ::windows::Foundation::Numerics::Vector2,
        result__: *mut *mut ::core::ffi::c_void,
    ) -> ::windows::core::HRESULT,
    pub CreateLinearEasingFunction: unsafe extern "system" fn(
        this: *mut ::core::ffi::c_void,
        owner: *mut ::core::ffi::c_void,
        result__: *mut *mut ::core::ffi::c_void,
    ) -> ::windows::core::HRESULT,
    pub CreateStepEasingFunction: unsafe extern "system" fn(
        this: *mut ::core::ffi::c_void,
        owner: *mut ::core::ffi::c_void,
        result__: *mut *mut ::core::ffi::c_void,
    ) -> ::windows::core::HRESULT,
    pub CreateStepEasingFunctionWithStepCount:
        unsafe extern "system" fn(
            this: *mut ::core::ffi::c_void,
            owner: *mut ::core::ffi::c_void,
            stepcount: i32,
            result__: *mut *mut ::core::ffi::c_void,
        ) -> ::windows::core::HRESULT,
    pub CreateBackEasingFunction: unsafe extern "system" fn(
        this: *mut ::core::ffi::c_void,
        owner: *mut ::core::ffi::c_void,
        mode: CompositionEasingFunctionMode,
        amplitude: f32,
        result__: *mut *mut ::core::ffi::c_void,
    ) -> ::windows::core::HRESULT,
    pub CreateBounceEasingFunction: unsafe extern "system" fn(
        this: *mut ::core::ffi::c_void,
        owner: *mut ::core::ffi::c_void,
        mode: CompositionEasingFunctionMode,
        bounces: i32,
        bounciness: f32,
        result__: *mut *mut ::core::ffi::c_void,
    ) -> ::windows::core::HRESULT,
    pub CreateCircleEasingFunction: unsafe extern "system" fn(
        this: *mut ::core::ffi::c_void,
        owner: *mut ::core::ffi::c_void,
        mode: CompositionEasingFunctionMode,
        result__: *mut *mut ::core::ffi::c_void,
    ) -> ::windows::core::HRESULT,
    pub CreateElasticEasingFunction: unsafe extern "system" fn(
        this: *mut ::core::ffi::c_void,
        owner: *mut ::core::ffi::c_void,
        mode: CompositionEasingFunctionMode,
        oscillations: i32,
        springiness: f32,
        result__: *mut *mut ::core::ffi::c_void,
    ) -> ::windows::core::HRESULT,
    pub CreateExponentialEasingFunction: unsafe extern "system" fn(
        this: *mut ::core::ffi::c_void,
        owner: *mut ::core::ffi::c_void,
        mode: CompositionEasingFunctionMode,
        exponent: f32,
        result__: *mut *mut ::core::ffi::c_void,
    ) -> ::windows::core::HRESULT,
    pub CreatePowerEasingFunction: unsafe extern "system" fn(
        this: *mut ::core::ffi::c_void,
        owner: *mut ::core::ffi::c_void,
        mode: CompositionEasingFunctionMode,
        power: f32,
        result__: *mut *mut ::core::ffi::c_void,
    ) -> ::windows::core::HRESULT,
    pub CreateSineEasingFunction: unsafe extern "system" fn(
        this: *mut ::core::ffi::c_void,
        owner: *mut ::core::ffi::c_void,
        mode: CompositionEasingFunctionMode,
        result__: *mut *mut ::core::ffi::c_void,
    ) -> ::windows::core::HRESULT,
}
#[doc(hidden)]
#[repr(transparent)]
pub struct ICompositionEffectBrush(::windows::core::IUnknown);
unsafe impl ::windows::core::Vtable for ICompositionEffectBrush {
    type Vtable = ICompositionEffectBrush_Vtbl;
}
unsafe impl ::windows::core::Interface for ICompositionEffectBrush {
    const IID: ::windows::core::GUID =
        ::windows::core::GUID::from_u128(0x62e0bbab_1f45_5a44_9ddf_f0c38a02ed85);
}
#[repr(C)]
#[doc(hidden)]
pub struct ICompositionEffectBrush_Vtbl {
    pub base__: ::windows::core::IInspectable_Vtbl,
    pub GetSourceParameter: unsafe extern "system" fn(
        this: *mut ::core::ffi::c_void,
        name: ::core::mem::ManuallyDrop<::windows::core::HSTRING>,
        result__: *mut *mut ::core::ffi::c_void,
    ) -> ::windows::core::HRESULT,
    pub SetSourceParameter: unsafe extern "system" fn(
        this: *mut ::core::ffi::c_void,
        name: ::core::mem::ManuallyDrop<::windows::core::HSTRING>,
        source: *mut ::core::ffi::c_void,
    ) -> ::windows::core::HRESULT,
}
#[doc(hidden)]
#[repr(transparent)]
pub struct ICompositionEffectFactory(::windows::core::IUnknown);
unsafe impl ::windows::core::Vtable for ICompositionEffectFactory {
    type Vtable = ICompositionEffectFactory_Vtbl;
}
unsafe impl ::windows::core::Interface for ICompositionEffectFactory {
    const IID: ::windows::core::GUID =
        ::windows::core::GUID::from_u128(0xc50f407a_0231_5ed2_b7a7_ca66d3e14b3b);
}
#[repr(C)]
#[doc(hidden)]
pub struct ICompositionEffectFactory_Vtbl {
    pub base__: ::windows::core::IInspectable_Vtbl,
    pub CreateBrush: unsafe extern "system" fn(
        this: *mut ::core::ffi::c_void,
        result__: *mut *mut ::core::ffi::c_void,
    ) -> ::windows::core::HRESULT,
    pub ExtendedError: unsafe extern "system" fn(
        this: *mut ::core::ffi::c_void,
        result__: *mut ::windows::core::HRESULT,
    ) -> ::windows::core::HRESULT,
    pub LoadStatus: unsafe extern "system" fn(
        this: *mut ::core::ffi::c_void,
        result__: *mut CompositionEffectFactoryLoadStatus,
    ) -> ::windows::core::HRESULT,
}
#[doc(hidden)]
#[repr(transparent)]
pub struct ICompositionEffectSourceParameter(::windows::core::IUnknown);
unsafe impl ::windows::core::Vtable for ICompositionEffectSourceParameter {
    type Vtable = ICompositionEffectSourceParameter_Vtbl;
}
unsafe impl ::windows::core::Interface for ICompositionEffectSourceParameter {
    const IID: ::windows::core::GUID =
        ::windows::core::GUID::from_u128(0xbece3367_5704_59f7_be8c_d6293af9c95f);
}
#[repr(C)]
#[doc(hidden)]
pub struct ICompositionEffectSourceParameter_Vtbl {
    pub base__: ::windows::core::IInspectable_Vtbl,
    pub Name: unsafe extern "system" fn(
        this: *mut ::core::ffi::c_void,
        result__: *mut ::core::mem::ManuallyDrop<::windows::core::HSTRING>,
    ) -> ::windows::core::HRESULT,
}
#[doc(hidden)]
#[repr(transparent)]
pub struct ICompositionEffectSourceParameterFactory(::windows::core::IUnknown);
unsafe impl ::windows::core::Vtable for ICompositionEffectSourceParameterFactory {
    type Vtable = ICompositionEffectSourceParameterFactory_Vtbl;
}
unsafe impl ::windows::core::Interface for ICompositionEffectSourceParameterFactory {
    const IID: ::windows::core::GUID =
        ::windows::core::GUID::from_u128(0x26185954_4489_5d0e_ae4d_7bc4bbbc6161);
}
#[repr(C)]
#[doc(hidden)]
pub struct ICompositionEffectSourceParameterFactory_Vtbl {
    pub base__: ::windows::core::IInspectable_Vtbl,
    pub Create: unsafe extern "system" fn(
        this: *mut ::core::ffi::c_void,
        name: ::core::mem::ManuallyDrop<::windows::core::HSTRING>,
        result__: *mut *mut ::core::ffi::c_void,
    ) -> ::windows::core::HRESULT,
}
#[doc(hidden)]
#[repr(transparent)]
pub struct ICompositionEllipseGeometry(::windows::core::IUnknown);
unsafe impl ::windows::core::Vtable for ICompositionEllipseGeometry {
    type Vtable = ICompositionEllipseGeometry_Vtbl;
}
unsafe impl ::windows::core::Interface for ICompositionEllipseGeometry {
    const IID: ::windows::core::GUID =
        ::windows::core::GUID::from_u128(0xf2a21042_7a57_58c1_8b47_8bc8b21d3aa0);
}
#[repr(C)]
#[doc(hidden)]
pub struct ICompositionEllipseGeometry_Vtbl {
    pub base__: ::windows::core::IInspectable_Vtbl,
    pub Center: unsafe extern "system" fn(
        this: *mut ::core::ffi::c_void,
        result__: *mut ::windows::Foundation::Numerics::Vector2,
    ) -> ::windows::core::HRESULT,
    pub SetCenter: unsafe extern "system" fn(
        this: *mut ::core::ffi::c_void,
        value: ::windows::Foundation::Numerics::Vector2,
    ) -> ::windows::core::HRESULT,
    pub Radius: unsafe extern "system" fn(
        this: *mut ::core::ffi::c_void,
        result__: *mut ::windows::Foundation::Numerics::Vector2,
    ) -> ::windows::core::HRESULT,
    pub SetRadius: unsafe extern "system" fn(
        this: *mut ::core::ffi::c_void,
        value: ::windows::Foundation::Numerics::Vector2,
    ) -> ::windows::core::HRESULT,
}
#[doc(hidden)]
#[repr(transparent)]
pub struct ICompositionGeometricClip(::windows::core::IUnknown);
unsafe impl ::windows::core::Vtable for ICompositionGeometricClip {
    type Vtable = ICompositionGeometricClip_Vtbl;
}
unsafe impl ::windows::core::Interface for ICompositionGeometricClip {
    const IID: ::windows::core::GUID =
        ::windows::core::GUID::from_u128(0xe3c0a8c5_5297_5d69_8b91_f5330bb1cb27);
}
#[repr(C)]
#[doc(hidden)]
pub struct ICompositionGeometricClip_Vtbl {
    pub base__: ::windows::core::IInspectable_Vtbl,
    pub Geometry: unsafe extern "system" fn(
        this: *mut ::core::ffi::c_void,
        result__: *mut *mut ::core::ffi::c_void,
    ) -> ::windows::core::HRESULT,
    pub SetGeometry: unsafe extern "system" fn(
        this: *mut ::core::ffi::c_void,
        value: *mut ::core::ffi::c_void,
    ) -> ::windows::core::HRESULT,
    pub ViewBox: unsafe extern "system" fn(
        this: *mut ::core::ffi::c_void,
        result__: *mut *mut ::core::ffi::c_void,
    ) -> ::windows::core::HRESULT,
    pub SetViewBox: unsafe extern "system" fn(
        this: *mut ::core::ffi::c_void,
        value: *mut ::core::ffi::c_void,
    ) -> ::windows::core::HRESULT,
}
#[doc(hidden)]
#[repr(transparent)]
pub struct ICompositionGeometry(::windows::core::IUnknown);
unsafe impl ::windows::core::Vtable for ICompositionGeometry {
    type Vtable = ICompositionGeometry_Vtbl;
}
unsafe impl ::windows::core::Interface for ICompositionGeometry {
    const IID: ::windows::core::GUID =
        ::windows::core::GUID::from_u128(0x4e40bdb2_450b_5a81_9e9b_149417980cc4);
}
#[repr(C)]
#[doc(hidden)]
pub struct ICompositionGeometry_Vtbl {
    pub base__: ::windows::core::IInspectable_Vtbl,
    pub TrimEnd: unsafe extern "system" fn(
        this: *mut ::core::ffi::c_void,
        result__: *mut f32,
    ) -> ::windows::core::HRESULT,
    pub SetTrimEnd: unsafe extern "system" fn(
        this: *mut ::core::ffi::c_void,
        value: f32,
    ) -> ::windows::core::HRESULT,
    pub TrimOffset: unsafe extern "system" fn(
        this: *mut ::core::ffi::c_void,
        result__: *mut f32,
    ) -> ::windows::core::HRESULT,
    pub SetTrimOffset: unsafe extern "system" fn(
        this: *mut ::core::ffi::c_void,
        value: f32,
    ) -> ::windows::core::HRESULT,
    pub TrimStart: unsafe extern "system" fn(
        this: *mut ::core::ffi::c_void,
        result__: *mut f32,
    ) -> ::windows::core::HRESULT,
    pub SetTrimStart: unsafe extern "system" fn(
        this: *mut ::core::ffi::c_void,
        value: f32,
    ) -> ::windows::core::HRESULT,
}
#[doc(hidden)]
#[repr(transparent)]
pub struct ICompositionGeometryFactory(::windows::core::IUnknown);
unsafe impl ::windows::core::Vtable for ICompositionGeometryFactory {
    type Vtable = ICompositionGeometryFactory_Vtbl;
}
unsafe impl ::windows::core::Interface for ICompositionGeometryFactory {
    const IID: ::windows::core::GUID =
        ::windows::core::GUID::from_u128(0xb2fb802b_c691_5554_8312_9c6d358d6b9e);
}
#[repr(C)]
#[doc(hidden)]
pub struct ICompositionGeometryFactory_Vtbl {
    pub base__: ::windows::core::IInspectable_Vtbl,
}
#[doc(hidden)]
#[repr(transparent)]
pub struct ICompositionGradientBrush(::windows::core::IUnknown);
unsafe impl ::windows::core::Vtable for ICompositionGradientBrush {
    type Vtable = ICompositionGradientBrush_Vtbl;
}
unsafe impl ::windows::core::Interface for ICompositionGradientBrush {
    const IID: ::windows::core::GUID =
        ::windows::core::GUID::from_u128(0x9165d1fb_c738_5f44_addc_309ee071d588);
}
#[repr(C)]
#[doc(hidden)]
pub struct ICompositionGradientBrush_Vtbl {
    pub base__: ::windows::core::IInspectable_Vtbl,
    pub AnchorPoint: unsafe extern "system" fn(
        this: *mut ::core::ffi::c_void,
        result__: *mut ::windows::Foundation::Numerics::Vector2,
    ) -> ::windows::core::HRESULT,
    pub SetAnchorPoint: unsafe extern "system" fn(
        this: *mut ::core::ffi::c_void,
        value: ::windows::Foundation::Numerics::Vector2,
    ) -> ::windows::core::HRESULT,
    pub CenterPoint: unsafe extern "system" fn(
        this: *mut ::core::ffi::c_void,
        result__: *mut ::windows::Foundation::Numerics::Vector2,
    ) -> ::windows::core::HRESULT,
    pub SetCenterPoint: unsafe extern "system" fn(
        this: *mut ::core::ffi::c_void,
        value: ::windows::Foundation::Numerics::Vector2,
    ) -> ::windows::core::HRESULT,
    pub ColorStops: unsafe extern "system" fn(
        this: *mut ::core::ffi::c_void,
        result__: *mut *mut ::core::ffi::c_void,
    ) -> ::windows::core::HRESULT,
    pub ExtendMode: unsafe extern "system" fn(
        this: *mut ::core::ffi::c_void,
        result__: *mut CompositionGradientExtendMode,
    ) -> ::windows::core::HRESULT,
    pub SetExtendMode: unsafe extern "system" fn(
        this: *mut ::core::ffi::c_void,
        value: CompositionGradientExtendMode,
    ) -> ::windows::core::HRESULT,
    pub InterpolationSpace: unsafe extern "system" fn(
        this: *mut ::core::ffi::c_void,
        result__: *mut CompositionColorSpace,
    ) -> ::windows::core::HRESULT,
    pub SetInterpolationSpace: unsafe extern "system" fn(
        this: *mut ::core::ffi::c_void,
        value: CompositionColorSpace,
    ) -> ::windows::core::HRESULT,
    pub Offset: unsafe extern "system" fn(
        this: *mut ::core::ffi::c_void,
        result__: *mut ::windows::Foundation::Numerics::Vector2,
    ) -> ::windows::core::HRESULT,
    pub SetOffset: unsafe extern "system" fn(
        this: *mut ::core::ffi::c_void,
        value: ::windows::Foundation::Numerics::Vector2,
    ) -> ::windows::core::HRESULT,
    pub RotationAngle: unsafe extern "system" fn(
        this: *mut ::core::ffi::c_void,
        result__: *mut f32,
    ) -> ::windows::core::HRESULT,
    pub SetRotationAngle: unsafe extern "system" fn(
        this: *mut ::core::ffi::c_void,
        value: f32,
    ) -> ::windows::core::HRESULT,
    pub RotationAngleInDegrees: unsafe extern "system" fn(
        this: *mut ::core::ffi::c_void,
        result__: *mut f32,
    ) -> ::windows::core::HRESULT,
    pub SetRotationAngleInDegrees: unsafe extern "system" fn(
        this: *mut ::core::ffi::c_void,
        value: f32,
    ) -> ::windows::core::HRESULT,
    pub Scale: unsafe extern "system" fn(
        this: *mut ::core::ffi::c_void,
        result__: *mut ::windows::Foundation::Numerics::Vector2,
    ) -> ::windows::core::HRESULT,
    pub SetScale: unsafe extern "system" fn(
        this: *mut ::core::ffi::c_void,
        value: ::windows::Foundation::Numerics::Vector2,
    ) -> ::windows::core::HRESULT,
    pub TransformMatrix: unsafe extern "system" fn(
        this: *mut ::core::ffi::c_void,
        result__: *mut ::windows::Foundation::Numerics::Matrix3x2,
    ) -> ::windows::core::HRESULT,
    pub SetTransformMatrix: unsafe extern "system" fn(
        this: *mut ::core::ffi::c_void,
        value: ::windows::Foundation::Numerics::Matrix3x2,
    ) -> ::windows::core::HRESULT,
}
#[doc(hidden)]
#[repr(transparent)]
pub struct ICompositionGradientBrush2(::windows::core::IUnknown);
unsafe impl ::windows::core::Vtable for ICompositionGradientBrush2 {
    type Vtable = ICompositionGradientBrush2_Vtbl;
}
unsafe impl ::windows::core::Interface for ICompositionGradientBrush2 {
    const IID: ::windows::core::GUID =
        ::windows::core::GUID::from_u128(0x03e9edf3_ee3d_58fc_8c0b_95e4b6060a94);
}
#[repr(C)]
#[doc(hidden)]
pub struct ICompositionGradientBrush2_Vtbl {
    pub base__: ::windows::core::IInspectable_Vtbl,
    pub MappingMode: unsafe extern "system" fn(
        this: *mut ::core::ffi::c_void,
        result__: *mut CompositionMappingMode,
    ) -> ::windows::core::HRESULT,
    pub SetMappingMode: unsafe extern "system" fn(
        this: *mut ::core::ffi::c_void,
        value: CompositionMappingMode,
    ) -> ::windows::core::HRESULT,
}
#[doc(hidden)]
#[repr(transparent)]
pub struct ICompositionGradientBrushFactory(::windows::core::IUnknown);
unsafe impl ::windows::core::Vtable for ICompositionGradientBrushFactory {
    type Vtable = ICompositionGradientBrushFactory_Vtbl;
}
unsafe impl ::windows::core::Interface for ICompositionGradientBrushFactory {
    const IID: ::windows::core::GUID =
        ::windows::core::GUID::from_u128(0xb043b155_4b40_590d_a0d9_f8c1a7e0c88f);
}
#[repr(C)]
#[doc(hidden)]
pub struct ICompositionGradientBrushFactory_Vtbl {
    pub base__: ::windows::core::IInspectable_Vtbl,
}
#[doc(hidden)]
#[repr(transparent)]
pub struct ICompositionGraphicsDevice(::windows::core::IUnknown);
unsafe impl ::windows::core::Vtable for ICompositionGraphicsDevice {
    type Vtable = ICompositionGraphicsDevice_Vtbl;
}
unsafe impl ::windows::core::Interface for ICompositionGraphicsDevice {
    const IID: ::windows::core::GUID =
        ::windows::core::GUID::from_u128(0x3d47e3f5_f76c_5f1f_88c0_54a5f2a090d6);
}
#[repr(C)]
#[doc(hidden)]
pub struct ICompositionGraphicsDevice_Vtbl {
    pub base__: ::windows::core::IInspectable_Vtbl,
    #[cfg(feature = "Graphics_DirectX")]
    pub CreateDrawingSurface: unsafe extern "system" fn(
        this: *mut ::core::ffi::c_void,
        sizepixels: ::windows::Foundation::Size,
        pixelformat: super::super::Graphics::DirectX::DirectXPixelFormat,
        alphamode: super::super::Graphics::DirectX::DirectXAlphaMode,
        result__: *mut *mut ::core::ffi::c_void,
    ) -> ::windows::core::HRESULT,
    #[cfg(not(feature = "Graphics_DirectX"))]
    CreateDrawingSurface: usize,
    pub RenderingDeviceReplaced: unsafe extern "system" fn(
        this: *mut ::core::ffi::c_void,
        handler: *mut ::core::ffi::c_void,
        result__: *mut ::windows::Foundation::EventRegistrationToken,
    ) -> ::windows::core::HRESULT,
    pub RemoveRenderingDeviceReplaced: unsafe extern "system" fn(
        this: *mut ::core::ffi::c_void,
        token: ::windows::Foundation::EventRegistrationToken,
    ) -> ::windows::core::HRESULT,
}
#[doc(hidden)]
#[repr(transparent)]
pub struct ICompositionGraphicsDevice2(::windows::core::IUnknown);
unsafe impl ::windows::core::Vtable for ICompositionGraphicsDevice2 {
    type Vtable = ICompositionGraphicsDevice2_Vtbl;
}
unsafe impl ::windows::core::Interface for ICompositionGraphicsDevice2 {
    const IID: ::windows::core::GUID =
        ::windows::core::GUID::from_u128(0xffd56707_1c7a_5da0_aa1a_49cb935b5dca);
}
#[repr(C)]
#[doc(hidden)]
pub struct ICompositionGraphicsDevice2_Vtbl {
    pub base__: ::windows::core::IInspectable_Vtbl,
    #[cfg(feature = "Graphics_DirectX")]
    pub CreateDrawingSurface2: unsafe extern "system" fn(
        this: *mut ::core::ffi::c_void,
        sizepixels: ::windows::Graphics::SizeInt32,
        pixelformat: super::super::Graphics::DirectX::DirectXPixelFormat,
        alphamode: super::super::Graphics::DirectX::DirectXAlphaMode,
        result__: *mut *mut ::core::ffi::c_void,
    ) -> ::windows::core::HRESULT,
    #[cfg(not(feature = "Graphics_DirectX"))]
    CreateDrawingSurface2: usize,
    #[cfg(feature = "Graphics_DirectX")]
    pub CreateVirtualDrawingSurface: unsafe extern "system" fn(
        this: *mut ::core::ffi::c_void,
        sizepixels: ::windows::Graphics::SizeInt32,
        pixelformat: super::super::Graphics::DirectX::DirectXPixelFormat,
        alphamode: super::super::Graphics::DirectX::DirectXAlphaMode,
        result__: *mut *mut ::core::ffi::c_void,
    ) -> ::windows::core::HRESULT,
    #[cfg(not(feature = "Graphics_DirectX"))]
    CreateVirtualDrawingSurface: usize,
}
#[doc(hidden)]
#[repr(transparent)]
pub struct ICompositionGraphicsDevice3(::windows::core::IUnknown);
unsafe impl ::windows::core::Vtable for ICompositionGraphicsDevice3 {
    type Vtable = ICompositionGraphicsDevice3_Vtbl;
}
unsafe impl ::windows::core::Interface for ICompositionGraphicsDevice3 {
    const IID: ::windows::core::GUID =
        ::windows::core::GUID::from_u128(0xfbbef487_d5a4_5db2_bf3e_9f488e659d11);
}
#[repr(C)]
#[doc(hidden)]
pub struct ICompositionGraphicsDevice3_Vtbl {
    pub base__: ::windows::core::IInspectable_Vtbl,
    #[cfg(feature = "Graphics_DirectX")]
    pub CreateMipmapSurface: unsafe extern "system" fn(
        this: *mut ::core::ffi::c_void,
        sizepixels: ::windows::Graphics::SizeInt32,
        pixelformat: super::super::Graphics::DirectX::DirectXPixelFormat,
        alphamode: super::super::Graphics::DirectX::DirectXAlphaMode,
        result__: *mut *mut ::core::ffi::c_void,
    ) -> ::windows::core::HRESULT,
    #[cfg(not(feature = "Graphics_DirectX"))]
    CreateMipmapSurface: usize,
    pub Trim: unsafe extern "system" fn(this: *mut ::core::ffi::c_void) -> ::windows::core::HRESULT,
}
#[doc(hidden)]
#[repr(transparent)]
pub struct ICompositionGraphicsDevice4(::windows::core::IUnknown);
unsafe impl ::windows::core::Vtable for ICompositionGraphicsDevice4 {
    type Vtable = ICompositionGraphicsDevice4_Vtbl;
}
unsafe impl ::windows::core::Interface for ICompositionGraphicsDevice4 {
    const IID: ::windows::core::GUID =
        ::windows::core::GUID::from_u128(0x2b295c04_7b2e_5b0e_9762_2992313b700c);
}
#[repr(C)]
#[doc(hidden)]
pub struct ICompositionGraphicsDevice4_Vtbl {
    pub base__: ::windows::core::IInspectable_Vtbl,
    #[cfg(feature = "Graphics_DirectX")]
    pub CaptureAsync: unsafe extern "system" fn(
        this: *mut ::core::ffi::c_void,
        capturevisual: *mut ::core::ffi::c_void,
        size: ::windows::Graphics::SizeInt32,
        pixelformat: super::super::Graphics::DirectX::DirectXPixelFormat,
        alphamode: super::super::Graphics::DirectX::DirectXAlphaMode,
        sdrboost: f32,
        result__: *mut *mut ::core::ffi::c_void,
    ) -> ::windows::core::HRESULT,
    #[cfg(not(feature = "Graphics_DirectX"))]
    CaptureAsync: usize,
}
#[doc(hidden)]
#[repr(transparent)]
pub struct ICompositionLight(::windows::core::IUnknown);
unsafe impl ::windows::core::Vtable for ICompositionLight {
    type Vtable = ICompositionLight_Vtbl;
}
unsafe impl ::windows::core::Interface for ICompositionLight {
    const IID: ::windows::core::GUID =
        ::windows::core::GUID::from_u128(0x6d633e77_a6b8_5a2d_8235_e0c380c3b47b);
}
#[repr(C)]
#[doc(hidden)]
pub struct ICompositionLight_Vtbl {
    pub base__: ::windows::core::IInspectable_Vtbl,
    pub Targets: unsafe extern "system" fn(
        this: *mut ::core::ffi::c_void,
        result__: *mut *mut ::core::ffi::c_void,
    ) -> ::windows::core::HRESULT,
}
#[doc(hidden)]
#[repr(transparent)]
pub struct ICompositionLight2(::windows::core::IUnknown);
unsafe impl ::windows::core::Vtable for ICompositionLight2 {
    type Vtable = ICompositionLight2_Vtbl;
}
unsafe impl ::windows::core::Interface for ICompositionLight2 {
    const IID: ::windows::core::GUID =
        ::windows::core::GUID::from_u128(0x0bb940a4_05ef_5920_bae1_918b36d44380);
}
#[repr(C)]
#[doc(hidden)]
pub struct ICompositionLight2_Vtbl {
    pub base__: ::windows::core::IInspectable_Vtbl,
    pub ExclusionsFromTargets: unsafe extern "system" fn(
        this: *mut ::core::ffi::c_void,
        result__: *mut *mut ::core::ffi::c_void,
    ) -> ::windows::core::HRESULT,
}
#[doc(hidden)]
#[repr(transparent)]
pub struct ICompositionLight3(::windows::core::IUnknown);
unsafe impl ::windows::core::Vtable for ICompositionLight3 {
    type Vtable = ICompositionLight3_Vtbl;
}
unsafe impl ::windows::core::Interface for ICompositionLight3 {
    const IID: ::windows::core::GUID =
        ::windows::core::GUID::from_u128(0x95ce4859_dd55_5c38_a3eb_13d053cebb1e);
}
#[repr(C)]
#[doc(hidden)]
pub struct ICompositionLight3_Vtbl {
    pub base__: ::windows::core::IInspectable_Vtbl,
    pub IsEnabled: unsafe extern "system" fn(
        this: *mut ::core::ffi::c_void,
        result__: *mut bool,
    ) -> ::windows::core::HRESULT,
    pub SetIsEnabled: unsafe extern "system" fn(
        this: *mut ::core::ffi::c_void,
        value: bool,
    ) -> ::windows::core::HRESULT,
}
#[doc(hidden)]
#[repr(transparent)]
pub struct ICompositionLightFactory(::windows::core::IUnknown);
unsafe impl ::windows::core::Vtable for ICompositionLightFactory {
    type Vtable = ICompositionLightFactory_Vtbl;
}
unsafe impl ::windows::core::Interface for ICompositionLightFactory {
    const IID: ::windows::core::GUID =
        ::windows::core::GUID::from_u128(0xcb29caed_9245_51a6_ba56_addbaefa54cc);
}
#[repr(C)]
#[doc(hidden)]
pub struct ICompositionLightFactory_Vtbl {
    pub base__: ::windows::core::IInspectable_Vtbl,
}
#[doc(hidden)]
#[repr(transparent)]
pub struct ICompositionLineGeometry(::windows::core::IUnknown);
unsafe impl ::windows::core::Vtable for ICompositionLineGeometry {
    type Vtable = ICompositionLineGeometry_Vtbl;
}
unsafe impl ::windows::core::Interface for ICompositionLineGeometry {
    const IID: ::windows::core::GUID =
        ::windows::core::GUID::from_u128(0x489f9382_c186_5936_8946_c4f927e844aa);
}
#[repr(C)]
#[doc(hidden)]
pub struct ICompositionLineGeometry_Vtbl {
    pub base__: ::windows::core::IInspectable_Vtbl,
    pub Start: unsafe extern "system" fn(
        this: *mut ::core::ffi::c_void,
        result__: *mut ::windows::Foundation::Numerics::Vector2,
    ) -> ::windows::core::HRESULT,
    pub SetStart: unsafe extern "system" fn(
        this: *mut ::core::ffi::c_void,
        value: ::windows::Foundation::Numerics::Vector2,
    ) -> ::windows::core::HRESULT,
    pub End: unsafe extern "system" fn(
        this: *mut ::core::ffi::c_void,
        result__: *mut ::windows::Foundation::Numerics::Vector2,
    ) -> ::windows::core::HRESULT,
    pub SetEnd: unsafe extern "system" fn(
        this: *mut ::core::ffi::c_void,
        value: ::windows::Foundation::Numerics::Vector2,
    ) -> ::windows::core::HRESULT,
}
#[doc(hidden)]
#[repr(transparent)]
pub struct ICompositionLinearGradientBrush(::windows::core::IUnknown);
unsafe impl ::windows::core::Vtable for ICompositionLinearGradientBrush {
    type Vtable = ICompositionLinearGradientBrush_Vtbl;
}
unsafe impl ::windows::core::Interface for ICompositionLinearGradientBrush {
    const IID: ::windows::core::GUID =
        ::windows::core::GUID::from_u128(0xf726fb52_270c_58b1_a902_89576772dedc);
}
#[repr(C)]
#[doc(hidden)]
pub struct ICompositionLinearGradientBrush_Vtbl {
    pub base__: ::windows::core::IInspectable_Vtbl,
    pub EndPoint: unsafe extern "system" fn(
        this: *mut ::core::ffi::c_void,
        result__: *mut ::windows::Foundation::Numerics::Vector2,
    ) -> ::windows::core::HRESULT,
    pub SetEndPoint: unsafe extern "system" fn(
        this: *mut ::core::ffi::c_void,
        value: ::windows::Foundation::Numerics::Vector2,
    ) -> ::windows::core::HRESULT,
    pub StartPoint: unsafe extern "system" fn(
        this: *mut ::core::ffi::c_void,
        result__: *mut ::windows::Foundation::Numerics::Vector2,
    ) -> ::windows::core::HRESULT,
    pub SetStartPoint: unsafe extern "system" fn(
        this: *mut ::core::ffi::c_void,
        value: ::windows::Foundation::Numerics::Vector2,
    ) -> ::windows::core::HRESULT,
}
#[doc(hidden)]
#[repr(transparent)]
pub struct ICompositionMaskBrush(::windows::core::IUnknown);
unsafe impl ::windows::core::Vtable for ICompositionMaskBrush {
    type Vtable = ICompositionMaskBrush_Vtbl;
}
unsafe impl ::windows::core::Interface for ICompositionMaskBrush {
    const IID: ::windows::core::GUID =
        ::windows::core::GUID::from_u128(0xc9502786_65aa_5be5_a679_c3b5dbfb0dc6);
}
#[repr(C)]
#[doc(hidden)]
pub struct ICompositionMaskBrush_Vtbl {
    pub base__: ::windows::core::IInspectable_Vtbl,
    pub Mask: unsafe extern "system" fn(
        this: *mut ::core::ffi::c_void,
        result__: *mut *mut ::core::ffi::c_void,
    ) -> ::windows::core::HRESULT,
    pub SetMask: unsafe extern "system" fn(
        this: *mut ::core::ffi::c_void,
        value: *mut ::core::ffi::c_void,
    ) -> ::windows::core::HRESULT,
    pub Source: unsafe extern "system" fn(
        this: *mut ::core::ffi::c_void,
        result__: *mut *mut ::core::ffi::c_void,
    ) -> ::windows::core::HRESULT,
    pub SetSource: unsafe extern "system" fn(
        this: *mut ::core::ffi::c_void,
        value: *mut ::core::ffi::c_void,
    ) -> ::windows::core::HRESULT,
}
#[doc(hidden)]
#[repr(transparent)]
pub struct ICompositionMipmapSurface(::windows::core::IUnknown);
unsafe impl ::windows::core::Vtable for ICompositionMipmapSurface {
    type Vtable = ICompositionMipmapSurface_Vtbl;
}
unsafe impl ::windows::core::Interface for ICompositionMipmapSurface {
    const IID: ::windows::core::GUID =
        ::windows::core::GUID::from_u128(0x681f1e47_6e43_5b55_be3a_e5c858a2d5fa);
}
#[repr(C)]
#[doc(hidden)]
pub struct ICompositionMipmapSurface_Vtbl {
    pub base__: ::windows::core::IInspectable_Vtbl,
    pub LevelCount: unsafe extern "system" fn(
        this: *mut ::core::ffi::c_void,
        result__: *mut u32,
    ) -> ::windows::core::HRESULT,
    #[cfg(feature = "Graphics_DirectX")]
    pub AlphaMode: unsafe extern "system" fn(
        this: *mut ::core::ffi::c_void,
        result__: *mut super::super::Graphics::DirectX::DirectXAlphaMode,
    ) -> ::windows::core::HRESULT,
    #[cfg(not(feature = "Graphics_DirectX"))]
    AlphaMode: usize,
    #[cfg(feature = "Graphics_DirectX")]
    pub PixelFormat: unsafe extern "system" fn(
        this: *mut ::core::ffi::c_void,
        result__: *mut super::super::Graphics::DirectX::DirectXPixelFormat,
    ) -> ::windows::core::HRESULT,
    #[cfg(not(feature = "Graphics_DirectX"))]
    PixelFormat: usize,
    pub SizeInt32: unsafe extern "system" fn(
        this: *mut ::core::ffi::c_void,
        result__: *mut ::windows::Graphics::SizeInt32,
    ) -> ::windows::core::HRESULT,
    pub GetDrawingSurfaceForLevel: unsafe extern "system" fn(
        this: *mut ::core::ffi::c_void,
        level: u32,
        result__: *mut *mut ::core::ffi::c_void,
    ) -> ::windows::core::HRESULT,
}
#[doc(hidden)]
#[repr(transparent)]
pub struct ICompositionNineGridBrush(::windows::core::IUnknown);
unsafe impl ::windows::core::Vtable for ICompositionNineGridBrush {
    type Vtable = ICompositionNineGridBrush_Vtbl;
}
unsafe impl ::windows::core::Interface for ICompositionNineGridBrush {
    const IID: ::windows::core::GUID =
        ::windows::core::GUID::from_u128(0xc77a3d21_c7ee_517a_98f4_ad9a7202bc86);
}
#[repr(C)]
#[doc(hidden)]
pub struct ICompositionNineGridBrush_Vtbl {
    pub base__: ::windows::core::IInspectable_Vtbl,
    pub BottomInset: unsafe extern "system" fn(
        this: *mut ::core::ffi::c_void,
        result__: *mut f32,
    ) -> ::windows::core::HRESULT,
    pub SetBottomInset: unsafe extern "system" fn(
        this: *mut ::core::ffi::c_void,
        value: f32,
    ) -> ::windows::core::HRESULT,
    pub BottomInsetScale: unsafe extern "system" fn(
        this: *mut ::core::ffi::c_void,
        result__: *mut f32,
    ) -> ::windows::core::HRESULT,
    pub SetBottomInsetScale: unsafe extern "system" fn(
        this: *mut ::core::ffi::c_void,
        value: f32,
    ) -> ::windows::core::HRESULT,
    pub IsCenterHollow: unsafe extern "system" fn(
        this: *mut ::core::ffi::c_void,
        result__: *mut bool,
    ) -> ::windows::core::HRESULT,
    pub SetIsCenterHollow: unsafe extern "system" fn(
        this: *mut ::core::ffi::c_void,
        value: bool,
    ) -> ::windows::core::HRESULT,
    pub LeftInset: unsafe extern "system" fn(
        this: *mut ::core::ffi::c_void,
        result__: *mut f32,
    ) -> ::windows::core::HRESULT,
    pub SetLeftInset: unsafe extern "system" fn(
        this: *mut ::core::ffi::c_void,
        value: f32,
    ) -> ::windows::core::HRESULT,
    pub LeftInsetScale: unsafe extern "system" fn(
        this: *mut ::core::ffi::c_void,
        result__: *mut f32,
    ) -> ::windows::core::HRESULT,
    pub SetLeftInsetScale: unsafe extern "system" fn(
        this: *mut ::core::ffi::c_void,
        value: f32,
    ) -> ::windows::core::HRESULT,
    pub RightInset: unsafe extern "system" fn(
        this: *mut ::core::ffi::c_void,
        result__: *mut f32,
    ) -> ::windows::core::HRESULT,
    pub SetRightInset: unsafe extern "system" fn(
        this: *mut ::core::ffi::c_void,
        value: f32,
    ) -> ::windows::core::HRESULT,
    pub RightInsetScale: unsafe extern "system" fn(
        this: *mut ::core::ffi::c_void,
        result__: *mut f32,
    ) -> ::windows::core::HRESULT,
    pub SetRightInsetScale: unsafe extern "system" fn(
        this: *mut ::core::ffi::c_void,
        value: f32,
    ) -> ::windows::core::HRESULT,
    pub Source: unsafe extern "system" fn(
        this: *mut ::core::ffi::c_void,
        result__: *mut *mut ::core::ffi::c_void,
    ) -> ::windows::core::HRESULT,
    pub SetSource: unsafe extern "system" fn(
        this: *mut ::core::ffi::c_void,
        value: *mut ::core::ffi::c_void,
    ) -> ::windows::core::HRESULT,
    pub TopInset: unsafe extern "system" fn(
        this: *mut ::core::ffi::c_void,
        result__: *mut f32,
    ) -> ::windows::core::HRESULT,
    pub SetTopInset: unsafe extern "system" fn(
        this: *mut ::core::ffi::c_void,
        value: f32,
    ) -> ::windows::core::HRESULT,
    pub TopInsetScale: unsafe extern "system" fn(
        this: *mut ::core::ffi::c_void,
        result__: *mut f32,
    ) -> ::windows::core::HRESULT,
    pub SetTopInsetScale: unsafe extern "system" fn(
        this: *mut ::core::ffi::c_void,
        value: f32,
    ) -> ::windows::core::HRESULT,
    pub SetInsets: unsafe extern "system" fn(
        this: *mut ::core::ffi::c_void,
        inset: f32,
    ) -> ::windows::core::HRESULT,
    pub SetInsetsWithValues: unsafe extern "system" fn(
        this: *mut ::core::ffi::c_void,
        left: f32,
        top: f32,
        right: f32,
        bottom: f32,
    ) -> ::windows::core::HRESULT,
    pub SetInsetScales: unsafe extern "system" fn(
        this: *mut ::core::ffi::c_void,
        scale: f32,
    ) -> ::windows::core::HRESULT,
    pub SetInsetScalesWithValues: unsafe extern "system" fn(
        this: *mut ::core::ffi::c_void,
        left: f32,
        top: f32,
        right: f32,
        bottom: f32,
    ) -> ::windows::core::HRESULT,
}
#[doc(hidden)]
#[repr(transparent)]
pub struct ICompositionObject(::windows::core::IUnknown);
unsafe impl ::windows::core::Vtable for ICompositionObject {
    type Vtable = ICompositionObject_Vtbl;
}
unsafe impl ::windows::core::Interface for ICompositionObject {
    const IID: ::windows::core::GUID =
        ::windows::core::GUID::from_u128(0x0e583d49_fb5e_5481_a426_d3c41e059a5a);
}
#[repr(C)]
#[doc(hidden)]
pub struct ICompositionObject_Vtbl {
    pub base__: ::windows::core::IInspectable_Vtbl,
    pub Compositor: unsafe extern "system" fn(
        this: *mut ::core::ffi::c_void,
        result__: *mut *mut ::core::ffi::c_void,
    ) -> ::windows::core::HRESULT,
    pub Properties: unsafe extern "system" fn(
        this: *mut ::core::ffi::c_void,
        result__: *mut *mut ::core::ffi::c_void,
    ) -> ::windows::core::HRESULT,
    pub StartAnimation: unsafe extern "system" fn(
        this: *mut ::core::ffi::c_void,
        propertyname: ::core::mem::ManuallyDrop<::windows::core::HSTRING>,
        animation: *mut ::core::ffi::c_void,
    ) -> ::windows::core::HRESULT,
    pub StopAnimation: unsafe extern "system" fn(
        this: *mut ::core::ffi::c_void,
        propertyname: ::core::mem::ManuallyDrop<::windows::core::HSTRING>,
    ) -> ::windows::core::HRESULT,
}
#[doc(hidden)]
#[repr(transparent)]
pub struct ICompositionObject2(::windows::core::IUnknown);
unsafe impl ::windows::core::Vtable for ICompositionObject2 {
    type Vtable = ICompositionObject2_Vtbl;
}
unsafe impl ::windows::core::Interface for ICompositionObject2 {
    const IID: ::windows::core::GUID =
        ::windows::core::GUID::from_u128(0xbcbbfebf_799c_51ce_9c82_b6e49e7e62e1);
}
#[repr(C)]
#[doc(hidden)]
pub struct ICompositionObject2_Vtbl {
    pub base__: ::windows::core::IInspectable_Vtbl,
    pub Comment: unsafe extern "system" fn(
        this: *mut ::core::ffi::c_void,
        result__: *mut ::core::mem::ManuallyDrop<::windows::core::HSTRING>,
    ) -> ::windows::core::HRESULT,
    pub SetComment: unsafe extern "system" fn(
        this: *mut ::core::ffi::c_void,
        value: ::core::mem::ManuallyDrop<::windows::core::HSTRING>,
    ) -> ::windows::core::HRESULT,
    pub ImplicitAnimations: unsafe extern "system" fn(
        this: *mut ::core::ffi::c_void,
        result__: *mut *mut ::core::ffi::c_void,
    ) -> ::windows::core::HRESULT,
    pub SetImplicitAnimations: unsafe extern "system" fn(
        this: *mut ::core::ffi::c_void,
        value: *mut ::core::ffi::c_void,
    ) -> ::windows::core::HRESULT,
    pub StartAnimationGroup: unsafe extern "system" fn(
        this: *mut ::core::ffi::c_void,
        value: *mut ::core::ffi::c_void,
    ) -> ::windows::core::HRESULT,
    pub StopAnimationGroup: unsafe extern "system" fn(
        this: *mut ::core::ffi::c_void,
        value: *mut ::core::ffi::c_void,
    ) -> ::windows::core::HRESULT,
}
#[doc(hidden)]
#[repr(transparent)]
pub struct ICompositionObject3(::windows::core::IUnknown);
unsafe impl ::windows::core::Vtable for ICompositionObject3 {
    type Vtable = ICompositionObject3_Vtbl;
}
unsafe impl ::windows::core::Interface for ICompositionObject3 {
    const IID: ::windows::core::GUID =
        ::windows::core::GUID::from_u128(0xd43c5cf1_47df_52b8_b409_d5831503905e);
}
#[repr(C)]
#[doc(hidden)]
pub struct ICompositionObject3_Vtbl {
    pub base__: ::windows::core::IInspectable_Vtbl,
    #[cfg(feature = "UI_Dispatching")]
    pub DispatcherQueue: unsafe extern "system" fn(
        this: *mut ::core::ffi::c_void,
        result__: *mut *mut ::core::ffi::c_void,
    ) -> ::windows::core::HRESULT,
    #[cfg(not(feature = "UI_Dispatching"))]
    DispatcherQueue: usize,
}
#[doc(hidden)]
#[repr(transparent)]
pub struct ICompositionObject4(::windows::core::IUnknown);
unsafe impl ::windows::core::Vtable for ICompositionObject4 {
    type Vtable = ICompositionObject4_Vtbl;
}
unsafe impl ::windows::core::Interface for ICompositionObject4 {
    const IID: ::windows::core::GUID =
        ::windows::core::GUID::from_u128(0x029ad57c_5497_51f3_8b40_e4e235992c6f);
}
#[repr(C)]
#[doc(hidden)]
pub struct ICompositionObject4_Vtbl {
    pub base__: ::windows::core::IInspectable_Vtbl,
    pub TryGetAnimationController: unsafe extern "system" fn(
        this: *mut ::core::ffi::c_void,
        propertyname: ::core::mem::ManuallyDrop<::windows::core::HSTRING>,
        result__: *mut *mut ::core::ffi::c_void,
    ) -> ::windows::core::HRESULT,
}
#[doc(hidden)]
#[repr(transparent)]
pub struct ICompositionObject5(::windows::core::IUnknown);
unsafe impl ::windows::core::Vtable for ICompositionObject5 {
    type Vtable = ICompositionObject5_Vtbl;
}
unsafe impl ::windows::core::Interface for ICompositionObject5 {
    const IID: ::windows::core::GUID =
        ::windows::core::GUID::from_u128(0x85fd26d1_bb99_5392_9dce_a05cb81458a5);
}
#[repr(C)]
#[doc(hidden)]
pub struct ICompositionObject5_Vtbl {
    pub base__: ::windows::core::IInspectable_Vtbl,
    pub StartAnimationWithController: unsafe extern "system" fn(
        this: *mut ::core::ffi::c_void,
        propertyname: ::core::mem::ManuallyDrop<::windows::core::HSTRING>,
        animation: *mut ::core::ffi::c_void,
        animationcontroller: *mut ::core::ffi::c_void,
    ) -> ::windows::core::HRESULT,
}
#[doc(hidden)]
#[repr(transparent)]
pub struct ICompositionObjectFactory(::windows::core::IUnknown);
unsafe impl ::windows::core::Vtable for ICompositionObjectFactory {
    type Vtable = ICompositionObjectFactory_Vtbl;
}
unsafe impl ::windows::core::Interface for ICompositionObjectFactory {
    const IID: ::windows::core::GUID =
        ::windows::core::GUID::from_u128(0x6133c5f9_cd3b_56b2_876f_eb849db14911);
}
#[repr(C)]
#[doc(hidden)]
pub struct ICompositionObjectFactory_Vtbl {
    pub base__: ::windows::core::IInspectable_Vtbl,
}
#[doc(hidden)]
#[repr(transparent)]
pub struct ICompositionObjectStatics(::windows::core::IUnknown);
unsafe impl ::windows::core::Vtable for ICompositionObjectStatics {
    type Vtable = ICompositionObjectStatics_Vtbl;
}
unsafe impl ::windows::core::Interface for ICompositionObjectStatics {
    const IID: ::windows::core::GUID =
        ::windows::core::GUID::from_u128(0xa091356c_38ae_514c_9b58_ad5c8c7936ad);
}
#[repr(C)]
#[doc(hidden)]
pub struct ICompositionObjectStatics_Vtbl {
    pub base__: ::windows::core::IInspectable_Vtbl,
    pub StartAnimationWithIAnimationObject: unsafe extern "system" fn(
        this: *mut ::core::ffi::c_void,
        target: *mut ::core::ffi::c_void,
        propertyname: ::core::mem::ManuallyDrop<::windows::core::HSTRING>,
        animation: *mut ::core::ffi::c_void,
    )
        -> ::windows::core::HRESULT,
    pub StartAnimationGroupWithIAnimationObject:
        unsafe extern "system" fn(
            this: *mut ::core::ffi::c_void,
            target: *mut ::core::ffi::c_void,
            animation: *mut ::core::ffi::c_void,
        ) -> ::windows::core::HRESULT,
}
#[doc(hidden)]
#[repr(transparent)]
pub struct ICompositionPath(::windows::core::IUnknown);
unsafe impl ::windows::core::Vtable for ICompositionPath {
    type Vtable = ICompositionPath_Vtbl;
}
unsafe impl ::windows::core::Interface for ICompositionPath {
    const IID: ::windows::core::GUID =
        ::windows::core::GUID::from_u128(0x17c518c0_d7a2_54be_ac7f_c408562a6a20);
}
#[repr(C)]
#[doc(hidden)]
pub struct ICompositionPath_Vtbl {
    pub base__: ::windows::core::IInspectable_Vtbl,
}
#[doc(hidden)]
#[repr(transparent)]
pub struct ICompositionPathFactory(::windows::core::IUnknown);
unsafe impl ::windows::core::Vtable for ICompositionPathFactory {
    type Vtable = ICompositionPathFactory_Vtbl;
}
unsafe impl ::windows::core::Interface for ICompositionPathFactory {
    const IID: ::windows::core::GUID =
        ::windows::core::GUID::from_u128(0x87143312_d280_51d2_b75b_5d76ea86c285);
}
#[repr(C)]
#[doc(hidden)]
pub struct ICompositionPathFactory_Vtbl {
    pub base__: ::windows::core::IInspectable_Vtbl,
    pub Create: unsafe extern "system" fn(
        this: *mut ::core::ffi::c_void,
        source: *mut ::core::ffi::c_void,
        result__: *mut *mut ::core::ffi::c_void,
    ) -> ::windows::core::HRESULT,
}
#[doc(hidden)]
#[repr(transparent)]
pub struct ICompositionPathGeometry(::windows::core::IUnknown);
unsafe impl ::windows::core::Vtable for ICompositionPathGeometry {
    type Vtable = ICompositionPathGeometry_Vtbl;
}
unsafe impl ::windows::core::Interface for ICompositionPathGeometry {
    const IID: ::windows::core::GUID =
        ::windows::core::GUID::from_u128(0x0f6e6b82_060b_571e_b849_ab8e0d723962);
}
#[repr(C)]
#[doc(hidden)]
pub struct ICompositionPathGeometry_Vtbl {
    pub base__: ::windows::core::IInspectable_Vtbl,
    pub Path: unsafe extern "system" fn(
        this: *mut ::core::ffi::c_void,
        result__: *mut *mut ::core::ffi::c_void,
    ) -> ::windows::core::HRESULT,
    pub SetPath: unsafe extern "system" fn(
        this: *mut ::core::ffi::c_void,
        value: *mut ::core::ffi::c_void,
    ) -> ::windows::core::HRESULT,
}
#[doc(hidden)]
#[repr(transparent)]
pub struct ICompositionProjectedShadow(::windows::core::IUnknown);
unsafe impl ::windows::core::Vtable for ICompositionProjectedShadow {
    type Vtable = ICompositionProjectedShadow_Vtbl;
}
unsafe impl ::windows::core::Interface for ICompositionProjectedShadow {
    const IID: ::windows::core::GUID =
        ::windows::core::GUID::from_u128(0xd400ab10_8b92_5abb_9e23_807974fc6961);
}
#[repr(C)]
#[doc(hidden)]
pub struct ICompositionProjectedShadow_Vtbl {
    pub base__: ::windows::core::IInspectable_Vtbl,
    pub BlurRadiusMultiplier: unsafe extern "system" fn(
        this: *mut ::core::ffi::c_void,
        result__: *mut f32,
    ) -> ::windows::core::HRESULT,
    pub SetBlurRadiusMultiplier: unsafe extern "system" fn(
        this: *mut ::core::ffi::c_void,
        value: f32,
    ) -> ::windows::core::HRESULT,
    pub Casters: unsafe extern "system" fn(
        this: *mut ::core::ffi::c_void,
        result__: *mut *mut ::core::ffi::c_void,
    ) -> ::windows::core::HRESULT,
    pub LightSource: unsafe extern "system" fn(
        this: *mut ::core::ffi::c_void,
        result__: *mut *mut ::core::ffi::c_void,
    ) -> ::windows::core::HRESULT,
    pub SetLightSource: unsafe extern "system" fn(
        this: *mut ::core::ffi::c_void,
        value: *mut ::core::ffi::c_void,
    ) -> ::windows::core::HRESULT,
    pub MaxBlurRadius: unsafe extern "system" fn(
        this: *mut ::core::ffi::c_void,
        result__: *mut f32,
    ) -> ::windows::core::HRESULT,
    pub SetMaxBlurRadius: unsafe extern "system" fn(
        this: *mut ::core::ffi::c_void,
        value: f32,
    ) -> ::windows::core::HRESULT,
    pub MinBlurRadius: unsafe extern "system" fn(
        this: *mut ::core::ffi::c_void,
        result__: *mut f32,
    ) -> ::windows::core::HRESULT,
    pub SetMinBlurRadius: unsafe extern "system" fn(
        this: *mut ::core::ffi::c_void,
        value: f32,
    ) -> ::windows::core::HRESULT,
    pub Receivers: unsafe extern "system" fn(
        this: *mut ::core::ffi::c_void,
        result__: *mut *mut ::core::ffi::c_void,
    ) -> ::windows::core::HRESULT,
}
#[doc(hidden)]
#[repr(transparent)]
pub struct ICompositionProjectedShadowCaster(::windows::core::IUnknown);
unsafe impl ::windows::core::Vtable for ICompositionProjectedShadowCaster {
    type Vtable = ICompositionProjectedShadowCaster_Vtbl;
}
unsafe impl ::windows::core::Interface for ICompositionProjectedShadowCaster {
    const IID: ::windows::core::GUID =
        ::windows::core::GUID::from_u128(0x15a9f2d0_6bae_521b_90c7_c7500f2bf562);
}
#[repr(C)]
#[doc(hidden)]
pub struct ICompositionProjectedShadowCaster_Vtbl {
    pub base__: ::windows::core::IInspectable_Vtbl,
    pub Brush: unsafe extern "system" fn(
        this: *mut ::core::ffi::c_void,
        result__: *mut *mut ::core::ffi::c_void,
    ) -> ::windows::core::HRESULT,
    pub SetBrush: unsafe extern "system" fn(
        this: *mut ::core::ffi::c_void,
        value: *mut ::core::ffi::c_void,
    ) -> ::windows::core::HRESULT,
    pub CastingVisual: unsafe extern "system" fn(
        this: *mut ::core::ffi::c_void,
        result__: *mut *mut ::core::ffi::c_void,
    ) -> ::windows::core::HRESULT,
    pub SetCastingVisual: unsafe extern "system" fn(
        this: *mut ::core::ffi::c_void,
        value: *mut ::core::ffi::c_void,
    ) -> ::windows::core::HRESULT,
}
#[doc(hidden)]
#[repr(transparent)]
pub struct ICompositionProjectedShadowCasterCollection(::windows::core::IUnknown);
unsafe impl ::windows::core::Vtable for ICompositionProjectedShadowCasterCollection {
    type Vtable = ICompositionProjectedShadowCasterCollection_Vtbl;
}
unsafe impl ::windows::core::Interface for ICompositionProjectedShadowCasterCollection {
    const IID: ::windows::core::GUID =
        ::windows::core::GUID::from_u128(0xb120bfdc_533c_57a9_ae16_d43ba52472c4);
}
#[repr(C)]
#[doc(hidden)]
pub struct ICompositionProjectedShadowCasterCollection_Vtbl {
    pub base__: ::windows::core::IInspectable_Vtbl,
    pub Count: unsafe extern "system" fn(
        this: *mut ::core::ffi::c_void,
        result__: *mut i32,
    ) -> ::windows::core::HRESULT,
    pub InsertAbove: unsafe extern "system" fn(
        this: *mut ::core::ffi::c_void,
        newcaster: *mut ::core::ffi::c_void,
        reference: *mut ::core::ffi::c_void,
    ) -> ::windows::core::HRESULT,
    pub InsertAtBottom: unsafe extern "system" fn(
        this: *mut ::core::ffi::c_void,
        newcaster: *mut ::core::ffi::c_void,
    ) -> ::windows::core::HRESULT,
    pub InsertAtTop: unsafe extern "system" fn(
        this: *mut ::core::ffi::c_void,
        newcaster: *mut ::core::ffi::c_void,
    ) -> ::windows::core::HRESULT,
    pub InsertBelow: unsafe extern "system" fn(
        this: *mut ::core::ffi::c_void,
        newcaster: *mut ::core::ffi::c_void,
        reference: *mut ::core::ffi::c_void,
    ) -> ::windows::core::HRESULT,
    pub Remove: unsafe extern "system" fn(
        this: *mut ::core::ffi::c_void,
        caster: *mut ::core::ffi::c_void,
    ) -> ::windows::core::HRESULT,
    pub RemoveAll:
        unsafe extern "system" fn(this: *mut ::core::ffi::c_void) -> ::windows::core::HRESULT,
}
#[doc(hidden)]
#[repr(transparent)]
pub struct ICompositionProjectedShadowCasterCollectionStatics(::windows::core::IUnknown);
unsafe impl ::windows::core::Vtable for ICompositionProjectedShadowCasterCollectionStatics {
    type Vtable = ICompositionProjectedShadowCasterCollectionStatics_Vtbl;
}
unsafe impl ::windows::core::Interface for ICompositionProjectedShadowCasterCollectionStatics {
    const IID: ::windows::core::GUID =
        ::windows::core::GUID::from_u128(0x43a98014_b88b_5b2a_b1e2_5e776ab77538);
}
#[repr(C)]
#[doc(hidden)]
pub struct ICompositionProjectedShadowCasterCollectionStatics_Vtbl {
    pub base__: ::windows::core::IInspectable_Vtbl,
    pub MaxRespectedCasters: unsafe extern "system" fn(
        this: *mut ::core::ffi::c_void,
        result__: *mut i32,
    ) -> ::windows::core::HRESULT,
}
#[doc(hidden)]
#[repr(transparent)]
pub struct ICompositionProjectedShadowReceiver(::windows::core::IUnknown);
unsafe impl ::windows::core::Vtable for ICompositionProjectedShadowReceiver {
    type Vtable = ICompositionProjectedShadowReceiver_Vtbl;
}
unsafe impl ::windows::core::Interface for ICompositionProjectedShadowReceiver {
    const IID: ::windows::core::GUID =
        ::windows::core::GUID::from_u128(0x29fe12b0_f1a0_50e1_af28_2e943bc819d6);
}
#[repr(C)]
#[doc(hidden)]
pub struct ICompositionProjectedShadowReceiver_Vtbl {
    pub base__: ::windows::core::IInspectable_Vtbl,
    pub ReceivingVisual: unsafe extern "system" fn(
        this: *mut ::core::ffi::c_void,
        result__: *mut *mut ::core::ffi::c_void,
    ) -> ::windows::core::HRESULT,
    pub SetReceivingVisual: unsafe extern "system" fn(
        this: *mut ::core::ffi::c_void,
        value: *mut ::core::ffi::c_void,
    ) -> ::windows::core::HRESULT,
}
#[doc(hidden)]
#[repr(transparent)]
pub struct ICompositionProjectedShadowReceiverUnorderedCollection(::windows::core::IUnknown);
unsafe impl ::windows::core::Vtable for ICompositionProjectedShadowReceiverUnorderedCollection {
    type Vtable = ICompositionProjectedShadowReceiverUnorderedCollection_Vtbl;
}
unsafe impl ::windows::core::Interface for ICompositionProjectedShadowReceiverUnorderedCollection {
    const IID: ::windows::core::GUID =
        ::windows::core::GUID::from_u128(0x2d35f751_a1fa_5fff_b156_6d8fcd8362ed);
}
#[repr(C)]
#[doc(hidden)]
pub struct ICompositionProjectedShadowReceiverUnorderedCollection_Vtbl {
    pub base__: ::windows::core::IInspectable_Vtbl,
    pub Add: unsafe extern "system" fn(
        this: *mut ::core::ffi::c_void,
        value: *mut ::core::ffi::c_void,
    ) -> ::windows::core::HRESULT,
    pub Count: unsafe extern "system" fn(
        this: *mut ::core::ffi::c_void,
        result__: *mut i32,
    ) -> ::windows::core::HRESULT,
    pub Remove: unsafe extern "system" fn(
        this: *mut ::core::ffi::c_void,
        value: *mut ::core::ffi::c_void,
    ) -> ::windows::core::HRESULT,
    pub RemoveAll:
        unsafe extern "system" fn(this: *mut ::core::ffi::c_void) -> ::windows::core::HRESULT,
}
#[doc(hidden)]
#[repr(transparent)]
pub struct ICompositionPropertySet(::windows::core::IUnknown);
unsafe impl ::windows::core::Vtable for ICompositionPropertySet {
    type Vtable = ICompositionPropertySet_Vtbl;
}
unsafe impl ::windows::core::Interface for ICompositionPropertySet {
    const IID: ::windows::core::GUID =
        ::windows::core::GUID::from_u128(0x97f7a17b_97be_5545_9f1c_0b9d44577f57);
}
#[repr(C)]
#[doc(hidden)]
pub struct ICompositionPropertySet_Vtbl {
    pub base__: ::windows::core::IInspectable_Vtbl,
    pub InsertColor: unsafe extern "system" fn(
        this: *mut ::core::ffi::c_void,
        propertyname: ::core::mem::ManuallyDrop<::windows::core::HSTRING>,
        value: ::windows::UI::Color,
    ) -> ::windows::core::HRESULT,
    pub InsertMatrix3x2: unsafe extern "system" fn(
        this: *mut ::core::ffi::c_void,
        propertyname: ::core::mem::ManuallyDrop<::windows::core::HSTRING>,
        value: ::windows::Foundation::Numerics::Matrix3x2,
    ) -> ::windows::core::HRESULT,
    pub InsertMatrix4x4: unsafe extern "system" fn(
        this: *mut ::core::ffi::c_void,
        propertyname: ::core::mem::ManuallyDrop<::windows::core::HSTRING>,
        value: ::windows::Foundation::Numerics::Matrix4x4,
    ) -> ::windows::core::HRESULT,
    pub InsertQuaternion: unsafe extern "system" fn(
        this: *mut ::core::ffi::c_void,
        propertyname: ::core::mem::ManuallyDrop<::windows::core::HSTRING>,
        value: ::windows::Foundation::Numerics::Quaternion,
    ) -> ::windows::core::HRESULT,
    pub InsertScalar: unsafe extern "system" fn(
        this: *mut ::core::ffi::c_void,
        propertyname: ::core::mem::ManuallyDrop<::windows::core::HSTRING>,
        value: f32,
    ) -> ::windows::core::HRESULT,
    pub InsertVector2: unsafe extern "system" fn(
        this: *mut ::core::ffi::c_void,
        propertyname: ::core::mem::ManuallyDrop<::windows::core::HSTRING>,
        value: ::windows::Foundation::Numerics::Vector2,
    ) -> ::windows::core::HRESULT,
    pub InsertVector3: unsafe extern "system" fn(
        this: *mut ::core::ffi::c_void,
        propertyname: ::core::mem::ManuallyDrop<::windows::core::HSTRING>,
        value: ::windows::Foundation::Numerics::Vector3,
    ) -> ::windows::core::HRESULT,
    pub InsertVector4: unsafe extern "system" fn(
        this: *mut ::core::ffi::c_void,
        propertyname: ::core::mem::ManuallyDrop<::windows::core::HSTRING>,
        value: ::windows::Foundation::Numerics::Vector4,
    ) -> ::windows::core::HRESULT,
    pub TryGetColor: unsafe extern "system" fn(
        this: *mut ::core::ffi::c_void,
        propertyname: ::core::mem::ManuallyDrop<::windows::core::HSTRING>,
        value: *mut ::windows::UI::Color,
        result__: *mut CompositionGetValueStatus,
    ) -> ::windows::core::HRESULT,
    pub TryGetMatrix3x2: unsafe extern "system" fn(
        this: *mut ::core::ffi::c_void,
        propertyname: ::core::mem::ManuallyDrop<::windows::core::HSTRING>,
        value: *mut ::windows::Foundation::Numerics::Matrix3x2,
        result__: *mut CompositionGetValueStatus,
    ) -> ::windows::core::HRESULT,
    pub TryGetMatrix4x4: unsafe extern "system" fn(
        this: *mut ::core::ffi::c_void,
        propertyname: ::core::mem::ManuallyDrop<::windows::core::HSTRING>,
        value: *mut ::windows::Foundation::Numerics::Matrix4x4,
        result__: *mut CompositionGetValueStatus,
    ) -> ::windows::core::HRESULT,
    pub TryGetQuaternion: unsafe extern "system" fn(
        this: *mut ::core::ffi::c_void,
        propertyname: ::core::mem::ManuallyDrop<::windows::core::HSTRING>,
        value: *mut ::windows::Foundation::Numerics::Quaternion,
        result__: *mut CompositionGetValueStatus,
    ) -> ::windows::core::HRESULT,
    pub TryGetScalar: unsafe extern "system" fn(
        this: *mut ::core::ffi::c_void,
        propertyname: ::core::mem::ManuallyDrop<::windows::core::HSTRING>,
        value: *mut f32,
        result__: *mut CompositionGetValueStatus,
    ) -> ::windows::core::HRESULT,
    pub TryGetVector2: unsafe extern "system" fn(
        this: *mut ::core::ffi::c_void,
        propertyname: ::core::mem::ManuallyDrop<::windows::core::HSTRING>,
        value: *mut ::windows::Foundation::Numerics::Vector2,
        result__: *mut CompositionGetValueStatus,
    ) -> ::windows::core::HRESULT,
    pub TryGetVector3: unsafe extern "system" fn(
        this: *mut ::core::ffi::c_void,
        propertyname: ::core::mem::ManuallyDrop<::windows::core::HSTRING>,
        value: *mut ::windows::Foundation::Numerics::Vector3,
        result__: *mut CompositionGetValueStatus,
    ) -> ::windows::core::HRESULT,
    pub TryGetVector4: unsafe extern "system" fn(
        this: *mut ::core::ffi::c_void,
        propertyname: ::core::mem::ManuallyDrop<::windows::core::HSTRING>,
        value: *mut ::windows::Foundation::Numerics::Vector4,
        result__: *mut CompositionGetValueStatus,
    ) -> ::windows::core::HRESULT,
}
#[doc(hidden)]
#[repr(transparent)]
pub struct ICompositionPropertySet2(::windows::core::IUnknown);
unsafe impl ::windows::core::Vtable for ICompositionPropertySet2 {
    type Vtable = ICompositionPropertySet2_Vtbl;
}
unsafe impl ::windows::core::Interface for ICompositionPropertySet2 {
    const IID: ::windows::core::GUID =
        ::windows::core::GUID::from_u128(0x3db6d621_3497_55e4_95bf_8ae5e7c34c33);
}
#[repr(C)]
#[doc(hidden)]
pub struct ICompositionPropertySet2_Vtbl {
    pub base__: ::windows::core::IInspectable_Vtbl,
    pub InsertBoolean: unsafe extern "system" fn(
        this: *mut ::core::ffi::c_void,
        propertyname: ::core::mem::ManuallyDrop<::windows::core::HSTRING>,
        value: bool,
    ) -> ::windows::core::HRESULT,
    pub TryGetBoolean: unsafe extern "system" fn(
        this: *mut ::core::ffi::c_void,
        propertyname: ::core::mem::ManuallyDrop<::windows::core::HSTRING>,
        value: *mut bool,
        result__: *mut CompositionGetValueStatus,
    ) -> ::windows::core::HRESULT,
}
#[doc(hidden)]
#[repr(transparent)]
pub struct ICompositionRadialGradientBrush(::windows::core::IUnknown);
unsafe impl ::windows::core::Vtable for ICompositionRadialGradientBrush {
    type Vtable = ICompositionRadialGradientBrush_Vtbl;
}
unsafe impl ::windows::core::Interface for ICompositionRadialGradientBrush {
    const IID: ::windows::core::GUID =
        ::windows::core::GUID::from_u128(0x17662f3f_d351_5435_b3b4_ec26cefeccc5);
}
#[repr(C)]
#[doc(hidden)]
pub struct ICompositionRadialGradientBrush_Vtbl {
    pub base__: ::windows::core::IInspectable_Vtbl,
    pub EllipseCenter: unsafe extern "system" fn(
        this: *mut ::core::ffi::c_void,
        result__: *mut ::windows::Foundation::Numerics::Vector2,
    ) -> ::windows::core::HRESULT,
    pub SetEllipseCenter: unsafe extern "system" fn(
        this: *mut ::core::ffi::c_void,
        value: ::windows::Foundation::Numerics::Vector2,
    ) -> ::windows::core::HRESULT,
    pub EllipseRadius: unsafe extern "system" fn(
        this: *mut ::core::ffi::c_void,
        result__: *mut ::windows::Foundation::Numerics::Vector2,
    ) -> ::windows::core::HRESULT,
    pub SetEllipseRadius: unsafe extern "system" fn(
        this: *mut ::core::ffi::c_void,
        value: ::windows::Foundation::Numerics::Vector2,
    ) -> ::windows::core::HRESULT,
    pub GradientOriginOffset: unsafe extern "system" fn(
        this: *mut ::core::ffi::c_void,
        result__: *mut ::windows::Foundation::Numerics::Vector2,
    ) -> ::windows::core::HRESULT,
    pub SetGradientOriginOffset: unsafe extern "system" fn(
        this: *mut ::core::ffi::c_void,
        value: ::windows::Foundation::Numerics::Vector2,
    ) -> ::windows::core::HRESULT,
}
#[doc(hidden)]
#[repr(transparent)]
pub struct ICompositionRectangleGeometry(::windows::core::IUnknown);
unsafe impl ::windows::core::Vtable for ICompositionRectangleGeometry {
    type Vtable = ICompositionRectangleGeometry_Vtbl;
}
unsafe impl ::windows::core::Interface for ICompositionRectangleGeometry {
    const IID: ::windows::core::GUID =
        ::windows::core::GUID::from_u128(0xbd551fcf_2c7f_5125_ac44_50a4f1d8fa76);
}
#[repr(C)]
#[doc(hidden)]
pub struct ICompositionRectangleGeometry_Vtbl {
    pub base__: ::windows::core::IInspectable_Vtbl,
    pub Offset: unsafe extern "system" fn(
        this: *mut ::core::ffi::c_void,
        result__: *mut ::windows::Foundation::Numerics::Vector2,
    ) -> ::windows::core::HRESULT,
    pub SetOffset: unsafe extern "system" fn(
        this: *mut ::core::ffi::c_void,
        value: ::windows::Foundation::Numerics::Vector2,
    ) -> ::windows::core::HRESULT,
    pub Size: unsafe extern "system" fn(
        this: *mut ::core::ffi::c_void,
        result__: *mut ::windows::Foundation::Numerics::Vector2,
    ) -> ::windows::core::HRESULT,
    pub SetSize: unsafe extern "system" fn(
        this: *mut ::core::ffi::c_void,
        value: ::windows::Foundation::Numerics::Vector2,
    ) -> ::windows::core::HRESULT,
}
#[doc(hidden)]
#[repr(transparent)]
pub struct ICompositionRoundedRectangleGeometry(::windows::core::IUnknown);
unsafe impl ::windows::core::Vtable for ICompositionRoundedRectangleGeometry {
    type Vtable = ICompositionRoundedRectangleGeometry_Vtbl;
}
unsafe impl ::windows::core::Interface for ICompositionRoundedRectangleGeometry {
    const IID: ::windows::core::GUID =
        ::windows::core::GUID::from_u128(0x02eafc87_8d1f_5445_a416_d81baee8a750);
}
#[repr(C)]
#[doc(hidden)]
pub struct ICompositionRoundedRectangleGeometry_Vtbl {
    pub base__: ::windows::core::IInspectable_Vtbl,
    pub CornerRadius: unsafe extern "system" fn(
        this: *mut ::core::ffi::c_void,
        result__: *mut ::windows::Foundation::Numerics::Vector2,
    ) -> ::windows::core::HRESULT,
    pub SetCornerRadius: unsafe extern "system" fn(
        this: *mut ::core::ffi::c_void,
        value: ::windows::Foundation::Numerics::Vector2,
    ) -> ::windows::core::HRESULT,
    pub Offset: unsafe extern "system" fn(
        this: *mut ::core::ffi::c_void,
        result__: *mut ::windows::Foundation::Numerics::Vector2,
    ) -> ::windows::core::HRESULT,
    pub SetOffset: unsafe extern "system" fn(
        this: *mut ::core::ffi::c_void,
        value: ::windows::Foundation::Numerics::Vector2,
    ) -> ::windows::core::HRESULT,
    pub Size: unsafe extern "system" fn(
        this: *mut ::core::ffi::c_void,
        result__: *mut ::windows::Foundation::Numerics::Vector2,
    ) -> ::windows::core::HRESULT,
    pub SetSize: unsafe extern "system" fn(
        this: *mut ::core::ffi::c_void,
        value: ::windows::Foundation::Numerics::Vector2,
    ) -> ::windows::core::HRESULT,
}
#[doc(hidden)]
#[repr(transparent)]
pub struct ICompositionScopedBatch(::windows::core::IUnknown);
unsafe impl ::windows::core::Vtable for ICompositionScopedBatch {
    type Vtable = ICompositionScopedBatch_Vtbl;
}
unsafe impl ::windows::core::Interface for ICompositionScopedBatch {
    const IID: ::windows::core::GUID =
        ::windows::core::GUID::from_u128(0xd31ca572_99ce_5969_b042_6c2d330a3859);
}
#[repr(C)]
#[doc(hidden)]
pub struct ICompositionScopedBatch_Vtbl {
    pub base__: ::windows::core::IInspectable_Vtbl,
    pub IsActive: unsafe extern "system" fn(
        this: *mut ::core::ffi::c_void,
        result__: *mut bool,
    ) -> ::windows::core::HRESULT,
    pub IsEnded: unsafe extern "system" fn(
        this: *mut ::core::ffi::c_void,
        result__: *mut bool,
    ) -> ::windows::core::HRESULT,
    pub End: unsafe extern "system" fn(this: *mut ::core::ffi::c_void) -> ::windows::core::HRESULT,
    pub Resume:
        unsafe extern "system" fn(this: *mut ::core::ffi::c_void) -> ::windows::core::HRESULT,
    pub Suspend:
        unsafe extern "system" fn(this: *mut ::core::ffi::c_void) -> ::windows::core::HRESULT,
    pub Completed: unsafe extern "system" fn(
        this: *mut ::core::ffi::c_void,
        handler: *mut ::core::ffi::c_void,
        result__: *mut ::windows::Foundation::EventRegistrationToken,
    ) -> ::windows::core::HRESULT,
    pub RemoveCompleted: unsafe extern "system" fn(
        this: *mut ::core::ffi::c_void,
        token: ::windows::Foundation::EventRegistrationToken,
    ) -> ::windows::core::HRESULT,
}
#[doc(hidden)]
#[repr(transparent)]
pub struct ICompositionShadow(::windows::core::IUnknown);
unsafe impl ::windows::core::Vtable for ICompositionShadow {
    type Vtable = ICompositionShadow_Vtbl;
}
unsafe impl ::windows::core::Interface for ICompositionShadow {
    const IID: ::windows::core::GUID =
        ::windows::core::GUID::from_u128(0x176b8bb5_4dae_59b2_b9a0_2499b243267c);
}
#[repr(C)]
#[doc(hidden)]
pub struct ICompositionShadow_Vtbl {
    pub base__: ::windows::core::IInspectable_Vtbl,
}
#[doc(hidden)]
#[repr(transparent)]
pub struct ICompositionShadowFactory(::windows::core::IUnknown);
unsafe impl ::windows::core::Vtable for ICompositionShadowFactory {
    type Vtable = ICompositionShadowFactory_Vtbl;
}
unsafe impl ::windows::core::Interface for ICompositionShadowFactory {
    const IID: ::windows::core::GUID =
        ::windows::core::GUID::from_u128(0xff27546d_9750_54ae_ab8c_126cbe9158c3);
}
#[repr(C)]
#[doc(hidden)]
pub struct ICompositionShadowFactory_Vtbl {
    pub base__: ::windows::core::IInspectable_Vtbl,
}
#[doc(hidden)]
#[repr(transparent)]
pub struct ICompositionShape(::windows::core::IUnknown);
unsafe impl ::windows::core::Vtable for ICompositionShape {
    type Vtable = ICompositionShape_Vtbl;
}
unsafe impl ::windows::core::Interface for ICompositionShape {
    const IID: ::windows::core::GUID =
        ::windows::core::GUID::from_u128(0xed75d4d8_437f_5640_9720_faae35ce5895);
}
#[repr(C)]
#[doc(hidden)]
pub struct ICompositionShape_Vtbl {
    pub base__: ::windows::core::IInspectable_Vtbl,
    pub CenterPoint: unsafe extern "system" fn(
        this: *mut ::core::ffi::c_void,
        result__: *mut ::windows::Foundation::Numerics::Vector2,
    ) -> ::windows::core::HRESULT,
    pub SetCenterPoint: unsafe extern "system" fn(
        this: *mut ::core::ffi::c_void,
        value: ::windows::Foundation::Numerics::Vector2,
    ) -> ::windows::core::HRESULT,
    pub Offset: unsafe extern "system" fn(
        this: *mut ::core::ffi::c_void,
        result__: *mut ::windows::Foundation::Numerics::Vector2,
    ) -> ::windows::core::HRESULT,
    pub SetOffset: unsafe extern "system" fn(
        this: *mut ::core::ffi::c_void,
        value: ::windows::Foundation::Numerics::Vector2,
    ) -> ::windows::core::HRESULT,
    pub RotationAngle: unsafe extern "system" fn(
        this: *mut ::core::ffi::c_void,
        result__: *mut f32,
    ) -> ::windows::core::HRESULT,
    pub SetRotationAngle: unsafe extern "system" fn(
        this: *mut ::core::ffi::c_void,
        value: f32,
    ) -> ::windows::core::HRESULT,
    pub RotationAngleInDegrees: unsafe extern "system" fn(
        this: *mut ::core::ffi::c_void,
        result__: *mut f32,
    ) -> ::windows::core::HRESULT,
    pub SetRotationAngleInDegrees: unsafe extern "system" fn(
        this: *mut ::core::ffi::c_void,
        value: f32,
    ) -> ::windows::core::HRESULT,
    pub Scale: unsafe extern "system" fn(
        this: *mut ::core::ffi::c_void,
        result__: *mut ::windows::Foundation::Numerics::Vector2,
    ) -> ::windows::core::HRESULT,
    pub SetScale: unsafe extern "system" fn(
        this: *mut ::core::ffi::c_void,
        value: ::windows::Foundation::Numerics::Vector2,
    ) -> ::windows::core::HRESULT,
    pub TransformMatrix: unsafe extern "system" fn(
        this: *mut ::core::ffi::c_void,
        result__: *mut ::windows::Foundation::Numerics::Matrix3x2,
    ) -> ::windows::core::HRESULT,
    pub SetTransformMatrix: unsafe extern "system" fn(
        this: *mut ::core::ffi::c_void,
        value: ::windows::Foundation::Numerics::Matrix3x2,
    ) -> ::windows::core::HRESULT,
}
#[doc(hidden)]
#[repr(transparent)]
pub struct ICompositionShapeFactory(::windows::core::IUnknown);
unsafe impl ::windows::core::Vtable for ICompositionShapeFactory {
    type Vtable = ICompositionShapeFactory_Vtbl;
}
unsafe impl ::windows::core::Interface for ICompositionShapeFactory {
    const IID: ::windows::core::GUID =
        ::windows::core::GUID::from_u128(0x7aa2b987_9cdd_5b6e_8ac1_e989d78b4811);
}
#[repr(C)]
#[doc(hidden)]
pub struct ICompositionShapeFactory_Vtbl {
    pub base__: ::windows::core::IInspectable_Vtbl,
}
#[doc(hidden)]
#[repr(transparent)]
pub struct ICompositionSpriteShape(::windows::core::IUnknown);
unsafe impl ::windows::core::Vtable for ICompositionSpriteShape {
    type Vtable = ICompositionSpriteShape_Vtbl;
}
unsafe impl ::windows::core::Interface for ICompositionSpriteShape {
    const IID: ::windows::core::GUID =
        ::windows::core::GUID::from_u128(0x982138f2_5781_509a_ba5d_112bcb0b98ef);
}
#[repr(C)]
#[doc(hidden)]
pub struct ICompositionSpriteShape_Vtbl {
    pub base__: ::windows::core::IInspectable_Vtbl,
    pub FillBrush: unsafe extern "system" fn(
        this: *mut ::core::ffi::c_void,
        result__: *mut *mut ::core::ffi::c_void,
    ) -> ::windows::core::HRESULT,
    pub SetFillBrush: unsafe extern "system" fn(
        this: *mut ::core::ffi::c_void,
        value: *mut ::core::ffi::c_void,
    ) -> ::windows::core::HRESULT,
    pub Geometry: unsafe extern "system" fn(
        this: *mut ::core::ffi::c_void,
        result__: *mut *mut ::core::ffi::c_void,
    ) -> ::windows::core::HRESULT,
    pub SetGeometry: unsafe extern "system" fn(
        this: *mut ::core::ffi::c_void,
        value: *mut ::core::ffi::c_void,
    ) -> ::windows::core::HRESULT,
    pub IsStrokeNonScaling: unsafe extern "system" fn(
        this: *mut ::core::ffi::c_void,
        result__: *mut bool,
    ) -> ::windows::core::HRESULT,
    pub SetIsStrokeNonScaling: unsafe extern "system" fn(
        this: *mut ::core::ffi::c_void,
        value: bool,
    ) -> ::windows::core::HRESULT,
    pub StrokeBrush: unsafe extern "system" fn(
        this: *mut ::core::ffi::c_void,
        result__: *mut *mut ::core::ffi::c_void,
    ) -> ::windows::core::HRESULT,
    pub SetStrokeBrush: unsafe extern "system" fn(
        this: *mut ::core::ffi::c_void,
        value: *mut ::core::ffi::c_void,
    ) -> ::windows::core::HRESULT,
    pub StrokeDashArray: unsafe extern "system" fn(
        this: *mut ::core::ffi::c_void,
        result__: *mut *mut ::core::ffi::c_void,
    ) -> ::windows::core::HRESULT,
    pub StrokeDashCap: unsafe extern "system" fn(
        this: *mut ::core::ffi::c_void,
        result__: *mut CompositionStrokeCap,
    ) -> ::windows::core::HRESULT,
    pub SetStrokeDashCap: unsafe extern "system" fn(
        this: *mut ::core::ffi::c_void,
        value: CompositionStrokeCap,
    ) -> ::windows::core::HRESULT,
    pub StrokeDashOffset: unsafe extern "system" fn(
        this: *mut ::core::ffi::c_void,
        result__: *mut f32,
    ) -> ::windows::core::HRESULT,
    pub SetStrokeDashOffset: unsafe extern "system" fn(
        this: *mut ::core::ffi::c_void,
        value: f32,
    ) -> ::windows::core::HRESULT,
    pub StrokeEndCap: unsafe extern "system" fn(
        this: *mut ::core::ffi::c_void,
        result__: *mut CompositionStrokeCap,
    ) -> ::windows::core::HRESULT,
    pub SetStrokeEndCap: unsafe extern "system" fn(
        this: *mut ::core::ffi::c_void,
        value: CompositionStrokeCap,
    ) -> ::windows::core::HRESULT,
    pub StrokeLineJoin: unsafe extern "system" fn(
        this: *mut ::core::ffi::c_void,
        result__: *mut CompositionStrokeLineJoin,
    ) -> ::windows::core::HRESULT,
    pub SetStrokeLineJoin: unsafe extern "system" fn(
        this: *mut ::core::ffi::c_void,
        value: CompositionStrokeLineJoin,
    ) -> ::windows::core::HRESULT,
    pub StrokeMiterLimit: unsafe extern "system" fn(
        this: *mut ::core::ffi::c_void,
        result__: *mut f32,
    ) -> ::windows::core::HRESULT,
    pub SetStrokeMiterLimit: unsafe extern "system" fn(
        this: *mut ::core::ffi::c_void,
        value: f32,
    ) -> ::windows::core::HRESULT,
    pub StrokeStartCap: unsafe extern "system" fn(
        this: *mut ::core::ffi::c_void,
        result__: *mut CompositionStrokeCap,
    ) -> ::windows::core::HRESULT,
    pub SetStrokeStartCap: unsafe extern "system" fn(
        this: *mut ::core::ffi::c_void,
        value: CompositionStrokeCap,
    ) -> ::windows::core::HRESULT,
    pub StrokeThickness: unsafe extern "system" fn(
        this: *mut ::core::ffi::c_void,
        result__: *mut f32,
    ) -> ::windows::core::HRESULT,
    pub SetStrokeThickness: unsafe extern "system" fn(
        this: *mut ::core::ffi::c_void,
        value: f32,
    ) -> ::windows::core::HRESULT,
}
#[doc = "*Required features: `\"UI_Composition\"`*"]
#[repr(transparent)]
pub struct ICompositionSupportsSystemBackdrop(::windows::core::IUnknown);
impl ICompositionSupportsSystemBackdrop {
    pub fn SystemBackdrop(
        &self,
    ) -> ::windows::core::Result<::windows::UI::Composition::CompositionBrush> {
        let this = self;
        unsafe {
            let mut result__ = ::core::mem::MaybeUninit::zeroed();
            (::windows::core::Vtable::vtable(this).SystemBackdrop)(
                ::windows::core::Vtable::as_raw(this),
                result__.as_mut_ptr(),
            )
            .from_abi::<::windows::UI::Composition::CompositionBrush>(result__)
        }
    }
    pub fn SetSystemBackdrop<'a, P0>(&self, value: P0) -> ::windows::core::Result<()>
    where
        P0: ::std::convert::Into<
            ::windows::core::InParam<'a, ::windows::UI::Composition::CompositionBrush>,
        >,
    {
        let this = self;
        unsafe {
            (::windows::core::Vtable::vtable(this).SetSystemBackdrop)(
                ::windows::core::Vtable::as_raw(this),
                value.into().abi(),
            )
            .ok()
        }
    }
}
::windows::core::interface_hierarchy!(
    ICompositionSupportsSystemBackdrop,
    ::windows::core::IUnknown,
    ::windows::core::IInspectable
);
impl ::core::clone::Clone for ICompositionSupportsSystemBackdrop {
    fn clone(&self) -> Self {
        Self(self.0.clone())
    }
}
impl ::core::cmp::PartialEq for ICompositionSupportsSystemBackdrop {
    fn eq(&self, other: &Self) -> bool {
        self.0 == other.0
    }
}
impl ::core::cmp::Eq for ICompositionSupportsSystemBackdrop {}
impl ::core::fmt::Debug for ICompositionSupportsSystemBackdrop {
    fn fmt(&self, f: &mut ::core::fmt::Formatter<'_>) -> ::core::fmt::Result {
        f.debug_tuple("ICompositionSupportsSystemBackdrop").field(&self.0).finish()
    }
}
unsafe impl ::windows::core::RuntimeType for ICompositionSupportsSystemBackdrop {
    const SIGNATURE: ::windows::core::ConstBuffer =
        ::windows::core::ConstBuffer::from_slice(b"{397dafe4-b6c2-5bb9-951d-f5707de8b7bc}");
    type DefaultType = ::core::option::Option<Self>;
    fn from_default(from: &Self::DefaultType) -> ::windows::core::Result<Self> {
        from.as_ref().cloned().ok_or(::windows::core::Error::OK)
    }
}
unsafe impl ::windows::core::Vtable for ICompositionSupportsSystemBackdrop {
    type Vtable = ICompositionSupportsSystemBackdrop_Vtbl;
}
unsafe impl ::windows::core::Interface for ICompositionSupportsSystemBackdrop {
    const IID: ::windows::core::GUID =
        ::windows::core::GUID::from_u128(0x397dafe4_b6c2_5bb9_951d_f5707de8b7bc);
}
#[repr(C)]
#[doc(hidden)]
pub struct ICompositionSupportsSystemBackdrop_Vtbl {
    pub base__: ::windows::core::IInspectable_Vtbl,
    pub SystemBackdrop: unsafe extern "system" fn(
        this: *mut ::core::ffi::c_void,
        result__: *mut *mut ::core::ffi::c_void,
    ) -> ::windows::core::HRESULT,
    pub SetSystemBackdrop: unsafe extern "system" fn(
        this: *mut ::core::ffi::c_void,
        value: *mut ::core::ffi::c_void,
    ) -> ::windows::core::HRESULT,
}
#[doc = "*Required features: `\"UI_Composition\"`*"]
#[repr(transparent)]
pub struct ICompositionSurface(::windows::core::IUnknown);
impl ICompositionSurface {}
::windows::core::interface_hierarchy!(
    ICompositionSurface,
    ::windows::core::IUnknown,
    ::windows::core::IInspectable
);
impl ::core::clone::Clone for ICompositionSurface {
    fn clone(&self) -> Self {
        Self(self.0.clone())
    }
}
impl ::core::cmp::PartialEq for ICompositionSurface {
    fn eq(&self, other: &Self) -> bool {
        self.0 == other.0
    }
}
impl ::core::cmp::Eq for ICompositionSurface {}
impl ::core::fmt::Debug for ICompositionSurface {
    fn fmt(&self, f: &mut ::core::fmt::Formatter<'_>) -> ::core::fmt::Result {
        f.debug_tuple("ICompositionSurface").field(&self.0).finish()
    }
}
unsafe impl ::windows::core::RuntimeType for ICompositionSurface {
    const SIGNATURE: ::windows::core::ConstBuffer =
        ::windows::core::ConstBuffer::from_slice(b"{9ec612c3-a5d2-4f97-9df3-6b49ce736215}");
    type DefaultType = ::core::option::Option<Self>;
    fn from_default(from: &Self::DefaultType) -> ::windows::core::Result<Self> {
        from.as_ref().cloned().ok_or(::windows::core::Error::OK)
    }
}
unsafe impl ::windows::core::Vtable for ICompositionSurface {
    type Vtable = ICompositionSurface_Vtbl;
}
unsafe impl ::windows::core::Interface for ICompositionSurface {
    const IID: ::windows::core::GUID =
        ::windows::core::GUID::from_u128(0x9ec612c3_a5d2_4f97_9df3_6b49ce736215);
}
#[repr(C)]
#[doc(hidden)]
pub struct ICompositionSurface_Vtbl {
    pub base__: ::windows::core::IInspectable_Vtbl,
}
#[doc(hidden)]
#[repr(transparent)]
pub struct ICompositionSurfaceBrush(::windows::core::IUnknown);
unsafe impl ::windows::core::Vtable for ICompositionSurfaceBrush {
    type Vtable = ICompositionSurfaceBrush_Vtbl;
}
unsafe impl ::windows::core::Interface for ICompositionSurfaceBrush {
    const IID: ::windows::core::GUID =
        ::windows::core::GUID::from_u128(0x616bb5a5_0a33_512d_b4b1_3d3734f04aca);
}
#[repr(C)]
#[doc(hidden)]
pub struct ICompositionSurfaceBrush_Vtbl {
    pub base__: ::windows::core::IInspectable_Vtbl,
    pub BitmapInterpolationMode: unsafe extern "system" fn(
        this: *mut ::core::ffi::c_void,
        result__: *mut CompositionBitmapInterpolationMode,
    ) -> ::windows::core::HRESULT,
    pub SetBitmapInterpolationMode: unsafe extern "system" fn(
        this: *mut ::core::ffi::c_void,
        value: CompositionBitmapInterpolationMode,
    ) -> ::windows::core::HRESULT,
    pub HorizontalAlignmentRatio: unsafe extern "system" fn(
        this: *mut ::core::ffi::c_void,
        result__: *mut f32,
    ) -> ::windows::core::HRESULT,
    pub SetHorizontalAlignmentRatio: unsafe extern "system" fn(
        this: *mut ::core::ffi::c_void,
        value: f32,
    ) -> ::windows::core::HRESULT,
    pub Stretch: unsafe extern "system" fn(
        this: *mut ::core::ffi::c_void,
        result__: *mut CompositionStretch,
    ) -> ::windows::core::HRESULT,
    pub SetStretch: unsafe extern "system" fn(
        this: *mut ::core::ffi::c_void,
        value: CompositionStretch,
    ) -> ::windows::core::HRESULT,
    pub Surface: unsafe extern "system" fn(
        this: *mut ::core::ffi::c_void,
        result__: *mut *mut ::core::ffi::c_void,
    ) -> ::windows::core::HRESULT,
    pub SetSurface: unsafe extern "system" fn(
        this: *mut ::core::ffi::c_void,
        value: *mut ::core::ffi::c_void,
    ) -> ::windows::core::HRESULT,
    pub VerticalAlignmentRatio: unsafe extern "system" fn(
        this: *mut ::core::ffi::c_void,
        result__: *mut f32,
    ) -> ::windows::core::HRESULT,
    pub SetVerticalAlignmentRatio: unsafe extern "system" fn(
        this: *mut ::core::ffi::c_void,
        value: f32,
    ) -> ::windows::core::HRESULT,
}
#[doc(hidden)]
#[repr(transparent)]
pub struct ICompositionSurfaceBrush2(::windows::core::IUnknown);
unsafe impl ::windows::core::Vtable for ICompositionSurfaceBrush2 {
    type Vtable = ICompositionSurfaceBrush2_Vtbl;
}
unsafe impl ::windows::core::Interface for ICompositionSurfaceBrush2 {
    const IID: ::windows::core::GUID =
        ::windows::core::GUID::from_u128(0x9904b7e3_084b_58b5_9ae1_3a2040dd7a22);
}
#[repr(C)]
#[doc(hidden)]
pub struct ICompositionSurfaceBrush2_Vtbl {
    pub base__: ::windows::core::IInspectable_Vtbl,
    pub AnchorPoint: unsafe extern "system" fn(
        this: *mut ::core::ffi::c_void,
        result__: *mut ::windows::Foundation::Numerics::Vector2,
    ) -> ::windows::core::HRESULT,
    pub SetAnchorPoint: unsafe extern "system" fn(
        this: *mut ::core::ffi::c_void,
        value: ::windows::Foundation::Numerics::Vector2,
    ) -> ::windows::core::HRESULT,
    pub CenterPoint: unsafe extern "system" fn(
        this: *mut ::core::ffi::c_void,
        result__: *mut ::windows::Foundation::Numerics::Vector2,
    ) -> ::windows::core::HRESULT,
    pub SetCenterPoint: unsafe extern "system" fn(
        this: *mut ::core::ffi::c_void,
        value: ::windows::Foundation::Numerics::Vector2,
    ) -> ::windows::core::HRESULT,
    pub Offset: unsafe extern "system" fn(
        this: *mut ::core::ffi::c_void,
        result__: *mut ::windows::Foundation::Numerics::Vector2,
    ) -> ::windows::core::HRESULT,
    pub SetOffset: unsafe extern "system" fn(
        this: *mut ::core::ffi::c_void,
        value: ::windows::Foundation::Numerics::Vector2,
    ) -> ::windows::core::HRESULT,
    pub RotationAngle: unsafe extern "system" fn(
        this: *mut ::core::ffi::c_void,
        result__: *mut f32,
    ) -> ::windows::core::HRESULT,
    pub SetRotationAngle: unsafe extern "system" fn(
        this: *mut ::core::ffi::c_void,
        value: f32,
    ) -> ::windows::core::HRESULT,
    pub RotationAngleInDegrees: unsafe extern "system" fn(
        this: *mut ::core::ffi::c_void,
        result__: *mut f32,
    ) -> ::windows::core::HRESULT,
    pub SetRotationAngleInDegrees: unsafe extern "system" fn(
        this: *mut ::core::ffi::c_void,
        value: f32,
    ) -> ::windows::core::HRESULT,
    pub Scale: unsafe extern "system" fn(
        this: *mut ::core::ffi::c_void,
        result__: *mut ::windows::Foundation::Numerics::Vector2,
    ) -> ::windows::core::HRESULT,
    pub SetScale: unsafe extern "system" fn(
        this: *mut ::core::ffi::c_void,
        value: ::windows::Foundation::Numerics::Vector2,
    ) -> ::windows::core::HRESULT,
    pub TransformMatrix: unsafe extern "system" fn(
        this: *mut ::core::ffi::c_void,
        result__: *mut ::windows::Foundation::Numerics::Matrix3x2,
    ) -> ::windows::core::HRESULT,
    pub SetTransformMatrix: unsafe extern "system" fn(
        this: *mut ::core::ffi::c_void,
        value: ::windows::Foundation::Numerics::Matrix3x2,
    ) -> ::windows::core::HRESULT,
}
#[doc(hidden)]
#[repr(transparent)]
pub struct ICompositionSurfaceBrush3(::windows::core::IUnknown);
unsafe impl ::windows::core::Vtable for ICompositionSurfaceBrush3 {
    type Vtable = ICompositionSurfaceBrush3_Vtbl;
}
unsafe impl ::windows::core::Interface for ICompositionSurfaceBrush3 {
    const IID: ::windows::core::GUID =
        ::windows::core::GUID::from_u128(0x8aa74c78_680c_5791_ab07_92db0f37e352);
}
#[repr(C)]
#[doc(hidden)]
pub struct ICompositionSurfaceBrush3_Vtbl {
    pub base__: ::windows::core::IInspectable_Vtbl,
    pub SnapToPixels: unsafe extern "system" fn(
        this: *mut ::core::ffi::c_void,
        result__: *mut bool,
    ) -> ::windows::core::HRESULT,
    pub SetSnapToPixels: unsafe extern "system" fn(
        this: *mut ::core::ffi::c_void,
        value: bool,
    ) -> ::windows::core::HRESULT,
}
#[doc = "*Required features: `\"UI_Composition\"`*"]
#[repr(transparent)]
pub struct ICompositionSurfaceFacade(::windows::core::IUnknown);
impl ICompositionSurfaceFacade {
    pub fn GetRealSurface(&self) -> ::windows::core::Result<ICompositionSurface> {
        let this = self;
        unsafe {
            let mut result__ = ::core::mem::MaybeUninit::zeroed();
            (::windows::core::Vtable::vtable(this).GetRealSurface)(
                ::windows::core::Vtable::as_raw(this),
                result__.as_mut_ptr(),
            )
            .from_abi::<ICompositionSurface>(result__)
        }
    }
}
::windows::core::interface_hierarchy!(
    ICompositionSurfaceFacade,
    ::windows::core::IUnknown,
    ::windows::core::IInspectable
);
impl ::core::clone::Clone for ICompositionSurfaceFacade {
    fn clone(&self) -> Self {
        Self(self.0.clone())
    }
}
impl ::core::cmp::PartialEq for ICompositionSurfaceFacade {
    fn eq(&self, other: &Self) -> bool {
        self.0 == other.0
    }
}
impl ::core::cmp::Eq for ICompositionSurfaceFacade {}
impl ::core::fmt::Debug for ICompositionSurfaceFacade {
    fn fmt(&self, f: &mut ::core::fmt::Formatter<'_>) -> ::core::fmt::Result {
        f.debug_tuple("ICompositionSurfaceFacade").field(&self.0).finish()
    }
}
unsafe impl ::windows::core::RuntimeType for ICompositionSurfaceFacade {
    const SIGNATURE: ::windows::core::ConstBuffer =
        ::windows::core::ConstBuffer::from_slice(b"{88ac5df6-377f-5cf7-a02e-ed5074d30452}");
    type DefaultType = ::core::option::Option<Self>;
    fn from_default(from: &Self::DefaultType) -> ::windows::core::Result<Self> {
        from.as_ref().cloned().ok_or(::windows::core::Error::OK)
    }
}
unsafe impl ::windows::core::Vtable for ICompositionSurfaceFacade {
    type Vtable = ICompositionSurfaceFacade_Vtbl;
}
unsafe impl ::windows::core::Interface for ICompositionSurfaceFacade {
    const IID: ::windows::core::GUID =
        ::windows::core::GUID::from_u128(0x88ac5df6_377f_5cf7_a02e_ed5074d30452);
}
#[repr(C)]
#[doc(hidden)]
pub struct ICompositionSurfaceFacade_Vtbl {
    pub base__: ::windows::core::IInspectable_Vtbl,
    pub GetRealSurface: unsafe extern "system" fn(
        this: *mut ::core::ffi::c_void,
        result__: *mut *mut ::core::ffi::c_void,
    ) -> ::windows::core::HRESULT,
}
#[doc(hidden)]
#[repr(transparent)]
pub struct ICompositionTransform(::windows::core::IUnknown);
unsafe impl ::windows::core::Vtable for ICompositionTransform {
    type Vtable = ICompositionTransform_Vtbl;
}
unsafe impl ::windows::core::Interface for ICompositionTransform {
    const IID: ::windows::core::GUID =
        ::windows::core::GUID::from_u128(0x670e1826_1932_51d0_bbb3_063b4ca94b56);
}
#[repr(C)]
#[doc(hidden)]
pub struct ICompositionTransform_Vtbl {
    pub base__: ::windows::core::IInspectable_Vtbl,
}
#[doc(hidden)]
#[repr(transparent)]
pub struct ICompositionTransformFactory(::windows::core::IUnknown);
unsafe impl ::windows::core::Vtable for ICompositionTransformFactory {
    type Vtable = ICompositionTransformFactory_Vtbl;
}
unsafe impl ::windows::core::Interface for ICompositionTransformFactory {
    const IID: ::windows::core::GUID =
        ::windows::core::GUID::from_u128(0x78cc7bf2_cdc0_59d2_9c04_8d208de7ef5e);
}
#[repr(C)]
#[doc(hidden)]
pub struct ICompositionTransformFactory_Vtbl {
    pub base__: ::windows::core::IInspectable_Vtbl,
}
#[doc(hidden)]
#[repr(transparent)]
pub struct ICompositionViewBox(::windows::core::IUnknown);
unsafe impl ::windows::core::Vtable for ICompositionViewBox {
    type Vtable = ICompositionViewBox_Vtbl;
}
unsafe impl ::windows::core::Interface for ICompositionViewBox {
    const IID: ::windows::core::GUID =
        ::windows::core::GUID::from_u128(0x667e4071_addd_5ded_b6c0_09e03a14be7e);
}
#[repr(C)]
#[doc(hidden)]
pub struct ICompositionViewBox_Vtbl {
    pub base__: ::windows::core::IInspectable_Vtbl,
    pub HorizontalAlignmentRatio: unsafe extern "system" fn(
        this: *mut ::core::ffi::c_void,
        result__: *mut f32,
    ) -> ::windows::core::HRESULT,
    pub SetHorizontalAlignmentRatio: unsafe extern "system" fn(
        this: *mut ::core::ffi::c_void,
        value: f32,
    ) -> ::windows::core::HRESULT,
    pub Offset: unsafe extern "system" fn(
        this: *mut ::core::ffi::c_void,
        result__: *mut ::windows::Foundation::Numerics::Vector2,
    ) -> ::windows::core::HRESULT,
    pub SetOffset: unsafe extern "system" fn(
        this: *mut ::core::ffi::c_void,
        value: ::windows::Foundation::Numerics::Vector2,
    ) -> ::windows::core::HRESULT,
    pub Size: unsafe extern "system" fn(
        this: *mut ::core::ffi::c_void,
        result__: *mut ::windows::Foundation::Numerics::Vector2,
    ) -> ::windows::core::HRESULT,
    pub SetSize: unsafe extern "system" fn(
        this: *mut ::core::ffi::c_void,
        value: ::windows::Foundation::Numerics::Vector2,
    ) -> ::windows::core::HRESULT,
    pub Stretch: unsafe extern "system" fn(
        this: *mut ::core::ffi::c_void,
        result__: *mut CompositionStretch,
    ) -> ::windows::core::HRESULT,
    pub SetStretch: unsafe extern "system" fn(
        this: *mut ::core::ffi::c_void,
        value: CompositionStretch,
    ) -> ::windows::core::HRESULT,
    pub VerticalAlignmentRatio: unsafe extern "system" fn(
        this: *mut ::core::ffi::c_void,
        result__: *mut f32,
    ) -> ::windows::core::HRESULT,
    pub SetVerticalAlignmentRatio: unsafe extern "system" fn(
        this: *mut ::core::ffi::c_void,
        value: f32,
    ) -> ::windows::core::HRESULT,
}
#[doc(hidden)]
#[repr(transparent)]
pub struct ICompositionVirtualDrawingSurface(::windows::core::IUnknown);
unsafe impl ::windows::core::Vtable for ICompositionVirtualDrawingSurface {
    type Vtable = ICompositionVirtualDrawingSurface_Vtbl;
}
unsafe impl ::windows::core::Interface for ICompositionVirtualDrawingSurface {
    const IID: ::windows::core::GUID =
        ::windows::core::GUID::from_u128(0xd741b99d_e248_5ba7_b728_8beea53fe28e);
}
#[repr(C)]
#[doc(hidden)]
pub struct ICompositionVirtualDrawingSurface_Vtbl {
    pub base__: ::windows::core::IInspectable_Vtbl,
    pub Trim: unsafe extern "system" fn(
        this: *mut ::core::ffi::c_void,
        rects_array_size: u32,
        rects: *const ::windows::Graphics::RectInt32,
    ) -> ::windows::core::HRESULT,
}
#[doc(hidden)]
#[repr(transparent)]
pub struct ICompositionVirtualDrawingSurfaceFactory(::windows::core::IUnknown);
unsafe impl ::windows::core::Vtable for ICompositionVirtualDrawingSurfaceFactory {
    type Vtable = ICompositionVirtualDrawingSurfaceFactory_Vtbl;
}
unsafe impl ::windows::core::Interface for ICompositionVirtualDrawingSurfaceFactory {
    const IID: ::windows::core::GUID =
        ::windows::core::GUID::from_u128(0x85895891_3f06_52e2_b5ea_d1fb595f6574);
}
#[repr(C)]
#[doc(hidden)]
pub struct ICompositionVirtualDrawingSurfaceFactory_Vtbl {
    pub base__: ::windows::core::IInspectable_Vtbl,
}
#[doc(hidden)]
#[repr(transparent)]
pub struct ICompositionVisualSurface(::windows::core::IUnknown);
unsafe impl ::windows::core::Vtable for ICompositionVisualSurface {
    type Vtable = ICompositionVisualSurface_Vtbl;
}
unsafe impl ::windows::core::Interface for ICompositionVisualSurface {
    const IID: ::windows::core::GUID =
        ::windows::core::GUID::from_u128(0x49e3624b_4d2e_53e7_9e02_f64831681134);
}
#[repr(C)]
#[doc(hidden)]
pub struct ICompositionVisualSurface_Vtbl {
    pub base__: ::windows::core::IInspectable_Vtbl,
    pub SourceVisual: unsafe extern "system" fn(
        this: *mut ::core::ffi::c_void,
        result__: *mut *mut ::core::ffi::c_void,
    ) -> ::windows::core::HRESULT,
    pub SetSourceVisual: unsafe extern "system" fn(
        this: *mut ::core::ffi::c_void,
        value: *mut ::core::ffi::c_void,
    ) -> ::windows::core::HRESULT,
    pub SourceOffset: unsafe extern "system" fn(
        this: *mut ::core::ffi::c_void,
        result__: *mut ::windows::Foundation::Numerics::Vector2,
    ) -> ::windows::core::HRESULT,
    pub SetSourceOffset: unsafe extern "system" fn(
        this: *mut ::core::ffi::c_void,
        value: ::windows::Foundation::Numerics::Vector2,
    ) -> ::windows::core::HRESULT,
    pub SourceSize: unsafe extern "system" fn(
        this: *mut ::core::ffi::c_void,
        result__: *mut ::windows::Foundation::Numerics::Vector2,
    ) -> ::windows::core::HRESULT,
    pub SetSourceSize: unsafe extern "system" fn(
        this: *mut ::core::ffi::c_void,
        value: ::windows::Foundation::Numerics::Vector2,
    ) -> ::windows::core::HRESULT,
}
#[doc(hidden)]
#[repr(transparent)]
pub struct ICompositor(::windows::core::IUnknown);
unsafe impl ::windows::core::Vtable for ICompositor {
    type Vtable = ICompositor_Vtbl;
}
unsafe impl ::windows::core::Interface for ICompositor {
    const IID: ::windows::core::GUID =
        ::windows::core::GUID::from_u128(0x95213c13_c4cb_57de_b267_d21ab901ae38);
}
#[repr(C)]
#[doc(hidden)]
pub struct ICompositor_Vtbl {
    pub base__: ::windows::core::IInspectable_Vtbl,
    pub CreateColorKeyFrameAnimation: unsafe extern "system" fn(
        this: *mut ::core::ffi::c_void,
        result__: *mut *mut ::core::ffi::c_void,
    ) -> ::windows::core::HRESULT,
    pub CreateColorBrush: unsafe extern "system" fn(
        this: *mut ::core::ffi::c_void,
        result__: *mut *mut ::core::ffi::c_void,
    ) -> ::windows::core::HRESULT,
    pub CreateColorBrushWithColor: unsafe extern "system" fn(
        this: *mut ::core::ffi::c_void,
        color: ::windows::UI::Color,
        result__: *mut *mut ::core::ffi::c_void,
    ) -> ::windows::core::HRESULT,
    pub CreateContainerVisual: unsafe extern "system" fn(
        this: *mut ::core::ffi::c_void,
        result__: *mut *mut ::core::ffi::c_void,
    ) -> ::windows::core::HRESULT,
    pub CreateCubicBezierEasingFunction: unsafe extern "system" fn(
        this: *mut ::core::ffi::c_void,
        controlpoint1: ::windows::Foundation::Numerics::Vector2,
        controlpoint2: ::windows::Foundation::Numerics::Vector2,
        result__: *mut *mut ::core::ffi::c_void,
    ) -> ::windows::core::HRESULT,
    pub CreateEffectFactory: unsafe extern "system" fn(
        this: *mut ::core::ffi::c_void,
        graphicseffect: *mut ::core::ffi::c_void,
        result__: *mut *mut ::core::ffi::c_void,
    ) -> ::windows::core::HRESULT,
    pub CreateEffectFactoryWithProperties: unsafe extern "system" fn(
        this: *mut ::core::ffi::c_void,
        graphicseffect: *mut ::core::ffi::c_void,
        animatableproperties: *mut ::core::ffi::c_void,
        result__: *mut *mut ::core::ffi::c_void,
    )
        -> ::windows::core::HRESULT,
    pub CreateExpressionAnimation: unsafe extern "system" fn(
        this: *mut ::core::ffi::c_void,
        result__: *mut *mut ::core::ffi::c_void,
    ) -> ::windows::core::HRESULT,
    pub CreateExpressionAnimationWithExpression:
        unsafe extern "system" fn(
            this: *mut ::core::ffi::c_void,
            expression: ::core::mem::ManuallyDrop<::windows::core::HSTRING>,
            result__: *mut *mut ::core::ffi::c_void,
        ) -> ::windows::core::HRESULT,
    pub CreateInsetClip: unsafe extern "system" fn(
        this: *mut ::core::ffi::c_void,
        result__: *mut *mut ::core::ffi::c_void,
    ) -> ::windows::core::HRESULT,
    pub CreateInsetClipWithInsets: unsafe extern "system" fn(
        this: *mut ::core::ffi::c_void,
        leftinset: f32,
        topinset: f32,
        rightinset: f32,
        bottominset: f32,
        result__: *mut *mut ::core::ffi::c_void,
    ) -> ::windows::core::HRESULT,
    pub CreateLinearEasingFunction: unsafe extern "system" fn(
        this: *mut ::core::ffi::c_void,
        result__: *mut *mut ::core::ffi::c_void,
    ) -> ::windows::core::HRESULT,
    pub CreatePropertySet: unsafe extern "system" fn(
        this: *mut ::core::ffi::c_void,
        result__: *mut *mut ::core::ffi::c_void,
    ) -> ::windows::core::HRESULT,
    pub CreateQuaternionKeyFrameAnimation: unsafe extern "system" fn(
        this: *mut ::core::ffi::c_void,
        result__: *mut *mut ::core::ffi::c_void,
    )
        -> ::windows::core::HRESULT,
    pub CreateScalarKeyFrameAnimation: unsafe extern "system" fn(
        this: *mut ::core::ffi::c_void,
        result__: *mut *mut ::core::ffi::c_void,
    ) -> ::windows::core::HRESULT,
    pub CreateScopedBatch: unsafe extern "system" fn(
        this: *mut ::core::ffi::c_void,
        batchtype: CompositionBatchTypes,
        result__: *mut *mut ::core::ffi::c_void,
    ) -> ::windows::core::HRESULT,
    pub CreateSpriteVisual: unsafe extern "system" fn(
        this: *mut ::core::ffi::c_void,
        result__: *mut *mut ::core::ffi::c_void,
    ) -> ::windows::core::HRESULT,
    pub CreateSurfaceBrush: unsafe extern "system" fn(
        this: *mut ::core::ffi::c_void,
        result__: *mut *mut ::core::ffi::c_void,
    ) -> ::windows::core::HRESULT,
    pub CreateSurfaceBrushWithSurface: unsafe extern "system" fn(
        this: *mut ::core::ffi::c_void,
        surface: *mut ::core::ffi::c_void,
        result__: *mut *mut ::core::ffi::c_void,
    ) -> ::windows::core::HRESULT,
    pub CreateVector2KeyFrameAnimation: unsafe extern "system" fn(
        this: *mut ::core::ffi::c_void,
        result__: *mut *mut ::core::ffi::c_void,
    ) -> ::windows::core::HRESULT,
    pub CreateVector3KeyFrameAnimation: unsafe extern "system" fn(
        this: *mut ::core::ffi::c_void,
        result__: *mut *mut ::core::ffi::c_void,
    ) -> ::windows::core::HRESULT,
    pub CreateVector4KeyFrameAnimation: unsafe extern "system" fn(
        this: *mut ::core::ffi::c_void,
        result__: *mut *mut ::core::ffi::c_void,
    ) -> ::windows::core::HRESULT,
    pub GetCommitBatch: unsafe extern "system" fn(
        this: *mut ::core::ffi::c_void,
        batchtype: CompositionBatchTypes,
        result__: *mut *mut ::core::ffi::c_void,
    ) -> ::windows::core::HRESULT,
}
#[doc(hidden)]
#[repr(transparent)]
pub struct ICompositor2(::windows::core::IUnknown);
unsafe impl ::windows::core::Vtable for ICompositor2 {
    type Vtable = ICompositor2_Vtbl;
}
unsafe impl ::windows::core::Interface for ICompositor2 {
    const IID: ::windows::core::GUID =
        ::windows::core::GUID::from_u128(0xa9ffedad_3982_576d_a38a_c888ff605819);
}
#[repr(C)]
#[doc(hidden)]
pub struct ICompositor2_Vtbl {
    pub base__: ::windows::core::IInspectable_Vtbl,
    pub CreateAmbientLight: unsafe extern "system" fn(
        this: *mut ::core::ffi::c_void,
        result__: *mut *mut ::core::ffi::c_void,
    ) -> ::windows::core::HRESULT,
    pub CreateAnimationGroup: unsafe extern "system" fn(
        this: *mut ::core::ffi::c_void,
        result__: *mut *mut ::core::ffi::c_void,
    ) -> ::windows::core::HRESULT,
    pub CreateBackdropBrush: unsafe extern "system" fn(
        this: *mut ::core::ffi::c_void,
        result__: *mut *mut ::core::ffi::c_void,
    ) -> ::windows::core::HRESULT,
    pub CreateDistantLight: unsafe extern "system" fn(
        this: *mut ::core::ffi::c_void,
        result__: *mut *mut ::core::ffi::c_void,
    ) -> ::windows::core::HRESULT,
    pub CreateDropShadow: unsafe extern "system" fn(
        this: *mut ::core::ffi::c_void,
        result__: *mut *mut ::core::ffi::c_void,
    ) -> ::windows::core::HRESULT,
    pub CreateImplicitAnimationCollection: unsafe extern "system" fn(
        this: *mut ::core::ffi::c_void,
        result__: *mut *mut ::core::ffi::c_void,
    )
        -> ::windows::core::HRESULT,
    pub CreateLayerVisual: unsafe extern "system" fn(
        this: *mut ::core::ffi::c_void,
        result__: *mut *mut ::core::ffi::c_void,
    ) -> ::windows::core::HRESULT,
    pub CreateMaskBrush: unsafe extern "system" fn(
        this: *mut ::core::ffi::c_void,
        result__: *mut *mut ::core::ffi::c_void,
    ) -> ::windows::core::HRESULT,
    pub CreateNineGridBrush: unsafe extern "system" fn(
        this: *mut ::core::ffi::c_void,
        result__: *mut *mut ::core::ffi::c_void,
    ) -> ::windows::core::HRESULT,
    pub CreatePointLight: unsafe extern "system" fn(
        this: *mut ::core::ffi::c_void,
        result__: *mut *mut ::core::ffi::c_void,
    ) -> ::windows::core::HRESULT,
    pub CreateSpotLight: unsafe extern "system" fn(
        this: *mut ::core::ffi::c_void,
        result__: *mut *mut ::core::ffi::c_void,
    ) -> ::windows::core::HRESULT,
    pub CreateStepEasingFunction: unsafe extern "system" fn(
        this: *mut ::core::ffi::c_void,
        result__: *mut *mut ::core::ffi::c_void,
    ) -> ::windows::core::HRESULT,
    pub CreateStepEasingFunctionWithStepCount:
        unsafe extern "system" fn(
            this: *mut ::core::ffi::c_void,
            stepcount: i32,
            result__: *mut *mut ::core::ffi::c_void,
        ) -> ::windows::core::HRESULT,
}
#[doc(hidden)]
#[repr(transparent)]
pub struct ICompositor4(::windows::core::IUnknown);
unsafe impl ::windows::core::Vtable for ICompositor4 {
    type Vtable = ICompositor4_Vtbl;
}
unsafe impl ::windows::core::Interface for ICompositor4 {
    const IID: ::windows::core::GUID =
        ::windows::core::GUID::from_u128(0xee444bca_735c_5cf2_b79d_a6dd46c16160);
}
#[repr(C)]
#[doc(hidden)]
pub struct ICompositor4_Vtbl {
    pub base__: ::windows::core::IInspectable_Vtbl,
    pub CreateColorGradientStop: unsafe extern "system" fn(
        this: *mut ::core::ffi::c_void,
        result__: *mut *mut ::core::ffi::c_void,
    ) -> ::windows::core::HRESULT,
    pub CreateColorGradientStopWithOffsetAndColor:
        unsafe extern "system" fn(
            this: *mut ::core::ffi::c_void,
            offset: f32,
            color: ::windows::UI::Color,
            result__: *mut *mut ::core::ffi::c_void,
        ) -> ::windows::core::HRESULT,
    pub CreateLinearGradientBrush: unsafe extern "system" fn(
        this: *mut ::core::ffi::c_void,
        result__: *mut *mut ::core::ffi::c_void,
    ) -> ::windows::core::HRESULT,
    pub CreateSpringScalarAnimation: unsafe extern "system" fn(
        this: *mut ::core::ffi::c_void,
        result__: *mut *mut ::core::ffi::c_void,
    ) -> ::windows::core::HRESULT,
    pub CreateSpringVector2Animation: unsafe extern "system" fn(
        this: *mut ::core::ffi::c_void,
        result__: *mut *mut ::core::ffi::c_void,
    ) -> ::windows::core::HRESULT,
    pub CreateSpringVector3Animation: unsafe extern "system" fn(
        this: *mut ::core::ffi::c_void,
        result__: *mut *mut ::core::ffi::c_void,
    ) -> ::windows::core::HRESULT,
}
#[doc(hidden)]
#[repr(transparent)]
pub struct ICompositor5(::windows::core::IUnknown);
unsafe impl ::windows::core::Vtable for ICompositor5 {
    type Vtable = ICompositor5_Vtbl;
}
unsafe impl ::windows::core::Interface for ICompositor5 {
    const IID: ::windows::core::GUID =
        ::windows::core::GUID::from_u128(0xbb52d644_a030_5c19_b883_577ded739ae7);
}
#[repr(C)]
#[doc(hidden)]
pub struct ICompositor5_Vtbl {
    pub base__: ::windows::core::IInspectable_Vtbl,
    pub Comment: unsafe extern "system" fn(
        this: *mut ::core::ffi::c_void,
        result__: *mut ::core::mem::ManuallyDrop<::windows::core::HSTRING>,
    ) -> ::windows::core::HRESULT,
    pub SetComment: unsafe extern "system" fn(
        this: *mut ::core::ffi::c_void,
        value: ::core::mem::ManuallyDrop<::windows::core::HSTRING>,
    ) -> ::windows::core::HRESULT,
    pub GlobalPlaybackRate: unsafe extern "system" fn(
        this: *mut ::core::ffi::c_void,
        result__: *mut f32,
    ) -> ::windows::core::HRESULT,
    pub SetGlobalPlaybackRate: unsafe extern "system" fn(
        this: *mut ::core::ffi::c_void,
        value: f32,
    ) -> ::windows::core::HRESULT,
    pub CreateBounceScalarAnimation: unsafe extern "system" fn(
        this: *mut ::core::ffi::c_void,
        result__: *mut *mut ::core::ffi::c_void,
    ) -> ::windows::core::HRESULT,
    pub CreateBounceVector2Animation: unsafe extern "system" fn(
        this: *mut ::core::ffi::c_void,
        result__: *mut *mut ::core::ffi::c_void,
    ) -> ::windows::core::HRESULT,
    pub CreateBounceVector3Animation: unsafe extern "system" fn(
        this: *mut ::core::ffi::c_void,
        result__: *mut *mut ::core::ffi::c_void,
    ) -> ::windows::core::HRESULT,
    pub CreateContainerShape: unsafe extern "system" fn(
        this: *mut ::core::ffi::c_void,
        result__: *mut *mut ::core::ffi::c_void,
    ) -> ::windows::core::HRESULT,
    pub CreateEllipseGeometry: unsafe extern "system" fn(
        this: *mut ::core::ffi::c_void,
        result__: *mut *mut ::core::ffi::c_void,
    ) -> ::windows::core::HRESULT,
    pub CreateLineGeometry: unsafe extern "system" fn(
        this: *mut ::core::ffi::c_void,
        result__: *mut *mut ::core::ffi::c_void,
    ) -> ::windows::core::HRESULT,
    pub CreatePathGeometry: unsafe extern "system" fn(
        this: *mut ::core::ffi::c_void,
        result__: *mut *mut ::core::ffi::c_void,
    ) -> ::windows::core::HRESULT,
    pub CreatePathGeometryWithPath: unsafe extern "system" fn(
        this: *mut ::core::ffi::c_void,
        path: *mut ::core::ffi::c_void,
        result__: *mut *mut ::core::ffi::c_void,
    ) -> ::windows::core::HRESULT,
    pub CreatePathKeyFrameAnimation: unsafe extern "system" fn(
        this: *mut ::core::ffi::c_void,
        result__: *mut *mut ::core::ffi::c_void,
    ) -> ::windows::core::HRESULT,
    pub CreateRectangleGeometry: unsafe extern "system" fn(
        this: *mut ::core::ffi::c_void,
        result__: *mut *mut ::core::ffi::c_void,
    ) -> ::windows::core::HRESULT,
    pub CreateRoundedRectangleGeometry: unsafe extern "system" fn(
        this: *mut ::core::ffi::c_void,
        result__: *mut *mut ::core::ffi::c_void,
    ) -> ::windows::core::HRESULT,
    pub CreateShapeVisual: unsafe extern "system" fn(
        this: *mut ::core::ffi::c_void,
        result__: *mut *mut ::core::ffi::c_void,
    ) -> ::windows::core::HRESULT,
    pub CreateSpriteShape: unsafe extern "system" fn(
        this: *mut ::core::ffi::c_void,
        result__: *mut *mut ::core::ffi::c_void,
    ) -> ::windows::core::HRESULT,
    pub CreateSpriteShapeWithGeometry: unsafe extern "system" fn(
        this: *mut ::core::ffi::c_void,
        geometry: *mut ::core::ffi::c_void,
        result__: *mut *mut ::core::ffi::c_void,
    ) -> ::windows::core::HRESULT,
    pub CreateViewBox: unsafe extern "system" fn(
        this: *mut ::core::ffi::c_void,
        result__: *mut *mut ::core::ffi::c_void,
    ) -> ::windows::core::HRESULT,
    pub RequestCommitAsync: unsafe extern "system" fn(
        this: *mut ::core::ffi::c_void,
        result__: *mut *mut ::core::ffi::c_void,
    ) -> ::windows::core::HRESULT,
}
#[doc(hidden)]
#[repr(transparent)]
pub struct ICompositor6(::windows::core::IUnknown);
unsafe impl ::windows::core::Vtable for ICompositor6 {
    type Vtable = ICompositor6_Vtbl;
}
unsafe impl ::windows::core::Interface for ICompositor6 {
    const IID: ::windows::core::GUID =
        ::windows::core::GUID::from_u128(0x5fd20200_c188_5737_b567_5e61741af19c);
}
#[repr(C)]
#[doc(hidden)]
pub struct ICompositor6_Vtbl {
    pub base__: ::windows::core::IInspectable_Vtbl,
    pub CreateGeometricClip: unsafe extern "system" fn(
        this: *mut ::core::ffi::c_void,
        result__: *mut *mut ::core::ffi::c_void,
    ) -> ::windows::core::HRESULT,
    pub CreateGeometricClipWithGeometry: unsafe extern "system" fn(
        this: *mut ::core::ffi::c_void,
        geometry: *mut ::core::ffi::c_void,
        result__: *mut *mut ::core::ffi::c_void,
    ) -> ::windows::core::HRESULT,
    pub CreateRedirectVisual: unsafe extern "system" fn(
        this: *mut ::core::ffi::c_void,
        result__: *mut *mut ::core::ffi::c_void,
    ) -> ::windows::core::HRESULT,
    pub CreateRedirectVisualWithSourceVisual: unsafe extern "system" fn(
        this: *mut ::core::ffi::c_void,
        source: *mut ::core::ffi::c_void,
        result__: *mut *mut ::core::ffi::c_void,
    )
        -> ::windows::core::HRESULT,
    pub CreateBooleanKeyFrameAnimation: unsafe extern "system" fn(
        this: *mut ::core::ffi::c_void,
        result__: *mut *mut ::core::ffi::c_void,
    ) -> ::windows::core::HRESULT,
}
#[doc(hidden)]
#[repr(transparent)]
pub struct ICompositor7(::windows::core::IUnknown);
unsafe impl ::windows::core::Vtable for ICompositor7 {
    type Vtable = ICompositor7_Vtbl;
}
unsafe impl ::windows::core::Interface for ICompositor7 {
    const IID: ::windows::core::GUID =
        ::windows::core::GUID::from_u128(0x5358b81b_4799_5e7c_906c_e3df3b2e95eb);
}
#[repr(C)]
#[doc(hidden)]
pub struct ICompositor7_Vtbl {
    pub base__: ::windows::core::IInspectable_Vtbl,
    #[cfg(feature = "UI_Dispatching")]
    pub DispatcherQueue: unsafe extern "system" fn(
        this: *mut ::core::ffi::c_void,
        result__: *mut *mut ::core::ffi::c_void,
    ) -> ::windows::core::HRESULT,
    #[cfg(not(feature = "UI_Dispatching"))]
    DispatcherQueue: usize,
    pub CreateAnimationPropertyInfo: unsafe extern "system" fn(
        this: *mut ::core::ffi::c_void,
        result__: *mut *mut ::core::ffi::c_void,
    ) -> ::windows::core::HRESULT,
    pub CreateRectangleClip: unsafe extern "system" fn(
        this: *mut ::core::ffi::c_void,
        result__: *mut *mut ::core::ffi::c_void,
    ) -> ::windows::core::HRESULT,
    pub CreateRectangleClipWithSides: unsafe extern "system" fn(
        this: *mut ::core::ffi::c_void,
        left: f32,
        top: f32,
        right: f32,
        bottom: f32,
        result__: *mut *mut ::core::ffi::c_void,
    ) -> ::windows::core::HRESULT,
    pub CreateRectangleClipWithSidesAndRadius:
        unsafe extern "system" fn(
            this: *mut ::core::ffi::c_void,
            left: f32,
            top: f32,
            right: f32,
            bottom: f32,
            topleftradius: ::windows::Foundation::Numerics::Vector2,
            toprightradius: ::windows::Foundation::Numerics::Vector2,
            bottomrightradius: ::windows::Foundation::Numerics::Vector2,
            bottomleftradius: ::windows::Foundation::Numerics::Vector2,
            result__: *mut *mut ::core::ffi::c_void,
        ) -> ::windows::core::HRESULT,
}
#[doc(hidden)]
#[repr(transparent)]
pub struct ICompositor8(::windows::core::IUnknown);
unsafe impl ::windows::core::Vtable for ICompositor8 {
    type Vtable = ICompositor8_Vtbl;
}
unsafe impl ::windows::core::Interface for ICompositor8 {
    const IID: ::windows::core::GUID =
        ::windows::core::GUID::from_u128(0x02f5c9ee_a3c0_577a_9d23_44024c8eacda);
}
#[repr(C)]
#[doc(hidden)]
pub struct ICompositor8_Vtbl {
    pub base__: ::windows::core::IInspectable_Vtbl,
    pub CreateAnimationController: unsafe extern "system" fn(
        this: *mut ::core::ffi::c_void,
        result__: *mut *mut ::core::ffi::c_void,
    ) -> ::windows::core::HRESULT,
}
#[doc(hidden)]
#[repr(transparent)]
pub struct ICompositorStatics(::windows::core::IUnknown);
unsafe impl ::windows::core::Vtable for ICompositorStatics {
    type Vtable = ICompositorStatics_Vtbl;
}
unsafe impl ::windows::core::Interface for ICompositorStatics {
    const IID: ::windows::core::GUID =
        ::windows::core::GUID::from_u128(0x6baa947a_f103_55c6_91ad_3d275bea65c4);
}
#[repr(C)]
#[doc(hidden)]
pub struct ICompositorStatics_Vtbl {
    pub base__: ::windows::core::IInspectable_Vtbl,
    pub MaxGlobalPlaybackRate: unsafe extern "system" fn(
        this: *mut ::core::ffi::c_void,
        result__: *mut f32,
    ) -> ::windows::core::HRESULT,
    pub MinGlobalPlaybackRate: unsafe extern "system" fn(
        this: *mut ::core::ffi::c_void,
        result__: *mut f32,
    ) -> ::windows::core::HRESULT,
}
#[doc(hidden)]
#[repr(transparent)]
pub struct ICompositorWithProjectedShadow(::windows::core::IUnknown);
unsafe impl ::windows::core::Vtable for ICompositorWithProjectedShadow {
    type Vtable = ICompositorWithProjectedShadow_Vtbl;
}
unsafe impl ::windows::core::Interface for ICompositorWithProjectedShadow {
    const IID: ::windows::core::GUID =
        ::windows::core::GUID::from_u128(0x60ab2bf2_b95c_5944_8b36_c9773b9f5256);
}
#[repr(C)]
#[doc(hidden)]
pub struct ICompositorWithProjectedShadow_Vtbl {
    pub base__: ::windows::core::IInspectable_Vtbl,
    pub CreateProjectedShadowCaster: unsafe extern "system" fn(
        this: *mut ::core::ffi::c_void,
        result__: *mut *mut ::core::ffi::c_void,
    ) -> ::windows::core::HRESULT,
    pub CreateProjectedShadow: unsafe extern "system" fn(
        this: *mut ::core::ffi::c_void,
        result__: *mut *mut ::core::ffi::c_void,
    ) -> ::windows::core::HRESULT,
    pub CreateProjectedShadowReceiver: unsafe extern "system" fn(
        this: *mut ::core::ffi::c_void,
        result__: *mut *mut ::core::ffi::c_void,
    ) -> ::windows::core::HRESULT,
}
#[doc(hidden)]
#[repr(transparent)]
pub struct ICompositorWithRadialGradient(::windows::core::IUnknown);
unsafe impl ::windows::core::Vtable for ICompositorWithRadialGradient {
    type Vtable = ICompositorWithRadialGradient_Vtbl;
}
unsafe impl ::windows::core::Interface for ICompositorWithRadialGradient {
    const IID: ::windows::core::GUID =
        ::windows::core::GUID::from_u128(0xfa4f8f7d_5cc7_5c9c_883b_fe878a2f3e30);
}
#[repr(C)]
#[doc(hidden)]
pub struct ICompositorWithRadialGradient_Vtbl {
    pub base__: ::windows::core::IInspectable_Vtbl,
    pub CreateRadialGradientBrush: unsafe extern "system" fn(
        this: *mut ::core::ffi::c_void,
        result__: *mut *mut ::core::ffi::c_void,
    ) -> ::windows::core::HRESULT,
}
#[doc(hidden)]
#[repr(transparent)]
pub struct ICompositorWithVisualSurface(::windows::core::IUnknown);
unsafe impl ::windows::core::Vtable for ICompositorWithVisualSurface {
    type Vtable = ICompositorWithVisualSurface_Vtbl;
}
unsafe impl ::windows::core::Interface for ICompositorWithVisualSurface {
    const IID: ::windows::core::GUID =
        ::windows::core::GUID::from_u128(0x5fcfe24a_690a_5378_acee_561e84bfb982);
}
#[repr(C)]
#[doc(hidden)]
pub struct ICompositorWithVisualSurface_Vtbl {
    pub base__: ::windows::core::IInspectable_Vtbl,
    pub CreateVisualSurface: unsafe extern "system" fn(
        this: *mut ::core::ffi::c_void,
        result__: *mut *mut ::core::ffi::c_void,
    ) -> ::windows::core::HRESULT,
}
#[doc(hidden)]
#[repr(transparent)]
pub struct IContainerVisual(::windows::core::IUnknown);
unsafe impl ::windows::core::Vtable for IContainerVisual {
    type Vtable = IContainerVisual_Vtbl;
}
unsafe impl ::windows::core::Interface for IContainerVisual {
    const IID: ::windows::core::GUID =
        ::windows::core::GUID::from_u128(0xc70dbce1_2c2f_5d8e_91a4_aae1121e6186);
}
#[repr(C)]
#[doc(hidden)]
pub struct IContainerVisual_Vtbl {
    pub base__: ::windows::core::IInspectable_Vtbl,
    pub Children: unsafe extern "system" fn(
        this: *mut ::core::ffi::c_void,
        result__: *mut *mut ::core::ffi::c_void,
    ) -> ::windows::core::HRESULT,
}
#[doc(hidden)]
#[repr(transparent)]
pub struct IContainerVisualFactory(::windows::core::IUnknown);
unsafe impl ::windows::core::Vtable for IContainerVisualFactory {
    type Vtable = IContainerVisualFactory_Vtbl;
}
unsafe impl ::windows::core::Interface for IContainerVisualFactory {
    const IID: ::windows::core::GUID =
        ::windows::core::GUID::from_u128(0x3fa45eeb_c6dd_5afd_971d_eaaf6245e716);
}
#[repr(C)]
#[doc(hidden)]
pub struct IContainerVisualFactory_Vtbl {
    pub base__: ::windows::core::IInspectable_Vtbl,
}
#[doc(hidden)]
#[repr(transparent)]
pub struct ICubicBezierEasingFunction(::windows::core::IUnknown);
unsafe impl ::windows::core::Vtable for ICubicBezierEasingFunction {
    type Vtable = ICubicBezierEasingFunction_Vtbl;
}
unsafe impl ::windows::core::Interface for ICubicBezierEasingFunction {
    const IID: ::windows::core::GUID =
        ::windows::core::GUID::from_u128(0x35e7fcde_f9ce_590a_8b88_64a82a6b4b48);
}
#[repr(C)]
#[doc(hidden)]
pub struct ICubicBezierEasingFunction_Vtbl {
    pub base__: ::windows::core::IInspectable_Vtbl,
    pub ControlPoint1: unsafe extern "system" fn(
        this: *mut ::core::ffi::c_void,
        result__: *mut ::windows::Foundation::Numerics::Vector2,
    ) -> ::windows::core::HRESULT,
    pub ControlPoint2: unsafe extern "system" fn(
        this: *mut ::core::ffi::c_void,
        result__: *mut ::windows::Foundation::Numerics::Vector2,
    ) -> ::windows::core::HRESULT,
}
#[doc(hidden)]
#[repr(transparent)]
pub struct IDistantLight(::windows::core::IUnknown);
unsafe impl ::windows::core::Vtable for IDistantLight {
    type Vtable = IDistantLight_Vtbl;
}
unsafe impl ::windows::core::Interface for IDistantLight {
    const IID: ::windows::core::GUID =
        ::windows::core::GUID::from_u128(0x125ef556_56ee_5c60_b944_571928ca03f5);
}
#[repr(C)]
#[doc(hidden)]
pub struct IDistantLight_Vtbl {
    pub base__: ::windows::core::IInspectable_Vtbl,
    pub Color: unsafe extern "system" fn(
        this: *mut ::core::ffi::c_void,
        result__: *mut ::windows::UI::Color,
    ) -> ::windows::core::HRESULT,
    pub SetColor: unsafe extern "system" fn(
        this: *mut ::core::ffi::c_void,
        value: ::windows::UI::Color,
    ) -> ::windows::core::HRESULT,
    pub CoordinateSpace: unsafe extern "system" fn(
        this: *mut ::core::ffi::c_void,
        result__: *mut *mut ::core::ffi::c_void,
    ) -> ::windows::core::HRESULT,
    pub SetCoordinateSpace: unsafe extern "system" fn(
        this: *mut ::core::ffi::c_void,
        value: *mut ::core::ffi::c_void,
    ) -> ::windows::core::HRESULT,
    pub Direction: unsafe extern "system" fn(
        this: *mut ::core::ffi::c_void,
        result__: *mut ::windows::Foundation::Numerics::Vector3,
    ) -> ::windows::core::HRESULT,
    pub SetDirection: unsafe extern "system" fn(
        this: *mut ::core::ffi::c_void,
        value: ::windows::Foundation::Numerics::Vector3,
    ) -> ::windows::core::HRESULT,
}
#[doc(hidden)]
#[repr(transparent)]
pub struct IDistantLight2(::windows::core::IUnknown);
unsafe impl ::windows::core::Vtable for IDistantLight2 {
    type Vtable = IDistantLight2_Vtbl;
}
unsafe impl ::windows::core::Interface for IDistantLight2 {
    const IID: ::windows::core::GUID =
        ::windows::core::GUID::from_u128(0x9f97bfec_b6b9_51ee_8480_b546468c748f);
}
#[repr(C)]
#[doc(hidden)]
pub struct IDistantLight2_Vtbl {
    pub base__: ::windows::core::IInspectable_Vtbl,
    pub Intensity: unsafe extern "system" fn(
        this: *mut ::core::ffi::c_void,
        result__: *mut f32,
    ) -> ::windows::core::HRESULT,
    pub SetIntensity: unsafe extern "system" fn(
        this: *mut ::core::ffi::c_void,
        value: f32,
    ) -> ::windows::core::HRESULT,
}
#[doc(hidden)]
#[repr(transparent)]
pub struct IDropShadow(::windows::core::IUnknown);
unsafe impl ::windows::core::Vtable for IDropShadow {
    type Vtable = IDropShadow_Vtbl;
}
unsafe impl ::windows::core::Interface for IDropShadow {
    const IID: ::windows::core::GUID =
        ::windows::core::GUID::from_u128(0x977095d2_265f_5f58_9789_cb7f85e98c9e);
}
#[repr(C)]
#[doc(hidden)]
pub struct IDropShadow_Vtbl {
    pub base__: ::windows::core::IInspectable_Vtbl,
    pub BlurRadius: unsafe extern "system" fn(
        this: *mut ::core::ffi::c_void,
        result__: *mut f32,
    ) -> ::windows::core::HRESULT,
    pub SetBlurRadius: unsafe extern "system" fn(
        this: *mut ::core::ffi::c_void,
        value: f32,
    ) -> ::windows::core::HRESULT,
    pub Color: unsafe extern "system" fn(
        this: *mut ::core::ffi::c_void,
        result__: *mut ::windows::UI::Color,
    ) -> ::windows::core::HRESULT,
    pub SetColor: unsafe extern "system" fn(
        this: *mut ::core::ffi::c_void,
        value: ::windows::UI::Color,
    ) -> ::windows::core::HRESULT,
    pub Mask: unsafe extern "system" fn(
        this: *mut ::core::ffi::c_void,
        result__: *mut *mut ::core::ffi::c_void,
    ) -> ::windows::core::HRESULT,
    pub SetMask: unsafe extern "system" fn(
        this: *mut ::core::ffi::c_void,
        value: *mut ::core::ffi::c_void,
    ) -> ::windows::core::HRESULT,
    pub Offset: unsafe extern "system" fn(
        this: *mut ::core::ffi::c_void,
        result__: *mut ::windows::Foundation::Numerics::Vector3,
    ) -> ::windows::core::HRESULT,
    pub SetOffset: unsafe extern "system" fn(
        this: *mut ::core::ffi::c_void,
        value: ::windows::Foundation::Numerics::Vector3,
    ) -> ::windows::core::HRESULT,
    pub Opacity: unsafe extern "system" fn(
        this: *mut ::core::ffi::c_void,
        result__: *mut f32,
    ) -> ::windows::core::HRESULT,
    pub SetOpacity: unsafe extern "system" fn(
        this: *mut ::core::ffi::c_void,
        value: f32,
    ) -> ::windows::core::HRESULT,
}
#[doc(hidden)]
#[repr(transparent)]
pub struct IDropShadow2(::windows::core::IUnknown);
unsafe impl ::windows::core::Vtable for IDropShadow2 {
    type Vtable = IDropShadow2_Vtbl;
}
unsafe impl ::windows::core::Interface for IDropShadow2 {
    const IID: ::windows::core::GUID =
        ::windows::core::GUID::from_u128(0xcbc7c266_2d33_5711_b3b4_5699410bef56);
}
#[repr(C)]
#[doc(hidden)]
pub struct IDropShadow2_Vtbl {
    pub base__: ::windows::core::IInspectable_Vtbl,
    pub SourcePolicy: unsafe extern "system" fn(
        this: *mut ::core::ffi::c_void,
        result__: *mut CompositionDropShadowSourcePolicy,
    ) -> ::windows::core::HRESULT,
    pub SetSourcePolicy: unsafe extern "system" fn(
        this: *mut ::core::ffi::c_void,
        value: CompositionDropShadowSourcePolicy,
    ) -> ::windows::core::HRESULT,
}
#[doc(hidden)]
#[repr(transparent)]
pub struct IElasticEasingFunction(::windows::core::IUnknown);
unsafe impl ::windows::core::Vtable for IElasticEasingFunction {
    type Vtable = IElasticEasingFunction_Vtbl;
}
unsafe impl ::windows::core::Interface for IElasticEasingFunction {
    const IID: ::windows::core::GUID =
        ::windows::core::GUID::from_u128(0xb952e12f_4a50_51a9_a11a_23855f4aae07);
}
#[repr(C)]
#[doc(hidden)]
pub struct IElasticEasingFunction_Vtbl {
    pub base__: ::windows::core::IInspectable_Vtbl,
    pub Mode: unsafe extern "system" fn(
        this: *mut ::core::ffi::c_void,
        result__: *mut CompositionEasingFunctionMode,
    ) -> ::windows::core::HRESULT,
    pub Oscillations: unsafe extern "system" fn(
        this: *mut ::core::ffi::c_void,
        result__: *mut i32,
    ) -> ::windows::core::HRESULT,
    pub Springiness: unsafe extern "system" fn(
        this: *mut ::core::ffi::c_void,
        result__: *mut f32,
    ) -> ::windows::core::HRESULT,
}
#[doc(hidden)]
#[repr(transparent)]
pub struct IExponentialEasingFunction(::windows::core::IUnknown);
unsafe impl ::windows::core::Vtable for IExponentialEasingFunction {
    type Vtable = IExponentialEasingFunction_Vtbl;
}
unsafe impl ::windows::core::Interface for IExponentialEasingFunction {
    const IID: ::windows::core::GUID =
        ::windows::core::GUID::from_u128(0xdf29ecc1_3ffc_565f_9d6c_533586908106);
}
#[repr(C)]
#[doc(hidden)]
pub struct IExponentialEasingFunction_Vtbl {
    pub base__: ::windows::core::IInspectable_Vtbl,
    pub Mode: unsafe extern "system" fn(
        this: *mut ::core::ffi::c_void,
        result__: *mut CompositionEasingFunctionMode,
    ) -> ::windows::core::HRESULT,
    pub Exponent: unsafe extern "system" fn(
        this: *mut ::core::ffi::c_void,
        result__: *mut f32,
    ) -> ::windows::core::HRESULT,
}
#[doc(hidden)]
#[repr(transparent)]
pub struct IExpressionAnimation(::windows::core::IUnknown);
unsafe impl ::windows::core::Vtable for IExpressionAnimation {
    type Vtable = IExpressionAnimation_Vtbl;
}
unsafe impl ::windows::core::Interface for IExpressionAnimation {
    const IID: ::windows::core::GUID =
        ::windows::core::GUID::from_u128(0x7fff5826_1992_56c0_9060_5ade561a4f2d);
}
#[repr(C)]
#[doc(hidden)]
pub struct IExpressionAnimation_Vtbl {
    pub base__: ::windows::core::IInspectable_Vtbl,
    pub Expression: unsafe extern "system" fn(
        this: *mut ::core::ffi::c_void,
        result__: *mut ::core::mem::ManuallyDrop<::windows::core::HSTRING>,
    ) -> ::windows::core::HRESULT,
    pub SetExpression: unsafe extern "system" fn(
        this: *mut ::core::ffi::c_void,
        value: ::core::mem::ManuallyDrop<::windows::core::HSTRING>,
    ) -> ::windows::core::HRESULT,
}
#[doc(hidden)]
#[repr(transparent)]
pub struct IImplicitAnimationCollection(::windows::core::IUnknown);
unsafe impl ::windows::core::Vtable for IImplicitAnimationCollection {
    type Vtable = IImplicitAnimationCollection_Vtbl;
}
unsafe impl ::windows::core::Interface for IImplicitAnimationCollection {
    const IID: ::windows::core::GUID =
        ::windows::core::GUID::from_u128(0xc5c0689e_f5ae_5bed_829b_c522cda39717);
}
#[repr(C)]
#[doc(hidden)]
pub struct IImplicitAnimationCollection_Vtbl {
    pub base__: ::windows::core::IInspectable_Vtbl,
}
#[doc(hidden)]
#[repr(transparent)]
pub struct IInsetClip(::windows::core::IUnknown);
unsafe impl ::windows::core::Vtable for IInsetClip {
    type Vtable = IInsetClip_Vtbl;
}
unsafe impl ::windows::core::Interface for IInsetClip {
    const IID: ::windows::core::GUID =
        ::windows::core::GUID::from_u128(0xf9d99475_7b59_5b28_a1d2_b832da6988c9);
}
#[repr(C)]
#[doc(hidden)]
pub struct IInsetClip_Vtbl {
    pub base__: ::windows::core::IInspectable_Vtbl,
    pub BottomInset: unsafe extern "system" fn(
        this: *mut ::core::ffi::c_void,
        result__: *mut f32,
    ) -> ::windows::core::HRESULT,
    pub SetBottomInset: unsafe extern "system" fn(
        this: *mut ::core::ffi::c_void,
        value: f32,
    ) -> ::windows::core::HRESULT,
    pub LeftInset: unsafe extern "system" fn(
        this: *mut ::core::ffi::c_void,
        result__: *mut f32,
    ) -> ::windows::core::HRESULT,
    pub SetLeftInset: unsafe extern "system" fn(
        this: *mut ::core::ffi::c_void,
        value: f32,
    ) -> ::windows::core::HRESULT,
    pub RightInset: unsafe extern "system" fn(
        this: *mut ::core::ffi::c_void,
        result__: *mut f32,
    ) -> ::windows::core::HRESULT,
    pub SetRightInset: unsafe extern "system" fn(
        this: *mut ::core::ffi::c_void,
        value: f32,
    ) -> ::windows::core::HRESULT,
    pub TopInset: unsafe extern "system" fn(
        this: *mut ::core::ffi::c_void,
        result__: *mut f32,
    ) -> ::windows::core::HRESULT,
    pub SetTopInset: unsafe extern "system" fn(
        this: *mut ::core::ffi::c_void,
        value: f32,
    ) -> ::windows::core::HRESULT,
}
#[doc(hidden)]
#[repr(transparent)]
pub struct IKeyFrameAnimation(::windows::core::IUnknown);
unsafe impl ::windows::core::Vtable for IKeyFrameAnimation {
    type Vtable = IKeyFrameAnimation_Vtbl;
}
unsafe impl ::windows::core::Interface for IKeyFrameAnimation {
    const IID: ::windows::core::GUID =
        ::windows::core::GUID::from_u128(0x5a8f57f0_f059_5b47_b308_c4c80fc71248);
}
#[repr(C)]
#[doc(hidden)]
pub struct IKeyFrameAnimation_Vtbl {
    pub base__: ::windows::core::IInspectable_Vtbl,
    pub DelayTime: unsafe extern "system" fn(
        this: *mut ::core::ffi::c_void,
        result__: *mut ::windows::Foundation::TimeSpan,
    ) -> ::windows::core::HRESULT,
    pub SetDelayTime: unsafe extern "system" fn(
        this: *mut ::core::ffi::c_void,
        value: ::windows::Foundation::TimeSpan,
    ) -> ::windows::core::HRESULT,
    pub Duration: unsafe extern "system" fn(
        this: *mut ::core::ffi::c_void,
        result__: *mut ::windows::Foundation::TimeSpan,
    ) -> ::windows::core::HRESULT,
    pub SetDuration: unsafe extern "system" fn(
        this: *mut ::core::ffi::c_void,
        value: ::windows::Foundation::TimeSpan,
    ) -> ::windows::core::HRESULT,
    pub IterationBehavior: unsafe extern "system" fn(
        this: *mut ::core::ffi::c_void,
        result__: *mut AnimationIterationBehavior,
    ) -> ::windows::core::HRESULT,
    pub SetIterationBehavior: unsafe extern "system" fn(
        this: *mut ::core::ffi::c_void,
        value: AnimationIterationBehavior,
    ) -> ::windows::core::HRESULT,
    pub IterationCount: unsafe extern "system" fn(
        this: *mut ::core::ffi::c_void,
        result__: *mut i32,
    ) -> ::windows::core::HRESULT,
    pub SetIterationCount: unsafe extern "system" fn(
        this: *mut ::core::ffi::c_void,
        value: i32,
    ) -> ::windows::core::HRESULT,
    pub KeyFrameCount: unsafe extern "system" fn(
        this: *mut ::core::ffi::c_void,
        result__: *mut i32,
    ) -> ::windows::core::HRESULT,
    pub StopBehavior: unsafe extern "system" fn(
        this: *mut ::core::ffi::c_void,
        result__: *mut AnimationStopBehavior,
    ) -> ::windows::core::HRESULT,
    pub SetStopBehavior: unsafe extern "system" fn(
        this: *mut ::core::ffi::c_void,
        value: AnimationStopBehavior,
    ) -> ::windows::core::HRESULT,
    pub InsertExpressionKeyFrame: unsafe extern "system" fn(
        this: *mut ::core::ffi::c_void,
        normalizedprogresskey: f32,
        value: ::core::mem::ManuallyDrop<::windows::core::HSTRING>,
    ) -> ::windows::core::HRESULT,
    pub InsertExpressionKeyFrameWithEasingFunction:
        unsafe extern "system" fn(
            this: *mut ::core::ffi::c_void,
            normalizedprogresskey: f32,
            value: ::core::mem::ManuallyDrop<::windows::core::HSTRING>,
            easingfunction: *mut ::core::ffi::c_void,
        ) -> ::windows::core::HRESULT,
}
#[doc(hidden)]
#[repr(transparent)]
pub struct IKeyFrameAnimation2(::windows::core::IUnknown);
unsafe impl ::windows::core::Vtable for IKeyFrameAnimation2 {
    type Vtable = IKeyFrameAnimation2_Vtbl;
}
unsafe impl ::windows::core::Interface for IKeyFrameAnimation2 {
    const IID: ::windows::core::GUID =
        ::windows::core::GUID::from_u128(0x414692e5_8a7e_58ea_83e1_25ce475d9300);
}
#[repr(C)]
#[doc(hidden)]
pub struct IKeyFrameAnimation2_Vtbl {
    pub base__: ::windows::core::IInspectable_Vtbl,
    pub Direction: unsafe extern "system" fn(
        this: *mut ::core::ffi::c_void,
        result__: *mut AnimationDirection,
    ) -> ::windows::core::HRESULT,
    pub SetDirection: unsafe extern "system" fn(
        this: *mut ::core::ffi::c_void,
        value: AnimationDirection,
    ) -> ::windows::core::HRESULT,
}
#[doc(hidden)]
#[repr(transparent)]
pub struct IKeyFrameAnimation3(::windows::core::IUnknown);
unsafe impl ::windows::core::Vtable for IKeyFrameAnimation3 {
    type Vtable = IKeyFrameAnimation3_Vtbl;
}
unsafe impl ::windows::core::Interface for IKeyFrameAnimation3 {
    const IID: ::windows::core::GUID =
        ::windows::core::GUID::from_u128(0x4f97e180_9bcb_5fc4_abbe_43aa3be327e7);
}
#[repr(C)]
#[doc(hidden)]
pub struct IKeyFrameAnimation3_Vtbl {
    pub base__: ::windows::core::IInspectable_Vtbl,
    pub DelayBehavior: unsafe extern "system" fn(
        this: *mut ::core::ffi::c_void,
        result__: *mut AnimationDelayBehavior,
    ) -> ::windows::core::HRESULT,
    pub SetDelayBehavior: unsafe extern "system" fn(
        this: *mut ::core::ffi::c_void,
        value: AnimationDelayBehavior,
    ) -> ::windows::core::HRESULT,
}
#[doc(hidden)]
#[repr(transparent)]
pub struct IKeyFrameAnimationFactory(::windows::core::IUnknown);
unsafe impl ::windows::core::Vtable for IKeyFrameAnimationFactory {
    type Vtable = IKeyFrameAnimationFactory_Vtbl;
}
unsafe impl ::windows::core::Interface for IKeyFrameAnimationFactory {
    const IID: ::windows::core::GUID =
        ::windows::core::GUID::from_u128(0x7cccfc87_3baf_5100_b5f8_2f779f954f19);
}
#[repr(C)]
#[doc(hidden)]
pub struct IKeyFrameAnimationFactory_Vtbl {
    pub base__: ::windows::core::IInspectable_Vtbl,
}
#[doc(hidden)]
#[repr(transparent)]
pub struct ILayerVisual(::windows::core::IUnknown);
unsafe impl ::windows::core::Vtable for ILayerVisual {
    type Vtable = ILayerVisual_Vtbl;
}
unsafe impl ::windows::core::Interface for ILayerVisual {
    const IID: ::windows::core::GUID =
        ::windows::core::GUID::from_u128(0x64d05ca1_3bf6_5d4f_98a1_7500f2f23ebe);
}
#[repr(C)]
#[doc(hidden)]
pub struct ILayerVisual_Vtbl {
    pub base__: ::windows::core::IInspectable_Vtbl,
    pub Effect: unsafe extern "system" fn(
        this: *mut ::core::ffi::c_void,
        result__: *mut *mut ::core::ffi::c_void,
    ) -> ::windows::core::HRESULT,
    pub SetEffect: unsafe extern "system" fn(
        this: *mut ::core::ffi::c_void,
        value: *mut ::core::ffi::c_void,
    ) -> ::windows::core::HRESULT,
}
#[doc(hidden)]
#[repr(transparent)]
pub struct ILayerVisual2(::windows::core::IUnknown);
unsafe impl ::windows::core::Vtable for ILayerVisual2 {
    type Vtable = ILayerVisual2_Vtbl;
}
unsafe impl ::windows::core::Interface for ILayerVisual2 {
    const IID: ::windows::core::GUID =
        ::windows::core::GUID::from_u128(0x9ab2e401_af45_54da_9991_dd31273155d2);
}
#[repr(C)]
#[doc(hidden)]
pub struct ILayerVisual2_Vtbl {
    pub base__: ::windows::core::IInspectable_Vtbl,
    pub Shadow: unsafe extern "system" fn(
        this: *mut ::core::ffi::c_void,
        result__: *mut *mut ::core::ffi::c_void,
    ) -> ::windows::core::HRESULT,
    pub SetShadow: unsafe extern "system" fn(
        this: *mut ::core::ffi::c_void,
        value: *mut ::core::ffi::c_void,
    ) -> ::windows::core::HRESULT,
}
#[doc(hidden)]
#[repr(transparent)]
pub struct ILinearEasingFunction(::windows::core::IUnknown);
unsafe impl ::windows::core::Vtable for ILinearEasingFunction {
    type Vtable = ILinearEasingFunction_Vtbl;
}
unsafe impl ::windows::core::Interface for ILinearEasingFunction {
    const IID: ::windows::core::GUID =
        ::windows::core::GUID::from_u128(0x79bfeef6_70c7_50a6_bb3a_0e9636148695);
}
#[repr(C)]
#[doc(hidden)]
pub struct ILinearEasingFunction_Vtbl {
    pub base__: ::windows::core::IInspectable_Vtbl,
}
#[doc(hidden)]
#[repr(transparent)]
pub struct INaturalMotionAnimation(::windows::core::IUnknown);
unsafe impl ::windows::core::Vtable for INaturalMotionAnimation {
    type Vtable = INaturalMotionAnimation_Vtbl;
}
unsafe impl ::windows::core::Interface for INaturalMotionAnimation {
    const IID: ::windows::core::GUID =
        ::windows::core::GUID::from_u128(0x2ff54ebb_a035_50be_a73c_20014975ee31);
}
#[repr(C)]
#[doc(hidden)]
pub struct INaturalMotionAnimation_Vtbl {
    pub base__: ::windows::core::IInspectable_Vtbl,
    pub DelayBehavior: unsafe extern "system" fn(
        this: *mut ::core::ffi::c_void,
        result__: *mut AnimationDelayBehavior,
    ) -> ::windows::core::HRESULT,
    pub SetDelayBehavior: unsafe extern "system" fn(
        this: *mut ::core::ffi::c_void,
        value: AnimationDelayBehavior,
    ) -> ::windows::core::HRESULT,
    pub DelayTime: unsafe extern "system" fn(
        this: *mut ::core::ffi::c_void,
        result__: *mut ::windows::Foundation::TimeSpan,
    ) -> ::windows::core::HRESULT,
    pub SetDelayTime: unsafe extern "system" fn(
        this: *mut ::core::ffi::c_void,
        value: ::windows::Foundation::TimeSpan,
    ) -> ::windows::core::HRESULT,
    pub StopBehavior: unsafe extern "system" fn(
        this: *mut ::core::ffi::c_void,
        result__: *mut AnimationStopBehavior,
    ) -> ::windows::core::HRESULT,
    pub SetStopBehavior: unsafe extern "system" fn(
        this: *mut ::core::ffi::c_void,
        value: AnimationStopBehavior,
    ) -> ::windows::core::HRESULT,
}
#[doc(hidden)]
#[repr(transparent)]
pub struct INaturalMotionAnimationFactory(::windows::core::IUnknown);
unsafe impl ::windows::core::Vtable for INaturalMotionAnimationFactory {
    type Vtable = INaturalMotionAnimationFactory_Vtbl;
}
unsafe impl ::windows::core::Interface for INaturalMotionAnimationFactory {
    const IID: ::windows::core::GUID =
        ::windows::core::GUID::from_u128(0x0411a259_2622_59e2_a59e_1e23d8f83a9f);
}
#[repr(C)]
#[doc(hidden)]
pub struct INaturalMotionAnimationFactory_Vtbl {
    pub base__: ::windows::core::IInspectable_Vtbl,
}
#[doc(hidden)]
#[repr(transparent)]
pub struct IPathKeyFrameAnimation(::windows::core::IUnknown);
unsafe impl ::windows::core::Vtable for IPathKeyFrameAnimation {
    type Vtable = IPathKeyFrameAnimation_Vtbl;
}
unsafe impl ::windows::core::Interface for IPathKeyFrameAnimation {
    const IID: ::windows::core::GUID =
        ::windows::core::GUID::from_u128(0x2b692808_43da_5118_b66d_904a3ec74fd9);
}
#[repr(C)]
#[doc(hidden)]
pub struct IPathKeyFrameAnimation_Vtbl {
    pub base__: ::windows::core::IInspectable_Vtbl,
    pub InsertKeyFrame: unsafe extern "system" fn(
        this: *mut ::core::ffi::c_void,
        normalizedprogresskey: f32,
        path: *mut ::core::ffi::c_void,
    ) -> ::windows::core::HRESULT,
    pub InsertKeyFrameWithEasingFunction: unsafe extern "system" fn(
        this: *mut ::core::ffi::c_void,
        normalizedprogresskey: f32,
        path: *mut ::core::ffi::c_void,
        easingfunction: *mut ::core::ffi::c_void,
    )
        -> ::windows::core::HRESULT,
}
#[doc(hidden)]
#[repr(transparent)]
pub struct IPointLight(::windows::core::IUnknown);
unsafe impl ::windows::core::Vtable for IPointLight {
    type Vtable = IPointLight_Vtbl;
}
unsafe impl ::windows::core::Interface for IPointLight {
    const IID: ::windows::core::GUID =
        ::windows::core::GUID::from_u128(0xed5cc102_f0ac_59a8_8678_ce54146e7be8);
}
#[repr(C)]
#[doc(hidden)]
pub struct IPointLight_Vtbl {
    pub base__: ::windows::core::IInspectable_Vtbl,
    pub Color: unsafe extern "system" fn(
        this: *mut ::core::ffi::c_void,
        result__: *mut ::windows::UI::Color,
    ) -> ::windows::core::HRESULT,
    pub SetColor: unsafe extern "system" fn(
        this: *mut ::core::ffi::c_void,
        value: ::windows::UI::Color,
    ) -> ::windows::core::HRESULT,
    pub ConstantAttenuation: unsafe extern "system" fn(
        this: *mut ::core::ffi::c_void,
        result__: *mut f32,
    ) -> ::windows::core::HRESULT,
    pub SetConstantAttenuation: unsafe extern "system" fn(
        this: *mut ::core::ffi::c_void,
        value: f32,
    ) -> ::windows::core::HRESULT,
    pub CoordinateSpace: unsafe extern "system" fn(
        this: *mut ::core::ffi::c_void,
        result__: *mut *mut ::core::ffi::c_void,
    ) -> ::windows::core::HRESULT,
    pub SetCoordinateSpace: unsafe extern "system" fn(
        this: *mut ::core::ffi::c_void,
        value: *mut ::core::ffi::c_void,
    ) -> ::windows::core::HRESULT,
    pub LinearAttenuation: unsafe extern "system" fn(
        this: *mut ::core::ffi::c_void,
        result__: *mut f32,
    ) -> ::windows::core::HRESULT,
    pub SetLinearAttenuation: unsafe extern "system" fn(
        this: *mut ::core::ffi::c_void,
        value: f32,
    ) -> ::windows::core::HRESULT,
    pub Offset: unsafe extern "system" fn(
        this: *mut ::core::ffi::c_void,
        result__: *mut ::windows::Foundation::Numerics::Vector3,
    ) -> ::windows::core::HRESULT,
    pub SetOffset: unsafe extern "system" fn(
        this: *mut ::core::ffi::c_void,
        value: ::windows::Foundation::Numerics::Vector3,
    ) -> ::windows::core::HRESULT,
    pub QuadraticAttenuation: unsafe extern "system" fn(
        this: *mut ::core::ffi::c_void,
        result__: *mut f32,
    ) -> ::windows::core::HRESULT,
    pub SetQuadraticAttenuation: unsafe extern "system" fn(
        this: *mut ::core::ffi::c_void,
        value: f32,
    ) -> ::windows::core::HRESULT,
}
#[doc(hidden)]
#[repr(transparent)]
pub struct IPointLight2(::windows::core::IUnknown);
unsafe impl ::windows::core::Vtable for IPointLight2 {
    type Vtable = IPointLight2_Vtbl;
}
unsafe impl ::windows::core::Interface for IPointLight2 {
    const IID: ::windows::core::GUID =
        ::windows::core::GUID::from_u128(0xde466104_59d9_57d2_92b5_554d6d82edf2);
}
#[repr(C)]
#[doc(hidden)]
pub struct IPointLight2_Vtbl {
    pub base__: ::windows::core::IInspectable_Vtbl,
    pub Intensity: unsafe extern "system" fn(
        this: *mut ::core::ffi::c_void,
        result__: *mut f32,
    ) -> ::windows::core::HRESULT,
    pub SetIntensity: unsafe extern "system" fn(
        this: *mut ::core::ffi::c_void,
        value: f32,
    ) -> ::windows::core::HRESULT,
}
#[doc(hidden)]
#[repr(transparent)]
pub struct IPointLight3(::windows::core::IUnknown);
unsafe impl ::windows::core::Vtable for IPointLight3 {
    type Vtable = IPointLight3_Vtbl;
}
unsafe impl ::windows::core::Interface for IPointLight3 {
    const IID: ::windows::core::GUID =
        ::windows::core::GUID::from_u128(0xbe30e87a_8cbb_5a56_8d24_2cd865f383b3);
}
#[repr(C)]
#[doc(hidden)]
pub struct IPointLight3_Vtbl {
    pub base__: ::windows::core::IInspectable_Vtbl,
    pub MinAttenuationCutoff: unsafe extern "system" fn(
        this: *mut ::core::ffi::c_void,
        result__: *mut f32,
    ) -> ::windows::core::HRESULT,
    pub SetMinAttenuationCutoff: unsafe extern "system" fn(
        this: *mut ::core::ffi::c_void,
        value: f32,
    ) -> ::windows::core::HRESULT,
    pub MaxAttenuationCutoff: unsafe extern "system" fn(
        this: *mut ::core::ffi::c_void,
        result__: *mut f32,
    ) -> ::windows::core::HRESULT,
    pub SetMaxAttenuationCutoff: unsafe extern "system" fn(
        this: *mut ::core::ffi::c_void,
        value: f32,
    ) -> ::windows::core::HRESULT,
}
#[doc(hidden)]
#[repr(transparent)]
pub struct IPowerEasingFunction(::windows::core::IUnknown);
unsafe impl ::windows::core::Vtable for IPowerEasingFunction {
    type Vtable = IPowerEasingFunction_Vtbl;
}
unsafe impl ::windows::core::Interface for IPowerEasingFunction {
    const IID: ::windows::core::GUID =
        ::windows::core::GUID::from_u128(0x0268a272_ea06_5fb0_8def_49726bcee39b);
}
#[repr(C)]
#[doc(hidden)]
pub struct IPowerEasingFunction_Vtbl {
    pub base__: ::windows::core::IInspectable_Vtbl,
    pub Mode: unsafe extern "system" fn(
        this: *mut ::core::ffi::c_void,
        result__: *mut CompositionEasingFunctionMode,
    ) -> ::windows::core::HRESULT,
    pub Power: unsafe extern "system" fn(
        this: *mut ::core::ffi::c_void,
        result__: *mut f32,
    ) -> ::windows::core::HRESULT,
}
#[doc(hidden)]
#[repr(transparent)]
pub struct IQuaternionKeyFrameAnimation(::windows::core::IUnknown);
unsafe impl ::windows::core::Vtable for IQuaternionKeyFrameAnimation {
    type Vtable = IQuaternionKeyFrameAnimation_Vtbl;
}
unsafe impl ::windows::core::Interface for IQuaternionKeyFrameAnimation {
    const IID: ::windows::core::GUID =
        ::windows::core::GUID::from_u128(0xe72d1026_da3b_5d56_858b_3a9aa3c57d70);
}
#[repr(C)]
#[doc(hidden)]
pub struct IQuaternionKeyFrameAnimation_Vtbl {
    pub base__: ::windows::core::IInspectable_Vtbl,
    pub InsertKeyFrame: unsafe extern "system" fn(
        this: *mut ::core::ffi::c_void,
        normalizedprogresskey: f32,
        value: ::windows::Foundation::Numerics::Quaternion,
    ) -> ::windows::core::HRESULT,
    pub InsertKeyFrameWithEasingFunction: unsafe extern "system" fn(
        this: *mut ::core::ffi::c_void,
        normalizedprogresskey: f32,
        value: ::windows::Foundation::Numerics::Quaternion,
        easingfunction: *mut ::core::ffi::c_void,
    )
        -> ::windows::core::HRESULT,
}
#[doc(hidden)]
#[repr(transparent)]
pub struct IRectangleClip(::windows::core::IUnknown);
unsafe impl ::windows::core::Vtable for IRectangleClip {
    type Vtable = IRectangleClip_Vtbl;
}
unsafe impl ::windows::core::Interface for IRectangleClip {
    const IID: ::windows::core::GUID =
        ::windows::core::GUID::from_u128(0xbc261502_2259_5c01_8616_556110a09657);
}
#[repr(C)]
#[doc(hidden)]
pub struct IRectangleClip_Vtbl {
    pub base__: ::windows::core::IInspectable_Vtbl,
    pub Bottom: unsafe extern "system" fn(
        this: *mut ::core::ffi::c_void,
        result__: *mut f32,
    ) -> ::windows::core::HRESULT,
    pub SetBottom: unsafe extern "system" fn(
        this: *mut ::core::ffi::c_void,
        value: f32,
    ) -> ::windows::core::HRESULT,
    pub BottomLeftRadius: unsafe extern "system" fn(
        this: *mut ::core::ffi::c_void,
        result__: *mut ::windows::Foundation::Numerics::Vector2,
    ) -> ::windows::core::HRESULT,
    pub SetBottomLeftRadius: unsafe extern "system" fn(
        this: *mut ::core::ffi::c_void,
        value: ::windows::Foundation::Numerics::Vector2,
    ) -> ::windows::core::HRESULT,
    pub BottomRightRadius: unsafe extern "system" fn(
        this: *mut ::core::ffi::c_void,
        result__: *mut ::windows::Foundation::Numerics::Vector2,
    ) -> ::windows::core::HRESULT,
    pub SetBottomRightRadius: unsafe extern "system" fn(
        this: *mut ::core::ffi::c_void,
        value: ::windows::Foundation::Numerics::Vector2,
    ) -> ::windows::core::HRESULT,
    pub Left: unsafe extern "system" fn(
        this: *mut ::core::ffi::c_void,
        result__: *mut f32,
    ) -> ::windows::core::HRESULT,
    pub SetLeft: unsafe extern "system" fn(
        this: *mut ::core::ffi::c_void,
        value: f32,
    ) -> ::windows::core::HRESULT,
    pub Right: unsafe extern "system" fn(
        this: *mut ::core::ffi::c_void,
        result__: *mut f32,
    ) -> ::windows::core::HRESULT,
    pub SetRight: unsafe extern "system" fn(
        this: *mut ::core::ffi::c_void,
        value: f32,
    ) -> ::windows::core::HRESULT,
    pub Top: unsafe extern "system" fn(
        this: *mut ::core::ffi::c_void,
        result__: *mut f32,
    ) -> ::windows::core::HRESULT,
    pub SetTop: unsafe extern "system" fn(
        this: *mut ::core::ffi::c_void,
        value: f32,
    ) -> ::windows::core::HRESULT,
    pub TopLeftRadius: unsafe extern "system" fn(
        this: *mut ::core::ffi::c_void,
        result__: *mut ::windows::Foundation::Numerics::Vector2,
    ) -> ::windows::core::HRESULT,
    pub SetTopLeftRadius: unsafe extern "system" fn(
        this: *mut ::core::ffi::c_void,
        value: ::windows::Foundation::Numerics::Vector2,
    ) -> ::windows::core::HRESULT,
    pub TopRightRadius: unsafe extern "system" fn(
        this: *mut ::core::ffi::c_void,
        result__: *mut ::windows::Foundation::Numerics::Vector2,
    ) -> ::windows::core::HRESULT,
    pub SetTopRightRadius: unsafe extern "system" fn(
        this: *mut ::core::ffi::c_void,
        value: ::windows::Foundation::Numerics::Vector2,
    ) -> ::windows::core::HRESULT,
}
#[doc(hidden)]
#[repr(transparent)]
pub struct IRedirectVisual(::windows::core::IUnknown);
unsafe impl ::windows::core::Vtable for IRedirectVisual {
    type Vtable = IRedirectVisual_Vtbl;
}
unsafe impl ::windows::core::Interface for IRedirectVisual {
    const IID: ::windows::core::GUID =
        ::windows::core::GUID::from_u128(0x6c10081a_cde1_50d9_ac05_78d6845b656f);
}
#[repr(C)]
#[doc(hidden)]
pub struct IRedirectVisual_Vtbl {
    pub base__: ::windows::core::IInspectable_Vtbl,
    pub Source: unsafe extern "system" fn(
        this: *mut ::core::ffi::c_void,
        result__: *mut *mut ::core::ffi::c_void,
    ) -> ::windows::core::HRESULT,
    pub SetSource: unsafe extern "system" fn(
        this: *mut ::core::ffi::c_void,
        value: *mut ::core::ffi::c_void,
    ) -> ::windows::core::HRESULT,
}
#[doc(hidden)]
#[repr(transparent)]
pub struct IRenderingDeviceReplacedEventArgs(::windows::core::IUnknown);
unsafe impl ::windows::core::Vtable for IRenderingDeviceReplacedEventArgs {
    type Vtable = IRenderingDeviceReplacedEventArgs_Vtbl;
}
unsafe impl ::windows::core::Interface for IRenderingDeviceReplacedEventArgs {
    const IID: ::windows::core::GUID =
        ::windows::core::GUID::from_u128(0xfe5b97c7_f656_56d6_a0cd_3e1227e4dd44);
}
#[repr(C)]
#[doc(hidden)]
pub struct IRenderingDeviceReplacedEventArgs_Vtbl {
    pub base__: ::windows::core::IInspectable_Vtbl,
    pub GraphicsDevice: unsafe extern "system" fn(
        this: *mut ::core::ffi::c_void,
        result__: *mut *mut ::core::ffi::c_void,
    ) -> ::windows::core::HRESULT,
}
#[doc(hidden)]
#[repr(transparent)]
pub struct IScalarKeyFrameAnimation(::windows::core::IUnknown);
unsafe impl ::windows::core::Vtable for IScalarKeyFrameAnimation {
    type Vtable = IScalarKeyFrameAnimation_Vtbl;
}
unsafe impl ::windows::core::Interface for IScalarKeyFrameAnimation {
    const IID: ::windows::core::GUID =
        ::windows::core::GUID::from_u128(0x5a5f8abe_d129_5b25_8aff_8180fd9bfb22);
}
#[repr(C)]
#[doc(hidden)]
pub struct IScalarKeyFrameAnimation_Vtbl {
    pub base__: ::windows::core::IInspectable_Vtbl,
    pub InsertKeyFrame: unsafe extern "system" fn(
        this: *mut ::core::ffi::c_void,
        normalizedprogresskey: f32,
        value: f32,
    ) -> ::windows::core::HRESULT,
    pub InsertKeyFrameWithEasingFunction: unsafe extern "system" fn(
        this: *mut ::core::ffi::c_void,
        normalizedprogresskey: f32,
        value: f32,
        easingfunction: *mut ::core::ffi::c_void,
    )
        -> ::windows::core::HRESULT,
}
#[doc(hidden)]
#[repr(transparent)]
pub struct IScalarNaturalMotionAnimation(::windows::core::IUnknown);
unsafe impl ::windows::core::Vtable for IScalarNaturalMotionAnimation {
    type Vtable = IScalarNaturalMotionAnimation_Vtbl;
}
unsafe impl ::windows::core::Interface for IScalarNaturalMotionAnimation {
    const IID: ::windows::core::GUID =
        ::windows::core::GUID::from_u128(0x903224b0_2dbe_56eb_b9ea_33d2e3113181);
}
#[repr(C)]
#[doc(hidden)]
pub struct IScalarNaturalMotionAnimation_Vtbl {
    pub base__: ::windows::core::IInspectable_Vtbl,
    pub FinalValue: unsafe extern "system" fn(
        this: *mut ::core::ffi::c_void,
        result__: *mut *mut ::core::ffi::c_void,
    ) -> ::windows::core::HRESULT,
    pub SetFinalValue: unsafe extern "system" fn(
        this: *mut ::core::ffi::c_void,
        value: *mut ::core::ffi::c_void,
    ) -> ::windows::core::HRESULT,
    pub InitialValue: unsafe extern "system" fn(
        this: *mut ::core::ffi::c_void,
        result__: *mut *mut ::core::ffi::c_void,
    ) -> ::windows::core::HRESULT,
    pub SetInitialValue: unsafe extern "system" fn(
        this: *mut ::core::ffi::c_void,
        value: *mut ::core::ffi::c_void,
    ) -> ::windows::core::HRESULT,
    pub InitialVelocity: unsafe extern "system" fn(
        this: *mut ::core::ffi::c_void,
        result__: *mut f32,
    ) -> ::windows::core::HRESULT,
    pub SetInitialVelocity: unsafe extern "system" fn(
        this: *mut ::core::ffi::c_void,
        value: f32,
    ) -> ::windows::core::HRESULT,
}
#[doc(hidden)]
#[repr(transparent)]
pub struct IScalarNaturalMotionAnimationFactory(::windows::core::IUnknown);
unsafe impl ::windows::core::Vtable for IScalarNaturalMotionAnimationFactory {
    type Vtable = IScalarNaturalMotionAnimationFactory_Vtbl;
}
unsafe impl ::windows::core::Interface for IScalarNaturalMotionAnimationFactory {
    const IID: ::windows::core::GUID =
        ::windows::core::GUID::from_u128(0x14f8a9ab_976c_5e6f_890b_9a74d07fa39f);
}
#[repr(C)]
#[doc(hidden)]
pub struct IScalarNaturalMotionAnimationFactory_Vtbl {
    pub base__: ::windows::core::IInspectable_Vtbl,
}
#[doc(hidden)]
#[repr(transparent)]
pub struct IShapeVisual(::windows::core::IUnknown);
unsafe impl ::windows::core::Vtable for IShapeVisual {
    type Vtable = IShapeVisual_Vtbl;
}
unsafe impl ::windows::core::Interface for IShapeVisual {
    const IID: ::windows::core::GUID =
        ::windows::core::GUID::from_u128(0xa911c80b_a5a5_5aca_b8ff_c43f08f06143);
}
#[repr(C)]
#[doc(hidden)]
pub struct IShapeVisual_Vtbl {
    pub base__: ::windows::core::IInspectable_Vtbl,
    pub Shapes: unsafe extern "system" fn(
        this: *mut ::core::ffi::c_void,
        result__: *mut *mut ::core::ffi::c_void,
    ) -> ::windows::core::HRESULT,
    pub ViewBox: unsafe extern "system" fn(
        this: *mut ::core::ffi::c_void,
        result__: *mut *mut ::core::ffi::c_void,
    ) -> ::windows::core::HRESULT,
    pub SetViewBox: unsafe extern "system" fn(
        this: *mut ::core::ffi::c_void,
        value: *mut ::core::ffi::c_void,
    ) -> ::windows::core::HRESULT,
}
#[doc(hidden)]
#[repr(transparent)]
pub struct ISineEasingFunction(::windows::core::IUnknown);
unsafe impl ::windows::core::Vtable for ISineEasingFunction {
    type Vtable = ISineEasingFunction_Vtbl;
}
unsafe impl ::windows::core::Interface for ISineEasingFunction {
    const IID: ::windows::core::GUID =
        ::windows::core::GUID::from_u128(0x7fccb5f8_cb0e_5a01_a26b_98880ff49dc6);
}
#[repr(C)]
#[doc(hidden)]
pub struct ISineEasingFunction_Vtbl {
    pub base__: ::windows::core::IInspectable_Vtbl,
    pub Mode: unsafe extern "system" fn(
        this: *mut ::core::ffi::c_void,
        result__: *mut CompositionEasingFunctionMode,
    ) -> ::windows::core::HRESULT,
}
#[doc(hidden)]
#[repr(transparent)]
pub struct ISpotLight(::windows::core::IUnknown);
unsafe impl ::windows::core::Vtable for ISpotLight {
    type Vtable = ISpotLight_Vtbl;
}
unsafe impl ::windows::core::Interface for ISpotLight {
    const IID: ::windows::core::GUID =
        ::windows::core::GUID::from_u128(0x5935496a_0586_5f77_bd03_d5a6bb9e8fa0);
}
#[repr(C)]
#[doc(hidden)]
pub struct ISpotLight_Vtbl {
    pub base__: ::windows::core::IInspectable_Vtbl,
    pub ConstantAttenuation: unsafe extern "system" fn(
        this: *mut ::core::ffi::c_void,
        result__: *mut f32,
    ) -> ::windows::core::HRESULT,
    pub SetConstantAttenuation: unsafe extern "system" fn(
        this: *mut ::core::ffi::c_void,
        value: f32,
    ) -> ::windows::core::HRESULT,
    pub CoordinateSpace: unsafe extern "system" fn(
        this: *mut ::core::ffi::c_void,
        result__: *mut *mut ::core::ffi::c_void,
    ) -> ::windows::core::HRESULT,
    pub SetCoordinateSpace: unsafe extern "system" fn(
        this: *mut ::core::ffi::c_void,
        value: *mut ::core::ffi::c_void,
    ) -> ::windows::core::HRESULT,
    pub Direction: unsafe extern "system" fn(
        this: *mut ::core::ffi::c_void,
        result__: *mut ::windows::Foundation::Numerics::Vector3,
    ) -> ::windows::core::HRESULT,
    pub SetDirection: unsafe extern "system" fn(
        this: *mut ::core::ffi::c_void,
        value: ::windows::Foundation::Numerics::Vector3,
    ) -> ::windows::core::HRESULT,
    pub InnerConeAngle: unsafe extern "system" fn(
        this: *mut ::core::ffi::c_void,
        result__: *mut f32,
    ) -> ::windows::core::HRESULT,
    pub SetInnerConeAngle: unsafe extern "system" fn(
        this: *mut ::core::ffi::c_void,
        value: f32,
    ) -> ::windows::core::HRESULT,
    pub InnerConeAngleInDegrees: unsafe extern "system" fn(
        this: *mut ::core::ffi::c_void,
        result__: *mut f32,
    ) -> ::windows::core::HRESULT,
    pub SetInnerConeAngleInDegrees: unsafe extern "system" fn(
        this: *mut ::core::ffi::c_void,
        value: f32,
    ) -> ::windows::core::HRESULT,
    pub InnerConeColor: unsafe extern "system" fn(
        this: *mut ::core::ffi::c_void,
        result__: *mut ::windows::UI::Color,
    ) -> ::windows::core::HRESULT,
    pub SetInnerConeColor: unsafe extern "system" fn(
        this: *mut ::core::ffi::c_void,
        value: ::windows::UI::Color,
    ) -> ::windows::core::HRESULT,
    pub LinearAttenuation: unsafe extern "system" fn(
        this: *mut ::core::ffi::c_void,
        result__: *mut f32,
    ) -> ::windows::core::HRESULT,
    pub SetLinearAttenuation: unsafe extern "system" fn(
        this: *mut ::core::ffi::c_void,
        value: f32,
    ) -> ::windows::core::HRESULT,
    pub Offset: unsafe extern "system" fn(
        this: *mut ::core::ffi::c_void,
        result__: *mut ::windows::Foundation::Numerics::Vector3,
    ) -> ::windows::core::HRESULT,
    pub SetOffset: unsafe extern "system" fn(
        this: *mut ::core::ffi::c_void,
        value: ::windows::Foundation::Numerics::Vector3,
    ) -> ::windows::core::HRESULT,
    pub OuterConeAngle: unsafe extern "system" fn(
        this: *mut ::core::ffi::c_void,
        result__: *mut f32,
    ) -> ::windows::core::HRESULT,
    pub SetOuterConeAngle: unsafe extern "system" fn(
        this: *mut ::core::ffi::c_void,
        value: f32,
    ) -> ::windows::core::HRESULT,
    pub OuterConeAngleInDegrees: unsafe extern "system" fn(
        this: *mut ::core::ffi::c_void,
        result__: *mut f32,
    ) -> ::windows::core::HRESULT,
    pub SetOuterConeAngleInDegrees: unsafe extern "system" fn(
        this: *mut ::core::ffi::c_void,
        value: f32,
    ) -> ::windows::core::HRESULT,
    pub OuterConeColor: unsafe extern "system" fn(
        this: *mut ::core::ffi::c_void,
        result__: *mut ::windows::UI::Color,
    ) -> ::windows::core::HRESULT,
    pub SetOuterConeColor: unsafe extern "system" fn(
        this: *mut ::core::ffi::c_void,
        value: ::windows::UI::Color,
    ) -> ::windows::core::HRESULT,
    pub QuadraticAttenuation: unsafe extern "system" fn(
        this: *mut ::core::ffi::c_void,
        result__: *mut f32,
    ) -> ::windows::core::HRESULT,
    pub SetQuadraticAttenuation: unsafe extern "system" fn(
        this: *mut ::core::ffi::c_void,
        value: f32,
    ) -> ::windows::core::HRESULT,
}
#[doc(hidden)]
#[repr(transparent)]
pub struct ISpotLight2(::windows::core::IUnknown);
unsafe impl ::windows::core::Vtable for ISpotLight2 {
    type Vtable = ISpotLight2_Vtbl;
}
unsafe impl ::windows::core::Interface for ISpotLight2 {
    const IID: ::windows::core::GUID =
        ::windows::core::GUID::from_u128(0x49dd3b50_ec5c_5b6c_baa1_8504b13e3a67);
}
#[repr(C)]
#[doc(hidden)]
pub struct ISpotLight2_Vtbl {
    pub base__: ::windows::core::IInspectable_Vtbl,
    pub InnerConeIntensity: unsafe extern "system" fn(
        this: *mut ::core::ffi::c_void,
        result__: *mut f32,
    ) -> ::windows::core::HRESULT,
    pub SetInnerConeIntensity: unsafe extern "system" fn(
        this: *mut ::core::ffi::c_void,
        value: f32,
    ) -> ::windows::core::HRESULT,
    pub OuterConeIntensity: unsafe extern "system" fn(
        this: *mut ::core::ffi::c_void,
        result__: *mut f32,
    ) -> ::windows::core::HRESULT,
    pub SetOuterConeIntensity: unsafe extern "system" fn(
        this: *mut ::core::ffi::c_void,
        value: f32,
    ) -> ::windows::core::HRESULT,
}
#[doc(hidden)]
#[repr(transparent)]
pub struct ISpotLight3(::windows::core::IUnknown);
unsafe impl ::windows::core::Vtable for ISpotLight3 {
    type Vtable = ISpotLight3_Vtbl;
}
unsafe impl ::windows::core::Interface for ISpotLight3 {
    const IID: ::windows::core::GUID =
        ::windows::core::GUID::from_u128(0xc6919941_0d9f_58c8_91e2_adef6e5e70a4);
}
#[repr(C)]
#[doc(hidden)]
pub struct ISpotLight3_Vtbl {
    pub base__: ::windows::core::IInspectable_Vtbl,
    pub MinAttenuationCutoff: unsafe extern "system" fn(
        this: *mut ::core::ffi::c_void,
        result__: *mut f32,
    ) -> ::windows::core::HRESULT,
    pub SetMinAttenuationCutoff: unsafe extern "system" fn(
        this: *mut ::core::ffi::c_void,
        value: f32,
    ) -> ::windows::core::HRESULT,
    pub MaxAttenuationCutoff: unsafe extern "system" fn(
        this: *mut ::core::ffi::c_void,
        result__: *mut f32,
    ) -> ::windows::core::HRESULT,
    pub SetMaxAttenuationCutoff: unsafe extern "system" fn(
        this: *mut ::core::ffi::c_void,
        value: f32,
    ) -> ::windows::core::HRESULT,
}
#[doc(hidden)]
#[repr(transparent)]
pub struct ISpringScalarNaturalMotionAnimation(::windows::core::IUnknown);
unsafe impl ::windows::core::Vtable for ISpringScalarNaturalMotionAnimation {
    type Vtable = ISpringScalarNaturalMotionAnimation_Vtbl;
}
unsafe impl ::windows::core::Interface for ISpringScalarNaturalMotionAnimation {
    const IID: ::windows::core::GUID =
        ::windows::core::GUID::from_u128(0x6f720afd_d3d0_5e78_9c2e_83092f6ea45e);
}
#[repr(C)]
#[doc(hidden)]
pub struct ISpringScalarNaturalMotionAnimation_Vtbl {
    pub base__: ::windows::core::IInspectable_Vtbl,
    pub DampingRatio: unsafe extern "system" fn(
        this: *mut ::core::ffi::c_void,
        result__: *mut f32,
    ) -> ::windows::core::HRESULT,
    pub SetDampingRatio: unsafe extern "system" fn(
        this: *mut ::core::ffi::c_void,
        value: f32,
    ) -> ::windows::core::HRESULT,
    pub Period: unsafe extern "system" fn(
        this: *mut ::core::ffi::c_void,
        result__: *mut ::windows::Foundation::TimeSpan,
    ) -> ::windows::core::HRESULT,
    pub SetPeriod: unsafe extern "system" fn(
        this: *mut ::core::ffi::c_void,
        value: ::windows::Foundation::TimeSpan,
    ) -> ::windows::core::HRESULT,
}
#[doc(hidden)]
#[repr(transparent)]
pub struct ISpringVector2NaturalMotionAnimation(::windows::core::IUnknown);
unsafe impl ::windows::core::Vtable for ISpringVector2NaturalMotionAnimation {
    type Vtable = ISpringVector2NaturalMotionAnimation_Vtbl;
}
unsafe impl ::windows::core::Interface for ISpringVector2NaturalMotionAnimation {
    const IID: ::windows::core::GUID =
        ::windows::core::GUID::from_u128(0x5b4580a4_2594_521e_b288_eaf2c2a16a66);
}
#[repr(C)]
#[doc(hidden)]
pub struct ISpringVector2NaturalMotionAnimation_Vtbl {
    pub base__: ::windows::core::IInspectable_Vtbl,
    pub DampingRatio: unsafe extern "system" fn(
        this: *mut ::core::ffi::c_void,
        result__: *mut f32,
    ) -> ::windows::core::HRESULT,
    pub SetDampingRatio: unsafe extern "system" fn(
        this: *mut ::core::ffi::c_void,
        value: f32,
    ) -> ::windows::core::HRESULT,
    pub Period: unsafe extern "system" fn(
        this: *mut ::core::ffi::c_void,
        result__: *mut ::windows::Foundation::TimeSpan,
    ) -> ::windows::core::HRESULT,
    pub SetPeriod: unsafe extern "system" fn(
        this: *mut ::core::ffi::c_void,
        value: ::windows::Foundation::TimeSpan,
    ) -> ::windows::core::HRESULT,
}
#[doc(hidden)]
#[repr(transparent)]
pub struct ISpringVector3NaturalMotionAnimation(::windows::core::IUnknown);
unsafe impl ::windows::core::Vtable for ISpringVector3NaturalMotionAnimation {
    type Vtable = ISpringVector3NaturalMotionAnimation_Vtbl;
}
unsafe impl ::windows::core::Interface for ISpringVector3NaturalMotionAnimation {
    const IID: ::windows::core::GUID =
        ::windows::core::GUID::from_u128(0x02d9e1c6_7434_5464_a1f6_d644ce1fc9a6);
}
#[repr(C)]
#[doc(hidden)]
pub struct ISpringVector3NaturalMotionAnimation_Vtbl {
    pub base__: ::windows::core::IInspectable_Vtbl,
    pub DampingRatio: unsafe extern "system" fn(
        this: *mut ::core::ffi::c_void,
        result__: *mut f32,
    ) -> ::windows::core::HRESULT,
    pub SetDampingRatio: unsafe extern "system" fn(
        this: *mut ::core::ffi::c_void,
        value: f32,
    ) -> ::windows::core::HRESULT,
    pub Period: unsafe extern "system" fn(
        this: *mut ::core::ffi::c_void,
        result__: *mut ::windows::Foundation::TimeSpan,
    ) -> ::windows::core::HRESULT,
    pub SetPeriod: unsafe extern "system" fn(
        this: *mut ::core::ffi::c_void,
        value: ::windows::Foundation::TimeSpan,
    ) -> ::windows::core::HRESULT,
}
#[doc(hidden)]
#[repr(transparent)]
pub struct ISpriteVisual(::windows::core::IUnknown);
unsafe impl ::windows::core::Vtable for ISpriteVisual {
    type Vtable = ISpriteVisual_Vtbl;
}
unsafe impl ::windows::core::Interface for ISpriteVisual {
    const IID: ::windows::core::GUID =
        ::windows::core::GUID::from_u128(0x7e964632_45e4_5761_806d_5b4022c14f26);
}
#[repr(C)]
#[doc(hidden)]
pub struct ISpriteVisual_Vtbl {
    pub base__: ::windows::core::IInspectable_Vtbl,
    pub Brush: unsafe extern "system" fn(
        this: *mut ::core::ffi::c_void,
        result__: *mut *mut ::core::ffi::c_void,
    ) -> ::windows::core::HRESULT,
    pub SetBrush: unsafe extern "system" fn(
        this: *mut ::core::ffi::c_void,
        value: *mut ::core::ffi::c_void,
    ) -> ::windows::core::HRESULT,
}
#[doc(hidden)]
#[repr(transparent)]
pub struct ISpriteVisual2(::windows::core::IUnknown);
unsafe impl ::windows::core::Vtable for ISpriteVisual2 {
    type Vtable = ISpriteVisual2_Vtbl;
}
unsafe impl ::windows::core::Interface for ISpriteVisual2 {
    const IID: ::windows::core::GUID =
        ::windows::core::GUID::from_u128(0x3cb43662_9ecf_5128_850d_9eb8437774f0);
}
#[repr(C)]
#[doc(hidden)]
pub struct ISpriteVisual2_Vtbl {
    pub base__: ::windows::core::IInspectable_Vtbl,
    pub Shadow: unsafe extern "system" fn(
        this: *mut ::core::ffi::c_void,
        result__: *mut *mut ::core::ffi::c_void,
    ) -> ::windows::core::HRESULT,
    pub SetShadow: unsafe extern "system" fn(
        this: *mut ::core::ffi::c_void,
        value: *mut ::core::ffi::c_void,
    ) -> ::windows::core::HRESULT,
}
#[doc(hidden)]
#[repr(transparent)]
pub struct IStepEasingFunction(::windows::core::IUnknown);
unsafe impl ::windows::core::Vtable for IStepEasingFunction {
    type Vtable = IStepEasingFunction_Vtbl;
}
unsafe impl ::windows::core::Interface for IStepEasingFunction {
    const IID: ::windows::core::GUID =
        ::windows::core::GUID::from_u128(0xc7b1d4cf_c562_56b3_b4e6_b21326165f71);
}
#[repr(C)]
#[doc(hidden)]
pub struct IStepEasingFunction_Vtbl {
    pub base__: ::windows::core::IInspectable_Vtbl,
    pub FinalStep: unsafe extern "system" fn(
        this: *mut ::core::ffi::c_void,
        result__: *mut i32,
    ) -> ::windows::core::HRESULT,
    pub SetFinalStep: unsafe extern "system" fn(
        this: *mut ::core::ffi::c_void,
        value: i32,
    ) -> ::windows::core::HRESULT,
    pub InitialStep: unsafe extern "system" fn(
        this: *mut ::core::ffi::c_void,
        result__: *mut i32,
    ) -> ::windows::core::HRESULT,
    pub SetInitialStep: unsafe extern "system" fn(
        this: *mut ::core::ffi::c_void,
        value: i32,
    ) -> ::windows::core::HRESULT,
    pub IsFinalStepSingleFrame: unsafe extern "system" fn(
        this: *mut ::core::ffi::c_void,
        result__: *mut bool,
    ) -> ::windows::core::HRESULT,
    pub SetIsFinalStepSingleFrame: unsafe extern "system" fn(
        this: *mut ::core::ffi::c_void,
        value: bool,
    ) -> ::windows::core::HRESULT,
    pub IsInitialStepSingleFrame: unsafe extern "system" fn(
        this: *mut ::core::ffi::c_void,
        result__: *mut bool,
    ) -> ::windows::core::HRESULT,
    pub SetIsInitialStepSingleFrame: unsafe extern "system" fn(
        this: *mut ::core::ffi::c_void,
        value: bool,
    ) -> ::windows::core::HRESULT,
    pub StepCount: unsafe extern "system" fn(
        this: *mut ::core::ffi::c_void,
        result__: *mut i32,
    ) -> ::windows::core::HRESULT,
    pub SetStepCount: unsafe extern "system" fn(
        this: *mut ::core::ffi::c_void,
        value: i32,
    ) -> ::windows::core::HRESULT,
}
#[doc(hidden)]
#[repr(transparent)]
pub struct IVector2KeyFrameAnimation(::windows::core::IUnknown);
unsafe impl ::windows::core::Vtable for IVector2KeyFrameAnimation {
    type Vtable = IVector2KeyFrameAnimation_Vtbl;
}
unsafe impl ::windows::core::Interface for IVector2KeyFrameAnimation {
    const IID: ::windows::core::GUID =
        ::windows::core::GUID::from_u128(0xe9c5e3fd_43b7_526e_9da0_4c3ea96db27d);
}
#[repr(C)]
#[doc(hidden)]
pub struct IVector2KeyFrameAnimation_Vtbl {
    pub base__: ::windows::core::IInspectable_Vtbl,
    pub InsertKeyFrame: unsafe extern "system" fn(
        this: *mut ::core::ffi::c_void,
        normalizedprogresskey: f32,
        value: ::windows::Foundation::Numerics::Vector2,
    ) -> ::windows::core::HRESULT,
    pub InsertKeyFrameWithEasingFunction: unsafe extern "system" fn(
        this: *mut ::core::ffi::c_void,
        normalizedprogresskey: f32,
        value: ::windows::Foundation::Numerics::Vector2,
        easingfunction: *mut ::core::ffi::c_void,
    )
        -> ::windows::core::HRESULT,
}
#[doc(hidden)]
#[repr(transparent)]
pub struct IVector2NaturalMotionAnimation(::windows::core::IUnknown);
unsafe impl ::windows::core::Vtable for IVector2NaturalMotionAnimation {
    type Vtable = IVector2NaturalMotionAnimation_Vtbl;
}
unsafe impl ::windows::core::Interface for IVector2NaturalMotionAnimation {
    const IID: ::windows::core::GUID =
        ::windows::core::GUID::from_u128(0xe00e60ce_d1be_5c24_885d_c1d0a749d109);
}
#[repr(C)]
#[doc(hidden)]
pub struct IVector2NaturalMotionAnimation_Vtbl {
    pub base__: ::windows::core::IInspectable_Vtbl,
    pub FinalValue: unsafe extern "system" fn(
        this: *mut ::core::ffi::c_void,
        result__: *mut *mut ::core::ffi::c_void,
    ) -> ::windows::core::HRESULT,
    pub SetFinalValue: unsafe extern "system" fn(
        this: *mut ::core::ffi::c_void,
        value: *mut ::core::ffi::c_void,
    ) -> ::windows::core::HRESULT,
    pub InitialValue: unsafe extern "system" fn(
        this: *mut ::core::ffi::c_void,
        result__: *mut *mut ::core::ffi::c_void,
    ) -> ::windows::core::HRESULT,
    pub SetInitialValue: unsafe extern "system" fn(
        this: *mut ::core::ffi::c_void,
        value: *mut ::core::ffi::c_void,
    ) -> ::windows::core::HRESULT,
    pub InitialVelocity: unsafe extern "system" fn(
        this: *mut ::core::ffi::c_void,
        result__: *mut ::windows::Foundation::Numerics::Vector2,
    ) -> ::windows::core::HRESULT,
    pub SetInitialVelocity: unsafe extern "system" fn(
        this: *mut ::core::ffi::c_void,
        value: ::windows::Foundation::Numerics::Vector2,
    ) -> ::windows::core::HRESULT,
}
#[doc(hidden)]
#[repr(transparent)]
pub struct IVector2NaturalMotionAnimationFactory(::windows::core::IUnknown);
unsafe impl ::windows::core::Vtable for IVector2NaturalMotionAnimationFactory {
    type Vtable = IVector2NaturalMotionAnimationFactory_Vtbl;
}
unsafe impl ::windows::core::Interface for IVector2NaturalMotionAnimationFactory {
    const IID: ::windows::core::GUID =
        ::windows::core::GUID::from_u128(0xe39aead8_80f9_5f64_8644_e9e5646b796f);
}
#[repr(C)]
#[doc(hidden)]
pub struct IVector2NaturalMotionAnimationFactory_Vtbl {
    pub base__: ::windows::core::IInspectable_Vtbl,
}
#[doc(hidden)]
#[repr(transparent)]
pub struct IVector3KeyFrameAnimation(::windows::core::IUnknown);
unsafe impl ::windows::core::Vtable for IVector3KeyFrameAnimation {
    type Vtable = IVector3KeyFrameAnimation_Vtbl;
}
unsafe impl ::windows::core::Interface for IVector3KeyFrameAnimation {
    const IID: ::windows::core::GUID =
        ::windows::core::GUID::from_u128(0xd7da980e_2dde_5dd1_a40c_d6868dd2449e);
}
#[repr(C)]
#[doc(hidden)]
pub struct IVector3KeyFrameAnimation_Vtbl {
    pub base__: ::windows::core::IInspectable_Vtbl,
    pub InsertKeyFrame: unsafe extern "system" fn(
        this: *mut ::core::ffi::c_void,
        normalizedprogresskey: f32,
        value: ::windows::Foundation::Numerics::Vector3,
    ) -> ::windows::core::HRESULT,
    pub InsertKeyFrameWithEasingFunction: unsafe extern "system" fn(
        this: *mut ::core::ffi::c_void,
        normalizedprogresskey: f32,
        value: ::windows::Foundation::Numerics::Vector3,
        easingfunction: *mut ::core::ffi::c_void,
    )
        -> ::windows::core::HRESULT,
}
#[doc(hidden)]
#[repr(transparent)]
pub struct IVector3NaturalMotionAnimation(::windows::core::IUnknown);
unsafe impl ::windows::core::Vtable for IVector3NaturalMotionAnimation {
    type Vtable = IVector3NaturalMotionAnimation_Vtbl;
}
unsafe impl ::windows::core::Interface for IVector3NaturalMotionAnimation {
    const IID: ::windows::core::GUID =
        ::windows::core::GUID::from_u128(0x13feeef2_d2c0_5b72_ad67_983a19b9b783);
}
#[repr(C)]
#[doc(hidden)]
pub struct IVector3NaturalMotionAnimation_Vtbl {
    pub base__: ::windows::core::IInspectable_Vtbl,
    pub FinalValue: unsafe extern "system" fn(
        this: *mut ::core::ffi::c_void,
        result__: *mut *mut ::core::ffi::c_void,
    ) -> ::windows::core::HRESULT,
    pub SetFinalValue: unsafe extern "system" fn(
        this: *mut ::core::ffi::c_void,
        value: *mut ::core::ffi::c_void,
    ) -> ::windows::core::HRESULT,
    pub InitialValue: unsafe extern "system" fn(
        this: *mut ::core::ffi::c_void,
        result__: *mut *mut ::core::ffi::c_void,
    ) -> ::windows::core::HRESULT,
    pub SetInitialValue: unsafe extern "system" fn(
        this: *mut ::core::ffi::c_void,
        value: *mut ::core::ffi::c_void,
    ) -> ::windows::core::HRESULT,
    pub InitialVelocity: unsafe extern "system" fn(
        this: *mut ::core::ffi::c_void,
        result__: *mut ::windows::Foundation::Numerics::Vector3,
    ) -> ::windows::core::HRESULT,
    pub SetInitialVelocity: unsafe extern "system" fn(
        this: *mut ::core::ffi::c_void,
        value: ::windows::Foundation::Numerics::Vector3,
    ) -> ::windows::core::HRESULT,
}
#[doc(hidden)]
#[repr(transparent)]
pub struct IVector3NaturalMotionAnimationFactory(::windows::core::IUnknown);
unsafe impl ::windows::core::Vtable for IVector3NaturalMotionAnimationFactory {
    type Vtable = IVector3NaturalMotionAnimationFactory_Vtbl;
}
unsafe impl ::windows::core::Interface for IVector3NaturalMotionAnimationFactory {
    const IID: ::windows::core::GUID =
        ::windows::core::GUID::from_u128(0x428241cb_be9c_5c2a_939c_ec78aa60bb8a);
}
#[repr(C)]
#[doc(hidden)]
pub struct IVector3NaturalMotionAnimationFactory_Vtbl {
    pub base__: ::windows::core::IInspectable_Vtbl,
}
#[doc(hidden)]
#[repr(transparent)]
pub struct IVector4KeyFrameAnimation(::windows::core::IUnknown);
unsafe impl ::windows::core::Vtable for IVector4KeyFrameAnimation {
    type Vtable = IVector4KeyFrameAnimation_Vtbl;
}
unsafe impl ::windows::core::Interface for IVector4KeyFrameAnimation {
    const IID: ::windows::core::GUID =
        ::windows::core::GUID::from_u128(0x16cea3b9_c5e3_5f6f_b5c7_da29a31ccfc7);
}
#[repr(C)]
#[doc(hidden)]
pub struct IVector4KeyFrameAnimation_Vtbl {
    pub base__: ::windows::core::IInspectable_Vtbl,
    pub InsertKeyFrame: unsafe extern "system" fn(
        this: *mut ::core::ffi::c_void,
        normalizedprogresskey: f32,
        value: ::windows::Foundation::Numerics::Vector4,
    ) -> ::windows::core::HRESULT,
    pub InsertKeyFrameWithEasingFunction: unsafe extern "system" fn(
        this: *mut ::core::ffi::c_void,
        normalizedprogresskey: f32,
        value: ::windows::Foundation::Numerics::Vector4,
        easingfunction: *mut ::core::ffi::c_void,
    )
        -> ::windows::core::HRESULT,
}
#[doc(hidden)]
#[repr(transparent)]
pub struct IVisual(::windows::core::IUnknown);
unsafe impl ::windows::core::Vtable for IVisual {
    type Vtable = IVisual_Vtbl;
}
unsafe impl ::windows::core::Interface for IVisual {
    const IID: ::windows::core::GUID =
        ::windows::core::GUID::from_u128(0xc0eeab6c_c897_5ac6_a1c9_63abd5055b9b);
}
#[repr(C)]
#[doc(hidden)]
pub struct IVisual_Vtbl {
    pub base__: ::windows::core::IInspectable_Vtbl,
    pub AnchorPoint: unsafe extern "system" fn(
        this: *mut ::core::ffi::c_void,
        result__: *mut ::windows::Foundation::Numerics::Vector2,
    ) -> ::windows::core::HRESULT,
    pub SetAnchorPoint: unsafe extern "system" fn(
        this: *mut ::core::ffi::c_void,
        value: ::windows::Foundation::Numerics::Vector2,
    ) -> ::windows::core::HRESULT,
    pub BackfaceVisibility: unsafe extern "system" fn(
        this: *mut ::core::ffi::c_void,
        result__: *mut CompositionBackfaceVisibility,
    ) -> ::windows::core::HRESULT,
    pub SetBackfaceVisibility: unsafe extern "system" fn(
        this: *mut ::core::ffi::c_void,
        value: CompositionBackfaceVisibility,
    ) -> ::windows::core::HRESULT,
    pub BorderMode: unsafe extern "system" fn(
        this: *mut ::core::ffi::c_void,
        result__: *mut CompositionBorderMode,
    ) -> ::windows::core::HRESULT,
    pub SetBorderMode: unsafe extern "system" fn(
        this: *mut ::core::ffi::c_void,
        value: CompositionBorderMode,
    ) -> ::windows::core::HRESULT,
    pub CenterPoint: unsafe extern "system" fn(
        this: *mut ::core::ffi::c_void,
        result__: *mut ::windows::Foundation::Numerics::Vector3,
    ) -> ::windows::core::HRESULT,
    pub SetCenterPoint: unsafe extern "system" fn(
        this: *mut ::core::ffi::c_void,
        value: ::windows::Foundation::Numerics::Vector3,
    ) -> ::windows::core::HRESULT,
    pub Clip: unsafe extern "system" fn(
        this: *mut ::core::ffi::c_void,
        result__: *mut *mut ::core::ffi::c_void,
    ) -> ::windows::core::HRESULT,
    pub SetClip: unsafe extern "system" fn(
        this: *mut ::core::ffi::c_void,
        value: *mut ::core::ffi::c_void,
    ) -> ::windows::core::HRESULT,
    pub CompositeMode: unsafe extern "system" fn(
        this: *mut ::core::ffi::c_void,
        result__: *mut CompositionCompositeMode,
    ) -> ::windows::core::HRESULT,
    pub SetCompositeMode: unsafe extern "system" fn(
        this: *mut ::core::ffi::c_void,
        value: CompositionCompositeMode,
    ) -> ::windows::core::HRESULT,
    pub IsVisible: unsafe extern "system" fn(
        this: *mut ::core::ffi::c_void,
        result__: *mut bool,
    ) -> ::windows::core::HRESULT,
    pub SetIsVisible: unsafe extern "system" fn(
        this: *mut ::core::ffi::c_void,
        value: bool,
    ) -> ::windows::core::HRESULT,
    pub Offset: unsafe extern "system" fn(
        this: *mut ::core::ffi::c_void,
        result__: *mut ::windows::Foundation::Numerics::Vector3,
    ) -> ::windows::core::HRESULT,
    pub SetOffset: unsafe extern "system" fn(
        this: *mut ::core::ffi::c_void,
        value: ::windows::Foundation::Numerics::Vector3,
    ) -> ::windows::core::HRESULT,
    pub Opacity: unsafe extern "system" fn(
        this: *mut ::core::ffi::c_void,
        result__: *mut f32,
    ) -> ::windows::core::HRESULT,
    pub SetOpacity: unsafe extern "system" fn(
        this: *mut ::core::ffi::c_void,
        value: f32,
    ) -> ::windows::core::HRESULT,
    pub Orientation: unsafe extern "system" fn(
        this: *mut ::core::ffi::c_void,
        result__: *mut ::windows::Foundation::Numerics::Quaternion,
    ) -> ::windows::core::HRESULT,
    pub SetOrientation: unsafe extern "system" fn(
        this: *mut ::core::ffi::c_void,
        value: ::windows::Foundation::Numerics::Quaternion,
    ) -> ::windows::core::HRESULT,
    pub Parent: unsafe extern "system" fn(
        this: *mut ::core::ffi::c_void,
        result__: *mut *mut ::core::ffi::c_void,
    ) -> ::windows::core::HRESULT,
    pub RotationAngle: unsafe extern "system" fn(
        this: *mut ::core::ffi::c_void,
        result__: *mut f32,
    ) -> ::windows::core::HRESULT,
    pub SetRotationAngle: unsafe extern "system" fn(
        this: *mut ::core::ffi::c_void,
        value: f32,
    ) -> ::windows::core::HRESULT,
    pub RotationAngleInDegrees: unsafe extern "system" fn(
        this: *mut ::core::ffi::c_void,
        result__: *mut f32,
    ) -> ::windows::core::HRESULT,
    pub SetRotationAngleInDegrees: unsafe extern "system" fn(
        this: *mut ::core::ffi::c_void,
        value: f32,
    ) -> ::windows::core::HRESULT,
    pub RotationAxis: unsafe extern "system" fn(
        this: *mut ::core::ffi::c_void,
        result__: *mut ::windows::Foundation::Numerics::Vector3,
    ) -> ::windows::core::HRESULT,
    pub SetRotationAxis: unsafe extern "system" fn(
        this: *mut ::core::ffi::c_void,
        value: ::windows::Foundation::Numerics::Vector3,
    ) -> ::windows::core::HRESULT,
    pub Scale: unsafe extern "system" fn(
        this: *mut ::core::ffi::c_void,
        result__: *mut ::windows::Foundation::Numerics::Vector3,
    ) -> ::windows::core::HRESULT,
    pub SetScale: unsafe extern "system" fn(
        this: *mut ::core::ffi::c_void,
        value: ::windows::Foundation::Numerics::Vector3,
    ) -> ::windows::core::HRESULT,
    pub Size: unsafe extern "system" fn(
        this: *mut ::core::ffi::c_void,
        result__: *mut ::windows::Foundation::Numerics::Vector2,
    ) -> ::windows::core::HRESULT,
    pub SetSize: unsafe extern "system" fn(
        this: *mut ::core::ffi::c_void,
        value: ::windows::Foundation::Numerics::Vector2,
    ) -> ::windows::core::HRESULT,
    pub TransformMatrix: unsafe extern "system" fn(
        this: *mut ::core::ffi::c_void,
        result__: *mut ::windows::Foundation::Numerics::Matrix4x4,
    ) -> ::windows::core::HRESULT,
    pub SetTransformMatrix: unsafe extern "system" fn(
        this: *mut ::core::ffi::c_void,
        value: ::windows::Foundation::Numerics::Matrix4x4,
    ) -> ::windows::core::HRESULT,
}
#[doc(hidden)]
#[repr(transparent)]
pub struct IVisual2(::windows::core::IUnknown);
unsafe impl ::windows::core::Vtable for IVisual2 {
    type Vtable = IVisual2_Vtbl;
}
unsafe impl ::windows::core::Interface for IVisual2 {
    const IID: ::windows::core::GUID =
        ::windows::core::GUID::from_u128(0x492a7995_0c5c_5993_a283_52e4da3050ee);
}
#[repr(C)]
#[doc(hidden)]
pub struct IVisual2_Vtbl {
    pub base__: ::windows::core::IInspectable_Vtbl,
    pub ParentForTransform: unsafe extern "system" fn(
        this: *mut ::core::ffi::c_void,
        result__: *mut *mut ::core::ffi::c_void,
    ) -> ::windows::core::HRESULT,
    pub SetParentForTransform: unsafe extern "system" fn(
        this: *mut ::core::ffi::c_void,
        value: *mut ::core::ffi::c_void,
    ) -> ::windows::core::HRESULT,
    pub RelativeOffsetAdjustment: unsafe extern "system" fn(
        this: *mut ::core::ffi::c_void,
        result__: *mut ::windows::Foundation::Numerics::Vector3,
    ) -> ::windows::core::HRESULT,
    pub SetRelativeOffsetAdjustment: unsafe extern "system" fn(
        this: *mut ::core::ffi::c_void,
        value: ::windows::Foundation::Numerics::Vector3,
    ) -> ::windows::core::HRESULT,
    pub RelativeSizeAdjustment: unsafe extern "system" fn(
        this: *mut ::core::ffi::c_void,
        result__: *mut ::windows::Foundation::Numerics::Vector2,
    ) -> ::windows::core::HRESULT,
    pub SetRelativeSizeAdjustment: unsafe extern "system" fn(
        this: *mut ::core::ffi::c_void,
        value: ::windows::Foundation::Numerics::Vector2,
    ) -> ::windows::core::HRESULT,
}
#[doc(hidden)]
#[repr(transparent)]
pub struct IVisual3(::windows::core::IUnknown);
unsafe impl ::windows::core::Vtable for IVisual3 {
    type Vtable = IVisual3_Vtbl;
}
unsafe impl ::windows::core::Interface for IVisual3 {
    const IID: ::windows::core::GUID =
        ::windows::core::GUID::from_u128(0x972b70b0_950d_5656_a380_bd4a70775868);
}
#[repr(C)]
#[doc(hidden)]
pub struct IVisual3_Vtbl {
    pub base__: ::windows::core::IInspectable_Vtbl,
    pub IsHitTestVisible: unsafe extern "system" fn(
        this: *mut ::core::ffi::c_void,
        result__: *mut bool,
    ) -> ::windows::core::HRESULT,
    pub SetIsHitTestVisible: unsafe extern "system" fn(
        this: *mut ::core::ffi::c_void,
        value: bool,
    ) -> ::windows::core::HRESULT,
}
#[doc(hidden)]
#[repr(transparent)]
pub struct IVisual4(::windows::core::IUnknown);
unsafe impl ::windows::core::Vtable for IVisual4 {
    type Vtable = IVisual4_Vtbl;
}
unsafe impl ::windows::core::Interface for IVisual4 {
    const IID: ::windows::core::GUID =
        ::windows::core::GUID::from_u128(0x27cb223f_c431_57ac_b61e_d6b7515d579f);
}
#[repr(C)]
#[doc(hidden)]
pub struct IVisual4_Vtbl {
    pub base__: ::windows::core::IInspectable_Vtbl,
    pub IsPixelSnappingEnabled: unsafe extern "system" fn(
        this: *mut ::core::ffi::c_void,
        result__: *mut bool,
    ) -> ::windows::core::HRESULT,
    pub SetIsPixelSnappingEnabled: unsafe extern "system" fn(
        this: *mut ::core::ffi::c_void,
        value: bool,
    ) -> ::windows::core::HRESULT,
}
#[doc(hidden)]
#[repr(transparent)]
pub struct IVisualCollection(::windows::core::IUnknown);
unsafe impl ::windows::core::Vtable for IVisualCollection {
    type Vtable = IVisualCollection_Vtbl;
}
unsafe impl ::windows::core::Interface for IVisualCollection {
    const IID: ::windows::core::GUID =
        ::windows::core::GUID::from_u128(0xd002896d_67d8_5f69_ab70_581fa3bf370f);
}
#[repr(C)]
#[doc(hidden)]
pub struct IVisualCollection_Vtbl {
    pub base__: ::windows::core::IInspectable_Vtbl,
    pub Count: unsafe extern "system" fn(
        this: *mut ::core::ffi::c_void,
        result__: *mut i32,
    ) -> ::windows::core::HRESULT,
    pub InsertAbove: unsafe extern "system" fn(
        this: *mut ::core::ffi::c_void,
        newchild: *mut ::core::ffi::c_void,
        sibling: *mut ::core::ffi::c_void,
    ) -> ::windows::core::HRESULT,
    pub InsertAtBottom: unsafe extern "system" fn(
        this: *mut ::core::ffi::c_void,
        newchild: *mut ::core::ffi::c_void,
    ) -> ::windows::core::HRESULT,
    pub InsertAtTop: unsafe extern "system" fn(
        this: *mut ::core::ffi::c_void,
        newchild: *mut ::core::ffi::c_void,
    ) -> ::windows::core::HRESULT,
    pub InsertBelow: unsafe extern "system" fn(
        this: *mut ::core::ffi::c_void,
        newchild: *mut ::core::ffi::c_void,
        sibling: *mut ::core::ffi::c_void,
    ) -> ::windows::core::HRESULT,
    pub Remove: unsafe extern "system" fn(
        this: *mut ::core::ffi::c_void,
        child: *mut ::core::ffi::c_void,
    ) -> ::windows::core::HRESULT,
    pub RemoveAll:
        unsafe extern "system" fn(this: *mut ::core::ffi::c_void) -> ::windows::core::HRESULT,
}
#[doc = "*Required features: `\"UI_Composition\"`*"]
#[repr(transparent)]
pub struct IVisualElement(::windows::core::IUnknown);
impl IVisualElement {}
::windows::core::interface_hierarchy!(
    IVisualElement,
    ::windows::core::IUnknown,
    ::windows::core::IInspectable
);
impl ::core::clone::Clone for IVisualElement {
    fn clone(&self) -> Self {
        Self(self.0.clone())
    }
}
impl ::core::cmp::PartialEq for IVisualElement {
    fn eq(&self, other: &Self) -> bool {
        self.0 == other.0
    }
}
impl ::core::cmp::Eq for IVisualElement {}
impl ::core::fmt::Debug for IVisualElement {
    fn fmt(&self, f: &mut ::core::fmt::Formatter<'_>) -> ::core::fmt::Result {
        f.debug_tuple("IVisualElement").field(&self.0).finish()
    }
}
unsafe impl ::windows::core::RuntimeType for IVisualElement {
    const SIGNATURE: ::windows::core::ConstBuffer =
        ::windows::core::ConstBuffer::from_slice(b"{2180f1f5-b5d8-4bf6-920a-12006e63efef}");
    type DefaultType = ::core::option::Option<Self>;
    fn from_default(from: &Self::DefaultType) -> ::windows::core::Result<Self> {
        from.as_ref().cloned().ok_or(::windows::core::Error::OK)
    }
}
unsafe impl ::windows::core::Vtable for IVisualElement {
    type Vtable = IVisualElement_Vtbl;
}
unsafe impl ::windows::core::Interface for IVisualElement {
    const IID: ::windows::core::GUID =
        ::windows::core::GUID::from_u128(0x2180f1f5_b5d8_4bf6_920a_12006e63efef);
}
#[repr(C)]
#[doc(hidden)]
pub struct IVisualElement_Vtbl {
    pub base__: ::windows::core::IInspectable_Vtbl,
}
#[doc = "*Required features: `\"UI_Composition\"`*"]
#[repr(transparent)]
pub struct IVisualElement2(::windows::core::IUnknown);
impl IVisualElement2 {
    pub fn GetVisualInternal(&self) -> ::windows::core::Result<Visual> {
        let this = self;
        unsafe {
            let mut result__ = ::core::mem::MaybeUninit::zeroed();
            (::windows::core::Vtable::vtable(this).GetVisualInternal)(
                ::windows::core::Vtable::as_raw(this),
                result__.as_mut_ptr(),
            )
            .from_abi::<Visual>(result__)
        }
    }
}
::windows::core::interface_hierarchy!(
    IVisualElement2,
    ::windows::core::IUnknown,
    ::windows::core::IInspectable
);
impl ::core::clone::Clone for IVisualElement2 {
    fn clone(&self) -> Self {
        Self(self.0.clone())
    }
}
impl ::core::cmp::PartialEq for IVisualElement2 {
    fn eq(&self, other: &Self) -> bool {
        self.0 == other.0
    }
}
impl ::core::cmp::Eq for IVisualElement2 {}
impl ::core::fmt::Debug for IVisualElement2 {
    fn fmt(&self, f: &mut ::core::fmt::Formatter<'_>) -> ::core::fmt::Result {
        f.debug_tuple("IVisualElement2").field(&self.0).finish()
    }
}
unsafe impl ::windows::core::RuntimeType for IVisualElement2 {
    const SIGNATURE: ::windows::core::ConstBuffer =
        ::windows::core::ConstBuffer::from_slice(b"{bc950c8d-1db0-53aa-9dee-34271cd18ce6}");
    type DefaultType = ::core::option::Option<Self>;
    fn from_default(from: &Self::DefaultType) -> ::windows::core::Result<Self> {
        from.as_ref().cloned().ok_or(::windows::core::Error::OK)
    }
}
unsafe impl ::windows::core::Vtable for IVisualElement2 {
    type Vtable = IVisualElement2_Vtbl;
}
unsafe impl ::windows::core::Interface for IVisualElement2 {
    const IID: ::windows::core::GUID =
        ::windows::core::GUID::from_u128(0xbc950c8d_1db0_53aa_9dee_34271cd18ce6);
}
#[repr(C)]
#[doc(hidden)]
pub struct IVisualElement2_Vtbl {
    pub base__: ::windows::core::IInspectable_Vtbl,
    pub GetVisualInternal: unsafe extern "system" fn(
        this: *mut ::core::ffi::c_void,
        result__: *mut *mut ::core::ffi::c_void,
    ) -> ::windows::core::HRESULT,
}
#[doc(hidden)]
#[repr(transparent)]
pub struct IVisualFactory(::windows::core::IUnknown);
unsafe impl ::windows::core::Vtable for IVisualFactory {
    type Vtable = IVisualFactory_Vtbl;
}
unsafe impl ::windows::core::Interface for IVisualFactory {
    const IID: ::windows::core::GUID =
        ::windows::core::GUID::from_u128(0x77bb4668_83fa_5bb5_b78b_5e6fdc3d4038);
}
#[repr(C)]
#[doc(hidden)]
pub struct IVisualFactory_Vtbl {
    pub base__: ::windows::core::IInspectable_Vtbl,
}
#[doc(hidden)]
#[repr(transparent)]
pub struct IVisualUnorderedCollection(::windows::core::IUnknown);
unsafe impl ::windows::core::Vtable for IVisualUnorderedCollection {
    type Vtable = IVisualUnorderedCollection_Vtbl;
}
unsafe impl ::windows::core::Interface for IVisualUnorderedCollection {
    const IID: ::windows::core::GUID =
        ::windows::core::GUID::from_u128(0x4a97216e_793e_54e3_96e8_f9db790119cd);
}
#[repr(C)]
#[doc(hidden)]
pub struct IVisualUnorderedCollection_Vtbl {
    pub base__: ::windows::core::IInspectable_Vtbl,
    pub Count: unsafe extern "system" fn(
        this: *mut ::core::ffi::c_void,
        result__: *mut i32,
    ) -> ::windows::core::HRESULT,
    pub Add: unsafe extern "system" fn(
        this: *mut ::core::ffi::c_void,
        newvisual: *mut ::core::ffi::c_void,
    ) -> ::windows::core::HRESULT,
    pub Remove: unsafe extern "system" fn(
        this: *mut ::core::ffi::c_void,
        visual: *mut ::core::ffi::c_void,
    ) -> ::windows::core::HRESULT,
    pub RemoveAll:
        unsafe extern "system" fn(this: *mut ::core::ffi::c_void) -> ::windows::core::HRESULT,
}
#[doc = "*Required features: `\"UI_Composition\"`*"]
#[repr(transparent)]
pub struct AmbientLight(::windows::core::IUnknown);
impl AmbientLight {
    pub fn Color(&self) -> ::windows::core::Result<::windows::UI::Color> {
        let this = self;
        unsafe {
            let mut result__ = ::core::mem::MaybeUninit::zeroed();
            (::windows::core::Vtable::vtable(this).Color)(
                ::windows::core::Vtable::as_raw(this),
                result__.as_mut_ptr(),
            )
            .from_abi::<::windows::UI::Color>(result__)
        }
    }
    pub fn SetColor(&self, value: ::windows::UI::Color) -> ::windows::core::Result<()> {
        let this = self;
        unsafe {
            (::windows::core::Vtable::vtable(this).SetColor)(
                ::windows::core::Vtable::as_raw(this),
                value,
            )
            .ok()
        }
    }
    pub fn Intensity(&self) -> ::windows::core::Result<f32> {
        let this = &::windows::core::Interface::cast::<IAmbientLight2>(self)?;
        unsafe {
            let mut result__ = ::core::mem::MaybeUninit::zeroed();
            (::windows::core::Vtable::vtable(this).Intensity)(
                ::windows::core::Vtable::as_raw(this),
                result__.as_mut_ptr(),
            )
            .from_abi::<f32>(result__)
        }
    }
    pub fn SetIntensity(&self, value: f32) -> ::windows::core::Result<()> {
        let this = &::windows::core::Interface::cast::<IAmbientLight2>(self)?;
        unsafe {
            (::windows::core::Vtable::vtable(this).SetIntensity)(
                ::windows::core::Vtable::as_raw(this),
                value,
            )
            .ok()
        }
    }
    pub fn PopulatePropertyInfo(
        &self,
        propertyname: &::windows::core::HSTRING,
        propertyinfo: &AnimationPropertyInfo,
    ) -> ::windows::core::Result<()> {
        let this = &::windows::core::Interface::cast::<IAnimationObject>(self)?;
        unsafe {
            (::windows::core::Vtable::vtable(this).PopulatePropertyInfo)(
                ::windows::core::Vtable::as_raw(this),
                ::core::mem::transmute_copy(propertyname),
                ::core::mem::transmute_copy(propertyinfo),
            )
            .ok()
        }
    }
    pub fn Close(&self) -> ::windows::core::Result<()> {
        let this = &::windows::core::Interface::cast::<::windows::Foundation::IClosable>(self)?;
        unsafe {
            (::windows::core::Vtable::vtable(this).Close)(::windows::core::Vtable::as_raw(this))
                .ok()
        }
    }
    pub fn Targets(&self) -> ::windows::core::Result<VisualUnorderedCollection> {
        let this = &::windows::core::Interface::cast::<ICompositionLight>(self)?;
        unsafe {
            let mut result__ = ::core::mem::MaybeUninit::zeroed();
            (::windows::core::Vtable::vtable(this).Targets)(
                ::windows::core::Vtable::as_raw(this),
                result__.as_mut_ptr(),
            )
            .from_abi::<VisualUnorderedCollection>(result__)
        }
    }
    pub fn ExclusionsFromTargets(&self) -> ::windows::core::Result<VisualUnorderedCollection> {
        let this = &::windows::core::Interface::cast::<ICompositionLight2>(self)?;
        unsafe {
            let mut result__ = ::core::mem::MaybeUninit::zeroed();
            (::windows::core::Vtable::vtable(this).ExclusionsFromTargets)(
                ::windows::core::Vtable::as_raw(this),
                result__.as_mut_ptr(),
            )
            .from_abi::<VisualUnorderedCollection>(result__)
        }
    }
    pub fn IsEnabled(&self) -> ::windows::core::Result<bool> {
        let this = &::windows::core::Interface::cast::<ICompositionLight3>(self)?;
        unsafe {
            let mut result__ = ::core::mem::MaybeUninit::zeroed();
            (::windows::core::Vtable::vtable(this).IsEnabled)(
                ::windows::core::Vtable::as_raw(this),
                result__.as_mut_ptr(),
            )
            .from_abi::<bool>(result__)
        }
    }
    pub fn SetIsEnabled(&self, value: bool) -> ::windows::core::Result<()> {
        let this = &::windows::core::Interface::cast::<ICompositionLight3>(self)?;
        unsafe {
            (::windows::core::Vtable::vtable(this).SetIsEnabled)(
                ::windows::core::Vtable::as_raw(this),
                value,
            )
            .ok()
        }
    }
    pub fn Compositor(&self) -> ::windows::core::Result<Compositor> {
        let this = &::windows::core::Interface::cast::<ICompositionObject>(self)?;
        unsafe {
            let mut result__ = ::core::mem::MaybeUninit::zeroed();
            (::windows::core::Vtable::vtable(this).Compositor)(
                ::windows::core::Vtable::as_raw(this),
                result__.as_mut_ptr(),
            )
            .from_abi::<Compositor>(result__)
        }
    }
    pub fn Properties(&self) -> ::windows::core::Result<CompositionPropertySet> {
        let this = &::windows::core::Interface::cast::<ICompositionObject>(self)?;
        unsafe {
            let mut result__ = ::core::mem::MaybeUninit::zeroed();
            (::windows::core::Vtable::vtable(this).Properties)(
                ::windows::core::Vtable::as_raw(this),
                result__.as_mut_ptr(),
            )
            .from_abi::<CompositionPropertySet>(result__)
        }
    }
    pub fn StartAnimation<'a, P0>(
        &self,
        propertyname: &::windows::core::HSTRING,
        animation: P0,
    ) -> ::windows::core::Result<()>
    where
        P0: ::std::convert::Into<::windows::core::InParam<'a, CompositionAnimation>>,
    {
        let this = &::windows::core::Interface::cast::<ICompositionObject>(self)?;
        unsafe {
            (::windows::core::Vtable::vtable(this).StartAnimation)(
                ::windows::core::Vtable::as_raw(this),
                ::core::mem::transmute_copy(propertyname),
                animation.into().abi(),
            )
            .ok()
        }
    }
    pub fn StopAnimation(
        &self,
        propertyname: &::windows::core::HSTRING,
    ) -> ::windows::core::Result<()> {
        let this = &::windows::core::Interface::cast::<ICompositionObject>(self)?;
        unsafe {
            (::windows::core::Vtable::vtable(this).StopAnimation)(
                ::windows::core::Vtable::as_raw(this),
                ::core::mem::transmute_copy(propertyname),
            )
            .ok()
        }
    }
    pub fn Comment(&self) -> ::windows::core::Result<::windows::core::HSTRING> {
        let this = &::windows::core::Interface::cast::<ICompositionObject2>(self)?;
        unsafe {
            let mut result__ = ::core::mem::MaybeUninit::zeroed();
            (::windows::core::Vtable::vtable(this).Comment)(
                ::windows::core::Vtable::as_raw(this),
                result__.as_mut_ptr(),
            )
            .from_abi::<::windows::core::HSTRING>(result__)
        }
    }
    pub fn SetComment(&self, value: &::windows::core::HSTRING) -> ::windows::core::Result<()> {
        let this = &::windows::core::Interface::cast::<ICompositionObject2>(self)?;
        unsafe {
            (::windows::core::Vtable::vtable(this).SetComment)(
                ::windows::core::Vtable::as_raw(this),
                ::core::mem::transmute_copy(value),
            )
            .ok()
        }
    }
    pub fn ImplicitAnimations(&self) -> ::windows::core::Result<ImplicitAnimationCollection> {
        let this = &::windows::core::Interface::cast::<ICompositionObject2>(self)?;
        unsafe {
            let mut result__ = ::core::mem::MaybeUninit::zeroed();
            (::windows::core::Vtable::vtable(this).ImplicitAnimations)(
                ::windows::core::Vtable::as_raw(this),
                result__.as_mut_ptr(),
            )
            .from_abi::<ImplicitAnimationCollection>(result__)
        }
    }
    pub fn SetImplicitAnimations(
        &self,
        value: &ImplicitAnimationCollection,
    ) -> ::windows::core::Result<()> {
        let this = &::windows::core::Interface::cast::<ICompositionObject2>(self)?;
        unsafe {
            (::windows::core::Vtable::vtable(this).SetImplicitAnimations)(
                ::windows::core::Vtable::as_raw(this),
                ::core::mem::transmute_copy(value),
            )
            .ok()
        }
    }
    pub fn StartAnimationGroup<'a, P0, E0>(&self, value: P0) -> ::windows::core::Result<()>
    where
        P0: ::std::convert::TryInto<
            ::windows::core::InParam<'a, ICompositionAnimationBase>,
            Error = E0,
        >,
        E0: ::std::convert::Into<::windows::core::Error>,
    {
        let this = &::windows::core::Interface::cast::<ICompositionObject2>(self)?;
        unsafe {
            (::windows::core::Vtable::vtable(this).StartAnimationGroup)(
                ::windows::core::Vtable::as_raw(this),
                value.try_into().map_err(|e| e.into())?.abi(),
            )
            .ok()
        }
    }
    pub fn StopAnimationGroup<'a, P0, E0>(&self, value: P0) -> ::windows::core::Result<()>
    where
        P0: ::std::convert::TryInto<
            ::windows::core::InParam<'a, ICompositionAnimationBase>,
            Error = E0,
        >,
        E0: ::std::convert::Into<::windows::core::Error>,
    {
        let this = &::windows::core::Interface::cast::<ICompositionObject2>(self)?;
        unsafe {
            (::windows::core::Vtable::vtable(this).StopAnimationGroup)(
                ::windows::core::Vtable::as_raw(this),
                value.try_into().map_err(|e| e.into())?.abi(),
            )
            .ok()
        }
    }
    #[doc = "*Required features: `\"UI_Dispatching\"`*"]
    #[cfg(feature = "UI_Dispatching")]
    pub fn DispatcherQueue(&self) -> ::windows::core::Result<super::Dispatching::DispatcherQueue> {
        let this = &::windows::core::Interface::cast::<ICompositionObject3>(self)?;
        unsafe {
            let mut result__ = ::core::mem::MaybeUninit::zeroed();
            (::windows::core::Vtable::vtable(this).DispatcherQueue)(
                ::windows::core::Vtable::as_raw(this),
                result__.as_mut_ptr(),
            )
            .from_abi::<super::Dispatching::DispatcherQueue>(result__)
        }
    }
    pub fn TryGetAnimationController(
        &self,
        propertyname: &::windows::core::HSTRING,
    ) -> ::windows::core::Result<AnimationController> {
        let this = &::windows::core::Interface::cast::<ICompositionObject4>(self)?;
        unsafe {
            let mut result__ = ::core::mem::MaybeUninit::zeroed();
            (::windows::core::Vtable::vtable(this).TryGetAnimationController)(
                ::windows::core::Vtable::as_raw(this),
                ::core::mem::transmute_copy(propertyname),
                result__.as_mut_ptr(),
            )
            .from_abi::<AnimationController>(result__)
        }
    }
    pub fn StartAnimationWithController<'a, P0>(
        &self,
        propertyname: &::windows::core::HSTRING,
        animation: P0,
        animationcontroller: &AnimationController,
    ) -> ::windows::core::Result<()>
    where
        P0: ::std::convert::Into<::windows::core::InParam<'a, CompositionAnimation>>,
    {
        let this = &::windows::core::Interface::cast::<ICompositionObject5>(self)?;
        unsafe {
            (::windows::core::Vtable::vtable(this).StartAnimationWithController)(
                ::windows::core::Vtable::as_raw(this),
                ::core::mem::transmute_copy(propertyname),
                animation.into().abi(),
                ::core::mem::transmute_copy(animationcontroller),
            )
            .ok()
        }
    }
}
impl ::core::clone::Clone for AmbientLight {
    fn clone(&self) -> Self {
        Self(self.0.clone())
    }
}
impl ::core::cmp::PartialEq for AmbientLight {
    fn eq(&self, other: &Self) -> bool {
        self.0 == other.0
    }
}
impl ::core::cmp::Eq for AmbientLight {}
impl ::core::fmt::Debug for AmbientLight {
    fn fmt(&self, f: &mut ::core::fmt::Formatter<'_>) -> ::core::fmt::Result {
        f.debug_tuple("AmbientLight").field(&self.0).finish()
    }
}
unsafe impl ::windows::core::RuntimeType for AmbientLight {
    const SIGNATURE: ::windows::core::ConstBuffer = ::windows::core::ConstBuffer::from_slice(
        b"rc(Microsoft.UI.Composition.AmbientLight;{4540525e-b70d-5a14-bbfa-63bef42313c7})",
    );
    type DefaultType = ::core::option::Option<Self>;
    fn from_default(from: &Self::DefaultType) -> ::windows::core::Result<Self> {
        from.as_ref().cloned().ok_or(::windows::core::Error::OK)
    }
}
unsafe impl ::windows::core::Vtable for AmbientLight {
    type Vtable = IAmbientLight_Vtbl;
}
unsafe impl ::windows::core::Interface for AmbientLight {
    const IID: ::windows::core::GUID = <IAmbientLight as ::windows::core::Interface>::IID;
}
impl ::windows::core::RuntimeName for AmbientLight {
    const NAME: &'static str = "Microsoft.UI.Composition.AmbientLight";
}
::windows::core::interface_hierarchy!(
    AmbientLight,
    ::windows::core::IUnknown,
    ::windows::core::IInspectable
);
impl ::core::convert::TryFrom<AmbientLight> for IAnimationObject {
    type Error = ::windows::core::Error;
    fn try_from(value: AmbientLight) -> ::windows::core::Result<Self> {
        ::core::convert::TryFrom::try_from(&value)
    }
}
impl ::core::convert::TryFrom<&AmbientLight> for IAnimationObject {
    type Error = ::windows::core::Error;
    fn try_from(value: &AmbientLight) -> ::windows::core::Result<Self> {
        ::windows::core::Interface::cast(value)
    }
}
impl<'a> ::core::convert::TryFrom<&AmbientLight>
    for ::windows::core::InParam<'a, IAnimationObject>
{
    type Error = ::windows::core::Error;
    fn try_from(value: &AmbientLight) -> ::windows::core::Result<Self> {
        let item = ::std::convert::TryInto::try_into(value)?;
        Ok(::windows::core::InParam::owned(item))
    }
}
impl ::core::convert::TryFrom<AmbientLight> for ::windows::Foundation::IClosable {
    type Error = ::windows::core::Error;
    fn try_from(value: AmbientLight) -> ::windows::core::Result<Self> {
        ::core::convert::TryFrom::try_from(&value)
    }
}
impl ::core::convert::TryFrom<&AmbientLight> for ::windows::Foundation::IClosable {
    type Error = ::windows::core::Error;
    fn try_from(value: &AmbientLight) -> ::windows::core::Result<Self> {
        ::windows::core::Interface::cast(value)
    }
}
impl<'a> ::core::convert::TryFrom<&AmbientLight>
    for ::windows::core::InParam<'a, ::windows::Foundation::IClosable>
{
    type Error = ::windows::core::Error;
    fn try_from(value: &AmbientLight) -> ::windows::core::Result<Self> {
        let item = ::std::convert::TryInto::try_into(value)?;
        Ok(::windows::core::InParam::owned(item))
    }
}
impl ::core::convert::From<AmbientLight> for CompositionLight {
    fn from(value: AmbientLight) -> Self {
        ::core::convert::From::from(&value)
    }
}
impl ::core::convert::From<&AmbientLight> for CompositionLight {
    fn from(value: &AmbientLight) -> Self {
        ::windows::core::Interface::cast(value).unwrap()
    }
}
impl<'a> ::core::convert::From<&AmbientLight> for ::windows::core::InParam<'a, CompositionLight> {
    fn from(value: &AmbientLight) -> Self {
        ::windows::core::InParam::owned(value.into())
    }
}
impl ::core::convert::From<AmbientLight> for CompositionObject {
    fn from(value: AmbientLight) -> Self {
        ::core::convert::From::from(&value)
    }
}
impl ::core::convert::From<&AmbientLight> for CompositionObject {
    fn from(value: &AmbientLight) -> Self {
        ::windows::core::Interface::cast(value).unwrap()
    }
}
impl<'a> ::core::convert::From<&AmbientLight> for ::windows::core::InParam<'a, CompositionObject> {
    fn from(value: &AmbientLight) -> Self {
        ::windows::core::InParam::owned(value.into())
    }
}
unsafe impl ::core::marker::Send for AmbientLight {}
unsafe impl ::core::marker::Sync for AmbientLight {}
#[doc = "*Required features: `\"UI_Composition\"`*"]
#[repr(transparent)]
pub struct AnimationController(::windows::core::IUnknown);
impl AnimationController {
    pub fn PlaybackRate(&self) -> ::windows::core::Result<f32> {
        let this = self;
        unsafe {
            let mut result__ = ::core::mem::MaybeUninit::zeroed();
            (::windows::core::Vtable::vtable(this).PlaybackRate)(
                ::windows::core::Vtable::as_raw(this),
                result__.as_mut_ptr(),
            )
            .from_abi::<f32>(result__)
        }
    }
    pub fn SetPlaybackRate(&self, value: f32) -> ::windows::core::Result<()> {
        let this = self;
        unsafe {
            (::windows::core::Vtable::vtable(this).SetPlaybackRate)(
                ::windows::core::Vtable::as_raw(this),
                value,
            )
            .ok()
        }
    }
    pub fn Progress(&self) -> ::windows::core::Result<f32> {
        let this = self;
        unsafe {
            let mut result__ = ::core::mem::MaybeUninit::zeroed();
            (::windows::core::Vtable::vtable(this).Progress)(
                ::windows::core::Vtable::as_raw(this),
                result__.as_mut_ptr(),
            )
            .from_abi::<f32>(result__)
        }
    }
    pub fn SetProgress(&self, value: f32) -> ::windows::core::Result<()> {
        let this = self;
        unsafe {
            (::windows::core::Vtable::vtable(this).SetProgress)(
                ::windows::core::Vtable::as_raw(this),
                value,
            )
            .ok()
        }
    }
    pub fn ProgressBehavior(&self) -> ::windows::core::Result<AnimationControllerProgressBehavior> {
        let this = self;
        unsafe {
            let mut result__ = ::core::mem::MaybeUninit::zeroed();
            (::windows::core::Vtable::vtable(this).ProgressBehavior)(
                ::windows::core::Vtable::as_raw(this),
                result__.as_mut_ptr(),
            )
            .from_abi::<AnimationControllerProgressBehavior>(result__)
        }
    }
    pub fn SetProgressBehavior(
        &self,
        value: AnimationControllerProgressBehavior,
    ) -> ::windows::core::Result<()> {
        let this = self;
        unsafe {
            (::windows::core::Vtable::vtable(this).SetProgressBehavior)(
                ::windows::core::Vtable::as_raw(this),
                value,
            )
            .ok()
        }
    }
    pub fn Pause(&self) -> ::windows::core::Result<()> {
        let this = self;
        unsafe {
            (::windows::core::Vtable::vtable(this).Pause)(::windows::core::Vtable::as_raw(this))
                .ok()
        }
    }
    pub fn Resume(&self) -> ::windows::core::Result<()> {
        let this = self;
        unsafe {
            (::windows::core::Vtable::vtable(this).Resume)(::windows::core::Vtable::as_raw(this))
                .ok()
        }
    }
    pub fn MaxPlaybackRate() -> ::windows::core::Result<f32> {
        Self::IAnimationControllerStatics(|this| unsafe {
            let mut result__ = ::core::mem::MaybeUninit::zeroed();
            (::windows::core::Vtable::vtable(this).MaxPlaybackRate)(
                ::windows::core::Vtable::as_raw(this),
                result__.as_mut_ptr(),
            )
            .from_abi::<f32>(result__)
        })
    }
    pub fn MinPlaybackRate() -> ::windows::core::Result<f32> {
        Self::IAnimationControllerStatics(|this| unsafe {
            let mut result__ = ::core::mem::MaybeUninit::zeroed();
            (::windows::core::Vtable::vtable(this).MinPlaybackRate)(
                ::windows::core::Vtable::as_raw(this),
                result__.as_mut_ptr(),
            )
            .from_abi::<f32>(result__)
        })
    }
    pub fn PopulatePropertyInfo(
        &self,
        propertyname: &::windows::core::HSTRING,
        propertyinfo: &AnimationPropertyInfo,
    ) -> ::windows::core::Result<()> {
        let this = &::windows::core::Interface::cast::<IAnimationObject>(self)?;
        unsafe {
            (::windows::core::Vtable::vtable(this).PopulatePropertyInfo)(
                ::windows::core::Vtable::as_raw(this),
                ::core::mem::transmute_copy(propertyname),
                ::core::mem::transmute_copy(propertyinfo),
            )
            .ok()
        }
    }
    pub fn Close(&self) -> ::windows::core::Result<()> {
        let this = &::windows::core::Interface::cast::<::windows::Foundation::IClosable>(self)?;
        unsafe {
            (::windows::core::Vtable::vtable(this).Close)(::windows::core::Vtable::as_raw(this))
                .ok()
        }
    }
    pub fn Compositor(&self) -> ::windows::core::Result<Compositor> {
        let this = &::windows::core::Interface::cast::<ICompositionObject>(self)?;
        unsafe {
            let mut result__ = ::core::mem::MaybeUninit::zeroed();
            (::windows::core::Vtable::vtable(this).Compositor)(
                ::windows::core::Vtable::as_raw(this),
                result__.as_mut_ptr(),
            )
            .from_abi::<Compositor>(result__)
        }
    }
    pub fn Properties(&self) -> ::windows::core::Result<CompositionPropertySet> {
        let this = &::windows::core::Interface::cast::<ICompositionObject>(self)?;
        unsafe {
            let mut result__ = ::core::mem::MaybeUninit::zeroed();
            (::windows::core::Vtable::vtable(this).Properties)(
                ::windows::core::Vtable::as_raw(this),
                result__.as_mut_ptr(),
            )
            .from_abi::<CompositionPropertySet>(result__)
        }
    }
    pub fn StartAnimation<'a, P0>(
        &self,
        propertyname: &::windows::core::HSTRING,
        animation: P0,
    ) -> ::windows::core::Result<()>
    where
        P0: ::std::convert::Into<::windows::core::InParam<'a, CompositionAnimation>>,
    {
        let this = &::windows::core::Interface::cast::<ICompositionObject>(self)?;
        unsafe {
            (::windows::core::Vtable::vtable(this).StartAnimation)(
                ::windows::core::Vtable::as_raw(this),
                ::core::mem::transmute_copy(propertyname),
                animation.into().abi(),
            )
            .ok()
        }
    }
    pub fn StopAnimation(
        &self,
        propertyname: &::windows::core::HSTRING,
    ) -> ::windows::core::Result<()> {
        let this = &::windows::core::Interface::cast::<ICompositionObject>(self)?;
        unsafe {
            (::windows::core::Vtable::vtable(this).StopAnimation)(
                ::windows::core::Vtable::as_raw(this),
                ::core::mem::transmute_copy(propertyname),
            )
            .ok()
        }
    }
    pub fn Comment(&self) -> ::windows::core::Result<::windows::core::HSTRING> {
        let this = &::windows::core::Interface::cast::<ICompositionObject2>(self)?;
        unsafe {
            let mut result__ = ::core::mem::MaybeUninit::zeroed();
            (::windows::core::Vtable::vtable(this).Comment)(
                ::windows::core::Vtable::as_raw(this),
                result__.as_mut_ptr(),
            )
            .from_abi::<::windows::core::HSTRING>(result__)
        }
    }
    pub fn SetComment(&self, value: &::windows::core::HSTRING) -> ::windows::core::Result<()> {
        let this = &::windows::core::Interface::cast::<ICompositionObject2>(self)?;
        unsafe {
            (::windows::core::Vtable::vtable(this).SetComment)(
                ::windows::core::Vtable::as_raw(this),
                ::core::mem::transmute_copy(value),
            )
            .ok()
        }
    }
    pub fn ImplicitAnimations(&self) -> ::windows::core::Result<ImplicitAnimationCollection> {
        let this = &::windows::core::Interface::cast::<ICompositionObject2>(self)?;
        unsafe {
            let mut result__ = ::core::mem::MaybeUninit::zeroed();
            (::windows::core::Vtable::vtable(this).ImplicitAnimations)(
                ::windows::core::Vtable::as_raw(this),
                result__.as_mut_ptr(),
            )
            .from_abi::<ImplicitAnimationCollection>(result__)
        }
    }
    pub fn SetImplicitAnimations(
        &self,
        value: &ImplicitAnimationCollection,
    ) -> ::windows::core::Result<()> {
        let this = &::windows::core::Interface::cast::<ICompositionObject2>(self)?;
        unsafe {
            (::windows::core::Vtable::vtable(this).SetImplicitAnimations)(
                ::windows::core::Vtable::as_raw(this),
                ::core::mem::transmute_copy(value),
            )
            .ok()
        }
    }
    pub fn StartAnimationGroup<'a, P0, E0>(&self, value: P0) -> ::windows::core::Result<()>
    where
        P0: ::std::convert::TryInto<
            ::windows::core::InParam<'a, ICompositionAnimationBase>,
            Error = E0,
        >,
        E0: ::std::convert::Into<::windows::core::Error>,
    {
        let this = &::windows::core::Interface::cast::<ICompositionObject2>(self)?;
        unsafe {
            (::windows::core::Vtable::vtable(this).StartAnimationGroup)(
                ::windows::core::Vtable::as_raw(this),
                value.try_into().map_err(|e| e.into())?.abi(),
            )
            .ok()
        }
    }
    pub fn StopAnimationGroup<'a, P0, E0>(&self, value: P0) -> ::windows::core::Result<()>
    where
        P0: ::std::convert::TryInto<
            ::windows::core::InParam<'a, ICompositionAnimationBase>,
            Error = E0,
        >,
        E0: ::std::convert::Into<::windows::core::Error>,
    {
        let this = &::windows::core::Interface::cast::<ICompositionObject2>(self)?;
        unsafe {
            (::windows::core::Vtable::vtable(this).StopAnimationGroup)(
                ::windows::core::Vtable::as_raw(this),
                value.try_into().map_err(|e| e.into())?.abi(),
            )
            .ok()
        }
    }
    #[doc = "*Required features: `\"UI_Dispatching\"`*"]
    #[cfg(feature = "UI_Dispatching")]
    pub fn DispatcherQueue(&self) -> ::windows::core::Result<super::Dispatching::DispatcherQueue> {
        let this = &::windows::core::Interface::cast::<ICompositionObject3>(self)?;
        unsafe {
            let mut result__ = ::core::mem::MaybeUninit::zeroed();
            (::windows::core::Vtable::vtable(this).DispatcherQueue)(
                ::windows::core::Vtable::as_raw(this),
                result__.as_mut_ptr(),
            )
            .from_abi::<super::Dispatching::DispatcherQueue>(result__)
        }
    }
    pub fn TryGetAnimationController(
        &self,
        propertyname: &::windows::core::HSTRING,
    ) -> ::windows::core::Result<AnimationController> {
        let this = &::windows::core::Interface::cast::<ICompositionObject4>(self)?;
        unsafe {
            let mut result__ = ::core::mem::MaybeUninit::zeroed();
            (::windows::core::Vtable::vtable(this).TryGetAnimationController)(
                ::windows::core::Vtable::as_raw(this),
                ::core::mem::transmute_copy(propertyname),
                result__.as_mut_ptr(),
            )
            .from_abi::<AnimationController>(result__)
        }
    }
    pub fn StartAnimationWithController<'a, P0>(
        &self,
        propertyname: &::windows::core::HSTRING,
        animation: P0,
        animationcontroller: &AnimationController,
    ) -> ::windows::core::Result<()>
    where
        P0: ::std::convert::Into<::windows::core::InParam<'a, CompositionAnimation>>,
    {
        let this = &::windows::core::Interface::cast::<ICompositionObject5>(self)?;
        unsafe {
            (::windows::core::Vtable::vtable(this).StartAnimationWithController)(
                ::windows::core::Vtable::as_raw(this),
                ::core::mem::transmute_copy(propertyname),
                animation.into().abi(),
                ::core::mem::transmute_copy(animationcontroller),
            )
            .ok()
        }
    }
    #[doc(hidden)]
    pub fn IAnimationControllerStatics<
        R,
        F: FnOnce(&IAnimationControllerStatics) -> ::windows::core::Result<R>,
    >(
        callback: F,
    ) -> ::windows::core::Result<R> {
        static SHARED: ::windows::core::FactoryCache<
            AnimationController,
            IAnimationControllerStatics,
        > = ::windows::core::FactoryCache::new();
        SHARED.call(callback)
    }
}
impl ::core::clone::Clone for AnimationController {
    fn clone(&self) -> Self {
        Self(self.0.clone())
    }
}
impl ::core::cmp::PartialEq for AnimationController {
    fn eq(&self, other: &Self) -> bool {
        self.0 == other.0
    }
}
impl ::core::cmp::Eq for AnimationController {}
impl ::core::fmt::Debug for AnimationController {
    fn fmt(&self, f: &mut ::core::fmt::Formatter<'_>) -> ::core::fmt::Result {
        f.debug_tuple("AnimationController").field(&self.0).finish()
    }
}
unsafe impl ::windows::core::RuntimeType for AnimationController {
    const SIGNATURE: ::windows::core::ConstBuffer = ::windows::core::ConstBuffer::from_slice(
        b"rc(Microsoft.UI.Composition.AnimationController;{bd0f88a8-a415-5322-8c3d-1a6d9192754f})",
    );
    type DefaultType = ::core::option::Option<Self>;
    fn from_default(from: &Self::DefaultType) -> ::windows::core::Result<Self> {
        from.as_ref().cloned().ok_or(::windows::core::Error::OK)
    }
}
unsafe impl ::windows::core::Vtable for AnimationController {
    type Vtable = IAnimationController_Vtbl;
}
unsafe impl ::windows::core::Interface for AnimationController {
    const IID: ::windows::core::GUID = <IAnimationController as ::windows::core::Interface>::IID;
}
impl ::windows::core::RuntimeName for AnimationController {
    const NAME: &'static str = "Microsoft.UI.Composition.AnimationController";
}
::windows::core::interface_hierarchy!(
    AnimationController,
    ::windows::core::IUnknown,
    ::windows::core::IInspectable
);
impl ::core::convert::TryFrom<AnimationController> for IAnimationObject {
    type Error = ::windows::core::Error;
    fn try_from(value: AnimationController) -> ::windows::core::Result<Self> {
        ::core::convert::TryFrom::try_from(&value)
    }
}
impl ::core::convert::TryFrom<&AnimationController> for IAnimationObject {
    type Error = ::windows::core::Error;
    fn try_from(value: &AnimationController) -> ::windows::core::Result<Self> {
        ::windows::core::Interface::cast(value)
    }
}
impl<'a> ::core::convert::TryFrom<&AnimationController>
    for ::windows::core::InParam<'a, IAnimationObject>
{
    type Error = ::windows::core::Error;
    fn try_from(value: &AnimationController) -> ::windows::core::Result<Self> {
        let item = ::std::convert::TryInto::try_into(value)?;
        Ok(::windows::core::InParam::owned(item))
    }
}
impl ::core::convert::TryFrom<AnimationController> for ::windows::Foundation::IClosable {
    type Error = ::windows::core::Error;
    fn try_from(value: AnimationController) -> ::windows::core::Result<Self> {
        ::core::convert::TryFrom::try_from(&value)
    }
}
impl ::core::convert::TryFrom<&AnimationController> for ::windows::Foundation::IClosable {
    type Error = ::windows::core::Error;
    fn try_from(value: &AnimationController) -> ::windows::core::Result<Self> {
        ::windows::core::Interface::cast(value)
    }
}
impl<'a> ::core::convert::TryFrom<&AnimationController>
    for ::windows::core::InParam<'a, ::windows::Foundation::IClosable>
{
    type Error = ::windows::core::Error;
    fn try_from(value: &AnimationController) -> ::windows::core::Result<Self> {
        let item = ::std::convert::TryInto::try_into(value)?;
        Ok(::windows::core::InParam::owned(item))
    }
}
impl ::core::convert::From<AnimationController> for CompositionObject {
    fn from(value: AnimationController) -> Self {
        ::core::convert::From::from(&value)
    }
}
impl ::core::convert::From<&AnimationController> for CompositionObject {
    fn from(value: &AnimationController) -> Self {
        ::windows::core::Interface::cast(value).unwrap()
    }
}
impl<'a> ::core::convert::From<&AnimationController>
    for ::windows::core::InParam<'a, CompositionObject>
{
    fn from(value: &AnimationController) -> Self {
        ::windows::core::InParam::owned(value.into())
    }
}
unsafe impl ::core::marker::Send for AnimationController {}
unsafe impl ::core::marker::Sync for AnimationController {}
#[doc = "*Required features: `\"UI_Composition\"`*"]
#[repr(transparent)]
pub struct AnimationPropertyInfo(::windows::core::IUnknown);
impl AnimationPropertyInfo {
    pub fn PopulatePropertyInfo(
        &self,
        propertyname: &::windows::core::HSTRING,
        propertyinfo: &AnimationPropertyInfo,
    ) -> ::windows::core::Result<()> {
        let this = &::windows::core::Interface::cast::<IAnimationObject>(self)?;
        unsafe {
            (::windows::core::Vtable::vtable(this).PopulatePropertyInfo)(
                ::windows::core::Vtable::as_raw(this),
                ::core::mem::transmute_copy(propertyname),
                ::core::mem::transmute_copy(propertyinfo),
            )
            .ok()
        }
    }
    pub fn AccessMode(&self) -> ::windows::core::Result<AnimationPropertyAccessMode> {
        let this = self;
        unsafe {
            let mut result__ = ::core::mem::MaybeUninit::zeroed();
            (::windows::core::Vtable::vtable(this).AccessMode)(
                ::windows::core::Vtable::as_raw(this),
                result__.as_mut_ptr(),
            )
            .from_abi::<AnimationPropertyAccessMode>(result__)
        }
    }
    pub fn SetAccessMode(&self, value: AnimationPropertyAccessMode) -> ::windows::core::Result<()> {
        let this = self;
        unsafe {
            (::windows::core::Vtable::vtable(this).SetAccessMode)(
                ::windows::core::Vtable::as_raw(this),
                value,
            )
            .ok()
        }
    }
    pub fn GetResolvedCompositionObject(&self) -> ::windows::core::Result<CompositionObject> {
        let this = &::windows::core::Interface::cast::<IAnimationPropertyInfo2>(self)?;
        unsafe {
            let mut result__ = ::core::mem::MaybeUninit::zeroed();
            (::windows::core::Vtable::vtable(this).GetResolvedCompositionObject)(
                ::windows::core::Vtable::as_raw(this),
                result__.as_mut_ptr(),
            )
            .from_abi::<CompositionObject>(result__)
        }
    }
    pub fn GetResolvedCompositionObjectProperty(
        &self,
    ) -> ::windows::core::Result<::windows::core::HSTRING> {
        let this = &::windows::core::Interface::cast::<IAnimationPropertyInfo2>(self)?;
        unsafe {
            let mut result__ = ::core::mem::MaybeUninit::zeroed();
            (::windows::core::Vtable::vtable(this).GetResolvedCompositionObjectProperty)(
                ::windows::core::Vtable::as_raw(this),
                result__.as_mut_ptr(),
            )
            .from_abi::<::windows::core::HSTRING>(result__)
        }
    }
    pub fn Close(&self) -> ::windows::core::Result<()> {
        let this = &::windows::core::Interface::cast::<::windows::Foundation::IClosable>(self)?;
        unsafe {
            (::windows::core::Vtable::vtable(this).Close)(::windows::core::Vtable::as_raw(this))
                .ok()
        }
    }
    pub fn Compositor(&self) -> ::windows::core::Result<Compositor> {
        let this = &::windows::core::Interface::cast::<ICompositionObject>(self)?;
        unsafe {
            let mut result__ = ::core::mem::MaybeUninit::zeroed();
            (::windows::core::Vtable::vtable(this).Compositor)(
                ::windows::core::Vtable::as_raw(this),
                result__.as_mut_ptr(),
            )
            .from_abi::<Compositor>(result__)
        }
    }
    pub fn Properties(&self) -> ::windows::core::Result<CompositionPropertySet> {
        let this = &::windows::core::Interface::cast::<ICompositionObject>(self)?;
        unsafe {
            let mut result__ = ::core::mem::MaybeUninit::zeroed();
            (::windows::core::Vtable::vtable(this).Properties)(
                ::windows::core::Vtable::as_raw(this),
                result__.as_mut_ptr(),
            )
            .from_abi::<CompositionPropertySet>(result__)
        }
    }
    pub fn StartAnimation<'a, P0>(
        &self,
        propertyname: &::windows::core::HSTRING,
        animation: P0,
    ) -> ::windows::core::Result<()>
    where
        P0: ::std::convert::Into<::windows::core::InParam<'a, CompositionAnimation>>,
    {
        let this = &::windows::core::Interface::cast::<ICompositionObject>(self)?;
        unsafe {
            (::windows::core::Vtable::vtable(this).StartAnimation)(
                ::windows::core::Vtable::as_raw(this),
                ::core::mem::transmute_copy(propertyname),
                animation.into().abi(),
            )
            .ok()
        }
    }
    pub fn StopAnimation(
        &self,
        propertyname: &::windows::core::HSTRING,
    ) -> ::windows::core::Result<()> {
        let this = &::windows::core::Interface::cast::<ICompositionObject>(self)?;
        unsafe {
            (::windows::core::Vtable::vtable(this).StopAnimation)(
                ::windows::core::Vtable::as_raw(this),
                ::core::mem::transmute_copy(propertyname),
            )
            .ok()
        }
    }
    pub fn Comment(&self) -> ::windows::core::Result<::windows::core::HSTRING> {
        let this = &::windows::core::Interface::cast::<ICompositionObject2>(self)?;
        unsafe {
            let mut result__ = ::core::mem::MaybeUninit::zeroed();
            (::windows::core::Vtable::vtable(this).Comment)(
                ::windows::core::Vtable::as_raw(this),
                result__.as_mut_ptr(),
            )
            .from_abi::<::windows::core::HSTRING>(result__)
        }
    }
    pub fn SetComment(&self, value: &::windows::core::HSTRING) -> ::windows::core::Result<()> {
        let this = &::windows::core::Interface::cast::<ICompositionObject2>(self)?;
        unsafe {
            (::windows::core::Vtable::vtable(this).SetComment)(
                ::windows::core::Vtable::as_raw(this),
                ::core::mem::transmute_copy(value),
            )
            .ok()
        }
    }
    pub fn ImplicitAnimations(&self) -> ::windows::core::Result<ImplicitAnimationCollection> {
        let this = &::windows::core::Interface::cast::<ICompositionObject2>(self)?;
        unsafe {
            let mut result__ = ::core::mem::MaybeUninit::zeroed();
            (::windows::core::Vtable::vtable(this).ImplicitAnimations)(
                ::windows::core::Vtable::as_raw(this),
                result__.as_mut_ptr(),
            )
            .from_abi::<ImplicitAnimationCollection>(result__)
        }
    }
    pub fn SetImplicitAnimations(
        &self,
        value: &ImplicitAnimationCollection,
    ) -> ::windows::core::Result<()> {
        let this = &::windows::core::Interface::cast::<ICompositionObject2>(self)?;
        unsafe {
            (::windows::core::Vtable::vtable(this).SetImplicitAnimations)(
                ::windows::core::Vtable::as_raw(this),
                ::core::mem::transmute_copy(value),
            )
            .ok()
        }
    }
    pub fn StartAnimationGroup<'a, P0, E0>(&self, value: P0) -> ::windows::core::Result<()>
    where
        P0: ::std::convert::TryInto<
            ::windows::core::InParam<'a, ICompositionAnimationBase>,
            Error = E0,
        >,
        E0: ::std::convert::Into<::windows::core::Error>,
    {
        let this = &::windows::core::Interface::cast::<ICompositionObject2>(self)?;
        unsafe {
            (::windows::core::Vtable::vtable(this).StartAnimationGroup)(
                ::windows::core::Vtable::as_raw(this),
                value.try_into().map_err(|e| e.into())?.abi(),
            )
            .ok()
        }
    }
    pub fn StopAnimationGroup<'a, P0, E0>(&self, value: P0) -> ::windows::core::Result<()>
    where
        P0: ::std::convert::TryInto<
            ::windows::core::InParam<'a, ICompositionAnimationBase>,
            Error = E0,
        >,
        E0: ::std::convert::Into<::windows::core::Error>,
    {
        let this = &::windows::core::Interface::cast::<ICompositionObject2>(self)?;
        unsafe {
            (::windows::core::Vtable::vtable(this).StopAnimationGroup)(
                ::windows::core::Vtable::as_raw(this),
                value.try_into().map_err(|e| e.into())?.abi(),
            )
            .ok()
        }
    }
    #[doc = "*Required features: `\"UI_Dispatching\"`*"]
    #[cfg(feature = "UI_Dispatching")]
    pub fn DispatcherQueue(&self) -> ::windows::core::Result<super::Dispatching::DispatcherQueue> {
        let this = &::windows::core::Interface::cast::<ICompositionObject3>(self)?;
        unsafe {
            let mut result__ = ::core::mem::MaybeUninit::zeroed();
            (::windows::core::Vtable::vtable(this).DispatcherQueue)(
                ::windows::core::Vtable::as_raw(this),
                result__.as_mut_ptr(),
            )
            .from_abi::<super::Dispatching::DispatcherQueue>(result__)
        }
    }
    pub fn TryGetAnimationController(
        &self,
        propertyname: &::windows::core::HSTRING,
    ) -> ::windows::core::Result<AnimationController> {
        let this = &::windows::core::Interface::cast::<ICompositionObject4>(self)?;
        unsafe {
            let mut result__ = ::core::mem::MaybeUninit::zeroed();
            (::windows::core::Vtable::vtable(this).TryGetAnimationController)(
                ::windows::core::Vtable::as_raw(this),
                ::core::mem::transmute_copy(propertyname),
                result__.as_mut_ptr(),
            )
            .from_abi::<AnimationController>(result__)
        }
    }
    pub fn StartAnimationWithController<'a, P0>(
        &self,
        propertyname: &::windows::core::HSTRING,
        animation: P0,
        animationcontroller: &AnimationController,
    ) -> ::windows::core::Result<()>
    where
        P0: ::std::convert::Into<::windows::core::InParam<'a, CompositionAnimation>>,
    {
        let this = &::windows::core::Interface::cast::<ICompositionObject5>(self)?;
        unsafe {
            (::windows::core::Vtable::vtable(this).StartAnimationWithController)(
                ::windows::core::Vtable::as_raw(this),
                ::core::mem::transmute_copy(propertyname),
                animation.into().abi(),
                ::core::mem::transmute_copy(animationcontroller),
            )
            .ok()
        }
    }
}
impl ::core::clone::Clone for AnimationPropertyInfo {
    fn clone(&self) -> Self {
        Self(self.0.clone())
    }
}
impl ::core::cmp::PartialEq for AnimationPropertyInfo {
    fn eq(&self, other: &Self) -> bool {
        self.0 == other.0
    }
}
impl ::core::cmp::Eq for AnimationPropertyInfo {}
impl ::core::fmt::Debug for AnimationPropertyInfo {
    fn fmt(&self, f: &mut ::core::fmt::Formatter<'_>) -> ::core::fmt::Result {
        f.debug_tuple("AnimationPropertyInfo").field(&self.0).finish()
    }
}
unsafe impl ::windows::core::RuntimeType for AnimationPropertyInfo {
    const SIGNATURE : ::windows::core::ConstBuffer = ::windows::core::ConstBuffer::from_slice ( b"rc(Microsoft.UI.Composition.AnimationPropertyInfo;{3d721a2b-9ccd-57bd-b6c2-ce9e04ae3606})" ) ;
    type DefaultType = ::core::option::Option<Self>;
    fn from_default(from: &Self::DefaultType) -> ::windows::core::Result<Self> {
        from.as_ref().cloned().ok_or(::windows::core::Error::OK)
    }
}
unsafe impl ::windows::core::Vtable for AnimationPropertyInfo {
    type Vtable = IAnimationPropertyInfo_Vtbl;
}
unsafe impl ::windows::core::Interface for AnimationPropertyInfo {
    const IID: ::windows::core::GUID = <IAnimationPropertyInfo as ::windows::core::Interface>::IID;
}
impl ::windows::core::RuntimeName for AnimationPropertyInfo {
    const NAME: &'static str = "Microsoft.UI.Composition.AnimationPropertyInfo";
}
::windows::core::interface_hierarchy!(
    AnimationPropertyInfo,
    ::windows::core::IUnknown,
    ::windows::core::IInspectable
);
impl ::core::convert::TryFrom<AnimationPropertyInfo> for IAnimationObject {
    type Error = ::windows::core::Error;
    fn try_from(value: AnimationPropertyInfo) -> ::windows::core::Result<Self> {
        ::core::convert::TryFrom::try_from(&value)
    }
}
impl ::core::convert::TryFrom<&AnimationPropertyInfo> for IAnimationObject {
    type Error = ::windows::core::Error;
    fn try_from(value: &AnimationPropertyInfo) -> ::windows::core::Result<Self> {
        ::windows::core::Interface::cast(value)
    }
}
impl<'a> ::core::convert::TryFrom<&AnimationPropertyInfo>
    for ::windows::core::InParam<'a, IAnimationObject>
{
    type Error = ::windows::core::Error;
    fn try_from(value: &AnimationPropertyInfo) -> ::windows::core::Result<Self> {
        let item = ::std::convert::TryInto::try_into(value)?;
        Ok(::windows::core::InParam::owned(item))
    }
}
impl ::core::convert::TryFrom<AnimationPropertyInfo> for ::windows::Foundation::IClosable {
    type Error = ::windows::core::Error;
    fn try_from(value: AnimationPropertyInfo) -> ::windows::core::Result<Self> {
        ::core::convert::TryFrom::try_from(&value)
    }
}
impl ::core::convert::TryFrom<&AnimationPropertyInfo> for ::windows::Foundation::IClosable {
    type Error = ::windows::core::Error;
    fn try_from(value: &AnimationPropertyInfo) -> ::windows::core::Result<Self> {
        ::windows::core::Interface::cast(value)
    }
}
impl<'a> ::core::convert::TryFrom<&AnimationPropertyInfo>
    for ::windows::core::InParam<'a, ::windows::Foundation::IClosable>
{
    type Error = ::windows::core::Error;
    fn try_from(value: &AnimationPropertyInfo) -> ::windows::core::Result<Self> {
        let item = ::std::convert::TryInto::try_into(value)?;
        Ok(::windows::core::InParam::owned(item))
    }
}
impl ::core::convert::From<AnimationPropertyInfo> for CompositionObject {
    fn from(value: AnimationPropertyInfo) -> Self {
        ::core::convert::From::from(&value)
    }
}
impl ::core::convert::From<&AnimationPropertyInfo> for CompositionObject {
    fn from(value: &AnimationPropertyInfo) -> Self {
        ::windows::core::Interface::cast(value).unwrap()
    }
}
impl<'a> ::core::convert::From<&AnimationPropertyInfo>
    for ::windows::core::InParam<'a, CompositionObject>
{
    fn from(value: &AnimationPropertyInfo) -> Self {
        ::windows::core::InParam::owned(value.into())
    }
}
unsafe impl ::core::marker::Send for AnimationPropertyInfo {}
unsafe impl ::core::marker::Sync for AnimationPropertyInfo {}
#[doc = "*Required features: `\"UI_Composition\"`*"]
#[repr(transparent)]
pub struct BackEasingFunction(::windows::core::IUnknown);
impl BackEasingFunction {
    pub fn PopulatePropertyInfo(
        &self,
        propertyname: &::windows::core::HSTRING,
        propertyinfo: &AnimationPropertyInfo,
    ) -> ::windows::core::Result<()> {
        let this = &::windows::core::Interface::cast::<IAnimationObject>(self)?;
        unsafe {
            (::windows::core::Vtable::vtable(this).PopulatePropertyInfo)(
                ::windows::core::Vtable::as_raw(this),
                ::core::mem::transmute_copy(propertyname),
                ::core::mem::transmute_copy(propertyinfo),
            )
            .ok()
        }
    }
    pub fn Mode(&self) -> ::windows::core::Result<CompositionEasingFunctionMode> {
        let this = self;
        unsafe {
            let mut result__ = ::core::mem::MaybeUninit::zeroed();
            (::windows::core::Vtable::vtable(this).Mode)(
                ::windows::core::Vtable::as_raw(this),
                result__.as_mut_ptr(),
            )
            .from_abi::<CompositionEasingFunctionMode>(result__)
        }
    }
    pub fn Amplitude(&self) -> ::windows::core::Result<f32> {
        let this = self;
        unsafe {
            let mut result__ = ::core::mem::MaybeUninit::zeroed();
            (::windows::core::Vtable::vtable(this).Amplitude)(
                ::windows::core::Vtable::as_raw(this),
                result__.as_mut_ptr(),
            )
            .from_abi::<f32>(result__)
        }
    }
    pub fn Close(&self) -> ::windows::core::Result<()> {
        let this = &::windows::core::Interface::cast::<::windows::Foundation::IClosable>(self)?;
        unsafe {
            (::windows::core::Vtable::vtable(this).Close)(::windows::core::Vtable::as_raw(this))
                .ok()
        }
    }
    pub fn Compositor(&self) -> ::windows::core::Result<Compositor> {
        let this = &::windows::core::Interface::cast::<ICompositionObject>(self)?;
        unsafe {
            let mut result__ = ::core::mem::MaybeUninit::zeroed();
            (::windows::core::Vtable::vtable(this).Compositor)(
                ::windows::core::Vtable::as_raw(this),
                result__.as_mut_ptr(),
            )
            .from_abi::<Compositor>(result__)
        }
    }
    pub fn Properties(&self) -> ::windows::core::Result<CompositionPropertySet> {
        let this = &::windows::core::Interface::cast::<ICompositionObject>(self)?;
        unsafe {
            let mut result__ = ::core::mem::MaybeUninit::zeroed();
            (::windows::core::Vtable::vtable(this).Properties)(
                ::windows::core::Vtable::as_raw(this),
                result__.as_mut_ptr(),
            )
            .from_abi::<CompositionPropertySet>(result__)
        }
    }
    pub fn StartAnimation<'a, P0>(
        &self,
        propertyname: &::windows::core::HSTRING,
        animation: P0,
    ) -> ::windows::core::Result<()>
    where
        P0: ::std::convert::Into<::windows::core::InParam<'a, CompositionAnimation>>,
    {
        let this = &::windows::core::Interface::cast::<ICompositionObject>(self)?;
        unsafe {
            (::windows::core::Vtable::vtable(this).StartAnimation)(
                ::windows::core::Vtable::as_raw(this),
                ::core::mem::transmute_copy(propertyname),
                animation.into().abi(),
            )
            .ok()
        }
    }
    pub fn StopAnimation(
        &self,
        propertyname: &::windows::core::HSTRING,
    ) -> ::windows::core::Result<()> {
        let this = &::windows::core::Interface::cast::<ICompositionObject>(self)?;
        unsafe {
            (::windows::core::Vtable::vtable(this).StopAnimation)(
                ::windows::core::Vtable::as_raw(this),
                ::core::mem::transmute_copy(propertyname),
            )
            .ok()
        }
    }
    pub fn Comment(&self) -> ::windows::core::Result<::windows::core::HSTRING> {
        let this = &::windows::core::Interface::cast::<ICompositionObject2>(self)?;
        unsafe {
            let mut result__ = ::core::mem::MaybeUninit::zeroed();
            (::windows::core::Vtable::vtable(this).Comment)(
                ::windows::core::Vtable::as_raw(this),
                result__.as_mut_ptr(),
            )
            .from_abi::<::windows::core::HSTRING>(result__)
        }
    }
    pub fn SetComment(&self, value: &::windows::core::HSTRING) -> ::windows::core::Result<()> {
        let this = &::windows::core::Interface::cast::<ICompositionObject2>(self)?;
        unsafe {
            (::windows::core::Vtable::vtable(this).SetComment)(
                ::windows::core::Vtable::as_raw(this),
                ::core::mem::transmute_copy(value),
            )
            .ok()
        }
    }
    pub fn ImplicitAnimations(&self) -> ::windows::core::Result<ImplicitAnimationCollection> {
        let this = &::windows::core::Interface::cast::<ICompositionObject2>(self)?;
        unsafe {
            let mut result__ = ::core::mem::MaybeUninit::zeroed();
            (::windows::core::Vtable::vtable(this).ImplicitAnimations)(
                ::windows::core::Vtable::as_raw(this),
                result__.as_mut_ptr(),
            )
            .from_abi::<ImplicitAnimationCollection>(result__)
        }
    }
    pub fn SetImplicitAnimations(
        &self,
        value: &ImplicitAnimationCollection,
    ) -> ::windows::core::Result<()> {
        let this = &::windows::core::Interface::cast::<ICompositionObject2>(self)?;
        unsafe {
            (::windows::core::Vtable::vtable(this).SetImplicitAnimations)(
                ::windows::core::Vtable::as_raw(this),
                ::core::mem::transmute_copy(value),
            )
            .ok()
        }
    }
    pub fn StartAnimationGroup<'a, P0, E0>(&self, value: P0) -> ::windows::core::Result<()>
    where
        P0: ::std::convert::TryInto<
            ::windows::core::InParam<'a, ICompositionAnimationBase>,
            Error = E0,
        >,
        E0: ::std::convert::Into<::windows::core::Error>,
    {
        let this = &::windows::core::Interface::cast::<ICompositionObject2>(self)?;
        unsafe {
            (::windows::core::Vtable::vtable(this).StartAnimationGroup)(
                ::windows::core::Vtable::as_raw(this),
                value.try_into().map_err(|e| e.into())?.abi(),
            )
            .ok()
        }
    }
    pub fn StopAnimationGroup<'a, P0, E0>(&self, value: P0) -> ::windows::core::Result<()>
    where
        P0: ::std::convert::TryInto<
            ::windows::core::InParam<'a, ICompositionAnimationBase>,
            Error = E0,
        >,
        E0: ::std::convert::Into<::windows::core::Error>,
    {
        let this = &::windows::core::Interface::cast::<ICompositionObject2>(self)?;
        unsafe {
            (::windows::core::Vtable::vtable(this).StopAnimationGroup)(
                ::windows::core::Vtable::as_raw(this),
                value.try_into().map_err(|e| e.into())?.abi(),
            )
            .ok()
        }
    }
    #[doc = "*Required features: `\"UI_Dispatching\"`*"]
    #[cfg(feature = "UI_Dispatching")]
    pub fn DispatcherQueue(&self) -> ::windows::core::Result<super::Dispatching::DispatcherQueue> {
        let this = &::windows::core::Interface::cast::<ICompositionObject3>(self)?;
        unsafe {
            let mut result__ = ::core::mem::MaybeUninit::zeroed();
            (::windows::core::Vtable::vtable(this).DispatcherQueue)(
                ::windows::core::Vtable::as_raw(this),
                result__.as_mut_ptr(),
            )
            .from_abi::<super::Dispatching::DispatcherQueue>(result__)
        }
    }
    pub fn TryGetAnimationController(
        &self,
        propertyname: &::windows::core::HSTRING,
    ) -> ::windows::core::Result<AnimationController> {
        let this = &::windows::core::Interface::cast::<ICompositionObject4>(self)?;
        unsafe {
            let mut result__ = ::core::mem::MaybeUninit::zeroed();
            (::windows::core::Vtable::vtable(this).TryGetAnimationController)(
                ::windows::core::Vtable::as_raw(this),
                ::core::mem::transmute_copy(propertyname),
                result__.as_mut_ptr(),
            )
            .from_abi::<AnimationController>(result__)
        }
    }
    pub fn StartAnimationWithController<'a, P0>(
        &self,
        propertyname: &::windows::core::HSTRING,
        animation: P0,
        animationcontroller: &AnimationController,
    ) -> ::windows::core::Result<()>
    where
        P0: ::std::convert::Into<::windows::core::InParam<'a, CompositionAnimation>>,
    {
        let this = &::windows::core::Interface::cast::<ICompositionObject5>(self)?;
        unsafe {
            (::windows::core::Vtable::vtable(this).StartAnimationWithController)(
                ::windows::core::Vtable::as_raw(this),
                ::core::mem::transmute_copy(propertyname),
                animation.into().abi(),
                ::core::mem::transmute_copy(animationcontroller),
            )
            .ok()
        }
    }
}
impl ::core::clone::Clone for BackEasingFunction {
    fn clone(&self) -> Self {
        Self(self.0.clone())
    }
}
impl ::core::cmp::PartialEq for BackEasingFunction {
    fn eq(&self, other: &Self) -> bool {
        self.0 == other.0
    }
}
impl ::core::cmp::Eq for BackEasingFunction {}
impl ::core::fmt::Debug for BackEasingFunction {
    fn fmt(&self, f: &mut ::core::fmt::Formatter<'_>) -> ::core::fmt::Result {
        f.debug_tuple("BackEasingFunction").field(&self.0).finish()
    }
}
unsafe impl ::windows::core::RuntimeType for BackEasingFunction {
    const SIGNATURE: ::windows::core::ConstBuffer = ::windows::core::ConstBuffer::from_slice(
        b"rc(Microsoft.UI.Composition.BackEasingFunction;{27c75bab-317a-5362-bf25-fffbb98a51b9})",
    );
    type DefaultType = ::core::option::Option<Self>;
    fn from_default(from: &Self::DefaultType) -> ::windows::core::Result<Self> {
        from.as_ref().cloned().ok_or(::windows::core::Error::OK)
    }
}
unsafe impl ::windows::core::Vtable for BackEasingFunction {
    type Vtable = IBackEasingFunction_Vtbl;
}
unsafe impl ::windows::core::Interface for BackEasingFunction {
    const IID: ::windows::core::GUID = <IBackEasingFunction as ::windows::core::Interface>::IID;
}
impl ::windows::core::RuntimeName for BackEasingFunction {
    const NAME: &'static str = "Microsoft.UI.Composition.BackEasingFunction";
}
::windows::core::interface_hierarchy!(
    BackEasingFunction,
    ::windows::core::IUnknown,
    ::windows::core::IInspectable
);
impl ::core::convert::TryFrom<BackEasingFunction> for IAnimationObject {
    type Error = ::windows::core::Error;
    fn try_from(value: BackEasingFunction) -> ::windows::core::Result<Self> {
        ::core::convert::TryFrom::try_from(&value)
    }
}
impl ::core::convert::TryFrom<&BackEasingFunction> for IAnimationObject {
    type Error = ::windows::core::Error;
    fn try_from(value: &BackEasingFunction) -> ::windows::core::Result<Self> {
        ::windows::core::Interface::cast(value)
    }
}
impl<'a> ::core::convert::TryFrom<&BackEasingFunction>
    for ::windows::core::InParam<'a, IAnimationObject>
{
    type Error = ::windows::core::Error;
    fn try_from(value: &BackEasingFunction) -> ::windows::core::Result<Self> {
        let item = ::std::convert::TryInto::try_into(value)?;
        Ok(::windows::core::InParam::owned(item))
    }
}
impl ::core::convert::TryFrom<BackEasingFunction> for ::windows::Foundation::IClosable {
    type Error = ::windows::core::Error;
    fn try_from(value: BackEasingFunction) -> ::windows::core::Result<Self> {
        ::core::convert::TryFrom::try_from(&value)
    }
}
impl ::core::convert::TryFrom<&BackEasingFunction> for ::windows::Foundation::IClosable {
    type Error = ::windows::core::Error;
    fn try_from(value: &BackEasingFunction) -> ::windows::core::Result<Self> {
        ::windows::core::Interface::cast(value)
    }
}
impl<'a> ::core::convert::TryFrom<&BackEasingFunction>
    for ::windows::core::InParam<'a, ::windows::Foundation::IClosable>
{
    type Error = ::windows::core::Error;
    fn try_from(value: &BackEasingFunction) -> ::windows::core::Result<Self> {
        let item = ::std::convert::TryInto::try_into(value)?;
        Ok(::windows::core::InParam::owned(item))
    }
}
impl ::core::convert::From<BackEasingFunction> for CompositionEasingFunction {
    fn from(value: BackEasingFunction) -> Self {
        ::core::convert::From::from(&value)
    }
}
impl ::core::convert::From<&BackEasingFunction> for CompositionEasingFunction {
    fn from(value: &BackEasingFunction) -> Self {
        ::windows::core::Interface::cast(value).unwrap()
    }
}
impl<'a> ::core::convert::From<&BackEasingFunction>
    for ::windows::core::InParam<'a, CompositionEasingFunction>
{
    fn from(value: &BackEasingFunction) -> Self {
        ::windows::core::InParam::owned(value.into())
    }
}
impl ::core::convert::From<BackEasingFunction> for CompositionObject {
    fn from(value: BackEasingFunction) -> Self {
        ::core::convert::From::from(&value)
    }
}
impl ::core::convert::From<&BackEasingFunction> for CompositionObject {
    fn from(value: &BackEasingFunction) -> Self {
        ::windows::core::Interface::cast(value).unwrap()
    }
}
impl<'a> ::core::convert::From<&BackEasingFunction>
    for ::windows::core::InParam<'a, CompositionObject>
{
    fn from(value: &BackEasingFunction) -> Self {
        ::windows::core::InParam::owned(value.into())
    }
}
unsafe impl ::core::marker::Send for BackEasingFunction {}
unsafe impl ::core::marker::Sync for BackEasingFunction {}
#[doc = "*Required features: `\"UI_Composition\"`*"]
#[repr(transparent)]
pub struct BooleanKeyFrameAnimation(::windows::core::IUnknown);
impl BooleanKeyFrameAnimation {
    pub fn PopulatePropertyInfo(
        &self,
        propertyname: &::windows::core::HSTRING,
        propertyinfo: &AnimationPropertyInfo,
    ) -> ::windows::core::Result<()> {
        let this = &::windows::core::Interface::cast::<IAnimationObject>(self)?;
        unsafe {
            (::windows::core::Vtable::vtable(this).PopulatePropertyInfo)(
                ::windows::core::Vtable::as_raw(this),
                ::core::mem::transmute_copy(propertyname),
                ::core::mem::transmute_copy(propertyinfo),
            )
            .ok()
        }
    }
    pub fn InsertKeyFrame(
        &self,
        normalizedprogresskey: f32,
        value: bool,
    ) -> ::windows::core::Result<()> {
        let this = self;
        unsafe {
            (::windows::core::Vtable::vtable(this).InsertKeyFrame)(
                ::windows::core::Vtable::as_raw(this),
                normalizedprogresskey,
                value,
            )
            .ok()
        }
    }
    pub fn Close(&self) -> ::windows::core::Result<()> {
        let this = &::windows::core::Interface::cast::<::windows::Foundation::IClosable>(self)?;
        unsafe {
            (::windows::core::Vtable::vtable(this).Close)(::windows::core::Vtable::as_raw(this))
                .ok()
        }
    }
    pub fn ClearAllParameters(&self) -> ::windows::core::Result<()> {
        let this = &::windows::core::Interface::cast::<ICompositionAnimation>(self)?;
        unsafe {
            (::windows::core::Vtable::vtable(this).ClearAllParameters)(
                ::windows::core::Vtable::as_raw(this),
            )
            .ok()
        }
    }
    pub fn ClearParameter(&self, key: &::windows::core::HSTRING) -> ::windows::core::Result<()> {
        let this = &::windows::core::Interface::cast::<ICompositionAnimation>(self)?;
        unsafe {
            (::windows::core::Vtable::vtable(this).ClearParameter)(
                ::windows::core::Vtable::as_raw(this),
                ::core::mem::transmute_copy(key),
            )
            .ok()
        }
    }
    pub fn SetColorParameter(
        &self,
        key: &::windows::core::HSTRING,
        value: ::windows::UI::Color,
    ) -> ::windows::core::Result<()> {
        let this = &::windows::core::Interface::cast::<ICompositionAnimation>(self)?;
        unsafe {
            (::windows::core::Vtable::vtable(this).SetColorParameter)(
                ::windows::core::Vtable::as_raw(this),
                ::core::mem::transmute_copy(key),
                value,
            )
            .ok()
        }
    }
    pub fn SetMatrix3x2Parameter(
        &self,
        key: &::windows::core::HSTRING,
        value: ::windows::Foundation::Numerics::Matrix3x2,
    ) -> ::windows::core::Result<()> {
        let this = &::windows::core::Interface::cast::<ICompositionAnimation>(self)?;
        unsafe {
            (::windows::core::Vtable::vtable(this).SetMatrix3x2Parameter)(
                ::windows::core::Vtable::as_raw(this),
                ::core::mem::transmute_copy(key),
                value,
            )
            .ok()
        }
    }
    pub fn SetMatrix4x4Parameter(
        &self,
        key: &::windows::core::HSTRING,
        value: ::windows::Foundation::Numerics::Matrix4x4,
    ) -> ::windows::core::Result<()> {
        let this = &::windows::core::Interface::cast::<ICompositionAnimation>(self)?;
        unsafe {
            (::windows::core::Vtable::vtable(this).SetMatrix4x4Parameter)(
                ::windows::core::Vtable::as_raw(this),
                ::core::mem::transmute_copy(key),
                value,
            )
            .ok()
        }
    }
    pub fn SetQuaternionParameter(
        &self,
        key: &::windows::core::HSTRING,
        value: ::windows::Foundation::Numerics::Quaternion,
    ) -> ::windows::core::Result<()> {
        let this = &::windows::core::Interface::cast::<ICompositionAnimation>(self)?;
        unsafe {
            (::windows::core::Vtable::vtable(this).SetQuaternionParameter)(
                ::windows::core::Vtable::as_raw(this),
                ::core::mem::transmute_copy(key),
                value,
            )
            .ok()
        }
    }
    pub fn SetReferenceParameter<'a, P0>(
        &self,
        key: &::windows::core::HSTRING,
        compositionobject: P0,
    ) -> ::windows::core::Result<()>
    where
        P0: ::std::convert::Into<::windows::core::InParam<'a, CompositionObject>>,
    {
        let this = &::windows::core::Interface::cast::<ICompositionAnimation>(self)?;
        unsafe {
            (::windows::core::Vtable::vtable(this).SetReferenceParameter)(
                ::windows::core::Vtable::as_raw(this),
                ::core::mem::transmute_copy(key),
                compositionobject.into().abi(),
            )
            .ok()
        }
    }
    pub fn SetScalarParameter(
        &self,
        key: &::windows::core::HSTRING,
        value: f32,
    ) -> ::windows::core::Result<()> {
        let this = &::windows::core::Interface::cast::<ICompositionAnimation>(self)?;
        unsafe {
            (::windows::core::Vtable::vtable(this).SetScalarParameter)(
                ::windows::core::Vtable::as_raw(this),
                ::core::mem::transmute_copy(key),
                value,
            )
            .ok()
        }
    }
    pub fn SetVector2Parameter(
        &self,
        key: &::windows::core::HSTRING,
        value: ::windows::Foundation::Numerics::Vector2,
    ) -> ::windows::core::Result<()> {
        let this = &::windows::core::Interface::cast::<ICompositionAnimation>(self)?;
        unsafe {
            (::windows::core::Vtable::vtable(this).SetVector2Parameter)(
                ::windows::core::Vtable::as_raw(this),
                ::core::mem::transmute_copy(key),
                value,
            )
            .ok()
        }
    }
    pub fn SetVector3Parameter(
        &self,
        key: &::windows::core::HSTRING,
        value: ::windows::Foundation::Numerics::Vector3,
    ) -> ::windows::core::Result<()> {
        let this = &::windows::core::Interface::cast::<ICompositionAnimation>(self)?;
        unsafe {
            (::windows::core::Vtable::vtable(this).SetVector3Parameter)(
                ::windows::core::Vtable::as_raw(this),
                ::core::mem::transmute_copy(key),
                value,
            )
            .ok()
        }
    }
    pub fn SetVector4Parameter(
        &self,
        key: &::windows::core::HSTRING,
        value: ::windows::Foundation::Numerics::Vector4,
    ) -> ::windows::core::Result<()> {
        let this = &::windows::core::Interface::cast::<ICompositionAnimation>(self)?;
        unsafe {
            (::windows::core::Vtable::vtable(this).SetVector4Parameter)(
                ::windows::core::Vtable::as_raw(this),
                ::core::mem::transmute_copy(key),
                value,
            )
            .ok()
        }
    }
    pub fn SetBooleanParameter(
        &self,
        key: &::windows::core::HSTRING,
        value: bool,
    ) -> ::windows::core::Result<()> {
        let this = &::windows::core::Interface::cast::<ICompositionAnimation2>(self)?;
        unsafe {
            (::windows::core::Vtable::vtable(this).SetBooleanParameter)(
                ::windows::core::Vtable::as_raw(this),
                ::core::mem::transmute_copy(key),
                value,
            )
            .ok()
        }
    }
    pub fn Target(&self) -> ::windows::core::Result<::windows::core::HSTRING> {
        let this = &::windows::core::Interface::cast::<ICompositionAnimation2>(self)?;
        unsafe {
            let mut result__ = ::core::mem::MaybeUninit::zeroed();
            (::windows::core::Vtable::vtable(this).Target)(
                ::windows::core::Vtable::as_raw(this),
                result__.as_mut_ptr(),
            )
            .from_abi::<::windows::core::HSTRING>(result__)
        }
    }
    pub fn SetTarget(&self, value: &::windows::core::HSTRING) -> ::windows::core::Result<()> {
        let this = &::windows::core::Interface::cast::<ICompositionAnimation2>(self)?;
        unsafe {
            (::windows::core::Vtable::vtable(this).SetTarget)(
                ::windows::core::Vtable::as_raw(this),
                ::core::mem::transmute_copy(value),
            )
            .ok()
        }
    }
    pub fn InitialValueExpressions(
        &self,
    ) -> ::windows::core::Result<InitialValueExpressionCollection> {
        let this = &::windows::core::Interface::cast::<ICompositionAnimation3>(self)?;
        unsafe {
            let mut result__ = ::core::mem::MaybeUninit::zeroed();
            (::windows::core::Vtable::vtable(this).InitialValueExpressions)(
                ::windows::core::Vtable::as_raw(this),
                result__.as_mut_ptr(),
            )
            .from_abi::<InitialValueExpressionCollection>(result__)
        }
    }
    pub fn SetExpressionReferenceParameter<'a, P0, E0>(
        &self,
        parametername: &::windows::core::HSTRING,
        source: P0,
    ) -> ::windows::core::Result<()>
    where
        P0: ::std::convert::TryInto<::windows::core::InParam<'a, IAnimationObject>, Error = E0>,
        E0: ::std::convert::Into<::windows::core::Error>,
    {
        let this = &::windows::core::Interface::cast::<ICompositionAnimation4>(self)?;
        unsafe {
            (::windows::core::Vtable::vtable(this).SetExpressionReferenceParameter)(
                ::windows::core::Vtable::as_raw(this),
                ::core::mem::transmute_copy(parametername),
                source.try_into().map_err(|e| e.into())?.abi(),
            )
            .ok()
        }
    }
    pub fn Compositor(&self) -> ::windows::core::Result<Compositor> {
        let this = &::windows::core::Interface::cast::<ICompositionObject>(self)?;
        unsafe {
            let mut result__ = ::core::mem::MaybeUninit::zeroed();
            (::windows::core::Vtable::vtable(this).Compositor)(
                ::windows::core::Vtable::as_raw(this),
                result__.as_mut_ptr(),
            )
            .from_abi::<Compositor>(result__)
        }
    }
    pub fn Properties(&self) -> ::windows::core::Result<CompositionPropertySet> {
        let this = &::windows::core::Interface::cast::<ICompositionObject>(self)?;
        unsafe {
            let mut result__ = ::core::mem::MaybeUninit::zeroed();
            (::windows::core::Vtable::vtable(this).Properties)(
                ::windows::core::Vtable::as_raw(this),
                result__.as_mut_ptr(),
            )
            .from_abi::<CompositionPropertySet>(result__)
        }
    }
    pub fn StartAnimation<'a, P0>(
        &self,
        propertyname: &::windows::core::HSTRING,
        animation: P0,
    ) -> ::windows::core::Result<()>
    where
        P0: ::std::convert::Into<::windows::core::InParam<'a, CompositionAnimation>>,
    {
        let this = &::windows::core::Interface::cast::<ICompositionObject>(self)?;
        unsafe {
            (::windows::core::Vtable::vtable(this).StartAnimation)(
                ::windows::core::Vtable::as_raw(this),
                ::core::mem::transmute_copy(propertyname),
                animation.into().abi(),
            )
            .ok()
        }
    }
    pub fn StopAnimation(
        &self,
        propertyname: &::windows::core::HSTRING,
    ) -> ::windows::core::Result<()> {
        let this = &::windows::core::Interface::cast::<ICompositionObject>(self)?;
        unsafe {
            (::windows::core::Vtable::vtable(this).StopAnimation)(
                ::windows::core::Vtable::as_raw(this),
                ::core::mem::transmute_copy(propertyname),
            )
            .ok()
        }
    }
    pub fn Comment(&self) -> ::windows::core::Result<::windows::core::HSTRING> {
        let this = &::windows::core::Interface::cast::<ICompositionObject2>(self)?;
        unsafe {
            let mut result__ = ::core::mem::MaybeUninit::zeroed();
            (::windows::core::Vtable::vtable(this).Comment)(
                ::windows::core::Vtable::as_raw(this),
                result__.as_mut_ptr(),
            )
            .from_abi::<::windows::core::HSTRING>(result__)
        }
    }
    pub fn SetComment(&self, value: &::windows::core::HSTRING) -> ::windows::core::Result<()> {
        let this = &::windows::core::Interface::cast::<ICompositionObject2>(self)?;
        unsafe {
            (::windows::core::Vtable::vtable(this).SetComment)(
                ::windows::core::Vtable::as_raw(this),
                ::core::mem::transmute_copy(value),
            )
            .ok()
        }
    }
    pub fn ImplicitAnimations(&self) -> ::windows::core::Result<ImplicitAnimationCollection> {
        let this = &::windows::core::Interface::cast::<ICompositionObject2>(self)?;
        unsafe {
            let mut result__ = ::core::mem::MaybeUninit::zeroed();
            (::windows::core::Vtable::vtable(this).ImplicitAnimations)(
                ::windows::core::Vtable::as_raw(this),
                result__.as_mut_ptr(),
            )
            .from_abi::<ImplicitAnimationCollection>(result__)
        }
    }
    pub fn SetImplicitAnimations(
        &self,
        value: &ImplicitAnimationCollection,
    ) -> ::windows::core::Result<()> {
        let this = &::windows::core::Interface::cast::<ICompositionObject2>(self)?;
        unsafe {
            (::windows::core::Vtable::vtable(this).SetImplicitAnimations)(
                ::windows::core::Vtable::as_raw(this),
                ::core::mem::transmute_copy(value),
            )
            .ok()
        }
    }
    pub fn StartAnimationGroup<'a, P0, E0>(&self, value: P0) -> ::windows::core::Result<()>
    where
        P0: ::std::convert::TryInto<
            ::windows::core::InParam<'a, ICompositionAnimationBase>,
            Error = E0,
        >,
        E0: ::std::convert::Into<::windows::core::Error>,
    {
        let this = &::windows::core::Interface::cast::<ICompositionObject2>(self)?;
        unsafe {
            (::windows::core::Vtable::vtable(this).StartAnimationGroup)(
                ::windows::core::Vtable::as_raw(this),
                value.try_into().map_err(|e| e.into())?.abi(),
            )
            .ok()
        }
    }
    pub fn StopAnimationGroup<'a, P0, E0>(&self, value: P0) -> ::windows::core::Result<()>
    where
        P0: ::std::convert::TryInto<
            ::windows::core::InParam<'a, ICompositionAnimationBase>,
            Error = E0,
        >,
        E0: ::std::convert::Into<::windows::core::Error>,
    {
        let this = &::windows::core::Interface::cast::<ICompositionObject2>(self)?;
        unsafe {
            (::windows::core::Vtable::vtable(this).StopAnimationGroup)(
                ::windows::core::Vtable::as_raw(this),
                value.try_into().map_err(|e| e.into())?.abi(),
            )
            .ok()
        }
    }
    #[doc = "*Required features: `\"UI_Dispatching\"`*"]
    #[cfg(feature = "UI_Dispatching")]
    pub fn DispatcherQueue(&self) -> ::windows::core::Result<super::Dispatching::DispatcherQueue> {
        let this = &::windows::core::Interface::cast::<ICompositionObject3>(self)?;
        unsafe {
            let mut result__ = ::core::mem::MaybeUninit::zeroed();
            (::windows::core::Vtable::vtable(this).DispatcherQueue)(
                ::windows::core::Vtable::as_raw(this),
                result__.as_mut_ptr(),
            )
            .from_abi::<super::Dispatching::DispatcherQueue>(result__)
        }
    }
    pub fn TryGetAnimationController(
        &self,
        propertyname: &::windows::core::HSTRING,
    ) -> ::windows::core::Result<AnimationController> {
        let this = &::windows::core::Interface::cast::<ICompositionObject4>(self)?;
        unsafe {
            let mut result__ = ::core::mem::MaybeUninit::zeroed();
            (::windows::core::Vtable::vtable(this).TryGetAnimationController)(
                ::windows::core::Vtable::as_raw(this),
                ::core::mem::transmute_copy(propertyname),
                result__.as_mut_ptr(),
            )
            .from_abi::<AnimationController>(result__)
        }
    }
    pub fn StartAnimationWithController<'a, P0>(
        &self,
        propertyname: &::windows::core::HSTRING,
        animation: P0,
        animationcontroller: &AnimationController,
    ) -> ::windows::core::Result<()>
    where
        P0: ::std::convert::Into<::windows::core::InParam<'a, CompositionAnimation>>,
    {
        let this = &::windows::core::Interface::cast::<ICompositionObject5>(self)?;
        unsafe {
            (::windows::core::Vtable::vtable(this).StartAnimationWithController)(
                ::windows::core::Vtable::as_raw(this),
                ::core::mem::transmute_copy(propertyname),
                animation.into().abi(),
                ::core::mem::transmute_copy(animationcontroller),
            )
            .ok()
        }
    }
    pub fn DelayTime(&self) -> ::windows::core::Result<::windows::Foundation::TimeSpan> {
        let this = &::windows::core::Interface::cast::<IKeyFrameAnimation>(self)?;
        unsafe {
            let mut result__ = ::core::mem::MaybeUninit::zeroed();
            (::windows::core::Vtable::vtable(this).DelayTime)(
                ::windows::core::Vtable::as_raw(this),
                result__.as_mut_ptr(),
            )
            .from_abi::<::windows::Foundation::TimeSpan>(result__)
        }
    }
    pub fn SetDelayTime(
        &self,
        value: ::windows::Foundation::TimeSpan,
    ) -> ::windows::core::Result<()> {
        let this = &::windows::core::Interface::cast::<IKeyFrameAnimation>(self)?;
        unsafe {
            (::windows::core::Vtable::vtable(this).SetDelayTime)(
                ::windows::core::Vtable::as_raw(this),
                value,
            )
            .ok()
        }
    }
    pub fn Duration(&self) -> ::windows::core::Result<::windows::Foundation::TimeSpan> {
        let this = &::windows::core::Interface::cast::<IKeyFrameAnimation>(self)?;
        unsafe {
            let mut result__ = ::core::mem::MaybeUninit::zeroed();
            (::windows::core::Vtable::vtable(this).Duration)(
                ::windows::core::Vtable::as_raw(this),
                result__.as_mut_ptr(),
            )
            .from_abi::<::windows::Foundation::TimeSpan>(result__)
        }
    }
    pub fn SetDuration(
        &self,
        value: ::windows::Foundation::TimeSpan,
    ) -> ::windows::core::Result<()> {
        let this = &::windows::core::Interface::cast::<IKeyFrameAnimation>(self)?;
        unsafe {
            (::windows::core::Vtable::vtable(this).SetDuration)(
                ::windows::core::Vtable::as_raw(this),
                value,
            )
            .ok()
        }
    }
    pub fn IterationBehavior(&self) -> ::windows::core::Result<AnimationIterationBehavior> {
        let this = &::windows::core::Interface::cast::<IKeyFrameAnimation>(self)?;
        unsafe {
            let mut result__ = ::core::mem::MaybeUninit::zeroed();
            (::windows::core::Vtable::vtable(this).IterationBehavior)(
                ::windows::core::Vtable::as_raw(this),
                result__.as_mut_ptr(),
            )
            .from_abi::<AnimationIterationBehavior>(result__)
        }
    }
    pub fn SetIterationBehavior(
        &self,
        value: AnimationIterationBehavior,
    ) -> ::windows::core::Result<()> {
        let this = &::windows::core::Interface::cast::<IKeyFrameAnimation>(self)?;
        unsafe {
            (::windows::core::Vtable::vtable(this).SetIterationBehavior)(
                ::windows::core::Vtable::as_raw(this),
                value,
            )
            .ok()
        }
    }
    pub fn IterationCount(&self) -> ::windows::core::Result<i32> {
        let this = &::windows::core::Interface::cast::<IKeyFrameAnimation>(self)?;
        unsafe {
            let mut result__ = ::core::mem::MaybeUninit::zeroed();
            (::windows::core::Vtable::vtable(this).IterationCount)(
                ::windows::core::Vtable::as_raw(this),
                result__.as_mut_ptr(),
            )
            .from_abi::<i32>(result__)
        }
    }
    pub fn SetIterationCount(&self, value: i32) -> ::windows::core::Result<()> {
        let this = &::windows::core::Interface::cast::<IKeyFrameAnimation>(self)?;
        unsafe {
            (::windows::core::Vtable::vtable(this).SetIterationCount)(
                ::windows::core::Vtable::as_raw(this),
                value,
            )
            .ok()
        }
    }
    pub fn KeyFrameCount(&self) -> ::windows::core::Result<i32> {
        let this = &::windows::core::Interface::cast::<IKeyFrameAnimation>(self)?;
        unsafe {
            let mut result__ = ::core::mem::MaybeUninit::zeroed();
            (::windows::core::Vtable::vtable(this).KeyFrameCount)(
                ::windows::core::Vtable::as_raw(this),
                result__.as_mut_ptr(),
            )
            .from_abi::<i32>(result__)
        }
    }
    pub fn StopBehavior(&self) -> ::windows::core::Result<AnimationStopBehavior> {
        let this = &::windows::core::Interface::cast::<IKeyFrameAnimation>(self)?;
        unsafe {
            let mut result__ = ::core::mem::MaybeUninit::zeroed();
            (::windows::core::Vtable::vtable(this).StopBehavior)(
                ::windows::core::Vtable::as_raw(this),
                result__.as_mut_ptr(),
            )
            .from_abi::<AnimationStopBehavior>(result__)
        }
    }
    pub fn SetStopBehavior(&self, value: AnimationStopBehavior) -> ::windows::core::Result<()> {
        let this = &::windows::core::Interface::cast::<IKeyFrameAnimation>(self)?;
        unsafe {
            (::windows::core::Vtable::vtable(this).SetStopBehavior)(
                ::windows::core::Vtable::as_raw(this),
                value,
            )
            .ok()
        }
    }
    pub fn InsertExpressionKeyFrame(
        &self,
        normalizedprogresskey: f32,
        value: &::windows::core::HSTRING,
    ) -> ::windows::core::Result<()> {
        let this = &::windows::core::Interface::cast::<IKeyFrameAnimation>(self)?;
        unsafe {
            (::windows::core::Vtable::vtable(this).InsertExpressionKeyFrame)(
                ::windows::core::Vtable::as_raw(this),
                normalizedprogresskey,
                ::core::mem::transmute_copy(value),
            )
            .ok()
        }
    }
    pub fn InsertExpressionKeyFrameWithEasingFunction<'a, P0>(
        &self,
        normalizedprogresskey: f32,
        value: &::windows::core::HSTRING,
        easingfunction: P0,
    ) -> ::windows::core::Result<()>
    where
        P0: ::std::convert::Into<::windows::core::InParam<'a, CompositionEasingFunction>>,
    {
        let this = &::windows::core::Interface::cast::<IKeyFrameAnimation>(self)?;
        unsafe {
            (::windows::core::Vtable::vtable(this).InsertExpressionKeyFrameWithEasingFunction)(
                ::windows::core::Vtable::as_raw(this),
                normalizedprogresskey,
                ::core::mem::transmute_copy(value),
                easingfunction.into().abi(),
            )
            .ok()
        }
    }
    pub fn Direction(&self) -> ::windows::core::Result<AnimationDirection> {
        let this = &::windows::core::Interface::cast::<IKeyFrameAnimation2>(self)?;
        unsafe {
            let mut result__ = ::core::mem::MaybeUninit::zeroed();
            (::windows::core::Vtable::vtable(this).Direction)(
                ::windows::core::Vtable::as_raw(this),
                result__.as_mut_ptr(),
            )
            .from_abi::<AnimationDirection>(result__)
        }
    }
    pub fn SetDirection(&self, value: AnimationDirection) -> ::windows::core::Result<()> {
        let this = &::windows::core::Interface::cast::<IKeyFrameAnimation2>(self)?;
        unsafe {
            (::windows::core::Vtable::vtable(this).SetDirection)(
                ::windows::core::Vtable::as_raw(this),
                value,
            )
            .ok()
        }
    }
    pub fn DelayBehavior(&self) -> ::windows::core::Result<AnimationDelayBehavior> {
        let this = &::windows::core::Interface::cast::<IKeyFrameAnimation3>(self)?;
        unsafe {
            let mut result__ = ::core::mem::MaybeUninit::zeroed();
            (::windows::core::Vtable::vtable(this).DelayBehavior)(
                ::windows::core::Vtable::as_raw(this),
                result__.as_mut_ptr(),
            )
            .from_abi::<AnimationDelayBehavior>(result__)
        }
    }
    pub fn SetDelayBehavior(&self, value: AnimationDelayBehavior) -> ::windows::core::Result<()> {
        let this = &::windows::core::Interface::cast::<IKeyFrameAnimation3>(self)?;
        unsafe {
            (::windows::core::Vtable::vtable(this).SetDelayBehavior)(
                ::windows::core::Vtable::as_raw(this),
                value,
            )
            .ok()
        }
    }
}
impl ::core::clone::Clone for BooleanKeyFrameAnimation {
    fn clone(&self) -> Self {
        Self(self.0.clone())
    }
}
impl ::core::cmp::PartialEq for BooleanKeyFrameAnimation {
    fn eq(&self, other: &Self) -> bool {
        self.0 == other.0
    }
}
impl ::core::cmp::Eq for BooleanKeyFrameAnimation {}
impl ::core::fmt::Debug for BooleanKeyFrameAnimation {
    fn fmt(&self, f: &mut ::core::fmt::Formatter<'_>) -> ::core::fmt::Result {
        f.debug_tuple("BooleanKeyFrameAnimation").field(&self.0).finish()
    }
}
unsafe impl ::windows::core::RuntimeType for BooleanKeyFrameAnimation {
    const SIGNATURE : ::windows::core::ConstBuffer = ::windows::core::ConstBuffer::from_slice ( b"rc(Microsoft.UI.Composition.BooleanKeyFrameAnimation;{7fe485e9-e874-5ff3-8ddc-826c3818bfc3})" ) ;
    type DefaultType = ::core::option::Option<Self>;
    fn from_default(from: &Self::DefaultType) -> ::windows::core::Result<Self> {
        from.as_ref().cloned().ok_or(::windows::core::Error::OK)
    }
}
unsafe impl ::windows::core::Vtable for BooleanKeyFrameAnimation {
    type Vtable = IBooleanKeyFrameAnimation_Vtbl;
}
unsafe impl ::windows::core::Interface for BooleanKeyFrameAnimation {
    const IID: ::windows::core::GUID =
        <IBooleanKeyFrameAnimation as ::windows::core::Interface>::IID;
}
impl ::windows::core::RuntimeName for BooleanKeyFrameAnimation {
    const NAME: &'static str = "Microsoft.UI.Composition.BooleanKeyFrameAnimation";
}
::windows::core::interface_hierarchy!(
    BooleanKeyFrameAnimation,
    ::windows::core::IUnknown,
    ::windows::core::IInspectable
);
impl ::core::convert::TryFrom<BooleanKeyFrameAnimation> for IAnimationObject {
    type Error = ::windows::core::Error;
    fn try_from(value: BooleanKeyFrameAnimation) -> ::windows::core::Result<Self> {
        ::core::convert::TryFrom::try_from(&value)
    }
}
impl ::core::convert::TryFrom<&BooleanKeyFrameAnimation> for IAnimationObject {
    type Error = ::windows::core::Error;
    fn try_from(value: &BooleanKeyFrameAnimation) -> ::windows::core::Result<Self> {
        ::windows::core::Interface::cast(value)
    }
}
impl<'a> ::core::convert::TryFrom<&BooleanKeyFrameAnimation>
    for ::windows::core::InParam<'a, IAnimationObject>
{
    type Error = ::windows::core::Error;
    fn try_from(value: &BooleanKeyFrameAnimation) -> ::windows::core::Result<Self> {
        let item = ::std::convert::TryInto::try_into(value)?;
        Ok(::windows::core::InParam::owned(item))
    }
}
impl ::core::convert::TryFrom<BooleanKeyFrameAnimation> for ::windows::Foundation::IClosable {
    type Error = ::windows::core::Error;
    fn try_from(value: BooleanKeyFrameAnimation) -> ::windows::core::Result<Self> {
        ::core::convert::TryFrom::try_from(&value)
    }
}
impl ::core::convert::TryFrom<&BooleanKeyFrameAnimation> for ::windows::Foundation::IClosable {
    type Error = ::windows::core::Error;
    fn try_from(value: &BooleanKeyFrameAnimation) -> ::windows::core::Result<Self> {
        ::windows::core::Interface::cast(value)
    }
}
impl<'a> ::core::convert::TryFrom<&BooleanKeyFrameAnimation>
    for ::windows::core::InParam<'a, ::windows::Foundation::IClosable>
{
    type Error = ::windows::core::Error;
    fn try_from(value: &BooleanKeyFrameAnimation) -> ::windows::core::Result<Self> {
        let item = ::std::convert::TryInto::try_into(value)?;
        Ok(::windows::core::InParam::owned(item))
    }
}
impl ::core::convert::TryFrom<BooleanKeyFrameAnimation> for ICompositionAnimationBase {
    type Error = ::windows::core::Error;
    fn try_from(value: BooleanKeyFrameAnimation) -> ::windows::core::Result<Self> {
        ::core::convert::TryFrom::try_from(&value)
    }
}
impl ::core::convert::TryFrom<&BooleanKeyFrameAnimation> for ICompositionAnimationBase {
    type Error = ::windows::core::Error;
    fn try_from(value: &BooleanKeyFrameAnimation) -> ::windows::core::Result<Self> {
        ::windows::core::Interface::cast(value)
    }
}
impl<'a> ::core::convert::TryFrom<&BooleanKeyFrameAnimation>
    for ::windows::core::InParam<'a, ICompositionAnimationBase>
{
    type Error = ::windows::core::Error;
    fn try_from(value: &BooleanKeyFrameAnimation) -> ::windows::core::Result<Self> {
        let item = ::std::convert::TryInto::try_into(value)?;
        Ok(::windows::core::InParam::owned(item))
    }
}
impl ::core::convert::From<BooleanKeyFrameAnimation> for KeyFrameAnimation {
    fn from(value: BooleanKeyFrameAnimation) -> Self {
        ::core::convert::From::from(&value)
    }
}
impl ::core::convert::From<&BooleanKeyFrameAnimation> for KeyFrameAnimation {
    fn from(value: &BooleanKeyFrameAnimation) -> Self {
        ::windows::core::Interface::cast(value).unwrap()
    }
}
impl<'a> ::core::convert::From<&BooleanKeyFrameAnimation>
    for ::windows::core::InParam<'a, KeyFrameAnimation>
{
    fn from(value: &BooleanKeyFrameAnimation) -> Self {
        ::windows::core::InParam::owned(value.into())
    }
}
impl ::core::convert::From<BooleanKeyFrameAnimation> for CompositionAnimation {
    fn from(value: BooleanKeyFrameAnimation) -> Self {
        ::core::convert::From::from(&value)
    }
}
impl ::core::convert::From<&BooleanKeyFrameAnimation> for CompositionAnimation {
    fn from(value: &BooleanKeyFrameAnimation) -> Self {
        ::windows::core::Interface::cast(value).unwrap()
    }
}
impl<'a> ::core::convert::From<&BooleanKeyFrameAnimation>
    for ::windows::core::InParam<'a, CompositionAnimation>
{
    fn from(value: &BooleanKeyFrameAnimation) -> Self {
        ::windows::core::InParam::owned(value.into())
    }
}
impl ::core::convert::From<BooleanKeyFrameAnimation> for CompositionObject {
    fn from(value: BooleanKeyFrameAnimation) -> Self {
        ::core::convert::From::from(&value)
    }
}
impl ::core::convert::From<&BooleanKeyFrameAnimation> for CompositionObject {
    fn from(value: &BooleanKeyFrameAnimation) -> Self {
        ::windows::core::Interface::cast(value).unwrap()
    }
}
impl<'a> ::core::convert::From<&BooleanKeyFrameAnimation>
    for ::windows::core::InParam<'a, CompositionObject>
{
    fn from(value: &BooleanKeyFrameAnimation) -> Self {
        ::windows::core::InParam::owned(value.into())
    }
}
unsafe impl ::core::marker::Send for BooleanKeyFrameAnimation {}
unsafe impl ::core::marker::Sync for BooleanKeyFrameAnimation {}
#[doc = "*Required features: `\"UI_Composition\"`*"]
#[repr(transparent)]
pub struct BounceEasingFunction(::windows::core::IUnknown);
impl BounceEasingFunction {
    pub fn PopulatePropertyInfo(
        &self,
        propertyname: &::windows::core::HSTRING,
        propertyinfo: &AnimationPropertyInfo,
    ) -> ::windows::core::Result<()> {
        let this = &::windows::core::Interface::cast::<IAnimationObject>(self)?;
        unsafe {
            (::windows::core::Vtable::vtable(this).PopulatePropertyInfo)(
                ::windows::core::Vtable::as_raw(this),
                ::core::mem::transmute_copy(propertyname),
                ::core::mem::transmute_copy(propertyinfo),
            )
            .ok()
        }
    }
    pub fn Mode(&self) -> ::windows::core::Result<CompositionEasingFunctionMode> {
        let this = self;
        unsafe {
            let mut result__ = ::core::mem::MaybeUninit::zeroed();
            (::windows::core::Vtable::vtable(this).Mode)(
                ::windows::core::Vtable::as_raw(this),
                result__.as_mut_ptr(),
            )
            .from_abi::<CompositionEasingFunctionMode>(result__)
        }
    }
    pub fn Bounces(&self) -> ::windows::core::Result<i32> {
        let this = self;
        unsafe {
            let mut result__ = ::core::mem::MaybeUninit::zeroed();
            (::windows::core::Vtable::vtable(this).Bounces)(
                ::windows::core::Vtable::as_raw(this),
                result__.as_mut_ptr(),
            )
            .from_abi::<i32>(result__)
        }
    }
    pub fn Bounciness(&self) -> ::windows::core::Result<f32> {
        let this = self;
        unsafe {
            let mut result__ = ::core::mem::MaybeUninit::zeroed();
            (::windows::core::Vtable::vtable(this).Bounciness)(
                ::windows::core::Vtable::as_raw(this),
                result__.as_mut_ptr(),
            )
            .from_abi::<f32>(result__)
        }
    }
    pub fn Close(&self) -> ::windows::core::Result<()> {
        let this = &::windows::core::Interface::cast::<::windows::Foundation::IClosable>(self)?;
        unsafe {
            (::windows::core::Vtable::vtable(this).Close)(::windows::core::Vtable::as_raw(this))
                .ok()
        }
    }
    pub fn Compositor(&self) -> ::windows::core::Result<Compositor> {
        let this = &::windows::core::Interface::cast::<ICompositionObject>(self)?;
        unsafe {
            let mut result__ = ::core::mem::MaybeUninit::zeroed();
            (::windows::core::Vtable::vtable(this).Compositor)(
                ::windows::core::Vtable::as_raw(this),
                result__.as_mut_ptr(),
            )
            .from_abi::<Compositor>(result__)
        }
    }
    pub fn Properties(&self) -> ::windows::core::Result<CompositionPropertySet> {
        let this = &::windows::core::Interface::cast::<ICompositionObject>(self)?;
        unsafe {
            let mut result__ = ::core::mem::MaybeUninit::zeroed();
            (::windows::core::Vtable::vtable(this).Properties)(
                ::windows::core::Vtable::as_raw(this),
                result__.as_mut_ptr(),
            )
            .from_abi::<CompositionPropertySet>(result__)
        }
    }
    pub fn StartAnimation<'a, P0>(
        &self,
        propertyname: &::windows::core::HSTRING,
        animation: P0,
    ) -> ::windows::core::Result<()>
    where
        P0: ::std::convert::Into<::windows::core::InParam<'a, CompositionAnimation>>,
    {
        let this = &::windows::core::Interface::cast::<ICompositionObject>(self)?;
        unsafe {
            (::windows::core::Vtable::vtable(this).StartAnimation)(
                ::windows::core::Vtable::as_raw(this),
                ::core::mem::transmute_copy(propertyname),
                animation.into().abi(),
            )
            .ok()
        }
    }
    pub fn StopAnimation(
        &self,
        propertyname: &::windows::core::HSTRING,
    ) -> ::windows::core::Result<()> {
        let this = &::windows::core::Interface::cast::<ICompositionObject>(self)?;
        unsafe {
            (::windows::core::Vtable::vtable(this).StopAnimation)(
                ::windows::core::Vtable::as_raw(this),
                ::core::mem::transmute_copy(propertyname),
            )
            .ok()
        }
    }
    pub fn Comment(&self) -> ::windows::core::Result<::windows::core::HSTRING> {
        let this = &::windows::core::Interface::cast::<ICompositionObject2>(self)?;
        unsafe {
            let mut result__ = ::core::mem::MaybeUninit::zeroed();
            (::windows::core::Vtable::vtable(this).Comment)(
                ::windows::core::Vtable::as_raw(this),
                result__.as_mut_ptr(),
            )
            .from_abi::<::windows::core::HSTRING>(result__)
        }
    }
    pub fn SetComment(&self, value: &::windows::core::HSTRING) -> ::windows::core::Result<()> {
        let this = &::windows::core::Interface::cast::<ICompositionObject2>(self)?;
        unsafe {
            (::windows::core::Vtable::vtable(this).SetComment)(
                ::windows::core::Vtable::as_raw(this),
                ::core::mem::transmute_copy(value),
            )
            .ok()
        }
    }
    pub fn ImplicitAnimations(&self) -> ::windows::core::Result<ImplicitAnimationCollection> {
        let this = &::windows::core::Interface::cast::<ICompositionObject2>(self)?;
        unsafe {
            let mut result__ = ::core::mem::MaybeUninit::zeroed();
            (::windows::core::Vtable::vtable(this).ImplicitAnimations)(
                ::windows::core::Vtable::as_raw(this),
                result__.as_mut_ptr(),
            )
            .from_abi::<ImplicitAnimationCollection>(result__)
        }
    }
    pub fn SetImplicitAnimations(
        &self,
        value: &ImplicitAnimationCollection,
    ) -> ::windows::core::Result<()> {
        let this = &::windows::core::Interface::cast::<ICompositionObject2>(self)?;
        unsafe {
            (::windows::core::Vtable::vtable(this).SetImplicitAnimations)(
                ::windows::core::Vtable::as_raw(this),
                ::core::mem::transmute_copy(value),
            )
            .ok()
        }
    }
    pub fn StartAnimationGroup<'a, P0, E0>(&self, value: P0) -> ::windows::core::Result<()>
    where
        P0: ::std::convert::TryInto<
            ::windows::core::InParam<'a, ICompositionAnimationBase>,
            Error = E0,
        >,
        E0: ::std::convert::Into<::windows::core::Error>,
    {
        let this = &::windows::core::Interface::cast::<ICompositionObject2>(self)?;
        unsafe {
            (::windows::core::Vtable::vtable(this).StartAnimationGroup)(
                ::windows::core::Vtable::as_raw(this),
                value.try_into().map_err(|e| e.into())?.abi(),
            )
            .ok()
        }
    }
    pub fn StopAnimationGroup<'a, P0, E0>(&self, value: P0) -> ::windows::core::Result<()>
    where
        P0: ::std::convert::TryInto<
            ::windows::core::InParam<'a, ICompositionAnimationBase>,
            Error = E0,
        >,
        E0: ::std::convert::Into<::windows::core::Error>,
    {
        let this = &::windows::core::Interface::cast::<ICompositionObject2>(self)?;
        unsafe {
            (::windows::core::Vtable::vtable(this).StopAnimationGroup)(
                ::windows::core::Vtable::as_raw(this),
                value.try_into().map_err(|e| e.into())?.abi(),
            )
            .ok()
        }
    }
    #[doc = "*Required features: `\"UI_Dispatching\"`*"]
    #[cfg(feature = "UI_Dispatching")]
    pub fn DispatcherQueue(&self) -> ::windows::core::Result<super::Dispatching::DispatcherQueue> {
        let this = &::windows::core::Interface::cast::<ICompositionObject3>(self)?;
        unsafe {
            let mut result__ = ::core::mem::MaybeUninit::zeroed();
            (::windows::core::Vtable::vtable(this).DispatcherQueue)(
                ::windows::core::Vtable::as_raw(this),
                result__.as_mut_ptr(),
            )
            .from_abi::<super::Dispatching::DispatcherQueue>(result__)
        }
    }
    pub fn TryGetAnimationController(
        &self,
        propertyname: &::windows::core::HSTRING,
    ) -> ::windows::core::Result<AnimationController> {
        let this = &::windows::core::Interface::cast::<ICompositionObject4>(self)?;
        unsafe {
            let mut result__ = ::core::mem::MaybeUninit::zeroed();
            (::windows::core::Vtable::vtable(this).TryGetAnimationController)(
                ::windows::core::Vtable::as_raw(this),
                ::core::mem::transmute_copy(propertyname),
                result__.as_mut_ptr(),
            )
            .from_abi::<AnimationController>(result__)
        }
    }
    pub fn StartAnimationWithController<'a, P0>(
        &self,
        propertyname: &::windows::core::HSTRING,
        animation: P0,
        animationcontroller: &AnimationController,
    ) -> ::windows::core::Result<()>
    where
        P0: ::std::convert::Into<::windows::core::InParam<'a, CompositionAnimation>>,
    {
        let this = &::windows::core::Interface::cast::<ICompositionObject5>(self)?;
        unsafe {
            (::windows::core::Vtable::vtable(this).StartAnimationWithController)(
                ::windows::core::Vtable::as_raw(this),
                ::core::mem::transmute_copy(propertyname),
                animation.into().abi(),
                ::core::mem::transmute_copy(animationcontroller),
            )
            .ok()
        }
    }
}
impl ::core::clone::Clone for BounceEasingFunction {
    fn clone(&self) -> Self {
        Self(self.0.clone())
    }
}
impl ::core::cmp::PartialEq for BounceEasingFunction {
    fn eq(&self, other: &Self) -> bool {
        self.0 == other.0
    }
}
impl ::core::cmp::Eq for BounceEasingFunction {}
impl ::core::fmt::Debug for BounceEasingFunction {
    fn fmt(&self, f: &mut ::core::fmt::Formatter<'_>) -> ::core::fmt::Result {
        f.debug_tuple("BounceEasingFunction").field(&self.0).finish()
    }
}
unsafe impl ::windows::core::RuntimeType for BounceEasingFunction {
    const SIGNATURE: ::windows::core::ConstBuffer = ::windows::core::ConstBuffer::from_slice(
        b"rc(Microsoft.UI.Composition.BounceEasingFunction;{fa11f3c0-697b-562f-af46-c6af666b6ec4})",
    );
    type DefaultType = ::core::option::Option<Self>;
    fn from_default(from: &Self::DefaultType) -> ::windows::core::Result<Self> {
        from.as_ref().cloned().ok_or(::windows::core::Error::OK)
    }
}
unsafe impl ::windows::core::Vtable for BounceEasingFunction {
    type Vtable = IBounceEasingFunction_Vtbl;
}
unsafe impl ::windows::core::Interface for BounceEasingFunction {
    const IID: ::windows::core::GUID = <IBounceEasingFunction as ::windows::core::Interface>::IID;
}
impl ::windows::core::RuntimeName for BounceEasingFunction {
    const NAME: &'static str = "Microsoft.UI.Composition.BounceEasingFunction";
}
::windows::core::interface_hierarchy!(
    BounceEasingFunction,
    ::windows::core::IUnknown,
    ::windows::core::IInspectable
);
impl ::core::convert::TryFrom<BounceEasingFunction> for IAnimationObject {
    type Error = ::windows::core::Error;
    fn try_from(value: BounceEasingFunction) -> ::windows::core::Result<Self> {
        ::core::convert::TryFrom::try_from(&value)
    }
}
impl ::core::convert::TryFrom<&BounceEasingFunction> for IAnimationObject {
    type Error = ::windows::core::Error;
    fn try_from(value: &BounceEasingFunction) -> ::windows::core::Result<Self> {
        ::windows::core::Interface::cast(value)
    }
}
impl<'a> ::core::convert::TryFrom<&BounceEasingFunction>
    for ::windows::core::InParam<'a, IAnimationObject>
{
    type Error = ::windows::core::Error;
    fn try_from(value: &BounceEasingFunction) -> ::windows::core::Result<Self> {
        let item = ::std::convert::TryInto::try_into(value)?;
        Ok(::windows::core::InParam::owned(item))
    }
}
impl ::core::convert::TryFrom<BounceEasingFunction> for ::windows::Foundation::IClosable {
    type Error = ::windows::core::Error;
    fn try_from(value: BounceEasingFunction) -> ::windows::core::Result<Self> {
        ::core::convert::TryFrom::try_from(&value)
    }
}
impl ::core::convert::TryFrom<&BounceEasingFunction> for ::windows::Foundation::IClosable {
    type Error = ::windows::core::Error;
    fn try_from(value: &BounceEasingFunction) -> ::windows::core::Result<Self> {
        ::windows::core::Interface::cast(value)
    }
}
impl<'a> ::core::convert::TryFrom<&BounceEasingFunction>
    for ::windows::core::InParam<'a, ::windows::Foundation::IClosable>
{
    type Error = ::windows::core::Error;
    fn try_from(value: &BounceEasingFunction) -> ::windows::core::Result<Self> {
        let item = ::std::convert::TryInto::try_into(value)?;
        Ok(::windows::core::InParam::owned(item))
    }
}
impl ::core::convert::From<BounceEasingFunction> for CompositionEasingFunction {
    fn from(value: BounceEasingFunction) -> Self {
        ::core::convert::From::from(&value)
    }
}
impl ::core::convert::From<&BounceEasingFunction> for CompositionEasingFunction {
    fn from(value: &BounceEasingFunction) -> Self {
        ::windows::core::Interface::cast(value).unwrap()
    }
}
impl<'a> ::core::convert::From<&BounceEasingFunction>
    for ::windows::core::InParam<'a, CompositionEasingFunction>
{
    fn from(value: &BounceEasingFunction) -> Self {
        ::windows::core::InParam::owned(value.into())
    }
}
impl ::core::convert::From<BounceEasingFunction> for CompositionObject {
    fn from(value: BounceEasingFunction) -> Self {
        ::core::convert::From::from(&value)
    }
}
impl ::core::convert::From<&BounceEasingFunction> for CompositionObject {
    fn from(value: &BounceEasingFunction) -> Self {
        ::windows::core::Interface::cast(value).unwrap()
    }
}
impl<'a> ::core::convert::From<&BounceEasingFunction>
    for ::windows::core::InParam<'a, CompositionObject>
{
    fn from(value: &BounceEasingFunction) -> Self {
        ::windows::core::InParam::owned(value.into())
    }
}
unsafe impl ::core::marker::Send for BounceEasingFunction {}
unsafe impl ::core::marker::Sync for BounceEasingFunction {}
#[doc = "*Required features: `\"UI_Composition\"`*"]
#[repr(transparent)]
pub struct BounceScalarNaturalMotionAnimation(::windows::core::IUnknown);
impl BounceScalarNaturalMotionAnimation {
    pub fn PopulatePropertyInfo(
        &self,
        propertyname: &::windows::core::HSTRING,
        propertyinfo: &AnimationPropertyInfo,
    ) -> ::windows::core::Result<()> {
        let this = &::windows::core::Interface::cast::<IAnimationObject>(self)?;
        unsafe {
            (::windows::core::Vtable::vtable(this).PopulatePropertyInfo)(
                ::windows::core::Vtable::as_raw(this),
                ::core::mem::transmute_copy(propertyname),
                ::core::mem::transmute_copy(propertyinfo),
            )
            .ok()
        }
    }
    pub fn Acceleration(&self) -> ::windows::core::Result<f32> {
        let this = self;
        unsafe {
            let mut result__ = ::core::mem::MaybeUninit::zeroed();
            (::windows::core::Vtable::vtable(this).Acceleration)(
                ::windows::core::Vtable::as_raw(this),
                result__.as_mut_ptr(),
            )
            .from_abi::<f32>(result__)
        }
    }
    pub fn SetAcceleration(&self, value: f32) -> ::windows::core::Result<()> {
        let this = self;
        unsafe {
            (::windows::core::Vtable::vtable(this).SetAcceleration)(
                ::windows::core::Vtable::as_raw(this),
                value,
            )
            .ok()
        }
    }
    pub fn Restitution(&self) -> ::windows::core::Result<f32> {
        let this = self;
        unsafe {
            let mut result__ = ::core::mem::MaybeUninit::zeroed();
            (::windows::core::Vtable::vtable(this).Restitution)(
                ::windows::core::Vtable::as_raw(this),
                result__.as_mut_ptr(),
            )
            .from_abi::<f32>(result__)
        }
    }
    pub fn SetRestitution(&self, value: f32) -> ::windows::core::Result<()> {
        let this = self;
        unsafe {
            (::windows::core::Vtable::vtable(this).SetRestitution)(
                ::windows::core::Vtable::as_raw(this),
                value,
            )
            .ok()
        }
    }
    pub fn Close(&self) -> ::windows::core::Result<()> {
        let this = &::windows::core::Interface::cast::<::windows::Foundation::IClosable>(self)?;
        unsafe {
            (::windows::core::Vtable::vtable(this).Close)(::windows::core::Vtable::as_raw(this))
                .ok()
        }
    }
    pub fn ClearAllParameters(&self) -> ::windows::core::Result<()> {
        let this = &::windows::core::Interface::cast::<ICompositionAnimation>(self)?;
        unsafe {
            (::windows::core::Vtable::vtable(this).ClearAllParameters)(
                ::windows::core::Vtable::as_raw(this),
            )
            .ok()
        }
    }
    pub fn ClearParameter(&self, key: &::windows::core::HSTRING) -> ::windows::core::Result<()> {
        let this = &::windows::core::Interface::cast::<ICompositionAnimation>(self)?;
        unsafe {
            (::windows::core::Vtable::vtable(this).ClearParameter)(
                ::windows::core::Vtable::as_raw(this),
                ::core::mem::transmute_copy(key),
            )
            .ok()
        }
    }
    pub fn SetColorParameter(
        &self,
        key: &::windows::core::HSTRING,
        value: ::windows::UI::Color,
    ) -> ::windows::core::Result<()> {
        let this = &::windows::core::Interface::cast::<ICompositionAnimation>(self)?;
        unsafe {
            (::windows::core::Vtable::vtable(this).SetColorParameter)(
                ::windows::core::Vtable::as_raw(this),
                ::core::mem::transmute_copy(key),
                value,
            )
            .ok()
        }
    }
    pub fn SetMatrix3x2Parameter(
        &self,
        key: &::windows::core::HSTRING,
        value: ::windows::Foundation::Numerics::Matrix3x2,
    ) -> ::windows::core::Result<()> {
        let this = &::windows::core::Interface::cast::<ICompositionAnimation>(self)?;
        unsafe {
            (::windows::core::Vtable::vtable(this).SetMatrix3x2Parameter)(
                ::windows::core::Vtable::as_raw(this),
                ::core::mem::transmute_copy(key),
                value,
            )
            .ok()
        }
    }
    pub fn SetMatrix4x4Parameter(
        &self,
        key: &::windows::core::HSTRING,
        value: ::windows::Foundation::Numerics::Matrix4x4,
    ) -> ::windows::core::Result<()> {
        let this = &::windows::core::Interface::cast::<ICompositionAnimation>(self)?;
        unsafe {
            (::windows::core::Vtable::vtable(this).SetMatrix4x4Parameter)(
                ::windows::core::Vtable::as_raw(this),
                ::core::mem::transmute_copy(key),
                value,
            )
            .ok()
        }
    }
    pub fn SetQuaternionParameter(
        &self,
        key: &::windows::core::HSTRING,
        value: ::windows::Foundation::Numerics::Quaternion,
    ) -> ::windows::core::Result<()> {
        let this = &::windows::core::Interface::cast::<ICompositionAnimation>(self)?;
        unsafe {
            (::windows::core::Vtable::vtable(this).SetQuaternionParameter)(
                ::windows::core::Vtable::as_raw(this),
                ::core::mem::transmute_copy(key),
                value,
            )
            .ok()
        }
    }
    pub fn SetReferenceParameter<'a, P0>(
        &self,
        key: &::windows::core::HSTRING,
        compositionobject: P0,
    ) -> ::windows::core::Result<()>
    where
        P0: ::std::convert::Into<::windows::core::InParam<'a, CompositionObject>>,
    {
        let this = &::windows::core::Interface::cast::<ICompositionAnimation>(self)?;
        unsafe {
            (::windows::core::Vtable::vtable(this).SetReferenceParameter)(
                ::windows::core::Vtable::as_raw(this),
                ::core::mem::transmute_copy(key),
                compositionobject.into().abi(),
            )
            .ok()
        }
    }
    pub fn SetScalarParameter(
        &self,
        key: &::windows::core::HSTRING,
        value: f32,
    ) -> ::windows::core::Result<()> {
        let this = &::windows::core::Interface::cast::<ICompositionAnimation>(self)?;
        unsafe {
            (::windows::core::Vtable::vtable(this).SetScalarParameter)(
                ::windows::core::Vtable::as_raw(this),
                ::core::mem::transmute_copy(key),
                value,
            )
            .ok()
        }
    }
    pub fn SetVector2Parameter(
        &self,
        key: &::windows::core::HSTRING,
        value: ::windows::Foundation::Numerics::Vector2,
    ) -> ::windows::core::Result<()> {
        let this = &::windows::core::Interface::cast::<ICompositionAnimation>(self)?;
        unsafe {
            (::windows::core::Vtable::vtable(this).SetVector2Parameter)(
                ::windows::core::Vtable::as_raw(this),
                ::core::mem::transmute_copy(key),
                value,
            )
            .ok()
        }
    }
    pub fn SetVector3Parameter(
        &self,
        key: &::windows::core::HSTRING,
        value: ::windows::Foundation::Numerics::Vector3,
    ) -> ::windows::core::Result<()> {
        let this = &::windows::core::Interface::cast::<ICompositionAnimation>(self)?;
        unsafe {
            (::windows::core::Vtable::vtable(this).SetVector3Parameter)(
                ::windows::core::Vtable::as_raw(this),
                ::core::mem::transmute_copy(key),
                value,
            )
            .ok()
        }
    }
    pub fn SetVector4Parameter(
        &self,
        key: &::windows::core::HSTRING,
        value: ::windows::Foundation::Numerics::Vector4,
    ) -> ::windows::core::Result<()> {
        let this = &::windows::core::Interface::cast::<ICompositionAnimation>(self)?;
        unsafe {
            (::windows::core::Vtable::vtable(this).SetVector4Parameter)(
                ::windows::core::Vtable::as_raw(this),
                ::core::mem::transmute_copy(key),
                value,
            )
            .ok()
        }
    }
    pub fn SetBooleanParameter(
        &self,
        key: &::windows::core::HSTRING,
        value: bool,
    ) -> ::windows::core::Result<()> {
        let this = &::windows::core::Interface::cast::<ICompositionAnimation2>(self)?;
        unsafe {
            (::windows::core::Vtable::vtable(this).SetBooleanParameter)(
                ::windows::core::Vtable::as_raw(this),
                ::core::mem::transmute_copy(key),
                value,
            )
            .ok()
        }
    }
    pub fn Target(&self) -> ::windows::core::Result<::windows::core::HSTRING> {
        let this = &::windows::core::Interface::cast::<ICompositionAnimation2>(self)?;
        unsafe {
            let mut result__ = ::core::mem::MaybeUninit::zeroed();
            (::windows::core::Vtable::vtable(this).Target)(
                ::windows::core::Vtable::as_raw(this),
                result__.as_mut_ptr(),
            )
            .from_abi::<::windows::core::HSTRING>(result__)
        }
    }
    pub fn SetTarget(&self, value: &::windows::core::HSTRING) -> ::windows::core::Result<()> {
        let this = &::windows::core::Interface::cast::<ICompositionAnimation2>(self)?;
        unsafe {
            (::windows::core::Vtable::vtable(this).SetTarget)(
                ::windows::core::Vtable::as_raw(this),
                ::core::mem::transmute_copy(value),
            )
            .ok()
        }
    }
    pub fn InitialValueExpressions(
        &self,
    ) -> ::windows::core::Result<InitialValueExpressionCollection> {
        let this = &::windows::core::Interface::cast::<ICompositionAnimation3>(self)?;
        unsafe {
            let mut result__ = ::core::mem::MaybeUninit::zeroed();
            (::windows::core::Vtable::vtable(this).InitialValueExpressions)(
                ::windows::core::Vtable::as_raw(this),
                result__.as_mut_ptr(),
            )
            .from_abi::<InitialValueExpressionCollection>(result__)
        }
    }
    pub fn SetExpressionReferenceParameter<'a, P0, E0>(
        &self,
        parametername: &::windows::core::HSTRING,
        source: P0,
    ) -> ::windows::core::Result<()>
    where
        P0: ::std::convert::TryInto<::windows::core::InParam<'a, IAnimationObject>, Error = E0>,
        E0: ::std::convert::Into<::windows::core::Error>,
    {
        let this = &::windows::core::Interface::cast::<ICompositionAnimation4>(self)?;
        unsafe {
            (::windows::core::Vtable::vtable(this).SetExpressionReferenceParameter)(
                ::windows::core::Vtable::as_raw(this),
                ::core::mem::transmute_copy(parametername),
                source.try_into().map_err(|e| e.into())?.abi(),
            )
            .ok()
        }
    }
    pub fn Compositor(&self) -> ::windows::core::Result<Compositor> {
        let this = &::windows::core::Interface::cast::<ICompositionObject>(self)?;
        unsafe {
            let mut result__ = ::core::mem::MaybeUninit::zeroed();
            (::windows::core::Vtable::vtable(this).Compositor)(
                ::windows::core::Vtable::as_raw(this),
                result__.as_mut_ptr(),
            )
            .from_abi::<Compositor>(result__)
        }
    }
    pub fn Properties(&self) -> ::windows::core::Result<CompositionPropertySet> {
        let this = &::windows::core::Interface::cast::<ICompositionObject>(self)?;
        unsafe {
            let mut result__ = ::core::mem::MaybeUninit::zeroed();
            (::windows::core::Vtable::vtable(this).Properties)(
                ::windows::core::Vtable::as_raw(this),
                result__.as_mut_ptr(),
            )
            .from_abi::<CompositionPropertySet>(result__)
        }
    }
    pub fn StartAnimation<'a, P0>(
        &self,
        propertyname: &::windows::core::HSTRING,
        animation: P0,
    ) -> ::windows::core::Result<()>
    where
        P0: ::std::convert::Into<::windows::core::InParam<'a, CompositionAnimation>>,
    {
        let this = &::windows::core::Interface::cast::<ICompositionObject>(self)?;
        unsafe {
            (::windows::core::Vtable::vtable(this).StartAnimation)(
                ::windows::core::Vtable::as_raw(this),
                ::core::mem::transmute_copy(propertyname),
                animation.into().abi(),
            )
            .ok()
        }
    }
    pub fn StopAnimation(
        &self,
        propertyname: &::windows::core::HSTRING,
    ) -> ::windows::core::Result<()> {
        let this = &::windows::core::Interface::cast::<ICompositionObject>(self)?;
        unsafe {
            (::windows::core::Vtable::vtable(this).StopAnimation)(
                ::windows::core::Vtable::as_raw(this),
                ::core::mem::transmute_copy(propertyname),
            )
            .ok()
        }
    }
    pub fn Comment(&self) -> ::windows::core::Result<::windows::core::HSTRING> {
        let this = &::windows::core::Interface::cast::<ICompositionObject2>(self)?;
        unsafe {
            let mut result__ = ::core::mem::MaybeUninit::zeroed();
            (::windows::core::Vtable::vtable(this).Comment)(
                ::windows::core::Vtable::as_raw(this),
                result__.as_mut_ptr(),
            )
            .from_abi::<::windows::core::HSTRING>(result__)
        }
    }
    pub fn SetComment(&self, value: &::windows::core::HSTRING) -> ::windows::core::Result<()> {
        let this = &::windows::core::Interface::cast::<ICompositionObject2>(self)?;
        unsafe {
            (::windows::core::Vtable::vtable(this).SetComment)(
                ::windows::core::Vtable::as_raw(this),
                ::core::mem::transmute_copy(value),
            )
            .ok()
        }
    }
    pub fn ImplicitAnimations(&self) -> ::windows::core::Result<ImplicitAnimationCollection> {
        let this = &::windows::core::Interface::cast::<ICompositionObject2>(self)?;
        unsafe {
            let mut result__ = ::core::mem::MaybeUninit::zeroed();
            (::windows::core::Vtable::vtable(this).ImplicitAnimations)(
                ::windows::core::Vtable::as_raw(this),
                result__.as_mut_ptr(),
            )
            .from_abi::<ImplicitAnimationCollection>(result__)
        }
    }
    pub fn SetImplicitAnimations(
        &self,
        value: &ImplicitAnimationCollection,
    ) -> ::windows::core::Result<()> {
        let this = &::windows::core::Interface::cast::<ICompositionObject2>(self)?;
        unsafe {
            (::windows::core::Vtable::vtable(this).SetImplicitAnimations)(
                ::windows::core::Vtable::as_raw(this),
                ::core::mem::transmute_copy(value),
            )
            .ok()
        }
    }
    pub fn StartAnimationGroup<'a, P0, E0>(&self, value: P0) -> ::windows::core::Result<()>
    where
        P0: ::std::convert::TryInto<
            ::windows::core::InParam<'a, ICompositionAnimationBase>,
            Error = E0,
        >,
        E0: ::std::convert::Into<::windows::core::Error>,
    {
        let this = &::windows::core::Interface::cast::<ICompositionObject2>(self)?;
        unsafe {
            (::windows::core::Vtable::vtable(this).StartAnimationGroup)(
                ::windows::core::Vtable::as_raw(this),
                value.try_into().map_err(|e| e.into())?.abi(),
            )
            .ok()
        }
    }
    pub fn StopAnimationGroup<'a, P0, E0>(&self, value: P0) -> ::windows::core::Result<()>
    where
        P0: ::std::convert::TryInto<
            ::windows::core::InParam<'a, ICompositionAnimationBase>,
            Error = E0,
        >,
        E0: ::std::convert::Into<::windows::core::Error>,
    {
        let this = &::windows::core::Interface::cast::<ICompositionObject2>(self)?;
        unsafe {
            (::windows::core::Vtable::vtable(this).StopAnimationGroup)(
                ::windows::core::Vtable::as_raw(this),
                value.try_into().map_err(|e| e.into())?.abi(),
            )
            .ok()
        }
    }
    #[doc = "*Required features: `\"UI_Dispatching\"`*"]
    #[cfg(feature = "UI_Dispatching")]
    pub fn DispatcherQueue(&self) -> ::windows::core::Result<super::Dispatching::DispatcherQueue> {
        let this = &::windows::core::Interface::cast::<ICompositionObject3>(self)?;
        unsafe {
            let mut result__ = ::core::mem::MaybeUninit::zeroed();
            (::windows::core::Vtable::vtable(this).DispatcherQueue)(
                ::windows::core::Vtable::as_raw(this),
                result__.as_mut_ptr(),
            )
            .from_abi::<super::Dispatching::DispatcherQueue>(result__)
        }
    }
    pub fn TryGetAnimationController(
        &self,
        propertyname: &::windows::core::HSTRING,
    ) -> ::windows::core::Result<AnimationController> {
        let this = &::windows::core::Interface::cast::<ICompositionObject4>(self)?;
        unsafe {
            let mut result__ = ::core::mem::MaybeUninit::zeroed();
            (::windows::core::Vtable::vtable(this).TryGetAnimationController)(
                ::windows::core::Vtable::as_raw(this),
                ::core::mem::transmute_copy(propertyname),
                result__.as_mut_ptr(),
            )
            .from_abi::<AnimationController>(result__)
        }
    }
    pub fn StartAnimationWithController<'a, P0>(
        &self,
        propertyname: &::windows::core::HSTRING,
        animation: P0,
        animationcontroller: &AnimationController,
    ) -> ::windows::core::Result<()>
    where
        P0: ::std::convert::Into<::windows::core::InParam<'a, CompositionAnimation>>,
    {
        let this = &::windows::core::Interface::cast::<ICompositionObject5>(self)?;
        unsafe {
            (::windows::core::Vtable::vtable(this).StartAnimationWithController)(
                ::windows::core::Vtable::as_raw(this),
                ::core::mem::transmute_copy(propertyname),
                animation.into().abi(),
                ::core::mem::transmute_copy(animationcontroller),
            )
            .ok()
        }
    }
    pub fn DelayBehavior(&self) -> ::windows::core::Result<AnimationDelayBehavior> {
        let this = &::windows::core::Interface::cast::<INaturalMotionAnimation>(self)?;
        unsafe {
            let mut result__ = ::core::mem::MaybeUninit::zeroed();
            (::windows::core::Vtable::vtable(this).DelayBehavior)(
                ::windows::core::Vtable::as_raw(this),
                result__.as_mut_ptr(),
            )
            .from_abi::<AnimationDelayBehavior>(result__)
        }
    }
    pub fn SetDelayBehavior(&self, value: AnimationDelayBehavior) -> ::windows::core::Result<()> {
        let this = &::windows::core::Interface::cast::<INaturalMotionAnimation>(self)?;
        unsafe {
            (::windows::core::Vtable::vtable(this).SetDelayBehavior)(
                ::windows::core::Vtable::as_raw(this),
                value,
            )
            .ok()
        }
    }
    pub fn DelayTime(&self) -> ::windows::core::Result<::windows::Foundation::TimeSpan> {
        let this = &::windows::core::Interface::cast::<INaturalMotionAnimation>(self)?;
        unsafe {
            let mut result__ = ::core::mem::MaybeUninit::zeroed();
            (::windows::core::Vtable::vtable(this).DelayTime)(
                ::windows::core::Vtable::as_raw(this),
                result__.as_mut_ptr(),
            )
            .from_abi::<::windows::Foundation::TimeSpan>(result__)
        }
    }
    pub fn SetDelayTime(
        &self,
        value: ::windows::Foundation::TimeSpan,
    ) -> ::windows::core::Result<()> {
        let this = &::windows::core::Interface::cast::<INaturalMotionAnimation>(self)?;
        unsafe {
            (::windows::core::Vtable::vtable(this).SetDelayTime)(
                ::windows::core::Vtable::as_raw(this),
                value,
            )
            .ok()
        }
    }
    pub fn StopBehavior(&self) -> ::windows::core::Result<AnimationStopBehavior> {
        let this = &::windows::core::Interface::cast::<INaturalMotionAnimation>(self)?;
        unsafe {
            let mut result__ = ::core::mem::MaybeUninit::zeroed();
            (::windows::core::Vtable::vtable(this).StopBehavior)(
                ::windows::core::Vtable::as_raw(this),
                result__.as_mut_ptr(),
            )
            .from_abi::<AnimationStopBehavior>(result__)
        }
    }
    pub fn SetStopBehavior(&self, value: AnimationStopBehavior) -> ::windows::core::Result<()> {
        let this = &::windows::core::Interface::cast::<INaturalMotionAnimation>(self)?;
        unsafe {
            (::windows::core::Vtable::vtable(this).SetStopBehavior)(
                ::windows::core::Vtable::as_raw(this),
                value,
            )
            .ok()
        }
    }
    pub fn FinalValue(&self) -> ::windows::core::Result<::windows::Foundation::IReference<f32>> {
        let this = &::windows::core::Interface::cast::<IScalarNaturalMotionAnimation>(self)?;
        unsafe {
            let mut result__ = ::core::mem::MaybeUninit::zeroed();
            (::windows::core::Vtable::vtable(this).FinalValue)(
                ::windows::core::Vtable::as_raw(this),
                result__.as_mut_ptr(),
            )
            .from_abi::<::windows::Foundation::IReference<f32>>(result__)
        }
    }
    pub fn SetFinalValue<'a, P0, E0>(&self, value: P0) -> ::windows::core::Result<()>
    where
        P0: ::std::convert::TryInto<
            ::windows::core::InParam<'a, ::windows::Foundation::IReference<f32>>,
            Error = E0,
        >,
        E0: ::std::convert::Into<::windows::core::Error>,
    {
        let this = &::windows::core::Interface::cast::<IScalarNaturalMotionAnimation>(self)?;
        unsafe {
            (::windows::core::Vtable::vtable(this).SetFinalValue)(
                ::windows::core::Vtable::as_raw(this),
                value.try_into().map_err(|e| e.into())?.abi(),
            )
            .ok()
        }
    }
    pub fn InitialValue(&self) -> ::windows::core::Result<::windows::Foundation::IReference<f32>> {
        let this = &::windows::core::Interface::cast::<IScalarNaturalMotionAnimation>(self)?;
        unsafe {
            let mut result__ = ::core::mem::MaybeUninit::zeroed();
            (::windows::core::Vtable::vtable(this).InitialValue)(
                ::windows::core::Vtable::as_raw(this),
                result__.as_mut_ptr(),
            )
            .from_abi::<::windows::Foundation::IReference<f32>>(result__)
        }
    }
    pub fn SetInitialValue<'a, P0, E0>(&self, value: P0) -> ::windows::core::Result<()>
    where
        P0: ::std::convert::TryInto<
            ::windows::core::InParam<'a, ::windows::Foundation::IReference<f32>>,
            Error = E0,
        >,
        E0: ::std::convert::Into<::windows::core::Error>,
    {
        let this = &::windows::core::Interface::cast::<IScalarNaturalMotionAnimation>(self)?;
        unsafe {
            (::windows::core::Vtable::vtable(this).SetInitialValue)(
                ::windows::core::Vtable::as_raw(this),
                value.try_into().map_err(|e| e.into())?.abi(),
            )
            .ok()
        }
    }
    pub fn InitialVelocity(&self) -> ::windows::core::Result<f32> {
        let this = &::windows::core::Interface::cast::<IScalarNaturalMotionAnimation>(self)?;
        unsafe {
            let mut result__ = ::core::mem::MaybeUninit::zeroed();
            (::windows::core::Vtable::vtable(this).InitialVelocity)(
                ::windows::core::Vtable::as_raw(this),
                result__.as_mut_ptr(),
            )
            .from_abi::<f32>(result__)
        }
    }
    pub fn SetInitialVelocity(&self, value: f32) -> ::windows::core::Result<()> {
        let this = &::windows::core::Interface::cast::<IScalarNaturalMotionAnimation>(self)?;
        unsafe {
            (::windows::core::Vtable::vtable(this).SetInitialVelocity)(
                ::windows::core::Vtable::as_raw(this),
                value,
            )
            .ok()
        }
    }
}
impl ::core::clone::Clone for BounceScalarNaturalMotionAnimation {
    fn clone(&self) -> Self {
        Self(self.0.clone())
    }
}
impl ::core::cmp::PartialEq for BounceScalarNaturalMotionAnimation {
    fn eq(&self, other: &Self) -> bool {
        self.0 == other.0
    }
}
impl ::core::cmp::Eq for BounceScalarNaturalMotionAnimation {}
impl ::core::fmt::Debug for BounceScalarNaturalMotionAnimation {
    fn fmt(&self, f: &mut ::core::fmt::Formatter<'_>) -> ::core::fmt::Result {
        f.debug_tuple("BounceScalarNaturalMotionAnimation").field(&self.0).finish()
    }
}
unsafe impl ::windows::core::RuntimeType for BounceScalarNaturalMotionAnimation {
    const SIGNATURE : ::windows::core::ConstBuffer = ::windows::core::ConstBuffer::from_slice ( b"rc(Microsoft.UI.Composition.BounceScalarNaturalMotionAnimation;{1c0c4b76-c4d6-5dd9-8dd6-dbe35c7b7e55})" ) ;
    type DefaultType = ::core::option::Option<Self>;
    fn from_default(from: &Self::DefaultType) -> ::windows::core::Result<Self> {
        from.as_ref().cloned().ok_or(::windows::core::Error::OK)
    }
}
unsafe impl ::windows::core::Vtable for BounceScalarNaturalMotionAnimation {
    type Vtable = IBounceScalarNaturalMotionAnimation_Vtbl;
}
unsafe impl ::windows::core::Interface for BounceScalarNaturalMotionAnimation {
    const IID: ::windows::core::GUID =
        <IBounceScalarNaturalMotionAnimation as ::windows::core::Interface>::IID;
}
impl ::windows::core::RuntimeName for BounceScalarNaturalMotionAnimation {
    const NAME: &'static str = "Microsoft.UI.Composition.BounceScalarNaturalMotionAnimation";
}
::windows::core::interface_hierarchy!(
    BounceScalarNaturalMotionAnimation,
    ::windows::core::IUnknown,
    ::windows::core::IInspectable
);
impl ::core::convert::TryFrom<BounceScalarNaturalMotionAnimation> for IAnimationObject {
    type Error = ::windows::core::Error;
    fn try_from(value: BounceScalarNaturalMotionAnimation) -> ::windows::core::Result<Self> {
        ::core::convert::TryFrom::try_from(&value)
    }
}
impl ::core::convert::TryFrom<&BounceScalarNaturalMotionAnimation> for IAnimationObject {
    type Error = ::windows::core::Error;
    fn try_from(value: &BounceScalarNaturalMotionAnimation) -> ::windows::core::Result<Self> {
        ::windows::core::Interface::cast(value)
    }
}
impl<'a> ::core::convert::TryFrom<&BounceScalarNaturalMotionAnimation>
    for ::windows::core::InParam<'a, IAnimationObject>
{
    type Error = ::windows::core::Error;
    fn try_from(value: &BounceScalarNaturalMotionAnimation) -> ::windows::core::Result<Self> {
        let item = ::std::convert::TryInto::try_into(value)?;
        Ok(::windows::core::InParam::owned(item))
    }
}
impl ::core::convert::TryFrom<BounceScalarNaturalMotionAnimation>
    for ::windows::Foundation::IClosable
{
    type Error = ::windows::core::Error;
    fn try_from(value: BounceScalarNaturalMotionAnimation) -> ::windows::core::Result<Self> {
        ::core::convert::TryFrom::try_from(&value)
    }
}
impl ::core::convert::TryFrom<&BounceScalarNaturalMotionAnimation>
    for ::windows::Foundation::IClosable
{
    type Error = ::windows::core::Error;
    fn try_from(value: &BounceScalarNaturalMotionAnimation) -> ::windows::core::Result<Self> {
        ::windows::core::Interface::cast(value)
    }
}
impl<'a> ::core::convert::TryFrom<&BounceScalarNaturalMotionAnimation>
    for ::windows::core::InParam<'a, ::windows::Foundation::IClosable>
{
    type Error = ::windows::core::Error;
    fn try_from(value: &BounceScalarNaturalMotionAnimation) -> ::windows::core::Result<Self> {
        let item = ::std::convert::TryInto::try_into(value)?;
        Ok(::windows::core::InParam::owned(item))
    }
}
impl ::core::convert::TryFrom<BounceScalarNaturalMotionAnimation> for ICompositionAnimationBase {
    type Error = ::windows::core::Error;
    fn try_from(value: BounceScalarNaturalMotionAnimation) -> ::windows::core::Result<Self> {
        ::core::convert::TryFrom::try_from(&value)
    }
}
impl ::core::convert::TryFrom<&BounceScalarNaturalMotionAnimation> for ICompositionAnimationBase {
    type Error = ::windows::core::Error;
    fn try_from(value: &BounceScalarNaturalMotionAnimation) -> ::windows::core::Result<Self> {
        ::windows::core::Interface::cast(value)
    }
}
impl<'a> ::core::convert::TryFrom<&BounceScalarNaturalMotionAnimation>
    for ::windows::core::InParam<'a, ICompositionAnimationBase>
{
    type Error = ::windows::core::Error;
    fn try_from(value: &BounceScalarNaturalMotionAnimation) -> ::windows::core::Result<Self> {
        let item = ::std::convert::TryInto::try_into(value)?;
        Ok(::windows::core::InParam::owned(item))
    }
}
impl ::core::convert::From<BounceScalarNaturalMotionAnimation> for ScalarNaturalMotionAnimation {
    fn from(value: BounceScalarNaturalMotionAnimation) -> Self {
        ::core::convert::From::from(&value)
    }
}
impl ::core::convert::From<&BounceScalarNaturalMotionAnimation> for ScalarNaturalMotionAnimation {
    fn from(value: &BounceScalarNaturalMotionAnimation) -> Self {
        ::windows::core::Interface::cast(value).unwrap()
    }
}
impl<'a> ::core::convert::From<&BounceScalarNaturalMotionAnimation>
    for ::windows::core::InParam<'a, ScalarNaturalMotionAnimation>
{
    fn from(value: &BounceScalarNaturalMotionAnimation) -> Self {
        ::windows::core::InParam::owned(value.into())
    }
}
impl ::core::convert::From<BounceScalarNaturalMotionAnimation> for NaturalMotionAnimation {
    fn from(value: BounceScalarNaturalMotionAnimation) -> Self {
        ::core::convert::From::from(&value)
    }
}
impl ::core::convert::From<&BounceScalarNaturalMotionAnimation> for NaturalMotionAnimation {
    fn from(value: &BounceScalarNaturalMotionAnimation) -> Self {
        ::windows::core::Interface::cast(value).unwrap()
    }
}
impl<'a> ::core::convert::From<&BounceScalarNaturalMotionAnimation>
    for ::windows::core::InParam<'a, NaturalMotionAnimation>
{
    fn from(value: &BounceScalarNaturalMotionAnimation) -> Self {
        ::windows::core::InParam::owned(value.into())
    }
}
impl ::core::convert::From<BounceScalarNaturalMotionAnimation> for CompositionAnimation {
    fn from(value: BounceScalarNaturalMotionAnimation) -> Self {
        ::core::convert::From::from(&value)
    }
}
impl ::core::convert::From<&BounceScalarNaturalMotionAnimation> for CompositionAnimation {
    fn from(value: &BounceScalarNaturalMotionAnimation) -> Self {
        ::windows::core::Interface::cast(value).unwrap()
    }
}
impl<'a> ::core::convert::From<&BounceScalarNaturalMotionAnimation>
    for ::windows::core::InParam<'a, CompositionAnimation>
{
    fn from(value: &BounceScalarNaturalMotionAnimation) -> Self {
        ::windows::core::InParam::owned(value.into())
    }
}
impl ::core::convert::From<BounceScalarNaturalMotionAnimation> for CompositionObject {
    fn from(value: BounceScalarNaturalMotionAnimation) -> Self {
        ::core::convert::From::from(&value)
    }
}
impl ::core::convert::From<&BounceScalarNaturalMotionAnimation> for CompositionObject {
    fn from(value: &BounceScalarNaturalMotionAnimation) -> Self {
        ::windows::core::Interface::cast(value).unwrap()
    }
}
impl<'a> ::core::convert::From<&BounceScalarNaturalMotionAnimation>
    for ::windows::core::InParam<'a, CompositionObject>
{
    fn from(value: &BounceScalarNaturalMotionAnimation) -> Self {
        ::windows::core::InParam::owned(value.into())
    }
}
unsafe impl ::core::marker::Send for BounceScalarNaturalMotionAnimation {}
unsafe impl ::core::marker::Sync for BounceScalarNaturalMotionAnimation {}
#[doc = "*Required features: `\"UI_Composition\"`*"]
#[repr(transparent)]
pub struct BounceVector2NaturalMotionAnimation(::windows::core::IUnknown);
impl BounceVector2NaturalMotionAnimation {
    pub fn PopulatePropertyInfo(
        &self,
        propertyname: &::windows::core::HSTRING,
        propertyinfo: &AnimationPropertyInfo,
    ) -> ::windows::core::Result<()> {
        let this = &::windows::core::Interface::cast::<IAnimationObject>(self)?;
        unsafe {
            (::windows::core::Vtable::vtable(this).PopulatePropertyInfo)(
                ::windows::core::Vtable::as_raw(this),
                ::core::mem::transmute_copy(propertyname),
                ::core::mem::transmute_copy(propertyinfo),
            )
            .ok()
        }
    }
    pub fn Acceleration(&self) -> ::windows::core::Result<f32> {
        let this = self;
        unsafe {
            let mut result__ = ::core::mem::MaybeUninit::zeroed();
            (::windows::core::Vtable::vtable(this).Acceleration)(
                ::windows::core::Vtable::as_raw(this),
                result__.as_mut_ptr(),
            )
            .from_abi::<f32>(result__)
        }
    }
    pub fn SetAcceleration(&self, value: f32) -> ::windows::core::Result<()> {
        let this = self;
        unsafe {
            (::windows::core::Vtable::vtable(this).SetAcceleration)(
                ::windows::core::Vtable::as_raw(this),
                value,
            )
            .ok()
        }
    }
    pub fn Restitution(&self) -> ::windows::core::Result<f32> {
        let this = self;
        unsafe {
            let mut result__ = ::core::mem::MaybeUninit::zeroed();
            (::windows::core::Vtable::vtable(this).Restitution)(
                ::windows::core::Vtable::as_raw(this),
                result__.as_mut_ptr(),
            )
            .from_abi::<f32>(result__)
        }
    }
    pub fn SetRestitution(&self, value: f32) -> ::windows::core::Result<()> {
        let this = self;
        unsafe {
            (::windows::core::Vtable::vtable(this).SetRestitution)(
                ::windows::core::Vtable::as_raw(this),
                value,
            )
            .ok()
        }
    }
    pub fn Close(&self) -> ::windows::core::Result<()> {
        let this = &::windows::core::Interface::cast::<::windows::Foundation::IClosable>(self)?;
        unsafe {
            (::windows::core::Vtable::vtable(this).Close)(::windows::core::Vtable::as_raw(this))
                .ok()
        }
    }
    pub fn ClearAllParameters(&self) -> ::windows::core::Result<()> {
        let this = &::windows::core::Interface::cast::<ICompositionAnimation>(self)?;
        unsafe {
            (::windows::core::Vtable::vtable(this).ClearAllParameters)(
                ::windows::core::Vtable::as_raw(this),
            )
            .ok()
        }
    }
    pub fn ClearParameter(&self, key: &::windows::core::HSTRING) -> ::windows::core::Result<()> {
        let this = &::windows::core::Interface::cast::<ICompositionAnimation>(self)?;
        unsafe {
            (::windows::core::Vtable::vtable(this).ClearParameter)(
                ::windows::core::Vtable::as_raw(this),
                ::core::mem::transmute_copy(key),
            )
            .ok()
        }
    }
    pub fn SetColorParameter(
        &self,
        key: &::windows::core::HSTRING,
        value: ::windows::UI::Color,
    ) -> ::windows::core::Result<()> {
        let this = &::windows::core::Interface::cast::<ICompositionAnimation>(self)?;
        unsafe {
            (::windows::core::Vtable::vtable(this).SetColorParameter)(
                ::windows::core::Vtable::as_raw(this),
                ::core::mem::transmute_copy(key),
                value,
            )
            .ok()
        }
    }
    pub fn SetMatrix3x2Parameter(
        &self,
        key: &::windows::core::HSTRING,
        value: ::windows::Foundation::Numerics::Matrix3x2,
    ) -> ::windows::core::Result<()> {
        let this = &::windows::core::Interface::cast::<ICompositionAnimation>(self)?;
        unsafe {
            (::windows::core::Vtable::vtable(this).SetMatrix3x2Parameter)(
                ::windows::core::Vtable::as_raw(this),
                ::core::mem::transmute_copy(key),
                value,
            )
            .ok()
        }
    }
    pub fn SetMatrix4x4Parameter(
        &self,
        key: &::windows::core::HSTRING,
        value: ::windows::Foundation::Numerics::Matrix4x4,
    ) -> ::windows::core::Result<()> {
        let this = &::windows::core::Interface::cast::<ICompositionAnimation>(self)?;
        unsafe {
            (::windows::core::Vtable::vtable(this).SetMatrix4x4Parameter)(
                ::windows::core::Vtable::as_raw(this),
                ::core::mem::transmute_copy(key),
                value,
            )
            .ok()
        }
    }
    pub fn SetQuaternionParameter(
        &self,
        key: &::windows::core::HSTRING,
        value: ::windows::Foundation::Numerics::Quaternion,
    ) -> ::windows::core::Result<()> {
        let this = &::windows::core::Interface::cast::<ICompositionAnimation>(self)?;
        unsafe {
            (::windows::core::Vtable::vtable(this).SetQuaternionParameter)(
                ::windows::core::Vtable::as_raw(this),
                ::core::mem::transmute_copy(key),
                value,
            )
            .ok()
        }
    }
    pub fn SetReferenceParameter<'a, P0>(
        &self,
        key: &::windows::core::HSTRING,
        compositionobject: P0,
    ) -> ::windows::core::Result<()>
    where
        P0: ::std::convert::Into<::windows::core::InParam<'a, CompositionObject>>,
    {
        let this = &::windows::core::Interface::cast::<ICompositionAnimation>(self)?;
        unsafe {
            (::windows::core::Vtable::vtable(this).SetReferenceParameter)(
                ::windows::core::Vtable::as_raw(this),
                ::core::mem::transmute_copy(key),
                compositionobject.into().abi(),
            )
            .ok()
        }
    }
    pub fn SetScalarParameter(
        &self,
        key: &::windows::core::HSTRING,
        value: f32,
    ) -> ::windows::core::Result<()> {
        let this = &::windows::core::Interface::cast::<ICompositionAnimation>(self)?;
        unsafe {
            (::windows::core::Vtable::vtable(this).SetScalarParameter)(
                ::windows::core::Vtable::as_raw(this),
                ::core::mem::transmute_copy(key),
                value,
            )
            .ok()
        }
    }
    pub fn SetVector2Parameter(
        &self,
        key: &::windows::core::HSTRING,
        value: ::windows::Foundation::Numerics::Vector2,
    ) -> ::windows::core::Result<()> {
        let this = &::windows::core::Interface::cast::<ICompositionAnimation>(self)?;
        unsafe {
            (::windows::core::Vtable::vtable(this).SetVector2Parameter)(
                ::windows::core::Vtable::as_raw(this),
                ::core::mem::transmute_copy(key),
                value,
            )
            .ok()
        }
    }
    pub fn SetVector3Parameter(
        &self,
        key: &::windows::core::HSTRING,
        value: ::windows::Foundation::Numerics::Vector3,
    ) -> ::windows::core::Result<()> {
        let this = &::windows::core::Interface::cast::<ICompositionAnimation>(self)?;
        unsafe {
            (::windows::core::Vtable::vtable(this).SetVector3Parameter)(
                ::windows::core::Vtable::as_raw(this),
                ::core::mem::transmute_copy(key),
                value,
            )
            .ok()
        }
    }
    pub fn SetVector4Parameter(
        &self,
        key: &::windows::core::HSTRING,
        value: ::windows::Foundation::Numerics::Vector4,
    ) -> ::windows::core::Result<()> {
        let this = &::windows::core::Interface::cast::<ICompositionAnimation>(self)?;
        unsafe {
            (::windows::core::Vtable::vtable(this).SetVector4Parameter)(
                ::windows::core::Vtable::as_raw(this),
                ::core::mem::transmute_copy(key),
                value,
            )
            .ok()
        }
    }
    pub fn SetBooleanParameter(
        &self,
        key: &::windows::core::HSTRING,
        value: bool,
    ) -> ::windows::core::Result<()> {
        let this = &::windows::core::Interface::cast::<ICompositionAnimation2>(self)?;
        unsafe {
            (::windows::core::Vtable::vtable(this).SetBooleanParameter)(
                ::windows::core::Vtable::as_raw(this),
                ::core::mem::transmute_copy(key),
                value,
            )
            .ok()
        }
    }
    pub fn Target(&self) -> ::windows::core::Result<::windows::core::HSTRING> {
        let this = &::windows::core::Interface::cast::<ICompositionAnimation2>(self)?;
        unsafe {
            let mut result__ = ::core::mem::MaybeUninit::zeroed();
            (::windows::core::Vtable::vtable(this).Target)(
                ::windows::core::Vtable::as_raw(this),
                result__.as_mut_ptr(),
            )
            .from_abi::<::windows::core::HSTRING>(result__)
        }
    }
    pub fn SetTarget(&self, value: &::windows::core::HSTRING) -> ::windows::core::Result<()> {
        let this = &::windows::core::Interface::cast::<ICompositionAnimation2>(self)?;
        unsafe {
            (::windows::core::Vtable::vtable(this).SetTarget)(
                ::windows::core::Vtable::as_raw(this),
                ::core::mem::transmute_copy(value),
            )
            .ok()
        }
    }
    pub fn InitialValueExpressions(
        &self,
    ) -> ::windows::core::Result<InitialValueExpressionCollection> {
        let this = &::windows::core::Interface::cast::<ICompositionAnimation3>(self)?;
        unsafe {
            let mut result__ = ::core::mem::MaybeUninit::zeroed();
            (::windows::core::Vtable::vtable(this).InitialValueExpressions)(
                ::windows::core::Vtable::as_raw(this),
                result__.as_mut_ptr(),
            )
            .from_abi::<InitialValueExpressionCollection>(result__)
        }
    }
    pub fn SetExpressionReferenceParameter<'a, P0, E0>(
        &self,
        parametername: &::windows::core::HSTRING,
        source: P0,
    ) -> ::windows::core::Result<()>
    where
        P0: ::std::convert::TryInto<::windows::core::InParam<'a, IAnimationObject>, Error = E0>,
        E0: ::std::convert::Into<::windows::core::Error>,
    {
        let this = &::windows::core::Interface::cast::<ICompositionAnimation4>(self)?;
        unsafe {
            (::windows::core::Vtable::vtable(this).SetExpressionReferenceParameter)(
                ::windows::core::Vtable::as_raw(this),
                ::core::mem::transmute_copy(parametername),
                source.try_into().map_err(|e| e.into())?.abi(),
            )
            .ok()
        }
    }
    pub fn Compositor(&self) -> ::windows::core::Result<Compositor> {
        let this = &::windows::core::Interface::cast::<ICompositionObject>(self)?;
        unsafe {
            let mut result__ = ::core::mem::MaybeUninit::zeroed();
            (::windows::core::Vtable::vtable(this).Compositor)(
                ::windows::core::Vtable::as_raw(this),
                result__.as_mut_ptr(),
            )
            .from_abi::<Compositor>(result__)
        }
    }
    pub fn Properties(&self) -> ::windows::core::Result<CompositionPropertySet> {
        let this = &::windows::core::Interface::cast::<ICompositionObject>(self)?;
        unsafe {
            let mut result__ = ::core::mem::MaybeUninit::zeroed();
            (::windows::core::Vtable::vtable(this).Properties)(
                ::windows::core::Vtable::as_raw(this),
                result__.as_mut_ptr(),
            )
            .from_abi::<CompositionPropertySet>(result__)
        }
    }
    pub fn StartAnimation<'a, P0>(
        &self,
        propertyname: &::windows::core::HSTRING,
        animation: P0,
    ) -> ::windows::core::Result<()>
    where
        P0: ::std::convert::Into<::windows::core::InParam<'a, CompositionAnimation>>,
    {
        let this = &::windows::core::Interface::cast::<ICompositionObject>(self)?;
        unsafe {
            (::windows::core::Vtable::vtable(this).StartAnimation)(
                ::windows::core::Vtable::as_raw(this),
                ::core::mem::transmute_copy(propertyname),
                animation.into().abi(),
            )
            .ok()
        }
    }
    pub fn StopAnimation(
        &self,
        propertyname: &::windows::core::HSTRING,
    ) -> ::windows::core::Result<()> {
        let this = &::windows::core::Interface::cast::<ICompositionObject>(self)?;
        unsafe {
            (::windows::core::Vtable::vtable(this).StopAnimation)(
                ::windows::core::Vtable::as_raw(this),
                ::core::mem::transmute_copy(propertyname),
            )
            .ok()
        }
    }
    pub fn Comment(&self) -> ::windows::core::Result<::windows::core::HSTRING> {
        let this = &::windows::core::Interface::cast::<ICompositionObject2>(self)?;
        unsafe {
            let mut result__ = ::core::mem::MaybeUninit::zeroed();
            (::windows::core::Vtable::vtable(this).Comment)(
                ::windows::core::Vtable::as_raw(this),
                result__.as_mut_ptr(),
            )
            .from_abi::<::windows::core::HSTRING>(result__)
        }
    }
    pub fn SetComment(&self, value: &::windows::core::HSTRING) -> ::windows::core::Result<()> {
        let this = &::windows::core::Interface::cast::<ICompositionObject2>(self)?;
        unsafe {
            (::windows::core::Vtable::vtable(this).SetComment)(
                ::windows::core::Vtable::as_raw(this),
                ::core::mem::transmute_copy(value),
            )
            .ok()
        }
    }
    pub fn ImplicitAnimations(&self) -> ::windows::core::Result<ImplicitAnimationCollection> {
        let this = &::windows::core::Interface::cast::<ICompositionObject2>(self)?;
        unsafe {
            let mut result__ = ::core::mem::MaybeUninit::zeroed();
            (::windows::core::Vtable::vtable(this).ImplicitAnimations)(
                ::windows::core::Vtable::as_raw(this),
                result__.as_mut_ptr(),
            )
            .from_abi::<ImplicitAnimationCollection>(result__)
        }
    }
    pub fn SetImplicitAnimations(
        &self,
        value: &ImplicitAnimationCollection,
    ) -> ::windows::core::Result<()> {
        let this = &::windows::core::Interface::cast::<ICompositionObject2>(self)?;
        unsafe {
            (::windows::core::Vtable::vtable(this).SetImplicitAnimations)(
                ::windows::core::Vtable::as_raw(this),
                ::core::mem::transmute_copy(value),
            )
            .ok()
        }
    }
    pub fn StartAnimationGroup<'a, P0, E0>(&self, value: P0) -> ::windows::core::Result<()>
    where
        P0: ::std::convert::TryInto<
            ::windows::core::InParam<'a, ICompositionAnimationBase>,
            Error = E0,
        >,
        E0: ::std::convert::Into<::windows::core::Error>,
    {
        let this = &::windows::core::Interface::cast::<ICompositionObject2>(self)?;
        unsafe {
            (::windows::core::Vtable::vtable(this).StartAnimationGroup)(
                ::windows::core::Vtable::as_raw(this),
                value.try_into().map_err(|e| e.into())?.abi(),
            )
            .ok()
        }
    }
    pub fn StopAnimationGroup<'a, P0, E0>(&self, value: P0) -> ::windows::core::Result<()>
    where
        P0: ::std::convert::TryInto<
            ::windows::core::InParam<'a, ICompositionAnimationBase>,
            Error = E0,
        >,
        E0: ::std::convert::Into<::windows::core::Error>,
    {
        let this = &::windows::core::Interface::cast::<ICompositionObject2>(self)?;
        unsafe {
            (::windows::core::Vtable::vtable(this).StopAnimationGroup)(
                ::windows::core::Vtable::as_raw(this),
                value.try_into().map_err(|e| e.into())?.abi(),
            )
            .ok()
        }
    }
    #[doc = "*Required features: `\"UI_Dispatching\"`*"]
    #[cfg(feature = "UI_Dispatching")]
    pub fn DispatcherQueue(&self) -> ::windows::core::Result<super::Dispatching::DispatcherQueue> {
        let this = &::windows::core::Interface::cast::<ICompositionObject3>(self)?;
        unsafe {
            let mut result__ = ::core::mem::MaybeUninit::zeroed();
            (::windows::core::Vtable::vtable(this).DispatcherQueue)(
                ::windows::core::Vtable::as_raw(this),
                result__.as_mut_ptr(),
            )
            .from_abi::<super::Dispatching::DispatcherQueue>(result__)
        }
    }
    pub fn TryGetAnimationController(
        &self,
        propertyname: &::windows::core::HSTRING,
    ) -> ::windows::core::Result<AnimationController> {
        let this = &::windows::core::Interface::cast::<ICompositionObject4>(self)?;
        unsafe {
            let mut result__ = ::core::mem::MaybeUninit::zeroed();
            (::windows::core::Vtable::vtable(this).TryGetAnimationController)(
                ::windows::core::Vtable::as_raw(this),
                ::core::mem::transmute_copy(propertyname),
                result__.as_mut_ptr(),
            )
            .from_abi::<AnimationController>(result__)
        }
    }
    pub fn StartAnimationWithController<'a, P0>(
        &self,
        propertyname: &::windows::core::HSTRING,
        animation: P0,
        animationcontroller: &AnimationController,
    ) -> ::windows::core::Result<()>
    where
        P0: ::std::convert::Into<::windows::core::InParam<'a, CompositionAnimation>>,
    {
        let this = &::windows::core::Interface::cast::<ICompositionObject5>(self)?;
        unsafe {
            (::windows::core::Vtable::vtable(this).StartAnimationWithController)(
                ::windows::core::Vtable::as_raw(this),
                ::core::mem::transmute_copy(propertyname),
                animation.into().abi(),
                ::core::mem::transmute_copy(animationcontroller),
            )
            .ok()
        }
    }
    pub fn DelayBehavior(&self) -> ::windows::core::Result<AnimationDelayBehavior> {
        let this = &::windows::core::Interface::cast::<INaturalMotionAnimation>(self)?;
        unsafe {
            let mut result__ = ::core::mem::MaybeUninit::zeroed();
            (::windows::core::Vtable::vtable(this).DelayBehavior)(
                ::windows::core::Vtable::as_raw(this),
                result__.as_mut_ptr(),
            )
            .from_abi::<AnimationDelayBehavior>(result__)
        }
    }
    pub fn SetDelayBehavior(&self, value: AnimationDelayBehavior) -> ::windows::core::Result<()> {
        let this = &::windows::core::Interface::cast::<INaturalMotionAnimation>(self)?;
        unsafe {
            (::windows::core::Vtable::vtable(this).SetDelayBehavior)(
                ::windows::core::Vtable::as_raw(this),
                value,
            )
            .ok()
        }
    }
    pub fn DelayTime(&self) -> ::windows::core::Result<::windows::Foundation::TimeSpan> {
        let this = &::windows::core::Interface::cast::<INaturalMotionAnimation>(self)?;
        unsafe {
            let mut result__ = ::core::mem::MaybeUninit::zeroed();
            (::windows::core::Vtable::vtable(this).DelayTime)(
                ::windows::core::Vtable::as_raw(this),
                result__.as_mut_ptr(),
            )
            .from_abi::<::windows::Foundation::TimeSpan>(result__)
        }
    }
    pub fn SetDelayTime(
        &self,
        value: ::windows::Foundation::TimeSpan,
    ) -> ::windows::core::Result<()> {
        let this = &::windows::core::Interface::cast::<INaturalMotionAnimation>(self)?;
        unsafe {
            (::windows::core::Vtable::vtable(this).SetDelayTime)(
                ::windows::core::Vtable::as_raw(this),
                value,
            )
            .ok()
        }
    }
    pub fn StopBehavior(&self) -> ::windows::core::Result<AnimationStopBehavior> {
        let this = &::windows::core::Interface::cast::<INaturalMotionAnimation>(self)?;
        unsafe {
            let mut result__ = ::core::mem::MaybeUninit::zeroed();
            (::windows::core::Vtable::vtable(this).StopBehavior)(
                ::windows::core::Vtable::as_raw(this),
                result__.as_mut_ptr(),
            )
            .from_abi::<AnimationStopBehavior>(result__)
        }
    }
    pub fn SetStopBehavior(&self, value: AnimationStopBehavior) -> ::windows::core::Result<()> {
        let this = &::windows::core::Interface::cast::<INaturalMotionAnimation>(self)?;
        unsafe {
            (::windows::core::Vtable::vtable(this).SetStopBehavior)(
                ::windows::core::Vtable::as_raw(this),
                value,
            )
            .ok()
        }
    }
    pub fn FinalValue(
        &self,
    ) -> ::windows::core::Result<
        ::windows::Foundation::IReference<::windows::Foundation::Numerics::Vector2>,
    > {
        let this = &::windows::core::Interface::cast::<IVector2NaturalMotionAnimation>(self)?;
        unsafe {
            let mut result__ = ::core::mem::MaybeUninit::zeroed();
            ( ::windows::core::Vtable::vtable ( this ) . FinalValue ) ( ::windows::core::Vtable::as_raw ( this ) , result__ . as_mut_ptr ( ) ) . from_abi:: < ::windows::Foundation:: IReference :: < ::windows::Foundation::Numerics:: Vector2 > > ( result__ )
        }
    }
    pub fn SetFinalValue<'a, P0, E0>(&self, value: P0) -> ::windows::core::Result<()>
    where
        P0: ::std::convert::TryInto<
            ::windows::core::InParam<
                'a,
                ::windows::Foundation::IReference<::windows::Foundation::Numerics::Vector2>,
            >,
            Error = E0,
        >,
        E0: ::std::convert::Into<::windows::core::Error>,
    {
        let this = &::windows::core::Interface::cast::<IVector2NaturalMotionAnimation>(self)?;
        unsafe {
            (::windows::core::Vtable::vtable(this).SetFinalValue)(
                ::windows::core::Vtable::as_raw(this),
                value.try_into().map_err(|e| e.into())?.abi(),
            )
            .ok()
        }
    }
    pub fn InitialValue(
        &self,
    ) -> ::windows::core::Result<
        ::windows::Foundation::IReference<::windows::Foundation::Numerics::Vector2>,
    > {
        let this = &::windows::core::Interface::cast::<IVector2NaturalMotionAnimation>(self)?;
        unsafe {
            let mut result__ = ::core::mem::MaybeUninit::zeroed();
            ( ::windows::core::Vtable::vtable ( this ) . InitialValue ) ( ::windows::core::Vtable::as_raw ( this ) , result__ . as_mut_ptr ( ) ) . from_abi:: < ::windows::Foundation:: IReference :: < ::windows::Foundation::Numerics:: Vector2 > > ( result__ )
        }
    }
    pub fn SetInitialValue<'a, P0, E0>(&self, value: P0) -> ::windows::core::Result<()>
    where
        P0: ::std::convert::TryInto<
            ::windows::core::InParam<
                'a,
                ::windows::Foundation::IReference<::windows::Foundation::Numerics::Vector2>,
            >,
            Error = E0,
        >,
        E0: ::std::convert::Into<::windows::core::Error>,
    {
        let this = &::windows::core::Interface::cast::<IVector2NaturalMotionAnimation>(self)?;
        unsafe {
            (::windows::core::Vtable::vtable(this).SetInitialValue)(
                ::windows::core::Vtable::as_raw(this),
                value.try_into().map_err(|e| e.into())?.abi(),
            )
            .ok()
        }
    }
    pub fn InitialVelocity(
        &self,
    ) -> ::windows::core::Result<::windows::Foundation::Numerics::Vector2> {
        let this = &::windows::core::Interface::cast::<IVector2NaturalMotionAnimation>(self)?;
        unsafe {
            let mut result__ = ::core::mem::MaybeUninit::zeroed();
            (::windows::core::Vtable::vtable(this).InitialVelocity)(
                ::windows::core::Vtable::as_raw(this),
                result__.as_mut_ptr(),
            )
            .from_abi::<::windows::Foundation::Numerics::Vector2>(result__)
        }
    }
    pub fn SetInitialVelocity(
        &self,
        value: ::windows::Foundation::Numerics::Vector2,
    ) -> ::windows::core::Result<()> {
        let this = &::windows::core::Interface::cast::<IVector2NaturalMotionAnimation>(self)?;
        unsafe {
            (::windows::core::Vtable::vtable(this).SetInitialVelocity)(
                ::windows::core::Vtable::as_raw(this),
                value,
            )
            .ok()
        }
    }
}
impl ::core::clone::Clone for BounceVector2NaturalMotionAnimation {
    fn clone(&self) -> Self {
        Self(self.0.clone())
    }
}
impl ::core::cmp::PartialEq for BounceVector2NaturalMotionAnimation {
    fn eq(&self, other: &Self) -> bool {
        self.0 == other.0
    }
}
impl ::core::cmp::Eq for BounceVector2NaturalMotionAnimation {}
impl ::core::fmt::Debug for BounceVector2NaturalMotionAnimation {
    fn fmt(&self, f: &mut ::core::fmt::Formatter<'_>) -> ::core::fmt::Result {
        f.debug_tuple("BounceVector2NaturalMotionAnimation").field(&self.0).finish()
    }
}
unsafe impl ::windows::core::RuntimeType for BounceVector2NaturalMotionAnimation {
    const SIGNATURE : ::windows::core::ConstBuffer = ::windows::core::ConstBuffer::from_slice ( b"rc(Microsoft.UI.Composition.BounceVector2NaturalMotionAnimation;{ec528d1f-22e2-573e-ab87-757071e50012})" ) ;
    type DefaultType = ::core::option::Option<Self>;
    fn from_default(from: &Self::DefaultType) -> ::windows::core::Result<Self> {
        from.as_ref().cloned().ok_or(::windows::core::Error::OK)
    }
}
unsafe impl ::windows::core::Vtable for BounceVector2NaturalMotionAnimation {
    type Vtable = IBounceVector2NaturalMotionAnimation_Vtbl;
}
unsafe impl ::windows::core::Interface for BounceVector2NaturalMotionAnimation {
    const IID: ::windows::core::GUID =
        <IBounceVector2NaturalMotionAnimation as ::windows::core::Interface>::IID;
}
impl ::windows::core::RuntimeName for BounceVector2NaturalMotionAnimation {
    const NAME: &'static str = "Microsoft.UI.Composition.BounceVector2NaturalMotionAnimation";
}
::windows::core::interface_hierarchy!(
    BounceVector2NaturalMotionAnimation,
    ::windows::core::IUnknown,
    ::windows::core::IInspectable
);
impl ::core::convert::TryFrom<BounceVector2NaturalMotionAnimation> for IAnimationObject {
    type Error = ::windows::core::Error;
    fn try_from(value: BounceVector2NaturalMotionAnimation) -> ::windows::core::Result<Self> {
        ::core::convert::TryFrom::try_from(&value)
    }
}
impl ::core::convert::TryFrom<&BounceVector2NaturalMotionAnimation> for IAnimationObject {
    type Error = ::windows::core::Error;
    fn try_from(value: &BounceVector2NaturalMotionAnimation) -> ::windows::core::Result<Self> {
        ::windows::core::Interface::cast(value)
    }
}
impl<'a> ::core::convert::TryFrom<&BounceVector2NaturalMotionAnimation>
    for ::windows::core::InParam<'a, IAnimationObject>
{
    type Error = ::windows::core::Error;
    fn try_from(value: &BounceVector2NaturalMotionAnimation) -> ::windows::core::Result<Self> {
        let item = ::std::convert::TryInto::try_into(value)?;
        Ok(::windows::core::InParam::owned(item))
    }
}
impl ::core::convert::TryFrom<BounceVector2NaturalMotionAnimation>
    for ::windows::Foundation::IClosable
{
    type Error = ::windows::core::Error;
    fn try_from(value: BounceVector2NaturalMotionAnimation) -> ::windows::core::Result<Self> {
        ::core::convert::TryFrom::try_from(&value)
    }
}
impl ::core::convert::TryFrom<&BounceVector2NaturalMotionAnimation>
    for ::windows::Foundation::IClosable
{
    type Error = ::windows::core::Error;
    fn try_from(value: &BounceVector2NaturalMotionAnimation) -> ::windows::core::Result<Self> {
        ::windows::core::Interface::cast(value)
    }
}
impl<'a> ::core::convert::TryFrom<&BounceVector2NaturalMotionAnimation>
    for ::windows::core::InParam<'a, ::windows::Foundation::IClosable>
{
    type Error = ::windows::core::Error;
    fn try_from(value: &BounceVector2NaturalMotionAnimation) -> ::windows::core::Result<Self> {
        let item = ::std::convert::TryInto::try_into(value)?;
        Ok(::windows::core::InParam::owned(item))
    }
}
impl ::core::convert::TryFrom<BounceVector2NaturalMotionAnimation> for ICompositionAnimationBase {
    type Error = ::windows::core::Error;
    fn try_from(value: BounceVector2NaturalMotionAnimation) -> ::windows::core::Result<Self> {
        ::core::convert::TryFrom::try_from(&value)
    }
}
impl ::core::convert::TryFrom<&BounceVector2NaturalMotionAnimation> for ICompositionAnimationBase {
    type Error = ::windows::core::Error;
    fn try_from(value: &BounceVector2NaturalMotionAnimation) -> ::windows::core::Result<Self> {
        ::windows::core::Interface::cast(value)
    }
}
impl<'a> ::core::convert::TryFrom<&BounceVector2NaturalMotionAnimation>
    for ::windows::core::InParam<'a, ICompositionAnimationBase>
{
    type Error = ::windows::core::Error;
    fn try_from(value: &BounceVector2NaturalMotionAnimation) -> ::windows::core::Result<Self> {
        let item = ::std::convert::TryInto::try_into(value)?;
        Ok(::windows::core::InParam::owned(item))
    }
}
impl ::core::convert::From<BounceVector2NaturalMotionAnimation> for Vector2NaturalMotionAnimation {
    fn from(value: BounceVector2NaturalMotionAnimation) -> Self {
        ::core::convert::From::from(&value)
    }
}
impl ::core::convert::From<&BounceVector2NaturalMotionAnimation> for Vector2NaturalMotionAnimation {
    fn from(value: &BounceVector2NaturalMotionAnimation) -> Self {
        ::windows::core::Interface::cast(value).unwrap()
    }
}
impl<'a> ::core::convert::From<&BounceVector2NaturalMotionAnimation>
    for ::windows::core::InParam<'a, Vector2NaturalMotionAnimation>
{
    fn from(value: &BounceVector2NaturalMotionAnimation) -> Self {
        ::windows::core::InParam::owned(value.into())
    }
}
impl ::core::convert::From<BounceVector2NaturalMotionAnimation> for NaturalMotionAnimation {
    fn from(value: BounceVector2NaturalMotionAnimation) -> Self {
        ::core::convert::From::from(&value)
    }
}
impl ::core::convert::From<&BounceVector2NaturalMotionAnimation> for NaturalMotionAnimation {
    fn from(value: &BounceVector2NaturalMotionAnimation) -> Self {
        ::windows::core::Interface::cast(value).unwrap()
    }
}
impl<'a> ::core::convert::From<&BounceVector2NaturalMotionAnimation>
    for ::windows::core::InParam<'a, NaturalMotionAnimation>
{
    fn from(value: &BounceVector2NaturalMotionAnimation) -> Self {
        ::windows::core::InParam::owned(value.into())
    }
}
impl ::core::convert::From<BounceVector2NaturalMotionAnimation> for CompositionAnimation {
    fn from(value: BounceVector2NaturalMotionAnimation) -> Self {
        ::core::convert::From::from(&value)
    }
}
impl ::core::convert::From<&BounceVector2NaturalMotionAnimation> for CompositionAnimation {
    fn from(value: &BounceVector2NaturalMotionAnimation) -> Self {
        ::windows::core::Interface::cast(value).unwrap()
    }
}
impl<'a> ::core::convert::From<&BounceVector2NaturalMotionAnimation>
    for ::windows::core::InParam<'a, CompositionAnimation>
{
    fn from(value: &BounceVector2NaturalMotionAnimation) -> Self {
        ::windows::core::InParam::owned(value.into())
    }
}
impl ::core::convert::From<BounceVector2NaturalMotionAnimation> for CompositionObject {
    fn from(value: BounceVector2NaturalMotionAnimation) -> Self {
        ::core::convert::From::from(&value)
    }
}
impl ::core::convert::From<&BounceVector2NaturalMotionAnimation> for CompositionObject {
    fn from(value: &BounceVector2NaturalMotionAnimation) -> Self {
        ::windows::core::Interface::cast(value).unwrap()
    }
}
impl<'a> ::core::convert::From<&BounceVector2NaturalMotionAnimation>
    for ::windows::core::InParam<'a, CompositionObject>
{
    fn from(value: &BounceVector2NaturalMotionAnimation) -> Self {
        ::windows::core::InParam::owned(value.into())
    }
}
unsafe impl ::core::marker::Send for BounceVector2NaturalMotionAnimation {}
unsafe impl ::core::marker::Sync for BounceVector2NaturalMotionAnimation {}
#[doc = "*Required features: `\"UI_Composition\"`*"]
#[repr(transparent)]
pub struct BounceVector3NaturalMotionAnimation(::windows::core::IUnknown);
impl BounceVector3NaturalMotionAnimation {
    pub fn PopulatePropertyInfo(
        &self,
        propertyname: &::windows::core::HSTRING,
        propertyinfo: &AnimationPropertyInfo,
    ) -> ::windows::core::Result<()> {
        let this = &::windows::core::Interface::cast::<IAnimationObject>(self)?;
        unsafe {
            (::windows::core::Vtable::vtable(this).PopulatePropertyInfo)(
                ::windows::core::Vtable::as_raw(this),
                ::core::mem::transmute_copy(propertyname),
                ::core::mem::transmute_copy(propertyinfo),
            )
            .ok()
        }
    }
    pub fn Acceleration(&self) -> ::windows::core::Result<f32> {
        let this = self;
        unsafe {
            let mut result__ = ::core::mem::MaybeUninit::zeroed();
            (::windows::core::Vtable::vtable(this).Acceleration)(
                ::windows::core::Vtable::as_raw(this),
                result__.as_mut_ptr(),
            )
            .from_abi::<f32>(result__)
        }
    }
    pub fn SetAcceleration(&self, value: f32) -> ::windows::core::Result<()> {
        let this = self;
        unsafe {
            (::windows::core::Vtable::vtable(this).SetAcceleration)(
                ::windows::core::Vtable::as_raw(this),
                value,
            )
            .ok()
        }
    }
    pub fn Restitution(&self) -> ::windows::core::Result<f32> {
        let this = self;
        unsafe {
            let mut result__ = ::core::mem::MaybeUninit::zeroed();
            (::windows::core::Vtable::vtable(this).Restitution)(
                ::windows::core::Vtable::as_raw(this),
                result__.as_mut_ptr(),
            )
            .from_abi::<f32>(result__)
        }
    }
    pub fn SetRestitution(&self, value: f32) -> ::windows::core::Result<()> {
        let this = self;
        unsafe {
            (::windows::core::Vtable::vtable(this).SetRestitution)(
                ::windows::core::Vtable::as_raw(this),
                value,
            )
            .ok()
        }
    }
    pub fn Close(&self) -> ::windows::core::Result<()> {
        let this = &::windows::core::Interface::cast::<::windows::Foundation::IClosable>(self)?;
        unsafe {
            (::windows::core::Vtable::vtable(this).Close)(::windows::core::Vtable::as_raw(this))
                .ok()
        }
    }
    pub fn ClearAllParameters(&self) -> ::windows::core::Result<()> {
        let this = &::windows::core::Interface::cast::<ICompositionAnimation>(self)?;
        unsafe {
            (::windows::core::Vtable::vtable(this).ClearAllParameters)(
                ::windows::core::Vtable::as_raw(this),
            )
            .ok()
        }
    }
    pub fn ClearParameter(&self, key: &::windows::core::HSTRING) -> ::windows::core::Result<()> {
        let this = &::windows::core::Interface::cast::<ICompositionAnimation>(self)?;
        unsafe {
            (::windows::core::Vtable::vtable(this).ClearParameter)(
                ::windows::core::Vtable::as_raw(this),
                ::core::mem::transmute_copy(key),
            )
            .ok()
        }
    }
    pub fn SetColorParameter(
        &self,
        key: &::windows::core::HSTRING,
        value: ::windows::UI::Color,
    ) -> ::windows::core::Result<()> {
        let this = &::windows::core::Interface::cast::<ICompositionAnimation>(self)?;
        unsafe {
            (::windows::core::Vtable::vtable(this).SetColorParameter)(
                ::windows::core::Vtable::as_raw(this),
                ::core::mem::transmute_copy(key),
                value,
            )
            .ok()
        }
    }
    pub fn SetMatrix3x2Parameter(
        &self,
        key: &::windows::core::HSTRING,
        value: ::windows::Foundation::Numerics::Matrix3x2,
    ) -> ::windows::core::Result<()> {
        let this = &::windows::core::Interface::cast::<ICompositionAnimation>(self)?;
        unsafe {
            (::windows::core::Vtable::vtable(this).SetMatrix3x2Parameter)(
                ::windows::core::Vtable::as_raw(this),
                ::core::mem::transmute_copy(key),
                value,
            )
            .ok()
        }
    }
    pub fn SetMatrix4x4Parameter(
        &self,
        key: &::windows::core::HSTRING,
        value: ::windows::Foundation::Numerics::Matrix4x4,
    ) -> ::windows::core::Result<()> {
        let this = &::windows::core::Interface::cast::<ICompositionAnimation>(self)?;
        unsafe {
            (::windows::core::Vtable::vtable(this).SetMatrix4x4Parameter)(
                ::windows::core::Vtable::as_raw(this),
                ::core::mem::transmute_copy(key),
                value,
            )
            .ok()
        }
    }
    pub fn SetQuaternionParameter(
        &self,
        key: &::windows::core::HSTRING,
        value: ::windows::Foundation::Numerics::Quaternion,
    ) -> ::windows::core::Result<()> {
        let this = &::windows::core::Interface::cast::<ICompositionAnimation>(self)?;
        unsafe {
            (::windows::core::Vtable::vtable(this).SetQuaternionParameter)(
                ::windows::core::Vtable::as_raw(this),
                ::core::mem::transmute_copy(key),
                value,
            )
            .ok()
        }
    }
    pub fn SetReferenceParameter<'a, P0>(
        &self,
        key: &::windows::core::HSTRING,
        compositionobject: P0,
    ) -> ::windows::core::Result<()>
    where
        P0: ::std::convert::Into<::windows::core::InParam<'a, CompositionObject>>,
    {
        let this = &::windows::core::Interface::cast::<ICompositionAnimation>(self)?;
        unsafe {
            (::windows::core::Vtable::vtable(this).SetReferenceParameter)(
                ::windows::core::Vtable::as_raw(this),
                ::core::mem::transmute_copy(key),
                compositionobject.into().abi(),
            )
            .ok()
        }
    }
    pub fn SetScalarParameter(
        &self,
        key: &::windows::core::HSTRING,
        value: f32,
    ) -> ::windows::core::Result<()> {
        let this = &::windows::core::Interface::cast::<ICompositionAnimation>(self)?;
        unsafe {
            (::windows::core::Vtable::vtable(this).SetScalarParameter)(
                ::windows::core::Vtable::as_raw(this),
                ::core::mem::transmute_copy(key),
                value,
            )
            .ok()
        }
    }
    pub fn SetVector2Parameter(
        &self,
        key: &::windows::core::HSTRING,
        value: ::windows::Foundation::Numerics::Vector2,
    ) -> ::windows::core::Result<()> {
        let this = &::windows::core::Interface::cast::<ICompositionAnimation>(self)?;
        unsafe {
            (::windows::core::Vtable::vtable(this).SetVector2Parameter)(
                ::windows::core::Vtable::as_raw(this),
                ::core::mem::transmute_copy(key),
                value,
            )
            .ok()
        }
    }
    pub fn SetVector3Parameter(
        &self,
        key: &::windows::core::HSTRING,
        value: ::windows::Foundation::Numerics::Vector3,
    ) -> ::windows::core::Result<()> {
        let this = &::windows::core::Interface::cast::<ICompositionAnimation>(self)?;
        unsafe {
            (::windows::core::Vtable::vtable(this).SetVector3Parameter)(
                ::windows::core::Vtable::as_raw(this),
                ::core::mem::transmute_copy(key),
                value,
            )
            .ok()
        }
    }
    pub fn SetVector4Parameter(
        &self,
        key: &::windows::core::HSTRING,
        value: ::windows::Foundation::Numerics::Vector4,
    ) -> ::windows::core::Result<()> {
        let this = &::windows::core::Interface::cast::<ICompositionAnimation>(self)?;
        unsafe {
            (::windows::core::Vtable::vtable(this).SetVector4Parameter)(
                ::windows::core::Vtable::as_raw(this),
                ::core::mem::transmute_copy(key),
                value,
            )
            .ok()
        }
    }
    pub fn SetBooleanParameter(
        &self,
        key: &::windows::core::HSTRING,
        value: bool,
    ) -> ::windows::core::Result<()> {
        let this = &::windows::core::Interface::cast::<ICompositionAnimation2>(self)?;
        unsafe {
            (::windows::core::Vtable::vtable(this).SetBooleanParameter)(
                ::windows::core::Vtable::as_raw(this),
                ::core::mem::transmute_copy(key),
                value,
            )
            .ok()
        }
    }
    pub fn Target(&self) -> ::windows::core::Result<::windows::core::HSTRING> {
        let this = &::windows::core::Interface::cast::<ICompositionAnimation2>(self)?;
        unsafe {
            let mut result__ = ::core::mem::MaybeUninit::zeroed();
            (::windows::core::Vtable::vtable(this).Target)(
                ::windows::core::Vtable::as_raw(this),
                result__.as_mut_ptr(),
            )
            .from_abi::<::windows::core::HSTRING>(result__)
        }
    }
    pub fn SetTarget(&self, value: &::windows::core::HSTRING) -> ::windows::core::Result<()> {
        let this = &::windows::core::Interface::cast::<ICompositionAnimation2>(self)?;
        unsafe {
            (::windows::core::Vtable::vtable(this).SetTarget)(
                ::windows::core::Vtable::as_raw(this),
                ::core::mem::transmute_copy(value),
            )
            .ok()
        }
    }
    pub fn InitialValueExpressions(
        &self,
    ) -> ::windows::core::Result<InitialValueExpressionCollection> {
        let this = &::windows::core::Interface::cast::<ICompositionAnimation3>(self)?;
        unsafe {
            let mut result__ = ::core::mem::MaybeUninit::zeroed();
            (::windows::core::Vtable::vtable(this).InitialValueExpressions)(
                ::windows::core::Vtable::as_raw(this),
                result__.as_mut_ptr(),
            )
            .from_abi::<InitialValueExpressionCollection>(result__)
        }
    }
    pub fn SetExpressionReferenceParameter<'a, P0, E0>(
        &self,
        parametername: &::windows::core::HSTRING,
        source: P0,
    ) -> ::windows::core::Result<()>
    where
        P0: ::std::convert::TryInto<::windows::core::InParam<'a, IAnimationObject>, Error = E0>,
        E0: ::std::convert::Into<::windows::core::Error>,
    {
        let this = &::windows::core::Interface::cast::<ICompositionAnimation4>(self)?;
        unsafe {
            (::windows::core::Vtable::vtable(this).SetExpressionReferenceParameter)(
                ::windows::core::Vtable::as_raw(this),
                ::core::mem::transmute_copy(parametername),
                source.try_into().map_err(|e| e.into())?.abi(),
            )
            .ok()
        }
    }
    pub fn Compositor(&self) -> ::windows::core::Result<Compositor> {
        let this = &::windows::core::Interface::cast::<ICompositionObject>(self)?;
        unsafe {
            let mut result__ = ::core::mem::MaybeUninit::zeroed();
            (::windows::core::Vtable::vtable(this).Compositor)(
                ::windows::core::Vtable::as_raw(this),
                result__.as_mut_ptr(),
            )
            .from_abi::<Compositor>(result__)
        }
    }
    pub fn Properties(&self) -> ::windows::core::Result<CompositionPropertySet> {
        let this = &::windows::core::Interface::cast::<ICompositionObject>(self)?;
        unsafe {
            let mut result__ = ::core::mem::MaybeUninit::zeroed();
            (::windows::core::Vtable::vtable(this).Properties)(
                ::windows::core::Vtable::as_raw(this),
                result__.as_mut_ptr(),
            )
            .from_abi::<CompositionPropertySet>(result__)
        }
    }
    pub fn StartAnimation<'a, P0>(
        &self,
        propertyname: &::windows::core::HSTRING,
        animation: P0,
    ) -> ::windows::core::Result<()>
    where
        P0: ::std::convert::Into<::windows::core::InParam<'a, CompositionAnimation>>,
    {
        let this = &::windows::core::Interface::cast::<ICompositionObject>(self)?;
        unsafe {
            (::windows::core::Vtable::vtable(this).StartAnimation)(
                ::windows::core::Vtable::as_raw(this),
                ::core::mem::transmute_copy(propertyname),
                animation.into().abi(),
            )
            .ok()
        }
    }
    pub fn StopAnimation(
        &self,
        propertyname: &::windows::core::HSTRING,
    ) -> ::windows::core::Result<()> {
        let this = &::windows::core::Interface::cast::<ICompositionObject>(self)?;
        unsafe {
            (::windows::core::Vtable::vtable(this).StopAnimation)(
                ::windows::core::Vtable::as_raw(this),
                ::core::mem::transmute_copy(propertyname),
            )
            .ok()
        }
    }
    pub fn Comment(&self) -> ::windows::core::Result<::windows::core::HSTRING> {
        let this = &::windows::core::Interface::cast::<ICompositionObject2>(self)?;
        unsafe {
            let mut result__ = ::core::mem::MaybeUninit::zeroed();
            (::windows::core::Vtable::vtable(this).Comment)(
                ::windows::core::Vtable::as_raw(this),
                result__.as_mut_ptr(),
            )
            .from_abi::<::windows::core::HSTRING>(result__)
        }
    }
    pub fn SetComment(&self, value: &::windows::core::HSTRING) -> ::windows::core::Result<()> {
        let this = &::windows::core::Interface::cast::<ICompositionObject2>(self)?;
        unsafe {
            (::windows::core::Vtable::vtable(this).SetComment)(
                ::windows::core::Vtable::as_raw(this),
                ::core::mem::transmute_copy(value),
            )
            .ok()
        }
    }
    pub fn ImplicitAnimations(&self) -> ::windows::core::Result<ImplicitAnimationCollection> {
        let this = &::windows::core::Interface::cast::<ICompositionObject2>(self)?;
        unsafe {
            let mut result__ = ::core::mem::MaybeUninit::zeroed();
            (::windows::core::Vtable::vtable(this).ImplicitAnimations)(
                ::windows::core::Vtable::as_raw(this),
                result__.as_mut_ptr(),
            )
            .from_abi::<ImplicitAnimationCollection>(result__)
        }
    }
    pub fn SetImplicitAnimations(
        &self,
        value: &ImplicitAnimationCollection,
    ) -> ::windows::core::Result<()> {
        let this = &::windows::core::Interface::cast::<ICompositionObject2>(self)?;
        unsafe {
            (::windows::core::Vtable::vtable(this).SetImplicitAnimations)(
                ::windows::core::Vtable::as_raw(this),
                ::core::mem::transmute_copy(value),
            )
            .ok()
        }
    }
    pub fn StartAnimationGroup<'a, P0, E0>(&self, value: P0) -> ::windows::core::Result<()>
    where
        P0: ::std::convert::TryInto<
            ::windows::core::InParam<'a, ICompositionAnimationBase>,
            Error = E0,
        >,
        E0: ::std::convert::Into<::windows::core::Error>,
    {
        let this = &::windows::core::Interface::cast::<ICompositionObject2>(self)?;
        unsafe {
            (::windows::core::Vtable::vtable(this).StartAnimationGroup)(
                ::windows::core::Vtable::as_raw(this),
                value.try_into().map_err(|e| e.into())?.abi(),
            )
            .ok()
        }
    }
    pub fn StopAnimationGroup<'a, P0, E0>(&self, value: P0) -> ::windows::core::Result<()>
    where
        P0: ::std::convert::TryInto<
            ::windows::core::InParam<'a, ICompositionAnimationBase>,
            Error = E0,
        >,
        E0: ::std::convert::Into<::windows::core::Error>,
    {
        let this = &::windows::core::Interface::cast::<ICompositionObject2>(self)?;
        unsafe {
            (::windows::core::Vtable::vtable(this).StopAnimationGroup)(
                ::windows::core::Vtable::as_raw(this),
                value.try_into().map_err(|e| e.into())?.abi(),
            )
            .ok()
        }
    }
    #[doc = "*Required features: `\"UI_Dispatching\"`*"]
    #[cfg(feature = "UI_Dispatching")]
    pub fn DispatcherQueue(&self) -> ::windows::core::Result<super::Dispatching::DispatcherQueue> {
        let this = &::windows::core::Interface::cast::<ICompositionObject3>(self)?;
        unsafe {
            let mut result__ = ::core::mem::MaybeUninit::zeroed();
            (::windows::core::Vtable::vtable(this).DispatcherQueue)(
                ::windows::core::Vtable::as_raw(this),
                result__.as_mut_ptr(),
            )
            .from_abi::<super::Dispatching::DispatcherQueue>(result__)
        }
    }
    pub fn TryGetAnimationController(
        &self,
        propertyname: &::windows::core::HSTRING,
    ) -> ::windows::core::Result<AnimationController> {
        let this = &::windows::core::Interface::cast::<ICompositionObject4>(self)?;
        unsafe {
            let mut result__ = ::core::mem::MaybeUninit::zeroed();
            (::windows::core::Vtable::vtable(this).TryGetAnimationController)(
                ::windows::core::Vtable::as_raw(this),
                ::core::mem::transmute_copy(propertyname),
                result__.as_mut_ptr(),
            )
            .from_abi::<AnimationController>(result__)
        }
    }
    pub fn StartAnimationWithController<'a, P0>(
        &self,
        propertyname: &::windows::core::HSTRING,
        animation: P0,
        animationcontroller: &AnimationController,
    ) -> ::windows::core::Result<()>
    where
        P0: ::std::convert::Into<::windows::core::InParam<'a, CompositionAnimation>>,
    {
        let this = &::windows::core::Interface::cast::<ICompositionObject5>(self)?;
        unsafe {
            (::windows::core::Vtable::vtable(this).StartAnimationWithController)(
                ::windows::core::Vtable::as_raw(this),
                ::core::mem::transmute_copy(propertyname),
                animation.into().abi(),
                ::core::mem::transmute_copy(animationcontroller),
            )
            .ok()
        }
    }
    pub fn DelayBehavior(&self) -> ::windows::core::Result<AnimationDelayBehavior> {
        let this = &::windows::core::Interface::cast::<INaturalMotionAnimation>(self)?;
        unsafe {
            let mut result__ = ::core::mem::MaybeUninit::zeroed();
            (::windows::core::Vtable::vtable(this).DelayBehavior)(
                ::windows::core::Vtable::as_raw(this),
                result__.as_mut_ptr(),
            )
            .from_abi::<AnimationDelayBehavior>(result__)
        }
    }
    pub fn SetDelayBehavior(&self, value: AnimationDelayBehavior) -> ::windows::core::Result<()> {
        let this = &::windows::core::Interface::cast::<INaturalMotionAnimation>(self)?;
        unsafe {
            (::windows::core::Vtable::vtable(this).SetDelayBehavior)(
                ::windows::core::Vtable::as_raw(this),
                value,
            )
            .ok()
        }
    }
    pub fn DelayTime(&self) -> ::windows::core::Result<::windows::Foundation::TimeSpan> {
        let this = &::windows::core::Interface::cast::<INaturalMotionAnimation>(self)?;
        unsafe {
            let mut result__ = ::core::mem::MaybeUninit::zeroed();
            (::windows::core::Vtable::vtable(this).DelayTime)(
                ::windows::core::Vtable::as_raw(this),
                result__.as_mut_ptr(),
            )
            .from_abi::<::windows::Foundation::TimeSpan>(result__)
        }
    }
    pub fn SetDelayTime(
        &self,
        value: ::windows::Foundation::TimeSpan,
    ) -> ::windows::core::Result<()> {
        let this = &::windows::core::Interface::cast::<INaturalMotionAnimation>(self)?;
        unsafe {
            (::windows::core::Vtable::vtable(this).SetDelayTime)(
                ::windows::core::Vtable::as_raw(this),
                value,
            )
            .ok()
        }
    }
    pub fn StopBehavior(&self) -> ::windows::core::Result<AnimationStopBehavior> {
        let this = &::windows::core::Interface::cast::<INaturalMotionAnimation>(self)?;
        unsafe {
            let mut result__ = ::core::mem::MaybeUninit::zeroed();
            (::windows::core::Vtable::vtable(this).StopBehavior)(
                ::windows::core::Vtable::as_raw(this),
                result__.as_mut_ptr(),
            )
            .from_abi::<AnimationStopBehavior>(result__)
        }
    }
    pub fn SetStopBehavior(&self, value: AnimationStopBehavior) -> ::windows::core::Result<()> {
        let this = &::windows::core::Interface::cast::<INaturalMotionAnimation>(self)?;
        unsafe {
            (::windows::core::Vtable::vtable(this).SetStopBehavior)(
                ::windows::core::Vtable::as_raw(this),
                value,
            )
            .ok()
        }
    }
    pub fn FinalValue(
        &self,
    ) -> ::windows::core::Result<
        ::windows::Foundation::IReference<::windows::Foundation::Numerics::Vector3>,
    > {
        let this = &::windows::core::Interface::cast::<IVector3NaturalMotionAnimation>(self)?;
        unsafe {
            let mut result__ = ::core::mem::MaybeUninit::zeroed();
            ( ::windows::core::Vtable::vtable ( this ) . FinalValue ) ( ::windows::core::Vtable::as_raw ( this ) , result__ . as_mut_ptr ( ) ) . from_abi:: < ::windows::Foundation:: IReference :: < ::windows::Foundation::Numerics:: Vector3 > > ( result__ )
        }
    }
    pub fn SetFinalValue<'a, P0, E0>(&self, value: P0) -> ::windows::core::Result<()>
    where
        P0: ::std::convert::TryInto<
            ::windows::core::InParam<
                'a,
                ::windows::Foundation::IReference<::windows::Foundation::Numerics::Vector3>,
            >,
            Error = E0,
        >,
        E0: ::std::convert::Into<::windows::core::Error>,
    {
        let this = &::windows::core::Interface::cast::<IVector3NaturalMotionAnimation>(self)?;
        unsafe {
            (::windows::core::Vtable::vtable(this).SetFinalValue)(
                ::windows::core::Vtable::as_raw(this),
                value.try_into().map_err(|e| e.into())?.abi(),
            )
            .ok()
        }
    }
    pub fn InitialValue(
        &self,
    ) -> ::windows::core::Result<
        ::windows::Foundation::IReference<::windows::Foundation::Numerics::Vector3>,
    > {
        let this = &::windows::core::Interface::cast::<IVector3NaturalMotionAnimation>(self)?;
        unsafe {
            let mut result__ = ::core::mem::MaybeUninit::zeroed();
            ( ::windows::core::Vtable::vtable ( this ) . InitialValue ) ( ::windows::core::Vtable::as_raw ( this ) , result__ . as_mut_ptr ( ) ) . from_abi:: < ::windows::Foundation:: IReference :: < ::windows::Foundation::Numerics:: Vector3 > > ( result__ )
        }
    }
    pub fn SetInitialValue<'a, P0, E0>(&self, value: P0) -> ::windows::core::Result<()>
    where
        P0: ::std::convert::TryInto<
            ::windows::core::InParam<
                'a,
                ::windows::Foundation::IReference<::windows::Foundation::Numerics::Vector3>,
            >,
            Error = E0,
        >,
        E0: ::std::convert::Into<::windows::core::Error>,
    {
        let this = &::windows::core::Interface::cast::<IVector3NaturalMotionAnimation>(self)?;
        unsafe {
            (::windows::core::Vtable::vtable(this).SetInitialValue)(
                ::windows::core::Vtable::as_raw(this),
                value.try_into().map_err(|e| e.into())?.abi(),
            )
            .ok()
        }
    }
    pub fn InitialVelocity(
        &self,
    ) -> ::windows::core::Result<::windows::Foundation::Numerics::Vector3> {
        let this = &::windows::core::Interface::cast::<IVector3NaturalMotionAnimation>(self)?;
        unsafe {
            let mut result__ = ::core::mem::MaybeUninit::zeroed();
            (::windows::core::Vtable::vtable(this).InitialVelocity)(
                ::windows::core::Vtable::as_raw(this),
                result__.as_mut_ptr(),
            )
            .from_abi::<::windows::Foundation::Numerics::Vector3>(result__)
        }
    }
    pub fn SetInitialVelocity(
        &self,
        value: ::windows::Foundation::Numerics::Vector3,
    ) -> ::windows::core::Result<()> {
        let this = &::windows::core::Interface::cast::<IVector3NaturalMotionAnimation>(self)?;
        unsafe {
            (::windows::core::Vtable::vtable(this).SetInitialVelocity)(
                ::windows::core::Vtable::as_raw(this),
                value,
            )
            .ok()
        }
    }
}
impl ::core::clone::Clone for BounceVector3NaturalMotionAnimation {
    fn clone(&self) -> Self {
        Self(self.0.clone())
    }
}
impl ::core::cmp::PartialEq for BounceVector3NaturalMotionAnimation {
    fn eq(&self, other: &Self) -> bool {
        self.0 == other.0
    }
}
impl ::core::cmp::Eq for BounceVector3NaturalMotionAnimation {}
impl ::core::fmt::Debug for BounceVector3NaturalMotionAnimation {
    fn fmt(&self, f: &mut ::core::fmt::Formatter<'_>) -> ::core::fmt::Result {
        f.debug_tuple("BounceVector3NaturalMotionAnimation").field(&self.0).finish()
    }
}
unsafe impl ::windows::core::RuntimeType for BounceVector3NaturalMotionAnimation {
    const SIGNATURE : ::windows::core::ConstBuffer = ::windows::core::ConstBuffer::from_slice ( b"rc(Microsoft.UI.Composition.BounceVector3NaturalMotionAnimation;{e3e2ee98-1211-586d-8a6d-fea5efc3957f})" ) ;
    type DefaultType = ::core::option::Option<Self>;
    fn from_default(from: &Self::DefaultType) -> ::windows::core::Result<Self> {
        from.as_ref().cloned().ok_or(::windows::core::Error::OK)
    }
}
unsafe impl ::windows::core::Vtable for BounceVector3NaturalMotionAnimation {
    type Vtable = IBounceVector3NaturalMotionAnimation_Vtbl;
}
unsafe impl ::windows::core::Interface for BounceVector3NaturalMotionAnimation {
    const IID: ::windows::core::GUID =
        <IBounceVector3NaturalMotionAnimation as ::windows::core::Interface>::IID;
}
impl ::windows::core::RuntimeName for BounceVector3NaturalMotionAnimation {
    const NAME: &'static str = "Microsoft.UI.Composition.BounceVector3NaturalMotionAnimation";
}
::windows::core::interface_hierarchy!(
    BounceVector3NaturalMotionAnimation,
    ::windows::core::IUnknown,
    ::windows::core::IInspectable
);
impl ::core::convert::TryFrom<BounceVector3NaturalMotionAnimation> for IAnimationObject {
    type Error = ::windows::core::Error;
    fn try_from(value: BounceVector3NaturalMotionAnimation) -> ::windows::core::Result<Self> {
        ::core::convert::TryFrom::try_from(&value)
    }
}
impl ::core::convert::TryFrom<&BounceVector3NaturalMotionAnimation> for IAnimationObject {
    type Error = ::windows::core::Error;
    fn try_from(value: &BounceVector3NaturalMotionAnimation) -> ::windows::core::Result<Self> {
        ::windows::core::Interface::cast(value)
    }
}
impl<'a> ::core::convert::TryFrom<&BounceVector3NaturalMotionAnimation>
    for ::windows::core::InParam<'a, IAnimationObject>
{
    type Error = ::windows::core::Error;
    fn try_from(value: &BounceVector3NaturalMotionAnimation) -> ::windows::core::Result<Self> {
        let item = ::std::convert::TryInto::try_into(value)?;
        Ok(::windows::core::InParam::owned(item))
    }
}
impl ::core::convert::TryFrom<BounceVector3NaturalMotionAnimation>
    for ::windows::Foundation::IClosable
{
    type Error = ::windows::core::Error;
    fn try_from(value: BounceVector3NaturalMotionAnimation) -> ::windows::core::Result<Self> {
        ::core::convert::TryFrom::try_from(&value)
    }
}
impl ::core::convert::TryFrom<&BounceVector3NaturalMotionAnimation>
    for ::windows::Foundation::IClosable
{
    type Error = ::windows::core::Error;
    fn try_from(value: &BounceVector3NaturalMotionAnimation) -> ::windows::core::Result<Self> {
        ::windows::core::Interface::cast(value)
    }
}
impl<'a> ::core::convert::TryFrom<&BounceVector3NaturalMotionAnimation>
    for ::windows::core::InParam<'a, ::windows::Foundation::IClosable>
{
    type Error = ::windows::core::Error;
    fn try_from(value: &BounceVector3NaturalMotionAnimation) -> ::windows::core::Result<Self> {
        let item = ::std::convert::TryInto::try_into(value)?;
        Ok(::windows::core::InParam::owned(item))
    }
}
impl ::core::convert::TryFrom<BounceVector3NaturalMotionAnimation> for ICompositionAnimationBase {
    type Error = ::windows::core::Error;
    fn try_from(value: BounceVector3NaturalMotionAnimation) -> ::windows::core::Result<Self> {
        ::core::convert::TryFrom::try_from(&value)
    }
}
impl ::core::convert::TryFrom<&BounceVector3NaturalMotionAnimation> for ICompositionAnimationBase {
    type Error = ::windows::core::Error;
    fn try_from(value: &BounceVector3NaturalMotionAnimation) -> ::windows::core::Result<Self> {
        ::windows::core::Interface::cast(value)
    }
}
impl<'a> ::core::convert::TryFrom<&BounceVector3NaturalMotionAnimation>
    for ::windows::core::InParam<'a, ICompositionAnimationBase>
{
    type Error = ::windows::core::Error;
    fn try_from(value: &BounceVector3NaturalMotionAnimation) -> ::windows::core::Result<Self> {
        let item = ::std::convert::TryInto::try_into(value)?;
        Ok(::windows::core::InParam::owned(item))
    }
}
impl ::core::convert::From<BounceVector3NaturalMotionAnimation> for Vector3NaturalMotionAnimation {
    fn from(value: BounceVector3NaturalMotionAnimation) -> Self {
        ::core::convert::From::from(&value)
    }
}
impl ::core::convert::From<&BounceVector3NaturalMotionAnimation> for Vector3NaturalMotionAnimation {
    fn from(value: &BounceVector3NaturalMotionAnimation) -> Self {
        ::windows::core::Interface::cast(value).unwrap()
    }
}
impl<'a> ::core::convert::From<&BounceVector3NaturalMotionAnimation>
    for ::windows::core::InParam<'a, Vector3NaturalMotionAnimation>
{
    fn from(value: &BounceVector3NaturalMotionAnimation) -> Self {
        ::windows::core::InParam::owned(value.into())
    }
}
impl ::core::convert::From<BounceVector3NaturalMotionAnimation> for NaturalMotionAnimation {
    fn from(value: BounceVector3NaturalMotionAnimation) -> Self {
        ::core::convert::From::from(&value)
    }
}
impl ::core::convert::From<&BounceVector3NaturalMotionAnimation> for NaturalMotionAnimation {
    fn from(value: &BounceVector3NaturalMotionAnimation) -> Self {
        ::windows::core::Interface::cast(value).unwrap()
    }
}
impl<'a> ::core::convert::From<&BounceVector3NaturalMotionAnimation>
    for ::windows::core::InParam<'a, NaturalMotionAnimation>
{
    fn from(value: &BounceVector3NaturalMotionAnimation) -> Self {
        ::windows::core::InParam::owned(value.into())
    }
}
impl ::core::convert::From<BounceVector3NaturalMotionAnimation> for CompositionAnimation {
    fn from(value: BounceVector3NaturalMotionAnimation) -> Self {
        ::core::convert::From::from(&value)
    }
}
impl ::core::convert::From<&BounceVector3NaturalMotionAnimation> for CompositionAnimation {
    fn from(value: &BounceVector3NaturalMotionAnimation) -> Self {
        ::windows::core::Interface::cast(value).unwrap()
    }
}
impl<'a> ::core::convert::From<&BounceVector3NaturalMotionAnimation>
    for ::windows::core::InParam<'a, CompositionAnimation>
{
    fn from(value: &BounceVector3NaturalMotionAnimation) -> Self {
        ::windows::core::InParam::owned(value.into())
    }
}
impl ::core::convert::From<BounceVector3NaturalMotionAnimation> for CompositionObject {
    fn from(value: BounceVector3NaturalMotionAnimation) -> Self {
        ::core::convert::From::from(&value)
    }
}
impl ::core::convert::From<&BounceVector3NaturalMotionAnimation> for CompositionObject {
    fn from(value: &BounceVector3NaturalMotionAnimation) -> Self {
        ::windows::core::Interface::cast(value).unwrap()
    }
}
impl<'a> ::core::convert::From<&BounceVector3NaturalMotionAnimation>
    for ::windows::core::InParam<'a, CompositionObject>
{
    fn from(value: &BounceVector3NaturalMotionAnimation) -> Self {
        ::windows::core::InParam::owned(value.into())
    }
}
unsafe impl ::core::marker::Send for BounceVector3NaturalMotionAnimation {}
unsafe impl ::core::marker::Sync for BounceVector3NaturalMotionAnimation {}
#[doc = "*Required features: `\"UI_Composition\"`*"]
#[repr(transparent)]
pub struct CircleEasingFunction(::windows::core::IUnknown);
impl CircleEasingFunction {
    pub fn PopulatePropertyInfo(
        &self,
        propertyname: &::windows::core::HSTRING,
        propertyinfo: &AnimationPropertyInfo,
    ) -> ::windows::core::Result<()> {
        let this = &::windows::core::Interface::cast::<IAnimationObject>(self)?;
        unsafe {
            (::windows::core::Vtable::vtable(this).PopulatePropertyInfo)(
                ::windows::core::Vtable::as_raw(this),
                ::core::mem::transmute_copy(propertyname),
                ::core::mem::transmute_copy(propertyinfo),
            )
            .ok()
        }
    }
    pub fn Mode(&self) -> ::windows::core::Result<CompositionEasingFunctionMode> {
        let this = self;
        unsafe {
            let mut result__ = ::core::mem::MaybeUninit::zeroed();
            (::windows::core::Vtable::vtable(this).Mode)(
                ::windows::core::Vtable::as_raw(this),
                result__.as_mut_ptr(),
            )
            .from_abi::<CompositionEasingFunctionMode>(result__)
        }
    }
    pub fn Close(&self) -> ::windows::core::Result<()> {
        let this = &::windows::core::Interface::cast::<::windows::Foundation::IClosable>(self)?;
        unsafe {
            (::windows::core::Vtable::vtable(this).Close)(::windows::core::Vtable::as_raw(this))
                .ok()
        }
    }
    pub fn Compositor(&self) -> ::windows::core::Result<Compositor> {
        let this = &::windows::core::Interface::cast::<ICompositionObject>(self)?;
        unsafe {
            let mut result__ = ::core::mem::MaybeUninit::zeroed();
            (::windows::core::Vtable::vtable(this).Compositor)(
                ::windows::core::Vtable::as_raw(this),
                result__.as_mut_ptr(),
            )
            .from_abi::<Compositor>(result__)
        }
    }
    pub fn Properties(&self) -> ::windows::core::Result<CompositionPropertySet> {
        let this = &::windows::core::Interface::cast::<ICompositionObject>(self)?;
        unsafe {
            let mut result__ = ::core::mem::MaybeUninit::zeroed();
            (::windows::core::Vtable::vtable(this).Properties)(
                ::windows::core::Vtable::as_raw(this),
                result__.as_mut_ptr(),
            )
            .from_abi::<CompositionPropertySet>(result__)
        }
    }
    pub fn StartAnimation<'a, P0>(
        &self,
        propertyname: &::windows::core::HSTRING,
        animation: P0,
    ) -> ::windows::core::Result<()>
    where
        P0: ::std::convert::Into<::windows::core::InParam<'a, CompositionAnimation>>,
    {
        let this = &::windows::core::Interface::cast::<ICompositionObject>(self)?;
        unsafe {
            (::windows::core::Vtable::vtable(this).StartAnimation)(
                ::windows::core::Vtable::as_raw(this),
                ::core::mem::transmute_copy(propertyname),
                animation.into().abi(),
            )
            .ok()
        }
    }
    pub fn StopAnimation(
        &self,
        propertyname: &::windows::core::HSTRING,
    ) -> ::windows::core::Result<()> {
        let this = &::windows::core::Interface::cast::<ICompositionObject>(self)?;
        unsafe {
            (::windows::core::Vtable::vtable(this).StopAnimation)(
                ::windows::core::Vtable::as_raw(this),
                ::core::mem::transmute_copy(propertyname),
            )
            .ok()
        }
    }
    pub fn Comment(&self) -> ::windows::core::Result<::windows::core::HSTRING> {
        let this = &::windows::core::Interface::cast::<ICompositionObject2>(self)?;
        unsafe {
            let mut result__ = ::core::mem::MaybeUninit::zeroed();
            (::windows::core::Vtable::vtable(this).Comment)(
                ::windows::core::Vtable::as_raw(this),
                result__.as_mut_ptr(),
            )
            .from_abi::<::windows::core::HSTRING>(result__)
        }
    }
    pub fn SetComment(&self, value: &::windows::core::HSTRING) -> ::windows::core::Result<()> {
        let this = &::windows::core::Interface::cast::<ICompositionObject2>(self)?;
        unsafe {
            (::windows::core::Vtable::vtable(this).SetComment)(
                ::windows::core::Vtable::as_raw(this),
                ::core::mem::transmute_copy(value),
            )
            .ok()
        }
    }
    pub fn ImplicitAnimations(&self) -> ::windows::core::Result<ImplicitAnimationCollection> {
        let this = &::windows::core::Interface::cast::<ICompositionObject2>(self)?;
        unsafe {
            let mut result__ = ::core::mem::MaybeUninit::zeroed();
            (::windows::core::Vtable::vtable(this).ImplicitAnimations)(
                ::windows::core::Vtable::as_raw(this),
                result__.as_mut_ptr(),
            )
            .from_abi::<ImplicitAnimationCollection>(result__)
        }
    }
    pub fn SetImplicitAnimations(
        &self,
        value: &ImplicitAnimationCollection,
    ) -> ::windows::core::Result<()> {
        let this = &::windows::core::Interface::cast::<ICompositionObject2>(self)?;
        unsafe {
            (::windows::core::Vtable::vtable(this).SetImplicitAnimations)(
                ::windows::core::Vtable::as_raw(this),
                ::core::mem::transmute_copy(value),
            )
            .ok()
        }
    }
    pub fn StartAnimationGroup<'a, P0, E0>(&self, value: P0) -> ::windows::core::Result<()>
    where
        P0: ::std::convert::TryInto<
            ::windows::core::InParam<'a, ICompositionAnimationBase>,
            Error = E0,
        >,
        E0: ::std::convert::Into<::windows::core::Error>,
    {
        let this = &::windows::core::Interface::cast::<ICompositionObject2>(self)?;
        unsafe {
            (::windows::core::Vtable::vtable(this).StartAnimationGroup)(
                ::windows::core::Vtable::as_raw(this),
                value.try_into().map_err(|e| e.into())?.abi(),
            )
            .ok()
        }
    }
    pub fn StopAnimationGroup<'a, P0, E0>(&self, value: P0) -> ::windows::core::Result<()>
    where
        P0: ::std::convert::TryInto<
            ::windows::core::InParam<'a, ICompositionAnimationBase>,
            Error = E0,
        >,
        E0: ::std::convert::Into<::windows::core::Error>,
    {
        let this = &::windows::core::Interface::cast::<ICompositionObject2>(self)?;
        unsafe {
            (::windows::core::Vtable::vtable(this).StopAnimationGroup)(
                ::windows::core::Vtable::as_raw(this),
                value.try_into().map_err(|e| e.into())?.abi(),
            )
            .ok()
        }
    }
    #[doc = "*Required features: `\"UI_Dispatching\"`*"]
    #[cfg(feature = "UI_Dispatching")]
    pub fn DispatcherQueue(&self) -> ::windows::core::Result<super::Dispatching::DispatcherQueue> {
        let this = &::windows::core::Interface::cast::<ICompositionObject3>(self)?;
        unsafe {
            let mut result__ = ::core::mem::MaybeUninit::zeroed();
            (::windows::core::Vtable::vtable(this).DispatcherQueue)(
                ::windows::core::Vtable::as_raw(this),
                result__.as_mut_ptr(),
            )
            .from_abi::<super::Dispatching::DispatcherQueue>(result__)
        }
    }
    pub fn TryGetAnimationController(
        &self,
        propertyname: &::windows::core::HSTRING,
    ) -> ::windows::core::Result<AnimationController> {
        let this = &::windows::core::Interface::cast::<ICompositionObject4>(self)?;
        unsafe {
            let mut result__ = ::core::mem::MaybeUninit::zeroed();
            (::windows::core::Vtable::vtable(this).TryGetAnimationController)(
                ::windows::core::Vtable::as_raw(this),
                ::core::mem::transmute_copy(propertyname),
                result__.as_mut_ptr(),
            )
            .from_abi::<AnimationController>(result__)
        }
    }
    pub fn StartAnimationWithController<'a, P0>(
        &self,
        propertyname: &::windows::core::HSTRING,
        animation: P0,
        animationcontroller: &AnimationController,
    ) -> ::windows::core::Result<()>
    where
        P0: ::std::convert::Into<::windows::core::InParam<'a, CompositionAnimation>>,
    {
        let this = &::windows::core::Interface::cast::<ICompositionObject5>(self)?;
        unsafe {
            (::windows::core::Vtable::vtable(this).StartAnimationWithController)(
                ::windows::core::Vtable::as_raw(this),
                ::core::mem::transmute_copy(propertyname),
                animation.into().abi(),
                ::core::mem::transmute_copy(animationcontroller),
            )
            .ok()
        }
    }
}
impl ::core::clone::Clone for CircleEasingFunction {
    fn clone(&self) -> Self {
        Self(self.0.clone())
    }
}
impl ::core::cmp::PartialEq for CircleEasingFunction {
    fn eq(&self, other: &Self) -> bool {
        self.0 == other.0
    }
}
impl ::core::cmp::Eq for CircleEasingFunction {}
impl ::core::fmt::Debug for CircleEasingFunction {
    fn fmt(&self, f: &mut ::core::fmt::Formatter<'_>) -> ::core::fmt::Result {
        f.debug_tuple("CircleEasingFunction").field(&self.0).finish()
    }
}
unsafe impl ::windows::core::RuntimeType for CircleEasingFunction {
    const SIGNATURE: ::windows::core::ConstBuffer = ::windows::core::ConstBuffer::from_slice(
        b"rc(Microsoft.UI.Composition.CircleEasingFunction;{414b172c-bf27-5ead-93e0-35915322db2c})",
    );
    type DefaultType = ::core::option::Option<Self>;
    fn from_default(from: &Self::DefaultType) -> ::windows::core::Result<Self> {
        from.as_ref().cloned().ok_or(::windows::core::Error::OK)
    }
}
unsafe impl ::windows::core::Vtable for CircleEasingFunction {
    type Vtable = ICircleEasingFunction_Vtbl;
}
unsafe impl ::windows::core::Interface for CircleEasingFunction {
    const IID: ::windows::core::GUID = <ICircleEasingFunction as ::windows::core::Interface>::IID;
}
impl ::windows::core::RuntimeName for CircleEasingFunction {
    const NAME: &'static str = "Microsoft.UI.Composition.CircleEasingFunction";
}
::windows::core::interface_hierarchy!(
    CircleEasingFunction,
    ::windows::core::IUnknown,
    ::windows::core::IInspectable
);
impl ::core::convert::TryFrom<CircleEasingFunction> for IAnimationObject {
    type Error = ::windows::core::Error;
    fn try_from(value: CircleEasingFunction) -> ::windows::core::Result<Self> {
        ::core::convert::TryFrom::try_from(&value)
    }
}
impl ::core::convert::TryFrom<&CircleEasingFunction> for IAnimationObject {
    type Error = ::windows::core::Error;
    fn try_from(value: &CircleEasingFunction) -> ::windows::core::Result<Self> {
        ::windows::core::Interface::cast(value)
    }
}
impl<'a> ::core::convert::TryFrom<&CircleEasingFunction>
    for ::windows::core::InParam<'a, IAnimationObject>
{
    type Error = ::windows::core::Error;
    fn try_from(value: &CircleEasingFunction) -> ::windows::core::Result<Self> {
        let item = ::std::convert::TryInto::try_into(value)?;
        Ok(::windows::core::InParam::owned(item))
    }
}
impl ::core::convert::TryFrom<CircleEasingFunction> for ::windows::Foundation::IClosable {
    type Error = ::windows::core::Error;
    fn try_from(value: CircleEasingFunction) -> ::windows::core::Result<Self> {
        ::core::convert::TryFrom::try_from(&value)
    }
}
impl ::core::convert::TryFrom<&CircleEasingFunction> for ::windows::Foundation::IClosable {
    type Error = ::windows::core::Error;
    fn try_from(value: &CircleEasingFunction) -> ::windows::core::Result<Self> {
        ::windows::core::Interface::cast(value)
    }
}
impl<'a> ::core::convert::TryFrom<&CircleEasingFunction>
    for ::windows::core::InParam<'a, ::windows::Foundation::IClosable>
{
    type Error = ::windows::core::Error;
    fn try_from(value: &CircleEasingFunction) -> ::windows::core::Result<Self> {
        let item = ::std::convert::TryInto::try_into(value)?;
        Ok(::windows::core::InParam::owned(item))
    }
}
impl ::core::convert::From<CircleEasingFunction> for CompositionEasingFunction {
    fn from(value: CircleEasingFunction) -> Self {
        ::core::convert::From::from(&value)
    }
}
impl ::core::convert::From<&CircleEasingFunction> for CompositionEasingFunction {
    fn from(value: &CircleEasingFunction) -> Self {
        ::windows::core::Interface::cast(value).unwrap()
    }
}
impl<'a> ::core::convert::From<&CircleEasingFunction>
    for ::windows::core::InParam<'a, CompositionEasingFunction>
{
    fn from(value: &CircleEasingFunction) -> Self {
        ::windows::core::InParam::owned(value.into())
    }
}
impl ::core::convert::From<CircleEasingFunction> for CompositionObject {
    fn from(value: CircleEasingFunction) -> Self {
        ::core::convert::From::from(&value)
    }
}
impl ::core::convert::From<&CircleEasingFunction> for CompositionObject {
    fn from(value: &CircleEasingFunction) -> Self {
        ::windows::core::Interface::cast(value).unwrap()
    }
}
impl<'a> ::core::convert::From<&CircleEasingFunction>
    for ::windows::core::InParam<'a, CompositionObject>
{
    fn from(value: &CircleEasingFunction) -> Self {
        ::windows::core::InParam::owned(value.into())
    }
}
unsafe impl ::core::marker::Send for CircleEasingFunction {}
unsafe impl ::core::marker::Sync for CircleEasingFunction {}
#[doc = "*Required features: `\"UI_Composition\"`*"]
#[repr(transparent)]
pub struct ColorKeyFrameAnimation(::windows::core::IUnknown);
impl ColorKeyFrameAnimation {
    pub fn PopulatePropertyInfo(
        &self,
        propertyname: &::windows::core::HSTRING,
        propertyinfo: &AnimationPropertyInfo,
    ) -> ::windows::core::Result<()> {
        let this = &::windows::core::Interface::cast::<IAnimationObject>(self)?;
        unsafe {
            (::windows::core::Vtable::vtable(this).PopulatePropertyInfo)(
                ::windows::core::Vtable::as_raw(this),
                ::core::mem::transmute_copy(propertyname),
                ::core::mem::transmute_copy(propertyinfo),
            )
            .ok()
        }
    }
    pub fn Close(&self) -> ::windows::core::Result<()> {
        let this = &::windows::core::Interface::cast::<::windows::Foundation::IClosable>(self)?;
        unsafe {
            (::windows::core::Vtable::vtable(this).Close)(::windows::core::Vtable::as_raw(this))
                .ok()
        }
    }
    pub fn InterpolationColorSpace(&self) -> ::windows::core::Result<CompositionColorSpace> {
        let this = self;
        unsafe {
            let mut result__ = ::core::mem::MaybeUninit::zeroed();
            (::windows::core::Vtable::vtable(this).InterpolationColorSpace)(
                ::windows::core::Vtable::as_raw(this),
                result__.as_mut_ptr(),
            )
            .from_abi::<CompositionColorSpace>(result__)
        }
    }
    pub fn SetInterpolationColorSpace(
        &self,
        value: CompositionColorSpace,
    ) -> ::windows::core::Result<()> {
        let this = self;
        unsafe {
            (::windows::core::Vtable::vtable(this).SetInterpolationColorSpace)(
                ::windows::core::Vtable::as_raw(this),
                value,
            )
            .ok()
        }
    }
    pub fn InsertKeyFrame(
        &self,
        normalizedprogresskey: f32,
        value: ::windows::UI::Color,
    ) -> ::windows::core::Result<()> {
        let this = self;
        unsafe {
            (::windows::core::Vtable::vtable(this).InsertKeyFrame)(
                ::windows::core::Vtable::as_raw(this),
                normalizedprogresskey,
                value,
            )
            .ok()
        }
    }
    pub fn InsertKeyFrameWithEasingFunction<'a, P0>(
        &self,
        normalizedprogresskey: f32,
        value: ::windows::UI::Color,
        easingfunction: P0,
    ) -> ::windows::core::Result<()>
    where
        P0: ::std::convert::Into<::windows::core::InParam<'a, CompositionEasingFunction>>,
    {
        let this = self;
        unsafe {
            (::windows::core::Vtable::vtable(this).InsertKeyFrameWithEasingFunction)(
                ::windows::core::Vtable::as_raw(this),
                normalizedprogresskey,
                value,
                easingfunction.into().abi(),
            )
            .ok()
        }
    }
    pub fn ClearAllParameters(&self) -> ::windows::core::Result<()> {
        let this = &::windows::core::Interface::cast::<ICompositionAnimation>(self)?;
        unsafe {
            (::windows::core::Vtable::vtable(this).ClearAllParameters)(
                ::windows::core::Vtable::as_raw(this),
            )
            .ok()
        }
    }
    pub fn ClearParameter(&self, key: &::windows::core::HSTRING) -> ::windows::core::Result<()> {
        let this = &::windows::core::Interface::cast::<ICompositionAnimation>(self)?;
        unsafe {
            (::windows::core::Vtable::vtable(this).ClearParameter)(
                ::windows::core::Vtable::as_raw(this),
                ::core::mem::transmute_copy(key),
            )
            .ok()
        }
    }
    pub fn SetColorParameter(
        &self,
        key: &::windows::core::HSTRING,
        value: ::windows::UI::Color,
    ) -> ::windows::core::Result<()> {
        let this = &::windows::core::Interface::cast::<ICompositionAnimation>(self)?;
        unsafe {
            (::windows::core::Vtable::vtable(this).SetColorParameter)(
                ::windows::core::Vtable::as_raw(this),
                ::core::mem::transmute_copy(key),
                value,
            )
            .ok()
        }
    }
    pub fn SetMatrix3x2Parameter(
        &self,
        key: &::windows::core::HSTRING,
        value: ::windows::Foundation::Numerics::Matrix3x2,
    ) -> ::windows::core::Result<()> {
        let this = &::windows::core::Interface::cast::<ICompositionAnimation>(self)?;
        unsafe {
            (::windows::core::Vtable::vtable(this).SetMatrix3x2Parameter)(
                ::windows::core::Vtable::as_raw(this),
                ::core::mem::transmute_copy(key),
                value,
            )
            .ok()
        }
    }
    pub fn SetMatrix4x4Parameter(
        &self,
        key: &::windows::core::HSTRING,
        value: ::windows::Foundation::Numerics::Matrix4x4,
    ) -> ::windows::core::Result<()> {
        let this = &::windows::core::Interface::cast::<ICompositionAnimation>(self)?;
        unsafe {
            (::windows::core::Vtable::vtable(this).SetMatrix4x4Parameter)(
                ::windows::core::Vtable::as_raw(this),
                ::core::mem::transmute_copy(key),
                value,
            )
            .ok()
        }
    }
    pub fn SetQuaternionParameter(
        &self,
        key: &::windows::core::HSTRING,
        value: ::windows::Foundation::Numerics::Quaternion,
    ) -> ::windows::core::Result<()> {
        let this = &::windows::core::Interface::cast::<ICompositionAnimation>(self)?;
        unsafe {
            (::windows::core::Vtable::vtable(this).SetQuaternionParameter)(
                ::windows::core::Vtable::as_raw(this),
                ::core::mem::transmute_copy(key),
                value,
            )
            .ok()
        }
    }
    pub fn SetReferenceParameter<'a, P0>(
        &self,
        key: &::windows::core::HSTRING,
        compositionobject: P0,
    ) -> ::windows::core::Result<()>
    where
        P0: ::std::convert::Into<::windows::core::InParam<'a, CompositionObject>>,
    {
        let this = &::windows::core::Interface::cast::<ICompositionAnimation>(self)?;
        unsafe {
            (::windows::core::Vtable::vtable(this).SetReferenceParameter)(
                ::windows::core::Vtable::as_raw(this),
                ::core::mem::transmute_copy(key),
                compositionobject.into().abi(),
            )
            .ok()
        }
    }
    pub fn SetScalarParameter(
        &self,
        key: &::windows::core::HSTRING,
        value: f32,
    ) -> ::windows::core::Result<()> {
        let this = &::windows::core::Interface::cast::<ICompositionAnimation>(self)?;
        unsafe {
            (::windows::core::Vtable::vtable(this).SetScalarParameter)(
                ::windows::core::Vtable::as_raw(this),
                ::core::mem::transmute_copy(key),
                value,
            )
            .ok()
        }
    }
    pub fn SetVector2Parameter(
        &self,
        key: &::windows::core::HSTRING,
        value: ::windows::Foundation::Numerics::Vector2,
    ) -> ::windows::core::Result<()> {
        let this = &::windows::core::Interface::cast::<ICompositionAnimation>(self)?;
        unsafe {
            (::windows::core::Vtable::vtable(this).SetVector2Parameter)(
                ::windows::core::Vtable::as_raw(this),
                ::core::mem::transmute_copy(key),
                value,
            )
            .ok()
        }
    }
    pub fn SetVector3Parameter(
        &self,
        key: &::windows::core::HSTRING,
        value: ::windows::Foundation::Numerics::Vector3,
    ) -> ::windows::core::Result<()> {
        let this = &::windows::core::Interface::cast::<ICompositionAnimation>(self)?;
        unsafe {
            (::windows::core::Vtable::vtable(this).SetVector3Parameter)(
                ::windows::core::Vtable::as_raw(this),
                ::core::mem::transmute_copy(key),
                value,
            )
            .ok()
        }
    }
    pub fn SetVector4Parameter(
        &self,
        key: &::windows::core::HSTRING,
        value: ::windows::Foundation::Numerics::Vector4,
    ) -> ::windows::core::Result<()> {
        let this = &::windows::core::Interface::cast::<ICompositionAnimation>(self)?;
        unsafe {
            (::windows::core::Vtable::vtable(this).SetVector4Parameter)(
                ::windows::core::Vtable::as_raw(this),
                ::core::mem::transmute_copy(key),
                value,
            )
            .ok()
        }
    }
    pub fn SetBooleanParameter(
        &self,
        key: &::windows::core::HSTRING,
        value: bool,
    ) -> ::windows::core::Result<()> {
        let this = &::windows::core::Interface::cast::<ICompositionAnimation2>(self)?;
        unsafe {
            (::windows::core::Vtable::vtable(this).SetBooleanParameter)(
                ::windows::core::Vtable::as_raw(this),
                ::core::mem::transmute_copy(key),
                value,
            )
            .ok()
        }
    }
    pub fn Target(&self) -> ::windows::core::Result<::windows::core::HSTRING> {
        let this = &::windows::core::Interface::cast::<ICompositionAnimation2>(self)?;
        unsafe {
            let mut result__ = ::core::mem::MaybeUninit::zeroed();
            (::windows::core::Vtable::vtable(this).Target)(
                ::windows::core::Vtable::as_raw(this),
                result__.as_mut_ptr(),
            )
            .from_abi::<::windows::core::HSTRING>(result__)
        }
    }
    pub fn SetTarget(&self, value: &::windows::core::HSTRING) -> ::windows::core::Result<()> {
        let this = &::windows::core::Interface::cast::<ICompositionAnimation2>(self)?;
        unsafe {
            (::windows::core::Vtable::vtable(this).SetTarget)(
                ::windows::core::Vtable::as_raw(this),
                ::core::mem::transmute_copy(value),
            )
            .ok()
        }
    }
    pub fn InitialValueExpressions(
        &self,
    ) -> ::windows::core::Result<InitialValueExpressionCollection> {
        let this = &::windows::core::Interface::cast::<ICompositionAnimation3>(self)?;
        unsafe {
            let mut result__ = ::core::mem::MaybeUninit::zeroed();
            (::windows::core::Vtable::vtable(this).InitialValueExpressions)(
                ::windows::core::Vtable::as_raw(this),
                result__.as_mut_ptr(),
            )
            .from_abi::<InitialValueExpressionCollection>(result__)
        }
    }
    pub fn SetExpressionReferenceParameter<'a, P0, E0>(
        &self,
        parametername: &::windows::core::HSTRING,
        source: P0,
    ) -> ::windows::core::Result<()>
    where
        P0: ::std::convert::TryInto<::windows::core::InParam<'a, IAnimationObject>, Error = E0>,
        E0: ::std::convert::Into<::windows::core::Error>,
    {
        let this = &::windows::core::Interface::cast::<ICompositionAnimation4>(self)?;
        unsafe {
            (::windows::core::Vtable::vtable(this).SetExpressionReferenceParameter)(
                ::windows::core::Vtable::as_raw(this),
                ::core::mem::transmute_copy(parametername),
                source.try_into().map_err(|e| e.into())?.abi(),
            )
            .ok()
        }
    }
    pub fn Compositor(&self) -> ::windows::core::Result<Compositor> {
        let this = &::windows::core::Interface::cast::<ICompositionObject>(self)?;
        unsafe {
            let mut result__ = ::core::mem::MaybeUninit::zeroed();
            (::windows::core::Vtable::vtable(this).Compositor)(
                ::windows::core::Vtable::as_raw(this),
                result__.as_mut_ptr(),
            )
            .from_abi::<Compositor>(result__)
        }
    }
    pub fn Properties(&self) -> ::windows::core::Result<CompositionPropertySet> {
        let this = &::windows::core::Interface::cast::<ICompositionObject>(self)?;
        unsafe {
            let mut result__ = ::core::mem::MaybeUninit::zeroed();
            (::windows::core::Vtable::vtable(this).Properties)(
                ::windows::core::Vtable::as_raw(this),
                result__.as_mut_ptr(),
            )
            .from_abi::<CompositionPropertySet>(result__)
        }
    }
    pub fn StartAnimation<'a, P0>(
        &self,
        propertyname: &::windows::core::HSTRING,
        animation: P0,
    ) -> ::windows::core::Result<()>
    where
        P0: ::std::convert::Into<::windows::core::InParam<'a, CompositionAnimation>>,
    {
        let this = &::windows::core::Interface::cast::<ICompositionObject>(self)?;
        unsafe {
            (::windows::core::Vtable::vtable(this).StartAnimation)(
                ::windows::core::Vtable::as_raw(this),
                ::core::mem::transmute_copy(propertyname),
                animation.into().abi(),
            )
            .ok()
        }
    }
    pub fn StopAnimation(
        &self,
        propertyname: &::windows::core::HSTRING,
    ) -> ::windows::core::Result<()> {
        let this = &::windows::core::Interface::cast::<ICompositionObject>(self)?;
        unsafe {
            (::windows::core::Vtable::vtable(this).StopAnimation)(
                ::windows::core::Vtable::as_raw(this),
                ::core::mem::transmute_copy(propertyname),
            )
            .ok()
        }
    }
    pub fn Comment(&self) -> ::windows::core::Result<::windows::core::HSTRING> {
        let this = &::windows::core::Interface::cast::<ICompositionObject2>(self)?;
        unsafe {
            let mut result__ = ::core::mem::MaybeUninit::zeroed();
            (::windows::core::Vtable::vtable(this).Comment)(
                ::windows::core::Vtable::as_raw(this),
                result__.as_mut_ptr(),
            )
            .from_abi::<::windows::core::HSTRING>(result__)
        }
    }
    pub fn SetComment(&self, value: &::windows::core::HSTRING) -> ::windows::core::Result<()> {
        let this = &::windows::core::Interface::cast::<ICompositionObject2>(self)?;
        unsafe {
            (::windows::core::Vtable::vtable(this).SetComment)(
                ::windows::core::Vtable::as_raw(this),
                ::core::mem::transmute_copy(value),
            )
            .ok()
        }
    }
    pub fn ImplicitAnimations(&self) -> ::windows::core::Result<ImplicitAnimationCollection> {
        let this = &::windows::core::Interface::cast::<ICompositionObject2>(self)?;
        unsafe {
            let mut result__ = ::core::mem::MaybeUninit::zeroed();
            (::windows::core::Vtable::vtable(this).ImplicitAnimations)(
                ::windows::core::Vtable::as_raw(this),
                result__.as_mut_ptr(),
            )
            .from_abi::<ImplicitAnimationCollection>(result__)
        }
    }
    pub fn SetImplicitAnimations(
        &self,
        value: &ImplicitAnimationCollection,
    ) -> ::windows::core::Result<()> {
        let this = &::windows::core::Interface::cast::<ICompositionObject2>(self)?;
        unsafe {
            (::windows::core::Vtable::vtable(this).SetImplicitAnimations)(
                ::windows::core::Vtable::as_raw(this),
                ::core::mem::transmute_copy(value),
            )
            .ok()
        }
    }
    pub fn StartAnimationGroup<'a, P0, E0>(&self, value: P0) -> ::windows::core::Result<()>
    where
        P0: ::std::convert::TryInto<
            ::windows::core::InParam<'a, ICompositionAnimationBase>,
            Error = E0,
        >,
        E0: ::std::convert::Into<::windows::core::Error>,
    {
        let this = &::windows::core::Interface::cast::<ICompositionObject2>(self)?;
        unsafe {
            (::windows::core::Vtable::vtable(this).StartAnimationGroup)(
                ::windows::core::Vtable::as_raw(this),
                value.try_into().map_err(|e| e.into())?.abi(),
            )
            .ok()
        }
    }
    pub fn StopAnimationGroup<'a, P0, E0>(&self, value: P0) -> ::windows::core::Result<()>
    where
        P0: ::std::convert::TryInto<
            ::windows::core::InParam<'a, ICompositionAnimationBase>,
            Error = E0,
        >,
        E0: ::std::convert::Into<::windows::core::Error>,
    {
        let this = &::windows::core::Interface::cast::<ICompositionObject2>(self)?;
        unsafe {
            (::windows::core::Vtable::vtable(this).StopAnimationGroup)(
                ::windows::core::Vtable::as_raw(this),
                value.try_into().map_err(|e| e.into())?.abi(),
            )
            .ok()
        }
    }
    #[doc = "*Required features: `\"UI_Dispatching\"`*"]
    #[cfg(feature = "UI_Dispatching")]
    pub fn DispatcherQueue(&self) -> ::windows::core::Result<super::Dispatching::DispatcherQueue> {
        let this = &::windows::core::Interface::cast::<ICompositionObject3>(self)?;
        unsafe {
            let mut result__ = ::core::mem::MaybeUninit::zeroed();
            (::windows::core::Vtable::vtable(this).DispatcherQueue)(
                ::windows::core::Vtable::as_raw(this),
                result__.as_mut_ptr(),
            )
            .from_abi::<super::Dispatching::DispatcherQueue>(result__)
        }
    }
    pub fn TryGetAnimationController(
        &self,
        propertyname: &::windows::core::HSTRING,
    ) -> ::windows::core::Result<AnimationController> {
        let this = &::windows::core::Interface::cast::<ICompositionObject4>(self)?;
        unsafe {
            let mut result__ = ::core::mem::MaybeUninit::zeroed();
            (::windows::core::Vtable::vtable(this).TryGetAnimationController)(
                ::windows::core::Vtable::as_raw(this),
                ::core::mem::transmute_copy(propertyname),
                result__.as_mut_ptr(),
            )
            .from_abi::<AnimationController>(result__)
        }
    }
    pub fn StartAnimationWithController<'a, P0>(
        &self,
        propertyname: &::windows::core::HSTRING,
        animation: P0,
        animationcontroller: &AnimationController,
    ) -> ::windows::core::Result<()>
    where
        P0: ::std::convert::Into<::windows::core::InParam<'a, CompositionAnimation>>,
    {
        let this = &::windows::core::Interface::cast::<ICompositionObject5>(self)?;
        unsafe {
            (::windows::core::Vtable::vtable(this).StartAnimationWithController)(
                ::windows::core::Vtable::as_raw(this),
                ::core::mem::transmute_copy(propertyname),
                animation.into().abi(),
                ::core::mem::transmute_copy(animationcontroller),
            )
            .ok()
        }
    }
    pub fn DelayTime(&self) -> ::windows::core::Result<::windows::Foundation::TimeSpan> {
        let this = &::windows::core::Interface::cast::<IKeyFrameAnimation>(self)?;
        unsafe {
            let mut result__ = ::core::mem::MaybeUninit::zeroed();
            (::windows::core::Vtable::vtable(this).DelayTime)(
                ::windows::core::Vtable::as_raw(this),
                result__.as_mut_ptr(),
            )
            .from_abi::<::windows::Foundation::TimeSpan>(result__)
        }
    }
    pub fn SetDelayTime(
        &self,
        value: ::windows::Foundation::TimeSpan,
    ) -> ::windows::core::Result<()> {
        let this = &::windows::core::Interface::cast::<IKeyFrameAnimation>(self)?;
        unsafe {
            (::windows::core::Vtable::vtable(this).SetDelayTime)(
                ::windows::core::Vtable::as_raw(this),
                value,
            )
            .ok()
        }
    }
    pub fn Duration(&self) -> ::windows::core::Result<::windows::Foundation::TimeSpan> {
        let this = &::windows::core::Interface::cast::<IKeyFrameAnimation>(self)?;
        unsafe {
            let mut result__ = ::core::mem::MaybeUninit::zeroed();
            (::windows::core::Vtable::vtable(this).Duration)(
                ::windows::core::Vtable::as_raw(this),
                result__.as_mut_ptr(),
            )
            .from_abi::<::windows::Foundation::TimeSpan>(result__)
        }
    }
    pub fn SetDuration(
        &self,
        value: ::windows::Foundation::TimeSpan,
    ) -> ::windows::core::Result<()> {
        let this = &::windows::core::Interface::cast::<IKeyFrameAnimation>(self)?;
        unsafe {
            (::windows::core::Vtable::vtable(this).SetDuration)(
                ::windows::core::Vtable::as_raw(this),
                value,
            )
            .ok()
        }
    }
    pub fn IterationBehavior(&self) -> ::windows::core::Result<AnimationIterationBehavior> {
        let this = &::windows::core::Interface::cast::<IKeyFrameAnimation>(self)?;
        unsafe {
            let mut result__ = ::core::mem::MaybeUninit::zeroed();
            (::windows::core::Vtable::vtable(this).IterationBehavior)(
                ::windows::core::Vtable::as_raw(this),
                result__.as_mut_ptr(),
            )
            .from_abi::<AnimationIterationBehavior>(result__)
        }
    }
    pub fn SetIterationBehavior(
        &self,
        value: AnimationIterationBehavior,
    ) -> ::windows::core::Result<()> {
        let this = &::windows::core::Interface::cast::<IKeyFrameAnimation>(self)?;
        unsafe {
            (::windows::core::Vtable::vtable(this).SetIterationBehavior)(
                ::windows::core::Vtable::as_raw(this),
                value,
            )
            .ok()
        }
    }
    pub fn IterationCount(&self) -> ::windows::core::Result<i32> {
        let this = &::windows::core::Interface::cast::<IKeyFrameAnimation>(self)?;
        unsafe {
            let mut result__ = ::core::mem::MaybeUninit::zeroed();
            (::windows::core::Vtable::vtable(this).IterationCount)(
                ::windows::core::Vtable::as_raw(this),
                result__.as_mut_ptr(),
            )
            .from_abi::<i32>(result__)
        }
    }
    pub fn SetIterationCount(&self, value: i32) -> ::windows::core::Result<()> {
        let this = &::windows::core::Interface::cast::<IKeyFrameAnimation>(self)?;
        unsafe {
            (::windows::core::Vtable::vtable(this).SetIterationCount)(
                ::windows::core::Vtable::as_raw(this),
                value,
            )
            .ok()
        }
    }
    pub fn KeyFrameCount(&self) -> ::windows::core::Result<i32> {
        let this = &::windows::core::Interface::cast::<IKeyFrameAnimation>(self)?;
        unsafe {
            let mut result__ = ::core::mem::MaybeUninit::zeroed();
            (::windows::core::Vtable::vtable(this).KeyFrameCount)(
                ::windows::core::Vtable::as_raw(this),
                result__.as_mut_ptr(),
            )
            .from_abi::<i32>(result__)
        }
    }
    pub fn StopBehavior(&self) -> ::windows::core::Result<AnimationStopBehavior> {
        let this = &::windows::core::Interface::cast::<IKeyFrameAnimation>(self)?;
        unsafe {
            let mut result__ = ::core::mem::MaybeUninit::zeroed();
            (::windows::core::Vtable::vtable(this).StopBehavior)(
                ::windows::core::Vtable::as_raw(this),
                result__.as_mut_ptr(),
            )
            .from_abi::<AnimationStopBehavior>(result__)
        }
    }
    pub fn SetStopBehavior(&self, value: AnimationStopBehavior) -> ::windows::core::Result<()> {
        let this = &::windows::core::Interface::cast::<IKeyFrameAnimation>(self)?;
        unsafe {
            (::windows::core::Vtable::vtable(this).SetStopBehavior)(
                ::windows::core::Vtable::as_raw(this),
                value,
            )
            .ok()
        }
    }
    pub fn InsertExpressionKeyFrame(
        &self,
        normalizedprogresskey: f32,
        value: &::windows::core::HSTRING,
    ) -> ::windows::core::Result<()> {
        let this = &::windows::core::Interface::cast::<IKeyFrameAnimation>(self)?;
        unsafe {
            (::windows::core::Vtable::vtable(this).InsertExpressionKeyFrame)(
                ::windows::core::Vtable::as_raw(this),
                normalizedprogresskey,
                ::core::mem::transmute_copy(value),
            )
            .ok()
        }
    }
    pub fn InsertExpressionKeyFrameWithEasingFunction<'a, P0>(
        &self,
        normalizedprogresskey: f32,
        value: &::windows::core::HSTRING,
        easingfunction: P0,
    ) -> ::windows::core::Result<()>
    where
        P0: ::std::convert::Into<::windows::core::InParam<'a, CompositionEasingFunction>>,
    {
        let this = &::windows::core::Interface::cast::<IKeyFrameAnimation>(self)?;
        unsafe {
            (::windows::core::Vtable::vtable(this).InsertExpressionKeyFrameWithEasingFunction)(
                ::windows::core::Vtable::as_raw(this),
                normalizedprogresskey,
                ::core::mem::transmute_copy(value),
                easingfunction.into().abi(),
            )
            .ok()
        }
    }
    pub fn Direction(&self) -> ::windows::core::Result<AnimationDirection> {
        let this = &::windows::core::Interface::cast::<IKeyFrameAnimation2>(self)?;
        unsafe {
            let mut result__ = ::core::mem::MaybeUninit::zeroed();
            (::windows::core::Vtable::vtable(this).Direction)(
                ::windows::core::Vtable::as_raw(this),
                result__.as_mut_ptr(),
            )
            .from_abi::<AnimationDirection>(result__)
        }
    }
    pub fn SetDirection(&self, value: AnimationDirection) -> ::windows::core::Result<()> {
        let this = &::windows::core::Interface::cast::<IKeyFrameAnimation2>(self)?;
        unsafe {
            (::windows::core::Vtable::vtable(this).SetDirection)(
                ::windows::core::Vtable::as_raw(this),
                value,
            )
            .ok()
        }
    }
    pub fn DelayBehavior(&self) -> ::windows::core::Result<AnimationDelayBehavior> {
        let this = &::windows::core::Interface::cast::<IKeyFrameAnimation3>(self)?;
        unsafe {
            let mut result__ = ::core::mem::MaybeUninit::zeroed();
            (::windows::core::Vtable::vtable(this).DelayBehavior)(
                ::windows::core::Vtable::as_raw(this),
                result__.as_mut_ptr(),
            )
            .from_abi::<AnimationDelayBehavior>(result__)
        }
    }
    pub fn SetDelayBehavior(&self, value: AnimationDelayBehavior) -> ::windows::core::Result<()> {
        let this = &::windows::core::Interface::cast::<IKeyFrameAnimation3>(self)?;
        unsafe {
            (::windows::core::Vtable::vtable(this).SetDelayBehavior)(
                ::windows::core::Vtable::as_raw(this),
                value,
            )
            .ok()
        }
    }
}
impl ::core::clone::Clone for ColorKeyFrameAnimation {
    fn clone(&self) -> Self {
        Self(self.0.clone())
    }
}
impl ::core::cmp::PartialEq for ColorKeyFrameAnimation {
    fn eq(&self, other: &Self) -> bool {
        self.0 == other.0
    }
}
impl ::core::cmp::Eq for ColorKeyFrameAnimation {}
impl ::core::fmt::Debug for ColorKeyFrameAnimation {
    fn fmt(&self, f: &mut ::core::fmt::Formatter<'_>) -> ::core::fmt::Result {
        f.debug_tuple("ColorKeyFrameAnimation").field(&self.0).finish()
    }
}
unsafe impl ::windows::core::RuntimeType for ColorKeyFrameAnimation {
    const SIGNATURE : ::windows::core::ConstBuffer = ::windows::core::ConstBuffer::from_slice ( b"rc(Microsoft.UI.Composition.ColorKeyFrameAnimation;{f0237928-353c-5867-be93-71547e989f44})" ) ;
    type DefaultType = ::core::option::Option<Self>;
    fn from_default(from: &Self::DefaultType) -> ::windows::core::Result<Self> {
        from.as_ref().cloned().ok_or(::windows::core::Error::OK)
    }
}
unsafe impl ::windows::core::Vtable for ColorKeyFrameAnimation {
    type Vtable = IColorKeyFrameAnimation_Vtbl;
}
unsafe impl ::windows::core::Interface for ColorKeyFrameAnimation {
    const IID: ::windows::core::GUID = <IColorKeyFrameAnimation as ::windows::core::Interface>::IID;
}
impl ::windows::core::RuntimeName for ColorKeyFrameAnimation {
    const NAME: &'static str = "Microsoft.UI.Composition.ColorKeyFrameAnimation";
}
::windows::core::interface_hierarchy!(
    ColorKeyFrameAnimation,
    ::windows::core::IUnknown,
    ::windows::core::IInspectable
);
impl ::core::convert::TryFrom<ColorKeyFrameAnimation> for IAnimationObject {
    type Error = ::windows::core::Error;
    fn try_from(value: ColorKeyFrameAnimation) -> ::windows::core::Result<Self> {
        ::core::convert::TryFrom::try_from(&value)
    }
}
impl ::core::convert::TryFrom<&ColorKeyFrameAnimation> for IAnimationObject {
    type Error = ::windows::core::Error;
    fn try_from(value: &ColorKeyFrameAnimation) -> ::windows::core::Result<Self> {
        ::windows::core::Interface::cast(value)
    }
}
impl<'a> ::core::convert::TryFrom<&ColorKeyFrameAnimation>
    for ::windows::core::InParam<'a, IAnimationObject>
{
    type Error = ::windows::core::Error;
    fn try_from(value: &ColorKeyFrameAnimation) -> ::windows::core::Result<Self> {
        let item = ::std::convert::TryInto::try_into(value)?;
        Ok(::windows::core::InParam::owned(item))
    }
}
impl ::core::convert::TryFrom<ColorKeyFrameAnimation> for ::windows::Foundation::IClosable {
    type Error = ::windows::core::Error;
    fn try_from(value: ColorKeyFrameAnimation) -> ::windows::core::Result<Self> {
        ::core::convert::TryFrom::try_from(&value)
    }
}
impl ::core::convert::TryFrom<&ColorKeyFrameAnimation> for ::windows::Foundation::IClosable {
    type Error = ::windows::core::Error;
    fn try_from(value: &ColorKeyFrameAnimation) -> ::windows::core::Result<Self> {
        ::windows::core::Interface::cast(value)
    }
}
impl<'a> ::core::convert::TryFrom<&ColorKeyFrameAnimation>
    for ::windows::core::InParam<'a, ::windows::Foundation::IClosable>
{
    type Error = ::windows::core::Error;
    fn try_from(value: &ColorKeyFrameAnimation) -> ::windows::core::Result<Self> {
        let item = ::std::convert::TryInto::try_into(value)?;
        Ok(::windows::core::InParam::owned(item))
    }
}
impl ::core::convert::TryFrom<ColorKeyFrameAnimation> for ICompositionAnimationBase {
    type Error = ::windows::core::Error;
    fn try_from(value: ColorKeyFrameAnimation) -> ::windows::core::Result<Self> {
        ::core::convert::TryFrom::try_from(&value)
    }
}
impl ::core::convert::TryFrom<&ColorKeyFrameAnimation> for ICompositionAnimationBase {
    type Error = ::windows::core::Error;
    fn try_from(value: &ColorKeyFrameAnimation) -> ::windows::core::Result<Self> {
        ::windows::core::Interface::cast(value)
    }
}
impl<'a> ::core::convert::TryFrom<&ColorKeyFrameAnimation>
    for ::windows::core::InParam<'a, ICompositionAnimationBase>
{
    type Error = ::windows::core::Error;
    fn try_from(value: &ColorKeyFrameAnimation) -> ::windows::core::Result<Self> {
        let item = ::std::convert::TryInto::try_into(value)?;
        Ok(::windows::core::InParam::owned(item))
    }
}
impl ::core::convert::From<ColorKeyFrameAnimation> for KeyFrameAnimation {
    fn from(value: ColorKeyFrameAnimation) -> Self {
        ::core::convert::From::from(&value)
    }
}
impl ::core::convert::From<&ColorKeyFrameAnimation> for KeyFrameAnimation {
    fn from(value: &ColorKeyFrameAnimation) -> Self {
        ::windows::core::Interface::cast(value).unwrap()
    }
}
impl<'a> ::core::convert::From<&ColorKeyFrameAnimation>
    for ::windows::core::InParam<'a, KeyFrameAnimation>
{
    fn from(value: &ColorKeyFrameAnimation) -> Self {
        ::windows::core::InParam::owned(value.into())
    }
}
impl ::core::convert::From<ColorKeyFrameAnimation> for CompositionAnimation {
    fn from(value: ColorKeyFrameAnimation) -> Self {
        ::core::convert::From::from(&value)
    }
}
impl ::core::convert::From<&ColorKeyFrameAnimation> for CompositionAnimation {
    fn from(value: &ColorKeyFrameAnimation) -> Self {
        ::windows::core::Interface::cast(value).unwrap()
    }
}
impl<'a> ::core::convert::From<&ColorKeyFrameAnimation>
    for ::windows::core::InParam<'a, CompositionAnimation>
{
    fn from(value: &ColorKeyFrameAnimation) -> Self {
        ::windows::core::InParam::owned(value.into())
    }
}
impl ::core::convert::From<ColorKeyFrameAnimation> for CompositionObject {
    fn from(value: ColorKeyFrameAnimation) -> Self {
        ::core::convert::From::from(&value)
    }
}
impl ::core::convert::From<&ColorKeyFrameAnimation> for CompositionObject {
    fn from(value: &ColorKeyFrameAnimation) -> Self {
        ::windows::core::Interface::cast(value).unwrap()
    }
}
impl<'a> ::core::convert::From<&ColorKeyFrameAnimation>
    for ::windows::core::InParam<'a, CompositionObject>
{
    fn from(value: &ColorKeyFrameAnimation) -> Self {
        ::windows::core::InParam::owned(value.into())
    }
}
unsafe impl ::core::marker::Send for ColorKeyFrameAnimation {}
unsafe impl ::core::marker::Sync for ColorKeyFrameAnimation {}
#[doc = "*Required features: `\"UI_Composition\"`*"]
#[repr(transparent)]
pub struct CompositionAnimation(::windows::core::IUnknown);
impl CompositionAnimation {
    pub fn PopulatePropertyInfo(
        &self,
        propertyname: &::windows::core::HSTRING,
        propertyinfo: &AnimationPropertyInfo,
    ) -> ::windows::core::Result<()> {
        let this = &::windows::core::Interface::cast::<IAnimationObject>(self)?;
        unsafe {
            (::windows::core::Vtable::vtable(this).PopulatePropertyInfo)(
                ::windows::core::Vtable::as_raw(this),
                ::core::mem::transmute_copy(propertyname),
                ::core::mem::transmute_copy(propertyinfo),
            )
            .ok()
        }
    }
    pub fn Close(&self) -> ::windows::core::Result<()> {
        let this = &::windows::core::Interface::cast::<::windows::Foundation::IClosable>(self)?;
        unsafe {
            (::windows::core::Vtable::vtable(this).Close)(::windows::core::Vtable::as_raw(this))
                .ok()
        }
    }
    pub fn ClearAllParameters(&self) -> ::windows::core::Result<()> {
        let this = self;
        unsafe {
            (::windows::core::Vtable::vtable(this).ClearAllParameters)(
                ::windows::core::Vtable::as_raw(this),
            )
            .ok()
        }
    }
    pub fn ClearParameter(&self, key: &::windows::core::HSTRING) -> ::windows::core::Result<()> {
        let this = self;
        unsafe {
            (::windows::core::Vtable::vtable(this).ClearParameter)(
                ::windows::core::Vtable::as_raw(this),
                ::core::mem::transmute_copy(key),
            )
            .ok()
        }
    }
    pub fn SetColorParameter(
        &self,
        key: &::windows::core::HSTRING,
        value: ::windows::UI::Color,
    ) -> ::windows::core::Result<()> {
        let this = self;
        unsafe {
            (::windows::core::Vtable::vtable(this).SetColorParameter)(
                ::windows::core::Vtable::as_raw(this),
                ::core::mem::transmute_copy(key),
                value,
            )
            .ok()
        }
    }
    pub fn SetMatrix3x2Parameter(
        &self,
        key: &::windows::core::HSTRING,
        value: ::windows::Foundation::Numerics::Matrix3x2,
    ) -> ::windows::core::Result<()> {
        let this = self;
        unsafe {
            (::windows::core::Vtable::vtable(this).SetMatrix3x2Parameter)(
                ::windows::core::Vtable::as_raw(this),
                ::core::mem::transmute_copy(key),
                value,
            )
            .ok()
        }
    }
    pub fn SetMatrix4x4Parameter(
        &self,
        key: &::windows::core::HSTRING,
        value: ::windows::Foundation::Numerics::Matrix4x4,
    ) -> ::windows::core::Result<()> {
        let this = self;
        unsafe {
            (::windows::core::Vtable::vtable(this).SetMatrix4x4Parameter)(
                ::windows::core::Vtable::as_raw(this),
                ::core::mem::transmute_copy(key),
                value,
            )
            .ok()
        }
    }
    pub fn SetQuaternionParameter(
        &self,
        key: &::windows::core::HSTRING,
        value: ::windows::Foundation::Numerics::Quaternion,
    ) -> ::windows::core::Result<()> {
        let this = self;
        unsafe {
            (::windows::core::Vtable::vtable(this).SetQuaternionParameter)(
                ::windows::core::Vtable::as_raw(this),
                ::core::mem::transmute_copy(key),
                value,
            )
            .ok()
        }
    }
    pub fn SetReferenceParameter<'a, P0>(
        &self,
        key: &::windows::core::HSTRING,
        compositionobject: P0,
    ) -> ::windows::core::Result<()>
    where
        P0: ::std::convert::Into<::windows::core::InParam<'a, CompositionObject>>,
    {
        let this = self;
        unsafe {
            (::windows::core::Vtable::vtable(this).SetReferenceParameter)(
                ::windows::core::Vtable::as_raw(this),
                ::core::mem::transmute_copy(key),
                compositionobject.into().abi(),
            )
            .ok()
        }
    }
    pub fn SetScalarParameter(
        &self,
        key: &::windows::core::HSTRING,
        value: f32,
    ) -> ::windows::core::Result<()> {
        let this = self;
        unsafe {
            (::windows::core::Vtable::vtable(this).SetScalarParameter)(
                ::windows::core::Vtable::as_raw(this),
                ::core::mem::transmute_copy(key),
                value,
            )
            .ok()
        }
    }
    pub fn SetVector2Parameter(
        &self,
        key: &::windows::core::HSTRING,
        value: ::windows::Foundation::Numerics::Vector2,
    ) -> ::windows::core::Result<()> {
        let this = self;
        unsafe {
            (::windows::core::Vtable::vtable(this).SetVector2Parameter)(
                ::windows::core::Vtable::as_raw(this),
                ::core::mem::transmute_copy(key),
                value,
            )
            .ok()
        }
    }
    pub fn SetVector3Parameter(
        &self,
        key: &::windows::core::HSTRING,
        value: ::windows::Foundation::Numerics::Vector3,
    ) -> ::windows::core::Result<()> {
        let this = self;
        unsafe {
            (::windows::core::Vtable::vtable(this).SetVector3Parameter)(
                ::windows::core::Vtable::as_raw(this),
                ::core::mem::transmute_copy(key),
                value,
            )
            .ok()
        }
    }
    pub fn SetVector4Parameter(
        &self,
        key: &::windows::core::HSTRING,
        value: ::windows::Foundation::Numerics::Vector4,
    ) -> ::windows::core::Result<()> {
        let this = self;
        unsafe {
            (::windows::core::Vtable::vtable(this).SetVector4Parameter)(
                ::windows::core::Vtable::as_raw(this),
                ::core::mem::transmute_copy(key),
                value,
            )
            .ok()
        }
    }
    pub fn SetBooleanParameter(
        &self,
        key: &::windows::core::HSTRING,
        value: bool,
    ) -> ::windows::core::Result<()> {
        let this = &::windows::core::Interface::cast::<ICompositionAnimation2>(self)?;
        unsafe {
            (::windows::core::Vtable::vtable(this).SetBooleanParameter)(
                ::windows::core::Vtable::as_raw(this),
                ::core::mem::transmute_copy(key),
                value,
            )
            .ok()
        }
    }
    pub fn Target(&self) -> ::windows::core::Result<::windows::core::HSTRING> {
        let this = &::windows::core::Interface::cast::<ICompositionAnimation2>(self)?;
        unsafe {
            let mut result__ = ::core::mem::MaybeUninit::zeroed();
            (::windows::core::Vtable::vtable(this).Target)(
                ::windows::core::Vtable::as_raw(this),
                result__.as_mut_ptr(),
            )
            .from_abi::<::windows::core::HSTRING>(result__)
        }
    }
    pub fn SetTarget(&self, value: &::windows::core::HSTRING) -> ::windows::core::Result<()> {
        let this = &::windows::core::Interface::cast::<ICompositionAnimation2>(self)?;
        unsafe {
            (::windows::core::Vtable::vtable(this).SetTarget)(
                ::windows::core::Vtable::as_raw(this),
                ::core::mem::transmute_copy(value),
            )
            .ok()
        }
    }
    pub fn InitialValueExpressions(
        &self,
    ) -> ::windows::core::Result<InitialValueExpressionCollection> {
        let this = &::windows::core::Interface::cast::<ICompositionAnimation3>(self)?;
        unsafe {
            let mut result__ = ::core::mem::MaybeUninit::zeroed();
            (::windows::core::Vtable::vtable(this).InitialValueExpressions)(
                ::windows::core::Vtable::as_raw(this),
                result__.as_mut_ptr(),
            )
            .from_abi::<InitialValueExpressionCollection>(result__)
        }
    }
    pub fn SetExpressionReferenceParameter<'a, P0, E0>(
        &self,
        parametername: &::windows::core::HSTRING,
        source: P0,
    ) -> ::windows::core::Result<()>
    where
        P0: ::std::convert::TryInto<::windows::core::InParam<'a, IAnimationObject>, Error = E0>,
        E0: ::std::convert::Into<::windows::core::Error>,
    {
        let this = &::windows::core::Interface::cast::<ICompositionAnimation4>(self)?;
        unsafe {
            (::windows::core::Vtable::vtable(this).SetExpressionReferenceParameter)(
                ::windows::core::Vtable::as_raw(this),
                ::core::mem::transmute_copy(parametername),
                source.try_into().map_err(|e| e.into())?.abi(),
            )
            .ok()
        }
    }
    pub fn Compositor(&self) -> ::windows::core::Result<Compositor> {
        let this = &::windows::core::Interface::cast::<ICompositionObject>(self)?;
        unsafe {
            let mut result__ = ::core::mem::MaybeUninit::zeroed();
            (::windows::core::Vtable::vtable(this).Compositor)(
                ::windows::core::Vtable::as_raw(this),
                result__.as_mut_ptr(),
            )
            .from_abi::<Compositor>(result__)
        }
    }
    pub fn Properties(&self) -> ::windows::core::Result<CompositionPropertySet> {
        let this = &::windows::core::Interface::cast::<ICompositionObject>(self)?;
        unsafe {
            let mut result__ = ::core::mem::MaybeUninit::zeroed();
            (::windows::core::Vtable::vtable(this).Properties)(
                ::windows::core::Vtable::as_raw(this),
                result__.as_mut_ptr(),
            )
            .from_abi::<CompositionPropertySet>(result__)
        }
    }
    pub fn StartAnimation<'a, P0>(
        &self,
        propertyname: &::windows::core::HSTRING,
        animation: P0,
    ) -> ::windows::core::Result<()>
    where
        P0: ::std::convert::Into<::windows::core::InParam<'a, CompositionAnimation>>,
    {
        let this = &::windows::core::Interface::cast::<ICompositionObject>(self)?;
        unsafe {
            (::windows::core::Vtable::vtable(this).StartAnimation)(
                ::windows::core::Vtable::as_raw(this),
                ::core::mem::transmute_copy(propertyname),
                animation.into().abi(),
            )
            .ok()
        }
    }
    pub fn StopAnimation(
        &self,
        propertyname: &::windows::core::HSTRING,
    ) -> ::windows::core::Result<()> {
        let this = &::windows::core::Interface::cast::<ICompositionObject>(self)?;
        unsafe {
            (::windows::core::Vtable::vtable(this).StopAnimation)(
                ::windows::core::Vtable::as_raw(this),
                ::core::mem::transmute_copy(propertyname),
            )
            .ok()
        }
    }
    pub fn Comment(&self) -> ::windows::core::Result<::windows::core::HSTRING> {
        let this = &::windows::core::Interface::cast::<ICompositionObject2>(self)?;
        unsafe {
            let mut result__ = ::core::mem::MaybeUninit::zeroed();
            (::windows::core::Vtable::vtable(this).Comment)(
                ::windows::core::Vtable::as_raw(this),
                result__.as_mut_ptr(),
            )
            .from_abi::<::windows::core::HSTRING>(result__)
        }
    }
    pub fn SetComment(&self, value: &::windows::core::HSTRING) -> ::windows::core::Result<()> {
        let this = &::windows::core::Interface::cast::<ICompositionObject2>(self)?;
        unsafe {
            (::windows::core::Vtable::vtable(this).SetComment)(
                ::windows::core::Vtable::as_raw(this),
                ::core::mem::transmute_copy(value),
            )
            .ok()
        }
    }
    pub fn ImplicitAnimations(&self) -> ::windows::core::Result<ImplicitAnimationCollection> {
        let this = &::windows::core::Interface::cast::<ICompositionObject2>(self)?;
        unsafe {
            let mut result__ = ::core::mem::MaybeUninit::zeroed();
            (::windows::core::Vtable::vtable(this).ImplicitAnimations)(
                ::windows::core::Vtable::as_raw(this),
                result__.as_mut_ptr(),
            )
            .from_abi::<ImplicitAnimationCollection>(result__)
        }
    }
    pub fn SetImplicitAnimations(
        &self,
        value: &ImplicitAnimationCollection,
    ) -> ::windows::core::Result<()> {
        let this = &::windows::core::Interface::cast::<ICompositionObject2>(self)?;
        unsafe {
            (::windows::core::Vtable::vtable(this).SetImplicitAnimations)(
                ::windows::core::Vtable::as_raw(this),
                ::core::mem::transmute_copy(value),
            )
            .ok()
        }
    }
    pub fn StartAnimationGroup<'a, P0, E0>(&self, value: P0) -> ::windows::core::Result<()>
    where
        P0: ::std::convert::TryInto<
            ::windows::core::InParam<'a, ICompositionAnimationBase>,
            Error = E0,
        >,
        E0: ::std::convert::Into<::windows::core::Error>,
    {
        let this = &::windows::core::Interface::cast::<ICompositionObject2>(self)?;
        unsafe {
            (::windows::core::Vtable::vtable(this).StartAnimationGroup)(
                ::windows::core::Vtable::as_raw(this),
                value.try_into().map_err(|e| e.into())?.abi(),
            )
            .ok()
        }
    }
    pub fn StopAnimationGroup<'a, P0, E0>(&self, value: P0) -> ::windows::core::Result<()>
    where
        P0: ::std::convert::TryInto<
            ::windows::core::InParam<'a, ICompositionAnimationBase>,
            Error = E0,
        >,
        E0: ::std::convert::Into<::windows::core::Error>,
    {
        let this = &::windows::core::Interface::cast::<ICompositionObject2>(self)?;
        unsafe {
            (::windows::core::Vtable::vtable(this).StopAnimationGroup)(
                ::windows::core::Vtable::as_raw(this),
                value.try_into().map_err(|e| e.into())?.abi(),
            )
            .ok()
        }
    }
    #[doc = "*Required features: `\"UI_Dispatching\"`*"]
    #[cfg(feature = "UI_Dispatching")]
    pub fn DispatcherQueue(&self) -> ::windows::core::Result<super::Dispatching::DispatcherQueue> {
        let this = &::windows::core::Interface::cast::<ICompositionObject3>(self)?;
        unsafe {
            let mut result__ = ::core::mem::MaybeUninit::zeroed();
            (::windows::core::Vtable::vtable(this).DispatcherQueue)(
                ::windows::core::Vtable::as_raw(this),
                result__.as_mut_ptr(),
            )
            .from_abi::<super::Dispatching::DispatcherQueue>(result__)
        }
    }
    pub fn TryGetAnimationController(
        &self,
        propertyname: &::windows::core::HSTRING,
    ) -> ::windows::core::Result<AnimationController> {
        let this = &::windows::core::Interface::cast::<ICompositionObject4>(self)?;
        unsafe {
            let mut result__ = ::core::mem::MaybeUninit::zeroed();
            (::windows::core::Vtable::vtable(this).TryGetAnimationController)(
                ::windows::core::Vtable::as_raw(this),
                ::core::mem::transmute_copy(propertyname),
                result__.as_mut_ptr(),
            )
            .from_abi::<AnimationController>(result__)
        }
    }
    pub fn StartAnimationWithController<'a, P0>(
        &self,
        propertyname: &::windows::core::HSTRING,
        animation: P0,
        animationcontroller: &AnimationController,
    ) -> ::windows::core::Result<()>
    where
        P0: ::std::convert::Into<::windows::core::InParam<'a, CompositionAnimation>>,
    {
        let this = &::windows::core::Interface::cast::<ICompositionObject5>(self)?;
        unsafe {
            (::windows::core::Vtable::vtable(this).StartAnimationWithController)(
                ::windows::core::Vtable::as_raw(this),
                ::core::mem::transmute_copy(propertyname),
                animation.into().abi(),
                ::core::mem::transmute_copy(animationcontroller),
            )
            .ok()
        }
    }
}
impl ::core::clone::Clone for CompositionAnimation {
    fn clone(&self) -> Self {
        Self(self.0.clone())
    }
}
impl ::core::cmp::PartialEq for CompositionAnimation {
    fn eq(&self, other: &Self) -> bool {
        self.0 == other.0
    }
}
impl ::core::cmp::Eq for CompositionAnimation {}
impl ::core::fmt::Debug for CompositionAnimation {
    fn fmt(&self, f: &mut ::core::fmt::Formatter<'_>) -> ::core::fmt::Result {
        f.debug_tuple("CompositionAnimation").field(&self.0).finish()
    }
}
unsafe impl ::windows::core::RuntimeType for CompositionAnimation {
    const SIGNATURE: ::windows::core::ConstBuffer = ::windows::core::ConstBuffer::from_slice(
        b"rc(Microsoft.UI.Composition.CompositionAnimation;{a829ccc8-6fde-5b90-ad37-efd307e1b631})",
    );
    type DefaultType = ::core::option::Option<Self>;
    fn from_default(from: &Self::DefaultType) -> ::windows::core::Result<Self> {
        from.as_ref().cloned().ok_or(::windows::core::Error::OK)
    }
}
unsafe impl ::windows::core::Vtable for CompositionAnimation {
    type Vtable = ICompositionAnimation_Vtbl;
}
unsafe impl ::windows::core::Interface for CompositionAnimation {
    const IID: ::windows::core::GUID = <ICompositionAnimation as ::windows::core::Interface>::IID;
}
impl ::windows::core::RuntimeName for CompositionAnimation {
    const NAME: &'static str = "Microsoft.UI.Composition.CompositionAnimation";
}
::windows::core::interface_hierarchy!(
    CompositionAnimation,
    ::windows::core::IUnknown,
    ::windows::core::IInspectable
);
impl ::core::convert::TryFrom<CompositionAnimation> for IAnimationObject {
    type Error = ::windows::core::Error;
    fn try_from(value: CompositionAnimation) -> ::windows::core::Result<Self> {
        ::core::convert::TryFrom::try_from(&value)
    }
}
impl ::core::convert::TryFrom<&CompositionAnimation> for IAnimationObject {
    type Error = ::windows::core::Error;
    fn try_from(value: &CompositionAnimation) -> ::windows::core::Result<Self> {
        ::windows::core::Interface::cast(value)
    }
}
impl<'a> ::core::convert::TryFrom<&CompositionAnimation>
    for ::windows::core::InParam<'a, IAnimationObject>
{
    type Error = ::windows::core::Error;
    fn try_from(value: &CompositionAnimation) -> ::windows::core::Result<Self> {
        let item = ::std::convert::TryInto::try_into(value)?;
        Ok(::windows::core::InParam::owned(item))
    }
}
impl ::core::convert::TryFrom<CompositionAnimation> for ::windows::Foundation::IClosable {
    type Error = ::windows::core::Error;
    fn try_from(value: CompositionAnimation) -> ::windows::core::Result<Self> {
        ::core::convert::TryFrom::try_from(&value)
    }
}
impl ::core::convert::TryFrom<&CompositionAnimation> for ::windows::Foundation::IClosable {
    type Error = ::windows::core::Error;
    fn try_from(value: &CompositionAnimation) -> ::windows::core::Result<Self> {
        ::windows::core::Interface::cast(value)
    }
}
impl<'a> ::core::convert::TryFrom<&CompositionAnimation>
    for ::windows::core::InParam<'a, ::windows::Foundation::IClosable>
{
    type Error = ::windows::core::Error;
    fn try_from(value: &CompositionAnimation) -> ::windows::core::Result<Self> {
        let item = ::std::convert::TryInto::try_into(value)?;
        Ok(::windows::core::InParam::owned(item))
    }
}
impl ::core::convert::TryFrom<CompositionAnimation> for ICompositionAnimationBase {
    type Error = ::windows::core::Error;
    fn try_from(value: CompositionAnimation) -> ::windows::core::Result<Self> {
        ::core::convert::TryFrom::try_from(&value)
    }
}
impl ::core::convert::TryFrom<&CompositionAnimation> for ICompositionAnimationBase {
    type Error = ::windows::core::Error;
    fn try_from(value: &CompositionAnimation) -> ::windows::core::Result<Self> {
        ::windows::core::Interface::cast(value)
    }
}
impl<'a> ::core::convert::TryFrom<&CompositionAnimation>
    for ::windows::core::InParam<'a, ICompositionAnimationBase>
{
    type Error = ::windows::core::Error;
    fn try_from(value: &CompositionAnimation) -> ::windows::core::Result<Self> {
        let item = ::std::convert::TryInto::try_into(value)?;
        Ok(::windows::core::InParam::owned(item))
    }
}
impl ::core::convert::From<CompositionAnimation> for CompositionObject {
    fn from(value: CompositionAnimation) -> Self {
        ::core::convert::From::from(&value)
    }
}
impl ::core::convert::From<&CompositionAnimation> for CompositionObject {
    fn from(value: &CompositionAnimation) -> Self {
        ::windows::core::Interface::cast(value).unwrap()
    }
}
impl<'a> ::core::convert::From<&CompositionAnimation>
    for ::windows::core::InParam<'a, CompositionObject>
{
    fn from(value: &CompositionAnimation) -> Self {
        ::windows::core::InParam::owned(value.into())
    }
}
unsafe impl ::core::marker::Send for CompositionAnimation {}
unsafe impl ::core::marker::Sync for CompositionAnimation {}
#[doc = "*Required features: `\"UI_Composition\"`*"]
#[repr(transparent)]
pub struct CompositionAnimationGroup(::windows::core::IUnknown);
impl CompositionAnimationGroup {
    pub fn PopulatePropertyInfo(
        &self,
        propertyname: &::windows::core::HSTRING,
        propertyinfo: &AnimationPropertyInfo,
    ) -> ::windows::core::Result<()> {
        let this = &::windows::core::Interface::cast::<IAnimationObject>(self)?;
        unsafe {
            (::windows::core::Vtable::vtable(this).PopulatePropertyInfo)(
                ::windows::core::Vtable::as_raw(this),
                ::core::mem::transmute_copy(propertyname),
                ::core::mem::transmute_copy(propertyinfo),
            )
            .ok()
        }
    }
    pub fn Close(&self) -> ::windows::core::Result<()> {
        let this = &::windows::core::Interface::cast::<::windows::Foundation::IClosable>(self)?;
        unsafe {
            (::windows::core::Vtable::vtable(this).Close)(::windows::core::Vtable::as_raw(this))
                .ok()
        }
    }
    pub fn Count(&self) -> ::windows::core::Result<i32> {
        let this = self;
        unsafe {
            let mut result__ = ::core::mem::MaybeUninit::zeroed();
            (::windows::core::Vtable::vtable(this).Count)(
                ::windows::core::Vtable::as_raw(this),
                result__.as_mut_ptr(),
            )
            .from_abi::<i32>(result__)
        }
    }
    pub fn Add<'a, P0>(&self, value: P0) -> ::windows::core::Result<()>
    where
        P0: ::std::convert::Into<::windows::core::InParam<'a, CompositionAnimation>>,
    {
        let this = self;
        unsafe {
            (::windows::core::Vtable::vtable(this).Add)(
                ::windows::core::Vtable::as_raw(this),
                value.into().abi(),
            )
            .ok()
        }
    }
    pub fn Remove<'a, P0>(&self, value: P0) -> ::windows::core::Result<()>
    where
        P0: ::std::convert::Into<::windows::core::InParam<'a, CompositionAnimation>>,
    {
        let this = self;
        unsafe {
            (::windows::core::Vtable::vtable(this).Remove)(
                ::windows::core::Vtable::as_raw(this),
                value.into().abi(),
            )
            .ok()
        }
    }
    pub fn RemoveAll(&self) -> ::windows::core::Result<()> {
        let this = self;
        unsafe {
            (::windows::core::Vtable::vtable(this).RemoveAll)(::windows::core::Vtable::as_raw(this))
                .ok()
        }
    }
    pub fn Compositor(&self) -> ::windows::core::Result<Compositor> {
        let this = &::windows::core::Interface::cast::<ICompositionObject>(self)?;
        unsafe {
            let mut result__ = ::core::mem::MaybeUninit::zeroed();
            (::windows::core::Vtable::vtable(this).Compositor)(
                ::windows::core::Vtable::as_raw(this),
                result__.as_mut_ptr(),
            )
            .from_abi::<Compositor>(result__)
        }
    }
    pub fn Properties(&self) -> ::windows::core::Result<CompositionPropertySet> {
        let this = &::windows::core::Interface::cast::<ICompositionObject>(self)?;
        unsafe {
            let mut result__ = ::core::mem::MaybeUninit::zeroed();
            (::windows::core::Vtable::vtable(this).Properties)(
                ::windows::core::Vtable::as_raw(this),
                result__.as_mut_ptr(),
            )
            .from_abi::<CompositionPropertySet>(result__)
        }
    }
    pub fn StartAnimation<'a, P0>(
        &self,
        propertyname: &::windows::core::HSTRING,
        animation: P0,
    ) -> ::windows::core::Result<()>
    where
        P0: ::std::convert::Into<::windows::core::InParam<'a, CompositionAnimation>>,
    {
        let this = &::windows::core::Interface::cast::<ICompositionObject>(self)?;
        unsafe {
            (::windows::core::Vtable::vtable(this).StartAnimation)(
                ::windows::core::Vtable::as_raw(this),
                ::core::mem::transmute_copy(propertyname),
                animation.into().abi(),
            )
            .ok()
        }
    }
    pub fn StopAnimation(
        &self,
        propertyname: &::windows::core::HSTRING,
    ) -> ::windows::core::Result<()> {
        let this = &::windows::core::Interface::cast::<ICompositionObject>(self)?;
        unsafe {
            (::windows::core::Vtable::vtable(this).StopAnimation)(
                ::windows::core::Vtable::as_raw(this),
                ::core::mem::transmute_copy(propertyname),
            )
            .ok()
        }
    }
    pub fn Comment(&self) -> ::windows::core::Result<::windows::core::HSTRING> {
        let this = &::windows::core::Interface::cast::<ICompositionObject2>(self)?;
        unsafe {
            let mut result__ = ::core::mem::MaybeUninit::zeroed();
            (::windows::core::Vtable::vtable(this).Comment)(
                ::windows::core::Vtable::as_raw(this),
                result__.as_mut_ptr(),
            )
            .from_abi::<::windows::core::HSTRING>(result__)
        }
    }
    pub fn SetComment(&self, value: &::windows::core::HSTRING) -> ::windows::core::Result<()> {
        let this = &::windows::core::Interface::cast::<ICompositionObject2>(self)?;
        unsafe {
            (::windows::core::Vtable::vtable(this).SetComment)(
                ::windows::core::Vtable::as_raw(this),
                ::core::mem::transmute_copy(value),
            )
            .ok()
        }
    }
    pub fn ImplicitAnimations(&self) -> ::windows::core::Result<ImplicitAnimationCollection> {
        let this = &::windows::core::Interface::cast::<ICompositionObject2>(self)?;
        unsafe {
            let mut result__ = ::core::mem::MaybeUninit::zeroed();
            (::windows::core::Vtable::vtable(this).ImplicitAnimations)(
                ::windows::core::Vtable::as_raw(this),
                result__.as_mut_ptr(),
            )
            .from_abi::<ImplicitAnimationCollection>(result__)
        }
    }
    pub fn SetImplicitAnimations(
        &self,
        value: &ImplicitAnimationCollection,
    ) -> ::windows::core::Result<()> {
        let this = &::windows::core::Interface::cast::<ICompositionObject2>(self)?;
        unsafe {
            (::windows::core::Vtable::vtable(this).SetImplicitAnimations)(
                ::windows::core::Vtable::as_raw(this),
                ::core::mem::transmute_copy(value),
            )
            .ok()
        }
    }
    pub fn StartAnimationGroup<'a, P0, E0>(&self, value: P0) -> ::windows::core::Result<()>
    where
        P0: ::std::convert::TryInto<
            ::windows::core::InParam<'a, ICompositionAnimationBase>,
            Error = E0,
        >,
        E0: ::std::convert::Into<::windows::core::Error>,
    {
        let this = &::windows::core::Interface::cast::<ICompositionObject2>(self)?;
        unsafe {
            (::windows::core::Vtable::vtable(this).StartAnimationGroup)(
                ::windows::core::Vtable::as_raw(this),
                value.try_into().map_err(|e| e.into())?.abi(),
            )
            .ok()
        }
    }
    pub fn StopAnimationGroup<'a, P0, E0>(&self, value: P0) -> ::windows::core::Result<()>
    where
        P0: ::std::convert::TryInto<
            ::windows::core::InParam<'a, ICompositionAnimationBase>,
            Error = E0,
        >,
        E0: ::std::convert::Into<::windows::core::Error>,
    {
        let this = &::windows::core::Interface::cast::<ICompositionObject2>(self)?;
        unsafe {
            (::windows::core::Vtable::vtable(this).StopAnimationGroup)(
                ::windows::core::Vtable::as_raw(this),
                value.try_into().map_err(|e| e.into())?.abi(),
            )
            .ok()
        }
    }
    #[doc = "*Required features: `\"UI_Dispatching\"`*"]
    #[cfg(feature = "UI_Dispatching")]
    pub fn DispatcherQueue(&self) -> ::windows::core::Result<super::Dispatching::DispatcherQueue> {
        let this = &::windows::core::Interface::cast::<ICompositionObject3>(self)?;
        unsafe {
            let mut result__ = ::core::mem::MaybeUninit::zeroed();
            (::windows::core::Vtable::vtable(this).DispatcherQueue)(
                ::windows::core::Vtable::as_raw(this),
                result__.as_mut_ptr(),
            )
            .from_abi::<super::Dispatching::DispatcherQueue>(result__)
        }
    }
    pub fn TryGetAnimationController(
        &self,
        propertyname: &::windows::core::HSTRING,
    ) -> ::windows::core::Result<AnimationController> {
        let this = &::windows::core::Interface::cast::<ICompositionObject4>(self)?;
        unsafe {
            let mut result__ = ::core::mem::MaybeUninit::zeroed();
            (::windows::core::Vtable::vtable(this).TryGetAnimationController)(
                ::windows::core::Vtable::as_raw(this),
                ::core::mem::transmute_copy(propertyname),
                result__.as_mut_ptr(),
            )
            .from_abi::<AnimationController>(result__)
        }
    }
    pub fn StartAnimationWithController<'a, P0>(
        &self,
        propertyname: &::windows::core::HSTRING,
        animation: P0,
        animationcontroller: &AnimationController,
    ) -> ::windows::core::Result<()>
    where
        P0: ::std::convert::Into<::windows::core::InParam<'a, CompositionAnimation>>,
    {
        let this = &::windows::core::Interface::cast::<ICompositionObject5>(self)?;
        unsafe {
            (::windows::core::Vtable::vtable(this).StartAnimationWithController)(
                ::windows::core::Vtable::as_raw(this),
                ::core::mem::transmute_copy(propertyname),
                animation.into().abi(),
                ::core::mem::transmute_copy(animationcontroller),
            )
            .ok()
        }
    }
    pub fn First(
        &self,
    ) -> ::windows::core::Result<::windows::Foundation::Collections::IIterator<CompositionAnimation>>
    {
        let this = &::windows::core::Interface::cast::<
            ::windows::Foundation::Collections::IIterable<CompositionAnimation>,
        >(self)?;
        unsafe {
            let mut result__ = ::core::mem::MaybeUninit::zeroed();
            (::windows::core::Vtable::vtable(this).First)(
                ::windows::core::Vtable::as_raw(this),
                result__.as_mut_ptr(),
            )
            .from_abi::<::windows::Foundation::Collections::IIterator<CompositionAnimation>>(
                result__,
            )
        }
    }
}
impl ::core::clone::Clone for CompositionAnimationGroup {
    fn clone(&self) -> Self {
        Self(self.0.clone())
    }
}
impl ::core::cmp::PartialEq for CompositionAnimationGroup {
    fn eq(&self, other: &Self) -> bool {
        self.0 == other.0
    }
}
impl ::core::cmp::Eq for CompositionAnimationGroup {}
impl ::core::fmt::Debug for CompositionAnimationGroup {
    fn fmt(&self, f: &mut ::core::fmt::Formatter<'_>) -> ::core::fmt::Result {
        f.debug_tuple("CompositionAnimationGroup").field(&self.0).finish()
    }
}
unsafe impl ::windows::core::RuntimeType for CompositionAnimationGroup {
    const SIGNATURE : ::windows::core::ConstBuffer = ::windows::core::ConstBuffer::from_slice ( b"rc(Microsoft.UI.Composition.CompositionAnimationGroup;{a51cdcac-b972-5ae7-81d0-9d91c71ecb7a})" ) ;
    type DefaultType = ::core::option::Option<Self>;
    fn from_default(from: &Self::DefaultType) -> ::windows::core::Result<Self> {
        from.as_ref().cloned().ok_or(::windows::core::Error::OK)
    }
}
unsafe impl ::windows::core::Vtable for CompositionAnimationGroup {
    type Vtable = ICompositionAnimationGroup_Vtbl;
}
unsafe impl ::windows::core::Interface for CompositionAnimationGroup {
    const IID: ::windows::core::GUID =
        <ICompositionAnimationGroup as ::windows::core::Interface>::IID;
}
impl ::windows::core::RuntimeName for CompositionAnimationGroup {
    const NAME: &'static str = "Microsoft.UI.Composition.CompositionAnimationGroup";
}
impl ::core::iter::IntoIterator for CompositionAnimationGroup {
    type Item = CompositionAnimation;
    type IntoIter = ::windows::Foundation::Collections::IIterator<Self::Item>;
    fn into_iter(self) -> Self::IntoIter {
        ::core::iter::IntoIterator::into_iter(&self)
    }
}
impl ::core::iter::IntoIterator for &CompositionAnimationGroup {
    type Item = CompositionAnimation;
    type IntoIter = ::windows::Foundation::Collections::IIterator<Self::Item>;
    fn into_iter(self) -> Self::IntoIter {
        self.First().unwrap()
    }
}
::windows::core::interface_hierarchy!(
    CompositionAnimationGroup,
    ::windows::core::IUnknown,
    ::windows::core::IInspectable
);
impl ::core::convert::TryFrom<CompositionAnimationGroup> for IAnimationObject {
    type Error = ::windows::core::Error;
    fn try_from(value: CompositionAnimationGroup) -> ::windows::core::Result<Self> {
        ::core::convert::TryFrom::try_from(&value)
    }
}
impl ::core::convert::TryFrom<&CompositionAnimationGroup> for IAnimationObject {
    type Error = ::windows::core::Error;
    fn try_from(value: &CompositionAnimationGroup) -> ::windows::core::Result<Self> {
        ::windows::core::Interface::cast(value)
    }
}
impl<'a> ::core::convert::TryFrom<&CompositionAnimationGroup>
    for ::windows::core::InParam<'a, IAnimationObject>
{
    type Error = ::windows::core::Error;
    fn try_from(value: &CompositionAnimationGroup) -> ::windows::core::Result<Self> {
        let item = ::std::convert::TryInto::try_into(value)?;
        Ok(::windows::core::InParam::owned(item))
    }
}
impl ::core::convert::TryFrom<CompositionAnimationGroup> for ::windows::Foundation::IClosable {
    type Error = ::windows::core::Error;
    fn try_from(value: CompositionAnimationGroup) -> ::windows::core::Result<Self> {
        ::core::convert::TryFrom::try_from(&value)
    }
}
impl ::core::convert::TryFrom<&CompositionAnimationGroup> for ::windows::Foundation::IClosable {
    type Error = ::windows::core::Error;
    fn try_from(value: &CompositionAnimationGroup) -> ::windows::core::Result<Self> {
        ::windows::core::Interface::cast(value)
    }
}
impl<'a> ::core::convert::TryFrom<&CompositionAnimationGroup>
    for ::windows::core::InParam<'a, ::windows::Foundation::IClosable>
{
    type Error = ::windows::core::Error;
    fn try_from(value: &CompositionAnimationGroup) -> ::windows::core::Result<Self> {
        let item = ::std::convert::TryInto::try_into(value)?;
        Ok(::windows::core::InParam::owned(item))
    }
}
impl ::core::convert::TryFrom<CompositionAnimationGroup> for ICompositionAnimationBase {
    type Error = ::windows::core::Error;
    fn try_from(value: CompositionAnimationGroup) -> ::windows::core::Result<Self> {
        ::core::convert::TryFrom::try_from(&value)
    }
}
impl ::core::convert::TryFrom<&CompositionAnimationGroup> for ICompositionAnimationBase {
    type Error = ::windows::core::Error;
    fn try_from(value: &CompositionAnimationGroup) -> ::windows::core::Result<Self> {
        ::windows::core::Interface::cast(value)
    }
}
impl<'a> ::core::convert::TryFrom<&CompositionAnimationGroup>
    for ::windows::core::InParam<'a, ICompositionAnimationBase>
{
    type Error = ::windows::core::Error;
    fn try_from(value: &CompositionAnimationGroup) -> ::windows::core::Result<Self> {
        let item = ::std::convert::TryInto::try_into(value)?;
        Ok(::windows::core::InParam::owned(item))
    }
}
impl ::core::convert::TryFrom<CompositionAnimationGroup>
    for ::windows::Foundation::Collections::IIterable<CompositionAnimation>
{
    type Error = ::windows::core::Error;
    fn try_from(value: CompositionAnimationGroup) -> ::windows::core::Result<Self> {
        ::core::convert::TryFrom::try_from(&value)
    }
}
impl ::core::convert::TryFrom<&CompositionAnimationGroup>
    for ::windows::Foundation::Collections::IIterable<CompositionAnimation>
{
    type Error = ::windows::core::Error;
    fn try_from(value: &CompositionAnimationGroup) -> ::windows::core::Result<Self> {
        ::windows::core::Interface::cast(value)
    }
}
impl<'a> ::core::convert::TryFrom<&CompositionAnimationGroup>
    for ::windows::core::InParam<
        'a,
        ::windows::Foundation::Collections::IIterable<CompositionAnimation>,
    >
{
    type Error = ::windows::core::Error;
    fn try_from(value: &CompositionAnimationGroup) -> ::windows::core::Result<Self> {
        let item = ::std::convert::TryInto::try_into(value)?;
        Ok(::windows::core::InParam::owned(item))
    }
}
impl ::core::convert::From<CompositionAnimationGroup> for CompositionObject {
    fn from(value: CompositionAnimationGroup) -> Self {
        ::core::convert::From::from(&value)
    }
}
impl ::core::convert::From<&CompositionAnimationGroup> for CompositionObject {
    fn from(value: &CompositionAnimationGroup) -> Self {
        ::windows::core::Interface::cast(value).unwrap()
    }
}
impl<'a> ::core::convert::From<&CompositionAnimationGroup>
    for ::windows::core::InParam<'a, CompositionObject>
{
    fn from(value: &CompositionAnimationGroup) -> Self {
        ::windows::core::InParam::owned(value.into())
    }
}
unsafe impl ::core::marker::Send for CompositionAnimationGroup {}
unsafe impl ::core::marker::Sync for CompositionAnimationGroup {}
#[doc = "*Required features: `\"UI_Composition\"`*"]
pub struct CompositionApiInformation;
impl CompositionApiInformation {
    pub fn ApiVersion() -> ::windows::core::Result<u64> {
        Self::ICompositionApiInformationStatics(|this| unsafe {
            let mut result__ = ::core::mem::MaybeUninit::zeroed();
            (::windows::core::Vtable::vtable(this).ApiVersion)(
                ::windows::core::Vtable::as_raw(this),
                result__.as_mut_ptr(),
            )
            .from_abi::<u64>(result__)
        })
    }
    #[doc(hidden)]
    pub fn ICompositionApiInformationStatics<
        R,
        F: FnOnce(&ICompositionApiInformationStatics) -> ::windows::core::Result<R>,
    >(
        callback: F,
    ) -> ::windows::core::Result<R> {
        static SHARED: ::windows::core::FactoryCache<
            CompositionApiInformation,
            ICompositionApiInformationStatics,
        > = ::windows::core::FactoryCache::new();
        SHARED.call(callback)
    }
}
impl ::windows::core::RuntimeName for CompositionApiInformation {
    const NAME: &'static str = "Microsoft.UI.Composition.CompositionApiInformation";
}
#[doc = "*Required features: `\"UI_Composition\"`*"]
#[repr(transparent)]
pub struct CompositionBackdropBrush(::windows::core::IUnknown);
impl CompositionBackdropBrush {
    pub fn PopulatePropertyInfo(
        &self,
        propertyname: &::windows::core::HSTRING,
        propertyinfo: &AnimationPropertyInfo,
    ) -> ::windows::core::Result<()> {
        let this = &::windows::core::Interface::cast::<IAnimationObject>(self)?;
        unsafe {
            (::windows::core::Vtable::vtable(this).PopulatePropertyInfo)(
                ::windows::core::Vtable::as_raw(this),
                ::core::mem::transmute_copy(propertyname),
                ::core::mem::transmute_copy(propertyinfo),
            )
            .ok()
        }
    }
    pub fn Close(&self) -> ::windows::core::Result<()> {
        let this = &::windows::core::Interface::cast::<::windows::Foundation::IClosable>(self)?;
        unsafe {
            (::windows::core::Vtable::vtable(this).Close)(::windows::core::Vtable::as_raw(this))
                .ok()
        }
    }
    pub fn Compositor(&self) -> ::windows::core::Result<Compositor> {
        let this = &::windows::core::Interface::cast::<ICompositionObject>(self)?;
        unsafe {
            let mut result__ = ::core::mem::MaybeUninit::zeroed();
            (::windows::core::Vtable::vtable(this).Compositor)(
                ::windows::core::Vtable::as_raw(this),
                result__.as_mut_ptr(),
            )
            .from_abi::<Compositor>(result__)
        }
    }
    pub fn Properties(&self) -> ::windows::core::Result<CompositionPropertySet> {
        let this = &::windows::core::Interface::cast::<ICompositionObject>(self)?;
        unsafe {
            let mut result__ = ::core::mem::MaybeUninit::zeroed();
            (::windows::core::Vtable::vtable(this).Properties)(
                ::windows::core::Vtable::as_raw(this),
                result__.as_mut_ptr(),
            )
            .from_abi::<CompositionPropertySet>(result__)
        }
    }
    pub fn StartAnimation<'a, P0>(
        &self,
        propertyname: &::windows::core::HSTRING,
        animation: P0,
    ) -> ::windows::core::Result<()>
    where
        P0: ::std::convert::Into<::windows::core::InParam<'a, CompositionAnimation>>,
    {
        let this = &::windows::core::Interface::cast::<ICompositionObject>(self)?;
        unsafe {
            (::windows::core::Vtable::vtable(this).StartAnimation)(
                ::windows::core::Vtable::as_raw(this),
                ::core::mem::transmute_copy(propertyname),
                animation.into().abi(),
            )
            .ok()
        }
    }
    pub fn StopAnimation(
        &self,
        propertyname: &::windows::core::HSTRING,
    ) -> ::windows::core::Result<()> {
        let this = &::windows::core::Interface::cast::<ICompositionObject>(self)?;
        unsafe {
            (::windows::core::Vtable::vtable(this).StopAnimation)(
                ::windows::core::Vtable::as_raw(this),
                ::core::mem::transmute_copy(propertyname),
            )
            .ok()
        }
    }
    pub fn Comment(&self) -> ::windows::core::Result<::windows::core::HSTRING> {
        let this = &::windows::core::Interface::cast::<ICompositionObject2>(self)?;
        unsafe {
            let mut result__ = ::core::mem::MaybeUninit::zeroed();
            (::windows::core::Vtable::vtable(this).Comment)(
                ::windows::core::Vtable::as_raw(this),
                result__.as_mut_ptr(),
            )
            .from_abi::<::windows::core::HSTRING>(result__)
        }
    }
    pub fn SetComment(&self, value: &::windows::core::HSTRING) -> ::windows::core::Result<()> {
        let this = &::windows::core::Interface::cast::<ICompositionObject2>(self)?;
        unsafe {
            (::windows::core::Vtable::vtable(this).SetComment)(
                ::windows::core::Vtable::as_raw(this),
                ::core::mem::transmute_copy(value),
            )
            .ok()
        }
    }
    pub fn ImplicitAnimations(&self) -> ::windows::core::Result<ImplicitAnimationCollection> {
        let this = &::windows::core::Interface::cast::<ICompositionObject2>(self)?;
        unsafe {
            let mut result__ = ::core::mem::MaybeUninit::zeroed();
            (::windows::core::Vtable::vtable(this).ImplicitAnimations)(
                ::windows::core::Vtable::as_raw(this),
                result__.as_mut_ptr(),
            )
            .from_abi::<ImplicitAnimationCollection>(result__)
        }
    }
    pub fn SetImplicitAnimations(
        &self,
        value: &ImplicitAnimationCollection,
    ) -> ::windows::core::Result<()> {
        let this = &::windows::core::Interface::cast::<ICompositionObject2>(self)?;
        unsafe {
            (::windows::core::Vtable::vtable(this).SetImplicitAnimations)(
                ::windows::core::Vtable::as_raw(this),
                ::core::mem::transmute_copy(value),
            )
            .ok()
        }
    }
    pub fn StartAnimationGroup<'a, P0, E0>(&self, value: P0) -> ::windows::core::Result<()>
    where
        P0: ::std::convert::TryInto<
            ::windows::core::InParam<'a, ICompositionAnimationBase>,
            Error = E0,
        >,
        E0: ::std::convert::Into<::windows::core::Error>,
    {
        let this = &::windows::core::Interface::cast::<ICompositionObject2>(self)?;
        unsafe {
            (::windows::core::Vtable::vtable(this).StartAnimationGroup)(
                ::windows::core::Vtable::as_raw(this),
                value.try_into().map_err(|e| e.into())?.abi(),
            )
            .ok()
        }
    }
    pub fn StopAnimationGroup<'a, P0, E0>(&self, value: P0) -> ::windows::core::Result<()>
    where
        P0: ::std::convert::TryInto<
            ::windows::core::InParam<'a, ICompositionAnimationBase>,
            Error = E0,
        >,
        E0: ::std::convert::Into<::windows::core::Error>,
    {
        let this = &::windows::core::Interface::cast::<ICompositionObject2>(self)?;
        unsafe {
            (::windows::core::Vtable::vtable(this).StopAnimationGroup)(
                ::windows::core::Vtable::as_raw(this),
                value.try_into().map_err(|e| e.into())?.abi(),
            )
            .ok()
        }
    }
    #[doc = "*Required features: `\"UI_Dispatching\"`*"]
    #[cfg(feature = "UI_Dispatching")]
    pub fn DispatcherQueue(&self) -> ::windows::core::Result<super::Dispatching::DispatcherQueue> {
        let this = &::windows::core::Interface::cast::<ICompositionObject3>(self)?;
        unsafe {
            let mut result__ = ::core::mem::MaybeUninit::zeroed();
            (::windows::core::Vtable::vtable(this).DispatcherQueue)(
                ::windows::core::Vtable::as_raw(this),
                result__.as_mut_ptr(),
            )
            .from_abi::<super::Dispatching::DispatcherQueue>(result__)
        }
    }
    pub fn TryGetAnimationController(
        &self,
        propertyname: &::windows::core::HSTRING,
    ) -> ::windows::core::Result<AnimationController> {
        let this = &::windows::core::Interface::cast::<ICompositionObject4>(self)?;
        unsafe {
            let mut result__ = ::core::mem::MaybeUninit::zeroed();
            (::windows::core::Vtable::vtable(this).TryGetAnimationController)(
                ::windows::core::Vtable::as_raw(this),
                ::core::mem::transmute_copy(propertyname),
                result__.as_mut_ptr(),
            )
            .from_abi::<AnimationController>(result__)
        }
    }
    pub fn StartAnimationWithController<'a, P0>(
        &self,
        propertyname: &::windows::core::HSTRING,
        animation: P0,
        animationcontroller: &AnimationController,
    ) -> ::windows::core::Result<()>
    where
        P0: ::std::convert::Into<::windows::core::InParam<'a, CompositionAnimation>>,
    {
        let this = &::windows::core::Interface::cast::<ICompositionObject5>(self)?;
        unsafe {
            (::windows::core::Vtable::vtable(this).StartAnimationWithController)(
                ::windows::core::Vtable::as_raw(this),
                ::core::mem::transmute_copy(propertyname),
                animation.into().abi(),
                ::core::mem::transmute_copy(animationcontroller),
            )
            .ok()
        }
    }
}
impl ::core::clone::Clone for CompositionBackdropBrush {
    fn clone(&self) -> Self {
        Self(self.0.clone())
    }
}
impl ::core::cmp::PartialEq for CompositionBackdropBrush {
    fn eq(&self, other: &Self) -> bool {
        self.0 == other.0
    }
}
impl ::core::cmp::Eq for CompositionBackdropBrush {}
impl ::core::fmt::Debug for CompositionBackdropBrush {
    fn fmt(&self, f: &mut ::core::fmt::Formatter<'_>) -> ::core::fmt::Result {
        f.debug_tuple("CompositionBackdropBrush").field(&self.0).finish()
    }
}
unsafe impl ::windows::core::RuntimeType for CompositionBackdropBrush {
    const SIGNATURE : ::windows::core::ConstBuffer = ::windows::core::ConstBuffer::from_slice ( b"rc(Microsoft.UI.Composition.CompositionBackdropBrush;{6c866bb3-172a-570c-82ac-bf9848d99a59})" ) ;
    type DefaultType = ::core::option::Option<Self>;
    fn from_default(from: &Self::DefaultType) -> ::windows::core::Result<Self> {
        from.as_ref().cloned().ok_or(::windows::core::Error::OK)
    }
}
unsafe impl ::windows::core::Vtable for CompositionBackdropBrush {
    type Vtable = ICompositionBackdropBrush_Vtbl;
}
unsafe impl ::windows::core::Interface for CompositionBackdropBrush {
    const IID: ::windows::core::GUID =
        <ICompositionBackdropBrush as ::windows::core::Interface>::IID;
}
impl ::windows::core::RuntimeName for CompositionBackdropBrush {
    const NAME: &'static str = "Microsoft.UI.Composition.CompositionBackdropBrush";
}
::windows::core::interface_hierarchy!(
    CompositionBackdropBrush,
    ::windows::core::IUnknown,
    ::windows::core::IInspectable
);
impl ::core::convert::TryFrom<CompositionBackdropBrush> for IAnimationObject {
    type Error = ::windows::core::Error;
    fn try_from(value: CompositionBackdropBrush) -> ::windows::core::Result<Self> {
        ::core::convert::TryFrom::try_from(&value)
    }
}
impl ::core::convert::TryFrom<&CompositionBackdropBrush> for IAnimationObject {
    type Error = ::windows::core::Error;
    fn try_from(value: &CompositionBackdropBrush) -> ::windows::core::Result<Self> {
        ::windows::core::Interface::cast(value)
    }
}
impl<'a> ::core::convert::TryFrom<&CompositionBackdropBrush>
    for ::windows::core::InParam<'a, IAnimationObject>
{
    type Error = ::windows::core::Error;
    fn try_from(value: &CompositionBackdropBrush) -> ::windows::core::Result<Self> {
        let item = ::std::convert::TryInto::try_into(value)?;
        Ok(::windows::core::InParam::owned(item))
    }
}
impl ::core::convert::TryFrom<CompositionBackdropBrush> for ::windows::Foundation::IClosable {
    type Error = ::windows::core::Error;
    fn try_from(value: CompositionBackdropBrush) -> ::windows::core::Result<Self> {
        ::core::convert::TryFrom::try_from(&value)
    }
}
impl ::core::convert::TryFrom<&CompositionBackdropBrush> for ::windows::Foundation::IClosable {
    type Error = ::windows::core::Error;
    fn try_from(value: &CompositionBackdropBrush) -> ::windows::core::Result<Self> {
        ::windows::core::Interface::cast(value)
    }
}
impl<'a> ::core::convert::TryFrom<&CompositionBackdropBrush>
    for ::windows::core::InParam<'a, ::windows::Foundation::IClosable>
{
    type Error = ::windows::core::Error;
    fn try_from(value: &CompositionBackdropBrush) -> ::windows::core::Result<Self> {
        let item = ::std::convert::TryInto::try_into(value)?;
        Ok(::windows::core::InParam::owned(item))
    }
}
impl ::core::convert::From<CompositionBackdropBrush> for CompositionBrush {
    fn from(value: CompositionBackdropBrush) -> Self {
        ::core::convert::From::from(&value)
    }
}
impl ::core::convert::From<&CompositionBackdropBrush> for CompositionBrush {
    fn from(value: &CompositionBackdropBrush) -> Self {
        ::windows::core::Interface::cast(value).unwrap()
    }
}
impl<'a> ::core::convert::From<&CompositionBackdropBrush>
    for ::windows::core::InParam<'a, CompositionBrush>
{
    fn from(value: &CompositionBackdropBrush) -> Self {
        ::windows::core::InParam::owned(value.into())
    }
}
impl ::core::convert::From<CompositionBackdropBrush> for CompositionObject {
    fn from(value: CompositionBackdropBrush) -> Self {
        ::core::convert::From::from(&value)
    }
}
impl ::core::convert::From<&CompositionBackdropBrush> for CompositionObject {
    fn from(value: &CompositionBackdropBrush) -> Self {
        ::windows::core::Interface::cast(value).unwrap()
    }
}
impl<'a> ::core::convert::From<&CompositionBackdropBrush>
    for ::windows::core::InParam<'a, CompositionObject>
{
    fn from(value: &CompositionBackdropBrush) -> Self {
        ::windows::core::InParam::owned(value.into())
    }
}
unsafe impl ::core::marker::Send for CompositionBackdropBrush {}
unsafe impl ::core::marker::Sync for CompositionBackdropBrush {}
#[doc = "*Required features: `\"UI_Composition\"`*"]
#[repr(transparent)]
pub struct CompositionBatchCompletedEventArgs(::windows::core::IUnknown);
impl CompositionBatchCompletedEventArgs {
    pub fn PopulatePropertyInfo(
        &self,
        propertyname: &::windows::core::HSTRING,
        propertyinfo: &AnimationPropertyInfo,
    ) -> ::windows::core::Result<()> {
        let this = &::windows::core::Interface::cast::<IAnimationObject>(self)?;
        unsafe {
            (::windows::core::Vtable::vtable(this).PopulatePropertyInfo)(
                ::windows::core::Vtable::as_raw(this),
                ::core::mem::transmute_copy(propertyname),
                ::core::mem::transmute_copy(propertyinfo),
            )
            .ok()
        }
    }
    pub fn Close(&self) -> ::windows::core::Result<()> {
        let this = &::windows::core::Interface::cast::<::windows::Foundation::IClosable>(self)?;
        unsafe {
            (::windows::core::Vtable::vtable(this).Close)(::windows::core::Vtable::as_raw(this))
                .ok()
        }
    }
    pub fn Compositor(&self) -> ::windows::core::Result<Compositor> {
        let this = &::windows::core::Interface::cast::<ICompositionObject>(self)?;
        unsafe {
            let mut result__ = ::core::mem::MaybeUninit::zeroed();
            (::windows::core::Vtable::vtable(this).Compositor)(
                ::windows::core::Vtable::as_raw(this),
                result__.as_mut_ptr(),
            )
            .from_abi::<Compositor>(result__)
        }
    }
    pub fn Properties(&self) -> ::windows::core::Result<CompositionPropertySet> {
        let this = &::windows::core::Interface::cast::<ICompositionObject>(self)?;
        unsafe {
            let mut result__ = ::core::mem::MaybeUninit::zeroed();
            (::windows::core::Vtable::vtable(this).Properties)(
                ::windows::core::Vtable::as_raw(this),
                result__.as_mut_ptr(),
            )
            .from_abi::<CompositionPropertySet>(result__)
        }
    }
    pub fn StartAnimation<'a, P0>(
        &self,
        propertyname: &::windows::core::HSTRING,
        animation: P0,
    ) -> ::windows::core::Result<()>
    where
        P0: ::std::convert::Into<::windows::core::InParam<'a, CompositionAnimation>>,
    {
        let this = &::windows::core::Interface::cast::<ICompositionObject>(self)?;
        unsafe {
            (::windows::core::Vtable::vtable(this).StartAnimation)(
                ::windows::core::Vtable::as_raw(this),
                ::core::mem::transmute_copy(propertyname),
                animation.into().abi(),
            )
            .ok()
        }
    }
    pub fn StopAnimation(
        &self,
        propertyname: &::windows::core::HSTRING,
    ) -> ::windows::core::Result<()> {
        let this = &::windows::core::Interface::cast::<ICompositionObject>(self)?;
        unsafe {
            (::windows::core::Vtable::vtable(this).StopAnimation)(
                ::windows::core::Vtable::as_raw(this),
                ::core::mem::transmute_copy(propertyname),
            )
            .ok()
        }
    }
    pub fn Comment(&self) -> ::windows::core::Result<::windows::core::HSTRING> {
        let this = &::windows::core::Interface::cast::<ICompositionObject2>(self)?;
        unsafe {
            let mut result__ = ::core::mem::MaybeUninit::zeroed();
            (::windows::core::Vtable::vtable(this).Comment)(
                ::windows::core::Vtable::as_raw(this),
                result__.as_mut_ptr(),
            )
            .from_abi::<::windows::core::HSTRING>(result__)
        }
    }
    pub fn SetComment(&self, value: &::windows::core::HSTRING) -> ::windows::core::Result<()> {
        let this = &::windows::core::Interface::cast::<ICompositionObject2>(self)?;
        unsafe {
            (::windows::core::Vtable::vtable(this).SetComment)(
                ::windows::core::Vtable::as_raw(this),
                ::core::mem::transmute_copy(value),
            )
            .ok()
        }
    }
    pub fn ImplicitAnimations(&self) -> ::windows::core::Result<ImplicitAnimationCollection> {
        let this = &::windows::core::Interface::cast::<ICompositionObject2>(self)?;
        unsafe {
            let mut result__ = ::core::mem::MaybeUninit::zeroed();
            (::windows::core::Vtable::vtable(this).ImplicitAnimations)(
                ::windows::core::Vtable::as_raw(this),
                result__.as_mut_ptr(),
            )
            .from_abi::<ImplicitAnimationCollection>(result__)
        }
    }
    pub fn SetImplicitAnimations(
        &self,
        value: &ImplicitAnimationCollection,
    ) -> ::windows::core::Result<()> {
        let this = &::windows::core::Interface::cast::<ICompositionObject2>(self)?;
        unsafe {
            (::windows::core::Vtable::vtable(this).SetImplicitAnimations)(
                ::windows::core::Vtable::as_raw(this),
                ::core::mem::transmute_copy(value),
            )
            .ok()
        }
    }
    pub fn StartAnimationGroup<'a, P0, E0>(&self, value: P0) -> ::windows::core::Result<()>
    where
        P0: ::std::convert::TryInto<
            ::windows::core::InParam<'a, ICompositionAnimationBase>,
            Error = E0,
        >,
        E0: ::std::convert::Into<::windows::core::Error>,
    {
        let this = &::windows::core::Interface::cast::<ICompositionObject2>(self)?;
        unsafe {
            (::windows::core::Vtable::vtable(this).StartAnimationGroup)(
                ::windows::core::Vtable::as_raw(this),
                value.try_into().map_err(|e| e.into())?.abi(),
            )
            .ok()
        }
    }
    pub fn StopAnimationGroup<'a, P0, E0>(&self, value: P0) -> ::windows::core::Result<()>
    where
        P0: ::std::convert::TryInto<
            ::windows::core::InParam<'a, ICompositionAnimationBase>,
            Error = E0,
        >,
        E0: ::std::convert::Into<::windows::core::Error>,
    {
        let this = &::windows::core::Interface::cast::<ICompositionObject2>(self)?;
        unsafe {
            (::windows::core::Vtable::vtable(this).StopAnimationGroup)(
                ::windows::core::Vtable::as_raw(this),
                value.try_into().map_err(|e| e.into())?.abi(),
            )
            .ok()
        }
    }
    #[doc = "*Required features: `\"UI_Dispatching\"`*"]
    #[cfg(feature = "UI_Dispatching")]
    pub fn DispatcherQueue(&self) -> ::windows::core::Result<super::Dispatching::DispatcherQueue> {
        let this = &::windows::core::Interface::cast::<ICompositionObject3>(self)?;
        unsafe {
            let mut result__ = ::core::mem::MaybeUninit::zeroed();
            (::windows::core::Vtable::vtable(this).DispatcherQueue)(
                ::windows::core::Vtable::as_raw(this),
                result__.as_mut_ptr(),
            )
            .from_abi::<super::Dispatching::DispatcherQueue>(result__)
        }
    }
    pub fn TryGetAnimationController(
        &self,
        propertyname: &::windows::core::HSTRING,
    ) -> ::windows::core::Result<AnimationController> {
        let this = &::windows::core::Interface::cast::<ICompositionObject4>(self)?;
        unsafe {
            let mut result__ = ::core::mem::MaybeUninit::zeroed();
            (::windows::core::Vtable::vtable(this).TryGetAnimationController)(
                ::windows::core::Vtable::as_raw(this),
                ::core::mem::transmute_copy(propertyname),
                result__.as_mut_ptr(),
            )
            .from_abi::<AnimationController>(result__)
        }
    }
    pub fn StartAnimationWithController<'a, P0>(
        &self,
        propertyname: &::windows::core::HSTRING,
        animation: P0,
        animationcontroller: &AnimationController,
    ) -> ::windows::core::Result<()>
    where
        P0: ::std::convert::Into<::windows::core::InParam<'a, CompositionAnimation>>,
    {
        let this = &::windows::core::Interface::cast::<ICompositionObject5>(self)?;
        unsafe {
            (::windows::core::Vtable::vtable(this).StartAnimationWithController)(
                ::windows::core::Vtable::as_raw(this),
                ::core::mem::transmute_copy(propertyname),
                animation.into().abi(),
                ::core::mem::transmute_copy(animationcontroller),
            )
            .ok()
        }
    }
}
impl ::core::clone::Clone for CompositionBatchCompletedEventArgs {
    fn clone(&self) -> Self {
        Self(self.0.clone())
    }
}
impl ::core::cmp::PartialEq for CompositionBatchCompletedEventArgs {
    fn eq(&self, other: &Self) -> bool {
        self.0 == other.0
    }
}
impl ::core::cmp::Eq for CompositionBatchCompletedEventArgs {}
impl ::core::fmt::Debug for CompositionBatchCompletedEventArgs {
    fn fmt(&self, f: &mut ::core::fmt::Formatter<'_>) -> ::core::fmt::Result {
        f.debug_tuple("CompositionBatchCompletedEventArgs").field(&self.0).finish()
    }
}
unsafe impl ::windows::core::RuntimeType for CompositionBatchCompletedEventArgs {
    const SIGNATURE : ::windows::core::ConstBuffer = ::windows::core::ConstBuffer::from_slice ( b"rc(Microsoft.UI.Composition.CompositionBatchCompletedEventArgs;{ac400334-4358-5fb0-bfc3-117fe581998f})" ) ;
    type DefaultType = ::core::option::Option<Self>;
    fn from_default(from: &Self::DefaultType) -> ::windows::core::Result<Self> {
        from.as_ref().cloned().ok_or(::windows::core::Error::OK)
    }
}
unsafe impl ::windows::core::Vtable for CompositionBatchCompletedEventArgs {
    type Vtable = ICompositionBatchCompletedEventArgs_Vtbl;
}
unsafe impl ::windows::core::Interface for CompositionBatchCompletedEventArgs {
    const IID: ::windows::core::GUID =
        <ICompositionBatchCompletedEventArgs as ::windows::core::Interface>::IID;
}
impl ::windows::core::RuntimeName for CompositionBatchCompletedEventArgs {
    const NAME: &'static str = "Microsoft.UI.Composition.CompositionBatchCompletedEventArgs";
}
::windows::core::interface_hierarchy!(
    CompositionBatchCompletedEventArgs,
    ::windows::core::IUnknown,
    ::windows::core::IInspectable
);
impl ::core::convert::TryFrom<CompositionBatchCompletedEventArgs> for IAnimationObject {
    type Error = ::windows::core::Error;
    fn try_from(value: CompositionBatchCompletedEventArgs) -> ::windows::core::Result<Self> {
        ::core::convert::TryFrom::try_from(&value)
    }
}
impl ::core::convert::TryFrom<&CompositionBatchCompletedEventArgs> for IAnimationObject {
    type Error = ::windows::core::Error;
    fn try_from(value: &CompositionBatchCompletedEventArgs) -> ::windows::core::Result<Self> {
        ::windows::core::Interface::cast(value)
    }
}
impl<'a> ::core::convert::TryFrom<&CompositionBatchCompletedEventArgs>
    for ::windows::core::InParam<'a, IAnimationObject>
{
    type Error = ::windows::core::Error;
    fn try_from(value: &CompositionBatchCompletedEventArgs) -> ::windows::core::Result<Self> {
        let item = ::std::convert::TryInto::try_into(value)?;
        Ok(::windows::core::InParam::owned(item))
    }
}
impl ::core::convert::TryFrom<CompositionBatchCompletedEventArgs>
    for ::windows::Foundation::IClosable
{
    type Error = ::windows::core::Error;
    fn try_from(value: CompositionBatchCompletedEventArgs) -> ::windows::core::Result<Self> {
        ::core::convert::TryFrom::try_from(&value)
    }
}
impl ::core::convert::TryFrom<&CompositionBatchCompletedEventArgs>
    for ::windows::Foundation::IClosable
{
    type Error = ::windows::core::Error;
    fn try_from(value: &CompositionBatchCompletedEventArgs) -> ::windows::core::Result<Self> {
        ::windows::core::Interface::cast(value)
    }
}
impl<'a> ::core::convert::TryFrom<&CompositionBatchCompletedEventArgs>
    for ::windows::core::InParam<'a, ::windows::Foundation::IClosable>
{
    type Error = ::windows::core::Error;
    fn try_from(value: &CompositionBatchCompletedEventArgs) -> ::windows::core::Result<Self> {
        let item = ::std::convert::TryInto::try_into(value)?;
        Ok(::windows::core::InParam::owned(item))
    }
}
impl ::core::convert::From<CompositionBatchCompletedEventArgs> for CompositionObject {
    fn from(value: CompositionBatchCompletedEventArgs) -> Self {
        ::core::convert::From::from(&value)
    }
}
impl ::core::convert::From<&CompositionBatchCompletedEventArgs> for CompositionObject {
    fn from(value: &CompositionBatchCompletedEventArgs) -> Self {
        ::windows::core::Interface::cast(value).unwrap()
    }
}
impl<'a> ::core::convert::From<&CompositionBatchCompletedEventArgs>
    for ::windows::core::InParam<'a, CompositionObject>
{
    fn from(value: &CompositionBatchCompletedEventArgs) -> Self {
        ::windows::core::InParam::owned(value.into())
    }
}
unsafe impl ::core::marker::Send for CompositionBatchCompletedEventArgs {}
unsafe impl ::core::marker::Sync for CompositionBatchCompletedEventArgs {}
#[doc = "*Required features: `\"UI_Composition\"`*"]
#[repr(transparent)]
pub struct CompositionBrush(::windows::core::IUnknown);
impl CompositionBrush {
    pub fn PopulatePropertyInfo(
        &self,
        propertyname: &::windows::core::HSTRING,
        propertyinfo: &AnimationPropertyInfo,
    ) -> ::windows::core::Result<()> {
        let this = &::windows::core::Interface::cast::<IAnimationObject>(self)?;
        unsafe {
            (::windows::core::Vtable::vtable(this).PopulatePropertyInfo)(
                ::windows::core::Vtable::as_raw(this),
                ::core::mem::transmute_copy(propertyname),
                ::core::mem::transmute_copy(propertyinfo),
            )
            .ok()
        }
    }
    pub fn Close(&self) -> ::windows::core::Result<()> {
        let this = &::windows::core::Interface::cast::<::windows::Foundation::IClosable>(self)?;
        unsafe {
            (::windows::core::Vtable::vtable(this).Close)(::windows::core::Vtable::as_raw(this))
                .ok()
        }
    }
    pub fn Compositor(&self) -> ::windows::core::Result<Compositor> {
        let this = &::windows::core::Interface::cast::<ICompositionObject>(self)?;
        unsafe {
            let mut result__ = ::core::mem::MaybeUninit::zeroed();
            (::windows::core::Vtable::vtable(this).Compositor)(
                ::windows::core::Vtable::as_raw(this),
                result__.as_mut_ptr(),
            )
            .from_abi::<Compositor>(result__)
        }
    }
    pub fn Properties(&self) -> ::windows::core::Result<CompositionPropertySet> {
        let this = &::windows::core::Interface::cast::<ICompositionObject>(self)?;
        unsafe {
            let mut result__ = ::core::mem::MaybeUninit::zeroed();
            (::windows::core::Vtable::vtable(this).Properties)(
                ::windows::core::Vtable::as_raw(this),
                result__.as_mut_ptr(),
            )
            .from_abi::<CompositionPropertySet>(result__)
        }
    }
    pub fn StartAnimation<'a, P0>(
        &self,
        propertyname: &::windows::core::HSTRING,
        animation: P0,
    ) -> ::windows::core::Result<()>
    where
        P0: ::std::convert::Into<::windows::core::InParam<'a, CompositionAnimation>>,
    {
        let this = &::windows::core::Interface::cast::<ICompositionObject>(self)?;
        unsafe {
            (::windows::core::Vtable::vtable(this).StartAnimation)(
                ::windows::core::Vtable::as_raw(this),
                ::core::mem::transmute_copy(propertyname),
                animation.into().abi(),
            )
            .ok()
        }
    }
    pub fn StopAnimation(
        &self,
        propertyname: &::windows::core::HSTRING,
    ) -> ::windows::core::Result<()> {
        let this = &::windows::core::Interface::cast::<ICompositionObject>(self)?;
        unsafe {
            (::windows::core::Vtable::vtable(this).StopAnimation)(
                ::windows::core::Vtable::as_raw(this),
                ::core::mem::transmute_copy(propertyname),
            )
            .ok()
        }
    }
    pub fn Comment(&self) -> ::windows::core::Result<::windows::core::HSTRING> {
        let this = &::windows::core::Interface::cast::<ICompositionObject2>(self)?;
        unsafe {
            let mut result__ = ::core::mem::MaybeUninit::zeroed();
            (::windows::core::Vtable::vtable(this).Comment)(
                ::windows::core::Vtable::as_raw(this),
                result__.as_mut_ptr(),
            )
            .from_abi::<::windows::core::HSTRING>(result__)
        }
    }
    pub fn SetComment(&self, value: &::windows::core::HSTRING) -> ::windows::core::Result<()> {
        let this = &::windows::core::Interface::cast::<ICompositionObject2>(self)?;
        unsafe {
            (::windows::core::Vtable::vtable(this).SetComment)(
                ::windows::core::Vtable::as_raw(this),
                ::core::mem::transmute_copy(value),
            )
            .ok()
        }
    }
    pub fn ImplicitAnimations(&self) -> ::windows::core::Result<ImplicitAnimationCollection> {
        let this = &::windows::core::Interface::cast::<ICompositionObject2>(self)?;
        unsafe {
            let mut result__ = ::core::mem::MaybeUninit::zeroed();
            (::windows::core::Vtable::vtable(this).ImplicitAnimations)(
                ::windows::core::Vtable::as_raw(this),
                result__.as_mut_ptr(),
            )
            .from_abi::<ImplicitAnimationCollection>(result__)
        }
    }
    pub fn SetImplicitAnimations(
        &self,
        value: &ImplicitAnimationCollection,
    ) -> ::windows::core::Result<()> {
        let this = &::windows::core::Interface::cast::<ICompositionObject2>(self)?;
        unsafe {
            (::windows::core::Vtable::vtable(this).SetImplicitAnimations)(
                ::windows::core::Vtable::as_raw(this),
                ::core::mem::transmute_copy(value),
            )
            .ok()
        }
    }
    pub fn StartAnimationGroup<'a, P0, E0>(&self, value: P0) -> ::windows::core::Result<()>
    where
        P0: ::std::convert::TryInto<
            ::windows::core::InParam<'a, ICompositionAnimationBase>,
            Error = E0,
        >,
        E0: ::std::convert::Into<::windows::core::Error>,
    {
        let this = &::windows::core::Interface::cast::<ICompositionObject2>(self)?;
        unsafe {
            (::windows::core::Vtable::vtable(this).StartAnimationGroup)(
                ::windows::core::Vtable::as_raw(this),
                value.try_into().map_err(|e| e.into())?.abi(),
            )
            .ok()
        }
    }
    pub fn StopAnimationGroup<'a, P0, E0>(&self, value: P0) -> ::windows::core::Result<()>
    where
        P0: ::std::convert::TryInto<
            ::windows::core::InParam<'a, ICompositionAnimationBase>,
            Error = E0,
        >,
        E0: ::std::convert::Into<::windows::core::Error>,
    {
        let this = &::windows::core::Interface::cast::<ICompositionObject2>(self)?;
        unsafe {
            (::windows::core::Vtable::vtable(this).StopAnimationGroup)(
                ::windows::core::Vtable::as_raw(this),
                value.try_into().map_err(|e| e.into())?.abi(),
            )
            .ok()
        }
    }
    #[doc = "*Required features: `\"UI_Dispatching\"`*"]
    #[cfg(feature = "UI_Dispatching")]
    pub fn DispatcherQueue(&self) -> ::windows::core::Result<super::Dispatching::DispatcherQueue> {
        let this = &::windows::core::Interface::cast::<ICompositionObject3>(self)?;
        unsafe {
            let mut result__ = ::core::mem::MaybeUninit::zeroed();
            (::windows::core::Vtable::vtable(this).DispatcherQueue)(
                ::windows::core::Vtable::as_raw(this),
                result__.as_mut_ptr(),
            )
            .from_abi::<super::Dispatching::DispatcherQueue>(result__)
        }
    }
    pub fn TryGetAnimationController(
        &self,
        propertyname: &::windows::core::HSTRING,
    ) -> ::windows::core::Result<AnimationController> {
        let this = &::windows::core::Interface::cast::<ICompositionObject4>(self)?;
        unsafe {
            let mut result__ = ::core::mem::MaybeUninit::zeroed();
            (::windows::core::Vtable::vtable(this).TryGetAnimationController)(
                ::windows::core::Vtable::as_raw(this),
                ::core::mem::transmute_copy(propertyname),
                result__.as_mut_ptr(),
            )
            .from_abi::<AnimationController>(result__)
        }
    }
    pub fn StartAnimationWithController<'a, P0>(
        &self,
        propertyname: &::windows::core::HSTRING,
        animation: P0,
        animationcontroller: &AnimationController,
    ) -> ::windows::core::Result<()>
    where
        P0: ::std::convert::Into<::windows::core::InParam<'a, CompositionAnimation>>,
    {
        let this = &::windows::core::Interface::cast::<ICompositionObject5>(self)?;
        unsafe {
            (::windows::core::Vtable::vtable(this).StartAnimationWithController)(
                ::windows::core::Vtable::as_raw(this),
                ::core::mem::transmute_copy(propertyname),
                animation.into().abi(),
                ::core::mem::transmute_copy(animationcontroller),
            )
            .ok()
        }
    }
}
impl ::core::clone::Clone for CompositionBrush {
    fn clone(&self) -> Self {
        Self(self.0.clone())
    }
}
impl ::core::cmp::PartialEq for CompositionBrush {
    fn eq(&self, other: &Self) -> bool {
        self.0 == other.0
    }
}
impl ::core::cmp::Eq for CompositionBrush {}
impl ::core::fmt::Debug for CompositionBrush {
    fn fmt(&self, f: &mut ::core::fmt::Formatter<'_>) -> ::core::fmt::Result {
        f.debug_tuple("CompositionBrush").field(&self.0).finish()
    }
}
unsafe impl ::windows::core::RuntimeType for CompositionBrush {
    const SIGNATURE: ::windows::core::ConstBuffer = ::windows::core::ConstBuffer::from_slice(
        b"rc(Microsoft.UI.Composition.CompositionBrush;{483924e7-99a5-5377-968b-dec6d40bbccd})",
    );
    type DefaultType = ::core::option::Option<Self>;
    fn from_default(from: &Self::DefaultType) -> ::windows::core::Result<Self> {
        from.as_ref().cloned().ok_or(::windows::core::Error::OK)
    }
}
unsafe impl ::windows::core::Vtable for CompositionBrush {
    type Vtable = ICompositionBrush_Vtbl;
}
unsafe impl ::windows::core::Interface for CompositionBrush {
    const IID: ::windows::core::GUID = <ICompositionBrush as ::windows::core::Interface>::IID;
}
impl ::windows::core::RuntimeName for CompositionBrush {
    const NAME: &'static str = "Microsoft.UI.Composition.CompositionBrush";
}
::windows::core::interface_hierarchy!(
    CompositionBrush,
    ::windows::core::IUnknown,
    ::windows::core::IInspectable
);
impl ::core::convert::TryFrom<CompositionBrush> for IAnimationObject {
    type Error = ::windows::core::Error;
    fn try_from(value: CompositionBrush) -> ::windows::core::Result<Self> {
        ::core::convert::TryFrom::try_from(&value)
    }
}
impl ::core::convert::TryFrom<&CompositionBrush> for IAnimationObject {
    type Error = ::windows::core::Error;
    fn try_from(value: &CompositionBrush) -> ::windows::core::Result<Self> {
        ::windows::core::Interface::cast(value)
    }
}
impl<'a> ::core::convert::TryFrom<&CompositionBrush>
    for ::windows::core::InParam<'a, IAnimationObject>
{
    type Error = ::windows::core::Error;
    fn try_from(value: &CompositionBrush) -> ::windows::core::Result<Self> {
        let item = ::std::convert::TryInto::try_into(value)?;
        Ok(::windows::core::InParam::owned(item))
    }
}
impl ::core::convert::TryFrom<CompositionBrush> for ::windows::Foundation::IClosable {
    type Error = ::windows::core::Error;
    fn try_from(value: CompositionBrush) -> ::windows::core::Result<Self> {
        ::core::convert::TryFrom::try_from(&value)
    }
}
impl ::core::convert::TryFrom<&CompositionBrush> for ::windows::Foundation::IClosable {
    type Error = ::windows::core::Error;
    fn try_from(value: &CompositionBrush) -> ::windows::core::Result<Self> {
        ::windows::core::Interface::cast(value)
    }
}
impl<'a> ::core::convert::TryFrom<&CompositionBrush>
    for ::windows::core::InParam<'a, ::windows::Foundation::IClosable>
{
    type Error = ::windows::core::Error;
    fn try_from(value: &CompositionBrush) -> ::windows::core::Result<Self> {
        let item = ::std::convert::TryInto::try_into(value)?;
        Ok(::windows::core::InParam::owned(item))
    }
}
impl ::core::convert::From<CompositionBrush> for CompositionObject {
    fn from(value: CompositionBrush) -> Self {
        ::core::convert::From::from(&value)
    }
}
impl ::core::convert::From<&CompositionBrush> for CompositionObject {
    fn from(value: &CompositionBrush) -> Self {
        ::windows::core::Interface::cast(value).unwrap()
    }
}
impl<'a> ::core::convert::From<&CompositionBrush>
    for ::windows::core::InParam<'a, CompositionObject>
{
    fn from(value: &CompositionBrush) -> Self {
        ::windows::core::InParam::owned(value.into())
    }
}
unsafe impl ::core::marker::Send for CompositionBrush {}
unsafe impl ::core::marker::Sync for CompositionBrush {}
#[doc = "*Required features: `\"UI_Composition\"`*"]
#[repr(transparent)]
pub struct CompositionCapabilities(::windows::core::IUnknown);
impl CompositionCapabilities {
    pub fn new() -> ::windows::core::Result<Self> {
        Self::IActivationFactory(|f| f.ActivateInstance::<Self>())
    }
    fn IActivationFactory<
        R,
        F: FnOnce(&::windows::core::IGenericFactory) -> ::windows::core::Result<R>,
    >(
        callback: F,
    ) -> ::windows::core::Result<R> {
        static SHARED: ::windows::core::FactoryCache<
            CompositionCapabilities,
            ::windows::core::IGenericFactory,
        > = ::windows::core::FactoryCache::new();
        SHARED.call(callback)
    }
    pub fn AreEffectsSupported(&self) -> ::windows::core::Result<bool> {
        let this = self;
        unsafe {
            let mut result__ = ::core::mem::MaybeUninit::zeroed();
            (::windows::core::Vtable::vtable(this).AreEffectsSupported)(
                ::windows::core::Vtable::as_raw(this),
                result__.as_mut_ptr(),
            )
            .from_abi::<bool>(result__)
        }
    }
    pub fn AreEffectsFast(&self) -> ::windows::core::Result<bool> {
        let this = self;
        unsafe {
            let mut result__ = ::core::mem::MaybeUninit::zeroed();
            (::windows::core::Vtable::vtable(this).AreEffectsFast)(
                ::windows::core::Vtable::as_raw(this),
                result__.as_mut_ptr(),
            )
            .from_abi::<bool>(result__)
        }
    }
    pub fn Changed(
        &self,
        handler: &::windows::Foundation::TypedEventHandler<
            CompositionCapabilities,
            ::windows::core::IInspectable,
        >,
    ) -> ::windows::core::Result<::windows::Foundation::EventRegistrationToken> {
        let this = self;
        unsafe {
            let mut result__ = ::core::mem::MaybeUninit::zeroed();
            (::windows::core::Vtable::vtable(this).Changed)(
                ::windows::core::Vtable::as_raw(this),
                ::core::mem::transmute_copy(handler),
                result__.as_mut_ptr(),
            )
            .from_abi::<::windows::Foundation::EventRegistrationToken>(result__)
        }
    }
    pub fn RemoveChanged(
        &self,
        token: ::windows::Foundation::EventRegistrationToken,
    ) -> ::windows::core::Result<()> {
        let this = self;
        unsafe {
            (::windows::core::Vtable::vtable(this).RemoveChanged)(
                ::windows::core::Vtable::as_raw(this),
                token,
            )
            .ok()
        }
    }
}
impl ::core::clone::Clone for CompositionCapabilities {
    fn clone(&self) -> Self {
        Self(self.0.clone())
    }
}
impl ::core::cmp::PartialEq for CompositionCapabilities {
    fn eq(&self, other: &Self) -> bool {
        self.0 == other.0
    }
}
impl ::core::cmp::Eq for CompositionCapabilities {}
impl ::core::fmt::Debug for CompositionCapabilities {
    fn fmt(&self, f: &mut ::core::fmt::Formatter<'_>) -> ::core::fmt::Result {
        f.debug_tuple("CompositionCapabilities").field(&self.0).finish()
    }
}
unsafe impl ::windows::core::RuntimeType for CompositionCapabilities {
    const SIGNATURE : ::windows::core::ConstBuffer = ::windows::core::ConstBuffer::from_slice ( b"rc(Microsoft.UI.Composition.CompositionCapabilities;{7689bf12-75c0-52ea-81cb-463ed1c16c45})" ) ;
    type DefaultType = ::core::option::Option<Self>;
    fn from_default(from: &Self::DefaultType) -> ::windows::core::Result<Self> {
        from.as_ref().cloned().ok_or(::windows::core::Error::OK)
    }
}
unsafe impl ::windows::core::Vtable for CompositionCapabilities {
    type Vtable = ICompositionCapabilities_Vtbl;
}
unsafe impl ::windows::core::Interface for CompositionCapabilities {
    const IID: ::windows::core::GUID =
        <ICompositionCapabilities as ::windows::core::Interface>::IID;
}
impl ::windows::core::RuntimeName for CompositionCapabilities {
    const NAME: &'static str = "Microsoft.UI.Composition.CompositionCapabilities";
}
::windows::core::interface_hierarchy!(
    CompositionCapabilities,
    ::windows::core::IUnknown,
    ::windows::core::IInspectable
);
unsafe impl ::core::marker::Send for CompositionCapabilities {}
unsafe impl ::core::marker::Sync for CompositionCapabilities {}
#[doc = "*Required features: `\"UI_Composition\"`*"]
#[repr(transparent)]
pub struct CompositionClip(::windows::core::IUnknown);
impl CompositionClip {
    pub fn PopulatePropertyInfo(
        &self,
        propertyname: &::windows::core::HSTRING,
        propertyinfo: &AnimationPropertyInfo,
    ) -> ::windows::core::Result<()> {
        let this = &::windows::core::Interface::cast::<IAnimationObject>(self)?;
        unsafe {
            (::windows::core::Vtable::vtable(this).PopulatePropertyInfo)(
                ::windows::core::Vtable::as_raw(this),
                ::core::mem::transmute_copy(propertyname),
                ::core::mem::transmute_copy(propertyinfo),
            )
            .ok()
        }
    }
    pub fn Close(&self) -> ::windows::core::Result<()> {
        let this = &::windows::core::Interface::cast::<::windows::Foundation::IClosable>(self)?;
        unsafe {
            (::windows::core::Vtable::vtable(this).Close)(::windows::core::Vtable::as_raw(this))
                .ok()
        }
    }
    pub fn AnchorPoint(&self) -> ::windows::core::Result<::windows::Foundation::Numerics::Vector2> {
        let this = &::windows::core::Interface::cast::<ICompositionClip2>(self)?;
        unsafe {
            let mut result__ = ::core::mem::MaybeUninit::zeroed();
            (::windows::core::Vtable::vtable(this).AnchorPoint)(
                ::windows::core::Vtable::as_raw(this),
                result__.as_mut_ptr(),
            )
            .from_abi::<::windows::Foundation::Numerics::Vector2>(result__)
        }
    }
    pub fn SetAnchorPoint(
        &self,
        value: ::windows::Foundation::Numerics::Vector2,
    ) -> ::windows::core::Result<()> {
        let this = &::windows::core::Interface::cast::<ICompositionClip2>(self)?;
        unsafe {
            (::windows::core::Vtable::vtable(this).SetAnchorPoint)(
                ::windows::core::Vtable::as_raw(this),
                value,
            )
            .ok()
        }
    }
    pub fn CenterPoint(&self) -> ::windows::core::Result<::windows::Foundation::Numerics::Vector2> {
        let this = &::windows::core::Interface::cast::<ICompositionClip2>(self)?;
        unsafe {
            let mut result__ = ::core::mem::MaybeUninit::zeroed();
            (::windows::core::Vtable::vtable(this).CenterPoint)(
                ::windows::core::Vtable::as_raw(this),
                result__.as_mut_ptr(),
            )
            .from_abi::<::windows::Foundation::Numerics::Vector2>(result__)
        }
    }
    pub fn SetCenterPoint(
        &self,
        value: ::windows::Foundation::Numerics::Vector2,
    ) -> ::windows::core::Result<()> {
        let this = &::windows::core::Interface::cast::<ICompositionClip2>(self)?;
        unsafe {
            (::windows::core::Vtable::vtable(this).SetCenterPoint)(
                ::windows::core::Vtable::as_raw(this),
                value,
            )
            .ok()
        }
    }
    pub fn Offset(&self) -> ::windows::core::Result<::windows::Foundation::Numerics::Vector2> {
        let this = &::windows::core::Interface::cast::<ICompositionClip2>(self)?;
        unsafe {
            let mut result__ = ::core::mem::MaybeUninit::zeroed();
            (::windows::core::Vtable::vtable(this).Offset)(
                ::windows::core::Vtable::as_raw(this),
                result__.as_mut_ptr(),
            )
            .from_abi::<::windows::Foundation::Numerics::Vector2>(result__)
        }
    }
    pub fn SetOffset(
        &self,
        value: ::windows::Foundation::Numerics::Vector2,
    ) -> ::windows::core::Result<()> {
        let this = &::windows::core::Interface::cast::<ICompositionClip2>(self)?;
        unsafe {
            (::windows::core::Vtable::vtable(this).SetOffset)(
                ::windows::core::Vtable::as_raw(this),
                value,
            )
            .ok()
        }
    }
    pub fn RotationAngle(&self) -> ::windows::core::Result<f32> {
        let this = &::windows::core::Interface::cast::<ICompositionClip2>(self)?;
        unsafe {
            let mut result__ = ::core::mem::MaybeUninit::zeroed();
            (::windows::core::Vtable::vtable(this).RotationAngle)(
                ::windows::core::Vtable::as_raw(this),
                result__.as_mut_ptr(),
            )
            .from_abi::<f32>(result__)
        }
    }
    pub fn SetRotationAngle(&self, value: f32) -> ::windows::core::Result<()> {
        let this = &::windows::core::Interface::cast::<ICompositionClip2>(self)?;
        unsafe {
            (::windows::core::Vtable::vtable(this).SetRotationAngle)(
                ::windows::core::Vtable::as_raw(this),
                value,
            )
            .ok()
        }
    }
    pub fn RotationAngleInDegrees(&self) -> ::windows::core::Result<f32> {
        let this = &::windows::core::Interface::cast::<ICompositionClip2>(self)?;
        unsafe {
            let mut result__ = ::core::mem::MaybeUninit::zeroed();
            (::windows::core::Vtable::vtable(this).RotationAngleInDegrees)(
                ::windows::core::Vtable::as_raw(this),
                result__.as_mut_ptr(),
            )
            .from_abi::<f32>(result__)
        }
    }
    pub fn SetRotationAngleInDegrees(&self, value: f32) -> ::windows::core::Result<()> {
        let this = &::windows::core::Interface::cast::<ICompositionClip2>(self)?;
        unsafe {
            (::windows::core::Vtable::vtable(this).SetRotationAngleInDegrees)(
                ::windows::core::Vtable::as_raw(this),
                value,
            )
            .ok()
        }
    }
    pub fn Scale(&self) -> ::windows::core::Result<::windows::Foundation::Numerics::Vector2> {
        let this = &::windows::core::Interface::cast::<ICompositionClip2>(self)?;
        unsafe {
            let mut result__ = ::core::mem::MaybeUninit::zeroed();
            (::windows::core::Vtable::vtable(this).Scale)(
                ::windows::core::Vtable::as_raw(this),
                result__.as_mut_ptr(),
            )
            .from_abi::<::windows::Foundation::Numerics::Vector2>(result__)
        }
    }
    pub fn SetScale(
        &self,
        value: ::windows::Foundation::Numerics::Vector2,
    ) -> ::windows::core::Result<()> {
        let this = &::windows::core::Interface::cast::<ICompositionClip2>(self)?;
        unsafe {
            (::windows::core::Vtable::vtable(this).SetScale)(
                ::windows::core::Vtable::as_raw(this),
                value,
            )
            .ok()
        }
    }
    pub fn TransformMatrix(
        &self,
    ) -> ::windows::core::Result<::windows::Foundation::Numerics::Matrix3x2> {
        let this = &::windows::core::Interface::cast::<ICompositionClip2>(self)?;
        unsafe {
            let mut result__ = ::core::mem::MaybeUninit::zeroed();
            (::windows::core::Vtable::vtable(this).TransformMatrix)(
                ::windows::core::Vtable::as_raw(this),
                result__.as_mut_ptr(),
            )
            .from_abi::<::windows::Foundation::Numerics::Matrix3x2>(result__)
        }
    }
    pub fn SetTransformMatrix(
        &self,
        value: ::windows::Foundation::Numerics::Matrix3x2,
    ) -> ::windows::core::Result<()> {
        let this = &::windows::core::Interface::cast::<ICompositionClip2>(self)?;
        unsafe {
            (::windows::core::Vtable::vtable(this).SetTransformMatrix)(
                ::windows::core::Vtable::as_raw(this),
                value,
            )
            .ok()
        }
    }
    pub fn Compositor(&self) -> ::windows::core::Result<Compositor> {
        let this = &::windows::core::Interface::cast::<ICompositionObject>(self)?;
        unsafe {
            let mut result__ = ::core::mem::MaybeUninit::zeroed();
            (::windows::core::Vtable::vtable(this).Compositor)(
                ::windows::core::Vtable::as_raw(this),
                result__.as_mut_ptr(),
            )
            .from_abi::<Compositor>(result__)
        }
    }
    pub fn Properties(&self) -> ::windows::core::Result<CompositionPropertySet> {
        let this = &::windows::core::Interface::cast::<ICompositionObject>(self)?;
        unsafe {
            let mut result__ = ::core::mem::MaybeUninit::zeroed();
            (::windows::core::Vtable::vtable(this).Properties)(
                ::windows::core::Vtable::as_raw(this),
                result__.as_mut_ptr(),
            )
            .from_abi::<CompositionPropertySet>(result__)
        }
    }
    pub fn StartAnimation<'a, P0>(
        &self,
        propertyname: &::windows::core::HSTRING,
        animation: P0,
    ) -> ::windows::core::Result<()>
    where
        P0: ::std::convert::Into<::windows::core::InParam<'a, CompositionAnimation>>,
    {
        let this = &::windows::core::Interface::cast::<ICompositionObject>(self)?;
        unsafe {
            (::windows::core::Vtable::vtable(this).StartAnimation)(
                ::windows::core::Vtable::as_raw(this),
                ::core::mem::transmute_copy(propertyname),
                animation.into().abi(),
            )
            .ok()
        }
    }
    pub fn StopAnimation(
        &self,
        propertyname: &::windows::core::HSTRING,
    ) -> ::windows::core::Result<()> {
        let this = &::windows::core::Interface::cast::<ICompositionObject>(self)?;
        unsafe {
            (::windows::core::Vtable::vtable(this).StopAnimation)(
                ::windows::core::Vtable::as_raw(this),
                ::core::mem::transmute_copy(propertyname),
            )
            .ok()
        }
    }
    pub fn Comment(&self) -> ::windows::core::Result<::windows::core::HSTRING> {
        let this = &::windows::core::Interface::cast::<ICompositionObject2>(self)?;
        unsafe {
            let mut result__ = ::core::mem::MaybeUninit::zeroed();
            (::windows::core::Vtable::vtable(this).Comment)(
                ::windows::core::Vtable::as_raw(this),
                result__.as_mut_ptr(),
            )
            .from_abi::<::windows::core::HSTRING>(result__)
        }
    }
    pub fn SetComment(&self, value: &::windows::core::HSTRING) -> ::windows::core::Result<()> {
        let this = &::windows::core::Interface::cast::<ICompositionObject2>(self)?;
        unsafe {
            (::windows::core::Vtable::vtable(this).SetComment)(
                ::windows::core::Vtable::as_raw(this),
                ::core::mem::transmute_copy(value),
            )
            .ok()
        }
    }
    pub fn ImplicitAnimations(&self) -> ::windows::core::Result<ImplicitAnimationCollection> {
        let this = &::windows::core::Interface::cast::<ICompositionObject2>(self)?;
        unsafe {
            let mut result__ = ::core::mem::MaybeUninit::zeroed();
            (::windows::core::Vtable::vtable(this).ImplicitAnimations)(
                ::windows::core::Vtable::as_raw(this),
                result__.as_mut_ptr(),
            )
            .from_abi::<ImplicitAnimationCollection>(result__)
        }
    }
    pub fn SetImplicitAnimations(
        &self,
        value: &ImplicitAnimationCollection,
    ) -> ::windows::core::Result<()> {
        let this = &::windows::core::Interface::cast::<ICompositionObject2>(self)?;
        unsafe {
            (::windows::core::Vtable::vtable(this).SetImplicitAnimations)(
                ::windows::core::Vtable::as_raw(this),
                ::core::mem::transmute_copy(value),
            )
            .ok()
        }
    }
    pub fn StartAnimationGroup<'a, P0, E0>(&self, value: P0) -> ::windows::core::Result<()>
    where
        P0: ::std::convert::TryInto<
            ::windows::core::InParam<'a, ICompositionAnimationBase>,
            Error = E0,
        >,
        E0: ::std::convert::Into<::windows::core::Error>,
    {
        let this = &::windows::core::Interface::cast::<ICompositionObject2>(self)?;
        unsafe {
            (::windows::core::Vtable::vtable(this).StartAnimationGroup)(
                ::windows::core::Vtable::as_raw(this),
                value.try_into().map_err(|e| e.into())?.abi(),
            )
            .ok()
        }
    }
    pub fn StopAnimationGroup<'a, P0, E0>(&self, value: P0) -> ::windows::core::Result<()>
    where
        P0: ::std::convert::TryInto<
            ::windows::core::InParam<'a, ICompositionAnimationBase>,
            Error = E0,
        >,
        E0: ::std::convert::Into<::windows::core::Error>,
    {
        let this = &::windows::core::Interface::cast::<ICompositionObject2>(self)?;
        unsafe {
            (::windows::core::Vtable::vtable(this).StopAnimationGroup)(
                ::windows::core::Vtable::as_raw(this),
                value.try_into().map_err(|e| e.into())?.abi(),
            )
            .ok()
        }
    }
    #[doc = "*Required features: `\"UI_Dispatching\"`*"]
    #[cfg(feature = "UI_Dispatching")]
    pub fn DispatcherQueue(&self) -> ::windows::core::Result<super::Dispatching::DispatcherQueue> {
        let this = &::windows::core::Interface::cast::<ICompositionObject3>(self)?;
        unsafe {
            let mut result__ = ::core::mem::MaybeUninit::zeroed();
            (::windows::core::Vtable::vtable(this).DispatcherQueue)(
                ::windows::core::Vtable::as_raw(this),
                result__.as_mut_ptr(),
            )
            .from_abi::<super::Dispatching::DispatcherQueue>(result__)
        }
    }
    pub fn TryGetAnimationController(
        &self,
        propertyname: &::windows::core::HSTRING,
    ) -> ::windows::core::Result<AnimationController> {
        let this = &::windows::core::Interface::cast::<ICompositionObject4>(self)?;
        unsafe {
            let mut result__ = ::core::mem::MaybeUninit::zeroed();
            (::windows::core::Vtable::vtable(this).TryGetAnimationController)(
                ::windows::core::Vtable::as_raw(this),
                ::core::mem::transmute_copy(propertyname),
                result__.as_mut_ptr(),
            )
            .from_abi::<AnimationController>(result__)
        }
    }
    pub fn StartAnimationWithController<'a, P0>(
        &self,
        propertyname: &::windows::core::HSTRING,
        animation: P0,
        animationcontroller: &AnimationController,
    ) -> ::windows::core::Result<()>
    where
        P0: ::std::convert::Into<::windows::core::InParam<'a, CompositionAnimation>>,
    {
        let this = &::windows::core::Interface::cast::<ICompositionObject5>(self)?;
        unsafe {
            (::windows::core::Vtable::vtable(this).StartAnimationWithController)(
                ::windows::core::Vtable::as_raw(this),
                ::core::mem::transmute_copy(propertyname),
                animation.into().abi(),
                ::core::mem::transmute_copy(animationcontroller),
            )
            .ok()
        }
    }
}
impl ::core::clone::Clone for CompositionClip {
    fn clone(&self) -> Self {
        Self(self.0.clone())
    }
}
impl ::core::cmp::PartialEq for CompositionClip {
    fn eq(&self, other: &Self) -> bool {
        self.0 == other.0
    }
}
impl ::core::cmp::Eq for CompositionClip {}
impl ::core::fmt::Debug for CompositionClip {
    fn fmt(&self, f: &mut ::core::fmt::Formatter<'_>) -> ::core::fmt::Result {
        f.debug_tuple("CompositionClip").field(&self.0).finish()
    }
}
unsafe impl ::windows::core::RuntimeType for CompositionClip {
    const SIGNATURE: ::windows::core::ConstBuffer = ::windows::core::ConstBuffer::from_slice(
        b"rc(Microsoft.UI.Composition.CompositionClip;{b66b55cb-b5a5-5bee-8972-ae78233cb34c})",
    );
    type DefaultType = ::core::option::Option<Self>;
    fn from_default(from: &Self::DefaultType) -> ::windows::core::Result<Self> {
        from.as_ref().cloned().ok_or(::windows::core::Error::OK)
    }
}
unsafe impl ::windows::core::Vtable for CompositionClip {
    type Vtable = ICompositionClip_Vtbl;
}
unsafe impl ::windows::core::Interface for CompositionClip {
    const IID: ::windows::core::GUID = <ICompositionClip as ::windows::core::Interface>::IID;
}
impl ::windows::core::RuntimeName for CompositionClip {
    const NAME: &'static str = "Microsoft.UI.Composition.CompositionClip";
}
::windows::core::interface_hierarchy!(
    CompositionClip,
    ::windows::core::IUnknown,
    ::windows::core::IInspectable
);
impl ::core::convert::TryFrom<CompositionClip> for IAnimationObject {
    type Error = ::windows::core::Error;
    fn try_from(value: CompositionClip) -> ::windows::core::Result<Self> {
        ::core::convert::TryFrom::try_from(&value)
    }
}
impl ::core::convert::TryFrom<&CompositionClip> for IAnimationObject {
    type Error = ::windows::core::Error;
    fn try_from(value: &CompositionClip) -> ::windows::core::Result<Self> {
        ::windows::core::Interface::cast(value)
    }
}
impl<'a> ::core::convert::TryFrom<&CompositionClip>
    for ::windows::core::InParam<'a, IAnimationObject>
{
    type Error = ::windows::core::Error;
    fn try_from(value: &CompositionClip) -> ::windows::core::Result<Self> {
        let item = ::std::convert::TryInto::try_into(value)?;
        Ok(::windows::core::InParam::owned(item))
    }
}
impl ::core::convert::TryFrom<CompositionClip> for ::windows::Foundation::IClosable {
    type Error = ::windows::core::Error;
    fn try_from(value: CompositionClip) -> ::windows::core::Result<Self> {
        ::core::convert::TryFrom::try_from(&value)
    }
}
impl ::core::convert::TryFrom<&CompositionClip> for ::windows::Foundation::IClosable {
    type Error = ::windows::core::Error;
    fn try_from(value: &CompositionClip) -> ::windows::core::Result<Self> {
        ::windows::core::Interface::cast(value)
    }
}
impl<'a> ::core::convert::TryFrom<&CompositionClip>
    for ::windows::core::InParam<'a, ::windows::Foundation::IClosable>
{
    type Error = ::windows::core::Error;
    fn try_from(value: &CompositionClip) -> ::windows::core::Result<Self> {
        let item = ::std::convert::TryInto::try_into(value)?;
        Ok(::windows::core::InParam::owned(item))
    }
}
impl ::core::convert::From<CompositionClip> for CompositionObject {
    fn from(value: CompositionClip) -> Self {
        ::core::convert::From::from(&value)
    }
}
impl ::core::convert::From<&CompositionClip> for CompositionObject {
    fn from(value: &CompositionClip) -> Self {
        ::windows::core::Interface::cast(value).unwrap()
    }
}
impl<'a> ::core::convert::From<&CompositionClip>
    for ::windows::core::InParam<'a, CompositionObject>
{
    fn from(value: &CompositionClip) -> Self {
        ::windows::core::InParam::owned(value.into())
    }
}
unsafe impl ::core::marker::Send for CompositionClip {}
unsafe impl ::core::marker::Sync for CompositionClip {}
#[doc = "*Required features: `\"UI_Composition\"`*"]
#[repr(transparent)]
pub struct CompositionColorBrush(::windows::core::IUnknown);
impl CompositionColorBrush {
    pub fn PopulatePropertyInfo(
        &self,
        propertyname: &::windows::core::HSTRING,
        propertyinfo: &AnimationPropertyInfo,
    ) -> ::windows::core::Result<()> {
        let this = &::windows::core::Interface::cast::<IAnimationObject>(self)?;
        unsafe {
            (::windows::core::Vtable::vtable(this).PopulatePropertyInfo)(
                ::windows::core::Vtable::as_raw(this),
                ::core::mem::transmute_copy(propertyname),
                ::core::mem::transmute_copy(propertyinfo),
            )
            .ok()
        }
    }
    pub fn Close(&self) -> ::windows::core::Result<()> {
        let this = &::windows::core::Interface::cast::<::windows::Foundation::IClosable>(self)?;
        unsafe {
            (::windows::core::Vtable::vtable(this).Close)(::windows::core::Vtable::as_raw(this))
                .ok()
        }
    }
    pub fn Color(&self) -> ::windows::core::Result<::windows::UI::Color> {
        let this = self;
        unsafe {
            let mut result__ = ::core::mem::MaybeUninit::zeroed();
            (::windows::core::Vtable::vtable(this).Color)(
                ::windows::core::Vtable::as_raw(this),
                result__.as_mut_ptr(),
            )
            .from_abi::<::windows::UI::Color>(result__)
        }
    }
    pub fn SetColor(&self, value: ::windows::UI::Color) -> ::windows::core::Result<()> {
        let this = self;
        unsafe {
            (::windows::core::Vtable::vtable(this).SetColor)(
                ::windows::core::Vtable::as_raw(this),
                value,
            )
            .ok()
        }
    }
    pub fn Compositor(&self) -> ::windows::core::Result<Compositor> {
        let this = &::windows::core::Interface::cast::<ICompositionObject>(self)?;
        unsafe {
            let mut result__ = ::core::mem::MaybeUninit::zeroed();
            (::windows::core::Vtable::vtable(this).Compositor)(
                ::windows::core::Vtable::as_raw(this),
                result__.as_mut_ptr(),
            )
            .from_abi::<Compositor>(result__)
        }
    }
    pub fn Properties(&self) -> ::windows::core::Result<CompositionPropertySet> {
        let this = &::windows::core::Interface::cast::<ICompositionObject>(self)?;
        unsafe {
            let mut result__ = ::core::mem::MaybeUninit::zeroed();
            (::windows::core::Vtable::vtable(this).Properties)(
                ::windows::core::Vtable::as_raw(this),
                result__.as_mut_ptr(),
            )
            .from_abi::<CompositionPropertySet>(result__)
        }
    }
    pub fn StartAnimation<'a, P0>(
        &self,
        propertyname: &::windows::core::HSTRING,
        animation: P0,
    ) -> ::windows::core::Result<()>
    where
        P0: ::std::convert::Into<::windows::core::InParam<'a, CompositionAnimation>>,
    {
        let this = &::windows::core::Interface::cast::<ICompositionObject>(self)?;
        unsafe {
            (::windows::core::Vtable::vtable(this).StartAnimation)(
                ::windows::core::Vtable::as_raw(this),
                ::core::mem::transmute_copy(propertyname),
                animation.into().abi(),
            )
            .ok()
        }
    }
    pub fn StopAnimation(
        &self,
        propertyname: &::windows::core::HSTRING,
    ) -> ::windows::core::Result<()> {
        let this = &::windows::core::Interface::cast::<ICompositionObject>(self)?;
        unsafe {
            (::windows::core::Vtable::vtable(this).StopAnimation)(
                ::windows::core::Vtable::as_raw(this),
                ::core::mem::transmute_copy(propertyname),
            )
            .ok()
        }
    }
    pub fn Comment(&self) -> ::windows::core::Result<::windows::core::HSTRING> {
        let this = &::windows::core::Interface::cast::<ICompositionObject2>(self)?;
        unsafe {
            let mut result__ = ::core::mem::MaybeUninit::zeroed();
            (::windows::core::Vtable::vtable(this).Comment)(
                ::windows::core::Vtable::as_raw(this),
                result__.as_mut_ptr(),
            )
            .from_abi::<::windows::core::HSTRING>(result__)
        }
    }
    pub fn SetComment(&self, value: &::windows::core::HSTRING) -> ::windows::core::Result<()> {
        let this = &::windows::core::Interface::cast::<ICompositionObject2>(self)?;
        unsafe {
            (::windows::core::Vtable::vtable(this).SetComment)(
                ::windows::core::Vtable::as_raw(this),
                ::core::mem::transmute_copy(value),
            )
            .ok()
        }
    }
    pub fn ImplicitAnimations(&self) -> ::windows::core::Result<ImplicitAnimationCollection> {
        let this = &::windows::core::Interface::cast::<ICompositionObject2>(self)?;
        unsafe {
            let mut result__ = ::core::mem::MaybeUninit::zeroed();
            (::windows::core::Vtable::vtable(this).ImplicitAnimations)(
                ::windows::core::Vtable::as_raw(this),
                result__.as_mut_ptr(),
            )
            .from_abi::<ImplicitAnimationCollection>(result__)
        }
    }
    pub fn SetImplicitAnimations(
        &self,
        value: &ImplicitAnimationCollection,
    ) -> ::windows::core::Result<()> {
        let this = &::windows::core::Interface::cast::<ICompositionObject2>(self)?;
        unsafe {
            (::windows::core::Vtable::vtable(this).SetImplicitAnimations)(
                ::windows::core::Vtable::as_raw(this),
                ::core::mem::transmute_copy(value),
            )
            .ok()
        }
    }
    pub fn StartAnimationGroup<'a, P0, E0>(&self, value: P0) -> ::windows::core::Result<()>
    where
        P0: ::std::convert::TryInto<
            ::windows::core::InParam<'a, ICompositionAnimationBase>,
            Error = E0,
        >,
        E0: ::std::convert::Into<::windows::core::Error>,
    {
        let this = &::windows::core::Interface::cast::<ICompositionObject2>(self)?;
        unsafe {
            (::windows::core::Vtable::vtable(this).StartAnimationGroup)(
                ::windows::core::Vtable::as_raw(this),
                value.try_into().map_err(|e| e.into())?.abi(),
            )
            .ok()
        }
    }
    pub fn StopAnimationGroup<'a, P0, E0>(&self, value: P0) -> ::windows::core::Result<()>
    where
        P0: ::std::convert::TryInto<
            ::windows::core::InParam<'a, ICompositionAnimationBase>,
            Error = E0,
        >,
        E0: ::std::convert::Into<::windows::core::Error>,
    {
        let this = &::windows::core::Interface::cast::<ICompositionObject2>(self)?;
        unsafe {
            (::windows::core::Vtable::vtable(this).StopAnimationGroup)(
                ::windows::core::Vtable::as_raw(this),
                value.try_into().map_err(|e| e.into())?.abi(),
            )
            .ok()
        }
    }
    #[doc = "*Required features: `\"UI_Dispatching\"`*"]
    #[cfg(feature = "UI_Dispatching")]
    pub fn DispatcherQueue(&self) -> ::windows::core::Result<super::Dispatching::DispatcherQueue> {
        let this = &::windows::core::Interface::cast::<ICompositionObject3>(self)?;
        unsafe {
            let mut result__ = ::core::mem::MaybeUninit::zeroed();
            (::windows::core::Vtable::vtable(this).DispatcherQueue)(
                ::windows::core::Vtable::as_raw(this),
                result__.as_mut_ptr(),
            )
            .from_abi::<super::Dispatching::DispatcherQueue>(result__)
        }
    }
    pub fn TryGetAnimationController(
        &self,
        propertyname: &::windows::core::HSTRING,
    ) -> ::windows::core::Result<AnimationController> {
        let this = &::windows::core::Interface::cast::<ICompositionObject4>(self)?;
        unsafe {
            let mut result__ = ::core::mem::MaybeUninit::zeroed();
            (::windows::core::Vtable::vtable(this).TryGetAnimationController)(
                ::windows::core::Vtable::as_raw(this),
                ::core::mem::transmute_copy(propertyname),
                result__.as_mut_ptr(),
            )
            .from_abi::<AnimationController>(result__)
        }
    }
    pub fn StartAnimationWithController<'a, P0>(
        &self,
        propertyname: &::windows::core::HSTRING,
        animation: P0,
        animationcontroller: &AnimationController,
    ) -> ::windows::core::Result<()>
    where
        P0: ::std::convert::Into<::windows::core::InParam<'a, CompositionAnimation>>,
    {
        let this = &::windows::core::Interface::cast::<ICompositionObject5>(self)?;
        unsafe {
            (::windows::core::Vtable::vtable(this).StartAnimationWithController)(
                ::windows::core::Vtable::as_raw(this),
                ::core::mem::transmute_copy(propertyname),
                animation.into().abi(),
                ::core::mem::transmute_copy(animationcontroller),
            )
            .ok()
        }
    }
}
impl ::core::clone::Clone for CompositionColorBrush {
    fn clone(&self) -> Self {
        Self(self.0.clone())
    }
}
impl ::core::cmp::PartialEq for CompositionColorBrush {
    fn eq(&self, other: &Self) -> bool {
        self.0 == other.0
    }
}
impl ::core::cmp::Eq for CompositionColorBrush {}
impl ::core::fmt::Debug for CompositionColorBrush {
    fn fmt(&self, f: &mut ::core::fmt::Formatter<'_>) -> ::core::fmt::Result {
        f.debug_tuple("CompositionColorBrush").field(&self.0).finish()
    }
}
unsafe impl ::windows::core::RuntimeType for CompositionColorBrush {
    const SIGNATURE : ::windows::core::ConstBuffer = ::windows::core::ConstBuffer::from_slice ( b"rc(Microsoft.UI.Composition.CompositionColorBrush;{3f8ffb69-3e71-55a7-8e79-f27a214c56ae})" ) ;
    type DefaultType = ::core::option::Option<Self>;
    fn from_default(from: &Self::DefaultType) -> ::windows::core::Result<Self> {
        from.as_ref().cloned().ok_or(::windows::core::Error::OK)
    }
}
unsafe impl ::windows::core::Vtable for CompositionColorBrush {
    type Vtable = ICompositionColorBrush_Vtbl;
}
unsafe impl ::windows::core::Interface for CompositionColorBrush {
    const IID: ::windows::core::GUID = <ICompositionColorBrush as ::windows::core::Interface>::IID;
}
impl ::windows::core::RuntimeName for CompositionColorBrush {
    const NAME: &'static str = "Microsoft.UI.Composition.CompositionColorBrush";
}
::windows::core::interface_hierarchy!(
    CompositionColorBrush,
    ::windows::core::IUnknown,
    ::windows::core::IInspectable
);
impl ::core::convert::TryFrom<CompositionColorBrush> for IAnimationObject {
    type Error = ::windows::core::Error;
    fn try_from(value: CompositionColorBrush) -> ::windows::core::Result<Self> {
        ::core::convert::TryFrom::try_from(&value)
    }
}
impl ::core::convert::TryFrom<&CompositionColorBrush> for IAnimationObject {
    type Error = ::windows::core::Error;
    fn try_from(value: &CompositionColorBrush) -> ::windows::core::Result<Self> {
        ::windows::core::Interface::cast(value)
    }
}
impl<'a> ::core::convert::TryFrom<&CompositionColorBrush>
    for ::windows::core::InParam<'a, IAnimationObject>
{
    type Error = ::windows::core::Error;
    fn try_from(value: &CompositionColorBrush) -> ::windows::core::Result<Self> {
        let item = ::std::convert::TryInto::try_into(value)?;
        Ok(::windows::core::InParam::owned(item))
    }
}
impl ::core::convert::TryFrom<CompositionColorBrush> for ::windows::Foundation::IClosable {
    type Error = ::windows::core::Error;
    fn try_from(value: CompositionColorBrush) -> ::windows::core::Result<Self> {
        ::core::convert::TryFrom::try_from(&value)
    }
}
impl ::core::convert::TryFrom<&CompositionColorBrush> for ::windows::Foundation::IClosable {
    type Error = ::windows::core::Error;
    fn try_from(value: &CompositionColorBrush) -> ::windows::core::Result<Self> {
        ::windows::core::Interface::cast(value)
    }
}
impl<'a> ::core::convert::TryFrom<&CompositionColorBrush>
    for ::windows::core::InParam<'a, ::windows::Foundation::IClosable>
{
    type Error = ::windows::core::Error;
    fn try_from(value: &CompositionColorBrush) -> ::windows::core::Result<Self> {
        let item = ::std::convert::TryInto::try_into(value)?;
        Ok(::windows::core::InParam::owned(item))
    }
}
impl ::core::convert::From<CompositionColorBrush> for CompositionBrush {
    fn from(value: CompositionColorBrush) -> Self {
        ::core::convert::From::from(&value)
    }
}
impl ::core::convert::From<&CompositionColorBrush> for CompositionBrush {
    fn from(value: &CompositionColorBrush) -> Self {
        ::windows::core::Interface::cast(value).unwrap()
    }
}
impl<'a> ::core::convert::From<&CompositionColorBrush>
    for ::windows::core::InParam<'a, CompositionBrush>
{
    fn from(value: &CompositionColorBrush) -> Self {
        ::windows::core::InParam::owned(value.into())
    }
}
impl ::core::convert::From<CompositionColorBrush> for CompositionObject {
    fn from(value: CompositionColorBrush) -> Self {
        ::core::convert::From::from(&value)
    }
}
impl ::core::convert::From<&CompositionColorBrush> for CompositionObject {
    fn from(value: &CompositionColorBrush) -> Self {
        ::windows::core::Interface::cast(value).unwrap()
    }
}
impl<'a> ::core::convert::From<&CompositionColorBrush>
    for ::windows::core::InParam<'a, CompositionObject>
{
    fn from(value: &CompositionColorBrush) -> Self {
        ::windows::core::InParam::owned(value.into())
    }
}
unsafe impl ::core::marker::Send for CompositionColorBrush {}
unsafe impl ::core::marker::Sync for CompositionColorBrush {}
#[doc = "*Required features: `\"UI_Composition\"`*"]
#[repr(transparent)]
pub struct CompositionColorGradientStop(::windows::core::IUnknown);
impl CompositionColorGradientStop {
    pub fn PopulatePropertyInfo(
        &self,
        propertyname: &::windows::core::HSTRING,
        propertyinfo: &AnimationPropertyInfo,
    ) -> ::windows::core::Result<()> {
        let this = &::windows::core::Interface::cast::<IAnimationObject>(self)?;
        unsafe {
            (::windows::core::Vtable::vtable(this).PopulatePropertyInfo)(
                ::windows::core::Vtable::as_raw(this),
                ::core::mem::transmute_copy(propertyname),
                ::core::mem::transmute_copy(propertyinfo),
            )
            .ok()
        }
    }
    pub fn Close(&self) -> ::windows::core::Result<()> {
        let this = &::windows::core::Interface::cast::<::windows::Foundation::IClosable>(self)?;
        unsafe {
            (::windows::core::Vtable::vtable(this).Close)(::windows::core::Vtable::as_raw(this))
                .ok()
        }
    }
    pub fn Color(&self) -> ::windows::core::Result<::windows::UI::Color> {
        let this = self;
        unsafe {
            let mut result__ = ::core::mem::MaybeUninit::zeroed();
            (::windows::core::Vtable::vtable(this).Color)(
                ::windows::core::Vtable::as_raw(this),
                result__.as_mut_ptr(),
            )
            .from_abi::<::windows::UI::Color>(result__)
        }
    }
    pub fn SetColor(&self, value: ::windows::UI::Color) -> ::windows::core::Result<()> {
        let this = self;
        unsafe {
            (::windows::core::Vtable::vtable(this).SetColor)(
                ::windows::core::Vtable::as_raw(this),
                value,
            )
            .ok()
        }
    }
    pub fn Offset(&self) -> ::windows::core::Result<f32> {
        let this = self;
        unsafe {
            let mut result__ = ::core::mem::MaybeUninit::zeroed();
            (::windows::core::Vtable::vtable(this).Offset)(
                ::windows::core::Vtable::as_raw(this),
                result__.as_mut_ptr(),
            )
            .from_abi::<f32>(result__)
        }
    }
    pub fn SetOffset(&self, value: f32) -> ::windows::core::Result<()> {
        let this = self;
        unsafe {
            (::windows::core::Vtable::vtable(this).SetOffset)(
                ::windows::core::Vtable::as_raw(this),
                value,
            )
            .ok()
        }
    }
    pub fn Compositor(&self) -> ::windows::core::Result<Compositor> {
        let this = &::windows::core::Interface::cast::<ICompositionObject>(self)?;
        unsafe {
            let mut result__ = ::core::mem::MaybeUninit::zeroed();
            (::windows::core::Vtable::vtable(this).Compositor)(
                ::windows::core::Vtable::as_raw(this),
                result__.as_mut_ptr(),
            )
            .from_abi::<Compositor>(result__)
        }
    }
    pub fn Properties(&self) -> ::windows::core::Result<CompositionPropertySet> {
        let this = &::windows::core::Interface::cast::<ICompositionObject>(self)?;
        unsafe {
            let mut result__ = ::core::mem::MaybeUninit::zeroed();
            (::windows::core::Vtable::vtable(this).Properties)(
                ::windows::core::Vtable::as_raw(this),
                result__.as_mut_ptr(),
            )
            .from_abi::<CompositionPropertySet>(result__)
        }
    }
    pub fn StartAnimation<'a, P0>(
        &self,
        propertyname: &::windows::core::HSTRING,
        animation: P0,
    ) -> ::windows::core::Result<()>
    where
        P0: ::std::convert::Into<::windows::core::InParam<'a, CompositionAnimation>>,
    {
        let this = &::windows::core::Interface::cast::<ICompositionObject>(self)?;
        unsafe {
            (::windows::core::Vtable::vtable(this).StartAnimation)(
                ::windows::core::Vtable::as_raw(this),
                ::core::mem::transmute_copy(propertyname),
                animation.into().abi(),
            )
            .ok()
        }
    }
    pub fn StopAnimation(
        &self,
        propertyname: &::windows::core::HSTRING,
    ) -> ::windows::core::Result<()> {
        let this = &::windows::core::Interface::cast::<ICompositionObject>(self)?;
        unsafe {
            (::windows::core::Vtable::vtable(this).StopAnimation)(
                ::windows::core::Vtable::as_raw(this),
                ::core::mem::transmute_copy(propertyname),
            )
            .ok()
        }
    }
    pub fn Comment(&self) -> ::windows::core::Result<::windows::core::HSTRING> {
        let this = &::windows::core::Interface::cast::<ICompositionObject2>(self)?;
        unsafe {
            let mut result__ = ::core::mem::MaybeUninit::zeroed();
            (::windows::core::Vtable::vtable(this).Comment)(
                ::windows::core::Vtable::as_raw(this),
                result__.as_mut_ptr(),
            )
            .from_abi::<::windows::core::HSTRING>(result__)
        }
    }
    pub fn SetComment(&self, value: &::windows::core::HSTRING) -> ::windows::core::Result<()> {
        let this = &::windows::core::Interface::cast::<ICompositionObject2>(self)?;
        unsafe {
            (::windows::core::Vtable::vtable(this).SetComment)(
                ::windows::core::Vtable::as_raw(this),
                ::core::mem::transmute_copy(value),
            )
            .ok()
        }
    }
    pub fn ImplicitAnimations(&self) -> ::windows::core::Result<ImplicitAnimationCollection> {
        let this = &::windows::core::Interface::cast::<ICompositionObject2>(self)?;
        unsafe {
            let mut result__ = ::core::mem::MaybeUninit::zeroed();
            (::windows::core::Vtable::vtable(this).ImplicitAnimations)(
                ::windows::core::Vtable::as_raw(this),
                result__.as_mut_ptr(),
            )
            .from_abi::<ImplicitAnimationCollection>(result__)
        }
    }
    pub fn SetImplicitAnimations(
        &self,
        value: &ImplicitAnimationCollection,
    ) -> ::windows::core::Result<()> {
        let this = &::windows::core::Interface::cast::<ICompositionObject2>(self)?;
        unsafe {
            (::windows::core::Vtable::vtable(this).SetImplicitAnimations)(
                ::windows::core::Vtable::as_raw(this),
                ::core::mem::transmute_copy(value),
            )
            .ok()
        }
    }
    pub fn StartAnimationGroup<'a, P0, E0>(&self, value: P0) -> ::windows::core::Result<()>
    where
        P0: ::std::convert::TryInto<
            ::windows::core::InParam<'a, ICompositionAnimationBase>,
            Error = E0,
        >,
        E0: ::std::convert::Into<::windows::core::Error>,
    {
        let this = &::windows::core::Interface::cast::<ICompositionObject2>(self)?;
        unsafe {
            (::windows::core::Vtable::vtable(this).StartAnimationGroup)(
                ::windows::core::Vtable::as_raw(this),
                value.try_into().map_err(|e| e.into())?.abi(),
            )
            .ok()
        }
    }
    pub fn StopAnimationGroup<'a, P0, E0>(&self, value: P0) -> ::windows::core::Result<()>
    where
        P0: ::std::convert::TryInto<
            ::windows::core::InParam<'a, ICompositionAnimationBase>,
            Error = E0,
        >,
        E0: ::std::convert::Into<::windows::core::Error>,
    {
        let this = &::windows::core::Interface::cast::<ICompositionObject2>(self)?;
        unsafe {
            (::windows::core::Vtable::vtable(this).StopAnimationGroup)(
                ::windows::core::Vtable::as_raw(this),
                value.try_into().map_err(|e| e.into())?.abi(),
            )
            .ok()
        }
    }
    #[doc = "*Required features: `\"UI_Dispatching\"`*"]
    #[cfg(feature = "UI_Dispatching")]
    pub fn DispatcherQueue(&self) -> ::windows::core::Result<super::Dispatching::DispatcherQueue> {
        let this = &::windows::core::Interface::cast::<ICompositionObject3>(self)?;
        unsafe {
            let mut result__ = ::core::mem::MaybeUninit::zeroed();
            (::windows::core::Vtable::vtable(this).DispatcherQueue)(
                ::windows::core::Vtable::as_raw(this),
                result__.as_mut_ptr(),
            )
            .from_abi::<super::Dispatching::DispatcherQueue>(result__)
        }
    }
    pub fn TryGetAnimationController(
        &self,
        propertyname: &::windows::core::HSTRING,
    ) -> ::windows::core::Result<AnimationController> {
        let this = &::windows::core::Interface::cast::<ICompositionObject4>(self)?;
        unsafe {
            let mut result__ = ::core::mem::MaybeUninit::zeroed();
            (::windows::core::Vtable::vtable(this).TryGetAnimationController)(
                ::windows::core::Vtable::as_raw(this),
                ::core::mem::transmute_copy(propertyname),
                result__.as_mut_ptr(),
            )
            .from_abi::<AnimationController>(result__)
        }
    }
    pub fn StartAnimationWithController<'a, P0>(
        &self,
        propertyname: &::windows::core::HSTRING,
        animation: P0,
        animationcontroller: &AnimationController,
    ) -> ::windows::core::Result<()>
    where
        P0: ::std::convert::Into<::windows::core::InParam<'a, CompositionAnimation>>,
    {
        let this = &::windows::core::Interface::cast::<ICompositionObject5>(self)?;
        unsafe {
            (::windows::core::Vtable::vtable(this).StartAnimationWithController)(
                ::windows::core::Vtable::as_raw(this),
                ::core::mem::transmute_copy(propertyname),
                animation.into().abi(),
                ::core::mem::transmute_copy(animationcontroller),
            )
            .ok()
        }
    }
}
impl ::core::clone::Clone for CompositionColorGradientStop {
    fn clone(&self) -> Self {
        Self(self.0.clone())
    }
}
impl ::core::cmp::PartialEq for CompositionColorGradientStop {
    fn eq(&self, other: &Self) -> bool {
        self.0 == other.0
    }
}
impl ::core::cmp::Eq for CompositionColorGradientStop {}
impl ::core::fmt::Debug for CompositionColorGradientStop {
    fn fmt(&self, f: &mut ::core::fmt::Formatter<'_>) -> ::core::fmt::Result {
        f.debug_tuple("CompositionColorGradientStop").field(&self.0).finish()
    }
}
unsafe impl ::windows::core::RuntimeType for CompositionColorGradientStop {
    const SIGNATURE : ::windows::core::ConstBuffer = ::windows::core::ConstBuffer::from_slice ( b"rc(Microsoft.UI.Composition.CompositionColorGradientStop;{868030d8-c5c0-5dd8-a765-e32cd3497aa9})" ) ;
    type DefaultType = ::core::option::Option<Self>;
    fn from_default(from: &Self::DefaultType) -> ::windows::core::Result<Self> {
        from.as_ref().cloned().ok_or(::windows::core::Error::OK)
    }
}
unsafe impl ::windows::core::Vtable for CompositionColorGradientStop {
    type Vtable = ICompositionColorGradientStop_Vtbl;
}
unsafe impl ::windows::core::Interface for CompositionColorGradientStop {
    const IID: ::windows::core::GUID =
        <ICompositionColorGradientStop as ::windows::core::Interface>::IID;
}
impl ::windows::core::RuntimeName for CompositionColorGradientStop {
    const NAME: &'static str = "Microsoft.UI.Composition.CompositionColorGradientStop";
}
::windows::core::interface_hierarchy!(
    CompositionColorGradientStop,
    ::windows::core::IUnknown,
    ::windows::core::IInspectable
);
impl ::core::convert::TryFrom<CompositionColorGradientStop> for IAnimationObject {
    type Error = ::windows::core::Error;
    fn try_from(value: CompositionColorGradientStop) -> ::windows::core::Result<Self> {
        ::core::convert::TryFrom::try_from(&value)
    }
}
impl ::core::convert::TryFrom<&CompositionColorGradientStop> for IAnimationObject {
    type Error = ::windows::core::Error;
    fn try_from(value: &CompositionColorGradientStop) -> ::windows::core::Result<Self> {
        ::windows::core::Interface::cast(value)
    }
}
impl<'a> ::core::convert::TryFrom<&CompositionColorGradientStop>
    for ::windows::core::InParam<'a, IAnimationObject>
{
    type Error = ::windows::core::Error;
    fn try_from(value: &CompositionColorGradientStop) -> ::windows::core::Result<Self> {
        let item = ::std::convert::TryInto::try_into(value)?;
        Ok(::windows::core::InParam::owned(item))
    }
}
impl ::core::convert::TryFrom<CompositionColorGradientStop> for ::windows::Foundation::IClosable {
    type Error = ::windows::core::Error;
    fn try_from(value: CompositionColorGradientStop) -> ::windows::core::Result<Self> {
        ::core::convert::TryFrom::try_from(&value)
    }
}
impl ::core::convert::TryFrom<&CompositionColorGradientStop> for ::windows::Foundation::IClosable {
    type Error = ::windows::core::Error;
    fn try_from(value: &CompositionColorGradientStop) -> ::windows::core::Result<Self> {
        ::windows::core::Interface::cast(value)
    }
}
impl<'a> ::core::convert::TryFrom<&CompositionColorGradientStop>
    for ::windows::core::InParam<'a, ::windows::Foundation::IClosable>
{
    type Error = ::windows::core::Error;
    fn try_from(value: &CompositionColorGradientStop) -> ::windows::core::Result<Self> {
        let item = ::std::convert::TryInto::try_into(value)?;
        Ok(::windows::core::InParam::owned(item))
    }
}
impl ::core::convert::From<CompositionColorGradientStop> for CompositionObject {
    fn from(value: CompositionColorGradientStop) -> Self {
        ::core::convert::From::from(&value)
    }
}
impl ::core::convert::From<&CompositionColorGradientStop> for CompositionObject {
    fn from(value: &CompositionColorGradientStop) -> Self {
        ::windows::core::Interface::cast(value).unwrap()
    }
}
impl<'a> ::core::convert::From<&CompositionColorGradientStop>
    for ::windows::core::InParam<'a, CompositionObject>
{
    fn from(value: &CompositionColorGradientStop) -> Self {
        ::windows::core::InParam::owned(value.into())
    }
}
unsafe impl ::core::marker::Send for CompositionColorGradientStop {}
unsafe impl ::core::marker::Sync for CompositionColorGradientStop {}
#[doc = "*Required features: `\"UI_Composition\"`*"]
#[repr(transparent)]
pub struct CompositionColorGradientStopCollection(::windows::core::IUnknown);
impl CompositionColorGradientStopCollection {
    pub fn First(
        &self,
    ) -> ::windows::core::Result<
        ::windows::Foundation::Collections::IIterator<CompositionColorGradientStop>,
    > {
        let this = &::windows::core::Interface::cast::<
            ::windows::Foundation::Collections::IIterable<CompositionColorGradientStop>,
        >(self)?;
        unsafe {
            let mut result__ = ::core::mem::MaybeUninit::zeroed();
            ( ::windows::core::Vtable::vtable ( this ) . First ) ( ::windows::core::Vtable::as_raw ( this ) , result__ . as_mut_ptr ( ) ) . from_abi:: < ::windows::Foundation::Collections:: IIterator :: < CompositionColorGradientStop > > ( result__ )
        }
    }
    pub fn GetAt(&self, index: u32) -> ::windows::core::Result<CompositionColorGradientStop> {
        let this = &::windows::core::Interface::cast::<
            ::windows::Foundation::Collections::IVector<CompositionColorGradientStop>,
        >(self)?;
        unsafe {
            let mut result__ = ::core::mem::MaybeUninit::zeroed();
            (::windows::core::Vtable::vtable(this).GetAt)(
                ::windows::core::Vtable::as_raw(this),
                index,
                result__.as_mut_ptr(),
            )
            .from_abi::<CompositionColorGradientStop>(result__)
        }
    }
    pub fn Size(&self) -> ::windows::core::Result<u32> {
        let this = &::windows::core::Interface::cast::<
            ::windows::Foundation::Collections::IVector<CompositionColorGradientStop>,
        >(self)?;
        unsafe {
            let mut result__ = ::core::mem::MaybeUninit::zeroed();
            (::windows::core::Vtable::vtable(this).Size)(
                ::windows::core::Vtable::as_raw(this),
                result__.as_mut_ptr(),
            )
            .from_abi::<u32>(result__)
        }
    }
    pub fn GetView(
        &self,
    ) -> ::windows::core::Result<
        ::windows::Foundation::Collections::IVectorView<CompositionColorGradientStop>,
    > {
        let this = &::windows::core::Interface::cast::<
            ::windows::Foundation::Collections::IVector<CompositionColorGradientStop>,
        >(self)?;
        unsafe {
            let mut result__ = ::core::mem::MaybeUninit::zeroed();
            (::windows::core::Vtable::vtable(this).GetView)(
                ::windows::core::Vtable::as_raw(this),
                result__.as_mut_ptr(),
            )
            .from_abi::<::windows::Foundation::Collections::IVectorView<
                CompositionColorGradientStop,
            >>(result__)
        }
    }
    pub fn IndexOf(
        &self,
        value: &CompositionColorGradientStop,
        index: &mut u32,
    ) -> ::windows::core::Result<bool> {
        let this = &::windows::core::Interface::cast::<
            ::windows::Foundation::Collections::IVector<CompositionColorGradientStop>,
        >(self)?;
        unsafe {
            let mut result__ = ::core::mem::MaybeUninit::zeroed();
            (::windows::core::Vtable::vtable(this).IndexOf)(
                ::windows::core::Vtable::as_raw(this),
                ::core::mem::transmute_copy(value),
                index,
                result__.as_mut_ptr(),
            )
            .from_abi::<bool>(result__)
        }
    }
    pub fn SetAt(
        &self,
        index: u32,
        value: &CompositionColorGradientStop,
    ) -> ::windows::core::Result<()> {
        let this = &::windows::core::Interface::cast::<
            ::windows::Foundation::Collections::IVector<CompositionColorGradientStop>,
        >(self)?;
        unsafe {
            (::windows::core::Vtable::vtable(this).SetAt)(
                ::windows::core::Vtable::as_raw(this),
                index,
                ::core::mem::transmute_copy(value),
            )
            .ok()
        }
    }
    pub fn InsertAt(
        &self,
        index: u32,
        value: &CompositionColorGradientStop,
    ) -> ::windows::core::Result<()> {
        let this = &::windows::core::Interface::cast::<
            ::windows::Foundation::Collections::IVector<CompositionColorGradientStop>,
        >(self)?;
        unsafe {
            (::windows::core::Vtable::vtable(this).InsertAt)(
                ::windows::core::Vtable::as_raw(this),
                index,
                ::core::mem::transmute_copy(value),
            )
            .ok()
        }
    }
    pub fn RemoveAt(&self, index: u32) -> ::windows::core::Result<()> {
        let this = &::windows::core::Interface::cast::<
            ::windows::Foundation::Collections::IVector<CompositionColorGradientStop>,
        >(self)?;
        unsafe {
            (::windows::core::Vtable::vtable(this).RemoveAt)(
                ::windows::core::Vtable::as_raw(this),
                index,
            )
            .ok()
        }
    }
    pub fn Append(&self, value: &CompositionColorGradientStop) -> ::windows::core::Result<()> {
        let this = &::windows::core::Interface::cast::<
            ::windows::Foundation::Collections::IVector<CompositionColorGradientStop>,
        >(self)?;
        unsafe {
            (::windows::core::Vtable::vtable(this).Append)(
                ::windows::core::Vtable::as_raw(this),
                ::core::mem::transmute_copy(value),
            )
            .ok()
        }
    }
    pub fn RemoveAtEnd(&self) -> ::windows::core::Result<()> {
        let this = &::windows::core::Interface::cast::<
            ::windows::Foundation::Collections::IVector<CompositionColorGradientStop>,
        >(self)?;
        unsafe {
            (::windows::core::Vtable::vtable(this).RemoveAtEnd)(::windows::core::Vtable::as_raw(
                this,
            ))
            .ok()
        }
    }
    pub fn Clear(&self) -> ::windows::core::Result<()> {
        let this = &::windows::core::Interface::cast::<
            ::windows::Foundation::Collections::IVector<CompositionColorGradientStop>,
        >(self)?;
        unsafe {
            (::windows::core::Vtable::vtable(this).Clear)(::windows::core::Vtable::as_raw(this))
                .ok()
        }
    }
    pub fn GetMany(
        &self,
        startindex: u32,
        items: &mut [::core::option::Option<CompositionColorGradientStop>],
    ) -> ::windows::core::Result<u32> {
        let this = &::windows::core::Interface::cast::<
            ::windows::Foundation::Collections::IVector<CompositionColorGradientStop>,
        >(self)?;
        unsafe {
            let mut result__ = ::core::mem::MaybeUninit::zeroed();
            (::windows::core::Vtable::vtable(this).GetMany)(
                ::windows::core::Vtable::as_raw(this),
                startindex,
                items.len() as u32,
                ::core::mem::transmute_copy(&items),
                result__.as_mut_ptr(),
            )
            .from_abi::<u32>(result__)
        }
    }
    pub fn ReplaceAll(
        &self,
        items: &[::core::option::Option<CompositionColorGradientStop>],
    ) -> ::windows::core::Result<()> {
        let this = &::windows::core::Interface::cast::<
            ::windows::Foundation::Collections::IVector<CompositionColorGradientStop>,
        >(self)?;
        unsafe {
            (::windows::core::Vtable::vtable(this).ReplaceAll)(
                ::windows::core::Vtable::as_raw(this),
                items.len() as u32,
                ::core::mem::transmute(items.as_ptr()),
            )
            .ok()
        }
    }
}
impl ::core::clone::Clone for CompositionColorGradientStopCollection {
    fn clone(&self) -> Self {
        Self(self.0.clone())
    }
}
impl ::core::cmp::PartialEq for CompositionColorGradientStopCollection {
    fn eq(&self, other: &Self) -> bool {
        self.0 == other.0
    }
}
impl ::core::cmp::Eq for CompositionColorGradientStopCollection {}
impl ::core::fmt::Debug for CompositionColorGradientStopCollection {
    fn fmt(&self, f: &mut ::core::fmt::Formatter<'_>) -> ::core::fmt::Result {
        f.debug_tuple("CompositionColorGradientStopCollection").field(&self.0).finish()
    }
}
unsafe impl ::windows::core::RuntimeType for CompositionColorGradientStopCollection {
    const SIGNATURE : ::windows::core::ConstBuffer = ::windows::core::ConstBuffer::from_slice ( b"rc(Microsoft.UI.Composition.CompositionColorGradientStopCollection;{4794cb29-ce9d-5837-9fc9-847df3e197de})" ) ;
    type DefaultType = ::core::option::Option<Self>;
    fn from_default(from: &Self::DefaultType) -> ::windows::core::Result<Self> {
        from.as_ref().cloned().ok_or(::windows::core::Error::OK)
    }
}
unsafe impl ::windows::core::Vtable for CompositionColorGradientStopCollection {
    type Vtable = ICompositionColorGradientStopCollection_Vtbl;
}
unsafe impl ::windows::core::Interface for CompositionColorGradientStopCollection {
    const IID: ::windows::core::GUID =
        <ICompositionColorGradientStopCollection as ::windows::core::Interface>::IID;
}
impl ::windows::core::RuntimeName for CompositionColorGradientStopCollection {
    const NAME: &'static str = "Microsoft.UI.Composition.CompositionColorGradientStopCollection";
}
impl ::core::iter::IntoIterator for CompositionColorGradientStopCollection {
    type Item = CompositionColorGradientStop;
    type IntoIter = ::windows::Foundation::Collections::VectorIterator<Self::Item>;
    fn into_iter(self) -> Self::IntoIter {
        ::core::iter::IntoIterator::into_iter(&self)
    }
}
impl ::core::iter::IntoIterator for &CompositionColorGradientStopCollection {
    type Item = CompositionColorGradientStop;
    type IntoIter = ::windows::Foundation::Collections::VectorIterator<Self::Item>;
    fn into_iter(self) -> Self::IntoIter {
        ::windows::Foundation::Collections::VectorIterator::new(
            ::core::convert::TryInto::try_into(self).ok(),
        )
    }
}
::windows::core::interface_hierarchy!(
    CompositionColorGradientStopCollection,
    ::windows::core::IUnknown,
    ::windows::core::IInspectable
);
impl ::core::convert::TryFrom<CompositionColorGradientStopCollection>
    for ::windows::Foundation::Collections::IIterable<CompositionColorGradientStop>
{
    type Error = ::windows::core::Error;
    fn try_from(value: CompositionColorGradientStopCollection) -> ::windows::core::Result<Self> {
        ::core::convert::TryFrom::try_from(&value)
    }
}
impl ::core::convert::TryFrom<&CompositionColorGradientStopCollection>
    for ::windows::Foundation::Collections::IIterable<CompositionColorGradientStop>
{
    type Error = ::windows::core::Error;
    fn try_from(value: &CompositionColorGradientStopCollection) -> ::windows::core::Result<Self> {
        ::windows::core::Interface::cast(value)
    }
}
impl<'a> ::core::convert::TryFrom<&CompositionColorGradientStopCollection>
    for ::windows::core::InParam<
        'a,
        ::windows::Foundation::Collections::IIterable<CompositionColorGradientStop>,
    >
{
    type Error = ::windows::core::Error;
    fn try_from(value: &CompositionColorGradientStopCollection) -> ::windows::core::Result<Self> {
        let item = ::std::convert::TryInto::try_into(value)?;
        Ok(::windows::core::InParam::owned(item))
    }
}
impl ::core::convert::TryFrom<CompositionColorGradientStopCollection>
    for ::windows::Foundation::Collections::IVector<CompositionColorGradientStop>
{
    type Error = ::windows::core::Error;
    fn try_from(value: CompositionColorGradientStopCollection) -> ::windows::core::Result<Self> {
        ::core::convert::TryFrom::try_from(&value)
    }
}
impl ::core::convert::TryFrom<&CompositionColorGradientStopCollection>
    for ::windows::Foundation::Collections::IVector<CompositionColorGradientStop>
{
    type Error = ::windows::core::Error;
    fn try_from(value: &CompositionColorGradientStopCollection) -> ::windows::core::Result<Self> {
        ::windows::core::Interface::cast(value)
    }
}
impl<'a> ::core::convert::TryFrom<&CompositionColorGradientStopCollection>
    for ::windows::core::InParam<
        'a,
        ::windows::Foundation::Collections::IVector<CompositionColorGradientStop>,
    >
{
    type Error = ::windows::core::Error;
    fn try_from(value: &CompositionColorGradientStopCollection) -> ::windows::core::Result<Self> {
        let item = ::std::convert::TryInto::try_into(value)?;
        Ok(::windows::core::InParam::owned(item))
    }
}
unsafe impl ::core::marker::Send for CompositionColorGradientStopCollection {}
unsafe impl ::core::marker::Sync for CompositionColorGradientStopCollection {}
#[doc = "*Required features: `\"UI_Composition\"`*"]
#[repr(transparent)]
pub struct CompositionCommitBatch(::windows::core::IUnknown);
impl CompositionCommitBatch {
    pub fn PopulatePropertyInfo(
        &self,
        propertyname: &::windows::core::HSTRING,
        propertyinfo: &AnimationPropertyInfo,
    ) -> ::windows::core::Result<()> {
        let this = &::windows::core::Interface::cast::<IAnimationObject>(self)?;
        unsafe {
            (::windows::core::Vtable::vtable(this).PopulatePropertyInfo)(
                ::windows::core::Vtable::as_raw(this),
                ::core::mem::transmute_copy(propertyname),
                ::core::mem::transmute_copy(propertyinfo),
            )
            .ok()
        }
    }
    pub fn Close(&self) -> ::windows::core::Result<()> {
        let this = &::windows::core::Interface::cast::<::windows::Foundation::IClosable>(self)?;
        unsafe {
            (::windows::core::Vtable::vtable(this).Close)(::windows::core::Vtable::as_raw(this))
                .ok()
        }
    }
    pub fn IsActive(&self) -> ::windows::core::Result<bool> {
        let this = self;
        unsafe {
            let mut result__ = ::core::mem::MaybeUninit::zeroed();
            (::windows::core::Vtable::vtable(this).IsActive)(
                ::windows::core::Vtable::as_raw(this),
                result__.as_mut_ptr(),
            )
            .from_abi::<bool>(result__)
        }
    }
    pub fn IsEnded(&self) -> ::windows::core::Result<bool> {
        let this = self;
        unsafe {
            let mut result__ = ::core::mem::MaybeUninit::zeroed();
            (::windows::core::Vtable::vtable(this).IsEnded)(
                ::windows::core::Vtable::as_raw(this),
                result__.as_mut_ptr(),
            )
            .from_abi::<bool>(result__)
        }
    }
    pub fn Completed(
        &self,
        handler: &::windows::Foundation::TypedEventHandler<
            ::windows::core::IInspectable,
            CompositionBatchCompletedEventArgs,
        >,
    ) -> ::windows::core::Result<::windows::Foundation::EventRegistrationToken> {
        let this = self;
        unsafe {
            let mut result__ = ::core::mem::MaybeUninit::zeroed();
            (::windows::core::Vtable::vtable(this).Completed)(
                ::windows::core::Vtable::as_raw(this),
                ::core::mem::transmute_copy(handler),
                result__.as_mut_ptr(),
            )
            .from_abi::<::windows::Foundation::EventRegistrationToken>(result__)
        }
    }
    pub fn RemoveCompleted(
        &self,
        token: ::windows::Foundation::EventRegistrationToken,
    ) -> ::windows::core::Result<()> {
        let this = self;
        unsafe {
            (::windows::core::Vtable::vtable(this).RemoveCompleted)(
                ::windows::core::Vtable::as_raw(this),
                token,
            )
            .ok()
        }
    }
    pub fn Compositor(&self) -> ::windows::core::Result<Compositor> {
        let this = &::windows::core::Interface::cast::<ICompositionObject>(self)?;
        unsafe {
            let mut result__ = ::core::mem::MaybeUninit::zeroed();
            (::windows::core::Vtable::vtable(this).Compositor)(
                ::windows::core::Vtable::as_raw(this),
                result__.as_mut_ptr(),
            )
            .from_abi::<Compositor>(result__)
        }
    }
    pub fn Properties(&self) -> ::windows::core::Result<CompositionPropertySet> {
        let this = &::windows::core::Interface::cast::<ICompositionObject>(self)?;
        unsafe {
            let mut result__ = ::core::mem::MaybeUninit::zeroed();
            (::windows::core::Vtable::vtable(this).Properties)(
                ::windows::core::Vtable::as_raw(this),
                result__.as_mut_ptr(),
            )
            .from_abi::<CompositionPropertySet>(result__)
        }
    }
    pub fn StartAnimation<'a, P0>(
        &self,
        propertyname: &::windows::core::HSTRING,
        animation: P0,
    ) -> ::windows::core::Result<()>
    where
        P0: ::std::convert::Into<::windows::core::InParam<'a, CompositionAnimation>>,
    {
        let this = &::windows::core::Interface::cast::<ICompositionObject>(self)?;
        unsafe {
            (::windows::core::Vtable::vtable(this).StartAnimation)(
                ::windows::core::Vtable::as_raw(this),
                ::core::mem::transmute_copy(propertyname),
                animation.into().abi(),
            )
            .ok()
        }
    }
    pub fn StopAnimation(
        &self,
        propertyname: &::windows::core::HSTRING,
    ) -> ::windows::core::Result<()> {
        let this = &::windows::core::Interface::cast::<ICompositionObject>(self)?;
        unsafe {
            (::windows::core::Vtable::vtable(this).StopAnimation)(
                ::windows::core::Vtable::as_raw(this),
                ::core::mem::transmute_copy(propertyname),
            )
            .ok()
        }
    }
    pub fn Comment(&self) -> ::windows::core::Result<::windows::core::HSTRING> {
        let this = &::windows::core::Interface::cast::<ICompositionObject2>(self)?;
        unsafe {
            let mut result__ = ::core::mem::MaybeUninit::zeroed();
            (::windows::core::Vtable::vtable(this).Comment)(
                ::windows::core::Vtable::as_raw(this),
                result__.as_mut_ptr(),
            )
            .from_abi::<::windows::core::HSTRING>(result__)
        }
    }
    pub fn SetComment(&self, value: &::windows::core::HSTRING) -> ::windows::core::Result<()> {
        let this = &::windows::core::Interface::cast::<ICompositionObject2>(self)?;
        unsafe {
            (::windows::core::Vtable::vtable(this).SetComment)(
                ::windows::core::Vtable::as_raw(this),
                ::core::mem::transmute_copy(value),
            )
            .ok()
        }
    }
    pub fn ImplicitAnimations(&self) -> ::windows::core::Result<ImplicitAnimationCollection> {
        let this = &::windows::core::Interface::cast::<ICompositionObject2>(self)?;
        unsafe {
            let mut result__ = ::core::mem::MaybeUninit::zeroed();
            (::windows::core::Vtable::vtable(this).ImplicitAnimations)(
                ::windows::core::Vtable::as_raw(this),
                result__.as_mut_ptr(),
            )
            .from_abi::<ImplicitAnimationCollection>(result__)
        }
    }
    pub fn SetImplicitAnimations(
        &self,
        value: &ImplicitAnimationCollection,
    ) -> ::windows::core::Result<()> {
        let this = &::windows::core::Interface::cast::<ICompositionObject2>(self)?;
        unsafe {
            (::windows::core::Vtable::vtable(this).SetImplicitAnimations)(
                ::windows::core::Vtable::as_raw(this),
                ::core::mem::transmute_copy(value),
            )
            .ok()
        }
    }
    pub fn StartAnimationGroup<'a, P0, E0>(&self, value: P0) -> ::windows::core::Result<()>
    where
        P0: ::std::convert::TryInto<
            ::windows::core::InParam<'a, ICompositionAnimationBase>,
            Error = E0,
        >,
        E0: ::std::convert::Into<::windows::core::Error>,
    {
        let this = &::windows::core::Interface::cast::<ICompositionObject2>(self)?;
        unsafe {
            (::windows::core::Vtable::vtable(this).StartAnimationGroup)(
                ::windows::core::Vtable::as_raw(this),
                value.try_into().map_err(|e| e.into())?.abi(),
            )
            .ok()
        }
    }
    pub fn StopAnimationGroup<'a, P0, E0>(&self, value: P0) -> ::windows::core::Result<()>
    where
        P0: ::std::convert::TryInto<
            ::windows::core::InParam<'a, ICompositionAnimationBase>,
            Error = E0,
        >,
        E0: ::std::convert::Into<::windows::core::Error>,
    {
        let this = &::windows::core::Interface::cast::<ICompositionObject2>(self)?;
        unsafe {
            (::windows::core::Vtable::vtable(this).StopAnimationGroup)(
                ::windows::core::Vtable::as_raw(this),
                value.try_into().map_err(|e| e.into())?.abi(),
            )
            .ok()
        }
    }
    #[doc = "*Required features: `\"UI_Dispatching\"`*"]
    #[cfg(feature = "UI_Dispatching")]
    pub fn DispatcherQueue(&self) -> ::windows::core::Result<super::Dispatching::DispatcherQueue> {
        let this = &::windows::core::Interface::cast::<ICompositionObject3>(self)?;
        unsafe {
            let mut result__ = ::core::mem::MaybeUninit::zeroed();
            (::windows::core::Vtable::vtable(this).DispatcherQueue)(
                ::windows::core::Vtable::as_raw(this),
                result__.as_mut_ptr(),
            )
            .from_abi::<super::Dispatching::DispatcherQueue>(result__)
        }
    }
    pub fn TryGetAnimationController(
        &self,
        propertyname: &::windows::core::HSTRING,
    ) -> ::windows::core::Result<AnimationController> {
        let this = &::windows::core::Interface::cast::<ICompositionObject4>(self)?;
        unsafe {
            let mut result__ = ::core::mem::MaybeUninit::zeroed();
            (::windows::core::Vtable::vtable(this).TryGetAnimationController)(
                ::windows::core::Vtable::as_raw(this),
                ::core::mem::transmute_copy(propertyname),
                result__.as_mut_ptr(),
            )
            .from_abi::<AnimationController>(result__)
        }
    }
    pub fn StartAnimationWithController<'a, P0>(
        &self,
        propertyname: &::windows::core::HSTRING,
        animation: P0,
        animationcontroller: &AnimationController,
    ) -> ::windows::core::Result<()>
    where
        P0: ::std::convert::Into<::windows::core::InParam<'a, CompositionAnimation>>,
    {
        let this = &::windows::core::Interface::cast::<ICompositionObject5>(self)?;
        unsafe {
            (::windows::core::Vtable::vtable(this).StartAnimationWithController)(
                ::windows::core::Vtable::as_raw(this),
                ::core::mem::transmute_copy(propertyname),
                animation.into().abi(),
                ::core::mem::transmute_copy(animationcontroller),
            )
            .ok()
        }
    }
}
impl ::core::clone::Clone for CompositionCommitBatch {
    fn clone(&self) -> Self {
        Self(self.0.clone())
    }
}
impl ::core::cmp::PartialEq for CompositionCommitBatch {
    fn eq(&self, other: &Self) -> bool {
        self.0 == other.0
    }
}
impl ::core::cmp::Eq for CompositionCommitBatch {}
impl ::core::fmt::Debug for CompositionCommitBatch {
    fn fmt(&self, f: &mut ::core::fmt::Formatter<'_>) -> ::core::fmt::Result {
        f.debug_tuple("CompositionCommitBatch").field(&self.0).finish()
    }
}
unsafe impl ::windows::core::RuntimeType for CompositionCommitBatch {
    const SIGNATURE : ::windows::core::ConstBuffer = ::windows::core::ConstBuffer::from_slice ( b"rc(Microsoft.UI.Composition.CompositionCommitBatch;{c4550fa8-a7f2-5259-bf74-33b2f5240a28})" ) ;
    type DefaultType = ::core::option::Option<Self>;
    fn from_default(from: &Self::DefaultType) -> ::windows::core::Result<Self> {
        from.as_ref().cloned().ok_or(::windows::core::Error::OK)
    }
}
unsafe impl ::windows::core::Vtable for CompositionCommitBatch {
    type Vtable = ICompositionCommitBatch_Vtbl;
}
unsafe impl ::windows::core::Interface for CompositionCommitBatch {
    const IID: ::windows::core::GUID = <ICompositionCommitBatch as ::windows::core::Interface>::IID;
}
impl ::windows::core::RuntimeName for CompositionCommitBatch {
    const NAME: &'static str = "Microsoft.UI.Composition.CompositionCommitBatch";
}
::windows::core::interface_hierarchy!(
    CompositionCommitBatch,
    ::windows::core::IUnknown,
    ::windows::core::IInspectable
);
impl ::core::convert::TryFrom<CompositionCommitBatch> for IAnimationObject {
    type Error = ::windows::core::Error;
    fn try_from(value: CompositionCommitBatch) -> ::windows::core::Result<Self> {
        ::core::convert::TryFrom::try_from(&value)
    }
}
impl ::core::convert::TryFrom<&CompositionCommitBatch> for IAnimationObject {
    type Error = ::windows::core::Error;
    fn try_from(value: &CompositionCommitBatch) -> ::windows::core::Result<Self> {
        ::windows::core::Interface::cast(value)
    }
}
impl<'a> ::core::convert::TryFrom<&CompositionCommitBatch>
    for ::windows::core::InParam<'a, IAnimationObject>
{
    type Error = ::windows::core::Error;
    fn try_from(value: &CompositionCommitBatch) -> ::windows::core::Result<Self> {
        let item = ::std::convert::TryInto::try_into(value)?;
        Ok(::windows::core::InParam::owned(item))
    }
}
impl ::core::convert::TryFrom<CompositionCommitBatch> for ::windows::Foundation::IClosable {
    type Error = ::windows::core::Error;
    fn try_from(value: CompositionCommitBatch) -> ::windows::core::Result<Self> {
        ::core::convert::TryFrom::try_from(&value)
    }
}
impl ::core::convert::TryFrom<&CompositionCommitBatch> for ::windows::Foundation::IClosable {
    type Error = ::windows::core::Error;
    fn try_from(value: &CompositionCommitBatch) -> ::windows::core::Result<Self> {
        ::windows::core::Interface::cast(value)
    }
}
impl<'a> ::core::convert::TryFrom<&CompositionCommitBatch>
    for ::windows::core::InParam<'a, ::windows::Foundation::IClosable>
{
    type Error = ::windows::core::Error;
    fn try_from(value: &CompositionCommitBatch) -> ::windows::core::Result<Self> {
        let item = ::std::convert::TryInto::try_into(value)?;
        Ok(::windows::core::InParam::owned(item))
    }
}
impl ::core::convert::From<CompositionCommitBatch> for CompositionObject {
    fn from(value: CompositionCommitBatch) -> Self {
        ::core::convert::From::from(&value)
    }
}
impl ::core::convert::From<&CompositionCommitBatch> for CompositionObject {
    fn from(value: &CompositionCommitBatch) -> Self {
        ::windows::core::Interface::cast(value).unwrap()
    }
}
impl<'a> ::core::convert::From<&CompositionCommitBatch>
    for ::windows::core::InParam<'a, CompositionObject>
{
    fn from(value: &CompositionCommitBatch) -> Self {
        ::windows::core::InParam::owned(value.into())
    }
}
unsafe impl ::core::marker::Send for CompositionCommitBatch {}
unsafe impl ::core::marker::Sync for CompositionCommitBatch {}
#[doc = "*Required features: `\"UI_Composition\"`*"]
#[repr(transparent)]
pub struct CompositionContainerShape(::windows::core::IUnknown);
impl CompositionContainerShape {
    pub fn PopulatePropertyInfo(
        &self,
        propertyname: &::windows::core::HSTRING,
        propertyinfo: &AnimationPropertyInfo,
    ) -> ::windows::core::Result<()> {
        let this = &::windows::core::Interface::cast::<IAnimationObject>(self)?;
        unsafe {
            (::windows::core::Vtable::vtable(this).PopulatePropertyInfo)(
                ::windows::core::Vtable::as_raw(this),
                ::core::mem::transmute_copy(propertyname),
                ::core::mem::transmute_copy(propertyinfo),
            )
            .ok()
        }
    }
    pub fn Close(&self) -> ::windows::core::Result<()> {
        let this = &::windows::core::Interface::cast::<::windows::Foundation::IClosable>(self)?;
        unsafe {
            (::windows::core::Vtable::vtable(this).Close)(::windows::core::Vtable::as_raw(this))
                .ok()
        }
    }
    pub fn Shapes(&self) -> ::windows::core::Result<CompositionShapeCollection> {
        let this = self;
        unsafe {
            let mut result__ = ::core::mem::MaybeUninit::zeroed();
            (::windows::core::Vtable::vtable(this).Shapes)(
                ::windows::core::Vtable::as_raw(this),
                result__.as_mut_ptr(),
            )
            .from_abi::<CompositionShapeCollection>(result__)
        }
    }
    pub fn Compositor(&self) -> ::windows::core::Result<Compositor> {
        let this = &::windows::core::Interface::cast::<ICompositionObject>(self)?;
        unsafe {
            let mut result__ = ::core::mem::MaybeUninit::zeroed();
            (::windows::core::Vtable::vtable(this).Compositor)(
                ::windows::core::Vtable::as_raw(this),
                result__.as_mut_ptr(),
            )
            .from_abi::<Compositor>(result__)
        }
    }
    pub fn Properties(&self) -> ::windows::core::Result<CompositionPropertySet> {
        let this = &::windows::core::Interface::cast::<ICompositionObject>(self)?;
        unsafe {
            let mut result__ = ::core::mem::MaybeUninit::zeroed();
            (::windows::core::Vtable::vtable(this).Properties)(
                ::windows::core::Vtable::as_raw(this),
                result__.as_mut_ptr(),
            )
            .from_abi::<CompositionPropertySet>(result__)
        }
    }
    pub fn StartAnimation<'a, P0>(
        &self,
        propertyname: &::windows::core::HSTRING,
        animation: P0,
    ) -> ::windows::core::Result<()>
    where
        P0: ::std::convert::Into<::windows::core::InParam<'a, CompositionAnimation>>,
    {
        let this = &::windows::core::Interface::cast::<ICompositionObject>(self)?;
        unsafe {
            (::windows::core::Vtable::vtable(this).StartAnimation)(
                ::windows::core::Vtable::as_raw(this),
                ::core::mem::transmute_copy(propertyname),
                animation.into().abi(),
            )
            .ok()
        }
    }
    pub fn StopAnimation(
        &self,
        propertyname: &::windows::core::HSTRING,
    ) -> ::windows::core::Result<()> {
        let this = &::windows::core::Interface::cast::<ICompositionObject>(self)?;
        unsafe {
            (::windows::core::Vtable::vtable(this).StopAnimation)(
                ::windows::core::Vtable::as_raw(this),
                ::core::mem::transmute_copy(propertyname),
            )
            .ok()
        }
    }
    pub fn Comment(&self) -> ::windows::core::Result<::windows::core::HSTRING> {
        let this = &::windows::core::Interface::cast::<ICompositionObject2>(self)?;
        unsafe {
            let mut result__ = ::core::mem::MaybeUninit::zeroed();
            (::windows::core::Vtable::vtable(this).Comment)(
                ::windows::core::Vtable::as_raw(this),
                result__.as_mut_ptr(),
            )
            .from_abi::<::windows::core::HSTRING>(result__)
        }
    }
    pub fn SetComment(&self, value: &::windows::core::HSTRING) -> ::windows::core::Result<()> {
        let this = &::windows::core::Interface::cast::<ICompositionObject2>(self)?;
        unsafe {
            (::windows::core::Vtable::vtable(this).SetComment)(
                ::windows::core::Vtable::as_raw(this),
                ::core::mem::transmute_copy(value),
            )
            .ok()
        }
    }
    pub fn ImplicitAnimations(&self) -> ::windows::core::Result<ImplicitAnimationCollection> {
        let this = &::windows::core::Interface::cast::<ICompositionObject2>(self)?;
        unsafe {
            let mut result__ = ::core::mem::MaybeUninit::zeroed();
            (::windows::core::Vtable::vtable(this).ImplicitAnimations)(
                ::windows::core::Vtable::as_raw(this),
                result__.as_mut_ptr(),
            )
            .from_abi::<ImplicitAnimationCollection>(result__)
        }
    }
    pub fn SetImplicitAnimations(
        &self,
        value: &ImplicitAnimationCollection,
    ) -> ::windows::core::Result<()> {
        let this = &::windows::core::Interface::cast::<ICompositionObject2>(self)?;
        unsafe {
            (::windows::core::Vtable::vtable(this).SetImplicitAnimations)(
                ::windows::core::Vtable::as_raw(this),
                ::core::mem::transmute_copy(value),
            )
            .ok()
        }
    }
    pub fn StartAnimationGroup<'a, P0, E0>(&self, value: P0) -> ::windows::core::Result<()>
    where
        P0: ::std::convert::TryInto<
            ::windows::core::InParam<'a, ICompositionAnimationBase>,
            Error = E0,
        >,
        E0: ::std::convert::Into<::windows::core::Error>,
    {
        let this = &::windows::core::Interface::cast::<ICompositionObject2>(self)?;
        unsafe {
            (::windows::core::Vtable::vtable(this).StartAnimationGroup)(
                ::windows::core::Vtable::as_raw(this),
                value.try_into().map_err(|e| e.into())?.abi(),
            )
            .ok()
        }
    }
    pub fn StopAnimationGroup<'a, P0, E0>(&self, value: P0) -> ::windows::core::Result<()>
    where
        P0: ::std::convert::TryInto<
            ::windows::core::InParam<'a, ICompositionAnimationBase>,
            Error = E0,
        >,
        E0: ::std::convert::Into<::windows::core::Error>,
    {
        let this = &::windows::core::Interface::cast::<ICompositionObject2>(self)?;
        unsafe {
            (::windows::core::Vtable::vtable(this).StopAnimationGroup)(
                ::windows::core::Vtable::as_raw(this),
                value.try_into().map_err(|e| e.into())?.abi(),
            )
            .ok()
        }
    }
    #[doc = "*Required features: `\"UI_Dispatching\"`*"]
    #[cfg(feature = "UI_Dispatching")]
    pub fn DispatcherQueue(&self) -> ::windows::core::Result<super::Dispatching::DispatcherQueue> {
        let this = &::windows::core::Interface::cast::<ICompositionObject3>(self)?;
        unsafe {
            let mut result__ = ::core::mem::MaybeUninit::zeroed();
            (::windows::core::Vtable::vtable(this).DispatcherQueue)(
                ::windows::core::Vtable::as_raw(this),
                result__.as_mut_ptr(),
            )
            .from_abi::<super::Dispatching::DispatcherQueue>(result__)
        }
    }
    pub fn TryGetAnimationController(
        &self,
        propertyname: &::windows::core::HSTRING,
    ) -> ::windows::core::Result<AnimationController> {
        let this = &::windows::core::Interface::cast::<ICompositionObject4>(self)?;
        unsafe {
            let mut result__ = ::core::mem::MaybeUninit::zeroed();
            (::windows::core::Vtable::vtable(this).TryGetAnimationController)(
                ::windows::core::Vtable::as_raw(this),
                ::core::mem::transmute_copy(propertyname),
                result__.as_mut_ptr(),
            )
            .from_abi::<AnimationController>(result__)
        }
    }
    pub fn StartAnimationWithController<'a, P0>(
        &self,
        propertyname: &::windows::core::HSTRING,
        animation: P0,
        animationcontroller: &AnimationController,
    ) -> ::windows::core::Result<()>
    where
        P0: ::std::convert::Into<::windows::core::InParam<'a, CompositionAnimation>>,
    {
        let this = &::windows::core::Interface::cast::<ICompositionObject5>(self)?;
        unsafe {
            (::windows::core::Vtable::vtable(this).StartAnimationWithController)(
                ::windows::core::Vtable::as_raw(this),
                ::core::mem::transmute_copy(propertyname),
                animation.into().abi(),
                ::core::mem::transmute_copy(animationcontroller),
            )
            .ok()
        }
    }
    pub fn CenterPoint(&self) -> ::windows::core::Result<::windows::Foundation::Numerics::Vector2> {
        let this = &::windows::core::Interface::cast::<ICompositionShape>(self)?;
        unsafe {
            let mut result__ = ::core::mem::MaybeUninit::zeroed();
            (::windows::core::Vtable::vtable(this).CenterPoint)(
                ::windows::core::Vtable::as_raw(this),
                result__.as_mut_ptr(),
            )
            .from_abi::<::windows::Foundation::Numerics::Vector2>(result__)
        }
    }
    pub fn SetCenterPoint(
        &self,
        value: ::windows::Foundation::Numerics::Vector2,
    ) -> ::windows::core::Result<()> {
        let this = &::windows::core::Interface::cast::<ICompositionShape>(self)?;
        unsafe {
            (::windows::core::Vtable::vtable(this).SetCenterPoint)(
                ::windows::core::Vtable::as_raw(this),
                value,
            )
            .ok()
        }
    }
    pub fn Offset(&self) -> ::windows::core::Result<::windows::Foundation::Numerics::Vector2> {
        let this = &::windows::core::Interface::cast::<ICompositionShape>(self)?;
        unsafe {
            let mut result__ = ::core::mem::MaybeUninit::zeroed();
            (::windows::core::Vtable::vtable(this).Offset)(
                ::windows::core::Vtable::as_raw(this),
                result__.as_mut_ptr(),
            )
            .from_abi::<::windows::Foundation::Numerics::Vector2>(result__)
        }
    }
    pub fn SetOffset(
        &self,
        value: ::windows::Foundation::Numerics::Vector2,
    ) -> ::windows::core::Result<()> {
        let this = &::windows::core::Interface::cast::<ICompositionShape>(self)?;
        unsafe {
            (::windows::core::Vtable::vtable(this).SetOffset)(
                ::windows::core::Vtable::as_raw(this),
                value,
            )
            .ok()
        }
    }
    pub fn RotationAngle(&self) -> ::windows::core::Result<f32> {
        let this = &::windows::core::Interface::cast::<ICompositionShape>(self)?;
        unsafe {
            let mut result__ = ::core::mem::MaybeUninit::zeroed();
            (::windows::core::Vtable::vtable(this).RotationAngle)(
                ::windows::core::Vtable::as_raw(this),
                result__.as_mut_ptr(),
            )
            .from_abi::<f32>(result__)
        }
    }
    pub fn SetRotationAngle(&self, value: f32) -> ::windows::core::Result<()> {
        let this = &::windows::core::Interface::cast::<ICompositionShape>(self)?;
        unsafe {
            (::windows::core::Vtable::vtable(this).SetRotationAngle)(
                ::windows::core::Vtable::as_raw(this),
                value,
            )
            .ok()
        }
    }
    pub fn RotationAngleInDegrees(&self) -> ::windows::core::Result<f32> {
        let this = &::windows::core::Interface::cast::<ICompositionShape>(self)?;
        unsafe {
            let mut result__ = ::core::mem::MaybeUninit::zeroed();
            (::windows::core::Vtable::vtable(this).RotationAngleInDegrees)(
                ::windows::core::Vtable::as_raw(this),
                result__.as_mut_ptr(),
            )
            .from_abi::<f32>(result__)
        }
    }
    pub fn SetRotationAngleInDegrees(&self, value: f32) -> ::windows::core::Result<()> {
        let this = &::windows::core::Interface::cast::<ICompositionShape>(self)?;
        unsafe {
            (::windows::core::Vtable::vtable(this).SetRotationAngleInDegrees)(
                ::windows::core::Vtable::as_raw(this),
                value,
            )
            .ok()
        }
    }
    pub fn Scale(&self) -> ::windows::core::Result<::windows::Foundation::Numerics::Vector2> {
        let this = &::windows::core::Interface::cast::<ICompositionShape>(self)?;
        unsafe {
            let mut result__ = ::core::mem::MaybeUninit::zeroed();
            (::windows::core::Vtable::vtable(this).Scale)(
                ::windows::core::Vtable::as_raw(this),
                result__.as_mut_ptr(),
            )
            .from_abi::<::windows::Foundation::Numerics::Vector2>(result__)
        }
    }
    pub fn SetScale(
        &self,
        value: ::windows::Foundation::Numerics::Vector2,
    ) -> ::windows::core::Result<()> {
        let this = &::windows::core::Interface::cast::<ICompositionShape>(self)?;
        unsafe {
            (::windows::core::Vtable::vtable(this).SetScale)(
                ::windows::core::Vtable::as_raw(this),
                value,
            )
            .ok()
        }
    }
    pub fn TransformMatrix(
        &self,
    ) -> ::windows::core::Result<::windows::Foundation::Numerics::Matrix3x2> {
        let this = &::windows::core::Interface::cast::<ICompositionShape>(self)?;
        unsafe {
            let mut result__ = ::core::mem::MaybeUninit::zeroed();
            (::windows::core::Vtable::vtable(this).TransformMatrix)(
                ::windows::core::Vtable::as_raw(this),
                result__.as_mut_ptr(),
            )
            .from_abi::<::windows::Foundation::Numerics::Matrix3x2>(result__)
        }
    }
    pub fn SetTransformMatrix(
        &self,
        value: ::windows::Foundation::Numerics::Matrix3x2,
    ) -> ::windows::core::Result<()> {
        let this = &::windows::core::Interface::cast::<ICompositionShape>(self)?;
        unsafe {
            (::windows::core::Vtable::vtable(this).SetTransformMatrix)(
                ::windows::core::Vtable::as_raw(this),
                value,
            )
            .ok()
        }
    }
}
impl ::core::clone::Clone for CompositionContainerShape {
    fn clone(&self) -> Self {
        Self(self.0.clone())
    }
}
impl ::core::cmp::PartialEq for CompositionContainerShape {
    fn eq(&self, other: &Self) -> bool {
        self.0 == other.0
    }
}
impl ::core::cmp::Eq for CompositionContainerShape {}
impl ::core::fmt::Debug for CompositionContainerShape {
    fn fmt(&self, f: &mut ::core::fmt::Formatter<'_>) -> ::core::fmt::Result {
        f.debug_tuple("CompositionContainerShape").field(&self.0).finish()
    }
}
unsafe impl ::windows::core::RuntimeType for CompositionContainerShape {
    const SIGNATURE : ::windows::core::ConstBuffer = ::windows::core::ConstBuffer::from_slice ( b"rc(Microsoft.UI.Composition.CompositionContainerShape;{064aabd5-2dab-52d3-824b-c72456540f29})" ) ;
    type DefaultType = ::core::option::Option<Self>;
    fn from_default(from: &Self::DefaultType) -> ::windows::core::Result<Self> {
        from.as_ref().cloned().ok_or(::windows::core::Error::OK)
    }
}
unsafe impl ::windows::core::Vtable for CompositionContainerShape {
    type Vtable = ICompositionContainerShape_Vtbl;
}
unsafe impl ::windows::core::Interface for CompositionContainerShape {
    const IID: ::windows::core::GUID =
        <ICompositionContainerShape as ::windows::core::Interface>::IID;
}
impl ::windows::core::RuntimeName for CompositionContainerShape {
    const NAME: &'static str = "Microsoft.UI.Composition.CompositionContainerShape";
}
::windows::core::interface_hierarchy!(
    CompositionContainerShape,
    ::windows::core::IUnknown,
    ::windows::core::IInspectable
);
impl ::core::convert::TryFrom<CompositionContainerShape> for IAnimationObject {
    type Error = ::windows::core::Error;
    fn try_from(value: CompositionContainerShape) -> ::windows::core::Result<Self> {
        ::core::convert::TryFrom::try_from(&value)
    }
}
impl ::core::convert::TryFrom<&CompositionContainerShape> for IAnimationObject {
    type Error = ::windows::core::Error;
    fn try_from(value: &CompositionContainerShape) -> ::windows::core::Result<Self> {
        ::windows::core::Interface::cast(value)
    }
}
impl<'a> ::core::convert::TryFrom<&CompositionContainerShape>
    for ::windows::core::InParam<'a, IAnimationObject>
{
    type Error = ::windows::core::Error;
    fn try_from(value: &CompositionContainerShape) -> ::windows::core::Result<Self> {
        let item = ::std::convert::TryInto::try_into(value)?;
        Ok(::windows::core::InParam::owned(item))
    }
}
impl ::core::convert::TryFrom<CompositionContainerShape> for ::windows::Foundation::IClosable {
    type Error = ::windows::core::Error;
    fn try_from(value: CompositionContainerShape) -> ::windows::core::Result<Self> {
        ::core::convert::TryFrom::try_from(&value)
    }
}
impl ::core::convert::TryFrom<&CompositionContainerShape> for ::windows::Foundation::IClosable {
    type Error = ::windows::core::Error;
    fn try_from(value: &CompositionContainerShape) -> ::windows::core::Result<Self> {
        ::windows::core::Interface::cast(value)
    }
}
impl<'a> ::core::convert::TryFrom<&CompositionContainerShape>
    for ::windows::core::InParam<'a, ::windows::Foundation::IClosable>
{
    type Error = ::windows::core::Error;
    fn try_from(value: &CompositionContainerShape) -> ::windows::core::Result<Self> {
        let item = ::std::convert::TryInto::try_into(value)?;
        Ok(::windows::core::InParam::owned(item))
    }
}
impl ::core::convert::From<CompositionContainerShape> for CompositionShape {
    fn from(value: CompositionContainerShape) -> Self {
        ::core::convert::From::from(&value)
    }
}
impl ::core::convert::From<&CompositionContainerShape> for CompositionShape {
    fn from(value: &CompositionContainerShape) -> Self {
        ::windows::core::Interface::cast(value).unwrap()
    }
}
impl<'a> ::core::convert::From<&CompositionContainerShape>
    for ::windows::core::InParam<'a, CompositionShape>
{
    fn from(value: &CompositionContainerShape) -> Self {
        ::windows::core::InParam::owned(value.into())
    }
}
impl ::core::convert::From<CompositionContainerShape> for CompositionObject {
    fn from(value: CompositionContainerShape) -> Self {
        ::core::convert::From::from(&value)
    }
}
impl ::core::convert::From<&CompositionContainerShape> for CompositionObject {
    fn from(value: &CompositionContainerShape) -> Self {
        ::windows::core::Interface::cast(value).unwrap()
    }
}
impl<'a> ::core::convert::From<&CompositionContainerShape>
    for ::windows::core::InParam<'a, CompositionObject>
{
    fn from(value: &CompositionContainerShape) -> Self {
        ::windows::core::InParam::owned(value.into())
    }
}
unsafe impl ::core::marker::Send for CompositionContainerShape {}
unsafe impl ::core::marker::Sync for CompositionContainerShape {}
#[doc = "*Required features: `\"UI_Composition\"`*"]
#[repr(transparent)]
pub struct CompositionDrawingSurface(::windows::core::IUnknown);
impl CompositionDrawingSurface {
    pub fn PopulatePropertyInfo(
        &self,
        propertyname: &::windows::core::HSTRING,
        propertyinfo: &AnimationPropertyInfo,
    ) -> ::windows::core::Result<()> {
        let this = &::windows::core::Interface::cast::<IAnimationObject>(self)?;
        unsafe {
            (::windows::core::Vtable::vtable(this).PopulatePropertyInfo)(
                ::windows::core::Vtable::as_raw(this),
                ::core::mem::transmute_copy(propertyname),
                ::core::mem::transmute_copy(propertyinfo),
            )
            .ok()
        }
    }
    pub fn Close(&self) -> ::windows::core::Result<()> {
        let this = &::windows::core::Interface::cast::<::windows::Foundation::IClosable>(self)?;
        unsafe {
            (::windows::core::Vtable::vtable(this).Close)(::windows::core::Vtable::as_raw(this))
                .ok()
        }
    }
    #[doc = "*Required features: `\"Graphics_DirectX\"`*"]
    #[cfg(feature = "Graphics_DirectX")]
    pub fn AlphaMode(
        &self,
    ) -> ::windows::core::Result<super::super::Graphics::DirectX::DirectXAlphaMode> {
        let this = self;
        unsafe {
            let mut result__ = ::core::mem::MaybeUninit::zeroed();
            (::windows::core::Vtable::vtable(this).AlphaMode)(
                ::windows::core::Vtable::as_raw(this),
                result__.as_mut_ptr(),
            )
            .from_abi::<super::super::Graphics::DirectX::DirectXAlphaMode>(result__)
        }
    }
    #[doc = "*Required features: `\"Graphics_DirectX\"`*"]
    #[cfg(feature = "Graphics_DirectX")]
    pub fn PixelFormat(
        &self,
    ) -> ::windows::core::Result<super::super::Graphics::DirectX::DirectXPixelFormat> {
        let this = self;
        unsafe {
            let mut result__ = ::core::mem::MaybeUninit::zeroed();
            (::windows::core::Vtable::vtable(this).PixelFormat)(
                ::windows::core::Vtable::as_raw(this),
                result__.as_mut_ptr(),
            )
            .from_abi::<super::super::Graphics::DirectX::DirectXPixelFormat>(result__)
        }
    }
    pub fn Size(&self) -> ::windows::core::Result<::windows::Foundation::Size> {
        let this = self;
        unsafe {
            let mut result__ = ::core::mem::MaybeUninit::zeroed();
            (::windows::core::Vtable::vtable(this).Size)(
                ::windows::core::Vtable::as_raw(this),
                result__.as_mut_ptr(),
            )
            .from_abi::<::windows::Foundation::Size>(result__)
        }
    }
    pub fn SizeInt32(&self) -> ::windows::core::Result<::windows::Graphics::SizeInt32> {
        let this = &::windows::core::Interface::cast::<ICompositionDrawingSurface2>(self)?;
        unsafe {
            let mut result__ = ::core::mem::MaybeUninit::zeroed();
            (::windows::core::Vtable::vtable(this).SizeInt32)(
                ::windows::core::Vtable::as_raw(this),
                result__.as_mut_ptr(),
            )
            .from_abi::<::windows::Graphics::SizeInt32>(result__)
        }
    }
    pub fn Resize(
        &self,
        sizepixels: ::windows::Graphics::SizeInt32,
    ) -> ::windows::core::Result<()> {
        let this = &::windows::core::Interface::cast::<ICompositionDrawingSurface2>(self)?;
        unsafe {
            (::windows::core::Vtable::vtable(this).Resize)(
                ::windows::core::Vtable::as_raw(this),
                sizepixels,
            )
            .ok()
        }
    }
    pub fn Scroll(&self, offset: ::windows::Graphics::PointInt32) -> ::windows::core::Result<()> {
        let this = &::windows::core::Interface::cast::<ICompositionDrawingSurface2>(self)?;
        unsafe {
            (::windows::core::Vtable::vtable(this).Scroll)(
                ::windows::core::Vtable::as_raw(this),
                offset,
            )
            .ok()
        }
    }
    pub fn ScrollRect(
        &self,
        offset: ::windows::Graphics::PointInt32,
        scrollrect: ::windows::Graphics::RectInt32,
    ) -> ::windows::core::Result<()> {
        let this = &::windows::core::Interface::cast::<ICompositionDrawingSurface2>(self)?;
        unsafe {
            (::windows::core::Vtable::vtable(this).ScrollRect)(
                ::windows::core::Vtable::as_raw(this),
                offset,
                scrollrect,
            )
            .ok()
        }
    }
    pub fn ScrollWithClip(
        &self,
        offset: ::windows::Graphics::PointInt32,
        cliprect: ::windows::Graphics::RectInt32,
    ) -> ::windows::core::Result<()> {
        let this = &::windows::core::Interface::cast::<ICompositionDrawingSurface2>(self)?;
        unsafe {
            (::windows::core::Vtable::vtable(this).ScrollWithClip)(
                ::windows::core::Vtable::as_raw(this),
                offset,
                cliprect,
            )
            .ok()
        }
    }
    pub fn ScrollRectWithClip(
        &self,
        offset: ::windows::Graphics::PointInt32,
        cliprect: ::windows::Graphics::RectInt32,
        scrollrect: ::windows::Graphics::RectInt32,
    ) -> ::windows::core::Result<()> {
        let this = &::windows::core::Interface::cast::<ICompositionDrawingSurface2>(self)?;
        unsafe {
            (::windows::core::Vtable::vtable(this).ScrollRectWithClip)(
                ::windows::core::Vtable::as_raw(this),
                offset,
                cliprect,
                scrollrect,
            )
            .ok()
        }
    }
    pub fn Compositor(&self) -> ::windows::core::Result<Compositor> {
        let this = &::windows::core::Interface::cast::<ICompositionObject>(self)?;
        unsafe {
            let mut result__ = ::core::mem::MaybeUninit::zeroed();
            (::windows::core::Vtable::vtable(this).Compositor)(
                ::windows::core::Vtable::as_raw(this),
                result__.as_mut_ptr(),
            )
            .from_abi::<Compositor>(result__)
        }
    }
    pub fn Properties(&self) -> ::windows::core::Result<CompositionPropertySet> {
        let this = &::windows::core::Interface::cast::<ICompositionObject>(self)?;
        unsafe {
            let mut result__ = ::core::mem::MaybeUninit::zeroed();
            (::windows::core::Vtable::vtable(this).Properties)(
                ::windows::core::Vtable::as_raw(this),
                result__.as_mut_ptr(),
            )
            .from_abi::<CompositionPropertySet>(result__)
        }
    }
    pub fn StartAnimation<'a, P0>(
        &self,
        propertyname: &::windows::core::HSTRING,
        animation: P0,
    ) -> ::windows::core::Result<()>
    where
        P0: ::std::convert::Into<::windows::core::InParam<'a, CompositionAnimation>>,
    {
        let this = &::windows::core::Interface::cast::<ICompositionObject>(self)?;
        unsafe {
            (::windows::core::Vtable::vtable(this).StartAnimation)(
                ::windows::core::Vtable::as_raw(this),
                ::core::mem::transmute_copy(propertyname),
                animation.into().abi(),
            )
            .ok()
        }
    }
    pub fn StopAnimation(
        &self,
        propertyname: &::windows::core::HSTRING,
    ) -> ::windows::core::Result<()> {
        let this = &::windows::core::Interface::cast::<ICompositionObject>(self)?;
        unsafe {
            (::windows::core::Vtable::vtable(this).StopAnimation)(
                ::windows::core::Vtable::as_raw(this),
                ::core::mem::transmute_copy(propertyname),
            )
            .ok()
        }
    }
    pub fn Comment(&self) -> ::windows::core::Result<::windows::core::HSTRING> {
        let this = &::windows::core::Interface::cast::<ICompositionObject2>(self)?;
        unsafe {
            let mut result__ = ::core::mem::MaybeUninit::zeroed();
            (::windows::core::Vtable::vtable(this).Comment)(
                ::windows::core::Vtable::as_raw(this),
                result__.as_mut_ptr(),
            )
            .from_abi::<::windows::core::HSTRING>(result__)
        }
    }
    pub fn SetComment(&self, value: &::windows::core::HSTRING) -> ::windows::core::Result<()> {
        let this = &::windows::core::Interface::cast::<ICompositionObject2>(self)?;
        unsafe {
            (::windows::core::Vtable::vtable(this).SetComment)(
                ::windows::core::Vtable::as_raw(this),
                ::core::mem::transmute_copy(value),
            )
            .ok()
        }
    }
    pub fn ImplicitAnimations(&self) -> ::windows::core::Result<ImplicitAnimationCollection> {
        let this = &::windows::core::Interface::cast::<ICompositionObject2>(self)?;
        unsafe {
            let mut result__ = ::core::mem::MaybeUninit::zeroed();
            (::windows::core::Vtable::vtable(this).ImplicitAnimations)(
                ::windows::core::Vtable::as_raw(this),
                result__.as_mut_ptr(),
            )
            .from_abi::<ImplicitAnimationCollection>(result__)
        }
    }
    pub fn SetImplicitAnimations(
        &self,
        value: &ImplicitAnimationCollection,
    ) -> ::windows::core::Result<()> {
        let this = &::windows::core::Interface::cast::<ICompositionObject2>(self)?;
        unsafe {
            (::windows::core::Vtable::vtable(this).SetImplicitAnimations)(
                ::windows::core::Vtable::as_raw(this),
                ::core::mem::transmute_copy(value),
            )
            .ok()
        }
    }
    pub fn StartAnimationGroup<'a, P0, E0>(&self, value: P0) -> ::windows::core::Result<()>
    where
        P0: ::std::convert::TryInto<
            ::windows::core::InParam<'a, ICompositionAnimationBase>,
            Error = E0,
        >,
        E0: ::std::convert::Into<::windows::core::Error>,
    {
        let this = &::windows::core::Interface::cast::<ICompositionObject2>(self)?;
        unsafe {
            (::windows::core::Vtable::vtable(this).StartAnimationGroup)(
                ::windows::core::Vtable::as_raw(this),
                value.try_into().map_err(|e| e.into())?.abi(),
            )
            .ok()
        }
    }
    pub fn StopAnimationGroup<'a, P0, E0>(&self, value: P0) -> ::windows::core::Result<()>
    where
        P0: ::std::convert::TryInto<
            ::windows::core::InParam<'a, ICompositionAnimationBase>,
            Error = E0,
        >,
        E0: ::std::convert::Into<::windows::core::Error>,
    {
        let this = &::windows::core::Interface::cast::<ICompositionObject2>(self)?;
        unsafe {
            (::windows::core::Vtable::vtable(this).StopAnimationGroup)(
                ::windows::core::Vtable::as_raw(this),
                value.try_into().map_err(|e| e.into())?.abi(),
            )
            .ok()
        }
    }
    #[doc = "*Required features: `\"UI_Dispatching\"`*"]
    #[cfg(feature = "UI_Dispatching")]
    pub fn DispatcherQueue(&self) -> ::windows::core::Result<super::Dispatching::DispatcherQueue> {
        let this = &::windows::core::Interface::cast::<ICompositionObject3>(self)?;
        unsafe {
            let mut result__ = ::core::mem::MaybeUninit::zeroed();
            (::windows::core::Vtable::vtable(this).DispatcherQueue)(
                ::windows::core::Vtable::as_raw(this),
                result__.as_mut_ptr(),
            )
            .from_abi::<super::Dispatching::DispatcherQueue>(result__)
        }
    }
    pub fn TryGetAnimationController(
        &self,
        propertyname: &::windows::core::HSTRING,
    ) -> ::windows::core::Result<AnimationController> {
        let this = &::windows::core::Interface::cast::<ICompositionObject4>(self)?;
        unsafe {
            let mut result__ = ::core::mem::MaybeUninit::zeroed();
            (::windows::core::Vtable::vtable(this).TryGetAnimationController)(
                ::windows::core::Vtable::as_raw(this),
                ::core::mem::transmute_copy(propertyname),
                result__.as_mut_ptr(),
            )
            .from_abi::<AnimationController>(result__)
        }
    }
    pub fn StartAnimationWithController<'a, P0>(
        &self,
        propertyname: &::windows::core::HSTRING,
        animation: P0,
        animationcontroller: &AnimationController,
    ) -> ::windows::core::Result<()>
    where
        P0: ::std::convert::Into<::windows::core::InParam<'a, CompositionAnimation>>,
    {
        let this = &::windows::core::Interface::cast::<ICompositionObject5>(self)?;
        unsafe {
            (::windows::core::Vtable::vtable(this).StartAnimationWithController)(
                ::windows::core::Vtable::as_raw(this),
                ::core::mem::transmute_copy(propertyname),
                animation.into().abi(),
                ::core::mem::transmute_copy(animationcontroller),
            )
            .ok()
        }
    }
}
impl ::core::clone::Clone for CompositionDrawingSurface {
    fn clone(&self) -> Self {
        Self(self.0.clone())
    }
}
impl ::core::cmp::PartialEq for CompositionDrawingSurface {
    fn eq(&self, other: &Self) -> bool {
        self.0 == other.0
    }
}
impl ::core::cmp::Eq for CompositionDrawingSurface {}
impl ::core::fmt::Debug for CompositionDrawingSurface {
    fn fmt(&self, f: &mut ::core::fmt::Formatter<'_>) -> ::core::fmt::Result {
        f.debug_tuple("CompositionDrawingSurface").field(&self.0).finish()
    }
}
unsafe impl ::windows::core::RuntimeType for CompositionDrawingSurface {
    const SIGNATURE : ::windows::core::ConstBuffer = ::windows::core::ConstBuffer::from_slice ( b"rc(Microsoft.UI.Composition.CompositionDrawingSurface;{216cab97-a2ee-5a29-ad6b-0bc2df4a1504})" ) ;
    type DefaultType = ::core::option::Option<Self>;
    fn from_default(from: &Self::DefaultType) -> ::windows::core::Result<Self> {
        from.as_ref().cloned().ok_or(::windows::core::Error::OK)
    }
}
unsafe impl ::windows::core::Vtable for CompositionDrawingSurface {
    type Vtable = ICompositionDrawingSurface_Vtbl;
}
unsafe impl ::windows::core::Interface for CompositionDrawingSurface {
    const IID: ::windows::core::GUID =
        <ICompositionDrawingSurface as ::windows::core::Interface>::IID;
}
impl ::windows::core::RuntimeName for CompositionDrawingSurface {
    const NAME: &'static str = "Microsoft.UI.Composition.CompositionDrawingSurface";
}
::windows::core::interface_hierarchy!(
    CompositionDrawingSurface,
    ::windows::core::IUnknown,
    ::windows::core::IInspectable
);
impl ::core::convert::TryFrom<CompositionDrawingSurface> for IAnimationObject {
    type Error = ::windows::core::Error;
    fn try_from(value: CompositionDrawingSurface) -> ::windows::core::Result<Self> {
        ::core::convert::TryFrom::try_from(&value)
    }
}
impl ::core::convert::TryFrom<&CompositionDrawingSurface> for IAnimationObject {
    type Error = ::windows::core::Error;
    fn try_from(value: &CompositionDrawingSurface) -> ::windows::core::Result<Self> {
        ::windows::core::Interface::cast(value)
    }
}
impl<'a> ::core::convert::TryFrom<&CompositionDrawingSurface>
    for ::windows::core::InParam<'a, IAnimationObject>
{
    type Error = ::windows::core::Error;
    fn try_from(value: &CompositionDrawingSurface) -> ::windows::core::Result<Self> {
        let item = ::std::convert::TryInto::try_into(value)?;
        Ok(::windows::core::InParam::owned(item))
    }
}
impl ::core::convert::TryFrom<CompositionDrawingSurface> for ::windows::Foundation::IClosable {
    type Error = ::windows::core::Error;
    fn try_from(value: CompositionDrawingSurface) -> ::windows::core::Result<Self> {
        ::core::convert::TryFrom::try_from(&value)
    }
}
impl ::core::convert::TryFrom<&CompositionDrawingSurface> for ::windows::Foundation::IClosable {
    type Error = ::windows::core::Error;
    fn try_from(value: &CompositionDrawingSurface) -> ::windows::core::Result<Self> {
        ::windows::core::Interface::cast(value)
    }
}
impl<'a> ::core::convert::TryFrom<&CompositionDrawingSurface>
    for ::windows::core::InParam<'a, ::windows::Foundation::IClosable>
{
    type Error = ::windows::core::Error;
    fn try_from(value: &CompositionDrawingSurface) -> ::windows::core::Result<Self> {
        let item = ::std::convert::TryInto::try_into(value)?;
        Ok(::windows::core::InParam::owned(item))
    }
}
impl ::core::convert::TryFrom<CompositionDrawingSurface> for ICompositionSurface {
    type Error = ::windows::core::Error;
    fn try_from(value: CompositionDrawingSurface) -> ::windows::core::Result<Self> {
        ::core::convert::TryFrom::try_from(&value)
    }
}
impl ::core::convert::TryFrom<&CompositionDrawingSurface> for ICompositionSurface {
    type Error = ::windows::core::Error;
    fn try_from(value: &CompositionDrawingSurface) -> ::windows::core::Result<Self> {
        ::windows::core::Interface::cast(value)
    }
}
impl<'a> ::core::convert::TryFrom<&CompositionDrawingSurface>
    for ::windows::core::InParam<'a, ICompositionSurface>
{
    type Error = ::windows::core::Error;
    fn try_from(value: &CompositionDrawingSurface) -> ::windows::core::Result<Self> {
        let item = ::std::convert::TryInto::try_into(value)?;
        Ok(::windows::core::InParam::owned(item))
    }
}
impl ::core::convert::From<CompositionDrawingSurface> for CompositionObject {
    fn from(value: CompositionDrawingSurface) -> Self {
        ::core::convert::From::from(&value)
    }
}
impl ::core::convert::From<&CompositionDrawingSurface> for CompositionObject {
    fn from(value: &CompositionDrawingSurface) -> Self {
        ::windows::core::Interface::cast(value).unwrap()
    }
}
impl<'a> ::core::convert::From<&CompositionDrawingSurface>
    for ::windows::core::InParam<'a, CompositionObject>
{
    fn from(value: &CompositionDrawingSurface) -> Self {
        ::windows::core::InParam::owned(value.into())
    }
}
unsafe impl ::core::marker::Send for CompositionDrawingSurface {}
unsafe impl ::core::marker::Sync for CompositionDrawingSurface {}
#[doc = "*Required features: `\"UI_Composition\"`*"]
#[repr(transparent)]
pub struct CompositionEasingFunction(::windows::core::IUnknown);
impl CompositionEasingFunction {
    pub fn PopulatePropertyInfo(
        &self,
        propertyname: &::windows::core::HSTRING,
        propertyinfo: &AnimationPropertyInfo,
    ) -> ::windows::core::Result<()> {
        let this = &::windows::core::Interface::cast::<IAnimationObject>(self)?;
        unsafe {
            (::windows::core::Vtable::vtable(this).PopulatePropertyInfo)(
                ::windows::core::Vtable::as_raw(this),
                ::core::mem::transmute_copy(propertyname),
                ::core::mem::transmute_copy(propertyinfo),
            )
            .ok()
        }
    }
    pub fn Close(&self) -> ::windows::core::Result<()> {
        let this = &::windows::core::Interface::cast::<::windows::Foundation::IClosable>(self)?;
        unsafe {
            (::windows::core::Vtable::vtable(this).Close)(::windows::core::Vtable::as_raw(this))
                .ok()
        }
    }
    pub fn CreateCubicBezierEasingFunction(
        owner: &Compositor,
        controlpoint1: ::windows::Foundation::Numerics::Vector2,
        controlpoint2: ::windows::Foundation::Numerics::Vector2,
    ) -> ::windows::core::Result<CubicBezierEasingFunction> {
        Self::ICompositionEasingFunctionStatics(|this| unsafe {
            let mut result__ = ::core::mem::MaybeUninit::zeroed();
            (::windows::core::Vtable::vtable(this).CreateCubicBezierEasingFunction)(
                ::windows::core::Vtable::as_raw(this),
                ::core::mem::transmute_copy(owner),
                controlpoint1,
                controlpoint2,
                result__.as_mut_ptr(),
            )
            .from_abi::<CubicBezierEasingFunction>(result__)
        })
    }
    pub fn CreateLinearEasingFunction(
        owner: &Compositor,
    ) -> ::windows::core::Result<LinearEasingFunction> {
        Self::ICompositionEasingFunctionStatics(|this| unsafe {
            let mut result__ = ::core::mem::MaybeUninit::zeroed();
            (::windows::core::Vtable::vtable(this).CreateLinearEasingFunction)(
                ::windows::core::Vtable::as_raw(this),
                ::core::mem::transmute_copy(owner),
                result__.as_mut_ptr(),
            )
            .from_abi::<LinearEasingFunction>(result__)
        })
    }
    pub fn CreateStepEasingFunction(
        owner: &Compositor,
    ) -> ::windows::core::Result<StepEasingFunction> {
        Self::ICompositionEasingFunctionStatics(|this| unsafe {
            let mut result__ = ::core::mem::MaybeUninit::zeroed();
            (::windows::core::Vtable::vtable(this).CreateStepEasingFunction)(
                ::windows::core::Vtable::as_raw(this),
                ::core::mem::transmute_copy(owner),
                result__.as_mut_ptr(),
            )
            .from_abi::<StepEasingFunction>(result__)
        })
    }
    pub fn CreateStepEasingFunctionWithStepCount(
        owner: &Compositor,
        stepcount: i32,
    ) -> ::windows::core::Result<StepEasingFunction> {
        Self::ICompositionEasingFunctionStatics(|this| unsafe {
            let mut result__ = ::core::mem::MaybeUninit::zeroed();
            (::windows::core::Vtable::vtable(this).CreateStepEasingFunctionWithStepCount)(
                ::windows::core::Vtable::as_raw(this),
                ::core::mem::transmute_copy(owner),
                stepcount,
                result__.as_mut_ptr(),
            )
            .from_abi::<StepEasingFunction>(result__)
        })
    }
    pub fn CreateBackEasingFunction(
        owner: &Compositor,
        mode: CompositionEasingFunctionMode,
        amplitude: f32,
    ) -> ::windows::core::Result<BackEasingFunction> {
        Self::ICompositionEasingFunctionStatics(|this| unsafe {
            let mut result__ = ::core::mem::MaybeUninit::zeroed();
            (::windows::core::Vtable::vtable(this).CreateBackEasingFunction)(
                ::windows::core::Vtable::as_raw(this),
                ::core::mem::transmute_copy(owner),
                mode,
                amplitude,
                result__.as_mut_ptr(),
            )
            .from_abi::<BackEasingFunction>(result__)
        })
    }
    pub fn CreateBounceEasingFunction(
        owner: &Compositor,
        mode: CompositionEasingFunctionMode,
        bounces: i32,
        bounciness: f32,
    ) -> ::windows::core::Result<BounceEasingFunction> {
        Self::ICompositionEasingFunctionStatics(|this| unsafe {
            let mut result__ = ::core::mem::MaybeUninit::zeroed();
            (::windows::core::Vtable::vtable(this).CreateBounceEasingFunction)(
                ::windows::core::Vtable::as_raw(this),
                ::core::mem::transmute_copy(owner),
                mode,
                bounces,
                bounciness,
                result__.as_mut_ptr(),
            )
            .from_abi::<BounceEasingFunction>(result__)
        })
    }
    pub fn CreateCircleEasingFunction(
        owner: &Compositor,
        mode: CompositionEasingFunctionMode,
    ) -> ::windows::core::Result<CircleEasingFunction> {
        Self::ICompositionEasingFunctionStatics(|this| unsafe {
            let mut result__ = ::core::mem::MaybeUninit::zeroed();
            (::windows::core::Vtable::vtable(this).CreateCircleEasingFunction)(
                ::windows::core::Vtable::as_raw(this),
                ::core::mem::transmute_copy(owner),
                mode,
                result__.as_mut_ptr(),
            )
            .from_abi::<CircleEasingFunction>(result__)
        })
    }
    pub fn CreateElasticEasingFunction(
        owner: &Compositor,
        mode: CompositionEasingFunctionMode,
        oscillations: i32,
        springiness: f32,
    ) -> ::windows::core::Result<ElasticEasingFunction> {
        Self::ICompositionEasingFunctionStatics(|this| unsafe {
            let mut result__ = ::core::mem::MaybeUninit::zeroed();
            (::windows::core::Vtable::vtable(this).CreateElasticEasingFunction)(
                ::windows::core::Vtable::as_raw(this),
                ::core::mem::transmute_copy(owner),
                mode,
                oscillations,
                springiness,
                result__.as_mut_ptr(),
            )
            .from_abi::<ElasticEasingFunction>(result__)
        })
    }
    pub fn CreateExponentialEasingFunction(
        owner: &Compositor,
        mode: CompositionEasingFunctionMode,
        exponent: f32,
    ) -> ::windows::core::Result<ExponentialEasingFunction> {
        Self::ICompositionEasingFunctionStatics(|this| unsafe {
            let mut result__ = ::core::mem::MaybeUninit::zeroed();
            (::windows::core::Vtable::vtable(this).CreateExponentialEasingFunction)(
                ::windows::core::Vtable::as_raw(this),
                ::core::mem::transmute_copy(owner),
                mode,
                exponent,
                result__.as_mut_ptr(),
            )
            .from_abi::<ExponentialEasingFunction>(result__)
        })
    }
    pub fn CreatePowerEasingFunction(
        owner: &Compositor,
        mode: CompositionEasingFunctionMode,
        power: f32,
    ) -> ::windows::core::Result<PowerEasingFunction> {
        Self::ICompositionEasingFunctionStatics(|this| unsafe {
            let mut result__ = ::core::mem::MaybeUninit::zeroed();
            (::windows::core::Vtable::vtable(this).CreatePowerEasingFunction)(
                ::windows::core::Vtable::as_raw(this),
                ::core::mem::transmute_copy(owner),
                mode,
                power,
                result__.as_mut_ptr(),
            )
            .from_abi::<PowerEasingFunction>(result__)
        })
    }
    pub fn CreateSineEasingFunction(
        owner: &Compositor,
        mode: CompositionEasingFunctionMode,
    ) -> ::windows::core::Result<SineEasingFunction> {
        Self::ICompositionEasingFunctionStatics(|this| unsafe {
            let mut result__ = ::core::mem::MaybeUninit::zeroed();
            (::windows::core::Vtable::vtable(this).CreateSineEasingFunction)(
                ::windows::core::Vtable::as_raw(this),
                ::core::mem::transmute_copy(owner),
                mode,
                result__.as_mut_ptr(),
            )
            .from_abi::<SineEasingFunction>(result__)
        })
    }
    pub fn Compositor(&self) -> ::windows::core::Result<Compositor> {
        let this = &::windows::core::Interface::cast::<ICompositionObject>(self)?;
        unsafe {
            let mut result__ = ::core::mem::MaybeUninit::zeroed();
            (::windows::core::Vtable::vtable(this).Compositor)(
                ::windows::core::Vtable::as_raw(this),
                result__.as_mut_ptr(),
            )
            .from_abi::<Compositor>(result__)
        }
    }
    pub fn Properties(&self) -> ::windows::core::Result<CompositionPropertySet> {
        let this = &::windows::core::Interface::cast::<ICompositionObject>(self)?;
        unsafe {
            let mut result__ = ::core::mem::MaybeUninit::zeroed();
            (::windows::core::Vtable::vtable(this).Properties)(
                ::windows::core::Vtable::as_raw(this),
                result__.as_mut_ptr(),
            )
            .from_abi::<CompositionPropertySet>(result__)
        }
    }
    pub fn StartAnimation<'a, P0>(
        &self,
        propertyname: &::windows::core::HSTRING,
        animation: P0,
    ) -> ::windows::core::Result<()>
    where
        P0: ::std::convert::Into<::windows::core::InParam<'a, CompositionAnimation>>,
    {
        let this = &::windows::core::Interface::cast::<ICompositionObject>(self)?;
        unsafe {
            (::windows::core::Vtable::vtable(this).StartAnimation)(
                ::windows::core::Vtable::as_raw(this),
                ::core::mem::transmute_copy(propertyname),
                animation.into().abi(),
            )
            .ok()
        }
    }
    pub fn StopAnimation(
        &self,
        propertyname: &::windows::core::HSTRING,
    ) -> ::windows::core::Result<()> {
        let this = &::windows::core::Interface::cast::<ICompositionObject>(self)?;
        unsafe {
            (::windows::core::Vtable::vtable(this).StopAnimation)(
                ::windows::core::Vtable::as_raw(this),
                ::core::mem::transmute_copy(propertyname),
            )
            .ok()
        }
    }
    pub fn Comment(&self) -> ::windows::core::Result<::windows::core::HSTRING> {
        let this = &::windows::core::Interface::cast::<ICompositionObject2>(self)?;
        unsafe {
            let mut result__ = ::core::mem::MaybeUninit::zeroed();
            (::windows::core::Vtable::vtable(this).Comment)(
                ::windows::core::Vtable::as_raw(this),
                result__.as_mut_ptr(),
            )
            .from_abi::<::windows::core::HSTRING>(result__)
        }
    }
    pub fn SetComment(&self, value: &::windows::core::HSTRING) -> ::windows::core::Result<()> {
        let this = &::windows::core::Interface::cast::<ICompositionObject2>(self)?;
        unsafe {
            (::windows::core::Vtable::vtable(this).SetComment)(
                ::windows::core::Vtable::as_raw(this),
                ::core::mem::transmute_copy(value),
            )
            .ok()
        }
    }
    pub fn ImplicitAnimations(&self) -> ::windows::core::Result<ImplicitAnimationCollection> {
        let this = &::windows::core::Interface::cast::<ICompositionObject2>(self)?;
        unsafe {
            let mut result__ = ::core::mem::MaybeUninit::zeroed();
            (::windows::core::Vtable::vtable(this).ImplicitAnimations)(
                ::windows::core::Vtable::as_raw(this),
                result__.as_mut_ptr(),
            )
            .from_abi::<ImplicitAnimationCollection>(result__)
        }
    }
    pub fn SetImplicitAnimations(
        &self,
        value: &ImplicitAnimationCollection,
    ) -> ::windows::core::Result<()> {
        let this = &::windows::core::Interface::cast::<ICompositionObject2>(self)?;
        unsafe {
            (::windows::core::Vtable::vtable(this).SetImplicitAnimations)(
                ::windows::core::Vtable::as_raw(this),
                ::core::mem::transmute_copy(value),
            )
            .ok()
        }
    }
    pub fn StartAnimationGroup<'a, P0, E0>(&self, value: P0) -> ::windows::core::Result<()>
    where
        P0: ::std::convert::TryInto<
            ::windows::core::InParam<'a, ICompositionAnimationBase>,
            Error = E0,
        >,
        E0: ::std::convert::Into<::windows::core::Error>,
    {
        let this = &::windows::core::Interface::cast::<ICompositionObject2>(self)?;
        unsafe {
            (::windows::core::Vtable::vtable(this).StartAnimationGroup)(
                ::windows::core::Vtable::as_raw(this),
                value.try_into().map_err(|e| e.into())?.abi(),
            )
            .ok()
        }
    }
    pub fn StopAnimationGroup<'a, P0, E0>(&self, value: P0) -> ::windows::core::Result<()>
    where
        P0: ::std::convert::TryInto<
            ::windows::core::InParam<'a, ICompositionAnimationBase>,
            Error = E0,
        >,
        E0: ::std::convert::Into<::windows::core::Error>,
    {
        let this = &::windows::core::Interface::cast::<ICompositionObject2>(self)?;
        unsafe {
            (::windows::core::Vtable::vtable(this).StopAnimationGroup)(
                ::windows::core::Vtable::as_raw(this),
                value.try_into().map_err(|e| e.into())?.abi(),
            )
            .ok()
        }
    }
    #[doc = "*Required features: `\"UI_Dispatching\"`*"]
    #[cfg(feature = "UI_Dispatching")]
    pub fn DispatcherQueue(&self) -> ::windows::core::Result<super::Dispatching::DispatcherQueue> {
        let this = &::windows::core::Interface::cast::<ICompositionObject3>(self)?;
        unsafe {
            let mut result__ = ::core::mem::MaybeUninit::zeroed();
            (::windows::core::Vtable::vtable(this).DispatcherQueue)(
                ::windows::core::Vtable::as_raw(this),
                result__.as_mut_ptr(),
            )
            .from_abi::<super::Dispatching::DispatcherQueue>(result__)
        }
    }
    pub fn TryGetAnimationController(
        &self,
        propertyname: &::windows::core::HSTRING,
    ) -> ::windows::core::Result<AnimationController> {
        let this = &::windows::core::Interface::cast::<ICompositionObject4>(self)?;
        unsafe {
            let mut result__ = ::core::mem::MaybeUninit::zeroed();
            (::windows::core::Vtable::vtable(this).TryGetAnimationController)(
                ::windows::core::Vtable::as_raw(this),
                ::core::mem::transmute_copy(propertyname),
                result__.as_mut_ptr(),
            )
            .from_abi::<AnimationController>(result__)
        }
    }
    pub fn StartAnimationWithController<'a, P0>(
        &self,
        propertyname: &::windows::core::HSTRING,
        animation: P0,
        animationcontroller: &AnimationController,
    ) -> ::windows::core::Result<()>
    where
        P0: ::std::convert::Into<::windows::core::InParam<'a, CompositionAnimation>>,
    {
        let this = &::windows::core::Interface::cast::<ICompositionObject5>(self)?;
        unsafe {
            (::windows::core::Vtable::vtable(this).StartAnimationWithController)(
                ::windows::core::Vtable::as_raw(this),
                ::core::mem::transmute_copy(propertyname),
                animation.into().abi(),
                ::core::mem::transmute_copy(animationcontroller),
            )
            .ok()
        }
    }
    #[doc(hidden)]
    pub fn ICompositionEasingFunctionStatics<
        R,
        F: FnOnce(&ICompositionEasingFunctionStatics) -> ::windows::core::Result<R>,
    >(
        callback: F,
    ) -> ::windows::core::Result<R> {
        static SHARED: ::windows::core::FactoryCache<
            CompositionEasingFunction,
            ICompositionEasingFunctionStatics,
        > = ::windows::core::FactoryCache::new();
        SHARED.call(callback)
    }
}
impl ::core::clone::Clone for CompositionEasingFunction {
    fn clone(&self) -> Self {
        Self(self.0.clone())
    }
}
impl ::core::cmp::PartialEq for CompositionEasingFunction {
    fn eq(&self, other: &Self) -> bool {
        self.0 == other.0
    }
}
impl ::core::cmp::Eq for CompositionEasingFunction {}
impl ::core::fmt::Debug for CompositionEasingFunction {
    fn fmt(&self, f: &mut ::core::fmt::Formatter<'_>) -> ::core::fmt::Result {
        f.debug_tuple("CompositionEasingFunction").field(&self.0).finish()
    }
}
unsafe impl ::windows::core::RuntimeType for CompositionEasingFunction {
    const SIGNATURE : ::windows::core::ConstBuffer = ::windows::core::ConstBuffer::from_slice ( b"rc(Microsoft.UI.Composition.CompositionEasingFunction;{8e1ecd0d-57d8-5bc9-9bcd-e43d0dd733c4})" ) ;
    type DefaultType = ::core::option::Option<Self>;
    fn from_default(from: &Self::DefaultType) -> ::windows::core::Result<Self> {
        from.as_ref().cloned().ok_or(::windows::core::Error::OK)
    }
}
unsafe impl ::windows::core::Vtable for CompositionEasingFunction {
    type Vtable = ICompositionEasingFunction_Vtbl;
}
unsafe impl ::windows::core::Interface for CompositionEasingFunction {
    const IID: ::windows::core::GUID =
        <ICompositionEasingFunction as ::windows::core::Interface>::IID;
}
impl ::windows::core::RuntimeName for CompositionEasingFunction {
    const NAME: &'static str = "Microsoft.UI.Composition.CompositionEasingFunction";
}
::windows::core::interface_hierarchy!(
    CompositionEasingFunction,
    ::windows::core::IUnknown,
    ::windows::core::IInspectable
);
impl ::core::convert::TryFrom<CompositionEasingFunction> for IAnimationObject {
    type Error = ::windows::core::Error;
    fn try_from(value: CompositionEasingFunction) -> ::windows::core::Result<Self> {
        ::core::convert::TryFrom::try_from(&value)
    }
}
impl ::core::convert::TryFrom<&CompositionEasingFunction> for IAnimationObject {
    type Error = ::windows::core::Error;
    fn try_from(value: &CompositionEasingFunction) -> ::windows::core::Result<Self> {
        ::windows::core::Interface::cast(value)
    }
}
impl<'a> ::core::convert::TryFrom<&CompositionEasingFunction>
    for ::windows::core::InParam<'a, IAnimationObject>
{
    type Error = ::windows::core::Error;
    fn try_from(value: &CompositionEasingFunction) -> ::windows::core::Result<Self> {
        let item = ::std::convert::TryInto::try_into(value)?;
        Ok(::windows::core::InParam::owned(item))
    }
}
impl ::core::convert::TryFrom<CompositionEasingFunction> for ::windows::Foundation::IClosable {
    type Error = ::windows::core::Error;
    fn try_from(value: CompositionEasingFunction) -> ::windows::core::Result<Self> {
        ::core::convert::TryFrom::try_from(&value)
    }
}
impl ::core::convert::TryFrom<&CompositionEasingFunction> for ::windows::Foundation::IClosable {
    type Error = ::windows::core::Error;
    fn try_from(value: &CompositionEasingFunction) -> ::windows::core::Result<Self> {
        ::windows::core::Interface::cast(value)
    }
}
impl<'a> ::core::convert::TryFrom<&CompositionEasingFunction>
    for ::windows::core::InParam<'a, ::windows::Foundation::IClosable>
{
    type Error = ::windows::core::Error;
    fn try_from(value: &CompositionEasingFunction) -> ::windows::core::Result<Self> {
        let item = ::std::convert::TryInto::try_into(value)?;
        Ok(::windows::core::InParam::owned(item))
    }
}
impl ::core::convert::From<CompositionEasingFunction> for CompositionObject {
    fn from(value: CompositionEasingFunction) -> Self {
        ::core::convert::From::from(&value)
    }
}
impl ::core::convert::From<&CompositionEasingFunction> for CompositionObject {
    fn from(value: &CompositionEasingFunction) -> Self {
        ::windows::core::Interface::cast(value).unwrap()
    }
}
impl<'a> ::core::convert::From<&CompositionEasingFunction>
    for ::windows::core::InParam<'a, CompositionObject>
{
    fn from(value: &CompositionEasingFunction) -> Self {
        ::windows::core::InParam::owned(value.into())
    }
}
unsafe impl ::core::marker::Send for CompositionEasingFunction {}
unsafe impl ::core::marker::Sync for CompositionEasingFunction {}
#[doc = "*Required features: `\"UI_Composition\"`*"]
#[repr(transparent)]
pub struct CompositionEffectBrush(::windows::core::IUnknown);
impl CompositionEffectBrush {
    pub fn PopulatePropertyInfo(
        &self,
        propertyname: &::windows::core::HSTRING,
        propertyinfo: &AnimationPropertyInfo,
    ) -> ::windows::core::Result<()> {
        let this = &::windows::core::Interface::cast::<IAnimationObject>(self)?;
        unsafe {
            (::windows::core::Vtable::vtable(this).PopulatePropertyInfo)(
                ::windows::core::Vtable::as_raw(this),
                ::core::mem::transmute_copy(propertyname),
                ::core::mem::transmute_copy(propertyinfo),
            )
            .ok()
        }
    }
    pub fn Close(&self) -> ::windows::core::Result<()> {
        let this = &::windows::core::Interface::cast::<::windows::Foundation::IClosable>(self)?;
        unsafe {
            (::windows::core::Vtable::vtable(this).Close)(::windows::core::Vtable::as_raw(this))
                .ok()
        }
    }
    pub fn GetSourceParameter(
        &self,
        name: &::windows::core::HSTRING,
    ) -> ::windows::core::Result<CompositionBrush> {
        let this = self;
        unsafe {
            let mut result__ = ::core::mem::MaybeUninit::zeroed();
            (::windows::core::Vtable::vtable(this).GetSourceParameter)(
                ::windows::core::Vtable::as_raw(this),
                ::core::mem::transmute_copy(name),
                result__.as_mut_ptr(),
            )
            .from_abi::<CompositionBrush>(result__)
        }
    }
    pub fn SetSourceParameter<'a, P0>(
        &self,
        name: &::windows::core::HSTRING,
        source: P0,
    ) -> ::windows::core::Result<()>
    where
        P0: ::std::convert::Into<::windows::core::InParam<'a, CompositionBrush>>,
    {
        let this = self;
        unsafe {
            (::windows::core::Vtable::vtable(this).SetSourceParameter)(
                ::windows::core::Vtable::as_raw(this),
                ::core::mem::transmute_copy(name),
                source.into().abi(),
            )
            .ok()
        }
    }
    pub fn Compositor(&self) -> ::windows::core::Result<Compositor> {
        let this = &::windows::core::Interface::cast::<ICompositionObject>(self)?;
        unsafe {
            let mut result__ = ::core::mem::MaybeUninit::zeroed();
            (::windows::core::Vtable::vtable(this).Compositor)(
                ::windows::core::Vtable::as_raw(this),
                result__.as_mut_ptr(),
            )
            .from_abi::<Compositor>(result__)
        }
    }
    pub fn Properties(&self) -> ::windows::core::Result<CompositionPropertySet> {
        let this = &::windows::core::Interface::cast::<ICompositionObject>(self)?;
        unsafe {
            let mut result__ = ::core::mem::MaybeUninit::zeroed();
            (::windows::core::Vtable::vtable(this).Properties)(
                ::windows::core::Vtable::as_raw(this),
                result__.as_mut_ptr(),
            )
            .from_abi::<CompositionPropertySet>(result__)
        }
    }
    pub fn StartAnimation<'a, P0>(
        &self,
        propertyname: &::windows::core::HSTRING,
        animation: P0,
    ) -> ::windows::core::Result<()>
    where
        P0: ::std::convert::Into<::windows::core::InParam<'a, CompositionAnimation>>,
    {
        let this = &::windows::core::Interface::cast::<ICompositionObject>(self)?;
        unsafe {
            (::windows::core::Vtable::vtable(this).StartAnimation)(
                ::windows::core::Vtable::as_raw(this),
                ::core::mem::transmute_copy(propertyname),
                animation.into().abi(),
            )
            .ok()
        }
    }
    pub fn StopAnimation(
        &self,
        propertyname: &::windows::core::HSTRING,
    ) -> ::windows::core::Result<()> {
        let this = &::windows::core::Interface::cast::<ICompositionObject>(self)?;
        unsafe {
            (::windows::core::Vtable::vtable(this).StopAnimation)(
                ::windows::core::Vtable::as_raw(this),
                ::core::mem::transmute_copy(propertyname),
            )
            .ok()
        }
    }
    pub fn Comment(&self) -> ::windows::core::Result<::windows::core::HSTRING> {
        let this = &::windows::core::Interface::cast::<ICompositionObject2>(self)?;
        unsafe {
            let mut result__ = ::core::mem::MaybeUninit::zeroed();
            (::windows::core::Vtable::vtable(this).Comment)(
                ::windows::core::Vtable::as_raw(this),
                result__.as_mut_ptr(),
            )
            .from_abi::<::windows::core::HSTRING>(result__)
        }
    }
    pub fn SetComment(&self, value: &::windows::core::HSTRING) -> ::windows::core::Result<()> {
        let this = &::windows::core::Interface::cast::<ICompositionObject2>(self)?;
        unsafe {
            (::windows::core::Vtable::vtable(this).SetComment)(
                ::windows::core::Vtable::as_raw(this),
                ::core::mem::transmute_copy(value),
            )
            .ok()
        }
    }
    pub fn ImplicitAnimations(&self) -> ::windows::core::Result<ImplicitAnimationCollection> {
        let this = &::windows::core::Interface::cast::<ICompositionObject2>(self)?;
        unsafe {
            let mut result__ = ::core::mem::MaybeUninit::zeroed();
            (::windows::core::Vtable::vtable(this).ImplicitAnimations)(
                ::windows::core::Vtable::as_raw(this),
                result__.as_mut_ptr(),
            )
            .from_abi::<ImplicitAnimationCollection>(result__)
        }
    }
    pub fn SetImplicitAnimations(
        &self,
        value: &ImplicitAnimationCollection,
    ) -> ::windows::core::Result<()> {
        let this = &::windows::core::Interface::cast::<ICompositionObject2>(self)?;
        unsafe {
            (::windows::core::Vtable::vtable(this).SetImplicitAnimations)(
                ::windows::core::Vtable::as_raw(this),
                ::core::mem::transmute_copy(value),
            )
            .ok()
        }
    }
    pub fn StartAnimationGroup<'a, P0, E0>(&self, value: P0) -> ::windows::core::Result<()>
    where
        P0: ::std::convert::TryInto<
            ::windows::core::InParam<'a, ICompositionAnimationBase>,
            Error = E0,
        >,
        E0: ::std::convert::Into<::windows::core::Error>,
    {
        let this = &::windows::core::Interface::cast::<ICompositionObject2>(self)?;
        unsafe {
            (::windows::core::Vtable::vtable(this).StartAnimationGroup)(
                ::windows::core::Vtable::as_raw(this),
                value.try_into().map_err(|e| e.into())?.abi(),
            )
            .ok()
        }
    }
    pub fn StopAnimationGroup<'a, P0, E0>(&self, value: P0) -> ::windows::core::Result<()>
    where
        P0: ::std::convert::TryInto<
            ::windows::core::InParam<'a, ICompositionAnimationBase>,
            Error = E0,
        >,
        E0: ::std::convert::Into<::windows::core::Error>,
    {
        let this = &::windows::core::Interface::cast::<ICompositionObject2>(self)?;
        unsafe {
            (::windows::core::Vtable::vtable(this).StopAnimationGroup)(
                ::windows::core::Vtable::as_raw(this),
                value.try_into().map_err(|e| e.into())?.abi(),
            )
            .ok()
        }
    }
    #[doc = "*Required features: `\"UI_Dispatching\"`*"]
    #[cfg(feature = "UI_Dispatching")]
    pub fn DispatcherQueue(&self) -> ::windows::core::Result<super::Dispatching::DispatcherQueue> {
        let this = &::windows::core::Interface::cast::<ICompositionObject3>(self)?;
        unsafe {
            let mut result__ = ::core::mem::MaybeUninit::zeroed();
            (::windows::core::Vtable::vtable(this).DispatcherQueue)(
                ::windows::core::Vtable::as_raw(this),
                result__.as_mut_ptr(),
            )
            .from_abi::<super::Dispatching::DispatcherQueue>(result__)
        }
    }
    pub fn TryGetAnimationController(
        &self,
        propertyname: &::windows::core::HSTRING,
    ) -> ::windows::core::Result<AnimationController> {
        let this = &::windows::core::Interface::cast::<ICompositionObject4>(self)?;
        unsafe {
            let mut result__ = ::core::mem::MaybeUninit::zeroed();
            (::windows::core::Vtable::vtable(this).TryGetAnimationController)(
                ::windows::core::Vtable::as_raw(this),
                ::core::mem::transmute_copy(propertyname),
                result__.as_mut_ptr(),
            )
            .from_abi::<AnimationController>(result__)
        }
    }
    pub fn StartAnimationWithController<'a, P0>(
        &self,
        propertyname: &::windows::core::HSTRING,
        animation: P0,
        animationcontroller: &AnimationController,
    ) -> ::windows::core::Result<()>
    where
        P0: ::std::convert::Into<::windows::core::InParam<'a, CompositionAnimation>>,
    {
        let this = &::windows::core::Interface::cast::<ICompositionObject5>(self)?;
        unsafe {
            (::windows::core::Vtable::vtable(this).StartAnimationWithController)(
                ::windows::core::Vtable::as_raw(this),
                ::core::mem::transmute_copy(propertyname),
                animation.into().abi(),
                ::core::mem::transmute_copy(animationcontroller),
            )
            .ok()
        }
    }
}
impl ::core::clone::Clone for CompositionEffectBrush {
    fn clone(&self) -> Self {
        Self(self.0.clone())
    }
}
impl ::core::cmp::PartialEq for CompositionEffectBrush {
    fn eq(&self, other: &Self) -> bool {
        self.0 == other.0
    }
}
impl ::core::cmp::Eq for CompositionEffectBrush {}
impl ::core::fmt::Debug for CompositionEffectBrush {
    fn fmt(&self, f: &mut ::core::fmt::Formatter<'_>) -> ::core::fmt::Result {
        f.debug_tuple("CompositionEffectBrush").field(&self.0).finish()
    }
}
unsafe impl ::windows::core::RuntimeType for CompositionEffectBrush {
    const SIGNATURE : ::windows::core::ConstBuffer = ::windows::core::ConstBuffer::from_slice ( b"rc(Microsoft.UI.Composition.CompositionEffectBrush;{62e0bbab-1f45-5a44-9ddf-f0c38a02ed85})" ) ;
    type DefaultType = ::core::option::Option<Self>;
    fn from_default(from: &Self::DefaultType) -> ::windows::core::Result<Self> {
        from.as_ref().cloned().ok_or(::windows::core::Error::OK)
    }
}
unsafe impl ::windows::core::Vtable for CompositionEffectBrush {
    type Vtable = ICompositionEffectBrush_Vtbl;
}
unsafe impl ::windows::core::Interface for CompositionEffectBrush {
    const IID: ::windows::core::GUID = <ICompositionEffectBrush as ::windows::core::Interface>::IID;
}
impl ::windows::core::RuntimeName for CompositionEffectBrush {
    const NAME: &'static str = "Microsoft.UI.Composition.CompositionEffectBrush";
}
::windows::core::interface_hierarchy!(
    CompositionEffectBrush,
    ::windows::core::IUnknown,
    ::windows::core::IInspectable
);
impl ::core::convert::TryFrom<CompositionEffectBrush> for IAnimationObject {
    type Error = ::windows::core::Error;
    fn try_from(value: CompositionEffectBrush) -> ::windows::core::Result<Self> {
        ::core::convert::TryFrom::try_from(&value)
    }
}
impl ::core::convert::TryFrom<&CompositionEffectBrush> for IAnimationObject {
    type Error = ::windows::core::Error;
    fn try_from(value: &CompositionEffectBrush) -> ::windows::core::Result<Self> {
        ::windows::core::Interface::cast(value)
    }
}
impl<'a> ::core::convert::TryFrom<&CompositionEffectBrush>
    for ::windows::core::InParam<'a, IAnimationObject>
{
    type Error = ::windows::core::Error;
    fn try_from(value: &CompositionEffectBrush) -> ::windows::core::Result<Self> {
        let item = ::std::convert::TryInto::try_into(value)?;
        Ok(::windows::core::InParam::owned(item))
    }
}
impl ::core::convert::TryFrom<CompositionEffectBrush> for ::windows::Foundation::IClosable {
    type Error = ::windows::core::Error;
    fn try_from(value: CompositionEffectBrush) -> ::windows::core::Result<Self> {
        ::core::convert::TryFrom::try_from(&value)
    }
}
impl ::core::convert::TryFrom<&CompositionEffectBrush> for ::windows::Foundation::IClosable {
    type Error = ::windows::core::Error;
    fn try_from(value: &CompositionEffectBrush) -> ::windows::core::Result<Self> {
        ::windows::core::Interface::cast(value)
    }
}
impl<'a> ::core::convert::TryFrom<&CompositionEffectBrush>
    for ::windows::core::InParam<'a, ::windows::Foundation::IClosable>
{
    type Error = ::windows::core::Error;
    fn try_from(value: &CompositionEffectBrush) -> ::windows::core::Result<Self> {
        let item = ::std::convert::TryInto::try_into(value)?;
        Ok(::windows::core::InParam::owned(item))
    }
}
impl ::core::convert::From<CompositionEffectBrush> for CompositionBrush {
    fn from(value: CompositionEffectBrush) -> Self {
        ::core::convert::From::from(&value)
    }
}
impl ::core::convert::From<&CompositionEffectBrush> for CompositionBrush {
    fn from(value: &CompositionEffectBrush) -> Self {
        ::windows::core::Interface::cast(value).unwrap()
    }
}
impl<'a> ::core::convert::From<&CompositionEffectBrush>
    for ::windows::core::InParam<'a, CompositionBrush>
{
    fn from(value: &CompositionEffectBrush) -> Self {
        ::windows::core::InParam::owned(value.into())
    }
}
impl ::core::convert::From<CompositionEffectBrush> for CompositionObject {
    fn from(value: CompositionEffectBrush) -> Self {
        ::core::convert::From::from(&value)
    }
}
impl ::core::convert::From<&CompositionEffectBrush> for CompositionObject {
    fn from(value: &CompositionEffectBrush) -> Self {
        ::windows::core::Interface::cast(value).unwrap()
    }
}
impl<'a> ::core::convert::From<&CompositionEffectBrush>
    for ::windows::core::InParam<'a, CompositionObject>
{
    fn from(value: &CompositionEffectBrush) -> Self {
        ::windows::core::InParam::owned(value.into())
    }
}
unsafe impl ::core::marker::Send for CompositionEffectBrush {}
unsafe impl ::core::marker::Sync for CompositionEffectBrush {}
#[doc = "*Required features: `\"UI_Composition\"`*"]
#[repr(transparent)]
pub struct CompositionEffectFactory(::windows::core::IUnknown);
impl CompositionEffectFactory {
    pub fn PopulatePropertyInfo(
        &self,
        propertyname: &::windows::core::HSTRING,
        propertyinfo: &AnimationPropertyInfo,
    ) -> ::windows::core::Result<()> {
        let this = &::windows::core::Interface::cast::<IAnimationObject>(self)?;
        unsafe {
            (::windows::core::Vtable::vtable(this).PopulatePropertyInfo)(
                ::windows::core::Vtable::as_raw(this),
                ::core::mem::transmute_copy(propertyname),
                ::core::mem::transmute_copy(propertyinfo),
            )
            .ok()
        }
    }
    pub fn Close(&self) -> ::windows::core::Result<()> {
        let this = &::windows::core::Interface::cast::<::windows::Foundation::IClosable>(self)?;
        unsafe {
            (::windows::core::Vtable::vtable(this).Close)(::windows::core::Vtable::as_raw(this))
                .ok()
        }
    }
    pub fn CreateBrush(&self) -> ::windows::core::Result<CompositionEffectBrush> {
        let this = self;
        unsafe {
            let mut result__ = ::core::mem::MaybeUninit::zeroed();
            (::windows::core::Vtable::vtable(this).CreateBrush)(
                ::windows::core::Vtable::as_raw(this),
                result__.as_mut_ptr(),
            )
            .from_abi::<CompositionEffectBrush>(result__)
        }
    }
    pub fn ExtendedError(&self) -> ::windows::core::Result<::windows::core::HRESULT> {
        let this = self;
        unsafe {
            let mut result__ = ::core::mem::MaybeUninit::zeroed();
            (::windows::core::Vtable::vtable(this).ExtendedError)(
                ::windows::core::Vtable::as_raw(this),
                result__.as_mut_ptr(),
            )
            .from_abi::<::windows::core::HRESULT>(result__)
        }
    }
    pub fn LoadStatus(&self) -> ::windows::core::Result<CompositionEffectFactoryLoadStatus> {
        let this = self;
        unsafe {
            let mut result__ = ::core::mem::MaybeUninit::zeroed();
            (::windows::core::Vtable::vtable(this).LoadStatus)(
                ::windows::core::Vtable::as_raw(this),
                result__.as_mut_ptr(),
            )
            .from_abi::<CompositionEffectFactoryLoadStatus>(result__)
        }
    }
    pub fn Compositor(&self) -> ::windows::core::Result<Compositor> {
        let this = &::windows::core::Interface::cast::<ICompositionObject>(self)?;
        unsafe {
            let mut result__ = ::core::mem::MaybeUninit::zeroed();
            (::windows::core::Vtable::vtable(this).Compositor)(
                ::windows::core::Vtable::as_raw(this),
                result__.as_mut_ptr(),
            )
            .from_abi::<Compositor>(result__)
        }
    }
    pub fn Properties(&self) -> ::windows::core::Result<CompositionPropertySet> {
        let this = &::windows::core::Interface::cast::<ICompositionObject>(self)?;
        unsafe {
            let mut result__ = ::core::mem::MaybeUninit::zeroed();
            (::windows::core::Vtable::vtable(this).Properties)(
                ::windows::core::Vtable::as_raw(this),
                result__.as_mut_ptr(),
            )
            .from_abi::<CompositionPropertySet>(result__)
        }
    }
    pub fn StartAnimation<'a, P0>(
        &self,
        propertyname: &::windows::core::HSTRING,
        animation: P0,
    ) -> ::windows::core::Result<()>
    where
        P0: ::std::convert::Into<::windows::core::InParam<'a, CompositionAnimation>>,
    {
        let this = &::windows::core::Interface::cast::<ICompositionObject>(self)?;
        unsafe {
            (::windows::core::Vtable::vtable(this).StartAnimation)(
                ::windows::core::Vtable::as_raw(this),
                ::core::mem::transmute_copy(propertyname),
                animation.into().abi(),
            )
            .ok()
        }
    }
    pub fn StopAnimation(
        &self,
        propertyname: &::windows::core::HSTRING,
    ) -> ::windows::core::Result<()> {
        let this = &::windows::core::Interface::cast::<ICompositionObject>(self)?;
        unsafe {
            (::windows::core::Vtable::vtable(this).StopAnimation)(
                ::windows::core::Vtable::as_raw(this),
                ::core::mem::transmute_copy(propertyname),
            )
            .ok()
        }
    }
    pub fn Comment(&self) -> ::windows::core::Result<::windows::core::HSTRING> {
        let this = &::windows::core::Interface::cast::<ICompositionObject2>(self)?;
        unsafe {
            let mut result__ = ::core::mem::MaybeUninit::zeroed();
            (::windows::core::Vtable::vtable(this).Comment)(
                ::windows::core::Vtable::as_raw(this),
                result__.as_mut_ptr(),
            )
            .from_abi::<::windows::core::HSTRING>(result__)
        }
    }
    pub fn SetComment(&self, value: &::windows::core::HSTRING) -> ::windows::core::Result<()> {
        let this = &::windows::core::Interface::cast::<ICompositionObject2>(self)?;
        unsafe {
            (::windows::core::Vtable::vtable(this).SetComment)(
                ::windows::core::Vtable::as_raw(this),
                ::core::mem::transmute_copy(value),
            )
            .ok()
        }
    }
    pub fn ImplicitAnimations(&self) -> ::windows::core::Result<ImplicitAnimationCollection> {
        let this = &::windows::core::Interface::cast::<ICompositionObject2>(self)?;
        unsafe {
            let mut result__ = ::core::mem::MaybeUninit::zeroed();
            (::windows::core::Vtable::vtable(this).ImplicitAnimations)(
                ::windows::core::Vtable::as_raw(this),
                result__.as_mut_ptr(),
            )
            .from_abi::<ImplicitAnimationCollection>(result__)
        }
    }
    pub fn SetImplicitAnimations(
        &self,
        value: &ImplicitAnimationCollection,
    ) -> ::windows::core::Result<()> {
        let this = &::windows::core::Interface::cast::<ICompositionObject2>(self)?;
        unsafe {
            (::windows::core::Vtable::vtable(this).SetImplicitAnimations)(
                ::windows::core::Vtable::as_raw(this),
                ::core::mem::transmute_copy(value),
            )
            .ok()
        }
    }
    pub fn StartAnimationGroup<'a, P0, E0>(&self, value: P0) -> ::windows::core::Result<()>
    where
        P0: ::std::convert::TryInto<
            ::windows::core::InParam<'a, ICompositionAnimationBase>,
            Error = E0,
        >,
        E0: ::std::convert::Into<::windows::core::Error>,
    {
        let this = &::windows::core::Interface::cast::<ICompositionObject2>(self)?;
        unsafe {
            (::windows::core::Vtable::vtable(this).StartAnimationGroup)(
                ::windows::core::Vtable::as_raw(this),
                value.try_into().map_err(|e| e.into())?.abi(),
            )
            .ok()
        }
    }
    pub fn StopAnimationGroup<'a, P0, E0>(&self, value: P0) -> ::windows::core::Result<()>
    where
        P0: ::std::convert::TryInto<
            ::windows::core::InParam<'a, ICompositionAnimationBase>,
            Error = E0,
        >,
        E0: ::std::convert::Into<::windows::core::Error>,
    {
        let this = &::windows::core::Interface::cast::<ICompositionObject2>(self)?;
        unsafe {
            (::windows::core::Vtable::vtable(this).StopAnimationGroup)(
                ::windows::core::Vtable::as_raw(this),
                value.try_into().map_err(|e| e.into())?.abi(),
            )
            .ok()
        }
    }
    #[doc = "*Required features: `\"UI_Dispatching\"`*"]
    #[cfg(feature = "UI_Dispatching")]
    pub fn DispatcherQueue(&self) -> ::windows::core::Result<super::Dispatching::DispatcherQueue> {
        let this = &::windows::core::Interface::cast::<ICompositionObject3>(self)?;
        unsafe {
            let mut result__ = ::core::mem::MaybeUninit::zeroed();
            (::windows::core::Vtable::vtable(this).DispatcherQueue)(
                ::windows::core::Vtable::as_raw(this),
                result__.as_mut_ptr(),
            )
            .from_abi::<super::Dispatching::DispatcherQueue>(result__)
        }
    }
    pub fn TryGetAnimationController(
        &self,
        propertyname: &::windows::core::HSTRING,
    ) -> ::windows::core::Result<AnimationController> {
        let this = &::windows::core::Interface::cast::<ICompositionObject4>(self)?;
        unsafe {
            let mut result__ = ::core::mem::MaybeUninit::zeroed();
            (::windows::core::Vtable::vtable(this).TryGetAnimationController)(
                ::windows::core::Vtable::as_raw(this),
                ::core::mem::transmute_copy(propertyname),
                result__.as_mut_ptr(),
            )
            .from_abi::<AnimationController>(result__)
        }
    }
    pub fn StartAnimationWithController<'a, P0>(
        &self,
        propertyname: &::windows::core::HSTRING,
        animation: P0,
        animationcontroller: &AnimationController,
    ) -> ::windows::core::Result<()>
    where
        P0: ::std::convert::Into<::windows::core::InParam<'a, CompositionAnimation>>,
    {
        let this = &::windows::core::Interface::cast::<ICompositionObject5>(self)?;
        unsafe {
            (::windows::core::Vtable::vtable(this).StartAnimationWithController)(
                ::windows::core::Vtable::as_raw(this),
                ::core::mem::transmute_copy(propertyname),
                animation.into().abi(),
                ::core::mem::transmute_copy(animationcontroller),
            )
            .ok()
        }
    }
}
impl ::core::clone::Clone for CompositionEffectFactory {
    fn clone(&self) -> Self {
        Self(self.0.clone())
    }
}
impl ::core::cmp::PartialEq for CompositionEffectFactory {
    fn eq(&self, other: &Self) -> bool {
        self.0 == other.0
    }
}
impl ::core::cmp::Eq for CompositionEffectFactory {}
impl ::core::fmt::Debug for CompositionEffectFactory {
    fn fmt(&self, f: &mut ::core::fmt::Formatter<'_>) -> ::core::fmt::Result {
        f.debug_tuple("CompositionEffectFactory").field(&self.0).finish()
    }
}
unsafe impl ::windows::core::RuntimeType for CompositionEffectFactory {
    const SIGNATURE : ::windows::core::ConstBuffer = ::windows::core::ConstBuffer::from_slice ( b"rc(Microsoft.UI.Composition.CompositionEffectFactory;{c50f407a-0231-5ed2-b7a7-ca66d3e14b3b})" ) ;
    type DefaultType = ::core::option::Option<Self>;
    fn from_default(from: &Self::DefaultType) -> ::windows::core::Result<Self> {
        from.as_ref().cloned().ok_or(::windows::core::Error::OK)
    }
}
unsafe impl ::windows::core::Vtable for CompositionEffectFactory {
    type Vtable = ICompositionEffectFactory_Vtbl;
}
unsafe impl ::windows::core::Interface for CompositionEffectFactory {
    const IID: ::windows::core::GUID =
        <ICompositionEffectFactory as ::windows::core::Interface>::IID;
}
impl ::windows::core::RuntimeName for CompositionEffectFactory {
    const NAME: &'static str = "Microsoft.UI.Composition.CompositionEffectFactory";
}
::windows::core::interface_hierarchy!(
    CompositionEffectFactory,
    ::windows::core::IUnknown,
    ::windows::core::IInspectable
);
impl ::core::convert::TryFrom<CompositionEffectFactory> for IAnimationObject {
    type Error = ::windows::core::Error;
    fn try_from(value: CompositionEffectFactory) -> ::windows::core::Result<Self> {
        ::core::convert::TryFrom::try_from(&value)
    }
}
impl ::core::convert::TryFrom<&CompositionEffectFactory> for IAnimationObject {
    type Error = ::windows::core::Error;
    fn try_from(value: &CompositionEffectFactory) -> ::windows::core::Result<Self> {
        ::windows::core::Interface::cast(value)
    }
}
impl<'a> ::core::convert::TryFrom<&CompositionEffectFactory>
    for ::windows::core::InParam<'a, IAnimationObject>
{
    type Error = ::windows::core::Error;
    fn try_from(value: &CompositionEffectFactory) -> ::windows::core::Result<Self> {
        let item = ::std::convert::TryInto::try_into(value)?;
        Ok(::windows::core::InParam::owned(item))
    }
}
impl ::core::convert::TryFrom<CompositionEffectFactory> for ::windows::Foundation::IClosable {
    type Error = ::windows::core::Error;
    fn try_from(value: CompositionEffectFactory) -> ::windows::core::Result<Self> {
        ::core::convert::TryFrom::try_from(&value)
    }
}
impl ::core::convert::TryFrom<&CompositionEffectFactory> for ::windows::Foundation::IClosable {
    type Error = ::windows::core::Error;
    fn try_from(value: &CompositionEffectFactory) -> ::windows::core::Result<Self> {
        ::windows::core::Interface::cast(value)
    }
}
impl<'a> ::core::convert::TryFrom<&CompositionEffectFactory>
    for ::windows::core::InParam<'a, ::windows::Foundation::IClosable>
{
    type Error = ::windows::core::Error;
    fn try_from(value: &CompositionEffectFactory) -> ::windows::core::Result<Self> {
        let item = ::std::convert::TryInto::try_into(value)?;
        Ok(::windows::core::InParam::owned(item))
    }
}
impl ::core::convert::From<CompositionEffectFactory> for CompositionObject {
    fn from(value: CompositionEffectFactory) -> Self {
        ::core::convert::From::from(&value)
    }
}
impl ::core::convert::From<&CompositionEffectFactory> for CompositionObject {
    fn from(value: &CompositionEffectFactory) -> Self {
        ::windows::core::Interface::cast(value).unwrap()
    }
}
impl<'a> ::core::convert::From<&CompositionEffectFactory>
    for ::windows::core::InParam<'a, CompositionObject>
{
    fn from(value: &CompositionEffectFactory) -> Self {
        ::windows::core::InParam::owned(value.into())
    }
}
unsafe impl ::core::marker::Send for CompositionEffectFactory {}
unsafe impl ::core::marker::Sync for CompositionEffectFactory {}
#[doc = "*Required features: `\"UI_Composition\"`*"]
#[repr(transparent)]
pub struct CompositionEffectSourceParameter(::windows::core::IUnknown);
impl CompositionEffectSourceParameter {
    pub fn Name(&self) -> ::windows::core::Result<::windows::core::HSTRING> {
        let this = self;
        unsafe {
            let mut result__ = ::core::mem::MaybeUninit::zeroed();
            (::windows::core::Vtable::vtable(this).Name)(
                ::windows::core::Vtable::as_raw(this),
                result__.as_mut_ptr(),
            )
            .from_abi::<::windows::core::HSTRING>(result__)
        }
    }
    pub fn Create(
        name: &::windows::core::HSTRING,
    ) -> ::windows::core::Result<CompositionEffectSourceParameter> {
        Self::ICompositionEffectSourceParameterFactory(|this| unsafe {
            let mut result__ = ::core::mem::MaybeUninit::zeroed();
            (::windows::core::Vtable::vtable(this).Create)(
                ::windows::core::Vtable::as_raw(this),
                ::core::mem::transmute_copy(name),
                result__.as_mut_ptr(),
            )
            .from_abi::<CompositionEffectSourceParameter>(result__)
        })
    }
    #[doc(hidden)]
    pub fn ICompositionEffectSourceParameterFactory<
        R,
        F: FnOnce(&ICompositionEffectSourceParameterFactory) -> ::windows::core::Result<R>,
    >(
        callback: F,
    ) -> ::windows::core::Result<R> {
        static SHARED: ::windows::core::FactoryCache<
            CompositionEffectSourceParameter,
            ICompositionEffectSourceParameterFactory,
        > = ::windows::core::FactoryCache::new();
        SHARED.call(callback)
    }
}
impl ::core::clone::Clone for CompositionEffectSourceParameter {
    fn clone(&self) -> Self {
        Self(self.0.clone())
    }
}
impl ::core::cmp::PartialEq for CompositionEffectSourceParameter {
    fn eq(&self, other: &Self) -> bool {
        self.0 == other.0
    }
}
impl ::core::cmp::Eq for CompositionEffectSourceParameter {}
impl ::core::fmt::Debug for CompositionEffectSourceParameter {
    fn fmt(&self, f: &mut ::core::fmt::Formatter<'_>) -> ::core::fmt::Result {
        f.debug_tuple("CompositionEffectSourceParameter").field(&self.0).finish()
    }
}
unsafe impl ::windows::core::RuntimeType for CompositionEffectSourceParameter {
    const SIGNATURE : ::windows::core::ConstBuffer = ::windows::core::ConstBuffer::from_slice ( b"rc(Microsoft.UI.Composition.CompositionEffectSourceParameter;{bece3367-5704-59f7-be8c-d6293af9c95f})" ) ;
    type DefaultType = ::core::option::Option<Self>;
    fn from_default(from: &Self::DefaultType) -> ::windows::core::Result<Self> {
        from.as_ref().cloned().ok_or(::windows::core::Error::OK)
    }
}
unsafe impl ::windows::core::Vtable for CompositionEffectSourceParameter {
    type Vtable = ICompositionEffectSourceParameter_Vtbl;
}
unsafe impl ::windows::core::Interface for CompositionEffectSourceParameter {
    const IID: ::windows::core::GUID =
        <ICompositionEffectSourceParameter as ::windows::core::Interface>::IID;
}
impl ::windows::core::RuntimeName for CompositionEffectSourceParameter {
    const NAME: &'static str = "Microsoft.UI.Composition.CompositionEffectSourceParameter";
}
::windows::core::interface_hierarchy!(
    CompositionEffectSourceParameter,
    ::windows::core::IUnknown,
    ::windows::core::IInspectable
);
impl ::core::convert::TryFrom<CompositionEffectSourceParameter>
    for ::windows::Graphics::Effects::IGraphicsEffectSource
{
    type Error = ::windows::core::Error;
    fn try_from(value: CompositionEffectSourceParameter) -> ::windows::core::Result<Self> {
        ::core::convert::TryFrom::try_from(&value)
    }
}
impl ::core::convert::TryFrom<&CompositionEffectSourceParameter>
    for ::windows::Graphics::Effects::IGraphicsEffectSource
{
    type Error = ::windows::core::Error;
    fn try_from(value: &CompositionEffectSourceParameter) -> ::windows::core::Result<Self> {
        ::windows::core::Interface::cast(value)
    }
}
impl<'a> ::core::convert::TryFrom<&CompositionEffectSourceParameter>
    for ::windows::core::InParam<'a, ::windows::Graphics::Effects::IGraphicsEffectSource>
{
    type Error = ::windows::core::Error;
    fn try_from(value: &CompositionEffectSourceParameter) -> ::windows::core::Result<Self> {
        let item = ::std::convert::TryInto::try_into(value)?;
        Ok(::windows::core::InParam::owned(item))
    }
}
unsafe impl ::core::marker::Send for CompositionEffectSourceParameter {}
unsafe impl ::core::marker::Sync for CompositionEffectSourceParameter {}
#[doc = "*Required features: `\"UI_Composition\"`*"]
#[repr(transparent)]
pub struct CompositionEllipseGeometry(::windows::core::IUnknown);
impl CompositionEllipseGeometry {
    pub fn PopulatePropertyInfo(
        &self,
        propertyname: &::windows::core::HSTRING,
        propertyinfo: &AnimationPropertyInfo,
    ) -> ::windows::core::Result<()> {
        let this = &::windows::core::Interface::cast::<IAnimationObject>(self)?;
        unsafe {
            (::windows::core::Vtable::vtable(this).PopulatePropertyInfo)(
                ::windows::core::Vtable::as_raw(this),
                ::core::mem::transmute_copy(propertyname),
                ::core::mem::transmute_copy(propertyinfo),
            )
            .ok()
        }
    }
    pub fn Close(&self) -> ::windows::core::Result<()> {
        let this = &::windows::core::Interface::cast::<::windows::Foundation::IClosable>(self)?;
        unsafe {
            (::windows::core::Vtable::vtable(this).Close)(::windows::core::Vtable::as_raw(this))
                .ok()
        }
    }
    pub fn Center(&self) -> ::windows::core::Result<::windows::Foundation::Numerics::Vector2> {
        let this = self;
        unsafe {
            let mut result__ = ::core::mem::MaybeUninit::zeroed();
            (::windows::core::Vtable::vtable(this).Center)(
                ::windows::core::Vtable::as_raw(this),
                result__.as_mut_ptr(),
            )
            .from_abi::<::windows::Foundation::Numerics::Vector2>(result__)
        }
    }
    pub fn SetCenter(
        &self,
        value: ::windows::Foundation::Numerics::Vector2,
    ) -> ::windows::core::Result<()> {
        let this = self;
        unsafe {
            (::windows::core::Vtable::vtable(this).SetCenter)(
                ::windows::core::Vtable::as_raw(this),
                value,
            )
            .ok()
        }
    }
    pub fn Radius(&self) -> ::windows::core::Result<::windows::Foundation::Numerics::Vector2> {
        let this = self;
        unsafe {
            let mut result__ = ::core::mem::MaybeUninit::zeroed();
            (::windows::core::Vtable::vtable(this).Radius)(
                ::windows::core::Vtable::as_raw(this),
                result__.as_mut_ptr(),
            )
            .from_abi::<::windows::Foundation::Numerics::Vector2>(result__)
        }
    }
    pub fn SetRadius(
        &self,
        value: ::windows::Foundation::Numerics::Vector2,
    ) -> ::windows::core::Result<()> {
        let this = self;
        unsafe {
            (::windows::core::Vtable::vtable(this).SetRadius)(
                ::windows::core::Vtable::as_raw(this),
                value,
            )
            .ok()
        }
    }
    pub fn TrimEnd(&self) -> ::windows::core::Result<f32> {
        let this = &::windows::core::Interface::cast::<ICompositionGeometry>(self)?;
        unsafe {
            let mut result__ = ::core::mem::MaybeUninit::zeroed();
            (::windows::core::Vtable::vtable(this).TrimEnd)(
                ::windows::core::Vtable::as_raw(this),
                result__.as_mut_ptr(),
            )
            .from_abi::<f32>(result__)
        }
    }
    pub fn SetTrimEnd(&self, value: f32) -> ::windows::core::Result<()> {
        let this = &::windows::core::Interface::cast::<ICompositionGeometry>(self)?;
        unsafe {
            (::windows::core::Vtable::vtable(this).SetTrimEnd)(
                ::windows::core::Vtable::as_raw(this),
                value,
            )
            .ok()
        }
    }
    pub fn TrimOffset(&self) -> ::windows::core::Result<f32> {
        let this = &::windows::core::Interface::cast::<ICompositionGeometry>(self)?;
        unsafe {
            let mut result__ = ::core::mem::MaybeUninit::zeroed();
            (::windows::core::Vtable::vtable(this).TrimOffset)(
                ::windows::core::Vtable::as_raw(this),
                result__.as_mut_ptr(),
            )
            .from_abi::<f32>(result__)
        }
    }
    pub fn SetTrimOffset(&self, value: f32) -> ::windows::core::Result<()> {
        let this = &::windows::core::Interface::cast::<ICompositionGeometry>(self)?;
        unsafe {
            (::windows::core::Vtable::vtable(this).SetTrimOffset)(
                ::windows::core::Vtable::as_raw(this),
                value,
            )
            .ok()
        }
    }
    pub fn TrimStart(&self) -> ::windows::core::Result<f32> {
        let this = &::windows::core::Interface::cast::<ICompositionGeometry>(self)?;
        unsafe {
            let mut result__ = ::core::mem::MaybeUninit::zeroed();
            (::windows::core::Vtable::vtable(this).TrimStart)(
                ::windows::core::Vtable::as_raw(this),
                result__.as_mut_ptr(),
            )
            .from_abi::<f32>(result__)
        }
    }
    pub fn SetTrimStart(&self, value: f32) -> ::windows::core::Result<()> {
        let this = &::windows::core::Interface::cast::<ICompositionGeometry>(self)?;
        unsafe {
            (::windows::core::Vtable::vtable(this).SetTrimStart)(
                ::windows::core::Vtable::as_raw(this),
                value,
            )
            .ok()
        }
    }
    pub fn Compositor(&self) -> ::windows::core::Result<Compositor> {
        let this = &::windows::core::Interface::cast::<ICompositionObject>(self)?;
        unsafe {
            let mut result__ = ::core::mem::MaybeUninit::zeroed();
            (::windows::core::Vtable::vtable(this).Compositor)(
                ::windows::core::Vtable::as_raw(this),
                result__.as_mut_ptr(),
            )
            .from_abi::<Compositor>(result__)
        }
    }
    pub fn Properties(&self) -> ::windows::core::Result<CompositionPropertySet> {
        let this = &::windows::core::Interface::cast::<ICompositionObject>(self)?;
        unsafe {
            let mut result__ = ::core::mem::MaybeUninit::zeroed();
            (::windows::core::Vtable::vtable(this).Properties)(
                ::windows::core::Vtable::as_raw(this),
                result__.as_mut_ptr(),
            )
            .from_abi::<CompositionPropertySet>(result__)
        }
    }
    pub fn StartAnimation<'a, P0>(
        &self,
        propertyname: &::windows::core::HSTRING,
        animation: P0,
    ) -> ::windows::core::Result<()>
    where
        P0: ::std::convert::Into<::windows::core::InParam<'a, CompositionAnimation>>,
    {
        let this = &::windows::core::Interface::cast::<ICompositionObject>(self)?;
        unsafe {
            (::windows::core::Vtable::vtable(this).StartAnimation)(
                ::windows::core::Vtable::as_raw(this),
                ::core::mem::transmute_copy(propertyname),
                animation.into().abi(),
            )
            .ok()
        }
    }
    pub fn StopAnimation(
        &self,
        propertyname: &::windows::core::HSTRING,
    ) -> ::windows::core::Result<()> {
        let this = &::windows::core::Interface::cast::<ICompositionObject>(self)?;
        unsafe {
            (::windows::core::Vtable::vtable(this).StopAnimation)(
                ::windows::core::Vtable::as_raw(this),
                ::core::mem::transmute_copy(propertyname),
            )
            .ok()
        }
    }
    pub fn Comment(&self) -> ::windows::core::Result<::windows::core::HSTRING> {
        let this = &::windows::core::Interface::cast::<ICompositionObject2>(self)?;
        unsafe {
            let mut result__ = ::core::mem::MaybeUninit::zeroed();
            (::windows::core::Vtable::vtable(this).Comment)(
                ::windows::core::Vtable::as_raw(this),
                result__.as_mut_ptr(),
            )
            .from_abi::<::windows::core::HSTRING>(result__)
        }
    }
    pub fn SetComment(&self, value: &::windows::core::HSTRING) -> ::windows::core::Result<()> {
        let this = &::windows::core::Interface::cast::<ICompositionObject2>(self)?;
        unsafe {
            (::windows::core::Vtable::vtable(this).SetComment)(
                ::windows::core::Vtable::as_raw(this),
                ::core::mem::transmute_copy(value),
            )
            .ok()
        }
    }
    pub fn ImplicitAnimations(&self) -> ::windows::core::Result<ImplicitAnimationCollection> {
        let this = &::windows::core::Interface::cast::<ICompositionObject2>(self)?;
        unsafe {
            let mut result__ = ::core::mem::MaybeUninit::zeroed();
            (::windows::core::Vtable::vtable(this).ImplicitAnimations)(
                ::windows::core::Vtable::as_raw(this),
                result__.as_mut_ptr(),
            )
            .from_abi::<ImplicitAnimationCollection>(result__)
        }
    }
    pub fn SetImplicitAnimations(
        &self,
        value: &ImplicitAnimationCollection,
    ) -> ::windows::core::Result<()> {
        let this = &::windows::core::Interface::cast::<ICompositionObject2>(self)?;
        unsafe {
            (::windows::core::Vtable::vtable(this).SetImplicitAnimations)(
                ::windows::core::Vtable::as_raw(this),
                ::core::mem::transmute_copy(value),
            )
            .ok()
        }
    }
    pub fn StartAnimationGroup<'a, P0, E0>(&self, value: P0) -> ::windows::core::Result<()>
    where
        P0: ::std::convert::TryInto<
            ::windows::core::InParam<'a, ICompositionAnimationBase>,
            Error = E0,
        >,
        E0: ::std::convert::Into<::windows::core::Error>,
    {
        let this = &::windows::core::Interface::cast::<ICompositionObject2>(self)?;
        unsafe {
            (::windows::core::Vtable::vtable(this).StartAnimationGroup)(
                ::windows::core::Vtable::as_raw(this),
                value.try_into().map_err(|e| e.into())?.abi(),
            )
            .ok()
        }
    }
    pub fn StopAnimationGroup<'a, P0, E0>(&self, value: P0) -> ::windows::core::Result<()>
    where
        P0: ::std::convert::TryInto<
            ::windows::core::InParam<'a, ICompositionAnimationBase>,
            Error = E0,
        >,
        E0: ::std::convert::Into<::windows::core::Error>,
    {
        let this = &::windows::core::Interface::cast::<ICompositionObject2>(self)?;
        unsafe {
            (::windows::core::Vtable::vtable(this).StopAnimationGroup)(
                ::windows::core::Vtable::as_raw(this),
                value.try_into().map_err(|e| e.into())?.abi(),
            )
            .ok()
        }
    }
    #[doc = "*Required features: `\"UI_Dispatching\"`*"]
    #[cfg(feature = "UI_Dispatching")]
    pub fn DispatcherQueue(&self) -> ::windows::core::Result<super::Dispatching::DispatcherQueue> {
        let this = &::windows::core::Interface::cast::<ICompositionObject3>(self)?;
        unsafe {
            let mut result__ = ::core::mem::MaybeUninit::zeroed();
            (::windows::core::Vtable::vtable(this).DispatcherQueue)(
                ::windows::core::Vtable::as_raw(this),
                result__.as_mut_ptr(),
            )
            .from_abi::<super::Dispatching::DispatcherQueue>(result__)
        }
    }
    pub fn TryGetAnimationController(
        &self,
        propertyname: &::windows::core::HSTRING,
    ) -> ::windows::core::Result<AnimationController> {
        let this = &::windows::core::Interface::cast::<ICompositionObject4>(self)?;
        unsafe {
            let mut result__ = ::core::mem::MaybeUninit::zeroed();
            (::windows::core::Vtable::vtable(this).TryGetAnimationController)(
                ::windows::core::Vtable::as_raw(this),
                ::core::mem::transmute_copy(propertyname),
                result__.as_mut_ptr(),
            )
            .from_abi::<AnimationController>(result__)
        }
    }
    pub fn StartAnimationWithController<'a, P0>(
        &self,
        propertyname: &::windows::core::HSTRING,
        animation: P0,
        animationcontroller: &AnimationController,
    ) -> ::windows::core::Result<()>
    where
        P0: ::std::convert::Into<::windows::core::InParam<'a, CompositionAnimation>>,
    {
        let this = &::windows::core::Interface::cast::<ICompositionObject5>(self)?;
        unsafe {
            (::windows::core::Vtable::vtable(this).StartAnimationWithController)(
                ::windows::core::Vtable::as_raw(this),
                ::core::mem::transmute_copy(propertyname),
                animation.into().abi(),
                ::core::mem::transmute_copy(animationcontroller),
            )
            .ok()
        }
    }
}
impl ::core::clone::Clone for CompositionEllipseGeometry {
    fn clone(&self) -> Self {
        Self(self.0.clone())
    }
}
impl ::core::cmp::PartialEq for CompositionEllipseGeometry {
    fn eq(&self, other: &Self) -> bool {
        self.0 == other.0
    }
}
impl ::core::cmp::Eq for CompositionEllipseGeometry {}
impl ::core::fmt::Debug for CompositionEllipseGeometry {
    fn fmt(&self, f: &mut ::core::fmt::Formatter<'_>) -> ::core::fmt::Result {
        f.debug_tuple("CompositionEllipseGeometry").field(&self.0).finish()
    }
}
unsafe impl ::windows::core::RuntimeType for CompositionEllipseGeometry {
    const SIGNATURE : ::windows::core::ConstBuffer = ::windows::core::ConstBuffer::from_slice ( b"rc(Microsoft.UI.Composition.CompositionEllipseGeometry;{f2a21042-7a57-58c1-8b47-8bc8b21d3aa0})" ) ;
    type DefaultType = ::core::option::Option<Self>;
    fn from_default(from: &Self::DefaultType) -> ::windows::core::Result<Self> {
        from.as_ref().cloned().ok_or(::windows::core::Error::OK)
    }
}
unsafe impl ::windows::core::Vtable for CompositionEllipseGeometry {
    type Vtable = ICompositionEllipseGeometry_Vtbl;
}
unsafe impl ::windows::core::Interface for CompositionEllipseGeometry {
    const IID: ::windows::core::GUID =
        <ICompositionEllipseGeometry as ::windows::core::Interface>::IID;
}
impl ::windows::core::RuntimeName for CompositionEllipseGeometry {
    const NAME: &'static str = "Microsoft.UI.Composition.CompositionEllipseGeometry";
}
::windows::core::interface_hierarchy!(
    CompositionEllipseGeometry,
    ::windows::core::IUnknown,
    ::windows::core::IInspectable
);
impl ::core::convert::TryFrom<CompositionEllipseGeometry> for IAnimationObject {
    type Error = ::windows::core::Error;
    fn try_from(value: CompositionEllipseGeometry) -> ::windows::core::Result<Self> {
        ::core::convert::TryFrom::try_from(&value)
    }
}
impl ::core::convert::TryFrom<&CompositionEllipseGeometry> for IAnimationObject {
    type Error = ::windows::core::Error;
    fn try_from(value: &CompositionEllipseGeometry) -> ::windows::core::Result<Self> {
        ::windows::core::Interface::cast(value)
    }
}
impl<'a> ::core::convert::TryFrom<&CompositionEllipseGeometry>
    for ::windows::core::InParam<'a, IAnimationObject>
{
    type Error = ::windows::core::Error;
    fn try_from(value: &CompositionEllipseGeometry) -> ::windows::core::Result<Self> {
        let item = ::std::convert::TryInto::try_into(value)?;
        Ok(::windows::core::InParam::owned(item))
    }
}
impl ::core::convert::TryFrom<CompositionEllipseGeometry> for ::windows::Foundation::IClosable {
    type Error = ::windows::core::Error;
    fn try_from(value: CompositionEllipseGeometry) -> ::windows::core::Result<Self> {
        ::core::convert::TryFrom::try_from(&value)
    }
}
impl ::core::convert::TryFrom<&CompositionEllipseGeometry> for ::windows::Foundation::IClosable {
    type Error = ::windows::core::Error;
    fn try_from(value: &CompositionEllipseGeometry) -> ::windows::core::Result<Self> {
        ::windows::core::Interface::cast(value)
    }
}
impl<'a> ::core::convert::TryFrom<&CompositionEllipseGeometry>
    for ::windows::core::InParam<'a, ::windows::Foundation::IClosable>
{
    type Error = ::windows::core::Error;
    fn try_from(value: &CompositionEllipseGeometry) -> ::windows::core::Result<Self> {
        let item = ::std::convert::TryInto::try_into(value)?;
        Ok(::windows::core::InParam::owned(item))
    }
}
impl ::core::convert::From<CompositionEllipseGeometry> for CompositionGeometry {
    fn from(value: CompositionEllipseGeometry) -> Self {
        ::core::convert::From::from(&value)
    }
}
impl ::core::convert::From<&CompositionEllipseGeometry> for CompositionGeometry {
    fn from(value: &CompositionEllipseGeometry) -> Self {
        ::windows::core::Interface::cast(value).unwrap()
    }
}
impl<'a> ::core::convert::From<&CompositionEllipseGeometry>
    for ::windows::core::InParam<'a, CompositionGeometry>
{
    fn from(value: &CompositionEllipseGeometry) -> Self {
        ::windows::core::InParam::owned(value.into())
    }
}
impl ::core::convert::From<CompositionEllipseGeometry> for CompositionObject {
    fn from(value: CompositionEllipseGeometry) -> Self {
        ::core::convert::From::from(&value)
    }
}
impl ::core::convert::From<&CompositionEllipseGeometry> for CompositionObject {
    fn from(value: &CompositionEllipseGeometry) -> Self {
        ::windows::core::Interface::cast(value).unwrap()
    }
}
impl<'a> ::core::convert::From<&CompositionEllipseGeometry>
    for ::windows::core::InParam<'a, CompositionObject>
{
    fn from(value: &CompositionEllipseGeometry) -> Self {
        ::windows::core::InParam::owned(value.into())
    }
}
unsafe impl ::core::marker::Send for CompositionEllipseGeometry {}
unsafe impl ::core::marker::Sync for CompositionEllipseGeometry {}
#[doc = "*Required features: `\"UI_Composition\"`*"]
#[repr(transparent)]
pub struct CompositionGeometricClip(::windows::core::IUnknown);
impl CompositionGeometricClip {
    pub fn PopulatePropertyInfo(
        &self,
        propertyname: &::windows::core::HSTRING,
        propertyinfo: &AnimationPropertyInfo,
    ) -> ::windows::core::Result<()> {
        let this = &::windows::core::Interface::cast::<IAnimationObject>(self)?;
        unsafe {
            (::windows::core::Vtable::vtable(this).PopulatePropertyInfo)(
                ::windows::core::Vtable::as_raw(this),
                ::core::mem::transmute_copy(propertyname),
                ::core::mem::transmute_copy(propertyinfo),
            )
            .ok()
        }
    }
    pub fn Close(&self) -> ::windows::core::Result<()> {
        let this = &::windows::core::Interface::cast::<::windows::Foundation::IClosable>(self)?;
        unsafe {
            (::windows::core::Vtable::vtable(this).Close)(::windows::core::Vtable::as_raw(this))
                .ok()
        }
    }
    pub fn AnchorPoint(&self) -> ::windows::core::Result<::windows::Foundation::Numerics::Vector2> {
        let this = &::windows::core::Interface::cast::<ICompositionClip2>(self)?;
        unsafe {
            let mut result__ = ::core::mem::MaybeUninit::zeroed();
            (::windows::core::Vtable::vtable(this).AnchorPoint)(
                ::windows::core::Vtable::as_raw(this),
                result__.as_mut_ptr(),
            )
            .from_abi::<::windows::Foundation::Numerics::Vector2>(result__)
        }
    }
    pub fn SetAnchorPoint(
        &self,
        value: ::windows::Foundation::Numerics::Vector2,
    ) -> ::windows::core::Result<()> {
        let this = &::windows::core::Interface::cast::<ICompositionClip2>(self)?;
        unsafe {
            (::windows::core::Vtable::vtable(this).SetAnchorPoint)(
                ::windows::core::Vtable::as_raw(this),
                value,
            )
            .ok()
        }
    }
    pub fn CenterPoint(&self) -> ::windows::core::Result<::windows::Foundation::Numerics::Vector2> {
        let this = &::windows::core::Interface::cast::<ICompositionClip2>(self)?;
        unsafe {
            let mut result__ = ::core::mem::MaybeUninit::zeroed();
            (::windows::core::Vtable::vtable(this).CenterPoint)(
                ::windows::core::Vtable::as_raw(this),
                result__.as_mut_ptr(),
            )
            .from_abi::<::windows::Foundation::Numerics::Vector2>(result__)
        }
    }
    pub fn SetCenterPoint(
        &self,
        value: ::windows::Foundation::Numerics::Vector2,
    ) -> ::windows::core::Result<()> {
        let this = &::windows::core::Interface::cast::<ICompositionClip2>(self)?;
        unsafe {
            (::windows::core::Vtable::vtable(this).SetCenterPoint)(
                ::windows::core::Vtable::as_raw(this),
                value,
            )
            .ok()
        }
    }
    pub fn Offset(&self) -> ::windows::core::Result<::windows::Foundation::Numerics::Vector2> {
        let this = &::windows::core::Interface::cast::<ICompositionClip2>(self)?;
        unsafe {
            let mut result__ = ::core::mem::MaybeUninit::zeroed();
            (::windows::core::Vtable::vtable(this).Offset)(
                ::windows::core::Vtable::as_raw(this),
                result__.as_mut_ptr(),
            )
            .from_abi::<::windows::Foundation::Numerics::Vector2>(result__)
        }
    }
    pub fn SetOffset(
        &self,
        value: ::windows::Foundation::Numerics::Vector2,
    ) -> ::windows::core::Result<()> {
        let this = &::windows::core::Interface::cast::<ICompositionClip2>(self)?;
        unsafe {
            (::windows::core::Vtable::vtable(this).SetOffset)(
                ::windows::core::Vtable::as_raw(this),
                value,
            )
            .ok()
        }
    }
    pub fn RotationAngle(&self) -> ::windows::core::Result<f32> {
        let this = &::windows::core::Interface::cast::<ICompositionClip2>(self)?;
        unsafe {
            let mut result__ = ::core::mem::MaybeUninit::zeroed();
            (::windows::core::Vtable::vtable(this).RotationAngle)(
                ::windows::core::Vtable::as_raw(this),
                result__.as_mut_ptr(),
            )
            .from_abi::<f32>(result__)
        }
    }
    pub fn SetRotationAngle(&self, value: f32) -> ::windows::core::Result<()> {
        let this = &::windows::core::Interface::cast::<ICompositionClip2>(self)?;
        unsafe {
            (::windows::core::Vtable::vtable(this).SetRotationAngle)(
                ::windows::core::Vtable::as_raw(this),
                value,
            )
            .ok()
        }
    }
    pub fn RotationAngleInDegrees(&self) -> ::windows::core::Result<f32> {
        let this = &::windows::core::Interface::cast::<ICompositionClip2>(self)?;
        unsafe {
            let mut result__ = ::core::mem::MaybeUninit::zeroed();
            (::windows::core::Vtable::vtable(this).RotationAngleInDegrees)(
                ::windows::core::Vtable::as_raw(this),
                result__.as_mut_ptr(),
            )
            .from_abi::<f32>(result__)
        }
    }
    pub fn SetRotationAngleInDegrees(&self, value: f32) -> ::windows::core::Result<()> {
        let this = &::windows::core::Interface::cast::<ICompositionClip2>(self)?;
        unsafe {
            (::windows::core::Vtable::vtable(this).SetRotationAngleInDegrees)(
                ::windows::core::Vtable::as_raw(this),
                value,
            )
            .ok()
        }
    }
    pub fn Scale(&self) -> ::windows::core::Result<::windows::Foundation::Numerics::Vector2> {
        let this = &::windows::core::Interface::cast::<ICompositionClip2>(self)?;
        unsafe {
            let mut result__ = ::core::mem::MaybeUninit::zeroed();
            (::windows::core::Vtable::vtable(this).Scale)(
                ::windows::core::Vtable::as_raw(this),
                result__.as_mut_ptr(),
            )
            .from_abi::<::windows::Foundation::Numerics::Vector2>(result__)
        }
    }
    pub fn SetScale(
        &self,
        value: ::windows::Foundation::Numerics::Vector2,
    ) -> ::windows::core::Result<()> {
        let this = &::windows::core::Interface::cast::<ICompositionClip2>(self)?;
        unsafe {
            (::windows::core::Vtable::vtable(this).SetScale)(
                ::windows::core::Vtable::as_raw(this),
                value,
            )
            .ok()
        }
    }
    pub fn TransformMatrix(
        &self,
    ) -> ::windows::core::Result<::windows::Foundation::Numerics::Matrix3x2> {
        let this = &::windows::core::Interface::cast::<ICompositionClip2>(self)?;
        unsafe {
            let mut result__ = ::core::mem::MaybeUninit::zeroed();
            (::windows::core::Vtable::vtable(this).TransformMatrix)(
                ::windows::core::Vtable::as_raw(this),
                result__.as_mut_ptr(),
            )
            .from_abi::<::windows::Foundation::Numerics::Matrix3x2>(result__)
        }
    }
    pub fn SetTransformMatrix(
        &self,
        value: ::windows::Foundation::Numerics::Matrix3x2,
    ) -> ::windows::core::Result<()> {
        let this = &::windows::core::Interface::cast::<ICompositionClip2>(self)?;
        unsafe {
            (::windows::core::Vtable::vtable(this).SetTransformMatrix)(
                ::windows::core::Vtable::as_raw(this),
                value,
            )
            .ok()
        }
    }
    pub fn Geometry(&self) -> ::windows::core::Result<CompositionGeometry> {
        let this = self;
        unsafe {
            let mut result__ = ::core::mem::MaybeUninit::zeroed();
            (::windows::core::Vtable::vtable(this).Geometry)(
                ::windows::core::Vtable::as_raw(this),
                result__.as_mut_ptr(),
            )
            .from_abi::<CompositionGeometry>(result__)
        }
    }
    pub fn SetGeometry<'a, P0>(&self, value: P0) -> ::windows::core::Result<()>
    where
        P0: ::std::convert::Into<::windows::core::InParam<'a, CompositionGeometry>>,
    {
        let this = self;
        unsafe {
            (::windows::core::Vtable::vtable(this).SetGeometry)(
                ::windows::core::Vtable::as_raw(this),
                value.into().abi(),
            )
            .ok()
        }
    }
    pub fn ViewBox(&self) -> ::windows::core::Result<CompositionViewBox> {
        let this = self;
        unsafe {
            let mut result__ = ::core::mem::MaybeUninit::zeroed();
            (::windows::core::Vtable::vtable(this).ViewBox)(
                ::windows::core::Vtable::as_raw(this),
                result__.as_mut_ptr(),
            )
            .from_abi::<CompositionViewBox>(result__)
        }
    }
    pub fn SetViewBox(&self, value: &CompositionViewBox) -> ::windows::core::Result<()> {
        let this = self;
        unsafe {
            (::windows::core::Vtable::vtable(this).SetViewBox)(
                ::windows::core::Vtable::as_raw(this),
                ::core::mem::transmute_copy(value),
            )
            .ok()
        }
    }
    pub fn Compositor(&self) -> ::windows::core::Result<Compositor> {
        let this = &::windows::core::Interface::cast::<ICompositionObject>(self)?;
        unsafe {
            let mut result__ = ::core::mem::MaybeUninit::zeroed();
            (::windows::core::Vtable::vtable(this).Compositor)(
                ::windows::core::Vtable::as_raw(this),
                result__.as_mut_ptr(),
            )
            .from_abi::<Compositor>(result__)
        }
    }
    pub fn Properties(&self) -> ::windows::core::Result<CompositionPropertySet> {
        let this = &::windows::core::Interface::cast::<ICompositionObject>(self)?;
        unsafe {
            let mut result__ = ::core::mem::MaybeUninit::zeroed();
            (::windows::core::Vtable::vtable(this).Properties)(
                ::windows::core::Vtable::as_raw(this),
                result__.as_mut_ptr(),
            )
            .from_abi::<CompositionPropertySet>(result__)
        }
    }
    pub fn StartAnimation<'a, P0>(
        &self,
        propertyname: &::windows::core::HSTRING,
        animation: P0,
    ) -> ::windows::core::Result<()>
    where
        P0: ::std::convert::Into<::windows::core::InParam<'a, CompositionAnimation>>,
    {
        let this = &::windows::core::Interface::cast::<ICompositionObject>(self)?;
        unsafe {
            (::windows::core::Vtable::vtable(this).StartAnimation)(
                ::windows::core::Vtable::as_raw(this),
                ::core::mem::transmute_copy(propertyname),
                animation.into().abi(),
            )
            .ok()
        }
    }
    pub fn StopAnimation(
        &self,
        propertyname: &::windows::core::HSTRING,
    ) -> ::windows::core::Result<()> {
        let this = &::windows::core::Interface::cast::<ICompositionObject>(self)?;
        unsafe {
            (::windows::core::Vtable::vtable(this).StopAnimation)(
                ::windows::core::Vtable::as_raw(this),
                ::core::mem::transmute_copy(propertyname),
            )
            .ok()
        }
    }
    pub fn Comment(&self) -> ::windows::core::Result<::windows::core::HSTRING> {
        let this = &::windows::core::Interface::cast::<ICompositionObject2>(self)?;
        unsafe {
            let mut result__ = ::core::mem::MaybeUninit::zeroed();
            (::windows::core::Vtable::vtable(this).Comment)(
                ::windows::core::Vtable::as_raw(this),
                result__.as_mut_ptr(),
            )
            .from_abi::<::windows::core::HSTRING>(result__)
        }
    }
    pub fn SetComment(&self, value: &::windows::core::HSTRING) -> ::windows::core::Result<()> {
        let this = &::windows::core::Interface::cast::<ICompositionObject2>(self)?;
        unsafe {
            (::windows::core::Vtable::vtable(this).SetComment)(
                ::windows::core::Vtable::as_raw(this),
                ::core::mem::transmute_copy(value),
            )
            .ok()
        }
    }
    pub fn ImplicitAnimations(&self) -> ::windows::core::Result<ImplicitAnimationCollection> {
        let this = &::windows::core::Interface::cast::<ICompositionObject2>(self)?;
        unsafe {
            let mut result__ = ::core::mem::MaybeUninit::zeroed();
            (::windows::core::Vtable::vtable(this).ImplicitAnimations)(
                ::windows::core::Vtable::as_raw(this),
                result__.as_mut_ptr(),
            )
            .from_abi::<ImplicitAnimationCollection>(result__)
        }
    }
    pub fn SetImplicitAnimations(
        &self,
        value: &ImplicitAnimationCollection,
    ) -> ::windows::core::Result<()> {
        let this = &::windows::core::Interface::cast::<ICompositionObject2>(self)?;
        unsafe {
            (::windows::core::Vtable::vtable(this).SetImplicitAnimations)(
                ::windows::core::Vtable::as_raw(this),
                ::core::mem::transmute_copy(value),
            )
            .ok()
        }
    }
    pub fn StartAnimationGroup<'a, P0, E0>(&self, value: P0) -> ::windows::core::Result<()>
    where
        P0: ::std::convert::TryInto<
            ::windows::core::InParam<'a, ICompositionAnimationBase>,
            Error = E0,
        >,
        E0: ::std::convert::Into<::windows::core::Error>,
    {
        let this = &::windows::core::Interface::cast::<ICompositionObject2>(self)?;
        unsafe {
            (::windows::core::Vtable::vtable(this).StartAnimationGroup)(
                ::windows::core::Vtable::as_raw(this),
                value.try_into().map_err(|e| e.into())?.abi(),
            )
            .ok()
        }
    }
    pub fn StopAnimationGroup<'a, P0, E0>(&self, value: P0) -> ::windows::core::Result<()>
    where
        P0: ::std::convert::TryInto<
            ::windows::core::InParam<'a, ICompositionAnimationBase>,
            Error = E0,
        >,
        E0: ::std::convert::Into<::windows::core::Error>,
    {
        let this = &::windows::core::Interface::cast::<ICompositionObject2>(self)?;
        unsafe {
            (::windows::core::Vtable::vtable(this).StopAnimationGroup)(
                ::windows::core::Vtable::as_raw(this),
                value.try_into().map_err(|e| e.into())?.abi(),
            )
            .ok()
        }
    }
    #[doc = "*Required features: `\"UI_Dispatching\"`*"]
    #[cfg(feature = "UI_Dispatching")]
    pub fn DispatcherQueue(&self) -> ::windows::core::Result<super::Dispatching::DispatcherQueue> {
        let this = &::windows::core::Interface::cast::<ICompositionObject3>(self)?;
        unsafe {
            let mut result__ = ::core::mem::MaybeUninit::zeroed();
            (::windows::core::Vtable::vtable(this).DispatcherQueue)(
                ::windows::core::Vtable::as_raw(this),
                result__.as_mut_ptr(),
            )
            .from_abi::<super::Dispatching::DispatcherQueue>(result__)
        }
    }
    pub fn TryGetAnimationController(
        &self,
        propertyname: &::windows::core::HSTRING,
    ) -> ::windows::core::Result<AnimationController> {
        let this = &::windows::core::Interface::cast::<ICompositionObject4>(self)?;
        unsafe {
            let mut result__ = ::core::mem::MaybeUninit::zeroed();
            (::windows::core::Vtable::vtable(this).TryGetAnimationController)(
                ::windows::core::Vtable::as_raw(this),
                ::core::mem::transmute_copy(propertyname),
                result__.as_mut_ptr(),
            )
            .from_abi::<AnimationController>(result__)
        }
    }
    pub fn StartAnimationWithController<'a, P0>(
        &self,
        propertyname: &::windows::core::HSTRING,
        animation: P0,
        animationcontroller: &AnimationController,
    ) -> ::windows::core::Result<()>
    where
        P0: ::std::convert::Into<::windows::core::InParam<'a, CompositionAnimation>>,
    {
        let this = &::windows::core::Interface::cast::<ICompositionObject5>(self)?;
        unsafe {
            (::windows::core::Vtable::vtable(this).StartAnimationWithController)(
                ::windows::core::Vtable::as_raw(this),
                ::core::mem::transmute_copy(propertyname),
                animation.into().abi(),
                ::core::mem::transmute_copy(animationcontroller),
            )
            .ok()
        }
    }
}
impl ::core::clone::Clone for CompositionGeometricClip {
    fn clone(&self) -> Self {
        Self(self.0.clone())
    }
}
impl ::core::cmp::PartialEq for CompositionGeometricClip {
    fn eq(&self, other: &Self) -> bool {
        self.0 == other.0
    }
}
impl ::core::cmp::Eq for CompositionGeometricClip {}
impl ::core::fmt::Debug for CompositionGeometricClip {
    fn fmt(&self, f: &mut ::core::fmt::Formatter<'_>) -> ::core::fmt::Result {
        f.debug_tuple("CompositionGeometricClip").field(&self.0).finish()
    }
}
unsafe impl ::windows::core::RuntimeType for CompositionGeometricClip {
    const SIGNATURE : ::windows::core::ConstBuffer = ::windows::core::ConstBuffer::from_slice ( b"rc(Microsoft.UI.Composition.CompositionGeometricClip;{e3c0a8c5-5297-5d69-8b91-f5330bb1cb27})" ) ;
    type DefaultType = ::core::option::Option<Self>;
    fn from_default(from: &Self::DefaultType) -> ::windows::core::Result<Self> {
        from.as_ref().cloned().ok_or(::windows::core::Error::OK)
    }
}
unsafe impl ::windows::core::Vtable for CompositionGeometricClip {
    type Vtable = ICompositionGeometricClip_Vtbl;
}
unsafe impl ::windows::core::Interface for CompositionGeometricClip {
    const IID: ::windows::core::GUID =
        <ICompositionGeometricClip as ::windows::core::Interface>::IID;
}
impl ::windows::core::RuntimeName for CompositionGeometricClip {
    const NAME: &'static str = "Microsoft.UI.Composition.CompositionGeometricClip";
}
::windows::core::interface_hierarchy!(
    CompositionGeometricClip,
    ::windows::core::IUnknown,
    ::windows::core::IInspectable
);
impl ::core::convert::TryFrom<CompositionGeometricClip> for IAnimationObject {
    type Error = ::windows::core::Error;
    fn try_from(value: CompositionGeometricClip) -> ::windows::core::Result<Self> {
        ::core::convert::TryFrom::try_from(&value)
    }
}
impl ::core::convert::TryFrom<&CompositionGeometricClip> for IAnimationObject {
    type Error = ::windows::core::Error;
    fn try_from(value: &CompositionGeometricClip) -> ::windows::core::Result<Self> {
        ::windows::core::Interface::cast(value)
    }
}
impl<'a> ::core::convert::TryFrom<&CompositionGeometricClip>
    for ::windows::core::InParam<'a, IAnimationObject>
{
    type Error = ::windows::core::Error;
    fn try_from(value: &CompositionGeometricClip) -> ::windows::core::Result<Self> {
        let item = ::std::convert::TryInto::try_into(value)?;
        Ok(::windows::core::InParam::owned(item))
    }
}
impl ::core::convert::TryFrom<CompositionGeometricClip> for ::windows::Foundation::IClosable {
    type Error = ::windows::core::Error;
    fn try_from(value: CompositionGeometricClip) -> ::windows::core::Result<Self> {
        ::core::convert::TryFrom::try_from(&value)
    }
}
impl ::core::convert::TryFrom<&CompositionGeometricClip> for ::windows::Foundation::IClosable {
    type Error = ::windows::core::Error;
    fn try_from(value: &CompositionGeometricClip) -> ::windows::core::Result<Self> {
        ::windows::core::Interface::cast(value)
    }
}
impl<'a> ::core::convert::TryFrom<&CompositionGeometricClip>
    for ::windows::core::InParam<'a, ::windows::Foundation::IClosable>
{
    type Error = ::windows::core::Error;
    fn try_from(value: &CompositionGeometricClip) -> ::windows::core::Result<Self> {
        let item = ::std::convert::TryInto::try_into(value)?;
        Ok(::windows::core::InParam::owned(item))
    }
}
impl ::core::convert::From<CompositionGeometricClip> for CompositionClip {
    fn from(value: CompositionGeometricClip) -> Self {
        ::core::convert::From::from(&value)
    }
}
impl ::core::convert::From<&CompositionGeometricClip> for CompositionClip {
    fn from(value: &CompositionGeometricClip) -> Self {
        ::windows::core::Interface::cast(value).unwrap()
    }
}
impl<'a> ::core::convert::From<&CompositionGeometricClip>
    for ::windows::core::InParam<'a, CompositionClip>
{
    fn from(value: &CompositionGeometricClip) -> Self {
        ::windows::core::InParam::owned(value.into())
    }
}
impl ::core::convert::From<CompositionGeometricClip> for CompositionObject {
    fn from(value: CompositionGeometricClip) -> Self {
        ::core::convert::From::from(&value)
    }
}
impl ::core::convert::From<&CompositionGeometricClip> for CompositionObject {
    fn from(value: &CompositionGeometricClip) -> Self {
        ::windows::core::Interface::cast(value).unwrap()
    }
}
impl<'a> ::core::convert::From<&CompositionGeometricClip>
    for ::windows::core::InParam<'a, CompositionObject>
{
    fn from(value: &CompositionGeometricClip) -> Self {
        ::windows::core::InParam::owned(value.into())
    }
}
unsafe impl ::core::marker::Send for CompositionGeometricClip {}
unsafe impl ::core::marker::Sync for CompositionGeometricClip {}
#[doc = "*Required features: `\"UI_Composition\"`*"]
#[repr(transparent)]
pub struct CompositionGeometry(::windows::core::IUnknown);
impl CompositionGeometry {
    pub fn PopulatePropertyInfo(
        &self,
        propertyname: &::windows::core::HSTRING,
        propertyinfo: &AnimationPropertyInfo,
    ) -> ::windows::core::Result<()> {
        let this = &::windows::core::Interface::cast::<IAnimationObject>(self)?;
        unsafe {
            (::windows::core::Vtable::vtable(this).PopulatePropertyInfo)(
                ::windows::core::Vtable::as_raw(this),
                ::core::mem::transmute_copy(propertyname),
                ::core::mem::transmute_copy(propertyinfo),
            )
            .ok()
        }
    }
    pub fn Close(&self) -> ::windows::core::Result<()> {
        let this = &::windows::core::Interface::cast::<::windows::Foundation::IClosable>(self)?;
        unsafe {
            (::windows::core::Vtable::vtable(this).Close)(::windows::core::Vtable::as_raw(this))
                .ok()
        }
    }
    pub fn TrimEnd(&self) -> ::windows::core::Result<f32> {
        let this = self;
        unsafe {
            let mut result__ = ::core::mem::MaybeUninit::zeroed();
            (::windows::core::Vtable::vtable(this).TrimEnd)(
                ::windows::core::Vtable::as_raw(this),
                result__.as_mut_ptr(),
            )
            .from_abi::<f32>(result__)
        }
    }
    pub fn SetTrimEnd(&self, value: f32) -> ::windows::core::Result<()> {
        let this = self;
        unsafe {
            (::windows::core::Vtable::vtable(this).SetTrimEnd)(
                ::windows::core::Vtable::as_raw(this),
                value,
            )
            .ok()
        }
    }
    pub fn TrimOffset(&self) -> ::windows::core::Result<f32> {
        let this = self;
        unsafe {
            let mut result__ = ::core::mem::MaybeUninit::zeroed();
            (::windows::core::Vtable::vtable(this).TrimOffset)(
                ::windows::core::Vtable::as_raw(this),
                result__.as_mut_ptr(),
            )
            .from_abi::<f32>(result__)
        }
    }
    pub fn SetTrimOffset(&self, value: f32) -> ::windows::core::Result<()> {
        let this = self;
        unsafe {
            (::windows::core::Vtable::vtable(this).SetTrimOffset)(
                ::windows::core::Vtable::as_raw(this),
                value,
            )
            .ok()
        }
    }
    pub fn TrimStart(&self) -> ::windows::core::Result<f32> {
        let this = self;
        unsafe {
            let mut result__ = ::core::mem::MaybeUninit::zeroed();
            (::windows::core::Vtable::vtable(this).TrimStart)(
                ::windows::core::Vtable::as_raw(this),
                result__.as_mut_ptr(),
            )
            .from_abi::<f32>(result__)
        }
    }
    pub fn SetTrimStart(&self, value: f32) -> ::windows::core::Result<()> {
        let this = self;
        unsafe {
            (::windows::core::Vtable::vtable(this).SetTrimStart)(
                ::windows::core::Vtable::as_raw(this),
                value,
            )
            .ok()
        }
    }
    pub fn Compositor(&self) -> ::windows::core::Result<Compositor> {
        let this = &::windows::core::Interface::cast::<ICompositionObject>(self)?;
        unsafe {
            let mut result__ = ::core::mem::MaybeUninit::zeroed();
            (::windows::core::Vtable::vtable(this).Compositor)(
                ::windows::core::Vtable::as_raw(this),
                result__.as_mut_ptr(),
            )
            .from_abi::<Compositor>(result__)
        }
    }
    pub fn Properties(&self) -> ::windows::core::Result<CompositionPropertySet> {
        let this = &::windows::core::Interface::cast::<ICompositionObject>(self)?;
        unsafe {
            let mut result__ = ::core::mem::MaybeUninit::zeroed();
            (::windows::core::Vtable::vtable(this).Properties)(
                ::windows::core::Vtable::as_raw(this),
                result__.as_mut_ptr(),
            )
            .from_abi::<CompositionPropertySet>(result__)
        }
    }
    pub fn StartAnimation<'a, P0>(
        &self,
        propertyname: &::windows::core::HSTRING,
        animation: P0,
    ) -> ::windows::core::Result<()>
    where
        P0: ::std::convert::Into<::windows::core::InParam<'a, CompositionAnimation>>,
    {
        let this = &::windows::core::Interface::cast::<ICompositionObject>(self)?;
        unsafe {
            (::windows::core::Vtable::vtable(this).StartAnimation)(
                ::windows::core::Vtable::as_raw(this),
                ::core::mem::transmute_copy(propertyname),
                animation.into().abi(),
            )
            .ok()
        }
    }
    pub fn StopAnimation(
        &self,
        propertyname: &::windows::core::HSTRING,
    ) -> ::windows::core::Result<()> {
        let this = &::windows::core::Interface::cast::<ICompositionObject>(self)?;
        unsafe {
            (::windows::core::Vtable::vtable(this).StopAnimation)(
                ::windows::core::Vtable::as_raw(this),
                ::core::mem::transmute_copy(propertyname),
            )
            .ok()
        }
    }
    pub fn Comment(&self) -> ::windows::core::Result<::windows::core::HSTRING> {
        let this = &::windows::core::Interface::cast::<ICompositionObject2>(self)?;
        unsafe {
            let mut result__ = ::core::mem::MaybeUninit::zeroed();
            (::windows::core::Vtable::vtable(this).Comment)(
                ::windows::core::Vtable::as_raw(this),
                result__.as_mut_ptr(),
            )
            .from_abi::<::windows::core::HSTRING>(result__)
        }
    }
    pub fn SetComment(&self, value: &::windows::core::HSTRING) -> ::windows::core::Result<()> {
        let this = &::windows::core::Interface::cast::<ICompositionObject2>(self)?;
        unsafe {
            (::windows::core::Vtable::vtable(this).SetComment)(
                ::windows::core::Vtable::as_raw(this),
                ::core::mem::transmute_copy(value),
            )
            .ok()
        }
    }
    pub fn ImplicitAnimations(&self) -> ::windows::core::Result<ImplicitAnimationCollection> {
        let this = &::windows::core::Interface::cast::<ICompositionObject2>(self)?;
        unsafe {
            let mut result__ = ::core::mem::MaybeUninit::zeroed();
            (::windows::core::Vtable::vtable(this).ImplicitAnimations)(
                ::windows::core::Vtable::as_raw(this),
                result__.as_mut_ptr(),
            )
            .from_abi::<ImplicitAnimationCollection>(result__)
        }
    }
    pub fn SetImplicitAnimations(
        &self,
        value: &ImplicitAnimationCollection,
    ) -> ::windows::core::Result<()> {
        let this = &::windows::core::Interface::cast::<ICompositionObject2>(self)?;
        unsafe {
            (::windows::core::Vtable::vtable(this).SetImplicitAnimations)(
                ::windows::core::Vtable::as_raw(this),
                ::core::mem::transmute_copy(value),
            )
            .ok()
        }
    }
    pub fn StartAnimationGroup<'a, P0, E0>(&self, value: P0) -> ::windows::core::Result<()>
    where
        P0: ::std::convert::TryInto<
            ::windows::core::InParam<'a, ICompositionAnimationBase>,
            Error = E0,
        >,
        E0: ::std::convert::Into<::windows::core::Error>,
    {
        let this = &::windows::core::Interface::cast::<ICompositionObject2>(self)?;
        unsafe {
            (::windows::core::Vtable::vtable(this).StartAnimationGroup)(
                ::windows::core::Vtable::as_raw(this),
                value.try_into().map_err(|e| e.into())?.abi(),
            )
            .ok()
        }
    }
    pub fn StopAnimationGroup<'a, P0, E0>(&self, value: P0) -> ::windows::core::Result<()>
    where
        P0: ::std::convert::TryInto<
            ::windows::core::InParam<'a, ICompositionAnimationBase>,
            Error = E0,
        >,
        E0: ::std::convert::Into<::windows::core::Error>,
    {
        let this = &::windows::core::Interface::cast::<ICompositionObject2>(self)?;
        unsafe {
            (::windows::core::Vtable::vtable(this).StopAnimationGroup)(
                ::windows::core::Vtable::as_raw(this),
                value.try_into().map_err(|e| e.into())?.abi(),
            )
            .ok()
        }
    }
    #[doc = "*Required features: `\"UI_Dispatching\"`*"]
    #[cfg(feature = "UI_Dispatching")]
    pub fn DispatcherQueue(&self) -> ::windows::core::Result<super::Dispatching::DispatcherQueue> {
        let this = &::windows::core::Interface::cast::<ICompositionObject3>(self)?;
        unsafe {
            let mut result__ = ::core::mem::MaybeUninit::zeroed();
            (::windows::core::Vtable::vtable(this).DispatcherQueue)(
                ::windows::core::Vtable::as_raw(this),
                result__.as_mut_ptr(),
            )
            .from_abi::<super::Dispatching::DispatcherQueue>(result__)
        }
    }
    pub fn TryGetAnimationController(
        &self,
        propertyname: &::windows::core::HSTRING,
    ) -> ::windows::core::Result<AnimationController> {
        let this = &::windows::core::Interface::cast::<ICompositionObject4>(self)?;
        unsafe {
            let mut result__ = ::core::mem::MaybeUninit::zeroed();
            (::windows::core::Vtable::vtable(this).TryGetAnimationController)(
                ::windows::core::Vtable::as_raw(this),
                ::core::mem::transmute_copy(propertyname),
                result__.as_mut_ptr(),
            )
            .from_abi::<AnimationController>(result__)
        }
    }
    pub fn StartAnimationWithController<'a, P0>(
        &self,
        propertyname: &::windows::core::HSTRING,
        animation: P0,
        animationcontroller: &AnimationController,
    ) -> ::windows::core::Result<()>
    where
        P0: ::std::convert::Into<::windows::core::InParam<'a, CompositionAnimation>>,
    {
        let this = &::windows::core::Interface::cast::<ICompositionObject5>(self)?;
        unsafe {
            (::windows::core::Vtable::vtable(this).StartAnimationWithController)(
                ::windows::core::Vtable::as_raw(this),
                ::core::mem::transmute_copy(propertyname),
                animation.into().abi(),
                ::core::mem::transmute_copy(animationcontroller),
            )
            .ok()
        }
    }
}
impl ::core::clone::Clone for CompositionGeometry {
    fn clone(&self) -> Self {
        Self(self.0.clone())
    }
}
impl ::core::cmp::PartialEq for CompositionGeometry {
    fn eq(&self, other: &Self) -> bool {
        self.0 == other.0
    }
}
impl ::core::cmp::Eq for CompositionGeometry {}
impl ::core::fmt::Debug for CompositionGeometry {
    fn fmt(&self, f: &mut ::core::fmt::Formatter<'_>) -> ::core::fmt::Result {
        f.debug_tuple("CompositionGeometry").field(&self.0).finish()
    }
}
unsafe impl ::windows::core::RuntimeType for CompositionGeometry {
    const SIGNATURE: ::windows::core::ConstBuffer = ::windows::core::ConstBuffer::from_slice(
        b"rc(Microsoft.UI.Composition.CompositionGeometry;{4e40bdb2-450b-5a81-9e9b-149417980cc4})",
    );
    type DefaultType = ::core::option::Option<Self>;
    fn from_default(from: &Self::DefaultType) -> ::windows::core::Result<Self> {
        from.as_ref().cloned().ok_or(::windows::core::Error::OK)
    }
}
unsafe impl ::windows::core::Vtable for CompositionGeometry {
    type Vtable = ICompositionGeometry_Vtbl;
}
unsafe impl ::windows::core::Interface for CompositionGeometry {
    const IID: ::windows::core::GUID = <ICompositionGeometry as ::windows::core::Interface>::IID;
}
impl ::windows::core::RuntimeName for CompositionGeometry {
    const NAME: &'static str = "Microsoft.UI.Composition.CompositionGeometry";
}
::windows::core::interface_hierarchy!(
    CompositionGeometry,
    ::windows::core::IUnknown,
    ::windows::core::IInspectable
);
impl ::core::convert::TryFrom<CompositionGeometry> for IAnimationObject {
    type Error = ::windows::core::Error;
    fn try_from(value: CompositionGeometry) -> ::windows::core::Result<Self> {
        ::core::convert::TryFrom::try_from(&value)
    }
}
impl ::core::convert::TryFrom<&CompositionGeometry> for IAnimationObject {
    type Error = ::windows::core::Error;
    fn try_from(value: &CompositionGeometry) -> ::windows::core::Result<Self> {
        ::windows::core::Interface::cast(value)
    }
}
impl<'a> ::core::convert::TryFrom<&CompositionGeometry>
    for ::windows::core::InParam<'a, IAnimationObject>
{
    type Error = ::windows::core::Error;
    fn try_from(value: &CompositionGeometry) -> ::windows::core::Result<Self> {
        let item = ::std::convert::TryInto::try_into(value)?;
        Ok(::windows::core::InParam::owned(item))
    }
}
impl ::core::convert::TryFrom<CompositionGeometry> for ::windows::Foundation::IClosable {
    type Error = ::windows::core::Error;
    fn try_from(value: CompositionGeometry) -> ::windows::core::Result<Self> {
        ::core::convert::TryFrom::try_from(&value)
    }
}
impl ::core::convert::TryFrom<&CompositionGeometry> for ::windows::Foundation::IClosable {
    type Error = ::windows::core::Error;
    fn try_from(value: &CompositionGeometry) -> ::windows::core::Result<Self> {
        ::windows::core::Interface::cast(value)
    }
}
impl<'a> ::core::convert::TryFrom<&CompositionGeometry>
    for ::windows::core::InParam<'a, ::windows::Foundation::IClosable>
{
    type Error = ::windows::core::Error;
    fn try_from(value: &CompositionGeometry) -> ::windows::core::Result<Self> {
        let item = ::std::convert::TryInto::try_into(value)?;
        Ok(::windows::core::InParam::owned(item))
    }
}
impl ::core::convert::From<CompositionGeometry> for CompositionObject {
    fn from(value: CompositionGeometry) -> Self {
        ::core::convert::From::from(&value)
    }
}
impl ::core::convert::From<&CompositionGeometry> for CompositionObject {
    fn from(value: &CompositionGeometry) -> Self {
        ::windows::core::Interface::cast(value).unwrap()
    }
}
impl<'a> ::core::convert::From<&CompositionGeometry>
    for ::windows::core::InParam<'a, CompositionObject>
{
    fn from(value: &CompositionGeometry) -> Self {
        ::windows::core::InParam::owned(value.into())
    }
}
unsafe impl ::core::marker::Send for CompositionGeometry {}
unsafe impl ::core::marker::Sync for CompositionGeometry {}
#[doc = "*Required features: `\"UI_Composition\"`*"]
#[repr(transparent)]
pub struct CompositionGradientBrush(::windows::core::IUnknown);
impl CompositionGradientBrush {
    pub fn PopulatePropertyInfo(
        &self,
        propertyname: &::windows::core::HSTRING,
        propertyinfo: &AnimationPropertyInfo,
    ) -> ::windows::core::Result<()> {
        let this = &::windows::core::Interface::cast::<IAnimationObject>(self)?;
        unsafe {
            (::windows::core::Vtable::vtable(this).PopulatePropertyInfo)(
                ::windows::core::Vtable::as_raw(this),
                ::core::mem::transmute_copy(propertyname),
                ::core::mem::transmute_copy(propertyinfo),
            )
            .ok()
        }
    }
    pub fn Close(&self) -> ::windows::core::Result<()> {
        let this = &::windows::core::Interface::cast::<::windows::Foundation::IClosable>(self)?;
        unsafe {
            (::windows::core::Vtable::vtable(this).Close)(::windows::core::Vtable::as_raw(this))
                .ok()
        }
    }
    pub fn AnchorPoint(&self) -> ::windows::core::Result<::windows::Foundation::Numerics::Vector2> {
        let this = self;
        unsafe {
            let mut result__ = ::core::mem::MaybeUninit::zeroed();
            (::windows::core::Vtable::vtable(this).AnchorPoint)(
                ::windows::core::Vtable::as_raw(this),
                result__.as_mut_ptr(),
            )
            .from_abi::<::windows::Foundation::Numerics::Vector2>(result__)
        }
    }
    pub fn SetAnchorPoint(
        &self,
        value: ::windows::Foundation::Numerics::Vector2,
    ) -> ::windows::core::Result<()> {
        let this = self;
        unsafe {
            (::windows::core::Vtable::vtable(this).SetAnchorPoint)(
                ::windows::core::Vtable::as_raw(this),
                value,
            )
            .ok()
        }
    }
    pub fn CenterPoint(&self) -> ::windows::core::Result<::windows::Foundation::Numerics::Vector2> {
        let this = self;
        unsafe {
            let mut result__ = ::core::mem::MaybeUninit::zeroed();
            (::windows::core::Vtable::vtable(this).CenterPoint)(
                ::windows::core::Vtable::as_raw(this),
                result__.as_mut_ptr(),
            )
            .from_abi::<::windows::Foundation::Numerics::Vector2>(result__)
        }
    }
    pub fn SetCenterPoint(
        &self,
        value: ::windows::Foundation::Numerics::Vector2,
    ) -> ::windows::core::Result<()> {
        let this = self;
        unsafe {
            (::windows::core::Vtable::vtable(this).SetCenterPoint)(
                ::windows::core::Vtable::as_raw(this),
                value,
            )
            .ok()
        }
    }
    pub fn ColorStops(&self) -> ::windows::core::Result<CompositionColorGradientStopCollection> {
        let this = self;
        unsafe {
            let mut result__ = ::core::mem::MaybeUninit::zeroed();
            (::windows::core::Vtable::vtable(this).ColorStops)(
                ::windows::core::Vtable::as_raw(this),
                result__.as_mut_ptr(),
            )
            .from_abi::<CompositionColorGradientStopCollection>(result__)
        }
    }
    pub fn ExtendMode(&self) -> ::windows::core::Result<CompositionGradientExtendMode> {
        let this = self;
        unsafe {
            let mut result__ = ::core::mem::MaybeUninit::zeroed();
            (::windows::core::Vtable::vtable(this).ExtendMode)(
                ::windows::core::Vtable::as_raw(this),
                result__.as_mut_ptr(),
            )
            .from_abi::<CompositionGradientExtendMode>(result__)
        }
    }
    pub fn SetExtendMode(
        &self,
        value: CompositionGradientExtendMode,
    ) -> ::windows::core::Result<()> {
        let this = self;
        unsafe {
            (::windows::core::Vtable::vtable(this).SetExtendMode)(
                ::windows::core::Vtable::as_raw(this),
                value,
            )
            .ok()
        }
    }
    pub fn InterpolationSpace(&self) -> ::windows::core::Result<CompositionColorSpace> {
        let this = self;
        unsafe {
            let mut result__ = ::core::mem::MaybeUninit::zeroed();
            (::windows::core::Vtable::vtable(this).InterpolationSpace)(
                ::windows::core::Vtable::as_raw(this),
                result__.as_mut_ptr(),
            )
            .from_abi::<CompositionColorSpace>(result__)
        }
    }
    pub fn SetInterpolationSpace(
        &self,
        value: CompositionColorSpace,
    ) -> ::windows::core::Result<()> {
        let this = self;
        unsafe {
            (::windows::core::Vtable::vtable(this).SetInterpolationSpace)(
                ::windows::core::Vtable::as_raw(this),
                value,
            )
            .ok()
        }
    }
    pub fn Offset(&self) -> ::windows::core::Result<::windows::Foundation::Numerics::Vector2> {
        let this = self;
        unsafe {
            let mut result__ = ::core::mem::MaybeUninit::zeroed();
            (::windows::core::Vtable::vtable(this).Offset)(
                ::windows::core::Vtable::as_raw(this),
                result__.as_mut_ptr(),
            )
            .from_abi::<::windows::Foundation::Numerics::Vector2>(result__)
        }
    }
    pub fn SetOffset(
        &self,
        value: ::windows::Foundation::Numerics::Vector2,
    ) -> ::windows::core::Result<()> {
        let this = self;
        unsafe {
            (::windows::core::Vtable::vtable(this).SetOffset)(
                ::windows::core::Vtable::as_raw(this),
                value,
            )
            .ok()
        }
    }
    pub fn RotationAngle(&self) -> ::windows::core::Result<f32> {
        let this = self;
        unsafe {
            let mut result__ = ::core::mem::MaybeUninit::zeroed();
            (::windows::core::Vtable::vtable(this).RotationAngle)(
                ::windows::core::Vtable::as_raw(this),
                result__.as_mut_ptr(),
            )
            .from_abi::<f32>(result__)
        }
    }
    pub fn SetRotationAngle(&self, value: f32) -> ::windows::core::Result<()> {
        let this = self;
        unsafe {
            (::windows::core::Vtable::vtable(this).SetRotationAngle)(
                ::windows::core::Vtable::as_raw(this),
                value,
            )
            .ok()
        }
    }
    pub fn RotationAngleInDegrees(&self) -> ::windows::core::Result<f32> {
        let this = self;
        unsafe {
            let mut result__ = ::core::mem::MaybeUninit::zeroed();
            (::windows::core::Vtable::vtable(this).RotationAngleInDegrees)(
                ::windows::core::Vtable::as_raw(this),
                result__.as_mut_ptr(),
            )
            .from_abi::<f32>(result__)
        }
    }
    pub fn SetRotationAngleInDegrees(&self, value: f32) -> ::windows::core::Result<()> {
        let this = self;
        unsafe {
            (::windows::core::Vtable::vtable(this).SetRotationAngleInDegrees)(
                ::windows::core::Vtable::as_raw(this),
                value,
            )
            .ok()
        }
    }
    pub fn Scale(&self) -> ::windows::core::Result<::windows::Foundation::Numerics::Vector2> {
        let this = self;
        unsafe {
            let mut result__ = ::core::mem::MaybeUninit::zeroed();
            (::windows::core::Vtable::vtable(this).Scale)(
                ::windows::core::Vtable::as_raw(this),
                result__.as_mut_ptr(),
            )
            .from_abi::<::windows::Foundation::Numerics::Vector2>(result__)
        }
    }
    pub fn SetScale(
        &self,
        value: ::windows::Foundation::Numerics::Vector2,
    ) -> ::windows::core::Result<()> {
        let this = self;
        unsafe {
            (::windows::core::Vtable::vtable(this).SetScale)(
                ::windows::core::Vtable::as_raw(this),
                value,
            )
            .ok()
        }
    }
    pub fn TransformMatrix(
        &self,
    ) -> ::windows::core::Result<::windows::Foundation::Numerics::Matrix3x2> {
        let this = self;
        unsafe {
            let mut result__ = ::core::mem::MaybeUninit::zeroed();
            (::windows::core::Vtable::vtable(this).TransformMatrix)(
                ::windows::core::Vtable::as_raw(this),
                result__.as_mut_ptr(),
            )
            .from_abi::<::windows::Foundation::Numerics::Matrix3x2>(result__)
        }
    }
    pub fn SetTransformMatrix(
        &self,
        value: ::windows::Foundation::Numerics::Matrix3x2,
    ) -> ::windows::core::Result<()> {
        let this = self;
        unsafe {
            (::windows::core::Vtable::vtable(this).SetTransformMatrix)(
                ::windows::core::Vtable::as_raw(this),
                value,
            )
            .ok()
        }
    }
    pub fn MappingMode(&self) -> ::windows::core::Result<CompositionMappingMode> {
        let this = &::windows::core::Interface::cast::<ICompositionGradientBrush2>(self)?;
        unsafe {
            let mut result__ = ::core::mem::MaybeUninit::zeroed();
            (::windows::core::Vtable::vtable(this).MappingMode)(
                ::windows::core::Vtable::as_raw(this),
                result__.as_mut_ptr(),
            )
            .from_abi::<CompositionMappingMode>(result__)
        }
    }
    pub fn SetMappingMode(&self, value: CompositionMappingMode) -> ::windows::core::Result<()> {
        let this = &::windows::core::Interface::cast::<ICompositionGradientBrush2>(self)?;
        unsafe {
            (::windows::core::Vtable::vtable(this).SetMappingMode)(
                ::windows::core::Vtable::as_raw(this),
                value,
            )
            .ok()
        }
    }
    pub fn Compositor(&self) -> ::windows::core::Result<Compositor> {
        let this = &::windows::core::Interface::cast::<ICompositionObject>(self)?;
        unsafe {
            let mut result__ = ::core::mem::MaybeUninit::zeroed();
            (::windows::core::Vtable::vtable(this).Compositor)(
                ::windows::core::Vtable::as_raw(this),
                result__.as_mut_ptr(),
            )
            .from_abi::<Compositor>(result__)
        }
    }
    pub fn Properties(&self) -> ::windows::core::Result<CompositionPropertySet> {
        let this = &::windows::core::Interface::cast::<ICompositionObject>(self)?;
        unsafe {
            let mut result__ = ::core::mem::MaybeUninit::zeroed();
            (::windows::core::Vtable::vtable(this).Properties)(
                ::windows::core::Vtable::as_raw(this),
                result__.as_mut_ptr(),
            )
            .from_abi::<CompositionPropertySet>(result__)
        }
    }
    pub fn StartAnimation<'a, P0>(
        &self,
        propertyname: &::windows::core::HSTRING,
        animation: P0,
    ) -> ::windows::core::Result<()>
    where
        P0: ::std::convert::Into<::windows::core::InParam<'a, CompositionAnimation>>,
    {
        let this = &::windows::core::Interface::cast::<ICompositionObject>(self)?;
        unsafe {
            (::windows::core::Vtable::vtable(this).StartAnimation)(
                ::windows::core::Vtable::as_raw(this),
                ::core::mem::transmute_copy(propertyname),
                animation.into().abi(),
            )
            .ok()
        }
    }
    pub fn StopAnimation(
        &self,
        propertyname: &::windows::core::HSTRING,
    ) -> ::windows::core::Result<()> {
        let this = &::windows::core::Interface::cast::<ICompositionObject>(self)?;
        unsafe {
            (::windows::core::Vtable::vtable(this).StopAnimation)(
                ::windows::core::Vtable::as_raw(this),
                ::core::mem::transmute_copy(propertyname),
            )
            .ok()
        }
    }
    pub fn Comment(&self) -> ::windows::core::Result<::windows::core::HSTRING> {
        let this = &::windows::core::Interface::cast::<ICompositionObject2>(self)?;
        unsafe {
            let mut result__ = ::core::mem::MaybeUninit::zeroed();
            (::windows::core::Vtable::vtable(this).Comment)(
                ::windows::core::Vtable::as_raw(this),
                result__.as_mut_ptr(),
            )
            .from_abi::<::windows::core::HSTRING>(result__)
        }
    }
    pub fn SetComment(&self, value: &::windows::core::HSTRING) -> ::windows::core::Result<()> {
        let this = &::windows::core::Interface::cast::<ICompositionObject2>(self)?;
        unsafe {
            (::windows::core::Vtable::vtable(this).SetComment)(
                ::windows::core::Vtable::as_raw(this),
                ::core::mem::transmute_copy(value),
            )
            .ok()
        }
    }
    pub fn ImplicitAnimations(&self) -> ::windows::core::Result<ImplicitAnimationCollection> {
        let this = &::windows::core::Interface::cast::<ICompositionObject2>(self)?;
        unsafe {
            let mut result__ = ::core::mem::MaybeUninit::zeroed();
            (::windows::core::Vtable::vtable(this).ImplicitAnimations)(
                ::windows::core::Vtable::as_raw(this),
                result__.as_mut_ptr(),
            )
            .from_abi::<ImplicitAnimationCollection>(result__)
        }
    }
    pub fn SetImplicitAnimations(
        &self,
        value: &ImplicitAnimationCollection,
    ) -> ::windows::core::Result<()> {
        let this = &::windows::core::Interface::cast::<ICompositionObject2>(self)?;
        unsafe {
            (::windows::core::Vtable::vtable(this).SetImplicitAnimations)(
                ::windows::core::Vtable::as_raw(this),
                ::core::mem::transmute_copy(value),
            )
            .ok()
        }
    }
    pub fn StartAnimationGroup<'a, P0, E0>(&self, value: P0) -> ::windows::core::Result<()>
    where
        P0: ::std::convert::TryInto<
            ::windows::core::InParam<'a, ICompositionAnimationBase>,
            Error = E0,
        >,
        E0: ::std::convert::Into<::windows::core::Error>,
    {
        let this = &::windows::core::Interface::cast::<ICompositionObject2>(self)?;
        unsafe {
            (::windows::core::Vtable::vtable(this).StartAnimationGroup)(
                ::windows::core::Vtable::as_raw(this),
                value.try_into().map_err(|e| e.into())?.abi(),
            )
            .ok()
        }
    }
    pub fn StopAnimationGroup<'a, P0, E0>(&self, value: P0) -> ::windows::core::Result<()>
    where
        P0: ::std::convert::TryInto<
            ::windows::core::InParam<'a, ICompositionAnimationBase>,
            Error = E0,
        >,
        E0: ::std::convert::Into<::windows::core::Error>,
    {
        let this = &::windows::core::Interface::cast::<ICompositionObject2>(self)?;
        unsafe {
            (::windows::core::Vtable::vtable(this).StopAnimationGroup)(
                ::windows::core::Vtable::as_raw(this),
                value.try_into().map_err(|e| e.into())?.abi(),
            )
            .ok()
        }
    }
    #[doc = "*Required features: `\"UI_Dispatching\"`*"]
    #[cfg(feature = "UI_Dispatching")]
    pub fn DispatcherQueue(&self) -> ::windows::core::Result<super::Dispatching::DispatcherQueue> {
        let this = &::windows::core::Interface::cast::<ICompositionObject3>(self)?;
        unsafe {
            let mut result__ = ::core::mem::MaybeUninit::zeroed();
            (::windows::core::Vtable::vtable(this).DispatcherQueue)(
                ::windows::core::Vtable::as_raw(this),
                result__.as_mut_ptr(),
            )
            .from_abi::<super::Dispatching::DispatcherQueue>(result__)
        }
    }
    pub fn TryGetAnimationController(
        &self,
        propertyname: &::windows::core::HSTRING,
    ) -> ::windows::core::Result<AnimationController> {
        let this = &::windows::core::Interface::cast::<ICompositionObject4>(self)?;
        unsafe {
            let mut result__ = ::core::mem::MaybeUninit::zeroed();
            (::windows::core::Vtable::vtable(this).TryGetAnimationController)(
                ::windows::core::Vtable::as_raw(this),
                ::core::mem::transmute_copy(propertyname),
                result__.as_mut_ptr(),
            )
            .from_abi::<AnimationController>(result__)
        }
    }
    pub fn StartAnimationWithController<'a, P0>(
        &self,
        propertyname: &::windows::core::HSTRING,
        animation: P0,
        animationcontroller: &AnimationController,
    ) -> ::windows::core::Result<()>
    where
        P0: ::std::convert::Into<::windows::core::InParam<'a, CompositionAnimation>>,
    {
        let this = &::windows::core::Interface::cast::<ICompositionObject5>(self)?;
        unsafe {
            (::windows::core::Vtable::vtable(this).StartAnimationWithController)(
                ::windows::core::Vtable::as_raw(this),
                ::core::mem::transmute_copy(propertyname),
                animation.into().abi(),
                ::core::mem::transmute_copy(animationcontroller),
            )
            .ok()
        }
    }
}
impl ::core::clone::Clone for CompositionGradientBrush {
    fn clone(&self) -> Self {
        Self(self.0.clone())
    }
}
impl ::core::cmp::PartialEq for CompositionGradientBrush {
    fn eq(&self, other: &Self) -> bool {
        self.0 == other.0
    }
}
impl ::core::cmp::Eq for CompositionGradientBrush {}
impl ::core::fmt::Debug for CompositionGradientBrush {
    fn fmt(&self, f: &mut ::core::fmt::Formatter<'_>) -> ::core::fmt::Result {
        f.debug_tuple("CompositionGradientBrush").field(&self.0).finish()
    }
}
unsafe impl ::windows::core::RuntimeType for CompositionGradientBrush {
    const SIGNATURE : ::windows::core::ConstBuffer = ::windows::core::ConstBuffer::from_slice ( b"rc(Microsoft.UI.Composition.CompositionGradientBrush;{9165d1fb-c738-5f44-addc-309ee071d588})" ) ;
    type DefaultType = ::core::option::Option<Self>;
    fn from_default(from: &Self::DefaultType) -> ::windows::core::Result<Self> {
        from.as_ref().cloned().ok_or(::windows::core::Error::OK)
    }
}
unsafe impl ::windows::core::Vtable for CompositionGradientBrush {
    type Vtable = ICompositionGradientBrush_Vtbl;
}
unsafe impl ::windows::core::Interface for CompositionGradientBrush {
    const IID: ::windows::core::GUID =
        <ICompositionGradientBrush as ::windows::core::Interface>::IID;
}
impl ::windows::core::RuntimeName for CompositionGradientBrush {
    const NAME: &'static str = "Microsoft.UI.Composition.CompositionGradientBrush";
}
::windows::core::interface_hierarchy!(
    CompositionGradientBrush,
    ::windows::core::IUnknown,
    ::windows::core::IInspectable
);
impl ::core::convert::TryFrom<CompositionGradientBrush> for IAnimationObject {
    type Error = ::windows::core::Error;
    fn try_from(value: CompositionGradientBrush) -> ::windows::core::Result<Self> {
        ::core::convert::TryFrom::try_from(&value)
    }
}
impl ::core::convert::TryFrom<&CompositionGradientBrush> for IAnimationObject {
    type Error = ::windows::core::Error;
    fn try_from(value: &CompositionGradientBrush) -> ::windows::core::Result<Self> {
        ::windows::core::Interface::cast(value)
    }
}
impl<'a> ::core::convert::TryFrom<&CompositionGradientBrush>
    for ::windows::core::InParam<'a, IAnimationObject>
{
    type Error = ::windows::core::Error;
    fn try_from(value: &CompositionGradientBrush) -> ::windows::core::Result<Self> {
        let item = ::std::convert::TryInto::try_into(value)?;
        Ok(::windows::core::InParam::owned(item))
    }
}
impl ::core::convert::TryFrom<CompositionGradientBrush> for ::windows::Foundation::IClosable {
    type Error = ::windows::core::Error;
    fn try_from(value: CompositionGradientBrush) -> ::windows::core::Result<Self> {
        ::core::convert::TryFrom::try_from(&value)
    }
}
impl ::core::convert::TryFrom<&CompositionGradientBrush> for ::windows::Foundation::IClosable {
    type Error = ::windows::core::Error;
    fn try_from(value: &CompositionGradientBrush) -> ::windows::core::Result<Self> {
        ::windows::core::Interface::cast(value)
    }
}
impl<'a> ::core::convert::TryFrom<&CompositionGradientBrush>
    for ::windows::core::InParam<'a, ::windows::Foundation::IClosable>
{
    type Error = ::windows::core::Error;
    fn try_from(value: &CompositionGradientBrush) -> ::windows::core::Result<Self> {
        let item = ::std::convert::TryInto::try_into(value)?;
        Ok(::windows::core::InParam::owned(item))
    }
}
impl ::core::convert::From<CompositionGradientBrush> for CompositionBrush {
    fn from(value: CompositionGradientBrush) -> Self {
        ::core::convert::From::from(&value)
    }
}
impl ::core::convert::From<&CompositionGradientBrush> for CompositionBrush {
    fn from(value: &CompositionGradientBrush) -> Self {
        ::windows::core::Interface::cast(value).unwrap()
    }
}
impl<'a> ::core::convert::From<&CompositionGradientBrush>
    for ::windows::core::InParam<'a, CompositionBrush>
{
    fn from(value: &CompositionGradientBrush) -> Self {
        ::windows::core::InParam::owned(value.into())
    }
}
impl ::core::convert::From<CompositionGradientBrush> for CompositionObject {
    fn from(value: CompositionGradientBrush) -> Self {
        ::core::convert::From::from(&value)
    }
}
impl ::core::convert::From<&CompositionGradientBrush> for CompositionObject {
    fn from(value: &CompositionGradientBrush) -> Self {
        ::windows::core::Interface::cast(value).unwrap()
    }
}
impl<'a> ::core::convert::From<&CompositionGradientBrush>
    for ::windows::core::InParam<'a, CompositionObject>
{
    fn from(value: &CompositionGradientBrush) -> Self {
        ::windows::core::InParam::owned(value.into())
    }
}
unsafe impl ::core::marker::Send for CompositionGradientBrush {}
unsafe impl ::core::marker::Sync for CompositionGradientBrush {}
#[doc = "*Required features: `\"UI_Composition\"`*"]
#[repr(transparent)]
pub struct CompositionGraphicsDevice(::windows::core::IUnknown);
impl CompositionGraphicsDevice {
    pub fn PopulatePropertyInfo(
        &self,
        propertyname: &::windows::core::HSTRING,
        propertyinfo: &AnimationPropertyInfo,
    ) -> ::windows::core::Result<()> {
        let this = &::windows::core::Interface::cast::<IAnimationObject>(self)?;
        unsafe {
            (::windows::core::Vtable::vtable(this).PopulatePropertyInfo)(
                ::windows::core::Vtable::as_raw(this),
                ::core::mem::transmute_copy(propertyname),
                ::core::mem::transmute_copy(propertyinfo),
            )
            .ok()
        }
    }
    pub fn Close(&self) -> ::windows::core::Result<()> {
        let this = &::windows::core::Interface::cast::<::windows::Foundation::IClosable>(self)?;
        unsafe {
            (::windows::core::Vtable::vtable(this).Close)(::windows::core::Vtable::as_raw(this))
                .ok()
        }
    }
    #[doc = "*Required features: `\"Graphics_DirectX\"`*"]
    #[cfg(feature = "Graphics_DirectX")]
    pub fn CreateDrawingSurface(
        &self,
        sizepixels: ::windows::Foundation::Size,
        pixelformat: super::super::Graphics::DirectX::DirectXPixelFormat,
        alphamode: super::super::Graphics::DirectX::DirectXAlphaMode,
    ) -> ::windows::core::Result<CompositionDrawingSurface> {
        let this = self;
        unsafe {
            let mut result__ = ::core::mem::MaybeUninit::zeroed();
            (::windows::core::Vtable::vtable(this).CreateDrawingSurface)(
                ::windows::core::Vtable::as_raw(this),
                sizepixels,
                pixelformat,
                alphamode,
                result__.as_mut_ptr(),
            )
            .from_abi::<CompositionDrawingSurface>(result__)
        }
    }
    pub fn RenderingDeviceReplaced(
        &self,
        handler: &::windows::Foundation::TypedEventHandler<
            CompositionGraphicsDevice,
            RenderingDeviceReplacedEventArgs,
        >,
    ) -> ::windows::core::Result<::windows::Foundation::EventRegistrationToken> {
        let this = self;
        unsafe {
            let mut result__ = ::core::mem::MaybeUninit::zeroed();
            (::windows::core::Vtable::vtable(this).RenderingDeviceReplaced)(
                ::windows::core::Vtable::as_raw(this),
                ::core::mem::transmute_copy(handler),
                result__.as_mut_ptr(),
            )
            .from_abi::<::windows::Foundation::EventRegistrationToken>(result__)
        }
    }
    pub fn RemoveRenderingDeviceReplaced(
        &self,
        token: ::windows::Foundation::EventRegistrationToken,
    ) -> ::windows::core::Result<()> {
        let this = self;
        unsafe {
            (::windows::core::Vtable::vtable(this).RemoveRenderingDeviceReplaced)(
                ::windows::core::Vtable::as_raw(this),
                token,
            )
            .ok()
        }
    }
    #[doc = "*Required features: `\"Graphics_DirectX\"`*"]
    #[cfg(feature = "Graphics_DirectX")]
    pub fn CreateDrawingSurface2(
        &self,
        sizepixels: ::windows::Graphics::SizeInt32,
        pixelformat: super::super::Graphics::DirectX::DirectXPixelFormat,
        alphamode: super::super::Graphics::DirectX::DirectXAlphaMode,
    ) -> ::windows::core::Result<CompositionDrawingSurface> {
        let this = &::windows::core::Interface::cast::<ICompositionGraphicsDevice2>(self)?;
        unsafe {
            let mut result__ = ::core::mem::MaybeUninit::zeroed();
            (::windows::core::Vtable::vtable(this).CreateDrawingSurface2)(
                ::windows::core::Vtable::as_raw(this),
                sizepixels,
                pixelformat,
                alphamode,
                result__.as_mut_ptr(),
            )
            .from_abi::<CompositionDrawingSurface>(result__)
        }
    }
    #[doc = "*Required features: `\"Graphics_DirectX\"`*"]
    #[cfg(feature = "Graphics_DirectX")]
    pub fn CreateVirtualDrawingSurface(
        &self,
        sizepixels: ::windows::Graphics::SizeInt32,
        pixelformat: super::super::Graphics::DirectX::DirectXPixelFormat,
        alphamode: super::super::Graphics::DirectX::DirectXAlphaMode,
    ) -> ::windows::core::Result<CompositionVirtualDrawingSurface> {
        let this = &::windows::core::Interface::cast::<ICompositionGraphicsDevice2>(self)?;
        unsafe {
            let mut result__ = ::core::mem::MaybeUninit::zeroed();
            (::windows::core::Vtable::vtable(this).CreateVirtualDrawingSurface)(
                ::windows::core::Vtable::as_raw(this),
                sizepixels,
                pixelformat,
                alphamode,
                result__.as_mut_ptr(),
            )
            .from_abi::<CompositionVirtualDrawingSurface>(result__)
        }
    }
    #[doc = "*Required features: `\"Graphics_DirectX\"`*"]
    #[cfg(feature = "Graphics_DirectX")]
    pub fn CreateMipmapSurface(
        &self,
        sizepixels: ::windows::Graphics::SizeInt32,
        pixelformat: super::super::Graphics::DirectX::DirectXPixelFormat,
        alphamode: super::super::Graphics::DirectX::DirectXAlphaMode,
    ) -> ::windows::core::Result<CompositionMipmapSurface> {
        let this = &::windows::core::Interface::cast::<ICompositionGraphicsDevice3>(self)?;
        unsafe {
            let mut result__ = ::core::mem::MaybeUninit::zeroed();
            (::windows::core::Vtable::vtable(this).CreateMipmapSurface)(
                ::windows::core::Vtable::as_raw(this),
                sizepixels,
                pixelformat,
                alphamode,
                result__.as_mut_ptr(),
            )
            .from_abi::<CompositionMipmapSurface>(result__)
        }
    }
    pub fn Trim(&self) -> ::windows::core::Result<()> {
        let this = &::windows::core::Interface::cast::<ICompositionGraphicsDevice3>(self)?;
        unsafe {
            (::windows::core::Vtable::vtable(this).Trim)(::windows::core::Vtable::as_raw(this)).ok()
        }
    }
    #[doc = "*Required features: `\"Graphics_DirectX\"`*"]
    #[cfg(feature = "Graphics_DirectX")]
    pub fn CaptureAsync<'a, P0>(
        &self,
        capturevisual: P0,
        size: ::windows::Graphics::SizeInt32,
        pixelformat: super::super::Graphics::DirectX::DirectXPixelFormat,
        alphamode: super::super::Graphics::DirectX::DirectXAlphaMode,
        sdrboost: f32,
    ) -> ::windows::core::Result<::windows::Foundation::IAsyncOperation<ICompositionSurface>>
    where
        P0: ::std::convert::Into<::windows::core::InParam<'a, Visual>>,
    {
        let this = &::windows::core::Interface::cast::<ICompositionGraphicsDevice4>(self)?;
        unsafe {
            let mut result__ = ::core::mem::MaybeUninit::zeroed();
            (::windows::core::Vtable::vtable(this).CaptureAsync)(
                ::windows::core::Vtable::as_raw(this),
                capturevisual.into().abi(),
                size,
                pixelformat,
                alphamode,
                sdrboost,
                result__.as_mut_ptr(),
            )
            .from_abi::<::windows::Foundation::IAsyncOperation<ICompositionSurface>>(result__)
        }
    }
    pub fn Compositor(&self) -> ::windows::core::Result<Compositor> {
        let this = &::windows::core::Interface::cast::<ICompositionObject>(self)?;
        unsafe {
            let mut result__ = ::core::mem::MaybeUninit::zeroed();
            (::windows::core::Vtable::vtable(this).Compositor)(
                ::windows::core::Vtable::as_raw(this),
                result__.as_mut_ptr(),
            )
            .from_abi::<Compositor>(result__)
        }
    }
    pub fn Properties(&self) -> ::windows::core::Result<CompositionPropertySet> {
        let this = &::windows::core::Interface::cast::<ICompositionObject>(self)?;
        unsafe {
            let mut result__ = ::core::mem::MaybeUninit::zeroed();
            (::windows::core::Vtable::vtable(this).Properties)(
                ::windows::core::Vtable::as_raw(this),
                result__.as_mut_ptr(),
            )
            .from_abi::<CompositionPropertySet>(result__)
        }
    }
    pub fn StartAnimation<'a, P0>(
        &self,
        propertyname: &::windows::core::HSTRING,
        animation: P0,
    ) -> ::windows::core::Result<()>
    where
        P0: ::std::convert::Into<::windows::core::InParam<'a, CompositionAnimation>>,
    {
        let this = &::windows::core::Interface::cast::<ICompositionObject>(self)?;
        unsafe {
            (::windows::core::Vtable::vtable(this).StartAnimation)(
                ::windows::core::Vtable::as_raw(this),
                ::core::mem::transmute_copy(propertyname),
                animation.into().abi(),
            )
            .ok()
        }
    }
    pub fn StopAnimation(
        &self,
        propertyname: &::windows::core::HSTRING,
    ) -> ::windows::core::Result<()> {
        let this = &::windows::core::Interface::cast::<ICompositionObject>(self)?;
        unsafe {
            (::windows::core::Vtable::vtable(this).StopAnimation)(
                ::windows::core::Vtable::as_raw(this),
                ::core::mem::transmute_copy(propertyname),
            )
            .ok()
        }
    }
    pub fn Comment(&self) -> ::windows::core::Result<::windows::core::HSTRING> {
        let this = &::windows::core::Interface::cast::<ICompositionObject2>(self)?;
        unsafe {
            let mut result__ = ::core::mem::MaybeUninit::zeroed();
            (::windows::core::Vtable::vtable(this).Comment)(
                ::windows::core::Vtable::as_raw(this),
                result__.as_mut_ptr(),
            )
            .from_abi::<::windows::core::HSTRING>(result__)
        }
    }
    pub fn SetComment(&self, value: &::windows::core::HSTRING) -> ::windows::core::Result<()> {
        let this = &::windows::core::Interface::cast::<ICompositionObject2>(self)?;
        unsafe {
            (::windows::core::Vtable::vtable(this).SetComment)(
                ::windows::core::Vtable::as_raw(this),
                ::core::mem::transmute_copy(value),
            )
            .ok()
        }
    }
    pub fn ImplicitAnimations(&self) -> ::windows::core::Result<ImplicitAnimationCollection> {
        let this = &::windows::core::Interface::cast::<ICompositionObject2>(self)?;
        unsafe {
            let mut result__ = ::core::mem::MaybeUninit::zeroed();
            (::windows::core::Vtable::vtable(this).ImplicitAnimations)(
                ::windows::core::Vtable::as_raw(this),
                result__.as_mut_ptr(),
            )
            .from_abi::<ImplicitAnimationCollection>(result__)
        }
    }
    pub fn SetImplicitAnimations(
        &self,
        value: &ImplicitAnimationCollection,
    ) -> ::windows::core::Result<()> {
        let this = &::windows::core::Interface::cast::<ICompositionObject2>(self)?;
        unsafe {
            (::windows::core::Vtable::vtable(this).SetImplicitAnimations)(
                ::windows::core::Vtable::as_raw(this),
                ::core::mem::transmute_copy(value),
            )
            .ok()
        }
    }
    pub fn StartAnimationGroup<'a, P0, E0>(&self, value: P0) -> ::windows::core::Result<()>
    where
        P0: ::std::convert::TryInto<
            ::windows::core::InParam<'a, ICompositionAnimationBase>,
            Error = E0,
        >,
        E0: ::std::convert::Into<::windows::core::Error>,
    {
        let this = &::windows::core::Interface::cast::<ICompositionObject2>(self)?;
        unsafe {
            (::windows::core::Vtable::vtable(this).StartAnimationGroup)(
                ::windows::core::Vtable::as_raw(this),
                value.try_into().map_err(|e| e.into())?.abi(),
            )
            .ok()
        }
    }
    pub fn StopAnimationGroup<'a, P0, E0>(&self, value: P0) -> ::windows::core::Result<()>
    where
        P0: ::std::convert::TryInto<
            ::windows::core::InParam<'a, ICompositionAnimationBase>,
            Error = E0,
        >,
        E0: ::std::convert::Into<::windows::core::Error>,
    {
        let this = &::windows::core::Interface::cast::<ICompositionObject2>(self)?;
        unsafe {
            (::windows::core::Vtable::vtable(this).StopAnimationGroup)(
                ::windows::core::Vtable::as_raw(this),
                value.try_into().map_err(|e| e.into())?.abi(),
            )
            .ok()
        }
    }
    #[doc = "*Required features: `\"UI_Dispatching\"`*"]
    #[cfg(feature = "UI_Dispatching")]
    pub fn DispatcherQueue(&self) -> ::windows::core::Result<super::Dispatching::DispatcherQueue> {
        let this = &::windows::core::Interface::cast::<ICompositionObject3>(self)?;
        unsafe {
            let mut result__ = ::core::mem::MaybeUninit::zeroed();
            (::windows::core::Vtable::vtable(this).DispatcherQueue)(
                ::windows::core::Vtable::as_raw(this),
                result__.as_mut_ptr(),
            )
            .from_abi::<super::Dispatching::DispatcherQueue>(result__)
        }
    }
    pub fn TryGetAnimationController(
        &self,
        propertyname: &::windows::core::HSTRING,
    ) -> ::windows::core::Result<AnimationController> {
        let this = &::windows::core::Interface::cast::<ICompositionObject4>(self)?;
        unsafe {
            let mut result__ = ::core::mem::MaybeUninit::zeroed();
            (::windows::core::Vtable::vtable(this).TryGetAnimationController)(
                ::windows::core::Vtable::as_raw(this),
                ::core::mem::transmute_copy(propertyname),
                result__.as_mut_ptr(),
            )
            .from_abi::<AnimationController>(result__)
        }
    }
    pub fn StartAnimationWithController<'a, P0>(
        &self,
        propertyname: &::windows::core::HSTRING,
        animation: P0,
        animationcontroller: &AnimationController,
    ) -> ::windows::core::Result<()>
    where
        P0: ::std::convert::Into<::windows::core::InParam<'a, CompositionAnimation>>,
    {
        let this = &::windows::core::Interface::cast::<ICompositionObject5>(self)?;
        unsafe {
            (::windows::core::Vtable::vtable(this).StartAnimationWithController)(
                ::windows::core::Vtable::as_raw(this),
                ::core::mem::transmute_copy(propertyname),
                animation.into().abi(),
                ::core::mem::transmute_copy(animationcontroller),
            )
            .ok()
        }
    }
}
impl ::core::clone::Clone for CompositionGraphicsDevice {
    fn clone(&self) -> Self {
        Self(self.0.clone())
    }
}
impl ::core::cmp::PartialEq for CompositionGraphicsDevice {
    fn eq(&self, other: &Self) -> bool {
        self.0 == other.0
    }
}
impl ::core::cmp::Eq for CompositionGraphicsDevice {}
impl ::core::fmt::Debug for CompositionGraphicsDevice {
    fn fmt(&self, f: &mut ::core::fmt::Formatter<'_>) -> ::core::fmt::Result {
        f.debug_tuple("CompositionGraphicsDevice").field(&self.0).finish()
    }
}
unsafe impl ::windows::core::RuntimeType for CompositionGraphicsDevice {
    const SIGNATURE : ::windows::core::ConstBuffer = ::windows::core::ConstBuffer::from_slice ( b"rc(Microsoft.UI.Composition.CompositionGraphicsDevice;{3d47e3f5-f76c-5f1f-88c0-54a5f2a090d6})" ) ;
    type DefaultType = ::core::option::Option<Self>;
    fn from_default(from: &Self::DefaultType) -> ::windows::core::Result<Self> {
        from.as_ref().cloned().ok_or(::windows::core::Error::OK)
    }
}
unsafe impl ::windows::core::Vtable for CompositionGraphicsDevice {
    type Vtable = ICompositionGraphicsDevice_Vtbl;
}
unsafe impl ::windows::core::Interface for CompositionGraphicsDevice {
    const IID: ::windows::core::GUID =
        <ICompositionGraphicsDevice as ::windows::core::Interface>::IID;
}
impl ::windows::core::RuntimeName for CompositionGraphicsDevice {
    const NAME: &'static str = "Microsoft.UI.Composition.CompositionGraphicsDevice";
}
::windows::core::interface_hierarchy!(
    CompositionGraphicsDevice,
    ::windows::core::IUnknown,
    ::windows::core::IInspectable
);
impl ::core::convert::TryFrom<CompositionGraphicsDevice> for IAnimationObject {
    type Error = ::windows::core::Error;
    fn try_from(value: CompositionGraphicsDevice) -> ::windows::core::Result<Self> {
        ::core::convert::TryFrom::try_from(&value)
    }
}
impl ::core::convert::TryFrom<&CompositionGraphicsDevice> for IAnimationObject {
    type Error = ::windows::core::Error;
    fn try_from(value: &CompositionGraphicsDevice) -> ::windows::core::Result<Self> {
        ::windows::core::Interface::cast(value)
    }
}
impl<'a> ::core::convert::TryFrom<&CompositionGraphicsDevice>
    for ::windows::core::InParam<'a, IAnimationObject>
{
    type Error = ::windows::core::Error;
    fn try_from(value: &CompositionGraphicsDevice) -> ::windows::core::Result<Self> {
        let item = ::std::convert::TryInto::try_into(value)?;
        Ok(::windows::core::InParam::owned(item))
    }
}
impl ::core::convert::TryFrom<CompositionGraphicsDevice> for ::windows::Foundation::IClosable {
    type Error = ::windows::core::Error;
    fn try_from(value: CompositionGraphicsDevice) -> ::windows::core::Result<Self> {
        ::core::convert::TryFrom::try_from(&value)
    }
}
impl ::core::convert::TryFrom<&CompositionGraphicsDevice> for ::windows::Foundation::IClosable {
    type Error = ::windows::core::Error;
    fn try_from(value: &CompositionGraphicsDevice) -> ::windows::core::Result<Self> {
        ::windows::core::Interface::cast(value)
    }
}
impl<'a> ::core::convert::TryFrom<&CompositionGraphicsDevice>
    for ::windows::core::InParam<'a, ::windows::Foundation::IClosable>
{
    type Error = ::windows::core::Error;
    fn try_from(value: &CompositionGraphicsDevice) -> ::windows::core::Result<Self> {
        let item = ::std::convert::TryInto::try_into(value)?;
        Ok(::windows::core::InParam::owned(item))
    }
}
impl ::core::convert::From<CompositionGraphicsDevice> for CompositionObject {
    fn from(value: CompositionGraphicsDevice) -> Self {
        ::core::convert::From::from(&value)
    }
}
impl ::core::convert::From<&CompositionGraphicsDevice> for CompositionObject {
    fn from(value: &CompositionGraphicsDevice) -> Self {
        ::windows::core::Interface::cast(value).unwrap()
    }
}
impl<'a> ::core::convert::From<&CompositionGraphicsDevice>
    for ::windows::core::InParam<'a, CompositionObject>
{
    fn from(value: &CompositionGraphicsDevice) -> Self {
        ::windows::core::InParam::owned(value.into())
    }
}
unsafe impl ::core::marker::Send for CompositionGraphicsDevice {}
unsafe impl ::core::marker::Sync for CompositionGraphicsDevice {}
#[doc = "*Required features: `\"UI_Composition\"`*"]
#[repr(transparent)]
pub struct CompositionLight(::windows::core::IUnknown);
impl CompositionLight {
    pub fn PopulatePropertyInfo(
        &self,
        propertyname: &::windows::core::HSTRING,
        propertyinfo: &AnimationPropertyInfo,
    ) -> ::windows::core::Result<()> {
        let this = &::windows::core::Interface::cast::<IAnimationObject>(self)?;
        unsafe {
            (::windows::core::Vtable::vtable(this).PopulatePropertyInfo)(
                ::windows::core::Vtable::as_raw(this),
                ::core::mem::transmute_copy(propertyname),
                ::core::mem::transmute_copy(propertyinfo),
            )
            .ok()
        }
    }
    pub fn Close(&self) -> ::windows::core::Result<()> {
        let this = &::windows::core::Interface::cast::<::windows::Foundation::IClosable>(self)?;
        unsafe {
            (::windows::core::Vtable::vtable(this).Close)(::windows::core::Vtable::as_raw(this))
                .ok()
        }
    }
    pub fn Targets(&self) -> ::windows::core::Result<VisualUnorderedCollection> {
        let this = self;
        unsafe {
            let mut result__ = ::core::mem::MaybeUninit::zeroed();
            (::windows::core::Vtable::vtable(this).Targets)(
                ::windows::core::Vtable::as_raw(this),
                result__.as_mut_ptr(),
            )
            .from_abi::<VisualUnorderedCollection>(result__)
        }
    }
    pub fn ExclusionsFromTargets(&self) -> ::windows::core::Result<VisualUnorderedCollection> {
        let this = &::windows::core::Interface::cast::<ICompositionLight2>(self)?;
        unsafe {
            let mut result__ = ::core::mem::MaybeUninit::zeroed();
            (::windows::core::Vtable::vtable(this).ExclusionsFromTargets)(
                ::windows::core::Vtable::as_raw(this),
                result__.as_mut_ptr(),
            )
            .from_abi::<VisualUnorderedCollection>(result__)
        }
    }
    pub fn IsEnabled(&self) -> ::windows::core::Result<bool> {
        let this = &::windows::core::Interface::cast::<ICompositionLight3>(self)?;
        unsafe {
            let mut result__ = ::core::mem::MaybeUninit::zeroed();
            (::windows::core::Vtable::vtable(this).IsEnabled)(
                ::windows::core::Vtable::as_raw(this),
                result__.as_mut_ptr(),
            )
            .from_abi::<bool>(result__)
        }
    }
    pub fn SetIsEnabled(&self, value: bool) -> ::windows::core::Result<()> {
        let this = &::windows::core::Interface::cast::<ICompositionLight3>(self)?;
        unsafe {
            (::windows::core::Vtable::vtable(this).SetIsEnabled)(
                ::windows::core::Vtable::as_raw(this),
                value,
            )
            .ok()
        }
    }
    pub fn Compositor(&self) -> ::windows::core::Result<Compositor> {
        let this = &::windows::core::Interface::cast::<ICompositionObject>(self)?;
        unsafe {
            let mut result__ = ::core::mem::MaybeUninit::zeroed();
            (::windows::core::Vtable::vtable(this).Compositor)(
                ::windows::core::Vtable::as_raw(this),
                result__.as_mut_ptr(),
            )
            .from_abi::<Compositor>(result__)
        }
    }
    pub fn Properties(&self) -> ::windows::core::Result<CompositionPropertySet> {
        let this = &::windows::core::Interface::cast::<ICompositionObject>(self)?;
        unsafe {
            let mut result__ = ::core::mem::MaybeUninit::zeroed();
            (::windows::core::Vtable::vtable(this).Properties)(
                ::windows::core::Vtable::as_raw(this),
                result__.as_mut_ptr(),
            )
            .from_abi::<CompositionPropertySet>(result__)
        }
    }
    pub fn StartAnimation<'a, P0>(
        &self,
        propertyname: &::windows::core::HSTRING,
        animation: P0,
    ) -> ::windows::core::Result<()>
    where
        P0: ::std::convert::Into<::windows::core::InParam<'a, CompositionAnimation>>,
    {
        let this = &::windows::core::Interface::cast::<ICompositionObject>(self)?;
        unsafe {
            (::windows::core::Vtable::vtable(this).StartAnimation)(
                ::windows::core::Vtable::as_raw(this),
                ::core::mem::transmute_copy(propertyname),
                animation.into().abi(),
            )
            .ok()
        }
    }
    pub fn StopAnimation(
        &self,
        propertyname: &::windows::core::HSTRING,
    ) -> ::windows::core::Result<()> {
        let this = &::windows::core::Interface::cast::<ICompositionObject>(self)?;
        unsafe {
            (::windows::core::Vtable::vtable(this).StopAnimation)(
                ::windows::core::Vtable::as_raw(this),
                ::core::mem::transmute_copy(propertyname),
            )
            .ok()
        }
    }
    pub fn Comment(&self) -> ::windows::core::Result<::windows::core::HSTRING> {
        let this = &::windows::core::Interface::cast::<ICompositionObject2>(self)?;
        unsafe {
            let mut result__ = ::core::mem::MaybeUninit::zeroed();
            (::windows::core::Vtable::vtable(this).Comment)(
                ::windows::core::Vtable::as_raw(this),
                result__.as_mut_ptr(),
            )
            .from_abi::<::windows::core::HSTRING>(result__)
        }
    }
    pub fn SetComment(&self, value: &::windows::core::HSTRING) -> ::windows::core::Result<()> {
        let this = &::windows::core::Interface::cast::<ICompositionObject2>(self)?;
        unsafe {
            (::windows::core::Vtable::vtable(this).SetComment)(
                ::windows::core::Vtable::as_raw(this),
                ::core::mem::transmute_copy(value),
            )
            .ok()
        }
    }
    pub fn ImplicitAnimations(&self) -> ::windows::core::Result<ImplicitAnimationCollection> {
        let this = &::windows::core::Interface::cast::<ICompositionObject2>(self)?;
        unsafe {
            let mut result__ = ::core::mem::MaybeUninit::zeroed();
            (::windows::core::Vtable::vtable(this).ImplicitAnimations)(
                ::windows::core::Vtable::as_raw(this),
                result__.as_mut_ptr(),
            )
            .from_abi::<ImplicitAnimationCollection>(result__)
        }
    }
    pub fn SetImplicitAnimations(
        &self,
        value: &ImplicitAnimationCollection,
    ) -> ::windows::core::Result<()> {
        let this = &::windows::core::Interface::cast::<ICompositionObject2>(self)?;
        unsafe {
            (::windows::core::Vtable::vtable(this).SetImplicitAnimations)(
                ::windows::core::Vtable::as_raw(this),
                ::core::mem::transmute_copy(value),
            )
            .ok()
        }
    }
    pub fn StartAnimationGroup<'a, P0, E0>(&self, value: P0) -> ::windows::core::Result<()>
    where
        P0: ::std::convert::TryInto<
            ::windows::core::InParam<'a, ICompositionAnimationBase>,
            Error = E0,
        >,
        E0: ::std::convert::Into<::windows::core::Error>,
    {
        let this = &::windows::core::Interface::cast::<ICompositionObject2>(self)?;
        unsafe {
            (::windows::core::Vtable::vtable(this).StartAnimationGroup)(
                ::windows::core::Vtable::as_raw(this),
                value.try_into().map_err(|e| e.into())?.abi(),
            )
            .ok()
        }
    }
    pub fn StopAnimationGroup<'a, P0, E0>(&self, value: P0) -> ::windows::core::Result<()>
    where
        P0: ::std::convert::TryInto<
            ::windows::core::InParam<'a, ICompositionAnimationBase>,
            Error = E0,
        >,
        E0: ::std::convert::Into<::windows::core::Error>,
    {
        let this = &::windows::core::Interface::cast::<ICompositionObject2>(self)?;
        unsafe {
            (::windows::core::Vtable::vtable(this).StopAnimationGroup)(
                ::windows::core::Vtable::as_raw(this),
                value.try_into().map_err(|e| e.into())?.abi(),
            )
            .ok()
        }
    }
    #[doc = "*Required features: `\"UI_Dispatching\"`*"]
    #[cfg(feature = "UI_Dispatching")]
    pub fn DispatcherQueue(&self) -> ::windows::core::Result<super::Dispatching::DispatcherQueue> {
        let this = &::windows::core::Interface::cast::<ICompositionObject3>(self)?;
        unsafe {
            let mut result__ = ::core::mem::MaybeUninit::zeroed();
            (::windows::core::Vtable::vtable(this).DispatcherQueue)(
                ::windows::core::Vtable::as_raw(this),
                result__.as_mut_ptr(),
            )
            .from_abi::<super::Dispatching::DispatcherQueue>(result__)
        }
    }
    pub fn TryGetAnimationController(
        &self,
        propertyname: &::windows::core::HSTRING,
    ) -> ::windows::core::Result<AnimationController> {
        let this = &::windows::core::Interface::cast::<ICompositionObject4>(self)?;
        unsafe {
            let mut result__ = ::core::mem::MaybeUninit::zeroed();
            (::windows::core::Vtable::vtable(this).TryGetAnimationController)(
                ::windows::core::Vtable::as_raw(this),
                ::core::mem::transmute_copy(propertyname),
                result__.as_mut_ptr(),
            )
            .from_abi::<AnimationController>(result__)
        }
    }
    pub fn StartAnimationWithController<'a, P0>(
        &self,
        propertyname: &::windows::core::HSTRING,
        animation: P0,
        animationcontroller: &AnimationController,
    ) -> ::windows::core::Result<()>
    where
        P0: ::std::convert::Into<::windows::core::InParam<'a, CompositionAnimation>>,
    {
        let this = &::windows::core::Interface::cast::<ICompositionObject5>(self)?;
        unsafe {
            (::windows::core::Vtable::vtable(this).StartAnimationWithController)(
                ::windows::core::Vtable::as_raw(this),
                ::core::mem::transmute_copy(propertyname),
                animation.into().abi(),
                ::core::mem::transmute_copy(animationcontroller),
            )
            .ok()
        }
    }
}
impl ::core::clone::Clone for CompositionLight {
    fn clone(&self) -> Self {
        Self(self.0.clone())
    }
}
impl ::core::cmp::PartialEq for CompositionLight {
    fn eq(&self, other: &Self) -> bool {
        self.0 == other.0
    }
}
impl ::core::cmp::Eq for CompositionLight {}
impl ::core::fmt::Debug for CompositionLight {
    fn fmt(&self, f: &mut ::core::fmt::Formatter<'_>) -> ::core::fmt::Result {
        f.debug_tuple("CompositionLight").field(&self.0).finish()
    }
}
unsafe impl ::windows::core::RuntimeType for CompositionLight {
    const SIGNATURE: ::windows::core::ConstBuffer = ::windows::core::ConstBuffer::from_slice(
        b"rc(Microsoft.UI.Composition.CompositionLight;{6d633e77-a6b8-5a2d-8235-e0c380c3b47b})",
    );
    type DefaultType = ::core::option::Option<Self>;
    fn from_default(from: &Self::DefaultType) -> ::windows::core::Result<Self> {
        from.as_ref().cloned().ok_or(::windows::core::Error::OK)
    }
}
unsafe impl ::windows::core::Vtable for CompositionLight {
    type Vtable = ICompositionLight_Vtbl;
}
unsafe impl ::windows::core::Interface for CompositionLight {
    const IID: ::windows::core::GUID = <ICompositionLight as ::windows::core::Interface>::IID;
}
impl ::windows::core::RuntimeName for CompositionLight {
    const NAME: &'static str = "Microsoft.UI.Composition.CompositionLight";
}
::windows::core::interface_hierarchy!(
    CompositionLight,
    ::windows::core::IUnknown,
    ::windows::core::IInspectable
);
impl ::core::convert::TryFrom<CompositionLight> for IAnimationObject {
    type Error = ::windows::core::Error;
    fn try_from(value: CompositionLight) -> ::windows::core::Result<Self> {
        ::core::convert::TryFrom::try_from(&value)
    }
}
impl ::core::convert::TryFrom<&CompositionLight> for IAnimationObject {
    type Error = ::windows::core::Error;
    fn try_from(value: &CompositionLight) -> ::windows::core::Result<Self> {
        ::windows::core::Interface::cast(value)
    }
}
impl<'a> ::core::convert::TryFrom<&CompositionLight>
    for ::windows::core::InParam<'a, IAnimationObject>
{
    type Error = ::windows::core::Error;
    fn try_from(value: &CompositionLight) -> ::windows::core::Result<Self> {
        let item = ::std::convert::TryInto::try_into(value)?;
        Ok(::windows::core::InParam::owned(item))
    }
}
impl ::core::convert::TryFrom<CompositionLight> for ::windows::Foundation::IClosable {
    type Error = ::windows::core::Error;
    fn try_from(value: CompositionLight) -> ::windows::core::Result<Self> {
        ::core::convert::TryFrom::try_from(&value)
    }
}
impl ::core::convert::TryFrom<&CompositionLight> for ::windows::Foundation::IClosable {
    type Error = ::windows::core::Error;
    fn try_from(value: &CompositionLight) -> ::windows::core::Result<Self> {
        ::windows::core::Interface::cast(value)
    }
}
impl<'a> ::core::convert::TryFrom<&CompositionLight>
    for ::windows::core::InParam<'a, ::windows::Foundation::IClosable>
{
    type Error = ::windows::core::Error;
    fn try_from(value: &CompositionLight) -> ::windows::core::Result<Self> {
        let item = ::std::convert::TryInto::try_into(value)?;
        Ok(::windows::core::InParam::owned(item))
    }
}
impl ::core::convert::From<CompositionLight> for CompositionObject {
    fn from(value: CompositionLight) -> Self {
        ::core::convert::From::from(&value)
    }
}
impl ::core::convert::From<&CompositionLight> for CompositionObject {
    fn from(value: &CompositionLight) -> Self {
        ::windows::core::Interface::cast(value).unwrap()
    }
}
impl<'a> ::core::convert::From<&CompositionLight>
    for ::windows::core::InParam<'a, CompositionObject>
{
    fn from(value: &CompositionLight) -> Self {
        ::windows::core::InParam::owned(value.into())
    }
}
unsafe impl ::core::marker::Send for CompositionLight {}
unsafe impl ::core::marker::Sync for CompositionLight {}
#[doc = "*Required features: `\"UI_Composition\"`*"]
#[repr(transparent)]
pub struct CompositionLineGeometry(::windows::core::IUnknown);
impl CompositionLineGeometry {
    pub fn PopulatePropertyInfo(
        &self,
        propertyname: &::windows::core::HSTRING,
        propertyinfo: &AnimationPropertyInfo,
    ) -> ::windows::core::Result<()> {
        let this = &::windows::core::Interface::cast::<IAnimationObject>(self)?;
        unsafe {
            (::windows::core::Vtable::vtable(this).PopulatePropertyInfo)(
                ::windows::core::Vtable::as_raw(this),
                ::core::mem::transmute_copy(propertyname),
                ::core::mem::transmute_copy(propertyinfo),
            )
            .ok()
        }
    }
    pub fn Close(&self) -> ::windows::core::Result<()> {
        let this = &::windows::core::Interface::cast::<::windows::Foundation::IClosable>(self)?;
        unsafe {
            (::windows::core::Vtable::vtable(this).Close)(::windows::core::Vtable::as_raw(this))
                .ok()
        }
    }
    pub fn TrimEnd(&self) -> ::windows::core::Result<f32> {
        let this = &::windows::core::Interface::cast::<ICompositionGeometry>(self)?;
        unsafe {
            let mut result__ = ::core::mem::MaybeUninit::zeroed();
            (::windows::core::Vtable::vtable(this).TrimEnd)(
                ::windows::core::Vtable::as_raw(this),
                result__.as_mut_ptr(),
            )
            .from_abi::<f32>(result__)
        }
    }
    pub fn SetTrimEnd(&self, value: f32) -> ::windows::core::Result<()> {
        let this = &::windows::core::Interface::cast::<ICompositionGeometry>(self)?;
        unsafe {
            (::windows::core::Vtable::vtable(this).SetTrimEnd)(
                ::windows::core::Vtable::as_raw(this),
                value,
            )
            .ok()
        }
    }
    pub fn TrimOffset(&self) -> ::windows::core::Result<f32> {
        let this = &::windows::core::Interface::cast::<ICompositionGeometry>(self)?;
        unsafe {
            let mut result__ = ::core::mem::MaybeUninit::zeroed();
            (::windows::core::Vtable::vtable(this).TrimOffset)(
                ::windows::core::Vtable::as_raw(this),
                result__.as_mut_ptr(),
            )
            .from_abi::<f32>(result__)
        }
    }
    pub fn SetTrimOffset(&self, value: f32) -> ::windows::core::Result<()> {
        let this = &::windows::core::Interface::cast::<ICompositionGeometry>(self)?;
        unsafe {
            (::windows::core::Vtable::vtable(this).SetTrimOffset)(
                ::windows::core::Vtable::as_raw(this),
                value,
            )
            .ok()
        }
    }
    pub fn TrimStart(&self) -> ::windows::core::Result<f32> {
        let this = &::windows::core::Interface::cast::<ICompositionGeometry>(self)?;
        unsafe {
            let mut result__ = ::core::mem::MaybeUninit::zeroed();
            (::windows::core::Vtable::vtable(this).TrimStart)(
                ::windows::core::Vtable::as_raw(this),
                result__.as_mut_ptr(),
            )
            .from_abi::<f32>(result__)
        }
    }
    pub fn SetTrimStart(&self, value: f32) -> ::windows::core::Result<()> {
        let this = &::windows::core::Interface::cast::<ICompositionGeometry>(self)?;
        unsafe {
            (::windows::core::Vtable::vtable(this).SetTrimStart)(
                ::windows::core::Vtable::as_raw(this),
                value,
            )
            .ok()
        }
    }
    pub fn Start(&self) -> ::windows::core::Result<::windows::Foundation::Numerics::Vector2> {
        let this = self;
        unsafe {
            let mut result__ = ::core::mem::MaybeUninit::zeroed();
            (::windows::core::Vtable::vtable(this).Start)(
                ::windows::core::Vtable::as_raw(this),
                result__.as_mut_ptr(),
            )
            .from_abi::<::windows::Foundation::Numerics::Vector2>(result__)
        }
    }
    pub fn SetStart(
        &self,
        value: ::windows::Foundation::Numerics::Vector2,
    ) -> ::windows::core::Result<()> {
        let this = self;
        unsafe {
            (::windows::core::Vtable::vtable(this).SetStart)(
                ::windows::core::Vtable::as_raw(this),
                value,
            )
            .ok()
        }
    }
    pub fn End(&self) -> ::windows::core::Result<::windows::Foundation::Numerics::Vector2> {
        let this = self;
        unsafe {
            let mut result__ = ::core::mem::MaybeUninit::zeroed();
            (::windows::core::Vtable::vtable(this).End)(
                ::windows::core::Vtable::as_raw(this),
                result__.as_mut_ptr(),
            )
            .from_abi::<::windows::Foundation::Numerics::Vector2>(result__)
        }
    }
    pub fn SetEnd(
        &self,
        value: ::windows::Foundation::Numerics::Vector2,
    ) -> ::windows::core::Result<()> {
        let this = self;
        unsafe {
            (::windows::core::Vtable::vtable(this).SetEnd)(
                ::windows::core::Vtable::as_raw(this),
                value,
            )
            .ok()
        }
    }
    pub fn Compositor(&self) -> ::windows::core::Result<Compositor> {
        let this = &::windows::core::Interface::cast::<ICompositionObject>(self)?;
        unsafe {
            let mut result__ = ::core::mem::MaybeUninit::zeroed();
            (::windows::core::Vtable::vtable(this).Compositor)(
                ::windows::core::Vtable::as_raw(this),
                result__.as_mut_ptr(),
            )
            .from_abi::<Compositor>(result__)
        }
    }
    pub fn Properties(&self) -> ::windows::core::Result<CompositionPropertySet> {
        let this = &::windows::core::Interface::cast::<ICompositionObject>(self)?;
        unsafe {
            let mut result__ = ::core::mem::MaybeUninit::zeroed();
            (::windows::core::Vtable::vtable(this).Properties)(
                ::windows::core::Vtable::as_raw(this),
                result__.as_mut_ptr(),
            )
            .from_abi::<CompositionPropertySet>(result__)
        }
    }
    pub fn StartAnimation<'a, P0>(
        &self,
        propertyname: &::windows::core::HSTRING,
        animation: P0,
    ) -> ::windows::core::Result<()>
    where
        P0: ::std::convert::Into<::windows::core::InParam<'a, CompositionAnimation>>,
    {
        let this = &::windows::core::Interface::cast::<ICompositionObject>(self)?;
        unsafe {
            (::windows::core::Vtable::vtable(this).StartAnimation)(
                ::windows::core::Vtable::as_raw(this),
                ::core::mem::transmute_copy(propertyname),
                animation.into().abi(),
            )
            .ok()
        }
    }
    pub fn StopAnimation(
        &self,
        propertyname: &::windows::core::HSTRING,
    ) -> ::windows::core::Result<()> {
        let this = &::windows::core::Interface::cast::<ICompositionObject>(self)?;
        unsafe {
            (::windows::core::Vtable::vtable(this).StopAnimation)(
                ::windows::core::Vtable::as_raw(this),
                ::core::mem::transmute_copy(propertyname),
            )
            .ok()
        }
    }
    pub fn Comment(&self) -> ::windows::core::Result<::windows::core::HSTRING> {
        let this = &::windows::core::Interface::cast::<ICompositionObject2>(self)?;
        unsafe {
            let mut result__ = ::core::mem::MaybeUninit::zeroed();
            (::windows::core::Vtable::vtable(this).Comment)(
                ::windows::core::Vtable::as_raw(this),
                result__.as_mut_ptr(),
            )
            .from_abi::<::windows::core::HSTRING>(result__)
        }
    }
    pub fn SetComment(&self, value: &::windows::core::HSTRING) -> ::windows::core::Result<()> {
        let this = &::windows::core::Interface::cast::<ICompositionObject2>(self)?;
        unsafe {
            (::windows::core::Vtable::vtable(this).SetComment)(
                ::windows::core::Vtable::as_raw(this),
                ::core::mem::transmute_copy(value),
            )
            .ok()
        }
    }
    pub fn ImplicitAnimations(&self) -> ::windows::core::Result<ImplicitAnimationCollection> {
        let this = &::windows::core::Interface::cast::<ICompositionObject2>(self)?;
        unsafe {
            let mut result__ = ::core::mem::MaybeUninit::zeroed();
            (::windows::core::Vtable::vtable(this).ImplicitAnimations)(
                ::windows::core::Vtable::as_raw(this),
                result__.as_mut_ptr(),
            )
            .from_abi::<ImplicitAnimationCollection>(result__)
        }
    }
    pub fn SetImplicitAnimations(
        &self,
        value: &ImplicitAnimationCollection,
    ) -> ::windows::core::Result<()> {
        let this = &::windows::core::Interface::cast::<ICompositionObject2>(self)?;
        unsafe {
            (::windows::core::Vtable::vtable(this).SetImplicitAnimations)(
                ::windows::core::Vtable::as_raw(this),
                ::core::mem::transmute_copy(value),
            )
            .ok()
        }
    }
    pub fn StartAnimationGroup<'a, P0, E0>(&self, value: P0) -> ::windows::core::Result<()>
    where
        P0: ::std::convert::TryInto<
            ::windows::core::InParam<'a, ICompositionAnimationBase>,
            Error = E0,
        >,
        E0: ::std::convert::Into<::windows::core::Error>,
    {
        let this = &::windows::core::Interface::cast::<ICompositionObject2>(self)?;
        unsafe {
            (::windows::core::Vtable::vtable(this).StartAnimationGroup)(
                ::windows::core::Vtable::as_raw(this),
                value.try_into().map_err(|e| e.into())?.abi(),
            )
            .ok()
        }
    }
    pub fn StopAnimationGroup<'a, P0, E0>(&self, value: P0) -> ::windows::core::Result<()>
    where
        P0: ::std::convert::TryInto<
            ::windows::core::InParam<'a, ICompositionAnimationBase>,
            Error = E0,
        >,
        E0: ::std::convert::Into<::windows::core::Error>,
    {
        let this = &::windows::core::Interface::cast::<ICompositionObject2>(self)?;
        unsafe {
            (::windows::core::Vtable::vtable(this).StopAnimationGroup)(
                ::windows::core::Vtable::as_raw(this),
                value.try_into().map_err(|e| e.into())?.abi(),
            )
            .ok()
        }
    }
    #[doc = "*Required features: `\"UI_Dispatching\"`*"]
    #[cfg(feature = "UI_Dispatching")]
    pub fn DispatcherQueue(&self) -> ::windows::core::Result<super::Dispatching::DispatcherQueue> {
        let this = &::windows::core::Interface::cast::<ICompositionObject3>(self)?;
        unsafe {
            let mut result__ = ::core::mem::MaybeUninit::zeroed();
            (::windows::core::Vtable::vtable(this).DispatcherQueue)(
                ::windows::core::Vtable::as_raw(this),
                result__.as_mut_ptr(),
            )
            .from_abi::<super::Dispatching::DispatcherQueue>(result__)
        }
    }
    pub fn TryGetAnimationController(
        &self,
        propertyname: &::windows::core::HSTRING,
    ) -> ::windows::core::Result<AnimationController> {
        let this = &::windows::core::Interface::cast::<ICompositionObject4>(self)?;
        unsafe {
            let mut result__ = ::core::mem::MaybeUninit::zeroed();
            (::windows::core::Vtable::vtable(this).TryGetAnimationController)(
                ::windows::core::Vtable::as_raw(this),
                ::core::mem::transmute_copy(propertyname),
                result__.as_mut_ptr(),
            )
            .from_abi::<AnimationController>(result__)
        }
    }
    pub fn StartAnimationWithController<'a, P0>(
        &self,
        propertyname: &::windows::core::HSTRING,
        animation: P0,
        animationcontroller: &AnimationController,
    ) -> ::windows::core::Result<()>
    where
        P0: ::std::convert::Into<::windows::core::InParam<'a, CompositionAnimation>>,
    {
        let this = &::windows::core::Interface::cast::<ICompositionObject5>(self)?;
        unsafe {
            (::windows::core::Vtable::vtable(this).StartAnimationWithController)(
                ::windows::core::Vtable::as_raw(this),
                ::core::mem::transmute_copy(propertyname),
                animation.into().abi(),
                ::core::mem::transmute_copy(animationcontroller),
            )
            .ok()
        }
    }
}
impl ::core::clone::Clone for CompositionLineGeometry {
    fn clone(&self) -> Self {
        Self(self.0.clone())
    }
}
impl ::core::cmp::PartialEq for CompositionLineGeometry {
    fn eq(&self, other: &Self) -> bool {
        self.0 == other.0
    }
}
impl ::core::cmp::Eq for CompositionLineGeometry {}
impl ::core::fmt::Debug for CompositionLineGeometry {
    fn fmt(&self, f: &mut ::core::fmt::Formatter<'_>) -> ::core::fmt::Result {
        f.debug_tuple("CompositionLineGeometry").field(&self.0).finish()
    }
}
unsafe impl ::windows::core::RuntimeType for CompositionLineGeometry {
    const SIGNATURE : ::windows::core::ConstBuffer = ::windows::core::ConstBuffer::from_slice ( b"rc(Microsoft.UI.Composition.CompositionLineGeometry;{489f9382-c186-5936-8946-c4f927e844aa})" ) ;
    type DefaultType = ::core::option::Option<Self>;
    fn from_default(from: &Self::DefaultType) -> ::windows::core::Result<Self> {
        from.as_ref().cloned().ok_or(::windows::core::Error::OK)
    }
}
unsafe impl ::windows::core::Vtable for CompositionLineGeometry {
    type Vtable = ICompositionLineGeometry_Vtbl;
}
unsafe impl ::windows::core::Interface for CompositionLineGeometry {
    const IID: ::windows::core::GUID =
        <ICompositionLineGeometry as ::windows::core::Interface>::IID;
}
impl ::windows::core::RuntimeName for CompositionLineGeometry {
    const NAME: &'static str = "Microsoft.UI.Composition.CompositionLineGeometry";
}
::windows::core::interface_hierarchy!(
    CompositionLineGeometry,
    ::windows::core::IUnknown,
    ::windows::core::IInspectable
);
impl ::core::convert::TryFrom<CompositionLineGeometry> for IAnimationObject {
    type Error = ::windows::core::Error;
    fn try_from(value: CompositionLineGeometry) -> ::windows::core::Result<Self> {
        ::core::convert::TryFrom::try_from(&value)
    }
}
impl ::core::convert::TryFrom<&CompositionLineGeometry> for IAnimationObject {
    type Error = ::windows::core::Error;
    fn try_from(value: &CompositionLineGeometry) -> ::windows::core::Result<Self> {
        ::windows::core::Interface::cast(value)
    }
}
impl<'a> ::core::convert::TryFrom<&CompositionLineGeometry>
    for ::windows::core::InParam<'a, IAnimationObject>
{
    type Error = ::windows::core::Error;
    fn try_from(value: &CompositionLineGeometry) -> ::windows::core::Result<Self> {
        let item = ::std::convert::TryInto::try_into(value)?;
        Ok(::windows::core::InParam::owned(item))
    }
}
impl ::core::convert::TryFrom<CompositionLineGeometry> for ::windows::Foundation::IClosable {
    type Error = ::windows::core::Error;
    fn try_from(value: CompositionLineGeometry) -> ::windows::core::Result<Self> {
        ::core::convert::TryFrom::try_from(&value)
    }
}
impl ::core::convert::TryFrom<&CompositionLineGeometry> for ::windows::Foundation::IClosable {
    type Error = ::windows::core::Error;
    fn try_from(value: &CompositionLineGeometry) -> ::windows::core::Result<Self> {
        ::windows::core::Interface::cast(value)
    }
}
impl<'a> ::core::convert::TryFrom<&CompositionLineGeometry>
    for ::windows::core::InParam<'a, ::windows::Foundation::IClosable>
{
    type Error = ::windows::core::Error;
    fn try_from(value: &CompositionLineGeometry) -> ::windows::core::Result<Self> {
        let item = ::std::convert::TryInto::try_into(value)?;
        Ok(::windows::core::InParam::owned(item))
    }
}
impl ::core::convert::From<CompositionLineGeometry> for CompositionGeometry {
    fn from(value: CompositionLineGeometry) -> Self {
        ::core::convert::From::from(&value)
    }
}
impl ::core::convert::From<&CompositionLineGeometry> for CompositionGeometry {
    fn from(value: &CompositionLineGeometry) -> Self {
        ::windows::core::Interface::cast(value).unwrap()
    }
}
impl<'a> ::core::convert::From<&CompositionLineGeometry>
    for ::windows::core::InParam<'a, CompositionGeometry>
{
    fn from(value: &CompositionLineGeometry) -> Self {
        ::windows::core::InParam::owned(value.into())
    }
}
impl ::core::convert::From<CompositionLineGeometry> for CompositionObject {
    fn from(value: CompositionLineGeometry) -> Self {
        ::core::convert::From::from(&value)
    }
}
impl ::core::convert::From<&CompositionLineGeometry> for CompositionObject {
    fn from(value: &CompositionLineGeometry) -> Self {
        ::windows::core::Interface::cast(value).unwrap()
    }
}
impl<'a> ::core::convert::From<&CompositionLineGeometry>
    for ::windows::core::InParam<'a, CompositionObject>
{
    fn from(value: &CompositionLineGeometry) -> Self {
        ::windows::core::InParam::owned(value.into())
    }
}
unsafe impl ::core::marker::Send for CompositionLineGeometry {}
unsafe impl ::core::marker::Sync for CompositionLineGeometry {}
#[doc = "*Required features: `\"UI_Composition\"`*"]
#[repr(transparent)]
pub struct CompositionLinearGradientBrush(::windows::core::IUnknown);
impl CompositionLinearGradientBrush {
    pub fn PopulatePropertyInfo(
        &self,
        propertyname: &::windows::core::HSTRING,
        propertyinfo: &AnimationPropertyInfo,
    ) -> ::windows::core::Result<()> {
        let this = &::windows::core::Interface::cast::<IAnimationObject>(self)?;
        unsafe {
            (::windows::core::Vtable::vtable(this).PopulatePropertyInfo)(
                ::windows::core::Vtable::as_raw(this),
                ::core::mem::transmute_copy(propertyname),
                ::core::mem::transmute_copy(propertyinfo),
            )
            .ok()
        }
    }
    pub fn Close(&self) -> ::windows::core::Result<()> {
        let this = &::windows::core::Interface::cast::<::windows::Foundation::IClosable>(self)?;
        unsafe {
            (::windows::core::Vtable::vtable(this).Close)(::windows::core::Vtable::as_raw(this))
                .ok()
        }
    }
    pub fn AnchorPoint(&self) -> ::windows::core::Result<::windows::Foundation::Numerics::Vector2> {
        let this = &::windows::core::Interface::cast::<ICompositionGradientBrush>(self)?;
        unsafe {
            let mut result__ = ::core::mem::MaybeUninit::zeroed();
            (::windows::core::Vtable::vtable(this).AnchorPoint)(
                ::windows::core::Vtable::as_raw(this),
                result__.as_mut_ptr(),
            )
            .from_abi::<::windows::Foundation::Numerics::Vector2>(result__)
        }
    }
    pub fn SetAnchorPoint(
        &self,
        value: ::windows::Foundation::Numerics::Vector2,
    ) -> ::windows::core::Result<()> {
        let this = &::windows::core::Interface::cast::<ICompositionGradientBrush>(self)?;
        unsafe {
            (::windows::core::Vtable::vtable(this).SetAnchorPoint)(
                ::windows::core::Vtable::as_raw(this),
                value,
            )
            .ok()
        }
    }
    pub fn CenterPoint(&self) -> ::windows::core::Result<::windows::Foundation::Numerics::Vector2> {
        let this = &::windows::core::Interface::cast::<ICompositionGradientBrush>(self)?;
        unsafe {
            let mut result__ = ::core::mem::MaybeUninit::zeroed();
            (::windows::core::Vtable::vtable(this).CenterPoint)(
                ::windows::core::Vtable::as_raw(this),
                result__.as_mut_ptr(),
            )
            .from_abi::<::windows::Foundation::Numerics::Vector2>(result__)
        }
    }
    pub fn SetCenterPoint(
        &self,
        value: ::windows::Foundation::Numerics::Vector2,
    ) -> ::windows::core::Result<()> {
        let this = &::windows::core::Interface::cast::<ICompositionGradientBrush>(self)?;
        unsafe {
            (::windows::core::Vtable::vtable(this).SetCenterPoint)(
                ::windows::core::Vtable::as_raw(this),
                value,
            )
            .ok()
        }
    }
    pub fn ColorStops(&self) -> ::windows::core::Result<CompositionColorGradientStopCollection> {
        let this = &::windows::core::Interface::cast::<ICompositionGradientBrush>(self)?;
        unsafe {
            let mut result__ = ::core::mem::MaybeUninit::zeroed();
            (::windows::core::Vtable::vtable(this).ColorStops)(
                ::windows::core::Vtable::as_raw(this),
                result__.as_mut_ptr(),
            )
            .from_abi::<CompositionColorGradientStopCollection>(result__)
        }
    }
    pub fn ExtendMode(&self) -> ::windows::core::Result<CompositionGradientExtendMode> {
        let this = &::windows::core::Interface::cast::<ICompositionGradientBrush>(self)?;
        unsafe {
            let mut result__ = ::core::mem::MaybeUninit::zeroed();
            (::windows::core::Vtable::vtable(this).ExtendMode)(
                ::windows::core::Vtable::as_raw(this),
                result__.as_mut_ptr(),
            )
            .from_abi::<CompositionGradientExtendMode>(result__)
        }
    }
    pub fn SetExtendMode(
        &self,
        value: CompositionGradientExtendMode,
    ) -> ::windows::core::Result<()> {
        let this = &::windows::core::Interface::cast::<ICompositionGradientBrush>(self)?;
        unsafe {
            (::windows::core::Vtable::vtable(this).SetExtendMode)(
                ::windows::core::Vtable::as_raw(this),
                value,
            )
            .ok()
        }
    }
    pub fn InterpolationSpace(&self) -> ::windows::core::Result<CompositionColorSpace> {
        let this = &::windows::core::Interface::cast::<ICompositionGradientBrush>(self)?;
        unsafe {
            let mut result__ = ::core::mem::MaybeUninit::zeroed();
            (::windows::core::Vtable::vtable(this).InterpolationSpace)(
                ::windows::core::Vtable::as_raw(this),
                result__.as_mut_ptr(),
            )
            .from_abi::<CompositionColorSpace>(result__)
        }
    }
    pub fn SetInterpolationSpace(
        &self,
        value: CompositionColorSpace,
    ) -> ::windows::core::Result<()> {
        let this = &::windows::core::Interface::cast::<ICompositionGradientBrush>(self)?;
        unsafe {
            (::windows::core::Vtable::vtable(this).SetInterpolationSpace)(
                ::windows::core::Vtable::as_raw(this),
                value,
            )
            .ok()
        }
    }
    pub fn Offset(&self) -> ::windows::core::Result<::windows::Foundation::Numerics::Vector2> {
        let this = &::windows::core::Interface::cast::<ICompositionGradientBrush>(self)?;
        unsafe {
            let mut result__ = ::core::mem::MaybeUninit::zeroed();
            (::windows::core::Vtable::vtable(this).Offset)(
                ::windows::core::Vtable::as_raw(this),
                result__.as_mut_ptr(),
            )
            .from_abi::<::windows::Foundation::Numerics::Vector2>(result__)
        }
    }
    pub fn SetOffset(
        &self,
        value: ::windows::Foundation::Numerics::Vector2,
    ) -> ::windows::core::Result<()> {
        let this = &::windows::core::Interface::cast::<ICompositionGradientBrush>(self)?;
        unsafe {
            (::windows::core::Vtable::vtable(this).SetOffset)(
                ::windows::core::Vtable::as_raw(this),
                value,
            )
            .ok()
        }
    }
    pub fn RotationAngle(&self) -> ::windows::core::Result<f32> {
        let this = &::windows::core::Interface::cast::<ICompositionGradientBrush>(self)?;
        unsafe {
            let mut result__ = ::core::mem::MaybeUninit::zeroed();
            (::windows::core::Vtable::vtable(this).RotationAngle)(
                ::windows::core::Vtable::as_raw(this),
                result__.as_mut_ptr(),
            )
            .from_abi::<f32>(result__)
        }
    }
    pub fn SetRotationAngle(&self, value: f32) -> ::windows::core::Result<()> {
        let this = &::windows::core::Interface::cast::<ICompositionGradientBrush>(self)?;
        unsafe {
            (::windows::core::Vtable::vtable(this).SetRotationAngle)(
                ::windows::core::Vtable::as_raw(this),
                value,
            )
            .ok()
        }
    }
    pub fn RotationAngleInDegrees(&self) -> ::windows::core::Result<f32> {
        let this = &::windows::core::Interface::cast::<ICompositionGradientBrush>(self)?;
        unsafe {
            let mut result__ = ::core::mem::MaybeUninit::zeroed();
            (::windows::core::Vtable::vtable(this).RotationAngleInDegrees)(
                ::windows::core::Vtable::as_raw(this),
                result__.as_mut_ptr(),
            )
            .from_abi::<f32>(result__)
        }
    }
    pub fn SetRotationAngleInDegrees(&self, value: f32) -> ::windows::core::Result<()> {
        let this = &::windows::core::Interface::cast::<ICompositionGradientBrush>(self)?;
        unsafe {
            (::windows::core::Vtable::vtable(this).SetRotationAngleInDegrees)(
                ::windows::core::Vtable::as_raw(this),
                value,
            )
            .ok()
        }
    }
    pub fn Scale(&self) -> ::windows::core::Result<::windows::Foundation::Numerics::Vector2> {
        let this = &::windows::core::Interface::cast::<ICompositionGradientBrush>(self)?;
        unsafe {
            let mut result__ = ::core::mem::MaybeUninit::zeroed();
            (::windows::core::Vtable::vtable(this).Scale)(
                ::windows::core::Vtable::as_raw(this),
                result__.as_mut_ptr(),
            )
            .from_abi::<::windows::Foundation::Numerics::Vector2>(result__)
        }
    }
    pub fn SetScale(
        &self,
        value: ::windows::Foundation::Numerics::Vector2,
    ) -> ::windows::core::Result<()> {
        let this = &::windows::core::Interface::cast::<ICompositionGradientBrush>(self)?;
        unsafe {
            (::windows::core::Vtable::vtable(this).SetScale)(
                ::windows::core::Vtable::as_raw(this),
                value,
            )
            .ok()
        }
    }
    pub fn TransformMatrix(
        &self,
    ) -> ::windows::core::Result<::windows::Foundation::Numerics::Matrix3x2> {
        let this = &::windows::core::Interface::cast::<ICompositionGradientBrush>(self)?;
        unsafe {
            let mut result__ = ::core::mem::MaybeUninit::zeroed();
            (::windows::core::Vtable::vtable(this).TransformMatrix)(
                ::windows::core::Vtable::as_raw(this),
                result__.as_mut_ptr(),
            )
            .from_abi::<::windows::Foundation::Numerics::Matrix3x2>(result__)
        }
    }
    pub fn SetTransformMatrix(
        &self,
        value: ::windows::Foundation::Numerics::Matrix3x2,
    ) -> ::windows::core::Result<()> {
        let this = &::windows::core::Interface::cast::<ICompositionGradientBrush>(self)?;
        unsafe {
            (::windows::core::Vtable::vtable(this).SetTransformMatrix)(
                ::windows::core::Vtable::as_raw(this),
                value,
            )
            .ok()
        }
    }
    pub fn MappingMode(&self) -> ::windows::core::Result<CompositionMappingMode> {
        let this = &::windows::core::Interface::cast::<ICompositionGradientBrush2>(self)?;
        unsafe {
            let mut result__ = ::core::mem::MaybeUninit::zeroed();
            (::windows::core::Vtable::vtable(this).MappingMode)(
                ::windows::core::Vtable::as_raw(this),
                result__.as_mut_ptr(),
            )
            .from_abi::<CompositionMappingMode>(result__)
        }
    }
    pub fn SetMappingMode(&self, value: CompositionMappingMode) -> ::windows::core::Result<()> {
        let this = &::windows::core::Interface::cast::<ICompositionGradientBrush2>(self)?;
        unsafe {
            (::windows::core::Vtable::vtable(this).SetMappingMode)(
                ::windows::core::Vtable::as_raw(this),
                value,
            )
            .ok()
        }
    }
    pub fn EndPoint(&self) -> ::windows::core::Result<::windows::Foundation::Numerics::Vector2> {
        let this = self;
        unsafe {
            let mut result__ = ::core::mem::MaybeUninit::zeroed();
            (::windows::core::Vtable::vtable(this).EndPoint)(
                ::windows::core::Vtable::as_raw(this),
                result__.as_mut_ptr(),
            )
            .from_abi::<::windows::Foundation::Numerics::Vector2>(result__)
        }
    }
    pub fn SetEndPoint(
        &self,
        value: ::windows::Foundation::Numerics::Vector2,
    ) -> ::windows::core::Result<()> {
        let this = self;
        unsafe {
            (::windows::core::Vtable::vtable(this).SetEndPoint)(
                ::windows::core::Vtable::as_raw(this),
                value,
            )
            .ok()
        }
    }
    pub fn StartPoint(&self) -> ::windows::core::Result<::windows::Foundation::Numerics::Vector2> {
        let this = self;
        unsafe {
            let mut result__ = ::core::mem::MaybeUninit::zeroed();
            (::windows::core::Vtable::vtable(this).StartPoint)(
                ::windows::core::Vtable::as_raw(this),
                result__.as_mut_ptr(),
            )
            .from_abi::<::windows::Foundation::Numerics::Vector2>(result__)
        }
    }
    pub fn SetStartPoint(
        &self,
        value: ::windows::Foundation::Numerics::Vector2,
    ) -> ::windows::core::Result<()> {
        let this = self;
        unsafe {
            (::windows::core::Vtable::vtable(this).SetStartPoint)(
                ::windows::core::Vtable::as_raw(this),
                value,
            )
            .ok()
        }
    }
    pub fn Compositor(&self) -> ::windows::core::Result<Compositor> {
        let this = &::windows::core::Interface::cast::<ICompositionObject>(self)?;
        unsafe {
            let mut result__ = ::core::mem::MaybeUninit::zeroed();
            (::windows::core::Vtable::vtable(this).Compositor)(
                ::windows::core::Vtable::as_raw(this),
                result__.as_mut_ptr(),
            )
            .from_abi::<Compositor>(result__)
        }
    }
    pub fn Properties(&self) -> ::windows::core::Result<CompositionPropertySet> {
        let this = &::windows::core::Interface::cast::<ICompositionObject>(self)?;
        unsafe {
            let mut result__ = ::core::mem::MaybeUninit::zeroed();
            (::windows::core::Vtable::vtable(this).Properties)(
                ::windows::core::Vtable::as_raw(this),
                result__.as_mut_ptr(),
            )
            .from_abi::<CompositionPropertySet>(result__)
        }
    }
    pub fn StartAnimation<'a, P0>(
        &self,
        propertyname: &::windows::core::HSTRING,
        animation: P0,
    ) -> ::windows::core::Result<()>
    where
        P0: ::std::convert::Into<::windows::core::InParam<'a, CompositionAnimation>>,
    {
        let this = &::windows::core::Interface::cast::<ICompositionObject>(self)?;
        unsafe {
            (::windows::core::Vtable::vtable(this).StartAnimation)(
                ::windows::core::Vtable::as_raw(this),
                ::core::mem::transmute_copy(propertyname),
                animation.into().abi(),
            )
            .ok()
        }
    }
    pub fn StopAnimation(
        &self,
        propertyname: &::windows::core::HSTRING,
    ) -> ::windows::core::Result<()> {
        let this = &::windows::core::Interface::cast::<ICompositionObject>(self)?;
        unsafe {
            (::windows::core::Vtable::vtable(this).StopAnimation)(
                ::windows::core::Vtable::as_raw(this),
                ::core::mem::transmute_copy(propertyname),
            )
            .ok()
        }
    }
    pub fn Comment(&self) -> ::windows::core::Result<::windows::core::HSTRING> {
        let this = &::windows::core::Interface::cast::<ICompositionObject2>(self)?;
        unsafe {
            let mut result__ = ::core::mem::MaybeUninit::zeroed();
            (::windows::core::Vtable::vtable(this).Comment)(
                ::windows::core::Vtable::as_raw(this),
                result__.as_mut_ptr(),
            )
            .from_abi::<::windows::core::HSTRING>(result__)
        }
    }
    pub fn SetComment(&self, value: &::windows::core::HSTRING) -> ::windows::core::Result<()> {
        let this = &::windows::core::Interface::cast::<ICompositionObject2>(self)?;
        unsafe {
            (::windows::core::Vtable::vtable(this).SetComment)(
                ::windows::core::Vtable::as_raw(this),
                ::core::mem::transmute_copy(value),
            )
            .ok()
        }
    }
    pub fn ImplicitAnimations(&self) -> ::windows::core::Result<ImplicitAnimationCollection> {
        let this = &::windows::core::Interface::cast::<ICompositionObject2>(self)?;
        unsafe {
            let mut result__ = ::core::mem::MaybeUninit::zeroed();
            (::windows::core::Vtable::vtable(this).ImplicitAnimations)(
                ::windows::core::Vtable::as_raw(this),
                result__.as_mut_ptr(),
            )
            .from_abi::<ImplicitAnimationCollection>(result__)
        }
    }
    pub fn SetImplicitAnimations(
        &self,
        value: &ImplicitAnimationCollection,
    ) -> ::windows::core::Result<()> {
        let this = &::windows::core::Interface::cast::<ICompositionObject2>(self)?;
        unsafe {
            (::windows::core::Vtable::vtable(this).SetImplicitAnimations)(
                ::windows::core::Vtable::as_raw(this),
                ::core::mem::transmute_copy(value),
            )
            .ok()
        }
    }
    pub fn StartAnimationGroup<'a, P0, E0>(&self, value: P0) -> ::windows::core::Result<()>
    where
        P0: ::std::convert::TryInto<
            ::windows::core::InParam<'a, ICompositionAnimationBase>,
            Error = E0,
        >,
        E0: ::std::convert::Into<::windows::core::Error>,
    {
        let this = &::windows::core::Interface::cast::<ICompositionObject2>(self)?;
        unsafe {
            (::windows::core::Vtable::vtable(this).StartAnimationGroup)(
                ::windows::core::Vtable::as_raw(this),
                value.try_into().map_err(|e| e.into())?.abi(),
            )
            .ok()
        }
    }
    pub fn StopAnimationGroup<'a, P0, E0>(&self, value: P0) -> ::windows::core::Result<()>
    where
        P0: ::std::convert::TryInto<
            ::windows::core::InParam<'a, ICompositionAnimationBase>,
            Error = E0,
        >,
        E0: ::std::convert::Into<::windows::core::Error>,
    {
        let this = &::windows::core::Interface::cast::<ICompositionObject2>(self)?;
        unsafe {
            (::windows::core::Vtable::vtable(this).StopAnimationGroup)(
                ::windows::core::Vtable::as_raw(this),
                value.try_into().map_err(|e| e.into())?.abi(),
            )
            .ok()
        }
    }
    #[doc = "*Required features: `\"UI_Dispatching\"`*"]
    #[cfg(feature = "UI_Dispatching")]
    pub fn DispatcherQueue(&self) -> ::windows::core::Result<super::Dispatching::DispatcherQueue> {
        let this = &::windows::core::Interface::cast::<ICompositionObject3>(self)?;
        unsafe {
            let mut result__ = ::core::mem::MaybeUninit::zeroed();
            (::windows::core::Vtable::vtable(this).DispatcherQueue)(
                ::windows::core::Vtable::as_raw(this),
                result__.as_mut_ptr(),
            )
            .from_abi::<super::Dispatching::DispatcherQueue>(result__)
        }
    }
    pub fn TryGetAnimationController(
        &self,
        propertyname: &::windows::core::HSTRING,
    ) -> ::windows::core::Result<AnimationController> {
        let this = &::windows::core::Interface::cast::<ICompositionObject4>(self)?;
        unsafe {
            let mut result__ = ::core::mem::MaybeUninit::zeroed();
            (::windows::core::Vtable::vtable(this).TryGetAnimationController)(
                ::windows::core::Vtable::as_raw(this),
                ::core::mem::transmute_copy(propertyname),
                result__.as_mut_ptr(),
            )
            .from_abi::<AnimationController>(result__)
        }
    }
    pub fn StartAnimationWithController<'a, P0>(
        &self,
        propertyname: &::windows::core::HSTRING,
        animation: P0,
        animationcontroller: &AnimationController,
    ) -> ::windows::core::Result<()>
    where
        P0: ::std::convert::Into<::windows::core::InParam<'a, CompositionAnimation>>,
    {
        let this = &::windows::core::Interface::cast::<ICompositionObject5>(self)?;
        unsafe {
            (::windows::core::Vtable::vtable(this).StartAnimationWithController)(
                ::windows::core::Vtable::as_raw(this),
                ::core::mem::transmute_copy(propertyname),
                animation.into().abi(),
                ::core::mem::transmute_copy(animationcontroller),
            )
            .ok()
        }
    }
}
impl ::core::clone::Clone for CompositionLinearGradientBrush {
    fn clone(&self) -> Self {
        Self(self.0.clone())
    }
}
impl ::core::cmp::PartialEq for CompositionLinearGradientBrush {
    fn eq(&self, other: &Self) -> bool {
        self.0 == other.0
    }
}
impl ::core::cmp::Eq for CompositionLinearGradientBrush {}
impl ::core::fmt::Debug for CompositionLinearGradientBrush {
    fn fmt(&self, f: &mut ::core::fmt::Formatter<'_>) -> ::core::fmt::Result {
        f.debug_tuple("CompositionLinearGradientBrush").field(&self.0).finish()
    }
}
unsafe impl ::windows::core::RuntimeType for CompositionLinearGradientBrush {
    const SIGNATURE : ::windows::core::ConstBuffer = ::windows::core::ConstBuffer::from_slice ( b"rc(Microsoft.UI.Composition.CompositionLinearGradientBrush;{f726fb52-270c-58b1-a902-89576772dedc})" ) ;
    type DefaultType = ::core::option::Option<Self>;
    fn from_default(from: &Self::DefaultType) -> ::windows::core::Result<Self> {
        from.as_ref().cloned().ok_or(::windows::core::Error::OK)
    }
}
unsafe impl ::windows::core::Vtable for CompositionLinearGradientBrush {
    type Vtable = ICompositionLinearGradientBrush_Vtbl;
}
unsafe impl ::windows::core::Interface for CompositionLinearGradientBrush {
    const IID: ::windows::core::GUID =
        <ICompositionLinearGradientBrush as ::windows::core::Interface>::IID;
}
impl ::windows::core::RuntimeName for CompositionLinearGradientBrush {
    const NAME: &'static str = "Microsoft.UI.Composition.CompositionLinearGradientBrush";
}
::windows::core::interface_hierarchy!(
    CompositionLinearGradientBrush,
    ::windows::core::IUnknown,
    ::windows::core::IInspectable
);
impl ::core::convert::TryFrom<CompositionLinearGradientBrush> for IAnimationObject {
    type Error = ::windows::core::Error;
    fn try_from(value: CompositionLinearGradientBrush) -> ::windows::core::Result<Self> {
        ::core::convert::TryFrom::try_from(&value)
    }
}
impl ::core::convert::TryFrom<&CompositionLinearGradientBrush> for IAnimationObject {
    type Error = ::windows::core::Error;
    fn try_from(value: &CompositionLinearGradientBrush) -> ::windows::core::Result<Self> {
        ::windows::core::Interface::cast(value)
    }
}
impl<'a> ::core::convert::TryFrom<&CompositionLinearGradientBrush>
    for ::windows::core::InParam<'a, IAnimationObject>
{
    type Error = ::windows::core::Error;
    fn try_from(value: &CompositionLinearGradientBrush) -> ::windows::core::Result<Self> {
        let item = ::std::convert::TryInto::try_into(value)?;
        Ok(::windows::core::InParam::owned(item))
    }
}
impl ::core::convert::TryFrom<CompositionLinearGradientBrush> for ::windows::Foundation::IClosable {
    type Error = ::windows::core::Error;
    fn try_from(value: CompositionLinearGradientBrush) -> ::windows::core::Result<Self> {
        ::core::convert::TryFrom::try_from(&value)
    }
}
impl ::core::convert::TryFrom<&CompositionLinearGradientBrush>
    for ::windows::Foundation::IClosable
{
    type Error = ::windows::core::Error;
    fn try_from(value: &CompositionLinearGradientBrush) -> ::windows::core::Result<Self> {
        ::windows::core::Interface::cast(value)
    }
}
impl<'a> ::core::convert::TryFrom<&CompositionLinearGradientBrush>
    for ::windows::core::InParam<'a, ::windows::Foundation::IClosable>
{
    type Error = ::windows::core::Error;
    fn try_from(value: &CompositionLinearGradientBrush) -> ::windows::core::Result<Self> {
        let item = ::std::convert::TryInto::try_into(value)?;
        Ok(::windows::core::InParam::owned(item))
    }
}
impl ::core::convert::From<CompositionLinearGradientBrush> for CompositionGradientBrush {
    fn from(value: CompositionLinearGradientBrush) -> Self {
        ::core::convert::From::from(&value)
    }
}
impl ::core::convert::From<&CompositionLinearGradientBrush> for CompositionGradientBrush {
    fn from(value: &CompositionLinearGradientBrush) -> Self {
        ::windows::core::Interface::cast(value).unwrap()
    }
}
impl<'a> ::core::convert::From<&CompositionLinearGradientBrush>
    for ::windows::core::InParam<'a, CompositionGradientBrush>
{
    fn from(value: &CompositionLinearGradientBrush) -> Self {
        ::windows::core::InParam::owned(value.into())
    }
}
impl ::core::convert::From<CompositionLinearGradientBrush> for CompositionBrush {
    fn from(value: CompositionLinearGradientBrush) -> Self {
        ::core::convert::From::from(&value)
    }
}
impl ::core::convert::From<&CompositionLinearGradientBrush> for CompositionBrush {
    fn from(value: &CompositionLinearGradientBrush) -> Self {
        ::windows::core::Interface::cast(value).unwrap()
    }
}
impl<'a> ::core::convert::From<&CompositionLinearGradientBrush>
    for ::windows::core::InParam<'a, CompositionBrush>
{
    fn from(value: &CompositionLinearGradientBrush) -> Self {
        ::windows::core::InParam::owned(value.into())
    }
}
impl ::core::convert::From<CompositionLinearGradientBrush> for CompositionObject {
    fn from(value: CompositionLinearGradientBrush) -> Self {
        ::core::convert::From::from(&value)
    }
}
impl ::core::convert::From<&CompositionLinearGradientBrush> for CompositionObject {
    fn from(value: &CompositionLinearGradientBrush) -> Self {
        ::windows::core::Interface::cast(value).unwrap()
    }
}
impl<'a> ::core::convert::From<&CompositionLinearGradientBrush>
    for ::windows::core::InParam<'a, CompositionObject>
{
    fn from(value: &CompositionLinearGradientBrush) -> Self {
        ::windows::core::InParam::owned(value.into())
    }
}
unsafe impl ::core::marker::Send for CompositionLinearGradientBrush {}
unsafe impl ::core::marker::Sync for CompositionLinearGradientBrush {}
#[doc = "*Required features: `\"UI_Composition\"`*"]
#[repr(transparent)]
pub struct CompositionMaskBrush(::windows::core::IUnknown);
impl CompositionMaskBrush {
    pub fn PopulatePropertyInfo(
        &self,
        propertyname: &::windows::core::HSTRING,
        propertyinfo: &AnimationPropertyInfo,
    ) -> ::windows::core::Result<()> {
        let this = &::windows::core::Interface::cast::<IAnimationObject>(self)?;
        unsafe {
            (::windows::core::Vtable::vtable(this).PopulatePropertyInfo)(
                ::windows::core::Vtable::as_raw(this),
                ::core::mem::transmute_copy(propertyname),
                ::core::mem::transmute_copy(propertyinfo),
            )
            .ok()
        }
    }
    pub fn Close(&self) -> ::windows::core::Result<()> {
        let this = &::windows::core::Interface::cast::<::windows::Foundation::IClosable>(self)?;
        unsafe {
            (::windows::core::Vtable::vtable(this).Close)(::windows::core::Vtable::as_raw(this))
                .ok()
        }
    }
    pub fn Mask(&self) -> ::windows::core::Result<CompositionBrush> {
        let this = self;
        unsafe {
            let mut result__ = ::core::mem::MaybeUninit::zeroed();
            (::windows::core::Vtable::vtable(this).Mask)(
                ::windows::core::Vtable::as_raw(this),
                result__.as_mut_ptr(),
            )
            .from_abi::<CompositionBrush>(result__)
        }
    }
    pub fn SetMask<'a, P0>(&self, value: P0) -> ::windows::core::Result<()>
    where
        P0: ::std::convert::Into<::windows::core::InParam<'a, CompositionBrush>>,
    {
        let this = self;
        unsafe {
            (::windows::core::Vtable::vtable(this).SetMask)(
                ::windows::core::Vtable::as_raw(this),
                value.into().abi(),
            )
            .ok()
        }
    }
    pub fn Source(&self) -> ::windows::core::Result<CompositionBrush> {
        let this = self;
        unsafe {
            let mut result__ = ::core::mem::MaybeUninit::zeroed();
            (::windows::core::Vtable::vtable(this).Source)(
                ::windows::core::Vtable::as_raw(this),
                result__.as_mut_ptr(),
            )
            .from_abi::<CompositionBrush>(result__)
        }
    }
    pub fn SetSource<'a, P0>(&self, value: P0) -> ::windows::core::Result<()>
    where
        P0: ::std::convert::Into<::windows::core::InParam<'a, CompositionBrush>>,
    {
        let this = self;
        unsafe {
            (::windows::core::Vtable::vtable(this).SetSource)(
                ::windows::core::Vtable::as_raw(this),
                value.into().abi(),
            )
            .ok()
        }
    }
    pub fn Compositor(&self) -> ::windows::core::Result<Compositor> {
        let this = &::windows::core::Interface::cast::<ICompositionObject>(self)?;
        unsafe {
            let mut result__ = ::core::mem::MaybeUninit::zeroed();
            (::windows::core::Vtable::vtable(this).Compositor)(
                ::windows::core::Vtable::as_raw(this),
                result__.as_mut_ptr(),
            )
            .from_abi::<Compositor>(result__)
        }
    }
    pub fn Properties(&self) -> ::windows::core::Result<CompositionPropertySet> {
        let this = &::windows::core::Interface::cast::<ICompositionObject>(self)?;
        unsafe {
            let mut result__ = ::core::mem::MaybeUninit::zeroed();
            (::windows::core::Vtable::vtable(this).Properties)(
                ::windows::core::Vtable::as_raw(this),
                result__.as_mut_ptr(),
            )
            .from_abi::<CompositionPropertySet>(result__)
        }
    }
    pub fn StartAnimation<'a, P0>(
        &self,
        propertyname: &::windows::core::HSTRING,
        animation: P0,
    ) -> ::windows::core::Result<()>
    where
        P0: ::std::convert::Into<::windows::core::InParam<'a, CompositionAnimation>>,
    {
        let this = &::windows::core::Interface::cast::<ICompositionObject>(self)?;
        unsafe {
            (::windows::core::Vtable::vtable(this).StartAnimation)(
                ::windows::core::Vtable::as_raw(this),
                ::core::mem::transmute_copy(propertyname),
                animation.into().abi(),
            )
            .ok()
        }
    }
    pub fn StopAnimation(
        &self,
        propertyname: &::windows::core::HSTRING,
    ) -> ::windows::core::Result<()> {
        let this = &::windows::core::Interface::cast::<ICompositionObject>(self)?;
        unsafe {
            (::windows::core::Vtable::vtable(this).StopAnimation)(
                ::windows::core::Vtable::as_raw(this),
                ::core::mem::transmute_copy(propertyname),
            )
            .ok()
        }
    }
    pub fn Comment(&self) -> ::windows::core::Result<::windows::core::HSTRING> {
        let this = &::windows::core::Interface::cast::<ICompositionObject2>(self)?;
        unsafe {
            let mut result__ = ::core::mem::MaybeUninit::zeroed();
            (::windows::core::Vtable::vtable(this).Comment)(
                ::windows::core::Vtable::as_raw(this),
                result__.as_mut_ptr(),
            )
            .from_abi::<::windows::core::HSTRING>(result__)
        }
    }
    pub fn SetComment(&self, value: &::windows::core::HSTRING) -> ::windows::core::Result<()> {
        let this = &::windows::core::Interface::cast::<ICompositionObject2>(self)?;
        unsafe {
            (::windows::core::Vtable::vtable(this).SetComment)(
                ::windows::core::Vtable::as_raw(this),
                ::core::mem::transmute_copy(value),
            )
            .ok()
        }
    }
    pub fn ImplicitAnimations(&self) -> ::windows::core::Result<ImplicitAnimationCollection> {
        let this = &::windows::core::Interface::cast::<ICompositionObject2>(self)?;
        unsafe {
            let mut result__ = ::core::mem::MaybeUninit::zeroed();
            (::windows::core::Vtable::vtable(this).ImplicitAnimations)(
                ::windows::core::Vtable::as_raw(this),
                result__.as_mut_ptr(),
            )
            .from_abi::<ImplicitAnimationCollection>(result__)
        }
    }
    pub fn SetImplicitAnimations(
        &self,
        value: &ImplicitAnimationCollection,
    ) -> ::windows::core::Result<()> {
        let this = &::windows::core::Interface::cast::<ICompositionObject2>(self)?;
        unsafe {
            (::windows::core::Vtable::vtable(this).SetImplicitAnimations)(
                ::windows::core::Vtable::as_raw(this),
                ::core::mem::transmute_copy(value),
            )
            .ok()
        }
    }
    pub fn StartAnimationGroup<'a, P0, E0>(&self, value: P0) -> ::windows::core::Result<()>
    where
        P0: ::std::convert::TryInto<
            ::windows::core::InParam<'a, ICompositionAnimationBase>,
            Error = E0,
        >,
        E0: ::std::convert::Into<::windows::core::Error>,
    {
        let this = &::windows::core::Interface::cast::<ICompositionObject2>(self)?;
        unsafe {
            (::windows::core::Vtable::vtable(this).StartAnimationGroup)(
                ::windows::core::Vtable::as_raw(this),
                value.try_into().map_err(|e| e.into())?.abi(),
            )
            .ok()
        }
    }
    pub fn StopAnimationGroup<'a, P0, E0>(&self, value: P0) -> ::windows::core::Result<()>
    where
        P0: ::std::convert::TryInto<
            ::windows::core::InParam<'a, ICompositionAnimationBase>,
            Error = E0,
        >,
        E0: ::std::convert::Into<::windows::core::Error>,
    {
        let this = &::windows::core::Interface::cast::<ICompositionObject2>(self)?;
        unsafe {
            (::windows::core::Vtable::vtable(this).StopAnimationGroup)(
                ::windows::core::Vtable::as_raw(this),
                value.try_into().map_err(|e| e.into())?.abi(),
            )
            .ok()
        }
    }
    #[doc = "*Required features: `\"UI_Dispatching\"`*"]
    #[cfg(feature = "UI_Dispatching")]
    pub fn DispatcherQueue(&self) -> ::windows::core::Result<super::Dispatching::DispatcherQueue> {
        let this = &::windows::core::Interface::cast::<ICompositionObject3>(self)?;
        unsafe {
            let mut result__ = ::core::mem::MaybeUninit::zeroed();
            (::windows::core::Vtable::vtable(this).DispatcherQueue)(
                ::windows::core::Vtable::as_raw(this),
                result__.as_mut_ptr(),
            )
            .from_abi::<super::Dispatching::DispatcherQueue>(result__)
        }
    }
    pub fn TryGetAnimationController(
        &self,
        propertyname: &::windows::core::HSTRING,
    ) -> ::windows::core::Result<AnimationController> {
        let this = &::windows::core::Interface::cast::<ICompositionObject4>(self)?;
        unsafe {
            let mut result__ = ::core::mem::MaybeUninit::zeroed();
            (::windows::core::Vtable::vtable(this).TryGetAnimationController)(
                ::windows::core::Vtable::as_raw(this),
                ::core::mem::transmute_copy(propertyname),
                result__.as_mut_ptr(),
            )
            .from_abi::<AnimationController>(result__)
        }
    }
    pub fn StartAnimationWithController<'a, P0>(
        &self,
        propertyname: &::windows::core::HSTRING,
        animation: P0,
        animationcontroller: &AnimationController,
    ) -> ::windows::core::Result<()>
    where
        P0: ::std::convert::Into<::windows::core::InParam<'a, CompositionAnimation>>,
    {
        let this = &::windows::core::Interface::cast::<ICompositionObject5>(self)?;
        unsafe {
            (::windows::core::Vtable::vtable(this).StartAnimationWithController)(
                ::windows::core::Vtable::as_raw(this),
                ::core::mem::transmute_copy(propertyname),
                animation.into().abi(),
                ::core::mem::transmute_copy(animationcontroller),
            )
            .ok()
        }
    }
}
impl ::core::clone::Clone for CompositionMaskBrush {
    fn clone(&self) -> Self {
        Self(self.0.clone())
    }
}
impl ::core::cmp::PartialEq for CompositionMaskBrush {
    fn eq(&self, other: &Self) -> bool {
        self.0 == other.0
    }
}
impl ::core::cmp::Eq for CompositionMaskBrush {}
impl ::core::fmt::Debug for CompositionMaskBrush {
    fn fmt(&self, f: &mut ::core::fmt::Formatter<'_>) -> ::core::fmt::Result {
        f.debug_tuple("CompositionMaskBrush").field(&self.0).finish()
    }
}
unsafe impl ::windows::core::RuntimeType for CompositionMaskBrush {
    const SIGNATURE: ::windows::core::ConstBuffer = ::windows::core::ConstBuffer::from_slice(
        b"rc(Microsoft.UI.Composition.CompositionMaskBrush;{c9502786-65aa-5be5-a679-c3b5dbfb0dc6})",
    );
    type DefaultType = ::core::option::Option<Self>;
    fn from_default(from: &Self::DefaultType) -> ::windows::core::Result<Self> {
        from.as_ref().cloned().ok_or(::windows::core::Error::OK)
    }
}
unsafe impl ::windows::core::Vtable for CompositionMaskBrush {
    type Vtable = ICompositionMaskBrush_Vtbl;
}
unsafe impl ::windows::core::Interface for CompositionMaskBrush {
    const IID: ::windows::core::GUID = <ICompositionMaskBrush as ::windows::core::Interface>::IID;
}
impl ::windows::core::RuntimeName for CompositionMaskBrush {
    const NAME: &'static str = "Microsoft.UI.Composition.CompositionMaskBrush";
}
::windows::core::interface_hierarchy!(
    CompositionMaskBrush,
    ::windows::core::IUnknown,
    ::windows::core::IInspectable
);
impl ::core::convert::TryFrom<CompositionMaskBrush> for IAnimationObject {
    type Error = ::windows::core::Error;
    fn try_from(value: CompositionMaskBrush) -> ::windows::core::Result<Self> {
        ::core::convert::TryFrom::try_from(&value)
    }
}
impl ::core::convert::TryFrom<&CompositionMaskBrush> for IAnimationObject {
    type Error = ::windows::core::Error;
    fn try_from(value: &CompositionMaskBrush) -> ::windows::core::Result<Self> {
        ::windows::core::Interface::cast(value)
    }
}
impl<'a> ::core::convert::TryFrom<&CompositionMaskBrush>
    for ::windows::core::InParam<'a, IAnimationObject>
{
    type Error = ::windows::core::Error;
    fn try_from(value: &CompositionMaskBrush) -> ::windows::core::Result<Self> {
        let item = ::std::convert::TryInto::try_into(value)?;
        Ok(::windows::core::InParam::owned(item))
    }
}
impl ::core::convert::TryFrom<CompositionMaskBrush> for ::windows::Foundation::IClosable {
    type Error = ::windows::core::Error;
    fn try_from(value: CompositionMaskBrush) -> ::windows::core::Result<Self> {
        ::core::convert::TryFrom::try_from(&value)
    }
}
impl ::core::convert::TryFrom<&CompositionMaskBrush> for ::windows::Foundation::IClosable {
    type Error = ::windows::core::Error;
    fn try_from(value: &CompositionMaskBrush) -> ::windows::core::Result<Self> {
        ::windows::core::Interface::cast(value)
    }
}
impl<'a> ::core::convert::TryFrom<&CompositionMaskBrush>
    for ::windows::core::InParam<'a, ::windows::Foundation::IClosable>
{
    type Error = ::windows::core::Error;
    fn try_from(value: &CompositionMaskBrush) -> ::windows::core::Result<Self> {
        let item = ::std::convert::TryInto::try_into(value)?;
        Ok(::windows::core::InParam::owned(item))
    }
}
impl ::core::convert::From<CompositionMaskBrush> for CompositionBrush {
    fn from(value: CompositionMaskBrush) -> Self {
        ::core::convert::From::from(&value)
    }
}
impl ::core::convert::From<&CompositionMaskBrush> for CompositionBrush {
    fn from(value: &CompositionMaskBrush) -> Self {
        ::windows::core::Interface::cast(value).unwrap()
    }
}
impl<'a> ::core::convert::From<&CompositionMaskBrush>
    for ::windows::core::InParam<'a, CompositionBrush>
{
    fn from(value: &CompositionMaskBrush) -> Self {
        ::windows::core::InParam::owned(value.into())
    }
}
impl ::core::convert::From<CompositionMaskBrush> for CompositionObject {
    fn from(value: CompositionMaskBrush) -> Self {
        ::core::convert::From::from(&value)
    }
}
impl ::core::convert::From<&CompositionMaskBrush> for CompositionObject {
    fn from(value: &CompositionMaskBrush) -> Self {
        ::windows::core::Interface::cast(value).unwrap()
    }
}
impl<'a> ::core::convert::From<&CompositionMaskBrush>
    for ::windows::core::InParam<'a, CompositionObject>
{
    fn from(value: &CompositionMaskBrush) -> Self {
        ::windows::core::InParam::owned(value.into())
    }
}
unsafe impl ::core::marker::Send for CompositionMaskBrush {}
unsafe impl ::core::marker::Sync for CompositionMaskBrush {}
#[doc = "*Required features: `\"UI_Composition\"`*"]
#[repr(transparent)]
pub struct CompositionMipmapSurface(::windows::core::IUnknown);
impl CompositionMipmapSurface {
    pub fn PopulatePropertyInfo(
        &self,
        propertyname: &::windows::core::HSTRING,
        propertyinfo: &AnimationPropertyInfo,
    ) -> ::windows::core::Result<()> {
        let this = &::windows::core::Interface::cast::<IAnimationObject>(self)?;
        unsafe {
            (::windows::core::Vtable::vtable(this).PopulatePropertyInfo)(
                ::windows::core::Vtable::as_raw(this),
                ::core::mem::transmute_copy(propertyname),
                ::core::mem::transmute_copy(propertyinfo),
            )
            .ok()
        }
    }
    pub fn Close(&self) -> ::windows::core::Result<()> {
        let this = &::windows::core::Interface::cast::<::windows::Foundation::IClosable>(self)?;
        unsafe {
            (::windows::core::Vtable::vtable(this).Close)(::windows::core::Vtable::as_raw(this))
                .ok()
        }
    }
    pub fn LevelCount(&self) -> ::windows::core::Result<u32> {
        let this = self;
        unsafe {
            let mut result__ = ::core::mem::MaybeUninit::zeroed();
            (::windows::core::Vtable::vtable(this).LevelCount)(
                ::windows::core::Vtable::as_raw(this),
                result__.as_mut_ptr(),
            )
            .from_abi::<u32>(result__)
        }
    }
    #[doc = "*Required features: `\"Graphics_DirectX\"`*"]
    #[cfg(feature = "Graphics_DirectX")]
    pub fn AlphaMode(
        &self,
    ) -> ::windows::core::Result<super::super::Graphics::DirectX::DirectXAlphaMode> {
        let this = self;
        unsafe {
            let mut result__ = ::core::mem::MaybeUninit::zeroed();
            (::windows::core::Vtable::vtable(this).AlphaMode)(
                ::windows::core::Vtable::as_raw(this),
                result__.as_mut_ptr(),
            )
            .from_abi::<super::super::Graphics::DirectX::DirectXAlphaMode>(result__)
        }
    }
    #[doc = "*Required features: `\"Graphics_DirectX\"`*"]
    #[cfg(feature = "Graphics_DirectX")]
    pub fn PixelFormat(
        &self,
    ) -> ::windows::core::Result<super::super::Graphics::DirectX::DirectXPixelFormat> {
        let this = self;
        unsafe {
            let mut result__ = ::core::mem::MaybeUninit::zeroed();
            (::windows::core::Vtable::vtable(this).PixelFormat)(
                ::windows::core::Vtable::as_raw(this),
                result__.as_mut_ptr(),
            )
            .from_abi::<super::super::Graphics::DirectX::DirectXPixelFormat>(result__)
        }
    }
    pub fn SizeInt32(&self) -> ::windows::core::Result<::windows::Graphics::SizeInt32> {
        let this = self;
        unsafe {
            let mut result__ = ::core::mem::MaybeUninit::zeroed();
            (::windows::core::Vtable::vtable(this).SizeInt32)(
                ::windows::core::Vtable::as_raw(this),
                result__.as_mut_ptr(),
            )
            .from_abi::<::windows::Graphics::SizeInt32>(result__)
        }
    }
    pub fn GetDrawingSurfaceForLevel(
        &self,
        level: u32,
    ) -> ::windows::core::Result<CompositionDrawingSurface> {
        let this = self;
        unsafe {
            let mut result__ = ::core::mem::MaybeUninit::zeroed();
            (::windows::core::Vtable::vtable(this).GetDrawingSurfaceForLevel)(
                ::windows::core::Vtable::as_raw(this),
                level,
                result__.as_mut_ptr(),
            )
            .from_abi::<CompositionDrawingSurface>(result__)
        }
    }
    pub fn Compositor(&self) -> ::windows::core::Result<Compositor> {
        let this = &::windows::core::Interface::cast::<ICompositionObject>(self)?;
        unsafe {
            let mut result__ = ::core::mem::MaybeUninit::zeroed();
            (::windows::core::Vtable::vtable(this).Compositor)(
                ::windows::core::Vtable::as_raw(this),
                result__.as_mut_ptr(),
            )
            .from_abi::<Compositor>(result__)
        }
    }
    pub fn Properties(&self) -> ::windows::core::Result<CompositionPropertySet> {
        let this = &::windows::core::Interface::cast::<ICompositionObject>(self)?;
        unsafe {
            let mut result__ = ::core::mem::MaybeUninit::zeroed();
            (::windows::core::Vtable::vtable(this).Properties)(
                ::windows::core::Vtable::as_raw(this),
                result__.as_mut_ptr(),
            )
            .from_abi::<CompositionPropertySet>(result__)
        }
    }
    pub fn StartAnimation<'a, P0>(
        &self,
        propertyname: &::windows::core::HSTRING,
        animation: P0,
    ) -> ::windows::core::Result<()>
    where
        P0: ::std::convert::Into<::windows::core::InParam<'a, CompositionAnimation>>,
    {
        let this = &::windows::core::Interface::cast::<ICompositionObject>(self)?;
        unsafe {
            (::windows::core::Vtable::vtable(this).StartAnimation)(
                ::windows::core::Vtable::as_raw(this),
                ::core::mem::transmute_copy(propertyname),
                animation.into().abi(),
            )
            .ok()
        }
    }
    pub fn StopAnimation(
        &self,
        propertyname: &::windows::core::HSTRING,
    ) -> ::windows::core::Result<()> {
        let this = &::windows::core::Interface::cast::<ICompositionObject>(self)?;
        unsafe {
            (::windows::core::Vtable::vtable(this).StopAnimation)(
                ::windows::core::Vtable::as_raw(this),
                ::core::mem::transmute_copy(propertyname),
            )
            .ok()
        }
    }
    pub fn Comment(&self) -> ::windows::core::Result<::windows::core::HSTRING> {
        let this = &::windows::core::Interface::cast::<ICompositionObject2>(self)?;
        unsafe {
            let mut result__ = ::core::mem::MaybeUninit::zeroed();
            (::windows::core::Vtable::vtable(this).Comment)(
                ::windows::core::Vtable::as_raw(this),
                result__.as_mut_ptr(),
            )
            .from_abi::<::windows::core::HSTRING>(result__)
        }
    }
    pub fn SetComment(&self, value: &::windows::core::HSTRING) -> ::windows::core::Result<()> {
        let this = &::windows::core::Interface::cast::<ICompositionObject2>(self)?;
        unsafe {
            (::windows::core::Vtable::vtable(this).SetComment)(
                ::windows::core::Vtable::as_raw(this),
                ::core::mem::transmute_copy(value),
            )
            .ok()
        }
    }
    pub fn ImplicitAnimations(&self) -> ::windows::core::Result<ImplicitAnimationCollection> {
        let this = &::windows::core::Interface::cast::<ICompositionObject2>(self)?;
        unsafe {
            let mut result__ = ::core::mem::MaybeUninit::zeroed();
            (::windows::core::Vtable::vtable(this).ImplicitAnimations)(
                ::windows::core::Vtable::as_raw(this),
                result__.as_mut_ptr(),
            )
            .from_abi::<ImplicitAnimationCollection>(result__)
        }
    }
    pub fn SetImplicitAnimations(
        &self,
        value: &ImplicitAnimationCollection,
    ) -> ::windows::core::Result<()> {
        let this = &::windows::core::Interface::cast::<ICompositionObject2>(self)?;
        unsafe {
            (::windows::core::Vtable::vtable(this).SetImplicitAnimations)(
                ::windows::core::Vtable::as_raw(this),
                ::core::mem::transmute_copy(value),
            )
            .ok()
        }
    }
    pub fn StartAnimationGroup<'a, P0, E0>(&self, value: P0) -> ::windows::core::Result<()>
    where
        P0: ::std::convert::TryInto<
            ::windows::core::InParam<'a, ICompositionAnimationBase>,
            Error = E0,
        >,
        E0: ::std::convert::Into<::windows::core::Error>,
    {
        let this = &::windows::core::Interface::cast::<ICompositionObject2>(self)?;
        unsafe {
            (::windows::core::Vtable::vtable(this).StartAnimationGroup)(
                ::windows::core::Vtable::as_raw(this),
                value.try_into().map_err(|e| e.into())?.abi(),
            )
            .ok()
        }
    }
    pub fn StopAnimationGroup<'a, P0, E0>(&self, value: P0) -> ::windows::core::Result<()>
    where
        P0: ::std::convert::TryInto<
            ::windows::core::InParam<'a, ICompositionAnimationBase>,
            Error = E0,
        >,
        E0: ::std::convert::Into<::windows::core::Error>,
    {
        let this = &::windows::core::Interface::cast::<ICompositionObject2>(self)?;
        unsafe {
            (::windows::core::Vtable::vtable(this).StopAnimationGroup)(
                ::windows::core::Vtable::as_raw(this),
                value.try_into().map_err(|e| e.into())?.abi(),
            )
            .ok()
        }
    }
    #[doc = "*Required features: `\"UI_Dispatching\"`*"]
    #[cfg(feature = "UI_Dispatching")]
    pub fn DispatcherQueue(&self) -> ::windows::core::Result<super::Dispatching::DispatcherQueue> {
        let this = &::windows::core::Interface::cast::<ICompositionObject3>(self)?;
        unsafe {
            let mut result__ = ::core::mem::MaybeUninit::zeroed();
            (::windows::core::Vtable::vtable(this).DispatcherQueue)(
                ::windows::core::Vtable::as_raw(this),
                result__.as_mut_ptr(),
            )
            .from_abi::<super::Dispatching::DispatcherQueue>(result__)
        }
    }
    pub fn TryGetAnimationController(
        &self,
        propertyname: &::windows::core::HSTRING,
    ) -> ::windows::core::Result<AnimationController> {
        let this = &::windows::core::Interface::cast::<ICompositionObject4>(self)?;
        unsafe {
            let mut result__ = ::core::mem::MaybeUninit::zeroed();
            (::windows::core::Vtable::vtable(this).TryGetAnimationController)(
                ::windows::core::Vtable::as_raw(this),
                ::core::mem::transmute_copy(propertyname),
                result__.as_mut_ptr(),
            )
            .from_abi::<AnimationController>(result__)
        }
    }
    pub fn StartAnimationWithController<'a, P0>(
        &self,
        propertyname: &::windows::core::HSTRING,
        animation: P0,
        animationcontroller: &AnimationController,
    ) -> ::windows::core::Result<()>
    where
        P0: ::std::convert::Into<::windows::core::InParam<'a, CompositionAnimation>>,
    {
        let this = &::windows::core::Interface::cast::<ICompositionObject5>(self)?;
        unsafe {
            (::windows::core::Vtable::vtable(this).StartAnimationWithController)(
                ::windows::core::Vtable::as_raw(this),
                ::core::mem::transmute_copy(propertyname),
                animation.into().abi(),
                ::core::mem::transmute_copy(animationcontroller),
            )
            .ok()
        }
    }
}
impl ::core::clone::Clone for CompositionMipmapSurface {
    fn clone(&self) -> Self {
        Self(self.0.clone())
    }
}
impl ::core::cmp::PartialEq for CompositionMipmapSurface {
    fn eq(&self, other: &Self) -> bool {
        self.0 == other.0
    }
}
impl ::core::cmp::Eq for CompositionMipmapSurface {}
impl ::core::fmt::Debug for CompositionMipmapSurface {
    fn fmt(&self, f: &mut ::core::fmt::Formatter<'_>) -> ::core::fmt::Result {
        f.debug_tuple("CompositionMipmapSurface").field(&self.0).finish()
    }
}
unsafe impl ::windows::core::RuntimeType for CompositionMipmapSurface {
    const SIGNATURE : ::windows::core::ConstBuffer = ::windows::core::ConstBuffer::from_slice ( b"rc(Microsoft.UI.Composition.CompositionMipmapSurface;{681f1e47-6e43-5b55-be3a-e5c858a2d5fa})" ) ;
    type DefaultType = ::core::option::Option<Self>;
    fn from_default(from: &Self::DefaultType) -> ::windows::core::Result<Self> {
        from.as_ref().cloned().ok_or(::windows::core::Error::OK)
    }
}
unsafe impl ::windows::core::Vtable for CompositionMipmapSurface {
    type Vtable = ICompositionMipmapSurface_Vtbl;
}
unsafe impl ::windows::core::Interface for CompositionMipmapSurface {
    const IID: ::windows::core::GUID =
        <ICompositionMipmapSurface as ::windows::core::Interface>::IID;
}
impl ::windows::core::RuntimeName for CompositionMipmapSurface {
    const NAME: &'static str = "Microsoft.UI.Composition.CompositionMipmapSurface";
}
::windows::core::interface_hierarchy!(
    CompositionMipmapSurface,
    ::windows::core::IUnknown,
    ::windows::core::IInspectable
);
impl ::core::convert::TryFrom<CompositionMipmapSurface> for IAnimationObject {
    type Error = ::windows::core::Error;
    fn try_from(value: CompositionMipmapSurface) -> ::windows::core::Result<Self> {
        ::core::convert::TryFrom::try_from(&value)
    }
}
impl ::core::convert::TryFrom<&CompositionMipmapSurface> for IAnimationObject {
    type Error = ::windows::core::Error;
    fn try_from(value: &CompositionMipmapSurface) -> ::windows::core::Result<Self> {
        ::windows::core::Interface::cast(value)
    }
}
impl<'a> ::core::convert::TryFrom<&CompositionMipmapSurface>
    for ::windows::core::InParam<'a, IAnimationObject>
{
    type Error = ::windows::core::Error;
    fn try_from(value: &CompositionMipmapSurface) -> ::windows::core::Result<Self> {
        let item = ::std::convert::TryInto::try_into(value)?;
        Ok(::windows::core::InParam::owned(item))
    }
}
impl ::core::convert::TryFrom<CompositionMipmapSurface> for ::windows::Foundation::IClosable {
    type Error = ::windows::core::Error;
    fn try_from(value: CompositionMipmapSurface) -> ::windows::core::Result<Self> {
        ::core::convert::TryFrom::try_from(&value)
    }
}
impl ::core::convert::TryFrom<&CompositionMipmapSurface> for ::windows::Foundation::IClosable {
    type Error = ::windows::core::Error;
    fn try_from(value: &CompositionMipmapSurface) -> ::windows::core::Result<Self> {
        ::windows::core::Interface::cast(value)
    }
}
impl<'a> ::core::convert::TryFrom<&CompositionMipmapSurface>
    for ::windows::core::InParam<'a, ::windows::Foundation::IClosable>
{
    type Error = ::windows::core::Error;
    fn try_from(value: &CompositionMipmapSurface) -> ::windows::core::Result<Self> {
        let item = ::std::convert::TryInto::try_into(value)?;
        Ok(::windows::core::InParam::owned(item))
    }
}
impl ::core::convert::TryFrom<CompositionMipmapSurface> for ICompositionSurface {
    type Error = ::windows::core::Error;
    fn try_from(value: CompositionMipmapSurface) -> ::windows::core::Result<Self> {
        ::core::convert::TryFrom::try_from(&value)
    }
}
impl ::core::convert::TryFrom<&CompositionMipmapSurface> for ICompositionSurface {
    type Error = ::windows::core::Error;
    fn try_from(value: &CompositionMipmapSurface) -> ::windows::core::Result<Self> {
        ::windows::core::Interface::cast(value)
    }
}
impl<'a> ::core::convert::TryFrom<&CompositionMipmapSurface>
    for ::windows::core::InParam<'a, ICompositionSurface>
{
    type Error = ::windows::core::Error;
    fn try_from(value: &CompositionMipmapSurface) -> ::windows::core::Result<Self> {
        let item = ::std::convert::TryInto::try_into(value)?;
        Ok(::windows::core::InParam::owned(item))
    }
}
impl ::core::convert::From<CompositionMipmapSurface> for CompositionObject {
    fn from(value: CompositionMipmapSurface) -> Self {
        ::core::convert::From::from(&value)
    }
}
impl ::core::convert::From<&CompositionMipmapSurface> for CompositionObject {
    fn from(value: &CompositionMipmapSurface) -> Self {
        ::windows::core::Interface::cast(value).unwrap()
    }
}
impl<'a> ::core::convert::From<&CompositionMipmapSurface>
    for ::windows::core::InParam<'a, CompositionObject>
{
    fn from(value: &CompositionMipmapSurface) -> Self {
        ::windows::core::InParam::owned(value.into())
    }
}
unsafe impl ::core::marker::Send for CompositionMipmapSurface {}
unsafe impl ::core::marker::Sync for CompositionMipmapSurface {}
#[doc = "*Required features: `\"UI_Composition\"`*"]
#[repr(transparent)]
pub struct CompositionNineGridBrush(::windows::core::IUnknown);
impl CompositionNineGridBrush {
    pub fn PopulatePropertyInfo(
        &self,
        propertyname: &::windows::core::HSTRING,
        propertyinfo: &AnimationPropertyInfo,
    ) -> ::windows::core::Result<()> {
        let this = &::windows::core::Interface::cast::<IAnimationObject>(self)?;
        unsafe {
            (::windows::core::Vtable::vtable(this).PopulatePropertyInfo)(
                ::windows::core::Vtable::as_raw(this),
                ::core::mem::transmute_copy(propertyname),
                ::core::mem::transmute_copy(propertyinfo),
            )
            .ok()
        }
    }
    pub fn Close(&self) -> ::windows::core::Result<()> {
        let this = &::windows::core::Interface::cast::<::windows::Foundation::IClosable>(self)?;
        unsafe {
            (::windows::core::Vtable::vtable(this).Close)(::windows::core::Vtable::as_raw(this))
                .ok()
        }
    }
    pub fn BottomInset(&self) -> ::windows::core::Result<f32> {
        let this = self;
        unsafe {
            let mut result__ = ::core::mem::MaybeUninit::zeroed();
            (::windows::core::Vtable::vtable(this).BottomInset)(
                ::windows::core::Vtable::as_raw(this),
                result__.as_mut_ptr(),
            )
            .from_abi::<f32>(result__)
        }
    }
    pub fn SetBottomInset(&self, value: f32) -> ::windows::core::Result<()> {
        let this = self;
        unsafe {
            (::windows::core::Vtable::vtable(this).SetBottomInset)(
                ::windows::core::Vtable::as_raw(this),
                value,
            )
            .ok()
        }
    }
    pub fn BottomInsetScale(&self) -> ::windows::core::Result<f32> {
        let this = self;
        unsafe {
            let mut result__ = ::core::mem::MaybeUninit::zeroed();
            (::windows::core::Vtable::vtable(this).BottomInsetScale)(
                ::windows::core::Vtable::as_raw(this),
                result__.as_mut_ptr(),
            )
            .from_abi::<f32>(result__)
        }
    }
    pub fn SetBottomInsetScale(&self, value: f32) -> ::windows::core::Result<()> {
        let this = self;
        unsafe {
            (::windows::core::Vtable::vtable(this).SetBottomInsetScale)(
                ::windows::core::Vtable::as_raw(this),
                value,
            )
            .ok()
        }
    }
    pub fn IsCenterHollow(&self) -> ::windows::core::Result<bool> {
        let this = self;
        unsafe {
            let mut result__ = ::core::mem::MaybeUninit::zeroed();
            (::windows::core::Vtable::vtable(this).IsCenterHollow)(
                ::windows::core::Vtable::as_raw(this),
                result__.as_mut_ptr(),
            )
            .from_abi::<bool>(result__)
        }
    }
    pub fn SetIsCenterHollow(&self, value: bool) -> ::windows::core::Result<()> {
        let this = self;
        unsafe {
            (::windows::core::Vtable::vtable(this).SetIsCenterHollow)(
                ::windows::core::Vtable::as_raw(this),
                value,
            )
            .ok()
        }
    }
    pub fn LeftInset(&self) -> ::windows::core::Result<f32> {
        let this = self;
        unsafe {
            let mut result__ = ::core::mem::MaybeUninit::zeroed();
            (::windows::core::Vtable::vtable(this).LeftInset)(
                ::windows::core::Vtable::as_raw(this),
                result__.as_mut_ptr(),
            )
            .from_abi::<f32>(result__)
        }
    }
    pub fn SetLeftInset(&self, value: f32) -> ::windows::core::Result<()> {
        let this = self;
        unsafe {
            (::windows::core::Vtable::vtable(this).SetLeftInset)(
                ::windows::core::Vtable::as_raw(this),
                value,
            )
            .ok()
        }
    }
    pub fn LeftInsetScale(&self) -> ::windows::core::Result<f32> {
        let this = self;
        unsafe {
            let mut result__ = ::core::mem::MaybeUninit::zeroed();
            (::windows::core::Vtable::vtable(this).LeftInsetScale)(
                ::windows::core::Vtable::as_raw(this),
                result__.as_mut_ptr(),
            )
            .from_abi::<f32>(result__)
        }
    }
    pub fn SetLeftInsetScale(&self, value: f32) -> ::windows::core::Result<()> {
        let this = self;
        unsafe {
            (::windows::core::Vtable::vtable(this).SetLeftInsetScale)(
                ::windows::core::Vtable::as_raw(this),
                value,
            )
            .ok()
        }
    }
    pub fn RightInset(&self) -> ::windows::core::Result<f32> {
        let this = self;
        unsafe {
            let mut result__ = ::core::mem::MaybeUninit::zeroed();
            (::windows::core::Vtable::vtable(this).RightInset)(
                ::windows::core::Vtable::as_raw(this),
                result__.as_mut_ptr(),
            )
            .from_abi::<f32>(result__)
        }
    }
    pub fn SetRightInset(&self, value: f32) -> ::windows::core::Result<()> {
        let this = self;
        unsafe {
            (::windows::core::Vtable::vtable(this).SetRightInset)(
                ::windows::core::Vtable::as_raw(this),
                value,
            )
            .ok()
        }
    }
    pub fn RightInsetScale(&self) -> ::windows::core::Result<f32> {
        let this = self;
        unsafe {
            let mut result__ = ::core::mem::MaybeUninit::zeroed();
            (::windows::core::Vtable::vtable(this).RightInsetScale)(
                ::windows::core::Vtable::as_raw(this),
                result__.as_mut_ptr(),
            )
            .from_abi::<f32>(result__)
        }
    }
    pub fn SetRightInsetScale(&self, value: f32) -> ::windows::core::Result<()> {
        let this = self;
        unsafe {
            (::windows::core::Vtable::vtable(this).SetRightInsetScale)(
                ::windows::core::Vtable::as_raw(this),
                value,
            )
            .ok()
        }
    }
    pub fn Source(&self) -> ::windows::core::Result<CompositionBrush> {
        let this = self;
        unsafe {
            let mut result__ = ::core::mem::MaybeUninit::zeroed();
            (::windows::core::Vtable::vtable(this).Source)(
                ::windows::core::Vtable::as_raw(this),
                result__.as_mut_ptr(),
            )
            .from_abi::<CompositionBrush>(result__)
        }
    }
    pub fn SetSource<'a, P0>(&self, value: P0) -> ::windows::core::Result<()>
    where
        P0: ::std::convert::Into<::windows::core::InParam<'a, CompositionBrush>>,
    {
        let this = self;
        unsafe {
            (::windows::core::Vtable::vtable(this).SetSource)(
                ::windows::core::Vtable::as_raw(this),
                value.into().abi(),
            )
            .ok()
        }
    }
    pub fn TopInset(&self) -> ::windows::core::Result<f32> {
        let this = self;
        unsafe {
            let mut result__ = ::core::mem::MaybeUninit::zeroed();
            (::windows::core::Vtable::vtable(this).TopInset)(
                ::windows::core::Vtable::as_raw(this),
                result__.as_mut_ptr(),
            )
            .from_abi::<f32>(result__)
        }
    }
    pub fn SetTopInset(&self, value: f32) -> ::windows::core::Result<()> {
        let this = self;
        unsafe {
            (::windows::core::Vtable::vtable(this).SetTopInset)(
                ::windows::core::Vtable::as_raw(this),
                value,
            )
            .ok()
        }
    }
    pub fn TopInsetScale(&self) -> ::windows::core::Result<f32> {
        let this = self;
        unsafe {
            let mut result__ = ::core::mem::MaybeUninit::zeroed();
            (::windows::core::Vtable::vtable(this).TopInsetScale)(
                ::windows::core::Vtable::as_raw(this),
                result__.as_mut_ptr(),
            )
            .from_abi::<f32>(result__)
        }
    }
    pub fn SetTopInsetScale(&self, value: f32) -> ::windows::core::Result<()> {
        let this = self;
        unsafe {
            (::windows::core::Vtable::vtable(this).SetTopInsetScale)(
                ::windows::core::Vtable::as_raw(this),
                value,
            )
            .ok()
        }
    }
    pub fn SetInsets(&self, inset: f32) -> ::windows::core::Result<()> {
        let this = self;
        unsafe {
            (::windows::core::Vtable::vtable(this).SetInsets)(
                ::windows::core::Vtable::as_raw(this),
                inset,
            )
            .ok()
        }
    }
    pub fn SetInsetsWithValues(
        &self,
        left: f32,
        top: f32,
        right: f32,
        bottom: f32,
    ) -> ::windows::core::Result<()> {
        let this = self;
        unsafe {
            (::windows::core::Vtable::vtable(this).SetInsetsWithValues)(
                ::windows::core::Vtable::as_raw(this),
                left,
                top,
                right,
                bottom,
            )
            .ok()
        }
    }
    pub fn SetInsetScales(&self, scale: f32) -> ::windows::core::Result<()> {
        let this = self;
        unsafe {
            (::windows::core::Vtable::vtable(this).SetInsetScales)(
                ::windows::core::Vtable::as_raw(this),
                scale,
            )
            .ok()
        }
    }
    pub fn SetInsetScalesWithValues(
        &self,
        left: f32,
        top: f32,
        right: f32,
        bottom: f32,
    ) -> ::windows::core::Result<()> {
        let this = self;
        unsafe {
            (::windows::core::Vtable::vtable(this).SetInsetScalesWithValues)(
                ::windows::core::Vtable::as_raw(this),
                left,
                top,
                right,
                bottom,
            )
            .ok()
        }
    }
    pub fn Compositor(&self) -> ::windows::core::Result<Compositor> {
        let this = &::windows::core::Interface::cast::<ICompositionObject>(self)?;
        unsafe {
            let mut result__ = ::core::mem::MaybeUninit::zeroed();
            (::windows::core::Vtable::vtable(this).Compositor)(
                ::windows::core::Vtable::as_raw(this),
                result__.as_mut_ptr(),
            )
            .from_abi::<Compositor>(result__)
        }
    }
    pub fn Properties(&self) -> ::windows::core::Result<CompositionPropertySet> {
        let this = &::windows::core::Interface::cast::<ICompositionObject>(self)?;
        unsafe {
            let mut result__ = ::core::mem::MaybeUninit::zeroed();
            (::windows::core::Vtable::vtable(this).Properties)(
                ::windows::core::Vtable::as_raw(this),
                result__.as_mut_ptr(),
            )
            .from_abi::<CompositionPropertySet>(result__)
        }
    }
    pub fn StartAnimation<'a, P0>(
        &self,
        propertyname: &::windows::core::HSTRING,
        animation: P0,
    ) -> ::windows::core::Result<()>
    where
        P0: ::std::convert::Into<::windows::core::InParam<'a, CompositionAnimation>>,
    {
        let this = &::windows::core::Interface::cast::<ICompositionObject>(self)?;
        unsafe {
            (::windows::core::Vtable::vtable(this).StartAnimation)(
                ::windows::core::Vtable::as_raw(this),
                ::core::mem::transmute_copy(propertyname),
                animation.into().abi(),
            )
            .ok()
        }
    }
    pub fn StopAnimation(
        &self,
        propertyname: &::windows::core::HSTRING,
    ) -> ::windows::core::Result<()> {
        let this = &::windows::core::Interface::cast::<ICompositionObject>(self)?;
        unsafe {
            (::windows::core::Vtable::vtable(this).StopAnimation)(
                ::windows::core::Vtable::as_raw(this),
                ::core::mem::transmute_copy(propertyname),
            )
            .ok()
        }
    }
    pub fn Comment(&self) -> ::windows::core::Result<::windows::core::HSTRING> {
        let this = &::windows::core::Interface::cast::<ICompositionObject2>(self)?;
        unsafe {
            let mut result__ = ::core::mem::MaybeUninit::zeroed();
            (::windows::core::Vtable::vtable(this).Comment)(
                ::windows::core::Vtable::as_raw(this),
                result__.as_mut_ptr(),
            )
            .from_abi::<::windows::core::HSTRING>(result__)
        }
    }
    pub fn SetComment(&self, value: &::windows::core::HSTRING) -> ::windows::core::Result<()> {
        let this = &::windows::core::Interface::cast::<ICompositionObject2>(self)?;
        unsafe {
            (::windows::core::Vtable::vtable(this).SetComment)(
                ::windows::core::Vtable::as_raw(this),
                ::core::mem::transmute_copy(value),
            )
            .ok()
        }
    }
    pub fn ImplicitAnimations(&self) -> ::windows::core::Result<ImplicitAnimationCollection> {
        let this = &::windows::core::Interface::cast::<ICompositionObject2>(self)?;
        unsafe {
            let mut result__ = ::core::mem::MaybeUninit::zeroed();
            (::windows::core::Vtable::vtable(this).ImplicitAnimations)(
                ::windows::core::Vtable::as_raw(this),
                result__.as_mut_ptr(),
            )
            .from_abi::<ImplicitAnimationCollection>(result__)
        }
    }
    pub fn SetImplicitAnimations(
        &self,
        value: &ImplicitAnimationCollection,
    ) -> ::windows::core::Result<()> {
        let this = &::windows::core::Interface::cast::<ICompositionObject2>(self)?;
        unsafe {
            (::windows::core::Vtable::vtable(this).SetImplicitAnimations)(
                ::windows::core::Vtable::as_raw(this),
                ::core::mem::transmute_copy(value),
            )
            .ok()
        }
    }
    pub fn StartAnimationGroup<'a, P0, E0>(&self, value: P0) -> ::windows::core::Result<()>
    where
        P0: ::std::convert::TryInto<
            ::windows::core::InParam<'a, ICompositionAnimationBase>,
            Error = E0,
        >,
        E0: ::std::convert::Into<::windows::core::Error>,
    {
        let this = &::windows::core::Interface::cast::<ICompositionObject2>(self)?;
        unsafe {
            (::windows::core::Vtable::vtable(this).StartAnimationGroup)(
                ::windows::core::Vtable::as_raw(this),
                value.try_into().map_err(|e| e.into())?.abi(),
            )
            .ok()
        }
    }
    pub fn StopAnimationGroup<'a, P0, E0>(&self, value: P0) -> ::windows::core::Result<()>
    where
        P0: ::std::convert::TryInto<
            ::windows::core::InParam<'a, ICompositionAnimationBase>,
            Error = E0,
        >,
        E0: ::std::convert::Into<::windows::core::Error>,
    {
        let this = &::windows::core::Interface::cast::<ICompositionObject2>(self)?;
        unsafe {
            (::windows::core::Vtable::vtable(this).StopAnimationGroup)(
                ::windows::core::Vtable::as_raw(this),
                value.try_into().map_err(|e| e.into())?.abi(),
            )
            .ok()
        }
    }
    #[doc = "*Required features: `\"UI_Dispatching\"`*"]
    #[cfg(feature = "UI_Dispatching")]
    pub fn DispatcherQueue(&self) -> ::windows::core::Result<super::Dispatching::DispatcherQueue> {
        let this = &::windows::core::Interface::cast::<ICompositionObject3>(self)?;
        unsafe {
            let mut result__ = ::core::mem::MaybeUninit::zeroed();
            (::windows::core::Vtable::vtable(this).DispatcherQueue)(
                ::windows::core::Vtable::as_raw(this),
                result__.as_mut_ptr(),
            )
            .from_abi::<super::Dispatching::DispatcherQueue>(result__)
        }
    }
    pub fn TryGetAnimationController(
        &self,
        propertyname: &::windows::core::HSTRING,
    ) -> ::windows::core::Result<AnimationController> {
        let this = &::windows::core::Interface::cast::<ICompositionObject4>(self)?;
        unsafe {
            let mut result__ = ::core::mem::MaybeUninit::zeroed();
            (::windows::core::Vtable::vtable(this).TryGetAnimationController)(
                ::windows::core::Vtable::as_raw(this),
                ::core::mem::transmute_copy(propertyname),
                result__.as_mut_ptr(),
            )
            .from_abi::<AnimationController>(result__)
        }
    }
    pub fn StartAnimationWithController<'a, P0>(
        &self,
        propertyname: &::windows::core::HSTRING,
        animation: P0,
        animationcontroller: &AnimationController,
    ) -> ::windows::core::Result<()>
    where
        P0: ::std::convert::Into<::windows::core::InParam<'a, CompositionAnimation>>,
    {
        let this = &::windows::core::Interface::cast::<ICompositionObject5>(self)?;
        unsafe {
            (::windows::core::Vtable::vtable(this).StartAnimationWithController)(
                ::windows::core::Vtable::as_raw(this),
                ::core::mem::transmute_copy(propertyname),
                animation.into().abi(),
                ::core::mem::transmute_copy(animationcontroller),
            )
            .ok()
        }
    }
}
impl ::core::clone::Clone for CompositionNineGridBrush {
    fn clone(&self) -> Self {
        Self(self.0.clone())
    }
}
impl ::core::cmp::PartialEq for CompositionNineGridBrush {
    fn eq(&self, other: &Self) -> bool {
        self.0 == other.0
    }
}
impl ::core::cmp::Eq for CompositionNineGridBrush {}
impl ::core::fmt::Debug for CompositionNineGridBrush {
    fn fmt(&self, f: &mut ::core::fmt::Formatter<'_>) -> ::core::fmt::Result {
        f.debug_tuple("CompositionNineGridBrush").field(&self.0).finish()
    }
}
unsafe impl ::windows::core::RuntimeType for CompositionNineGridBrush {
    const SIGNATURE : ::windows::core::ConstBuffer = ::windows::core::ConstBuffer::from_slice ( b"rc(Microsoft.UI.Composition.CompositionNineGridBrush;{c77a3d21-c7ee-517a-98f4-ad9a7202bc86})" ) ;
    type DefaultType = ::core::option::Option<Self>;
    fn from_default(from: &Self::DefaultType) -> ::windows::core::Result<Self> {
        from.as_ref().cloned().ok_or(::windows::core::Error::OK)
    }
}
unsafe impl ::windows::core::Vtable for CompositionNineGridBrush {
    type Vtable = ICompositionNineGridBrush_Vtbl;
}
unsafe impl ::windows::core::Interface for CompositionNineGridBrush {
    const IID: ::windows::core::GUID =
        <ICompositionNineGridBrush as ::windows::core::Interface>::IID;
}
impl ::windows::core::RuntimeName for CompositionNineGridBrush {
    const NAME: &'static str = "Microsoft.UI.Composition.CompositionNineGridBrush";
}
::windows::core::interface_hierarchy!(
    CompositionNineGridBrush,
    ::windows::core::IUnknown,
    ::windows::core::IInspectable
);
impl ::core::convert::TryFrom<CompositionNineGridBrush> for IAnimationObject {
    type Error = ::windows::core::Error;
    fn try_from(value: CompositionNineGridBrush) -> ::windows::core::Result<Self> {
        ::core::convert::TryFrom::try_from(&value)
    }
}
impl ::core::convert::TryFrom<&CompositionNineGridBrush> for IAnimationObject {
    type Error = ::windows::core::Error;
    fn try_from(value: &CompositionNineGridBrush) -> ::windows::core::Result<Self> {
        ::windows::core::Interface::cast(value)
    }
}
impl<'a> ::core::convert::TryFrom<&CompositionNineGridBrush>
    for ::windows::core::InParam<'a, IAnimationObject>
{
    type Error = ::windows::core::Error;
    fn try_from(value: &CompositionNineGridBrush) -> ::windows::core::Result<Self> {
        let item = ::std::convert::TryInto::try_into(value)?;
        Ok(::windows::core::InParam::owned(item))
    }
}
impl ::core::convert::TryFrom<CompositionNineGridBrush> for ::windows::Foundation::IClosable {
    type Error = ::windows::core::Error;
    fn try_from(value: CompositionNineGridBrush) -> ::windows::core::Result<Self> {
        ::core::convert::TryFrom::try_from(&value)
    }
}
impl ::core::convert::TryFrom<&CompositionNineGridBrush> for ::windows::Foundation::IClosable {
    type Error = ::windows::core::Error;
    fn try_from(value: &CompositionNineGridBrush) -> ::windows::core::Result<Self> {
        ::windows::core::Interface::cast(value)
    }
}
impl<'a> ::core::convert::TryFrom<&CompositionNineGridBrush>
    for ::windows::core::InParam<'a, ::windows::Foundation::IClosable>
{
    type Error = ::windows::core::Error;
    fn try_from(value: &CompositionNineGridBrush) -> ::windows::core::Result<Self> {
        let item = ::std::convert::TryInto::try_into(value)?;
        Ok(::windows::core::InParam::owned(item))
    }
}
impl ::core::convert::From<CompositionNineGridBrush> for CompositionBrush {
    fn from(value: CompositionNineGridBrush) -> Self {
        ::core::convert::From::from(&value)
    }
}
impl ::core::convert::From<&CompositionNineGridBrush> for CompositionBrush {
    fn from(value: &CompositionNineGridBrush) -> Self {
        ::windows::core::Interface::cast(value).unwrap()
    }
}
impl<'a> ::core::convert::From<&CompositionNineGridBrush>
    for ::windows::core::InParam<'a, CompositionBrush>
{
    fn from(value: &CompositionNineGridBrush) -> Self {
        ::windows::core::InParam::owned(value.into())
    }
}
impl ::core::convert::From<CompositionNineGridBrush> for CompositionObject {
    fn from(value: CompositionNineGridBrush) -> Self {
        ::core::convert::From::from(&value)
    }
}
impl ::core::convert::From<&CompositionNineGridBrush> for CompositionObject {
    fn from(value: &CompositionNineGridBrush) -> Self {
        ::windows::core::Interface::cast(value).unwrap()
    }
}
impl<'a> ::core::convert::From<&CompositionNineGridBrush>
    for ::windows::core::InParam<'a, CompositionObject>
{
    fn from(value: &CompositionNineGridBrush) -> Self {
        ::windows::core::InParam::owned(value.into())
    }
}
unsafe impl ::core::marker::Send for CompositionNineGridBrush {}
unsafe impl ::core::marker::Sync for CompositionNineGridBrush {}
#[doc = "*Required features: `\"UI_Composition\"`*"]
#[repr(transparent)]
pub struct CompositionObject(::windows::core::IUnknown);
impl CompositionObject {
    pub fn PopulatePropertyInfo(
        &self,
        propertyname: &::windows::core::HSTRING,
        propertyinfo: &AnimationPropertyInfo,
    ) -> ::windows::core::Result<()> {
        let this = &::windows::core::Interface::cast::<IAnimationObject>(self)?;
        unsafe {
            (::windows::core::Vtable::vtable(this).PopulatePropertyInfo)(
                ::windows::core::Vtable::as_raw(this),
                ::core::mem::transmute_copy(propertyname),
                ::core::mem::transmute_copy(propertyinfo),
            )
            .ok()
        }
    }
    pub fn Close(&self) -> ::windows::core::Result<()> {
        let this = &::windows::core::Interface::cast::<::windows::Foundation::IClosable>(self)?;
        unsafe {
            (::windows::core::Vtable::vtable(this).Close)(::windows::core::Vtable::as_raw(this))
                .ok()
        }
    }
    pub fn Compositor(&self) -> ::windows::core::Result<Compositor> {
        let this = self;
        unsafe {
            let mut result__ = ::core::mem::MaybeUninit::zeroed();
            (::windows::core::Vtable::vtable(this).Compositor)(
                ::windows::core::Vtable::as_raw(this),
                result__.as_mut_ptr(),
            )
            .from_abi::<Compositor>(result__)
        }
    }
    pub fn Properties(&self) -> ::windows::core::Result<CompositionPropertySet> {
        let this = self;
        unsafe {
            let mut result__ = ::core::mem::MaybeUninit::zeroed();
            (::windows::core::Vtable::vtable(this).Properties)(
                ::windows::core::Vtable::as_raw(this),
                result__.as_mut_ptr(),
            )
            .from_abi::<CompositionPropertySet>(result__)
        }
    }
    pub fn StartAnimation<'a, P0>(
        &self,
        propertyname: &::windows::core::HSTRING,
        animation: P0,
    ) -> ::windows::core::Result<()>
    where
        P0: ::std::convert::Into<::windows::core::InParam<'a, CompositionAnimation>>,
    {
        let this = self;
        unsafe {
            (::windows::core::Vtable::vtable(this).StartAnimation)(
                ::windows::core::Vtable::as_raw(this),
                ::core::mem::transmute_copy(propertyname),
                animation.into().abi(),
            )
            .ok()
        }
    }
    pub fn StopAnimation(
        &self,
        propertyname: &::windows::core::HSTRING,
    ) -> ::windows::core::Result<()> {
        let this = self;
        unsafe {
            (::windows::core::Vtable::vtable(this).StopAnimation)(
                ::windows::core::Vtable::as_raw(this),
                ::core::mem::transmute_copy(propertyname),
            )
            .ok()
        }
    }
    pub fn Comment(&self) -> ::windows::core::Result<::windows::core::HSTRING> {
        let this = &::windows::core::Interface::cast::<ICompositionObject2>(self)?;
        unsafe {
            let mut result__ = ::core::mem::MaybeUninit::zeroed();
            (::windows::core::Vtable::vtable(this).Comment)(
                ::windows::core::Vtable::as_raw(this),
                result__.as_mut_ptr(),
            )
            .from_abi::<::windows::core::HSTRING>(result__)
        }
    }
    pub fn SetComment(&self, value: &::windows::core::HSTRING) -> ::windows::core::Result<()> {
        let this = &::windows::core::Interface::cast::<ICompositionObject2>(self)?;
        unsafe {
            (::windows::core::Vtable::vtable(this).SetComment)(
                ::windows::core::Vtable::as_raw(this),
                ::core::mem::transmute_copy(value),
            )
            .ok()
        }
    }
    pub fn ImplicitAnimations(&self) -> ::windows::core::Result<ImplicitAnimationCollection> {
        let this = &::windows::core::Interface::cast::<ICompositionObject2>(self)?;
        unsafe {
            let mut result__ = ::core::mem::MaybeUninit::zeroed();
            (::windows::core::Vtable::vtable(this).ImplicitAnimations)(
                ::windows::core::Vtable::as_raw(this),
                result__.as_mut_ptr(),
            )
            .from_abi::<ImplicitAnimationCollection>(result__)
        }
    }
    pub fn SetImplicitAnimations(
        &self,
        value: &ImplicitAnimationCollection,
    ) -> ::windows::core::Result<()> {
        let this = &::windows::core::Interface::cast::<ICompositionObject2>(self)?;
        unsafe {
            (::windows::core::Vtable::vtable(this).SetImplicitAnimations)(
                ::windows::core::Vtable::as_raw(this),
                ::core::mem::transmute_copy(value),
            )
            .ok()
        }
    }
    pub fn StartAnimationGroup<'a, P0, E0>(&self, value: P0) -> ::windows::core::Result<()>
    where
        P0: ::std::convert::TryInto<
            ::windows::core::InParam<'a, ICompositionAnimationBase>,
            Error = E0,
        >,
        E0: ::std::convert::Into<::windows::core::Error>,
    {
        let this = &::windows::core::Interface::cast::<ICompositionObject2>(self)?;
        unsafe {
            (::windows::core::Vtable::vtable(this).StartAnimationGroup)(
                ::windows::core::Vtable::as_raw(this),
                value.try_into().map_err(|e| e.into())?.abi(),
            )
            .ok()
        }
    }
    pub fn StopAnimationGroup<'a, P0, E0>(&self, value: P0) -> ::windows::core::Result<()>
    where
        P0: ::std::convert::TryInto<
            ::windows::core::InParam<'a, ICompositionAnimationBase>,
            Error = E0,
        >,
        E0: ::std::convert::Into<::windows::core::Error>,
    {
        let this = &::windows::core::Interface::cast::<ICompositionObject2>(self)?;
        unsafe {
            (::windows::core::Vtable::vtable(this).StopAnimationGroup)(
                ::windows::core::Vtable::as_raw(this),
                value.try_into().map_err(|e| e.into())?.abi(),
            )
            .ok()
        }
    }
    #[doc = "*Required features: `\"UI_Dispatching\"`*"]
    #[cfg(feature = "UI_Dispatching")]
    pub fn DispatcherQueue(&self) -> ::windows::core::Result<super::Dispatching::DispatcherQueue> {
        let this = &::windows::core::Interface::cast::<ICompositionObject3>(self)?;
        unsafe {
            let mut result__ = ::core::mem::MaybeUninit::zeroed();
            (::windows::core::Vtable::vtable(this).DispatcherQueue)(
                ::windows::core::Vtable::as_raw(this),
                result__.as_mut_ptr(),
            )
            .from_abi::<super::Dispatching::DispatcherQueue>(result__)
        }
    }
    pub fn TryGetAnimationController(
        &self,
        propertyname: &::windows::core::HSTRING,
    ) -> ::windows::core::Result<AnimationController> {
        let this = &::windows::core::Interface::cast::<ICompositionObject4>(self)?;
        unsafe {
            let mut result__ = ::core::mem::MaybeUninit::zeroed();
            (::windows::core::Vtable::vtable(this).TryGetAnimationController)(
                ::windows::core::Vtable::as_raw(this),
                ::core::mem::transmute_copy(propertyname),
                result__.as_mut_ptr(),
            )
            .from_abi::<AnimationController>(result__)
        }
    }
    pub fn StartAnimationWithController<'a, P0>(
        &self,
        propertyname: &::windows::core::HSTRING,
        animation: P0,
        animationcontroller: &AnimationController,
    ) -> ::windows::core::Result<()>
    where
        P0: ::std::convert::Into<::windows::core::InParam<'a, CompositionAnimation>>,
    {
        let this = &::windows::core::Interface::cast::<ICompositionObject5>(self)?;
        unsafe {
            (::windows::core::Vtable::vtable(this).StartAnimationWithController)(
                ::windows::core::Vtable::as_raw(this),
                ::core::mem::transmute_copy(propertyname),
                animation.into().abi(),
                ::core::mem::transmute_copy(animationcontroller),
            )
            .ok()
        }
    }
    pub fn StartAnimationWithIAnimationObject<'a, P0, E0, P1>(
        target: P0,
        propertyname: &::windows::core::HSTRING,
        animation: P1,
    ) -> ::windows::core::Result<()>
    where
        P0: ::std::convert::TryInto<::windows::core::InParam<'a, IAnimationObject>, Error = E0>,
        E0: ::std::convert::Into<::windows::core::Error>,
        P1: ::std::convert::Into<::windows::core::InParam<'a, CompositionAnimation>>,
    {
        Self::ICompositionObjectStatics(|this| unsafe {
            (::windows::core::Vtable::vtable(this).StartAnimationWithIAnimationObject)(
                ::windows::core::Vtable::as_raw(this),
                target.try_into().map_err(|e| e.into())?.abi(),
                ::core::mem::transmute_copy(propertyname),
                animation.into().abi(),
            )
            .ok()
        })
    }
    pub fn StartAnimationGroupWithIAnimationObject<'a, P0, E0, P1, E1>(
        target: P0,
        animation: P1,
    ) -> ::windows::core::Result<()>
    where
        P0: ::std::convert::TryInto<::windows::core::InParam<'a, IAnimationObject>, Error = E0>,
        E0: ::std::convert::Into<::windows::core::Error>,
        P1: ::std::convert::TryInto<
            ::windows::core::InParam<'a, ICompositionAnimationBase>,
            Error = E1,
        >,
        E1: ::std::convert::Into<::windows::core::Error>,
    {
        Self::ICompositionObjectStatics(|this| unsafe {
            (::windows::core::Vtable::vtable(this).StartAnimationGroupWithIAnimationObject)(
                ::windows::core::Vtable::as_raw(this),
                target.try_into().map_err(|e| e.into())?.abi(),
                animation.try_into().map_err(|e| e.into())?.abi(),
            )
            .ok()
        })
    }
    #[doc(hidden)]
    pub fn ICompositionObjectStatics<
        R,
        F: FnOnce(&ICompositionObjectStatics) -> ::windows::core::Result<R>,
    >(
        callback: F,
    ) -> ::windows::core::Result<R> {
        static SHARED: ::windows::core::FactoryCache<CompositionObject, ICompositionObjectStatics> =
            ::windows::core::FactoryCache::new();
        SHARED.call(callback)
    }
}
impl ::core::clone::Clone for CompositionObject {
    fn clone(&self) -> Self {
        Self(self.0.clone())
    }
}
impl ::core::cmp::PartialEq for CompositionObject {
    fn eq(&self, other: &Self) -> bool {
        self.0 == other.0
    }
}
impl ::core::cmp::Eq for CompositionObject {}
impl ::core::fmt::Debug for CompositionObject {
    fn fmt(&self, f: &mut ::core::fmt::Formatter<'_>) -> ::core::fmt::Result {
        f.debug_tuple("CompositionObject").field(&self.0).finish()
    }
}
unsafe impl ::windows::core::RuntimeType for CompositionObject {
    const SIGNATURE: ::windows::core::ConstBuffer = ::windows::core::ConstBuffer::from_slice(
        b"rc(Microsoft.UI.Composition.CompositionObject;{0e583d49-fb5e-5481-a426-d3c41e059a5a})",
    );
    type DefaultType = ::core::option::Option<Self>;
    fn from_default(from: &Self::DefaultType) -> ::windows::core::Result<Self> {
        from.as_ref().cloned().ok_or(::windows::core::Error::OK)
    }
}
unsafe impl ::windows::core::Vtable for CompositionObject {
    type Vtable = ICompositionObject_Vtbl;
}
unsafe impl ::windows::core::Interface for CompositionObject {
    const IID: ::windows::core::GUID = <ICompositionObject as ::windows::core::Interface>::IID;
}
impl ::windows::core::RuntimeName for CompositionObject {
    const NAME: &'static str = "Microsoft.UI.Composition.CompositionObject";
}
::windows::core::interface_hierarchy!(
    CompositionObject,
    ::windows::core::IUnknown,
    ::windows::core::IInspectable
);
impl ::core::convert::TryFrom<CompositionObject> for IAnimationObject {
    type Error = ::windows::core::Error;
    fn try_from(value: CompositionObject) -> ::windows::core::Result<Self> {
        ::core::convert::TryFrom::try_from(&value)
    }
}
impl ::core::convert::TryFrom<&CompositionObject> for IAnimationObject {
    type Error = ::windows::core::Error;
    fn try_from(value: &CompositionObject) -> ::windows::core::Result<Self> {
        ::windows::core::Interface::cast(value)
    }
}
impl<'a> ::core::convert::TryFrom<&CompositionObject>
    for ::windows::core::InParam<'a, IAnimationObject>
{
    type Error = ::windows::core::Error;
    fn try_from(value: &CompositionObject) -> ::windows::core::Result<Self> {
        let item = ::std::convert::TryInto::try_into(value)?;
        Ok(::windows::core::InParam::owned(item))
    }
}
impl ::core::convert::TryFrom<CompositionObject> for ::windows::Foundation::IClosable {
    type Error = ::windows::core::Error;
    fn try_from(value: CompositionObject) -> ::windows::core::Result<Self> {
        ::core::convert::TryFrom::try_from(&value)
    }
}
impl ::core::convert::TryFrom<&CompositionObject> for ::windows::Foundation::IClosable {
    type Error = ::windows::core::Error;
    fn try_from(value: &CompositionObject) -> ::windows::core::Result<Self> {
        ::windows::core::Interface::cast(value)
    }
}
impl<'a> ::core::convert::TryFrom<&CompositionObject>
    for ::windows::core::InParam<'a, ::windows::Foundation::IClosable>
{
    type Error = ::windows::core::Error;
    fn try_from(value: &CompositionObject) -> ::windows::core::Result<Self> {
        let item = ::std::convert::TryInto::try_into(value)?;
        Ok(::windows::core::InParam::owned(item))
    }
}
unsafe impl ::core::marker::Send for CompositionObject {}
unsafe impl ::core::marker::Sync for CompositionObject {}
#[doc = "*Required features: `\"UI_Composition\"`*"]
#[repr(transparent)]
pub struct CompositionPath(::windows::core::IUnknown);
impl CompositionPath {
    pub fn Create<'a, P0, E0>(source: P0) -> ::windows::core::Result<CompositionPath>
    where
        P0: ::std::convert::TryInto<
            ::windows::core::InParam<'a, ::windows::Graphics::IGeometrySource2D>,
            Error = E0,
        >,
        E0: ::std::convert::Into<::windows::core::Error>,
    {
        Self::ICompositionPathFactory(|this| unsafe {
            let mut result__ = ::core::mem::MaybeUninit::zeroed();
            (::windows::core::Vtable::vtable(this).Create)(
                ::windows::core::Vtable::as_raw(this),
                source.try_into().map_err(|e| e.into())?.abi(),
                result__.as_mut_ptr(),
            )
            .from_abi::<CompositionPath>(result__)
        })
    }
    #[doc(hidden)]
    pub fn ICompositionPathFactory<
        R,
        F: FnOnce(&ICompositionPathFactory) -> ::windows::core::Result<R>,
    >(
        callback: F,
    ) -> ::windows::core::Result<R> {
        static SHARED: ::windows::core::FactoryCache<CompositionPath, ICompositionPathFactory> =
            ::windows::core::FactoryCache::new();
        SHARED.call(callback)
    }
}
impl ::core::clone::Clone for CompositionPath {
    fn clone(&self) -> Self {
        Self(self.0.clone())
    }
}
impl ::core::cmp::PartialEq for CompositionPath {
    fn eq(&self, other: &Self) -> bool {
        self.0 == other.0
    }
}
impl ::core::cmp::Eq for CompositionPath {}
impl ::core::fmt::Debug for CompositionPath {
    fn fmt(&self, f: &mut ::core::fmt::Formatter<'_>) -> ::core::fmt::Result {
        f.debug_tuple("CompositionPath").field(&self.0).finish()
    }
}
unsafe impl ::windows::core::RuntimeType for CompositionPath {
    const SIGNATURE: ::windows::core::ConstBuffer = ::windows::core::ConstBuffer::from_slice(
        b"rc(Microsoft.UI.Composition.CompositionPath;{17c518c0-d7a2-54be-ac7f-c408562a6a20})",
    );
    type DefaultType = ::core::option::Option<Self>;
    fn from_default(from: &Self::DefaultType) -> ::windows::core::Result<Self> {
        from.as_ref().cloned().ok_or(::windows::core::Error::OK)
    }
}
unsafe impl ::windows::core::Vtable for CompositionPath {
    type Vtable = ICompositionPath_Vtbl;
}
unsafe impl ::windows::core::Interface for CompositionPath {
    const IID: ::windows::core::GUID = <ICompositionPath as ::windows::core::Interface>::IID;
}
impl ::windows::core::RuntimeName for CompositionPath {
    const NAME: &'static str = "Microsoft.UI.Composition.CompositionPath";
}
::windows::core::interface_hierarchy!(
    CompositionPath,
    ::windows::core::IUnknown,
    ::windows::core::IInspectable
);
impl ::core::convert::TryFrom<CompositionPath> for ::windows::Graphics::IGeometrySource2D {
    type Error = ::windows::core::Error;
    fn try_from(value: CompositionPath) -> ::windows::core::Result<Self> {
        ::core::convert::TryFrom::try_from(&value)
    }
}
impl ::core::convert::TryFrom<&CompositionPath> for ::windows::Graphics::IGeometrySource2D {
    type Error = ::windows::core::Error;
    fn try_from(value: &CompositionPath) -> ::windows::core::Result<Self> {
        ::windows::core::Interface::cast(value)
    }
}
impl<'a> ::core::convert::TryFrom<&CompositionPath>
    for ::windows::core::InParam<'a, ::windows::Graphics::IGeometrySource2D>
{
    type Error = ::windows::core::Error;
    fn try_from(value: &CompositionPath) -> ::windows::core::Result<Self> {
        let item = ::std::convert::TryInto::try_into(value)?;
        Ok(::windows::core::InParam::owned(item))
    }
}
unsafe impl ::core::marker::Send for CompositionPath {}
unsafe impl ::core::marker::Sync for CompositionPath {}
#[doc = "*Required features: `\"UI_Composition\"`*"]
#[repr(transparent)]
pub struct CompositionPathGeometry(::windows::core::IUnknown);
impl CompositionPathGeometry {
    pub fn PopulatePropertyInfo(
        &self,
        propertyname: &::windows::core::HSTRING,
        propertyinfo: &AnimationPropertyInfo,
    ) -> ::windows::core::Result<()> {
        let this = &::windows::core::Interface::cast::<IAnimationObject>(self)?;
        unsafe {
            (::windows::core::Vtable::vtable(this).PopulatePropertyInfo)(
                ::windows::core::Vtable::as_raw(this),
                ::core::mem::transmute_copy(propertyname),
                ::core::mem::transmute_copy(propertyinfo),
            )
            .ok()
        }
    }
    pub fn Close(&self) -> ::windows::core::Result<()> {
        let this = &::windows::core::Interface::cast::<::windows::Foundation::IClosable>(self)?;
        unsafe {
            (::windows::core::Vtable::vtable(this).Close)(::windows::core::Vtable::as_raw(this))
                .ok()
        }
    }
    pub fn TrimEnd(&self) -> ::windows::core::Result<f32> {
        let this = &::windows::core::Interface::cast::<ICompositionGeometry>(self)?;
        unsafe {
            let mut result__ = ::core::mem::MaybeUninit::zeroed();
            (::windows::core::Vtable::vtable(this).TrimEnd)(
                ::windows::core::Vtable::as_raw(this),
                result__.as_mut_ptr(),
            )
            .from_abi::<f32>(result__)
        }
    }
    pub fn SetTrimEnd(&self, value: f32) -> ::windows::core::Result<()> {
        let this = &::windows::core::Interface::cast::<ICompositionGeometry>(self)?;
        unsafe {
            (::windows::core::Vtable::vtable(this).SetTrimEnd)(
                ::windows::core::Vtable::as_raw(this),
                value,
            )
            .ok()
        }
    }
    pub fn TrimOffset(&self) -> ::windows::core::Result<f32> {
        let this = &::windows::core::Interface::cast::<ICompositionGeometry>(self)?;
        unsafe {
            let mut result__ = ::core::mem::MaybeUninit::zeroed();
            (::windows::core::Vtable::vtable(this).TrimOffset)(
                ::windows::core::Vtable::as_raw(this),
                result__.as_mut_ptr(),
            )
            .from_abi::<f32>(result__)
        }
    }
    pub fn SetTrimOffset(&self, value: f32) -> ::windows::core::Result<()> {
        let this = &::windows::core::Interface::cast::<ICompositionGeometry>(self)?;
        unsafe {
            (::windows::core::Vtable::vtable(this).SetTrimOffset)(
                ::windows::core::Vtable::as_raw(this),
                value,
            )
            .ok()
        }
    }
    pub fn TrimStart(&self) -> ::windows::core::Result<f32> {
        let this = &::windows::core::Interface::cast::<ICompositionGeometry>(self)?;
        unsafe {
            let mut result__ = ::core::mem::MaybeUninit::zeroed();
            (::windows::core::Vtable::vtable(this).TrimStart)(
                ::windows::core::Vtable::as_raw(this),
                result__.as_mut_ptr(),
            )
            .from_abi::<f32>(result__)
        }
    }
    pub fn SetTrimStart(&self, value: f32) -> ::windows::core::Result<()> {
        let this = &::windows::core::Interface::cast::<ICompositionGeometry>(self)?;
        unsafe {
            (::windows::core::Vtable::vtable(this).SetTrimStart)(
                ::windows::core::Vtable::as_raw(this),
                value,
            )
            .ok()
        }
    }
    pub fn Compositor(&self) -> ::windows::core::Result<Compositor> {
        let this = &::windows::core::Interface::cast::<ICompositionObject>(self)?;
        unsafe {
            let mut result__ = ::core::mem::MaybeUninit::zeroed();
            (::windows::core::Vtable::vtable(this).Compositor)(
                ::windows::core::Vtable::as_raw(this),
                result__.as_mut_ptr(),
            )
            .from_abi::<Compositor>(result__)
        }
    }
    pub fn Properties(&self) -> ::windows::core::Result<CompositionPropertySet> {
        let this = &::windows::core::Interface::cast::<ICompositionObject>(self)?;
        unsafe {
            let mut result__ = ::core::mem::MaybeUninit::zeroed();
            (::windows::core::Vtable::vtable(this).Properties)(
                ::windows::core::Vtable::as_raw(this),
                result__.as_mut_ptr(),
            )
            .from_abi::<CompositionPropertySet>(result__)
        }
    }
    pub fn StartAnimation<'a, P0>(
        &self,
        propertyname: &::windows::core::HSTRING,
        animation: P0,
    ) -> ::windows::core::Result<()>
    where
        P0: ::std::convert::Into<::windows::core::InParam<'a, CompositionAnimation>>,
    {
        let this = &::windows::core::Interface::cast::<ICompositionObject>(self)?;
        unsafe {
            (::windows::core::Vtable::vtable(this).StartAnimation)(
                ::windows::core::Vtable::as_raw(this),
                ::core::mem::transmute_copy(propertyname),
                animation.into().abi(),
            )
            .ok()
        }
    }
    pub fn StopAnimation(
        &self,
        propertyname: &::windows::core::HSTRING,
    ) -> ::windows::core::Result<()> {
        let this = &::windows::core::Interface::cast::<ICompositionObject>(self)?;
        unsafe {
            (::windows::core::Vtable::vtable(this).StopAnimation)(
                ::windows::core::Vtable::as_raw(this),
                ::core::mem::transmute_copy(propertyname),
            )
            .ok()
        }
    }
    pub fn Comment(&self) -> ::windows::core::Result<::windows::core::HSTRING> {
        let this = &::windows::core::Interface::cast::<ICompositionObject2>(self)?;
        unsafe {
            let mut result__ = ::core::mem::MaybeUninit::zeroed();
            (::windows::core::Vtable::vtable(this).Comment)(
                ::windows::core::Vtable::as_raw(this),
                result__.as_mut_ptr(),
            )
            .from_abi::<::windows::core::HSTRING>(result__)
        }
    }
    pub fn SetComment(&self, value: &::windows::core::HSTRING) -> ::windows::core::Result<()> {
        let this = &::windows::core::Interface::cast::<ICompositionObject2>(self)?;
        unsafe {
            (::windows::core::Vtable::vtable(this).SetComment)(
                ::windows::core::Vtable::as_raw(this),
                ::core::mem::transmute_copy(value),
            )
            .ok()
        }
    }
    pub fn ImplicitAnimations(&self) -> ::windows::core::Result<ImplicitAnimationCollection> {
        let this = &::windows::core::Interface::cast::<ICompositionObject2>(self)?;
        unsafe {
            let mut result__ = ::core::mem::MaybeUninit::zeroed();
            (::windows::core::Vtable::vtable(this).ImplicitAnimations)(
                ::windows::core::Vtable::as_raw(this),
                result__.as_mut_ptr(),
            )
            .from_abi::<ImplicitAnimationCollection>(result__)
        }
    }
    pub fn SetImplicitAnimations(
        &self,
        value: &ImplicitAnimationCollection,
    ) -> ::windows::core::Result<()> {
        let this = &::windows::core::Interface::cast::<ICompositionObject2>(self)?;
        unsafe {
            (::windows::core::Vtable::vtable(this).SetImplicitAnimations)(
                ::windows::core::Vtable::as_raw(this),
                ::core::mem::transmute_copy(value),
            )
            .ok()
        }
    }
    pub fn StartAnimationGroup<'a, P0, E0>(&self, value: P0) -> ::windows::core::Result<()>
    where
        P0: ::std::convert::TryInto<
            ::windows::core::InParam<'a, ICompositionAnimationBase>,
            Error = E0,
        >,
        E0: ::std::convert::Into<::windows::core::Error>,
    {
        let this = &::windows::core::Interface::cast::<ICompositionObject2>(self)?;
        unsafe {
            (::windows::core::Vtable::vtable(this).StartAnimationGroup)(
                ::windows::core::Vtable::as_raw(this),
                value.try_into().map_err(|e| e.into())?.abi(),
            )
            .ok()
        }
    }
    pub fn StopAnimationGroup<'a, P0, E0>(&self, value: P0) -> ::windows::core::Result<()>
    where
        P0: ::std::convert::TryInto<
            ::windows::core::InParam<'a, ICompositionAnimationBase>,
            Error = E0,
        >,
        E0: ::std::convert::Into<::windows::core::Error>,
    {
        let this = &::windows::core::Interface::cast::<ICompositionObject2>(self)?;
        unsafe {
            (::windows::core::Vtable::vtable(this).StopAnimationGroup)(
                ::windows::core::Vtable::as_raw(this),
                value.try_into().map_err(|e| e.into())?.abi(),
            )
            .ok()
        }
    }
    #[doc = "*Required features: `\"UI_Dispatching\"`*"]
    #[cfg(feature = "UI_Dispatching")]
    pub fn DispatcherQueue(&self) -> ::windows::core::Result<super::Dispatching::DispatcherQueue> {
        let this = &::windows::core::Interface::cast::<ICompositionObject3>(self)?;
        unsafe {
            let mut result__ = ::core::mem::MaybeUninit::zeroed();
            (::windows::core::Vtable::vtable(this).DispatcherQueue)(
                ::windows::core::Vtable::as_raw(this),
                result__.as_mut_ptr(),
            )
            .from_abi::<super::Dispatching::DispatcherQueue>(result__)
        }
    }
    pub fn TryGetAnimationController(
        &self,
        propertyname: &::windows::core::HSTRING,
    ) -> ::windows::core::Result<AnimationController> {
        let this = &::windows::core::Interface::cast::<ICompositionObject4>(self)?;
        unsafe {
            let mut result__ = ::core::mem::MaybeUninit::zeroed();
            (::windows::core::Vtable::vtable(this).TryGetAnimationController)(
                ::windows::core::Vtable::as_raw(this),
                ::core::mem::transmute_copy(propertyname),
                result__.as_mut_ptr(),
            )
            .from_abi::<AnimationController>(result__)
        }
    }
    pub fn StartAnimationWithController<'a, P0>(
        &self,
        propertyname: &::windows::core::HSTRING,
        animation: P0,
        animationcontroller: &AnimationController,
    ) -> ::windows::core::Result<()>
    where
        P0: ::std::convert::Into<::windows::core::InParam<'a, CompositionAnimation>>,
    {
        let this = &::windows::core::Interface::cast::<ICompositionObject5>(self)?;
        unsafe {
            (::windows::core::Vtable::vtable(this).StartAnimationWithController)(
                ::windows::core::Vtable::as_raw(this),
                ::core::mem::transmute_copy(propertyname),
                animation.into().abi(),
                ::core::mem::transmute_copy(animationcontroller),
            )
            .ok()
        }
    }
    pub fn Path(&self) -> ::windows::core::Result<CompositionPath> {
        let this = self;
        unsafe {
            let mut result__ = ::core::mem::MaybeUninit::zeroed();
            (::windows::core::Vtable::vtable(this).Path)(
                ::windows::core::Vtable::as_raw(this),
                result__.as_mut_ptr(),
            )
            .from_abi::<CompositionPath>(result__)
        }
    }
    pub fn SetPath(&self, value: &CompositionPath) -> ::windows::core::Result<()> {
        let this = self;
        unsafe {
            (::windows::core::Vtable::vtable(this).SetPath)(
                ::windows::core::Vtable::as_raw(this),
                ::core::mem::transmute_copy(value),
            )
            .ok()
        }
    }
}
impl ::core::clone::Clone for CompositionPathGeometry {
    fn clone(&self) -> Self {
        Self(self.0.clone())
    }
}
impl ::core::cmp::PartialEq for CompositionPathGeometry {
    fn eq(&self, other: &Self) -> bool {
        self.0 == other.0
    }
}
impl ::core::cmp::Eq for CompositionPathGeometry {}
impl ::core::fmt::Debug for CompositionPathGeometry {
    fn fmt(&self, f: &mut ::core::fmt::Formatter<'_>) -> ::core::fmt::Result {
        f.debug_tuple("CompositionPathGeometry").field(&self.0).finish()
    }
}
unsafe impl ::windows::core::RuntimeType for CompositionPathGeometry {
    const SIGNATURE : ::windows::core::ConstBuffer = ::windows::core::ConstBuffer::from_slice ( b"rc(Microsoft.UI.Composition.CompositionPathGeometry;{0f6e6b82-060b-571e-b849-ab8e0d723962})" ) ;
    type DefaultType = ::core::option::Option<Self>;
    fn from_default(from: &Self::DefaultType) -> ::windows::core::Result<Self> {
        from.as_ref().cloned().ok_or(::windows::core::Error::OK)
    }
}
unsafe impl ::windows::core::Vtable for CompositionPathGeometry {
    type Vtable = ICompositionPathGeometry_Vtbl;
}
unsafe impl ::windows::core::Interface for CompositionPathGeometry {
    const IID: ::windows::core::GUID =
        <ICompositionPathGeometry as ::windows::core::Interface>::IID;
}
impl ::windows::core::RuntimeName for CompositionPathGeometry {
    const NAME: &'static str = "Microsoft.UI.Composition.CompositionPathGeometry";
}
::windows::core::interface_hierarchy!(
    CompositionPathGeometry,
    ::windows::core::IUnknown,
    ::windows::core::IInspectable
);
impl ::core::convert::TryFrom<CompositionPathGeometry> for IAnimationObject {
    type Error = ::windows::core::Error;
    fn try_from(value: CompositionPathGeometry) -> ::windows::core::Result<Self> {
        ::core::convert::TryFrom::try_from(&value)
    }
}
impl ::core::convert::TryFrom<&CompositionPathGeometry> for IAnimationObject {
    type Error = ::windows::core::Error;
    fn try_from(value: &CompositionPathGeometry) -> ::windows::core::Result<Self> {
        ::windows::core::Interface::cast(value)
    }
}
impl<'a> ::core::convert::TryFrom<&CompositionPathGeometry>
    for ::windows::core::InParam<'a, IAnimationObject>
{
    type Error = ::windows::core::Error;
    fn try_from(value: &CompositionPathGeometry) -> ::windows::core::Result<Self> {
        let item = ::std::convert::TryInto::try_into(value)?;
        Ok(::windows::core::InParam::owned(item))
    }
}
impl ::core::convert::TryFrom<CompositionPathGeometry> for ::windows::Foundation::IClosable {
    type Error = ::windows::core::Error;
    fn try_from(value: CompositionPathGeometry) -> ::windows::core::Result<Self> {
        ::core::convert::TryFrom::try_from(&value)
    }
}
impl ::core::convert::TryFrom<&CompositionPathGeometry> for ::windows::Foundation::IClosable {
    type Error = ::windows::core::Error;
    fn try_from(value: &CompositionPathGeometry) -> ::windows::core::Result<Self> {
        ::windows::core::Interface::cast(value)
    }
}
impl<'a> ::core::convert::TryFrom<&CompositionPathGeometry>
    for ::windows::core::InParam<'a, ::windows::Foundation::IClosable>
{
    type Error = ::windows::core::Error;
    fn try_from(value: &CompositionPathGeometry) -> ::windows::core::Result<Self> {
        let item = ::std::convert::TryInto::try_into(value)?;
        Ok(::windows::core::InParam::owned(item))
    }
}
impl ::core::convert::From<CompositionPathGeometry> for CompositionGeometry {
    fn from(value: CompositionPathGeometry) -> Self {
        ::core::convert::From::from(&value)
    }
}
impl ::core::convert::From<&CompositionPathGeometry> for CompositionGeometry {
    fn from(value: &CompositionPathGeometry) -> Self {
        ::windows::core::Interface::cast(value).unwrap()
    }
}
impl<'a> ::core::convert::From<&CompositionPathGeometry>
    for ::windows::core::InParam<'a, CompositionGeometry>
{
    fn from(value: &CompositionPathGeometry) -> Self {
        ::windows::core::InParam::owned(value.into())
    }
}
impl ::core::convert::From<CompositionPathGeometry> for CompositionObject {
    fn from(value: CompositionPathGeometry) -> Self {
        ::core::convert::From::from(&value)
    }
}
impl ::core::convert::From<&CompositionPathGeometry> for CompositionObject {
    fn from(value: &CompositionPathGeometry) -> Self {
        ::windows::core::Interface::cast(value).unwrap()
    }
}
impl<'a> ::core::convert::From<&CompositionPathGeometry>
    for ::windows::core::InParam<'a, CompositionObject>
{
    fn from(value: &CompositionPathGeometry) -> Self {
        ::windows::core::InParam::owned(value.into())
    }
}
unsafe impl ::core::marker::Send for CompositionPathGeometry {}
unsafe impl ::core::marker::Sync for CompositionPathGeometry {}
#[doc = "*Required features: `\"UI_Composition\"`*"]
#[repr(transparent)]
pub struct CompositionProjectedShadow(::windows::core::IUnknown);
impl CompositionProjectedShadow {
    pub fn PopulatePropertyInfo(
        &self,
        propertyname: &::windows::core::HSTRING,
        propertyinfo: &AnimationPropertyInfo,
    ) -> ::windows::core::Result<()> {
        let this = &::windows::core::Interface::cast::<IAnimationObject>(self)?;
        unsafe {
            (::windows::core::Vtable::vtable(this).PopulatePropertyInfo)(
                ::windows::core::Vtable::as_raw(this),
                ::core::mem::transmute_copy(propertyname),
                ::core::mem::transmute_copy(propertyinfo),
            )
            .ok()
        }
    }
    pub fn Close(&self) -> ::windows::core::Result<()> {
        let this = &::windows::core::Interface::cast::<::windows::Foundation::IClosable>(self)?;
        unsafe {
            (::windows::core::Vtable::vtable(this).Close)(::windows::core::Vtable::as_raw(this))
                .ok()
        }
    }
    pub fn Compositor(&self) -> ::windows::core::Result<Compositor> {
        let this = &::windows::core::Interface::cast::<ICompositionObject>(self)?;
        unsafe {
            let mut result__ = ::core::mem::MaybeUninit::zeroed();
            (::windows::core::Vtable::vtable(this).Compositor)(
                ::windows::core::Vtable::as_raw(this),
                result__.as_mut_ptr(),
            )
            .from_abi::<Compositor>(result__)
        }
    }
    pub fn Properties(&self) -> ::windows::core::Result<CompositionPropertySet> {
        let this = &::windows::core::Interface::cast::<ICompositionObject>(self)?;
        unsafe {
            let mut result__ = ::core::mem::MaybeUninit::zeroed();
            (::windows::core::Vtable::vtable(this).Properties)(
                ::windows::core::Vtable::as_raw(this),
                result__.as_mut_ptr(),
            )
            .from_abi::<CompositionPropertySet>(result__)
        }
    }
    pub fn StartAnimation<'a, P0>(
        &self,
        propertyname: &::windows::core::HSTRING,
        animation: P0,
    ) -> ::windows::core::Result<()>
    where
        P0: ::std::convert::Into<::windows::core::InParam<'a, CompositionAnimation>>,
    {
        let this = &::windows::core::Interface::cast::<ICompositionObject>(self)?;
        unsafe {
            (::windows::core::Vtable::vtable(this).StartAnimation)(
                ::windows::core::Vtable::as_raw(this),
                ::core::mem::transmute_copy(propertyname),
                animation.into().abi(),
            )
            .ok()
        }
    }
    pub fn StopAnimation(
        &self,
        propertyname: &::windows::core::HSTRING,
    ) -> ::windows::core::Result<()> {
        let this = &::windows::core::Interface::cast::<ICompositionObject>(self)?;
        unsafe {
            (::windows::core::Vtable::vtable(this).StopAnimation)(
                ::windows::core::Vtable::as_raw(this),
                ::core::mem::transmute_copy(propertyname),
            )
            .ok()
        }
    }
    pub fn Comment(&self) -> ::windows::core::Result<::windows::core::HSTRING> {
        let this = &::windows::core::Interface::cast::<ICompositionObject2>(self)?;
        unsafe {
            let mut result__ = ::core::mem::MaybeUninit::zeroed();
            (::windows::core::Vtable::vtable(this).Comment)(
                ::windows::core::Vtable::as_raw(this),
                result__.as_mut_ptr(),
            )
            .from_abi::<::windows::core::HSTRING>(result__)
        }
    }
    pub fn SetComment(&self, value: &::windows::core::HSTRING) -> ::windows::core::Result<()> {
        let this = &::windows::core::Interface::cast::<ICompositionObject2>(self)?;
        unsafe {
            (::windows::core::Vtable::vtable(this).SetComment)(
                ::windows::core::Vtable::as_raw(this),
                ::core::mem::transmute_copy(value),
            )
            .ok()
        }
    }
    pub fn ImplicitAnimations(&self) -> ::windows::core::Result<ImplicitAnimationCollection> {
        let this = &::windows::core::Interface::cast::<ICompositionObject2>(self)?;
        unsafe {
            let mut result__ = ::core::mem::MaybeUninit::zeroed();
            (::windows::core::Vtable::vtable(this).ImplicitAnimations)(
                ::windows::core::Vtable::as_raw(this),
                result__.as_mut_ptr(),
            )
            .from_abi::<ImplicitAnimationCollection>(result__)
        }
    }
    pub fn SetImplicitAnimations(
        &self,
        value: &ImplicitAnimationCollection,
    ) -> ::windows::core::Result<()> {
        let this = &::windows::core::Interface::cast::<ICompositionObject2>(self)?;
        unsafe {
            (::windows::core::Vtable::vtable(this).SetImplicitAnimations)(
                ::windows::core::Vtable::as_raw(this),
                ::core::mem::transmute_copy(value),
            )
            .ok()
        }
    }
    pub fn StartAnimationGroup<'a, P0, E0>(&self, value: P0) -> ::windows::core::Result<()>
    where
        P0: ::std::convert::TryInto<
            ::windows::core::InParam<'a, ICompositionAnimationBase>,
            Error = E0,
        >,
        E0: ::std::convert::Into<::windows::core::Error>,
    {
        let this = &::windows::core::Interface::cast::<ICompositionObject2>(self)?;
        unsafe {
            (::windows::core::Vtable::vtable(this).StartAnimationGroup)(
                ::windows::core::Vtable::as_raw(this),
                value.try_into().map_err(|e| e.into())?.abi(),
            )
            .ok()
        }
    }
    pub fn StopAnimationGroup<'a, P0, E0>(&self, value: P0) -> ::windows::core::Result<()>
    where
        P0: ::std::convert::TryInto<
            ::windows::core::InParam<'a, ICompositionAnimationBase>,
            Error = E0,
        >,
        E0: ::std::convert::Into<::windows::core::Error>,
    {
        let this = &::windows::core::Interface::cast::<ICompositionObject2>(self)?;
        unsafe {
            (::windows::core::Vtable::vtable(this).StopAnimationGroup)(
                ::windows::core::Vtable::as_raw(this),
                value.try_into().map_err(|e| e.into())?.abi(),
            )
            .ok()
        }
    }
    #[doc = "*Required features: `\"UI_Dispatching\"`*"]
    #[cfg(feature = "UI_Dispatching")]
    pub fn DispatcherQueue(&self) -> ::windows::core::Result<super::Dispatching::DispatcherQueue> {
        let this = &::windows::core::Interface::cast::<ICompositionObject3>(self)?;
        unsafe {
            let mut result__ = ::core::mem::MaybeUninit::zeroed();
            (::windows::core::Vtable::vtable(this).DispatcherQueue)(
                ::windows::core::Vtable::as_raw(this),
                result__.as_mut_ptr(),
            )
            .from_abi::<super::Dispatching::DispatcherQueue>(result__)
        }
    }
    pub fn TryGetAnimationController(
        &self,
        propertyname: &::windows::core::HSTRING,
    ) -> ::windows::core::Result<AnimationController> {
        let this = &::windows::core::Interface::cast::<ICompositionObject4>(self)?;
        unsafe {
            let mut result__ = ::core::mem::MaybeUninit::zeroed();
            (::windows::core::Vtable::vtable(this).TryGetAnimationController)(
                ::windows::core::Vtable::as_raw(this),
                ::core::mem::transmute_copy(propertyname),
                result__.as_mut_ptr(),
            )
            .from_abi::<AnimationController>(result__)
        }
    }
    pub fn StartAnimationWithController<'a, P0>(
        &self,
        propertyname: &::windows::core::HSTRING,
        animation: P0,
        animationcontroller: &AnimationController,
    ) -> ::windows::core::Result<()>
    where
        P0: ::std::convert::Into<::windows::core::InParam<'a, CompositionAnimation>>,
    {
        let this = &::windows::core::Interface::cast::<ICompositionObject5>(self)?;
        unsafe {
            (::windows::core::Vtable::vtable(this).StartAnimationWithController)(
                ::windows::core::Vtable::as_raw(this),
                ::core::mem::transmute_copy(propertyname),
                animation.into().abi(),
                ::core::mem::transmute_copy(animationcontroller),
            )
            .ok()
        }
    }
    pub fn BlurRadiusMultiplier(&self) -> ::windows::core::Result<f32> {
        let this = self;
        unsafe {
            let mut result__ = ::core::mem::MaybeUninit::zeroed();
            (::windows::core::Vtable::vtable(this).BlurRadiusMultiplier)(
                ::windows::core::Vtable::as_raw(this),
                result__.as_mut_ptr(),
            )
            .from_abi::<f32>(result__)
        }
    }
    pub fn SetBlurRadiusMultiplier(&self, value: f32) -> ::windows::core::Result<()> {
        let this = self;
        unsafe {
            (::windows::core::Vtable::vtable(this).SetBlurRadiusMultiplier)(
                ::windows::core::Vtable::as_raw(this),
                value,
            )
            .ok()
        }
    }
    pub fn Casters(&self) -> ::windows::core::Result<CompositionProjectedShadowCasterCollection> {
        let this = self;
        unsafe {
            let mut result__ = ::core::mem::MaybeUninit::zeroed();
            (::windows::core::Vtable::vtable(this).Casters)(
                ::windows::core::Vtable::as_raw(this),
                result__.as_mut_ptr(),
            )
            .from_abi::<CompositionProjectedShadowCasterCollection>(result__)
        }
    }
    pub fn LightSource(&self) -> ::windows::core::Result<CompositionLight> {
        let this = self;
        unsafe {
            let mut result__ = ::core::mem::MaybeUninit::zeroed();
            (::windows::core::Vtable::vtable(this).LightSource)(
                ::windows::core::Vtable::as_raw(this),
                result__.as_mut_ptr(),
            )
            .from_abi::<CompositionLight>(result__)
        }
    }
    pub fn SetLightSource<'a, P0>(&self, value: P0) -> ::windows::core::Result<()>
    where
        P0: ::std::convert::Into<::windows::core::InParam<'a, CompositionLight>>,
    {
        let this = self;
        unsafe {
            (::windows::core::Vtable::vtable(this).SetLightSource)(
                ::windows::core::Vtable::as_raw(this),
                value.into().abi(),
            )
            .ok()
        }
    }
    pub fn MaxBlurRadius(&self) -> ::windows::core::Result<f32> {
        let this = self;
        unsafe {
            let mut result__ = ::core::mem::MaybeUninit::zeroed();
            (::windows::core::Vtable::vtable(this).MaxBlurRadius)(
                ::windows::core::Vtable::as_raw(this),
                result__.as_mut_ptr(),
            )
            .from_abi::<f32>(result__)
        }
    }
    pub fn SetMaxBlurRadius(&self, value: f32) -> ::windows::core::Result<()> {
        let this = self;
        unsafe {
            (::windows::core::Vtable::vtable(this).SetMaxBlurRadius)(
                ::windows::core::Vtable::as_raw(this),
                value,
            )
            .ok()
        }
    }
    pub fn MinBlurRadius(&self) -> ::windows::core::Result<f32> {
        let this = self;
        unsafe {
            let mut result__ = ::core::mem::MaybeUninit::zeroed();
            (::windows::core::Vtable::vtable(this).MinBlurRadius)(
                ::windows::core::Vtable::as_raw(this),
                result__.as_mut_ptr(),
            )
            .from_abi::<f32>(result__)
        }
    }
    pub fn SetMinBlurRadius(&self, value: f32) -> ::windows::core::Result<()> {
        let this = self;
        unsafe {
            (::windows::core::Vtable::vtable(this).SetMinBlurRadius)(
                ::windows::core::Vtable::as_raw(this),
                value,
            )
            .ok()
        }
    }
    pub fn Receivers(
        &self,
    ) -> ::windows::core::Result<CompositionProjectedShadowReceiverUnorderedCollection> {
        let this = self;
        unsafe {
            let mut result__ = ::core::mem::MaybeUninit::zeroed();
            (::windows::core::Vtable::vtable(this).Receivers)(
                ::windows::core::Vtable::as_raw(this),
                result__.as_mut_ptr(),
            )
            .from_abi::<CompositionProjectedShadowReceiverUnorderedCollection>(result__)
        }
    }
}
impl ::core::clone::Clone for CompositionProjectedShadow {
    fn clone(&self) -> Self {
        Self(self.0.clone())
    }
}
impl ::core::cmp::PartialEq for CompositionProjectedShadow {
    fn eq(&self, other: &Self) -> bool {
        self.0 == other.0
    }
}
impl ::core::cmp::Eq for CompositionProjectedShadow {}
impl ::core::fmt::Debug for CompositionProjectedShadow {
    fn fmt(&self, f: &mut ::core::fmt::Formatter<'_>) -> ::core::fmt::Result {
        f.debug_tuple("CompositionProjectedShadow").field(&self.0).finish()
    }
}
unsafe impl ::windows::core::RuntimeType for CompositionProjectedShadow {
    const SIGNATURE : ::windows::core::ConstBuffer = ::windows::core::ConstBuffer::from_slice ( b"rc(Microsoft.UI.Composition.CompositionProjectedShadow;{d400ab10-8b92-5abb-9e23-807974fc6961})" ) ;
    type DefaultType = ::core::option::Option<Self>;
    fn from_default(from: &Self::DefaultType) -> ::windows::core::Result<Self> {
        from.as_ref().cloned().ok_or(::windows::core::Error::OK)
    }
}
unsafe impl ::windows::core::Vtable for CompositionProjectedShadow {
    type Vtable = ICompositionProjectedShadow_Vtbl;
}
unsafe impl ::windows::core::Interface for CompositionProjectedShadow {
    const IID: ::windows::core::GUID =
        <ICompositionProjectedShadow as ::windows::core::Interface>::IID;
}
impl ::windows::core::RuntimeName for CompositionProjectedShadow {
    const NAME: &'static str = "Microsoft.UI.Composition.CompositionProjectedShadow";
}
::windows::core::interface_hierarchy!(
    CompositionProjectedShadow,
    ::windows::core::IUnknown,
    ::windows::core::IInspectable
);
impl ::core::convert::TryFrom<CompositionProjectedShadow> for IAnimationObject {
    type Error = ::windows::core::Error;
    fn try_from(value: CompositionProjectedShadow) -> ::windows::core::Result<Self> {
        ::core::convert::TryFrom::try_from(&value)
    }
}
impl ::core::convert::TryFrom<&CompositionProjectedShadow> for IAnimationObject {
    type Error = ::windows::core::Error;
    fn try_from(value: &CompositionProjectedShadow) -> ::windows::core::Result<Self> {
        ::windows::core::Interface::cast(value)
    }
}
impl<'a> ::core::convert::TryFrom<&CompositionProjectedShadow>
    for ::windows::core::InParam<'a, IAnimationObject>
{
    type Error = ::windows::core::Error;
    fn try_from(value: &CompositionProjectedShadow) -> ::windows::core::Result<Self> {
        let item = ::std::convert::TryInto::try_into(value)?;
        Ok(::windows::core::InParam::owned(item))
    }
}
impl ::core::convert::TryFrom<CompositionProjectedShadow> for ::windows::Foundation::IClosable {
    type Error = ::windows::core::Error;
    fn try_from(value: CompositionProjectedShadow) -> ::windows::core::Result<Self> {
        ::core::convert::TryFrom::try_from(&value)
    }
}
impl ::core::convert::TryFrom<&CompositionProjectedShadow> for ::windows::Foundation::IClosable {
    type Error = ::windows::core::Error;
    fn try_from(value: &CompositionProjectedShadow) -> ::windows::core::Result<Self> {
        ::windows::core::Interface::cast(value)
    }
}
impl<'a> ::core::convert::TryFrom<&CompositionProjectedShadow>
    for ::windows::core::InParam<'a, ::windows::Foundation::IClosable>
{
    type Error = ::windows::core::Error;
    fn try_from(value: &CompositionProjectedShadow) -> ::windows::core::Result<Self> {
        let item = ::std::convert::TryInto::try_into(value)?;
        Ok(::windows::core::InParam::owned(item))
    }
}
impl ::core::convert::From<CompositionProjectedShadow> for CompositionObject {
    fn from(value: CompositionProjectedShadow) -> Self {
        ::core::convert::From::from(&value)
    }
}
impl ::core::convert::From<&CompositionProjectedShadow> for CompositionObject {
    fn from(value: &CompositionProjectedShadow) -> Self {
        ::windows::core::Interface::cast(value).unwrap()
    }
}
impl<'a> ::core::convert::From<&CompositionProjectedShadow>
    for ::windows::core::InParam<'a, CompositionObject>
{
    fn from(value: &CompositionProjectedShadow) -> Self {
        ::windows::core::InParam::owned(value.into())
    }
}
unsafe impl ::core::marker::Send for CompositionProjectedShadow {}
unsafe impl ::core::marker::Sync for CompositionProjectedShadow {}
#[doc = "*Required features: `\"UI_Composition\"`*"]
#[repr(transparent)]
pub struct CompositionProjectedShadowCaster(::windows::core::IUnknown);
impl CompositionProjectedShadowCaster {
    pub fn PopulatePropertyInfo(
        &self,
        propertyname: &::windows::core::HSTRING,
        propertyinfo: &AnimationPropertyInfo,
    ) -> ::windows::core::Result<()> {
        let this = &::windows::core::Interface::cast::<IAnimationObject>(self)?;
        unsafe {
            (::windows::core::Vtable::vtable(this).PopulatePropertyInfo)(
                ::windows::core::Vtable::as_raw(this),
                ::core::mem::transmute_copy(propertyname),
                ::core::mem::transmute_copy(propertyinfo),
            )
            .ok()
        }
    }
    pub fn Close(&self) -> ::windows::core::Result<()> {
        let this = &::windows::core::Interface::cast::<::windows::Foundation::IClosable>(self)?;
        unsafe {
            (::windows::core::Vtable::vtable(this).Close)(::windows::core::Vtable::as_raw(this))
                .ok()
        }
    }
    pub fn Compositor(&self) -> ::windows::core::Result<Compositor> {
        let this = &::windows::core::Interface::cast::<ICompositionObject>(self)?;
        unsafe {
            let mut result__ = ::core::mem::MaybeUninit::zeroed();
            (::windows::core::Vtable::vtable(this).Compositor)(
                ::windows::core::Vtable::as_raw(this),
                result__.as_mut_ptr(),
            )
            .from_abi::<Compositor>(result__)
        }
    }
    pub fn Properties(&self) -> ::windows::core::Result<CompositionPropertySet> {
        let this = &::windows::core::Interface::cast::<ICompositionObject>(self)?;
        unsafe {
            let mut result__ = ::core::mem::MaybeUninit::zeroed();
            (::windows::core::Vtable::vtable(this).Properties)(
                ::windows::core::Vtable::as_raw(this),
                result__.as_mut_ptr(),
            )
            .from_abi::<CompositionPropertySet>(result__)
        }
    }
    pub fn StartAnimation<'a, P0>(
        &self,
        propertyname: &::windows::core::HSTRING,
        animation: P0,
    ) -> ::windows::core::Result<()>
    where
        P0: ::std::convert::Into<::windows::core::InParam<'a, CompositionAnimation>>,
    {
        let this = &::windows::core::Interface::cast::<ICompositionObject>(self)?;
        unsafe {
            (::windows::core::Vtable::vtable(this).StartAnimation)(
                ::windows::core::Vtable::as_raw(this),
                ::core::mem::transmute_copy(propertyname),
                animation.into().abi(),
            )
            .ok()
        }
    }
    pub fn StopAnimation(
        &self,
        propertyname: &::windows::core::HSTRING,
    ) -> ::windows::core::Result<()> {
        let this = &::windows::core::Interface::cast::<ICompositionObject>(self)?;
        unsafe {
            (::windows::core::Vtable::vtable(this).StopAnimation)(
                ::windows::core::Vtable::as_raw(this),
                ::core::mem::transmute_copy(propertyname),
            )
            .ok()
        }
    }
    pub fn Comment(&self) -> ::windows::core::Result<::windows::core::HSTRING> {
        let this = &::windows::core::Interface::cast::<ICompositionObject2>(self)?;
        unsafe {
            let mut result__ = ::core::mem::MaybeUninit::zeroed();
            (::windows::core::Vtable::vtable(this).Comment)(
                ::windows::core::Vtable::as_raw(this),
                result__.as_mut_ptr(),
            )
            .from_abi::<::windows::core::HSTRING>(result__)
        }
    }
    pub fn SetComment(&self, value: &::windows::core::HSTRING) -> ::windows::core::Result<()> {
        let this = &::windows::core::Interface::cast::<ICompositionObject2>(self)?;
        unsafe {
            (::windows::core::Vtable::vtable(this).SetComment)(
                ::windows::core::Vtable::as_raw(this),
                ::core::mem::transmute_copy(value),
            )
            .ok()
        }
    }
    pub fn ImplicitAnimations(&self) -> ::windows::core::Result<ImplicitAnimationCollection> {
        let this = &::windows::core::Interface::cast::<ICompositionObject2>(self)?;
        unsafe {
            let mut result__ = ::core::mem::MaybeUninit::zeroed();
            (::windows::core::Vtable::vtable(this).ImplicitAnimations)(
                ::windows::core::Vtable::as_raw(this),
                result__.as_mut_ptr(),
            )
            .from_abi::<ImplicitAnimationCollection>(result__)
        }
    }
    pub fn SetImplicitAnimations(
        &self,
        value: &ImplicitAnimationCollection,
    ) -> ::windows::core::Result<()> {
        let this = &::windows::core::Interface::cast::<ICompositionObject2>(self)?;
        unsafe {
            (::windows::core::Vtable::vtable(this).SetImplicitAnimations)(
                ::windows::core::Vtable::as_raw(this),
                ::core::mem::transmute_copy(value),
            )
            .ok()
        }
    }
    pub fn StartAnimationGroup<'a, P0, E0>(&self, value: P0) -> ::windows::core::Result<()>
    where
        P0: ::std::convert::TryInto<
            ::windows::core::InParam<'a, ICompositionAnimationBase>,
            Error = E0,
        >,
        E0: ::std::convert::Into<::windows::core::Error>,
    {
        let this = &::windows::core::Interface::cast::<ICompositionObject2>(self)?;
        unsafe {
            (::windows::core::Vtable::vtable(this).StartAnimationGroup)(
                ::windows::core::Vtable::as_raw(this),
                value.try_into().map_err(|e| e.into())?.abi(),
            )
            .ok()
        }
    }
    pub fn StopAnimationGroup<'a, P0, E0>(&self, value: P0) -> ::windows::core::Result<()>
    where
        P0: ::std::convert::TryInto<
            ::windows::core::InParam<'a, ICompositionAnimationBase>,
            Error = E0,
        >,
        E0: ::std::convert::Into<::windows::core::Error>,
    {
        let this = &::windows::core::Interface::cast::<ICompositionObject2>(self)?;
        unsafe {
            (::windows::core::Vtable::vtable(this).StopAnimationGroup)(
                ::windows::core::Vtable::as_raw(this),
                value.try_into().map_err(|e| e.into())?.abi(),
            )
            .ok()
        }
    }
    #[doc = "*Required features: `\"UI_Dispatching\"`*"]
    #[cfg(feature = "UI_Dispatching")]
    pub fn DispatcherQueue(&self) -> ::windows::core::Result<super::Dispatching::DispatcherQueue> {
        let this = &::windows::core::Interface::cast::<ICompositionObject3>(self)?;
        unsafe {
            let mut result__ = ::core::mem::MaybeUninit::zeroed();
            (::windows::core::Vtable::vtable(this).DispatcherQueue)(
                ::windows::core::Vtable::as_raw(this),
                result__.as_mut_ptr(),
            )
            .from_abi::<super::Dispatching::DispatcherQueue>(result__)
        }
    }
    pub fn TryGetAnimationController(
        &self,
        propertyname: &::windows::core::HSTRING,
    ) -> ::windows::core::Result<AnimationController> {
        let this = &::windows::core::Interface::cast::<ICompositionObject4>(self)?;
        unsafe {
            let mut result__ = ::core::mem::MaybeUninit::zeroed();
            (::windows::core::Vtable::vtable(this).TryGetAnimationController)(
                ::windows::core::Vtable::as_raw(this),
                ::core::mem::transmute_copy(propertyname),
                result__.as_mut_ptr(),
            )
            .from_abi::<AnimationController>(result__)
        }
    }
    pub fn StartAnimationWithController<'a, P0>(
        &self,
        propertyname: &::windows::core::HSTRING,
        animation: P0,
        animationcontroller: &AnimationController,
    ) -> ::windows::core::Result<()>
    where
        P0: ::std::convert::Into<::windows::core::InParam<'a, CompositionAnimation>>,
    {
        let this = &::windows::core::Interface::cast::<ICompositionObject5>(self)?;
        unsafe {
            (::windows::core::Vtable::vtable(this).StartAnimationWithController)(
                ::windows::core::Vtable::as_raw(this),
                ::core::mem::transmute_copy(propertyname),
                animation.into().abi(),
                ::core::mem::transmute_copy(animationcontroller),
            )
            .ok()
        }
    }
    pub fn Brush(&self) -> ::windows::core::Result<CompositionBrush> {
        let this = self;
        unsafe {
            let mut result__ = ::core::mem::MaybeUninit::zeroed();
            (::windows::core::Vtable::vtable(this).Brush)(
                ::windows::core::Vtable::as_raw(this),
                result__.as_mut_ptr(),
            )
            .from_abi::<CompositionBrush>(result__)
        }
    }
    pub fn SetBrush<'a, P0>(&self, value: P0) -> ::windows::core::Result<()>
    where
        P0: ::std::convert::Into<::windows::core::InParam<'a, CompositionBrush>>,
    {
        let this = self;
        unsafe {
            (::windows::core::Vtable::vtable(this).SetBrush)(
                ::windows::core::Vtable::as_raw(this),
                value.into().abi(),
            )
            .ok()
        }
    }
    pub fn CastingVisual(&self) -> ::windows::core::Result<Visual> {
        let this = self;
        unsafe {
            let mut result__ = ::core::mem::MaybeUninit::zeroed();
            (::windows::core::Vtable::vtable(this).CastingVisual)(
                ::windows::core::Vtable::as_raw(this),
                result__.as_mut_ptr(),
            )
            .from_abi::<Visual>(result__)
        }
    }
    pub fn SetCastingVisual<'a, P0>(&self, value: P0) -> ::windows::core::Result<()>
    where
        P0: ::std::convert::Into<::windows::core::InParam<'a, Visual>>,
    {
        let this = self;
        unsafe {
            (::windows::core::Vtable::vtable(this).SetCastingVisual)(
                ::windows::core::Vtable::as_raw(this),
                value.into().abi(),
            )
            .ok()
        }
    }
}
impl ::core::clone::Clone for CompositionProjectedShadowCaster {
    fn clone(&self) -> Self {
        Self(self.0.clone())
    }
}
impl ::core::cmp::PartialEq for CompositionProjectedShadowCaster {
    fn eq(&self, other: &Self) -> bool {
        self.0 == other.0
    }
}
impl ::core::cmp::Eq for CompositionProjectedShadowCaster {}
impl ::core::fmt::Debug for CompositionProjectedShadowCaster {
    fn fmt(&self, f: &mut ::core::fmt::Formatter<'_>) -> ::core::fmt::Result {
        f.debug_tuple("CompositionProjectedShadowCaster").field(&self.0).finish()
    }
}
unsafe impl ::windows::core::RuntimeType for CompositionProjectedShadowCaster {
    const SIGNATURE : ::windows::core::ConstBuffer = ::windows::core::ConstBuffer::from_slice ( b"rc(Microsoft.UI.Composition.CompositionProjectedShadowCaster;{15a9f2d0-6bae-521b-90c7-c7500f2bf562})" ) ;
    type DefaultType = ::core::option::Option<Self>;
    fn from_default(from: &Self::DefaultType) -> ::windows::core::Result<Self> {
        from.as_ref().cloned().ok_or(::windows::core::Error::OK)
    }
}
unsafe impl ::windows::core::Vtable for CompositionProjectedShadowCaster {
    type Vtable = ICompositionProjectedShadowCaster_Vtbl;
}
unsafe impl ::windows::core::Interface for CompositionProjectedShadowCaster {
    const IID: ::windows::core::GUID =
        <ICompositionProjectedShadowCaster as ::windows::core::Interface>::IID;
}
impl ::windows::core::RuntimeName for CompositionProjectedShadowCaster {
    const NAME: &'static str = "Microsoft.UI.Composition.CompositionProjectedShadowCaster";
}
::windows::core::interface_hierarchy!(
    CompositionProjectedShadowCaster,
    ::windows::core::IUnknown,
    ::windows::core::IInspectable
);
impl ::core::convert::TryFrom<CompositionProjectedShadowCaster> for IAnimationObject {
    type Error = ::windows::core::Error;
    fn try_from(value: CompositionProjectedShadowCaster) -> ::windows::core::Result<Self> {
        ::core::convert::TryFrom::try_from(&value)
    }
}
impl ::core::convert::TryFrom<&CompositionProjectedShadowCaster> for IAnimationObject {
    type Error = ::windows::core::Error;
    fn try_from(value: &CompositionProjectedShadowCaster) -> ::windows::core::Result<Self> {
        ::windows::core::Interface::cast(value)
    }
}
impl<'a> ::core::convert::TryFrom<&CompositionProjectedShadowCaster>
    for ::windows::core::InParam<'a, IAnimationObject>
{
    type Error = ::windows::core::Error;
    fn try_from(value: &CompositionProjectedShadowCaster) -> ::windows::core::Result<Self> {
        let item = ::std::convert::TryInto::try_into(value)?;
        Ok(::windows::core::InParam::owned(item))
    }
}
impl ::core::convert::TryFrom<CompositionProjectedShadowCaster>
    for ::windows::Foundation::IClosable
{
    type Error = ::windows::core::Error;
    fn try_from(value: CompositionProjectedShadowCaster) -> ::windows::core::Result<Self> {
        ::core::convert::TryFrom::try_from(&value)
    }
}
impl ::core::convert::TryFrom<&CompositionProjectedShadowCaster>
    for ::windows::Foundation::IClosable
{
    type Error = ::windows::core::Error;
    fn try_from(value: &CompositionProjectedShadowCaster) -> ::windows::core::Result<Self> {
        ::windows::core::Interface::cast(value)
    }
}
impl<'a> ::core::convert::TryFrom<&CompositionProjectedShadowCaster>
    for ::windows::core::InParam<'a, ::windows::Foundation::IClosable>
{
    type Error = ::windows::core::Error;
    fn try_from(value: &CompositionProjectedShadowCaster) -> ::windows::core::Result<Self> {
        let item = ::std::convert::TryInto::try_into(value)?;
        Ok(::windows::core::InParam::owned(item))
    }
}
impl ::core::convert::From<CompositionProjectedShadowCaster> for CompositionObject {
    fn from(value: CompositionProjectedShadowCaster) -> Self {
        ::core::convert::From::from(&value)
    }
}
impl ::core::convert::From<&CompositionProjectedShadowCaster> for CompositionObject {
    fn from(value: &CompositionProjectedShadowCaster) -> Self {
        ::windows::core::Interface::cast(value).unwrap()
    }
}
impl<'a> ::core::convert::From<&CompositionProjectedShadowCaster>
    for ::windows::core::InParam<'a, CompositionObject>
{
    fn from(value: &CompositionProjectedShadowCaster) -> Self {
        ::windows::core::InParam::owned(value.into())
    }
}
unsafe impl ::core::marker::Send for CompositionProjectedShadowCaster {}
unsafe impl ::core::marker::Sync for CompositionProjectedShadowCaster {}
#[doc = "*Required features: `\"UI_Composition\"`*"]
#[repr(transparent)]
pub struct CompositionProjectedShadowCasterCollection(::windows::core::IUnknown);
impl CompositionProjectedShadowCasterCollection {
    pub fn PopulatePropertyInfo(
        &self,
        propertyname: &::windows::core::HSTRING,
        propertyinfo: &AnimationPropertyInfo,
    ) -> ::windows::core::Result<()> {
        let this = &::windows::core::Interface::cast::<IAnimationObject>(self)?;
        unsafe {
            (::windows::core::Vtable::vtable(this).PopulatePropertyInfo)(
                ::windows::core::Vtable::as_raw(this),
                ::core::mem::transmute_copy(propertyname),
                ::core::mem::transmute_copy(propertyinfo),
            )
            .ok()
        }
    }
    pub fn Close(&self) -> ::windows::core::Result<()> {
        let this = &::windows::core::Interface::cast::<::windows::Foundation::IClosable>(self)?;
        unsafe {
            (::windows::core::Vtable::vtable(this).Close)(::windows::core::Vtable::as_raw(this))
                .ok()
        }
    }
    pub fn Compositor(&self) -> ::windows::core::Result<Compositor> {
        let this = &::windows::core::Interface::cast::<ICompositionObject>(self)?;
        unsafe {
            let mut result__ = ::core::mem::MaybeUninit::zeroed();
            (::windows::core::Vtable::vtable(this).Compositor)(
                ::windows::core::Vtable::as_raw(this),
                result__.as_mut_ptr(),
            )
            .from_abi::<Compositor>(result__)
        }
    }
    pub fn Properties(&self) -> ::windows::core::Result<CompositionPropertySet> {
        let this = &::windows::core::Interface::cast::<ICompositionObject>(self)?;
        unsafe {
            let mut result__ = ::core::mem::MaybeUninit::zeroed();
            (::windows::core::Vtable::vtable(this).Properties)(
                ::windows::core::Vtable::as_raw(this),
                result__.as_mut_ptr(),
            )
            .from_abi::<CompositionPropertySet>(result__)
        }
    }
    pub fn StartAnimation<'a, P0>(
        &self,
        propertyname: &::windows::core::HSTRING,
        animation: P0,
    ) -> ::windows::core::Result<()>
    where
        P0: ::std::convert::Into<::windows::core::InParam<'a, CompositionAnimation>>,
    {
        let this = &::windows::core::Interface::cast::<ICompositionObject>(self)?;
        unsafe {
            (::windows::core::Vtable::vtable(this).StartAnimation)(
                ::windows::core::Vtable::as_raw(this),
                ::core::mem::transmute_copy(propertyname),
                animation.into().abi(),
            )
            .ok()
        }
    }
    pub fn StopAnimation(
        &self,
        propertyname: &::windows::core::HSTRING,
    ) -> ::windows::core::Result<()> {
        let this = &::windows::core::Interface::cast::<ICompositionObject>(self)?;
        unsafe {
            (::windows::core::Vtable::vtable(this).StopAnimation)(
                ::windows::core::Vtable::as_raw(this),
                ::core::mem::transmute_copy(propertyname),
            )
            .ok()
        }
    }
    pub fn Comment(&self) -> ::windows::core::Result<::windows::core::HSTRING> {
        let this = &::windows::core::Interface::cast::<ICompositionObject2>(self)?;
        unsafe {
            let mut result__ = ::core::mem::MaybeUninit::zeroed();
            (::windows::core::Vtable::vtable(this).Comment)(
                ::windows::core::Vtable::as_raw(this),
                result__.as_mut_ptr(),
            )
            .from_abi::<::windows::core::HSTRING>(result__)
        }
    }
    pub fn SetComment(&self, value: &::windows::core::HSTRING) -> ::windows::core::Result<()> {
        let this = &::windows::core::Interface::cast::<ICompositionObject2>(self)?;
        unsafe {
            (::windows::core::Vtable::vtable(this).SetComment)(
                ::windows::core::Vtable::as_raw(this),
                ::core::mem::transmute_copy(value),
            )
            .ok()
        }
    }
    pub fn ImplicitAnimations(&self) -> ::windows::core::Result<ImplicitAnimationCollection> {
        let this = &::windows::core::Interface::cast::<ICompositionObject2>(self)?;
        unsafe {
            let mut result__ = ::core::mem::MaybeUninit::zeroed();
            (::windows::core::Vtable::vtable(this).ImplicitAnimations)(
                ::windows::core::Vtable::as_raw(this),
                result__.as_mut_ptr(),
            )
            .from_abi::<ImplicitAnimationCollection>(result__)
        }
    }
    pub fn SetImplicitAnimations(
        &self,
        value: &ImplicitAnimationCollection,
    ) -> ::windows::core::Result<()> {
        let this = &::windows::core::Interface::cast::<ICompositionObject2>(self)?;
        unsafe {
            (::windows::core::Vtable::vtable(this).SetImplicitAnimations)(
                ::windows::core::Vtable::as_raw(this),
                ::core::mem::transmute_copy(value),
            )
            .ok()
        }
    }
    pub fn StartAnimationGroup<'a, P0, E0>(&self, value: P0) -> ::windows::core::Result<()>
    where
        P0: ::std::convert::TryInto<
            ::windows::core::InParam<'a, ICompositionAnimationBase>,
            Error = E0,
        >,
        E0: ::std::convert::Into<::windows::core::Error>,
    {
        let this = &::windows::core::Interface::cast::<ICompositionObject2>(self)?;
        unsafe {
            (::windows::core::Vtable::vtable(this).StartAnimationGroup)(
                ::windows::core::Vtable::as_raw(this),
                value.try_into().map_err(|e| e.into())?.abi(),
            )
            .ok()
        }
    }
    pub fn StopAnimationGroup<'a, P0, E0>(&self, value: P0) -> ::windows::core::Result<()>
    where
        P0: ::std::convert::TryInto<
            ::windows::core::InParam<'a, ICompositionAnimationBase>,
            Error = E0,
        >,
        E0: ::std::convert::Into<::windows::core::Error>,
    {
        let this = &::windows::core::Interface::cast::<ICompositionObject2>(self)?;
        unsafe {
            (::windows::core::Vtable::vtable(this).StopAnimationGroup)(
                ::windows::core::Vtable::as_raw(this),
                value.try_into().map_err(|e| e.into())?.abi(),
            )
            .ok()
        }
    }
    #[doc = "*Required features: `\"UI_Dispatching\"`*"]
    #[cfg(feature = "UI_Dispatching")]
    pub fn DispatcherQueue(&self) -> ::windows::core::Result<super::Dispatching::DispatcherQueue> {
        let this = &::windows::core::Interface::cast::<ICompositionObject3>(self)?;
        unsafe {
            let mut result__ = ::core::mem::MaybeUninit::zeroed();
            (::windows::core::Vtable::vtable(this).DispatcherQueue)(
                ::windows::core::Vtable::as_raw(this),
                result__.as_mut_ptr(),
            )
            .from_abi::<super::Dispatching::DispatcherQueue>(result__)
        }
    }
    pub fn TryGetAnimationController(
        &self,
        propertyname: &::windows::core::HSTRING,
    ) -> ::windows::core::Result<AnimationController> {
        let this = &::windows::core::Interface::cast::<ICompositionObject4>(self)?;
        unsafe {
            let mut result__ = ::core::mem::MaybeUninit::zeroed();
            (::windows::core::Vtable::vtable(this).TryGetAnimationController)(
                ::windows::core::Vtable::as_raw(this),
                ::core::mem::transmute_copy(propertyname),
                result__.as_mut_ptr(),
            )
            .from_abi::<AnimationController>(result__)
        }
    }
    pub fn StartAnimationWithController<'a, P0>(
        &self,
        propertyname: &::windows::core::HSTRING,
        animation: P0,
        animationcontroller: &AnimationController,
    ) -> ::windows::core::Result<()>
    where
        P0: ::std::convert::Into<::windows::core::InParam<'a, CompositionAnimation>>,
    {
        let this = &::windows::core::Interface::cast::<ICompositionObject5>(self)?;
        unsafe {
            (::windows::core::Vtable::vtable(this).StartAnimationWithController)(
                ::windows::core::Vtable::as_raw(this),
                ::core::mem::transmute_copy(propertyname),
                animation.into().abi(),
                ::core::mem::transmute_copy(animationcontroller),
            )
            .ok()
        }
    }
    pub fn Count(&self) -> ::windows::core::Result<i32> {
        let this = self;
        unsafe {
            let mut result__ = ::core::mem::MaybeUninit::zeroed();
            (::windows::core::Vtable::vtable(this).Count)(
                ::windows::core::Vtable::as_raw(this),
                result__.as_mut_ptr(),
            )
            .from_abi::<i32>(result__)
        }
    }
    pub fn InsertAbove(
        &self,
        newcaster: &CompositionProjectedShadowCaster,
        reference: &CompositionProjectedShadowCaster,
    ) -> ::windows::core::Result<()> {
        let this = self;
        unsafe {
            (::windows::core::Vtable::vtable(this).InsertAbove)(
                ::windows::core::Vtable::as_raw(this),
                ::core::mem::transmute_copy(newcaster),
                ::core::mem::transmute_copy(reference),
            )
            .ok()
        }
    }
    pub fn InsertAtBottom(
        &self,
        newcaster: &CompositionProjectedShadowCaster,
    ) -> ::windows::core::Result<()> {
        let this = self;
        unsafe {
            (::windows::core::Vtable::vtable(this).InsertAtBottom)(
                ::windows::core::Vtable::as_raw(this),
                ::core::mem::transmute_copy(newcaster),
            )
            .ok()
        }
    }
    pub fn InsertAtTop(
        &self,
        newcaster: &CompositionProjectedShadowCaster,
    ) -> ::windows::core::Result<()> {
        let this = self;
        unsafe {
            (::windows::core::Vtable::vtable(this).InsertAtTop)(
                ::windows::core::Vtable::as_raw(this),
                ::core::mem::transmute_copy(newcaster),
            )
            .ok()
        }
    }
    pub fn InsertBelow(
        &self,
        newcaster: &CompositionProjectedShadowCaster,
        reference: &CompositionProjectedShadowCaster,
    ) -> ::windows::core::Result<()> {
        let this = self;
        unsafe {
            (::windows::core::Vtable::vtable(this).InsertBelow)(
                ::windows::core::Vtable::as_raw(this),
                ::core::mem::transmute_copy(newcaster),
                ::core::mem::transmute_copy(reference),
            )
            .ok()
        }
    }
    pub fn Remove(&self, caster: &CompositionProjectedShadowCaster) -> ::windows::core::Result<()> {
        let this = self;
        unsafe {
            (::windows::core::Vtable::vtable(this).Remove)(
                ::windows::core::Vtable::as_raw(this),
                ::core::mem::transmute_copy(caster),
            )
            .ok()
        }
    }
    pub fn RemoveAll(&self) -> ::windows::core::Result<()> {
        let this = self;
        unsafe {
            (::windows::core::Vtable::vtable(this).RemoveAll)(::windows::core::Vtable::as_raw(this))
                .ok()
        }
    }
    pub fn MaxRespectedCasters() -> ::windows::core::Result<i32> {
        Self::ICompositionProjectedShadowCasterCollectionStatics(|this| unsafe {
            let mut result__ = ::core::mem::MaybeUninit::zeroed();
            (::windows::core::Vtable::vtable(this).MaxRespectedCasters)(
                ::windows::core::Vtable::as_raw(this),
                result__.as_mut_ptr(),
            )
            .from_abi::<i32>(result__)
        })
    }
    pub fn First(
        &self,
    ) -> ::windows::core::Result<
        ::windows::Foundation::Collections::IIterator<CompositionProjectedShadowCaster>,
    > {
        let this = &::windows::core::Interface::cast::<
            ::windows::Foundation::Collections::IIterable<CompositionProjectedShadowCaster>,
        >(self)?;
        unsafe {
            let mut result__ = ::core::mem::MaybeUninit::zeroed();
            (::windows::core::Vtable::vtable(this).First)(
                ::windows::core::Vtable::as_raw(this),
                result__.as_mut_ptr(),
            )
            .from_abi::<::windows::Foundation::Collections::IIterator<
                CompositionProjectedShadowCaster,
            >>(result__)
        }
    }
    #[doc(hidden)]
    pub fn ICompositionProjectedShadowCasterCollectionStatics<
        R,
        F: FnOnce(&ICompositionProjectedShadowCasterCollectionStatics) -> ::windows::core::Result<R>,
    >(
        callback: F,
    ) -> ::windows::core::Result<R> {
        static SHARED: ::windows::core::FactoryCache<
            CompositionProjectedShadowCasterCollection,
            ICompositionProjectedShadowCasterCollectionStatics,
        > = ::windows::core::FactoryCache::new();
        SHARED.call(callback)
    }
}
impl ::core::clone::Clone for CompositionProjectedShadowCasterCollection {
    fn clone(&self) -> Self {
        Self(self.0.clone())
    }
}
impl ::core::cmp::PartialEq for CompositionProjectedShadowCasterCollection {
    fn eq(&self, other: &Self) -> bool {
        self.0 == other.0
    }
}
impl ::core::cmp::Eq for CompositionProjectedShadowCasterCollection {}
impl ::core::fmt::Debug for CompositionProjectedShadowCasterCollection {
    fn fmt(&self, f: &mut ::core::fmt::Formatter<'_>) -> ::core::fmt::Result {
        f.debug_tuple("CompositionProjectedShadowCasterCollection")
            .field(&self.0)
            .finish()
    }
}
unsafe impl ::windows::core::RuntimeType for CompositionProjectedShadowCasterCollection {
    const SIGNATURE : ::windows::core::ConstBuffer = ::windows::core::ConstBuffer::from_slice ( b"rc(Microsoft.UI.Composition.CompositionProjectedShadowCasterCollection;{b120bfdc-533c-57a9-ae16-d43ba52472c4})" ) ;
    type DefaultType = ::core::option::Option<Self>;
    fn from_default(from: &Self::DefaultType) -> ::windows::core::Result<Self> {
        from.as_ref().cloned().ok_or(::windows::core::Error::OK)
    }
}
unsafe impl ::windows::core::Vtable for CompositionProjectedShadowCasterCollection {
    type Vtable = ICompositionProjectedShadowCasterCollection_Vtbl;
}
unsafe impl ::windows::core::Interface for CompositionProjectedShadowCasterCollection {
    const IID: ::windows::core::GUID =
        <ICompositionProjectedShadowCasterCollection as ::windows::core::Interface>::IID;
}
impl ::windows::core::RuntimeName for CompositionProjectedShadowCasterCollection {
    const NAME: &'static str =
        "Microsoft.UI.Composition.CompositionProjectedShadowCasterCollection";
}
impl ::core::iter::IntoIterator for CompositionProjectedShadowCasterCollection {
    type Item = CompositionProjectedShadowCaster;
    type IntoIter = ::windows::Foundation::Collections::IIterator<Self::Item>;
    fn into_iter(self) -> Self::IntoIter {
        ::core::iter::IntoIterator::into_iter(&self)
    }
}
impl ::core::iter::IntoIterator for &CompositionProjectedShadowCasterCollection {
    type Item = CompositionProjectedShadowCaster;
    type IntoIter = ::windows::Foundation::Collections::IIterator<Self::Item>;
    fn into_iter(self) -> Self::IntoIter {
        self.First().unwrap()
    }
}
::windows::core::interface_hierarchy!(
    CompositionProjectedShadowCasterCollection,
    ::windows::core::IUnknown,
    ::windows::core::IInspectable
);
impl ::core::convert::TryFrom<CompositionProjectedShadowCasterCollection> for IAnimationObject {
    type Error = ::windows::core::Error;
    fn try_from(
        value: CompositionProjectedShadowCasterCollection,
    ) -> ::windows::core::Result<Self> {
        ::core::convert::TryFrom::try_from(&value)
    }
}
impl ::core::convert::TryFrom<&CompositionProjectedShadowCasterCollection> for IAnimationObject {
    type Error = ::windows::core::Error;
    fn try_from(
        value: &CompositionProjectedShadowCasterCollection,
    ) -> ::windows::core::Result<Self> {
        ::windows::core::Interface::cast(value)
    }
}
impl<'a> ::core::convert::TryFrom<&CompositionProjectedShadowCasterCollection>
    for ::windows::core::InParam<'a, IAnimationObject>
{
    type Error = ::windows::core::Error;
    fn try_from(
        value: &CompositionProjectedShadowCasterCollection,
    ) -> ::windows::core::Result<Self> {
        let item = ::std::convert::TryInto::try_into(value)?;
        Ok(::windows::core::InParam::owned(item))
    }
}
impl ::core::convert::TryFrom<CompositionProjectedShadowCasterCollection>
    for ::windows::Foundation::IClosable
{
    type Error = ::windows::core::Error;
    fn try_from(
        value: CompositionProjectedShadowCasterCollection,
    ) -> ::windows::core::Result<Self> {
        ::core::convert::TryFrom::try_from(&value)
    }
}
impl ::core::convert::TryFrom<&CompositionProjectedShadowCasterCollection>
    for ::windows::Foundation::IClosable
{
    type Error = ::windows::core::Error;
    fn try_from(
        value: &CompositionProjectedShadowCasterCollection,
    ) -> ::windows::core::Result<Self> {
        ::windows::core::Interface::cast(value)
    }
}
impl<'a> ::core::convert::TryFrom<&CompositionProjectedShadowCasterCollection>
    for ::windows::core::InParam<'a, ::windows::Foundation::IClosable>
{
    type Error = ::windows::core::Error;
    fn try_from(
        value: &CompositionProjectedShadowCasterCollection,
    ) -> ::windows::core::Result<Self> {
        let item = ::std::convert::TryInto::try_into(value)?;
        Ok(::windows::core::InParam::owned(item))
    }
}
impl ::core::convert::TryFrom<CompositionProjectedShadowCasterCollection>
    for ::windows::Foundation::Collections::IIterable<CompositionProjectedShadowCaster>
{
    type Error = ::windows::core::Error;
    fn try_from(
        value: CompositionProjectedShadowCasterCollection,
    ) -> ::windows::core::Result<Self> {
        ::core::convert::TryFrom::try_from(&value)
    }
}
impl ::core::convert::TryFrom<&CompositionProjectedShadowCasterCollection>
    for ::windows::Foundation::Collections::IIterable<CompositionProjectedShadowCaster>
{
    type Error = ::windows::core::Error;
    fn try_from(
        value: &CompositionProjectedShadowCasterCollection,
    ) -> ::windows::core::Result<Self> {
        ::windows::core::Interface::cast(value)
    }
}
impl<'a> ::core::convert::TryFrom<&CompositionProjectedShadowCasterCollection>
    for ::windows::core::InParam<
        'a,
        ::windows::Foundation::Collections::IIterable<CompositionProjectedShadowCaster>,
    >
{
    type Error = ::windows::core::Error;
    fn try_from(
        value: &CompositionProjectedShadowCasterCollection,
    ) -> ::windows::core::Result<Self> {
        let item = ::std::convert::TryInto::try_into(value)?;
        Ok(::windows::core::InParam::owned(item))
    }
}
impl ::core::convert::From<CompositionProjectedShadowCasterCollection> for CompositionObject {
    fn from(value: CompositionProjectedShadowCasterCollection) -> Self {
        ::core::convert::From::from(&value)
    }
}
impl ::core::convert::From<&CompositionProjectedShadowCasterCollection> for CompositionObject {
    fn from(value: &CompositionProjectedShadowCasterCollection) -> Self {
        ::windows::core::Interface::cast(value).unwrap()
    }
}
impl<'a> ::core::convert::From<&CompositionProjectedShadowCasterCollection>
    for ::windows::core::InParam<'a, CompositionObject>
{
    fn from(value: &CompositionProjectedShadowCasterCollection) -> Self {
        ::windows::core::InParam::owned(value.into())
    }
}
unsafe impl ::core::marker::Send for CompositionProjectedShadowCasterCollection {}
unsafe impl ::core::marker::Sync for CompositionProjectedShadowCasterCollection {}
#[doc = "*Required features: `\"UI_Composition\"`*"]
#[repr(transparent)]
pub struct CompositionProjectedShadowReceiver(::windows::core::IUnknown);
impl CompositionProjectedShadowReceiver {
    pub fn PopulatePropertyInfo(
        &self,
        propertyname: &::windows::core::HSTRING,
        propertyinfo: &AnimationPropertyInfo,
    ) -> ::windows::core::Result<()> {
        let this = &::windows::core::Interface::cast::<IAnimationObject>(self)?;
        unsafe {
            (::windows::core::Vtable::vtable(this).PopulatePropertyInfo)(
                ::windows::core::Vtable::as_raw(this),
                ::core::mem::transmute_copy(propertyname),
                ::core::mem::transmute_copy(propertyinfo),
            )
            .ok()
        }
    }
    pub fn Close(&self) -> ::windows::core::Result<()> {
        let this = &::windows::core::Interface::cast::<::windows::Foundation::IClosable>(self)?;
        unsafe {
            (::windows::core::Vtable::vtable(this).Close)(::windows::core::Vtable::as_raw(this))
                .ok()
        }
    }
    pub fn Compositor(&self) -> ::windows::core::Result<Compositor> {
        let this = &::windows::core::Interface::cast::<ICompositionObject>(self)?;
        unsafe {
            let mut result__ = ::core::mem::MaybeUninit::zeroed();
            (::windows::core::Vtable::vtable(this).Compositor)(
                ::windows::core::Vtable::as_raw(this),
                result__.as_mut_ptr(),
            )
            .from_abi::<Compositor>(result__)
        }
    }
    pub fn Properties(&self) -> ::windows::core::Result<CompositionPropertySet> {
        let this = &::windows::core::Interface::cast::<ICompositionObject>(self)?;
        unsafe {
            let mut result__ = ::core::mem::MaybeUninit::zeroed();
            (::windows::core::Vtable::vtable(this).Properties)(
                ::windows::core::Vtable::as_raw(this),
                result__.as_mut_ptr(),
            )
            .from_abi::<CompositionPropertySet>(result__)
        }
    }
    pub fn StartAnimation<'a, P0>(
        &self,
        propertyname: &::windows::core::HSTRING,
        animation: P0,
    ) -> ::windows::core::Result<()>
    where
        P0: ::std::convert::Into<::windows::core::InParam<'a, CompositionAnimation>>,
    {
        let this = &::windows::core::Interface::cast::<ICompositionObject>(self)?;
        unsafe {
            (::windows::core::Vtable::vtable(this).StartAnimation)(
                ::windows::core::Vtable::as_raw(this),
                ::core::mem::transmute_copy(propertyname),
                animation.into().abi(),
            )
            .ok()
        }
    }
    pub fn StopAnimation(
        &self,
        propertyname: &::windows::core::HSTRING,
    ) -> ::windows::core::Result<()> {
        let this = &::windows::core::Interface::cast::<ICompositionObject>(self)?;
        unsafe {
            (::windows::core::Vtable::vtable(this).StopAnimation)(
                ::windows::core::Vtable::as_raw(this),
                ::core::mem::transmute_copy(propertyname),
            )
            .ok()
        }
    }
    pub fn Comment(&self) -> ::windows::core::Result<::windows::core::HSTRING> {
        let this = &::windows::core::Interface::cast::<ICompositionObject2>(self)?;
        unsafe {
            let mut result__ = ::core::mem::MaybeUninit::zeroed();
            (::windows::core::Vtable::vtable(this).Comment)(
                ::windows::core::Vtable::as_raw(this),
                result__.as_mut_ptr(),
            )
            .from_abi::<::windows::core::HSTRING>(result__)
        }
    }
    pub fn SetComment(&self, value: &::windows::core::HSTRING) -> ::windows::core::Result<()> {
        let this = &::windows::core::Interface::cast::<ICompositionObject2>(self)?;
        unsafe {
            (::windows::core::Vtable::vtable(this).SetComment)(
                ::windows::core::Vtable::as_raw(this),
                ::core::mem::transmute_copy(value),
            )
            .ok()
        }
    }
    pub fn ImplicitAnimations(&self) -> ::windows::core::Result<ImplicitAnimationCollection> {
        let this = &::windows::core::Interface::cast::<ICompositionObject2>(self)?;
        unsafe {
            let mut result__ = ::core::mem::MaybeUninit::zeroed();
            (::windows::core::Vtable::vtable(this).ImplicitAnimations)(
                ::windows::core::Vtable::as_raw(this),
                result__.as_mut_ptr(),
            )
            .from_abi::<ImplicitAnimationCollection>(result__)
        }
    }
    pub fn SetImplicitAnimations(
        &self,
        value: &ImplicitAnimationCollection,
    ) -> ::windows::core::Result<()> {
        let this = &::windows::core::Interface::cast::<ICompositionObject2>(self)?;
        unsafe {
            (::windows::core::Vtable::vtable(this).SetImplicitAnimations)(
                ::windows::core::Vtable::as_raw(this),
                ::core::mem::transmute_copy(value),
            )
            .ok()
        }
    }
    pub fn StartAnimationGroup<'a, P0, E0>(&self, value: P0) -> ::windows::core::Result<()>
    where
        P0: ::std::convert::TryInto<
            ::windows::core::InParam<'a, ICompositionAnimationBase>,
            Error = E0,
        >,
        E0: ::std::convert::Into<::windows::core::Error>,
    {
        let this = &::windows::core::Interface::cast::<ICompositionObject2>(self)?;
        unsafe {
            (::windows::core::Vtable::vtable(this).StartAnimationGroup)(
                ::windows::core::Vtable::as_raw(this),
                value.try_into().map_err(|e| e.into())?.abi(),
            )
            .ok()
        }
    }
    pub fn StopAnimationGroup<'a, P0, E0>(&self, value: P0) -> ::windows::core::Result<()>
    where
        P0: ::std::convert::TryInto<
            ::windows::core::InParam<'a, ICompositionAnimationBase>,
            Error = E0,
        >,
        E0: ::std::convert::Into<::windows::core::Error>,
    {
        let this = &::windows::core::Interface::cast::<ICompositionObject2>(self)?;
        unsafe {
            (::windows::core::Vtable::vtable(this).StopAnimationGroup)(
                ::windows::core::Vtable::as_raw(this),
                value.try_into().map_err(|e| e.into())?.abi(),
            )
            .ok()
        }
    }
    #[doc = "*Required features: `\"UI_Dispatching\"`*"]
    #[cfg(feature = "UI_Dispatching")]
    pub fn DispatcherQueue(&self) -> ::windows::core::Result<super::Dispatching::DispatcherQueue> {
        let this = &::windows::core::Interface::cast::<ICompositionObject3>(self)?;
        unsafe {
            let mut result__ = ::core::mem::MaybeUninit::zeroed();
            (::windows::core::Vtable::vtable(this).DispatcherQueue)(
                ::windows::core::Vtable::as_raw(this),
                result__.as_mut_ptr(),
            )
            .from_abi::<super::Dispatching::DispatcherQueue>(result__)
        }
    }
    pub fn TryGetAnimationController(
        &self,
        propertyname: &::windows::core::HSTRING,
    ) -> ::windows::core::Result<AnimationController> {
        let this = &::windows::core::Interface::cast::<ICompositionObject4>(self)?;
        unsafe {
            let mut result__ = ::core::mem::MaybeUninit::zeroed();
            (::windows::core::Vtable::vtable(this).TryGetAnimationController)(
                ::windows::core::Vtable::as_raw(this),
                ::core::mem::transmute_copy(propertyname),
                result__.as_mut_ptr(),
            )
            .from_abi::<AnimationController>(result__)
        }
    }
    pub fn StartAnimationWithController<'a, P0>(
        &self,
        propertyname: &::windows::core::HSTRING,
        animation: P0,
        animationcontroller: &AnimationController,
    ) -> ::windows::core::Result<()>
    where
        P0: ::std::convert::Into<::windows::core::InParam<'a, CompositionAnimation>>,
    {
        let this = &::windows::core::Interface::cast::<ICompositionObject5>(self)?;
        unsafe {
            (::windows::core::Vtable::vtable(this).StartAnimationWithController)(
                ::windows::core::Vtable::as_raw(this),
                ::core::mem::transmute_copy(propertyname),
                animation.into().abi(),
                ::core::mem::transmute_copy(animationcontroller),
            )
            .ok()
        }
    }
    pub fn ReceivingVisual(&self) -> ::windows::core::Result<Visual> {
        let this = self;
        unsafe {
            let mut result__ = ::core::mem::MaybeUninit::zeroed();
            (::windows::core::Vtable::vtable(this).ReceivingVisual)(
                ::windows::core::Vtable::as_raw(this),
                result__.as_mut_ptr(),
            )
            .from_abi::<Visual>(result__)
        }
    }
    pub fn SetReceivingVisual<'a, P0>(&self, value: P0) -> ::windows::core::Result<()>
    where
        P0: ::std::convert::Into<::windows::core::InParam<'a, Visual>>,
    {
        let this = self;
        unsafe {
            (::windows::core::Vtable::vtable(this).SetReceivingVisual)(
                ::windows::core::Vtable::as_raw(this),
                value.into().abi(),
            )
            .ok()
        }
    }
}
impl ::core::clone::Clone for CompositionProjectedShadowReceiver {
    fn clone(&self) -> Self {
        Self(self.0.clone())
    }
}
impl ::core::cmp::PartialEq for CompositionProjectedShadowReceiver {
    fn eq(&self, other: &Self) -> bool {
        self.0 == other.0
    }
}
impl ::core::cmp::Eq for CompositionProjectedShadowReceiver {}
impl ::core::fmt::Debug for CompositionProjectedShadowReceiver {
    fn fmt(&self, f: &mut ::core::fmt::Formatter<'_>) -> ::core::fmt::Result {
        f.debug_tuple("CompositionProjectedShadowReceiver").field(&self.0).finish()
    }
}
unsafe impl ::windows::core::RuntimeType for CompositionProjectedShadowReceiver {
    const SIGNATURE : ::windows::core::ConstBuffer = ::windows::core::ConstBuffer::from_slice ( b"rc(Microsoft.UI.Composition.CompositionProjectedShadowReceiver;{29fe12b0-f1a0-50e1-af28-2e943bc819d6})" ) ;
    type DefaultType = ::core::option::Option<Self>;
    fn from_default(from: &Self::DefaultType) -> ::windows::core::Result<Self> {
        from.as_ref().cloned().ok_or(::windows::core::Error::OK)
    }
}
unsafe impl ::windows::core::Vtable for CompositionProjectedShadowReceiver {
    type Vtable = ICompositionProjectedShadowReceiver_Vtbl;
}
unsafe impl ::windows::core::Interface for CompositionProjectedShadowReceiver {
    const IID: ::windows::core::GUID =
        <ICompositionProjectedShadowReceiver as ::windows::core::Interface>::IID;
}
impl ::windows::core::RuntimeName for CompositionProjectedShadowReceiver {
    const NAME: &'static str = "Microsoft.UI.Composition.CompositionProjectedShadowReceiver";
}
::windows::core::interface_hierarchy!(
    CompositionProjectedShadowReceiver,
    ::windows::core::IUnknown,
    ::windows::core::IInspectable
);
impl ::core::convert::TryFrom<CompositionProjectedShadowReceiver> for IAnimationObject {
    type Error = ::windows::core::Error;
    fn try_from(value: CompositionProjectedShadowReceiver) -> ::windows::core::Result<Self> {
        ::core::convert::TryFrom::try_from(&value)
    }
}
impl ::core::convert::TryFrom<&CompositionProjectedShadowReceiver> for IAnimationObject {
    type Error = ::windows::core::Error;
    fn try_from(value: &CompositionProjectedShadowReceiver) -> ::windows::core::Result<Self> {
        ::windows::core::Interface::cast(value)
    }
}
impl<'a> ::core::convert::TryFrom<&CompositionProjectedShadowReceiver>
    for ::windows::core::InParam<'a, IAnimationObject>
{
    type Error = ::windows::core::Error;
    fn try_from(value: &CompositionProjectedShadowReceiver) -> ::windows::core::Result<Self> {
        let item = ::std::convert::TryInto::try_into(value)?;
        Ok(::windows::core::InParam::owned(item))
    }
}
impl ::core::convert::TryFrom<CompositionProjectedShadowReceiver>
    for ::windows::Foundation::IClosable
{
    type Error = ::windows::core::Error;
    fn try_from(value: CompositionProjectedShadowReceiver) -> ::windows::core::Result<Self> {
        ::core::convert::TryFrom::try_from(&value)
    }
}
impl ::core::convert::TryFrom<&CompositionProjectedShadowReceiver>
    for ::windows::Foundation::IClosable
{
    type Error = ::windows::core::Error;
    fn try_from(value: &CompositionProjectedShadowReceiver) -> ::windows::core::Result<Self> {
        ::windows::core::Interface::cast(value)
    }
}
impl<'a> ::core::convert::TryFrom<&CompositionProjectedShadowReceiver>
    for ::windows::core::InParam<'a, ::windows::Foundation::IClosable>
{
    type Error = ::windows::core::Error;
    fn try_from(value: &CompositionProjectedShadowReceiver) -> ::windows::core::Result<Self> {
        let item = ::std::convert::TryInto::try_into(value)?;
        Ok(::windows::core::InParam::owned(item))
    }
}
impl ::core::convert::From<CompositionProjectedShadowReceiver> for CompositionObject {
    fn from(value: CompositionProjectedShadowReceiver) -> Self {
        ::core::convert::From::from(&value)
    }
}
impl ::core::convert::From<&CompositionProjectedShadowReceiver> for CompositionObject {
    fn from(value: &CompositionProjectedShadowReceiver) -> Self {
        ::windows::core::Interface::cast(value).unwrap()
    }
}
impl<'a> ::core::convert::From<&CompositionProjectedShadowReceiver>
    for ::windows::core::InParam<'a, CompositionObject>
{
    fn from(value: &CompositionProjectedShadowReceiver) -> Self {
        ::windows::core::InParam::owned(value.into())
    }
}
unsafe impl ::core::marker::Send for CompositionProjectedShadowReceiver {}
unsafe impl ::core::marker::Sync for CompositionProjectedShadowReceiver {}
#[doc = "*Required features: `\"UI_Composition\"`*"]
#[repr(transparent)]
pub struct CompositionProjectedShadowReceiverUnorderedCollection(::windows::core::IUnknown);
impl CompositionProjectedShadowReceiverUnorderedCollection {
    pub fn PopulatePropertyInfo(
        &self,
        propertyname: &::windows::core::HSTRING,
        propertyinfo: &AnimationPropertyInfo,
    ) -> ::windows::core::Result<()> {
        let this = &::windows::core::Interface::cast::<IAnimationObject>(self)?;
        unsafe {
            (::windows::core::Vtable::vtable(this).PopulatePropertyInfo)(
                ::windows::core::Vtable::as_raw(this),
                ::core::mem::transmute_copy(propertyname),
                ::core::mem::transmute_copy(propertyinfo),
            )
            .ok()
        }
    }
    pub fn Close(&self) -> ::windows::core::Result<()> {
        let this = &::windows::core::Interface::cast::<::windows::Foundation::IClosable>(self)?;
        unsafe {
            (::windows::core::Vtable::vtable(this).Close)(::windows::core::Vtable::as_raw(this))
                .ok()
        }
    }
    pub fn Compositor(&self) -> ::windows::core::Result<Compositor> {
        let this = &::windows::core::Interface::cast::<ICompositionObject>(self)?;
        unsafe {
            let mut result__ = ::core::mem::MaybeUninit::zeroed();
            (::windows::core::Vtable::vtable(this).Compositor)(
                ::windows::core::Vtable::as_raw(this),
                result__.as_mut_ptr(),
            )
            .from_abi::<Compositor>(result__)
        }
    }
    pub fn Properties(&self) -> ::windows::core::Result<CompositionPropertySet> {
        let this = &::windows::core::Interface::cast::<ICompositionObject>(self)?;
        unsafe {
            let mut result__ = ::core::mem::MaybeUninit::zeroed();
            (::windows::core::Vtable::vtable(this).Properties)(
                ::windows::core::Vtable::as_raw(this),
                result__.as_mut_ptr(),
            )
            .from_abi::<CompositionPropertySet>(result__)
        }
    }
    pub fn StartAnimation<'a, P0>(
        &self,
        propertyname: &::windows::core::HSTRING,
        animation: P0,
    ) -> ::windows::core::Result<()>
    where
        P0: ::std::convert::Into<::windows::core::InParam<'a, CompositionAnimation>>,
    {
        let this = &::windows::core::Interface::cast::<ICompositionObject>(self)?;
        unsafe {
            (::windows::core::Vtable::vtable(this).StartAnimation)(
                ::windows::core::Vtable::as_raw(this),
                ::core::mem::transmute_copy(propertyname),
                animation.into().abi(),
            )
            .ok()
        }
    }
    pub fn StopAnimation(
        &self,
        propertyname: &::windows::core::HSTRING,
    ) -> ::windows::core::Result<()> {
        let this = &::windows::core::Interface::cast::<ICompositionObject>(self)?;
        unsafe {
            (::windows::core::Vtable::vtable(this).StopAnimation)(
                ::windows::core::Vtable::as_raw(this),
                ::core::mem::transmute_copy(propertyname),
            )
            .ok()
        }
    }
    pub fn Comment(&self) -> ::windows::core::Result<::windows::core::HSTRING> {
        let this = &::windows::core::Interface::cast::<ICompositionObject2>(self)?;
        unsafe {
            let mut result__ = ::core::mem::MaybeUninit::zeroed();
            (::windows::core::Vtable::vtable(this).Comment)(
                ::windows::core::Vtable::as_raw(this),
                result__.as_mut_ptr(),
            )
            .from_abi::<::windows::core::HSTRING>(result__)
        }
    }
    pub fn SetComment(&self, value: &::windows::core::HSTRING) -> ::windows::core::Result<()> {
        let this = &::windows::core::Interface::cast::<ICompositionObject2>(self)?;
        unsafe {
            (::windows::core::Vtable::vtable(this).SetComment)(
                ::windows::core::Vtable::as_raw(this),
                ::core::mem::transmute_copy(value),
            )
            .ok()
        }
    }
    pub fn ImplicitAnimations(&self) -> ::windows::core::Result<ImplicitAnimationCollection> {
        let this = &::windows::core::Interface::cast::<ICompositionObject2>(self)?;
        unsafe {
            let mut result__ = ::core::mem::MaybeUninit::zeroed();
            (::windows::core::Vtable::vtable(this).ImplicitAnimations)(
                ::windows::core::Vtable::as_raw(this),
                result__.as_mut_ptr(),
            )
            .from_abi::<ImplicitAnimationCollection>(result__)
        }
    }
    pub fn SetImplicitAnimations(
        &self,
        value: &ImplicitAnimationCollection,
    ) -> ::windows::core::Result<()> {
        let this = &::windows::core::Interface::cast::<ICompositionObject2>(self)?;
        unsafe {
            (::windows::core::Vtable::vtable(this).SetImplicitAnimations)(
                ::windows::core::Vtable::as_raw(this),
                ::core::mem::transmute_copy(value),
            )
            .ok()
        }
    }
    pub fn StartAnimationGroup<'a, P0, E0>(&self, value: P0) -> ::windows::core::Result<()>
    where
        P0: ::std::convert::TryInto<
            ::windows::core::InParam<'a, ICompositionAnimationBase>,
            Error = E0,
        >,
        E0: ::std::convert::Into<::windows::core::Error>,
    {
        let this = &::windows::core::Interface::cast::<ICompositionObject2>(self)?;
        unsafe {
            (::windows::core::Vtable::vtable(this).StartAnimationGroup)(
                ::windows::core::Vtable::as_raw(this),
                value.try_into().map_err(|e| e.into())?.abi(),
            )
            .ok()
        }
    }
    pub fn StopAnimationGroup<'a, P0, E0>(&self, value: P0) -> ::windows::core::Result<()>
    where
        P0: ::std::convert::TryInto<
            ::windows::core::InParam<'a, ICompositionAnimationBase>,
            Error = E0,
        >,
        E0: ::std::convert::Into<::windows::core::Error>,
    {
        let this = &::windows::core::Interface::cast::<ICompositionObject2>(self)?;
        unsafe {
            (::windows::core::Vtable::vtable(this).StopAnimationGroup)(
                ::windows::core::Vtable::as_raw(this),
                value.try_into().map_err(|e| e.into())?.abi(),
            )
            .ok()
        }
    }
    #[doc = "*Required features: `\"UI_Dispatching\"`*"]
    #[cfg(feature = "UI_Dispatching")]
    pub fn DispatcherQueue(&self) -> ::windows::core::Result<super::Dispatching::DispatcherQueue> {
        let this = &::windows::core::Interface::cast::<ICompositionObject3>(self)?;
        unsafe {
            let mut result__ = ::core::mem::MaybeUninit::zeroed();
            (::windows::core::Vtable::vtable(this).DispatcherQueue)(
                ::windows::core::Vtable::as_raw(this),
                result__.as_mut_ptr(),
            )
            .from_abi::<super::Dispatching::DispatcherQueue>(result__)
        }
    }
    pub fn TryGetAnimationController(
        &self,
        propertyname: &::windows::core::HSTRING,
    ) -> ::windows::core::Result<AnimationController> {
        let this = &::windows::core::Interface::cast::<ICompositionObject4>(self)?;
        unsafe {
            let mut result__ = ::core::mem::MaybeUninit::zeroed();
            (::windows::core::Vtable::vtable(this).TryGetAnimationController)(
                ::windows::core::Vtable::as_raw(this),
                ::core::mem::transmute_copy(propertyname),
                result__.as_mut_ptr(),
            )
            .from_abi::<AnimationController>(result__)
        }
    }
    pub fn StartAnimationWithController<'a, P0>(
        &self,
        propertyname: &::windows::core::HSTRING,
        animation: P0,
        animationcontroller: &AnimationController,
    ) -> ::windows::core::Result<()>
    where
        P0: ::std::convert::Into<::windows::core::InParam<'a, CompositionAnimation>>,
    {
        let this = &::windows::core::Interface::cast::<ICompositionObject5>(self)?;
        unsafe {
            (::windows::core::Vtable::vtable(this).StartAnimationWithController)(
                ::windows::core::Vtable::as_raw(this),
                ::core::mem::transmute_copy(propertyname),
                animation.into().abi(),
                ::core::mem::transmute_copy(animationcontroller),
            )
            .ok()
        }
    }
    pub fn Add(&self, value: &CompositionProjectedShadowReceiver) -> ::windows::core::Result<()> {
        let this = self;
        unsafe {
            (::windows::core::Vtable::vtable(this).Add)(
                ::windows::core::Vtable::as_raw(this),
                ::core::mem::transmute_copy(value),
            )
            .ok()
        }
    }
    pub fn Count(&self) -> ::windows::core::Result<i32> {
        let this = self;
        unsafe {
            let mut result__ = ::core::mem::MaybeUninit::zeroed();
            (::windows::core::Vtable::vtable(this).Count)(
                ::windows::core::Vtable::as_raw(this),
                result__.as_mut_ptr(),
            )
            .from_abi::<i32>(result__)
        }
    }
    pub fn Remove(
        &self,
        value: &CompositionProjectedShadowReceiver,
    ) -> ::windows::core::Result<()> {
        let this = self;
        unsafe {
            (::windows::core::Vtable::vtable(this).Remove)(
                ::windows::core::Vtable::as_raw(this),
                ::core::mem::transmute_copy(value),
            )
            .ok()
        }
    }
    pub fn RemoveAll(&self) -> ::windows::core::Result<()> {
        let this = self;
        unsafe {
            (::windows::core::Vtable::vtable(this).RemoveAll)(::windows::core::Vtable::as_raw(this))
                .ok()
        }
    }
    pub fn First(
        &self,
    ) -> ::windows::core::Result<
        ::windows::Foundation::Collections::IIterator<CompositionProjectedShadowReceiver>,
    > {
        let this = &::windows::core::Interface::cast::<
            ::windows::Foundation::Collections::IIterable<CompositionProjectedShadowReceiver>,
        >(self)?;
        unsafe {
            let mut result__ = ::core::mem::MaybeUninit::zeroed();
            (::windows::core::Vtable::vtable(this).First)(
                ::windows::core::Vtable::as_raw(this),
                result__.as_mut_ptr(),
            )
            .from_abi::<::windows::Foundation::Collections::IIterator<
                CompositionProjectedShadowReceiver,
            >>(result__)
        }
    }
}
impl ::core::clone::Clone for CompositionProjectedShadowReceiverUnorderedCollection {
    fn clone(&self) -> Self {
        Self(self.0.clone())
    }
}
impl ::core::cmp::PartialEq for CompositionProjectedShadowReceiverUnorderedCollection {
    fn eq(&self, other: &Self) -> bool {
        self.0 == other.0
    }
}
impl ::core::cmp::Eq for CompositionProjectedShadowReceiverUnorderedCollection {}
impl ::core::fmt::Debug for CompositionProjectedShadowReceiverUnorderedCollection {
    fn fmt(&self, f: &mut ::core::fmt::Formatter<'_>) -> ::core::fmt::Result {
        f.debug_tuple("CompositionProjectedShadowReceiverUnorderedCollection")
            .field(&self.0)
            .finish()
    }
}
unsafe impl ::windows::core::RuntimeType for CompositionProjectedShadowReceiverUnorderedCollection {
    const SIGNATURE : ::windows::core::ConstBuffer = ::windows::core::ConstBuffer::from_slice ( b"rc(Microsoft.UI.Composition.CompositionProjectedShadowReceiverUnorderedCollection;{2d35f751-a1fa-5fff-b156-6d8fcd8362ed})" ) ;
    type DefaultType = ::core::option::Option<Self>;
    fn from_default(from: &Self::DefaultType) -> ::windows::core::Result<Self> {
        from.as_ref().cloned().ok_or(::windows::core::Error::OK)
    }
}
unsafe impl ::windows::core::Vtable for CompositionProjectedShadowReceiverUnorderedCollection {
    type Vtable = ICompositionProjectedShadowReceiverUnorderedCollection_Vtbl;
}
unsafe impl ::windows::core::Interface for CompositionProjectedShadowReceiverUnorderedCollection {
    const IID: ::windows::core::GUID =
        <ICompositionProjectedShadowReceiverUnorderedCollection as ::windows::core::Interface>::IID;
}
impl ::windows::core::RuntimeName for CompositionProjectedShadowReceiverUnorderedCollection {
    const NAME: &'static str =
        "Microsoft.UI.Composition.CompositionProjectedShadowReceiverUnorderedCollection";
}
impl ::core::iter::IntoIterator for CompositionProjectedShadowReceiverUnorderedCollection {
    type Item = CompositionProjectedShadowReceiver;
    type IntoIter = ::windows::Foundation::Collections::IIterator<Self::Item>;
    fn into_iter(self) -> Self::IntoIter {
        ::core::iter::IntoIterator::into_iter(&self)
    }
}
impl ::core::iter::IntoIterator for &CompositionProjectedShadowReceiverUnorderedCollection {
    type Item = CompositionProjectedShadowReceiver;
    type IntoIter = ::windows::Foundation::Collections::IIterator<Self::Item>;
    fn into_iter(self) -> Self::IntoIter {
        self.First().unwrap()
    }
}
::windows::core::interface_hierarchy!(
    CompositionProjectedShadowReceiverUnorderedCollection,
    ::windows::core::IUnknown,
    ::windows::core::IInspectable
);
impl ::core::convert::TryFrom<CompositionProjectedShadowReceiverUnorderedCollection>
    for IAnimationObject
{
    type Error = ::windows::core::Error;
    fn try_from(
        value: CompositionProjectedShadowReceiverUnorderedCollection,
    ) -> ::windows::core::Result<Self> {
        ::core::convert::TryFrom::try_from(&value)
    }
}
impl ::core::convert::TryFrom<&CompositionProjectedShadowReceiverUnorderedCollection>
    for IAnimationObject
{
    type Error = ::windows::core::Error;
    fn try_from(
        value: &CompositionProjectedShadowReceiverUnorderedCollection,
    ) -> ::windows::core::Result<Self> {
        ::windows::core::Interface::cast(value)
    }
}
impl<'a> ::core::convert::TryFrom<&CompositionProjectedShadowReceiverUnorderedCollection>
    for ::windows::core::InParam<'a, IAnimationObject>
{
    type Error = ::windows::core::Error;
    fn try_from(
        value: &CompositionProjectedShadowReceiverUnorderedCollection,
    ) -> ::windows::core::Result<Self> {
        let item = ::std::convert::TryInto::try_into(value)?;
        Ok(::windows::core::InParam::owned(item))
    }
}
impl ::core::convert::TryFrom<CompositionProjectedShadowReceiverUnorderedCollection>
    for ::windows::Foundation::IClosable
{
    type Error = ::windows::core::Error;
    fn try_from(
        value: CompositionProjectedShadowReceiverUnorderedCollection,
    ) -> ::windows::core::Result<Self> {
        ::core::convert::TryFrom::try_from(&value)
    }
}
impl ::core::convert::TryFrom<&CompositionProjectedShadowReceiverUnorderedCollection>
    for ::windows::Foundation::IClosable
{
    type Error = ::windows::core::Error;
    fn try_from(
        value: &CompositionProjectedShadowReceiverUnorderedCollection,
    ) -> ::windows::core::Result<Self> {
        ::windows::core::Interface::cast(value)
    }
}
impl<'a> ::core::convert::TryFrom<&CompositionProjectedShadowReceiverUnorderedCollection>
    for ::windows::core::InParam<'a, ::windows::Foundation::IClosable>
{
    type Error = ::windows::core::Error;
    fn try_from(
        value: &CompositionProjectedShadowReceiverUnorderedCollection,
    ) -> ::windows::core::Result<Self> {
        let item = ::std::convert::TryInto::try_into(value)?;
        Ok(::windows::core::InParam::owned(item))
    }
}
impl ::core::convert::TryFrom<CompositionProjectedShadowReceiverUnorderedCollection>
    for ::windows::Foundation::Collections::IIterable<CompositionProjectedShadowReceiver>
{
    type Error = ::windows::core::Error;
    fn try_from(
        value: CompositionProjectedShadowReceiverUnorderedCollection,
    ) -> ::windows::core::Result<Self> {
        ::core::convert::TryFrom::try_from(&value)
    }
}
impl ::core::convert::TryFrom<&CompositionProjectedShadowReceiverUnorderedCollection>
    for ::windows::Foundation::Collections::IIterable<CompositionProjectedShadowReceiver>
{
    type Error = ::windows::core::Error;
    fn try_from(
        value: &CompositionProjectedShadowReceiverUnorderedCollection,
    ) -> ::windows::core::Result<Self> {
        ::windows::core::Interface::cast(value)
    }
}
impl<'a> ::core::convert::TryFrom<&CompositionProjectedShadowReceiverUnorderedCollection>
    for ::windows::core::InParam<
        'a,
        ::windows::Foundation::Collections::IIterable<CompositionProjectedShadowReceiver>,
    >
{
    type Error = ::windows::core::Error;
    fn try_from(
        value: &CompositionProjectedShadowReceiverUnorderedCollection,
    ) -> ::windows::core::Result<Self> {
        let item = ::std::convert::TryInto::try_into(value)?;
        Ok(::windows::core::InParam::owned(item))
    }
}
impl ::core::convert::From<CompositionProjectedShadowReceiverUnorderedCollection>
    for CompositionObject
{
    fn from(value: CompositionProjectedShadowReceiverUnorderedCollection) -> Self {
        ::core::convert::From::from(&value)
    }
}
impl ::core::convert::From<&CompositionProjectedShadowReceiverUnorderedCollection>
    for CompositionObject
{
    fn from(value: &CompositionProjectedShadowReceiverUnorderedCollection) -> Self {
        ::windows::core::Interface::cast(value).unwrap()
    }
}
impl<'a> ::core::convert::From<&CompositionProjectedShadowReceiverUnorderedCollection>
    for ::windows::core::InParam<'a, CompositionObject>
{
    fn from(value: &CompositionProjectedShadowReceiverUnorderedCollection) -> Self {
        ::windows::core::InParam::owned(value.into())
    }
}
unsafe impl ::core::marker::Send for CompositionProjectedShadowReceiverUnorderedCollection {}
unsafe impl ::core::marker::Sync for CompositionProjectedShadowReceiverUnorderedCollection {}
#[doc = "*Required features: `\"UI_Composition\"`*"]
#[repr(transparent)]
pub struct CompositionPropertySet(::windows::core::IUnknown);
impl CompositionPropertySet {
    pub fn PopulatePropertyInfo(
        &self,
        propertyname: &::windows::core::HSTRING,
        propertyinfo: &AnimationPropertyInfo,
    ) -> ::windows::core::Result<()> {
        let this = &::windows::core::Interface::cast::<IAnimationObject>(self)?;
        unsafe {
            (::windows::core::Vtable::vtable(this).PopulatePropertyInfo)(
                ::windows::core::Vtable::as_raw(this),
                ::core::mem::transmute_copy(propertyname),
                ::core::mem::transmute_copy(propertyinfo),
            )
            .ok()
        }
    }
    pub fn Close(&self) -> ::windows::core::Result<()> {
        let this = &::windows::core::Interface::cast::<::windows::Foundation::IClosable>(self)?;
        unsafe {
            (::windows::core::Vtable::vtable(this).Close)(::windows::core::Vtable::as_raw(this))
                .ok()
        }
    }
    pub fn Compositor(&self) -> ::windows::core::Result<Compositor> {
        let this = &::windows::core::Interface::cast::<ICompositionObject>(self)?;
        unsafe {
            let mut result__ = ::core::mem::MaybeUninit::zeroed();
            (::windows::core::Vtable::vtable(this).Compositor)(
                ::windows::core::Vtable::as_raw(this),
                result__.as_mut_ptr(),
            )
            .from_abi::<Compositor>(result__)
        }
    }
    pub fn Properties(&self) -> ::windows::core::Result<CompositionPropertySet> {
        let this = &::windows::core::Interface::cast::<ICompositionObject>(self)?;
        unsafe {
            let mut result__ = ::core::mem::MaybeUninit::zeroed();
            (::windows::core::Vtable::vtable(this).Properties)(
                ::windows::core::Vtable::as_raw(this),
                result__.as_mut_ptr(),
            )
            .from_abi::<CompositionPropertySet>(result__)
        }
    }
    pub fn StartAnimation<'a, P0>(
        &self,
        propertyname: &::windows::core::HSTRING,
        animation: P0,
    ) -> ::windows::core::Result<()>
    where
        P0: ::std::convert::Into<::windows::core::InParam<'a, CompositionAnimation>>,
    {
        let this = &::windows::core::Interface::cast::<ICompositionObject>(self)?;
        unsafe {
            (::windows::core::Vtable::vtable(this).StartAnimation)(
                ::windows::core::Vtable::as_raw(this),
                ::core::mem::transmute_copy(propertyname),
                animation.into().abi(),
            )
            .ok()
        }
    }
    pub fn StopAnimation(
        &self,
        propertyname: &::windows::core::HSTRING,
    ) -> ::windows::core::Result<()> {
        let this = &::windows::core::Interface::cast::<ICompositionObject>(self)?;
        unsafe {
            (::windows::core::Vtable::vtable(this).StopAnimation)(
                ::windows::core::Vtable::as_raw(this),
                ::core::mem::transmute_copy(propertyname),
            )
            .ok()
        }
    }
    pub fn Comment(&self) -> ::windows::core::Result<::windows::core::HSTRING> {
        let this = &::windows::core::Interface::cast::<ICompositionObject2>(self)?;
        unsafe {
            let mut result__ = ::core::mem::MaybeUninit::zeroed();
            (::windows::core::Vtable::vtable(this).Comment)(
                ::windows::core::Vtable::as_raw(this),
                result__.as_mut_ptr(),
            )
            .from_abi::<::windows::core::HSTRING>(result__)
        }
    }
    pub fn SetComment(&self, value: &::windows::core::HSTRING) -> ::windows::core::Result<()> {
        let this = &::windows::core::Interface::cast::<ICompositionObject2>(self)?;
        unsafe {
            (::windows::core::Vtable::vtable(this).SetComment)(
                ::windows::core::Vtable::as_raw(this),
                ::core::mem::transmute_copy(value),
            )
            .ok()
        }
    }
    pub fn ImplicitAnimations(&self) -> ::windows::core::Result<ImplicitAnimationCollection> {
        let this = &::windows::core::Interface::cast::<ICompositionObject2>(self)?;
        unsafe {
            let mut result__ = ::core::mem::MaybeUninit::zeroed();
            (::windows::core::Vtable::vtable(this).ImplicitAnimations)(
                ::windows::core::Vtable::as_raw(this),
                result__.as_mut_ptr(),
            )
            .from_abi::<ImplicitAnimationCollection>(result__)
        }
    }
    pub fn SetImplicitAnimations(
        &self,
        value: &ImplicitAnimationCollection,
    ) -> ::windows::core::Result<()> {
        let this = &::windows::core::Interface::cast::<ICompositionObject2>(self)?;
        unsafe {
            (::windows::core::Vtable::vtable(this).SetImplicitAnimations)(
                ::windows::core::Vtable::as_raw(this),
                ::core::mem::transmute_copy(value),
            )
            .ok()
        }
    }
    pub fn StartAnimationGroup<'a, P0, E0>(&self, value: P0) -> ::windows::core::Result<()>
    where
        P0: ::std::convert::TryInto<
            ::windows::core::InParam<'a, ICompositionAnimationBase>,
            Error = E0,
        >,
        E0: ::std::convert::Into<::windows::core::Error>,
    {
        let this = &::windows::core::Interface::cast::<ICompositionObject2>(self)?;
        unsafe {
            (::windows::core::Vtable::vtable(this).StartAnimationGroup)(
                ::windows::core::Vtable::as_raw(this),
                value.try_into().map_err(|e| e.into())?.abi(),
            )
            .ok()
        }
    }
    pub fn StopAnimationGroup<'a, P0, E0>(&self, value: P0) -> ::windows::core::Result<()>
    where
        P0: ::std::convert::TryInto<
            ::windows::core::InParam<'a, ICompositionAnimationBase>,
            Error = E0,
        >,
        E0: ::std::convert::Into<::windows::core::Error>,
    {
        let this = &::windows::core::Interface::cast::<ICompositionObject2>(self)?;
        unsafe {
            (::windows::core::Vtable::vtable(this).StopAnimationGroup)(
                ::windows::core::Vtable::as_raw(this),
                value.try_into().map_err(|e| e.into())?.abi(),
            )
            .ok()
        }
    }
    #[doc = "*Required features: `\"UI_Dispatching\"`*"]
    #[cfg(feature = "UI_Dispatching")]
    pub fn DispatcherQueue(&self) -> ::windows::core::Result<super::Dispatching::DispatcherQueue> {
        let this = &::windows::core::Interface::cast::<ICompositionObject3>(self)?;
        unsafe {
            let mut result__ = ::core::mem::MaybeUninit::zeroed();
            (::windows::core::Vtable::vtable(this).DispatcherQueue)(
                ::windows::core::Vtable::as_raw(this),
                result__.as_mut_ptr(),
            )
            .from_abi::<super::Dispatching::DispatcherQueue>(result__)
        }
    }
    pub fn TryGetAnimationController(
        &self,
        propertyname: &::windows::core::HSTRING,
    ) -> ::windows::core::Result<AnimationController> {
        let this = &::windows::core::Interface::cast::<ICompositionObject4>(self)?;
        unsafe {
            let mut result__ = ::core::mem::MaybeUninit::zeroed();
            (::windows::core::Vtable::vtable(this).TryGetAnimationController)(
                ::windows::core::Vtable::as_raw(this),
                ::core::mem::transmute_copy(propertyname),
                result__.as_mut_ptr(),
            )
            .from_abi::<AnimationController>(result__)
        }
    }
    pub fn StartAnimationWithController<'a, P0>(
        &self,
        propertyname: &::windows::core::HSTRING,
        animation: P0,
        animationcontroller: &AnimationController,
    ) -> ::windows::core::Result<()>
    where
        P0: ::std::convert::Into<::windows::core::InParam<'a, CompositionAnimation>>,
    {
        let this = &::windows::core::Interface::cast::<ICompositionObject5>(self)?;
        unsafe {
            (::windows::core::Vtable::vtable(this).StartAnimationWithController)(
                ::windows::core::Vtable::as_raw(this),
                ::core::mem::transmute_copy(propertyname),
                animation.into().abi(),
                ::core::mem::transmute_copy(animationcontroller),
            )
            .ok()
        }
    }
    pub fn InsertColor(
        &self,
        propertyname: &::windows::core::HSTRING,
        value: ::windows::UI::Color,
    ) -> ::windows::core::Result<()> {
        let this = self;
        unsafe {
            (::windows::core::Vtable::vtable(this).InsertColor)(
                ::windows::core::Vtable::as_raw(this),
                ::core::mem::transmute_copy(propertyname),
                value,
            )
            .ok()
        }
    }
    pub fn InsertMatrix3x2(
        &self,
        propertyname: &::windows::core::HSTRING,
        value: ::windows::Foundation::Numerics::Matrix3x2,
    ) -> ::windows::core::Result<()> {
        let this = self;
        unsafe {
            (::windows::core::Vtable::vtable(this).InsertMatrix3x2)(
                ::windows::core::Vtable::as_raw(this),
                ::core::mem::transmute_copy(propertyname),
                value,
            )
            .ok()
        }
    }
    pub fn InsertMatrix4x4(
        &self,
        propertyname: &::windows::core::HSTRING,
        value: ::windows::Foundation::Numerics::Matrix4x4,
    ) -> ::windows::core::Result<()> {
        let this = self;
        unsafe {
            (::windows::core::Vtable::vtable(this).InsertMatrix4x4)(
                ::windows::core::Vtable::as_raw(this),
                ::core::mem::transmute_copy(propertyname),
                value,
            )
            .ok()
        }
    }
    pub fn InsertQuaternion(
        &self,
        propertyname: &::windows::core::HSTRING,
        value: ::windows::Foundation::Numerics::Quaternion,
    ) -> ::windows::core::Result<()> {
        let this = self;
        unsafe {
            (::windows::core::Vtable::vtable(this).InsertQuaternion)(
                ::windows::core::Vtable::as_raw(this),
                ::core::mem::transmute_copy(propertyname),
                value,
            )
            .ok()
        }
    }
    pub fn InsertScalar(
        &self,
        propertyname: &::windows::core::HSTRING,
        value: f32,
    ) -> ::windows::core::Result<()> {
        let this = self;
        unsafe {
            (::windows::core::Vtable::vtable(this).InsertScalar)(
                ::windows::core::Vtable::as_raw(this),
                ::core::mem::transmute_copy(propertyname),
                value,
            )
            .ok()
        }
    }
    pub fn InsertVector2(
        &self,
        propertyname: &::windows::core::HSTRING,
        value: ::windows::Foundation::Numerics::Vector2,
    ) -> ::windows::core::Result<()> {
        let this = self;
        unsafe {
            (::windows::core::Vtable::vtable(this).InsertVector2)(
                ::windows::core::Vtable::as_raw(this),
                ::core::mem::transmute_copy(propertyname),
                value,
            )
            .ok()
        }
    }
    pub fn InsertVector3(
        &self,
        propertyname: &::windows::core::HSTRING,
        value: ::windows::Foundation::Numerics::Vector3,
    ) -> ::windows::core::Result<()> {
        let this = self;
        unsafe {
            (::windows::core::Vtable::vtable(this).InsertVector3)(
                ::windows::core::Vtable::as_raw(this),
                ::core::mem::transmute_copy(propertyname),
                value,
            )
            .ok()
        }
    }
    pub fn InsertVector4(
        &self,
        propertyname: &::windows::core::HSTRING,
        value: ::windows::Foundation::Numerics::Vector4,
    ) -> ::windows::core::Result<()> {
        let this = self;
        unsafe {
            (::windows::core::Vtable::vtable(this).InsertVector4)(
                ::windows::core::Vtable::as_raw(this),
                ::core::mem::transmute_copy(propertyname),
                value,
            )
            .ok()
        }
    }
    pub fn TryGetColor(
        &self,
        propertyname: &::windows::core::HSTRING,
        value: &mut ::windows::UI::Color,
    ) -> ::windows::core::Result<CompositionGetValueStatus> {
        let this = self;
        unsafe {
            let mut result__ = ::core::mem::MaybeUninit::zeroed();
            (::windows::core::Vtable::vtable(this).TryGetColor)(
                ::windows::core::Vtable::as_raw(this),
                ::core::mem::transmute_copy(propertyname),
                value,
                result__.as_mut_ptr(),
            )
            .from_abi::<CompositionGetValueStatus>(result__)
        }
    }
    pub fn TryGetMatrix3x2(
        &self,
        propertyname: &::windows::core::HSTRING,
        value: &mut ::windows::Foundation::Numerics::Matrix3x2,
    ) -> ::windows::core::Result<CompositionGetValueStatus> {
        let this = self;
        unsafe {
            let mut result__ = ::core::mem::MaybeUninit::zeroed();
            (::windows::core::Vtable::vtable(this).TryGetMatrix3x2)(
                ::windows::core::Vtable::as_raw(this),
                ::core::mem::transmute_copy(propertyname),
                value,
                result__.as_mut_ptr(),
            )
            .from_abi::<CompositionGetValueStatus>(result__)
        }
    }
    pub fn TryGetMatrix4x4(
        &self,
        propertyname: &::windows::core::HSTRING,
        value: &mut ::windows::Foundation::Numerics::Matrix4x4,
    ) -> ::windows::core::Result<CompositionGetValueStatus> {
        let this = self;
        unsafe {
            let mut result__ = ::core::mem::MaybeUninit::zeroed();
            (::windows::core::Vtable::vtable(this).TryGetMatrix4x4)(
                ::windows::core::Vtable::as_raw(this),
                ::core::mem::transmute_copy(propertyname),
                value,
                result__.as_mut_ptr(),
            )
            .from_abi::<CompositionGetValueStatus>(result__)
        }
    }
    pub fn TryGetQuaternion(
        &self,
        propertyname: &::windows::core::HSTRING,
        value: &mut ::windows::Foundation::Numerics::Quaternion,
    ) -> ::windows::core::Result<CompositionGetValueStatus> {
        let this = self;
        unsafe {
            let mut result__ = ::core::mem::MaybeUninit::zeroed();
            (::windows::core::Vtable::vtable(this).TryGetQuaternion)(
                ::windows::core::Vtable::as_raw(this),
                ::core::mem::transmute_copy(propertyname),
                value,
                result__.as_mut_ptr(),
            )
            .from_abi::<CompositionGetValueStatus>(result__)
        }
    }
    pub fn TryGetScalar(
        &self,
        propertyname: &::windows::core::HSTRING,
        value: &mut f32,
    ) -> ::windows::core::Result<CompositionGetValueStatus> {
        let this = self;
        unsafe {
            let mut result__ = ::core::mem::MaybeUninit::zeroed();
            (::windows::core::Vtable::vtable(this).TryGetScalar)(
                ::windows::core::Vtable::as_raw(this),
                ::core::mem::transmute_copy(propertyname),
                value,
                result__.as_mut_ptr(),
            )
            .from_abi::<CompositionGetValueStatus>(result__)
        }
    }
    pub fn TryGetVector2(
        &self,
        propertyname: &::windows::core::HSTRING,
        value: &mut ::windows::Foundation::Numerics::Vector2,
    ) -> ::windows::core::Result<CompositionGetValueStatus> {
        let this = self;
        unsafe {
            let mut result__ = ::core::mem::MaybeUninit::zeroed();
            (::windows::core::Vtable::vtable(this).TryGetVector2)(
                ::windows::core::Vtable::as_raw(this),
                ::core::mem::transmute_copy(propertyname),
                value,
                result__.as_mut_ptr(),
            )
            .from_abi::<CompositionGetValueStatus>(result__)
        }
    }
    pub fn TryGetVector3(
        &self,
        propertyname: &::windows::core::HSTRING,
        value: &mut ::windows::Foundation::Numerics::Vector3,
    ) -> ::windows::core::Result<CompositionGetValueStatus> {
        let this = self;
        unsafe {
            let mut result__ = ::core::mem::MaybeUninit::zeroed();
            (::windows::core::Vtable::vtable(this).TryGetVector3)(
                ::windows::core::Vtable::as_raw(this),
                ::core::mem::transmute_copy(propertyname),
                value,
                result__.as_mut_ptr(),
            )
            .from_abi::<CompositionGetValueStatus>(result__)
        }
    }
    pub fn TryGetVector4(
        &self,
        propertyname: &::windows::core::HSTRING,
        value: &mut ::windows::Foundation::Numerics::Vector4,
    ) -> ::windows::core::Result<CompositionGetValueStatus> {
        let this = self;
        unsafe {
            let mut result__ = ::core::mem::MaybeUninit::zeroed();
            (::windows::core::Vtable::vtable(this).TryGetVector4)(
                ::windows::core::Vtable::as_raw(this),
                ::core::mem::transmute_copy(propertyname),
                value,
                result__.as_mut_ptr(),
            )
            .from_abi::<CompositionGetValueStatus>(result__)
        }
    }
    pub fn InsertBoolean(
        &self,
        propertyname: &::windows::core::HSTRING,
        value: bool,
    ) -> ::windows::core::Result<()> {
        let this = &::windows::core::Interface::cast::<ICompositionPropertySet2>(self)?;
        unsafe {
            (::windows::core::Vtable::vtable(this).InsertBoolean)(
                ::windows::core::Vtable::as_raw(this),
                ::core::mem::transmute_copy(propertyname),
                value,
            )
            .ok()
        }
    }
    pub fn TryGetBoolean(
        &self,
        propertyname: &::windows::core::HSTRING,
        value: &mut bool,
    ) -> ::windows::core::Result<CompositionGetValueStatus> {
        let this = &::windows::core::Interface::cast::<ICompositionPropertySet2>(self)?;
        unsafe {
            let mut result__ = ::core::mem::MaybeUninit::zeroed();
            (::windows::core::Vtable::vtable(this).TryGetBoolean)(
                ::windows::core::Vtable::as_raw(this),
                ::core::mem::transmute_copy(propertyname),
                value,
                result__.as_mut_ptr(),
            )
            .from_abi::<CompositionGetValueStatus>(result__)
        }
    }
}
impl ::core::clone::Clone for CompositionPropertySet {
    fn clone(&self) -> Self {
        Self(self.0.clone())
    }
}
impl ::core::cmp::PartialEq for CompositionPropertySet {
    fn eq(&self, other: &Self) -> bool {
        self.0 == other.0
    }
}
impl ::core::cmp::Eq for CompositionPropertySet {}
impl ::core::fmt::Debug for CompositionPropertySet {
    fn fmt(&self, f: &mut ::core::fmt::Formatter<'_>) -> ::core::fmt::Result {
        f.debug_tuple("CompositionPropertySet").field(&self.0).finish()
    }
}
unsafe impl ::windows::core::RuntimeType for CompositionPropertySet {
    const SIGNATURE : ::windows::core::ConstBuffer = ::windows::core::ConstBuffer::from_slice ( b"rc(Microsoft.UI.Composition.CompositionPropertySet;{97f7a17b-97be-5545-9f1c-0b9d44577f57})" ) ;
    type DefaultType = ::core::option::Option<Self>;
    fn from_default(from: &Self::DefaultType) -> ::windows::core::Result<Self> {
        from.as_ref().cloned().ok_or(::windows::core::Error::OK)
    }
}
unsafe impl ::windows::core::Vtable for CompositionPropertySet {
    type Vtable = ICompositionPropertySet_Vtbl;
}
unsafe impl ::windows::core::Interface for CompositionPropertySet {
    const IID: ::windows::core::GUID = <ICompositionPropertySet as ::windows::core::Interface>::IID;
}
impl ::windows::core::RuntimeName for CompositionPropertySet {
    const NAME: &'static str = "Microsoft.UI.Composition.CompositionPropertySet";
}
::windows::core::interface_hierarchy!(
    CompositionPropertySet,
    ::windows::core::IUnknown,
    ::windows::core::IInspectable
);
impl ::core::convert::TryFrom<CompositionPropertySet> for IAnimationObject {
    type Error = ::windows::core::Error;
    fn try_from(value: CompositionPropertySet) -> ::windows::core::Result<Self> {
        ::core::convert::TryFrom::try_from(&value)
    }
}
impl ::core::convert::TryFrom<&CompositionPropertySet> for IAnimationObject {
    type Error = ::windows::core::Error;
    fn try_from(value: &CompositionPropertySet) -> ::windows::core::Result<Self> {
        ::windows::core::Interface::cast(value)
    }
}
impl<'a> ::core::convert::TryFrom<&CompositionPropertySet>
    for ::windows::core::InParam<'a, IAnimationObject>
{
    type Error = ::windows::core::Error;
    fn try_from(value: &CompositionPropertySet) -> ::windows::core::Result<Self> {
        let item = ::std::convert::TryInto::try_into(value)?;
        Ok(::windows::core::InParam::owned(item))
    }
}
impl ::core::convert::TryFrom<CompositionPropertySet> for ::windows::Foundation::IClosable {
    type Error = ::windows::core::Error;
    fn try_from(value: CompositionPropertySet) -> ::windows::core::Result<Self> {
        ::core::convert::TryFrom::try_from(&value)
    }
}
impl ::core::convert::TryFrom<&CompositionPropertySet> for ::windows::Foundation::IClosable {
    type Error = ::windows::core::Error;
    fn try_from(value: &CompositionPropertySet) -> ::windows::core::Result<Self> {
        ::windows::core::Interface::cast(value)
    }
}
impl<'a> ::core::convert::TryFrom<&CompositionPropertySet>
    for ::windows::core::InParam<'a, ::windows::Foundation::IClosable>
{
    type Error = ::windows::core::Error;
    fn try_from(value: &CompositionPropertySet) -> ::windows::core::Result<Self> {
        let item = ::std::convert::TryInto::try_into(value)?;
        Ok(::windows::core::InParam::owned(item))
    }
}
impl ::core::convert::From<CompositionPropertySet> for CompositionObject {
    fn from(value: CompositionPropertySet) -> Self {
        ::core::convert::From::from(&value)
    }
}
impl ::core::convert::From<&CompositionPropertySet> for CompositionObject {
    fn from(value: &CompositionPropertySet) -> Self {
        ::windows::core::Interface::cast(value).unwrap()
    }
}
impl<'a> ::core::convert::From<&CompositionPropertySet>
    for ::windows::core::InParam<'a, CompositionObject>
{
    fn from(value: &CompositionPropertySet) -> Self {
        ::windows::core::InParam::owned(value.into())
    }
}
unsafe impl ::core::marker::Send for CompositionPropertySet {}
unsafe impl ::core::marker::Sync for CompositionPropertySet {}
#[doc = "*Required features: `\"UI_Composition\"`*"]
#[repr(transparent)]
pub struct CompositionRadialGradientBrush(::windows::core::IUnknown);
impl CompositionRadialGradientBrush {
    pub fn PopulatePropertyInfo(
        &self,
        propertyname: &::windows::core::HSTRING,
        propertyinfo: &AnimationPropertyInfo,
    ) -> ::windows::core::Result<()> {
        let this = &::windows::core::Interface::cast::<IAnimationObject>(self)?;
        unsafe {
            (::windows::core::Vtable::vtable(this).PopulatePropertyInfo)(
                ::windows::core::Vtable::as_raw(this),
                ::core::mem::transmute_copy(propertyname),
                ::core::mem::transmute_copy(propertyinfo),
            )
            .ok()
        }
    }
    pub fn Close(&self) -> ::windows::core::Result<()> {
        let this = &::windows::core::Interface::cast::<::windows::Foundation::IClosable>(self)?;
        unsafe {
            (::windows::core::Vtable::vtable(this).Close)(::windows::core::Vtable::as_raw(this))
                .ok()
        }
    }
    pub fn AnchorPoint(&self) -> ::windows::core::Result<::windows::Foundation::Numerics::Vector2> {
        let this = &::windows::core::Interface::cast::<ICompositionGradientBrush>(self)?;
        unsafe {
            let mut result__ = ::core::mem::MaybeUninit::zeroed();
            (::windows::core::Vtable::vtable(this).AnchorPoint)(
                ::windows::core::Vtable::as_raw(this),
                result__.as_mut_ptr(),
            )
            .from_abi::<::windows::Foundation::Numerics::Vector2>(result__)
        }
    }
    pub fn SetAnchorPoint(
        &self,
        value: ::windows::Foundation::Numerics::Vector2,
    ) -> ::windows::core::Result<()> {
        let this = &::windows::core::Interface::cast::<ICompositionGradientBrush>(self)?;
        unsafe {
            (::windows::core::Vtable::vtable(this).SetAnchorPoint)(
                ::windows::core::Vtable::as_raw(this),
                value,
            )
            .ok()
        }
    }
    pub fn CenterPoint(&self) -> ::windows::core::Result<::windows::Foundation::Numerics::Vector2> {
        let this = &::windows::core::Interface::cast::<ICompositionGradientBrush>(self)?;
        unsafe {
            let mut result__ = ::core::mem::MaybeUninit::zeroed();
            (::windows::core::Vtable::vtable(this).CenterPoint)(
                ::windows::core::Vtable::as_raw(this),
                result__.as_mut_ptr(),
            )
            .from_abi::<::windows::Foundation::Numerics::Vector2>(result__)
        }
    }
    pub fn SetCenterPoint(
        &self,
        value: ::windows::Foundation::Numerics::Vector2,
    ) -> ::windows::core::Result<()> {
        let this = &::windows::core::Interface::cast::<ICompositionGradientBrush>(self)?;
        unsafe {
            (::windows::core::Vtable::vtable(this).SetCenterPoint)(
                ::windows::core::Vtable::as_raw(this),
                value,
            )
            .ok()
        }
    }
    pub fn ColorStops(&self) -> ::windows::core::Result<CompositionColorGradientStopCollection> {
        let this = &::windows::core::Interface::cast::<ICompositionGradientBrush>(self)?;
        unsafe {
            let mut result__ = ::core::mem::MaybeUninit::zeroed();
            (::windows::core::Vtable::vtable(this).ColorStops)(
                ::windows::core::Vtable::as_raw(this),
                result__.as_mut_ptr(),
            )
            .from_abi::<CompositionColorGradientStopCollection>(result__)
        }
    }
    pub fn ExtendMode(&self) -> ::windows::core::Result<CompositionGradientExtendMode> {
        let this = &::windows::core::Interface::cast::<ICompositionGradientBrush>(self)?;
        unsafe {
            let mut result__ = ::core::mem::MaybeUninit::zeroed();
            (::windows::core::Vtable::vtable(this).ExtendMode)(
                ::windows::core::Vtable::as_raw(this),
                result__.as_mut_ptr(),
            )
            .from_abi::<CompositionGradientExtendMode>(result__)
        }
    }
    pub fn SetExtendMode(
        &self,
        value: CompositionGradientExtendMode,
    ) -> ::windows::core::Result<()> {
        let this = &::windows::core::Interface::cast::<ICompositionGradientBrush>(self)?;
        unsafe {
            (::windows::core::Vtable::vtable(this).SetExtendMode)(
                ::windows::core::Vtable::as_raw(this),
                value,
            )
            .ok()
        }
    }
    pub fn InterpolationSpace(&self) -> ::windows::core::Result<CompositionColorSpace> {
        let this = &::windows::core::Interface::cast::<ICompositionGradientBrush>(self)?;
        unsafe {
            let mut result__ = ::core::mem::MaybeUninit::zeroed();
            (::windows::core::Vtable::vtable(this).InterpolationSpace)(
                ::windows::core::Vtable::as_raw(this),
                result__.as_mut_ptr(),
            )
            .from_abi::<CompositionColorSpace>(result__)
        }
    }
    pub fn SetInterpolationSpace(
        &self,
        value: CompositionColorSpace,
    ) -> ::windows::core::Result<()> {
        let this = &::windows::core::Interface::cast::<ICompositionGradientBrush>(self)?;
        unsafe {
            (::windows::core::Vtable::vtable(this).SetInterpolationSpace)(
                ::windows::core::Vtable::as_raw(this),
                value,
            )
            .ok()
        }
    }
    pub fn Offset(&self) -> ::windows::core::Result<::windows::Foundation::Numerics::Vector2> {
        let this = &::windows::core::Interface::cast::<ICompositionGradientBrush>(self)?;
        unsafe {
            let mut result__ = ::core::mem::MaybeUninit::zeroed();
            (::windows::core::Vtable::vtable(this).Offset)(
                ::windows::core::Vtable::as_raw(this),
                result__.as_mut_ptr(),
            )
            .from_abi::<::windows::Foundation::Numerics::Vector2>(result__)
        }
    }
    pub fn SetOffset(
        &self,
        value: ::windows::Foundation::Numerics::Vector2,
    ) -> ::windows::core::Result<()> {
        let this = &::windows::core::Interface::cast::<ICompositionGradientBrush>(self)?;
        unsafe {
            (::windows::core::Vtable::vtable(this).SetOffset)(
                ::windows::core::Vtable::as_raw(this),
                value,
            )
            .ok()
        }
    }
    pub fn RotationAngle(&self) -> ::windows::core::Result<f32> {
        let this = &::windows::core::Interface::cast::<ICompositionGradientBrush>(self)?;
        unsafe {
            let mut result__ = ::core::mem::MaybeUninit::zeroed();
            (::windows::core::Vtable::vtable(this).RotationAngle)(
                ::windows::core::Vtable::as_raw(this),
                result__.as_mut_ptr(),
            )
            .from_abi::<f32>(result__)
        }
    }
    pub fn SetRotationAngle(&self, value: f32) -> ::windows::core::Result<()> {
        let this = &::windows::core::Interface::cast::<ICompositionGradientBrush>(self)?;
        unsafe {
            (::windows::core::Vtable::vtable(this).SetRotationAngle)(
                ::windows::core::Vtable::as_raw(this),
                value,
            )
            .ok()
        }
    }
    pub fn RotationAngleInDegrees(&self) -> ::windows::core::Result<f32> {
        let this = &::windows::core::Interface::cast::<ICompositionGradientBrush>(self)?;
        unsafe {
            let mut result__ = ::core::mem::MaybeUninit::zeroed();
            (::windows::core::Vtable::vtable(this).RotationAngleInDegrees)(
                ::windows::core::Vtable::as_raw(this),
                result__.as_mut_ptr(),
            )
            .from_abi::<f32>(result__)
        }
    }
    pub fn SetRotationAngleInDegrees(&self, value: f32) -> ::windows::core::Result<()> {
        let this = &::windows::core::Interface::cast::<ICompositionGradientBrush>(self)?;
        unsafe {
            (::windows::core::Vtable::vtable(this).SetRotationAngleInDegrees)(
                ::windows::core::Vtable::as_raw(this),
                value,
            )
            .ok()
        }
    }
    pub fn Scale(&self) -> ::windows::core::Result<::windows::Foundation::Numerics::Vector2> {
        let this = &::windows::core::Interface::cast::<ICompositionGradientBrush>(self)?;
        unsafe {
            let mut result__ = ::core::mem::MaybeUninit::zeroed();
            (::windows::core::Vtable::vtable(this).Scale)(
                ::windows::core::Vtable::as_raw(this),
                result__.as_mut_ptr(),
            )
            .from_abi::<::windows::Foundation::Numerics::Vector2>(result__)
        }
    }
    pub fn SetScale(
        &self,
        value: ::windows::Foundation::Numerics::Vector2,
    ) -> ::windows::core::Result<()> {
        let this = &::windows::core::Interface::cast::<ICompositionGradientBrush>(self)?;
        unsafe {
            (::windows::core::Vtable::vtable(this).SetScale)(
                ::windows::core::Vtable::as_raw(this),
                value,
            )
            .ok()
        }
    }
    pub fn TransformMatrix(
        &self,
    ) -> ::windows::core::Result<::windows::Foundation::Numerics::Matrix3x2> {
        let this = &::windows::core::Interface::cast::<ICompositionGradientBrush>(self)?;
        unsafe {
            let mut result__ = ::core::mem::MaybeUninit::zeroed();
            (::windows::core::Vtable::vtable(this).TransformMatrix)(
                ::windows::core::Vtable::as_raw(this),
                result__.as_mut_ptr(),
            )
            .from_abi::<::windows::Foundation::Numerics::Matrix3x2>(result__)
        }
    }
    pub fn SetTransformMatrix(
        &self,
        value: ::windows::Foundation::Numerics::Matrix3x2,
    ) -> ::windows::core::Result<()> {
        let this = &::windows::core::Interface::cast::<ICompositionGradientBrush>(self)?;
        unsafe {
            (::windows::core::Vtable::vtable(this).SetTransformMatrix)(
                ::windows::core::Vtable::as_raw(this),
                value,
            )
            .ok()
        }
    }
    pub fn MappingMode(&self) -> ::windows::core::Result<CompositionMappingMode> {
        let this = &::windows::core::Interface::cast::<ICompositionGradientBrush2>(self)?;
        unsafe {
            let mut result__ = ::core::mem::MaybeUninit::zeroed();
            (::windows::core::Vtable::vtable(this).MappingMode)(
                ::windows::core::Vtable::as_raw(this),
                result__.as_mut_ptr(),
            )
            .from_abi::<CompositionMappingMode>(result__)
        }
    }
    pub fn SetMappingMode(&self, value: CompositionMappingMode) -> ::windows::core::Result<()> {
        let this = &::windows::core::Interface::cast::<ICompositionGradientBrush2>(self)?;
        unsafe {
            (::windows::core::Vtable::vtable(this).SetMappingMode)(
                ::windows::core::Vtable::as_raw(this),
                value,
            )
            .ok()
        }
    }
    pub fn Compositor(&self) -> ::windows::core::Result<Compositor> {
        let this = &::windows::core::Interface::cast::<ICompositionObject>(self)?;
        unsafe {
            let mut result__ = ::core::mem::MaybeUninit::zeroed();
            (::windows::core::Vtable::vtable(this).Compositor)(
                ::windows::core::Vtable::as_raw(this),
                result__.as_mut_ptr(),
            )
            .from_abi::<Compositor>(result__)
        }
    }
    pub fn Properties(&self) -> ::windows::core::Result<CompositionPropertySet> {
        let this = &::windows::core::Interface::cast::<ICompositionObject>(self)?;
        unsafe {
            let mut result__ = ::core::mem::MaybeUninit::zeroed();
            (::windows::core::Vtable::vtable(this).Properties)(
                ::windows::core::Vtable::as_raw(this),
                result__.as_mut_ptr(),
            )
            .from_abi::<CompositionPropertySet>(result__)
        }
    }
    pub fn StartAnimation<'a, P0>(
        &self,
        propertyname: &::windows::core::HSTRING,
        animation: P0,
    ) -> ::windows::core::Result<()>
    where
        P0: ::std::convert::Into<::windows::core::InParam<'a, CompositionAnimation>>,
    {
        let this = &::windows::core::Interface::cast::<ICompositionObject>(self)?;
        unsafe {
            (::windows::core::Vtable::vtable(this).StartAnimation)(
                ::windows::core::Vtable::as_raw(this),
                ::core::mem::transmute_copy(propertyname),
                animation.into().abi(),
            )
            .ok()
        }
    }
    pub fn StopAnimation(
        &self,
        propertyname: &::windows::core::HSTRING,
    ) -> ::windows::core::Result<()> {
        let this = &::windows::core::Interface::cast::<ICompositionObject>(self)?;
        unsafe {
            (::windows::core::Vtable::vtable(this).StopAnimation)(
                ::windows::core::Vtable::as_raw(this),
                ::core::mem::transmute_copy(propertyname),
            )
            .ok()
        }
    }
    pub fn Comment(&self) -> ::windows::core::Result<::windows::core::HSTRING> {
        let this = &::windows::core::Interface::cast::<ICompositionObject2>(self)?;
        unsafe {
            let mut result__ = ::core::mem::MaybeUninit::zeroed();
            (::windows::core::Vtable::vtable(this).Comment)(
                ::windows::core::Vtable::as_raw(this),
                result__.as_mut_ptr(),
            )
            .from_abi::<::windows::core::HSTRING>(result__)
        }
    }
    pub fn SetComment(&self, value: &::windows::core::HSTRING) -> ::windows::core::Result<()> {
        let this = &::windows::core::Interface::cast::<ICompositionObject2>(self)?;
        unsafe {
            (::windows::core::Vtable::vtable(this).SetComment)(
                ::windows::core::Vtable::as_raw(this),
                ::core::mem::transmute_copy(value),
            )
            .ok()
        }
    }
    pub fn ImplicitAnimations(&self) -> ::windows::core::Result<ImplicitAnimationCollection> {
        let this = &::windows::core::Interface::cast::<ICompositionObject2>(self)?;
        unsafe {
            let mut result__ = ::core::mem::MaybeUninit::zeroed();
            (::windows::core::Vtable::vtable(this).ImplicitAnimations)(
                ::windows::core::Vtable::as_raw(this),
                result__.as_mut_ptr(),
            )
            .from_abi::<ImplicitAnimationCollection>(result__)
        }
    }
    pub fn SetImplicitAnimations(
        &self,
        value: &ImplicitAnimationCollection,
    ) -> ::windows::core::Result<()> {
        let this = &::windows::core::Interface::cast::<ICompositionObject2>(self)?;
        unsafe {
            (::windows::core::Vtable::vtable(this).SetImplicitAnimations)(
                ::windows::core::Vtable::as_raw(this),
                ::core::mem::transmute_copy(value),
            )
            .ok()
        }
    }
    pub fn StartAnimationGroup<'a, P0, E0>(&self, value: P0) -> ::windows::core::Result<()>
    where
        P0: ::std::convert::TryInto<
            ::windows::core::InParam<'a, ICompositionAnimationBase>,
            Error = E0,
        >,
        E0: ::std::convert::Into<::windows::core::Error>,
    {
        let this = &::windows::core::Interface::cast::<ICompositionObject2>(self)?;
        unsafe {
            (::windows::core::Vtable::vtable(this).StartAnimationGroup)(
                ::windows::core::Vtable::as_raw(this),
                value.try_into().map_err(|e| e.into())?.abi(),
            )
            .ok()
        }
    }
    pub fn StopAnimationGroup<'a, P0, E0>(&self, value: P0) -> ::windows::core::Result<()>
    where
        P0: ::std::convert::TryInto<
            ::windows::core::InParam<'a, ICompositionAnimationBase>,
            Error = E0,
        >,
        E0: ::std::convert::Into<::windows::core::Error>,
    {
        let this = &::windows::core::Interface::cast::<ICompositionObject2>(self)?;
        unsafe {
            (::windows::core::Vtable::vtable(this).StopAnimationGroup)(
                ::windows::core::Vtable::as_raw(this),
                value.try_into().map_err(|e| e.into())?.abi(),
            )
            .ok()
        }
    }
    #[doc = "*Required features: `\"UI_Dispatching\"`*"]
    #[cfg(feature = "UI_Dispatching")]
    pub fn DispatcherQueue(&self) -> ::windows::core::Result<super::Dispatching::DispatcherQueue> {
        let this = &::windows::core::Interface::cast::<ICompositionObject3>(self)?;
        unsafe {
            let mut result__ = ::core::mem::MaybeUninit::zeroed();
            (::windows::core::Vtable::vtable(this).DispatcherQueue)(
                ::windows::core::Vtable::as_raw(this),
                result__.as_mut_ptr(),
            )
            .from_abi::<super::Dispatching::DispatcherQueue>(result__)
        }
    }
    pub fn TryGetAnimationController(
        &self,
        propertyname: &::windows::core::HSTRING,
    ) -> ::windows::core::Result<AnimationController> {
        let this = &::windows::core::Interface::cast::<ICompositionObject4>(self)?;
        unsafe {
            let mut result__ = ::core::mem::MaybeUninit::zeroed();
            (::windows::core::Vtable::vtable(this).TryGetAnimationController)(
                ::windows::core::Vtable::as_raw(this),
                ::core::mem::transmute_copy(propertyname),
                result__.as_mut_ptr(),
            )
            .from_abi::<AnimationController>(result__)
        }
    }
    pub fn StartAnimationWithController<'a, P0>(
        &self,
        propertyname: &::windows::core::HSTRING,
        animation: P0,
        animationcontroller: &AnimationController,
    ) -> ::windows::core::Result<()>
    where
        P0: ::std::convert::Into<::windows::core::InParam<'a, CompositionAnimation>>,
    {
        let this = &::windows::core::Interface::cast::<ICompositionObject5>(self)?;
        unsafe {
            (::windows::core::Vtable::vtable(this).StartAnimationWithController)(
                ::windows::core::Vtable::as_raw(this),
                ::core::mem::transmute_copy(propertyname),
                animation.into().abi(),
                ::core::mem::transmute_copy(animationcontroller),
            )
            .ok()
        }
    }
    pub fn EllipseCenter(
        &self,
    ) -> ::windows::core::Result<::windows::Foundation::Numerics::Vector2> {
        let this = self;
        unsafe {
            let mut result__ = ::core::mem::MaybeUninit::zeroed();
            (::windows::core::Vtable::vtable(this).EllipseCenter)(
                ::windows::core::Vtable::as_raw(this),
                result__.as_mut_ptr(),
            )
            .from_abi::<::windows::Foundation::Numerics::Vector2>(result__)
        }
    }
    pub fn SetEllipseCenter(
        &self,
        value: ::windows::Foundation::Numerics::Vector2,
    ) -> ::windows::core::Result<()> {
        let this = self;
        unsafe {
            (::windows::core::Vtable::vtable(this).SetEllipseCenter)(
                ::windows::core::Vtable::as_raw(this),
                value,
            )
            .ok()
        }
    }
    pub fn EllipseRadius(
        &self,
    ) -> ::windows::core::Result<::windows::Foundation::Numerics::Vector2> {
        let this = self;
        unsafe {
            let mut result__ = ::core::mem::MaybeUninit::zeroed();
            (::windows::core::Vtable::vtable(this).EllipseRadius)(
                ::windows::core::Vtable::as_raw(this),
                result__.as_mut_ptr(),
            )
            .from_abi::<::windows::Foundation::Numerics::Vector2>(result__)
        }
    }
    pub fn SetEllipseRadius(
        &self,
        value: ::windows::Foundation::Numerics::Vector2,
    ) -> ::windows::core::Result<()> {
        let this = self;
        unsafe {
            (::windows::core::Vtable::vtable(this).SetEllipseRadius)(
                ::windows::core::Vtable::as_raw(this),
                value,
            )
            .ok()
        }
    }
    pub fn GradientOriginOffset(
        &self,
    ) -> ::windows::core::Result<::windows::Foundation::Numerics::Vector2> {
        let this = self;
        unsafe {
            let mut result__ = ::core::mem::MaybeUninit::zeroed();
            (::windows::core::Vtable::vtable(this).GradientOriginOffset)(
                ::windows::core::Vtable::as_raw(this),
                result__.as_mut_ptr(),
            )
            .from_abi::<::windows::Foundation::Numerics::Vector2>(result__)
        }
    }
    pub fn SetGradientOriginOffset(
        &self,
        value: ::windows::Foundation::Numerics::Vector2,
    ) -> ::windows::core::Result<()> {
        let this = self;
        unsafe {
            (::windows::core::Vtable::vtable(this).SetGradientOriginOffset)(
                ::windows::core::Vtable::as_raw(this),
                value,
            )
            .ok()
        }
    }
}
impl ::core::clone::Clone for CompositionRadialGradientBrush {
    fn clone(&self) -> Self {
        Self(self.0.clone())
    }
}
impl ::core::cmp::PartialEq for CompositionRadialGradientBrush {
    fn eq(&self, other: &Self) -> bool {
        self.0 == other.0
    }
}
impl ::core::cmp::Eq for CompositionRadialGradientBrush {}
impl ::core::fmt::Debug for CompositionRadialGradientBrush {
    fn fmt(&self, f: &mut ::core::fmt::Formatter<'_>) -> ::core::fmt::Result {
        f.debug_tuple("CompositionRadialGradientBrush").field(&self.0).finish()
    }
}
unsafe impl ::windows::core::RuntimeType for CompositionRadialGradientBrush {
    const SIGNATURE : ::windows::core::ConstBuffer = ::windows::core::ConstBuffer::from_slice ( b"rc(Microsoft.UI.Composition.CompositionRadialGradientBrush;{17662f3f-d351-5435-b3b4-ec26cefeccc5})" ) ;
    type DefaultType = ::core::option::Option<Self>;
    fn from_default(from: &Self::DefaultType) -> ::windows::core::Result<Self> {
        from.as_ref().cloned().ok_or(::windows::core::Error::OK)
    }
}
unsafe impl ::windows::core::Vtable for CompositionRadialGradientBrush {
    type Vtable = ICompositionRadialGradientBrush_Vtbl;
}
unsafe impl ::windows::core::Interface for CompositionRadialGradientBrush {
    const IID: ::windows::core::GUID =
        <ICompositionRadialGradientBrush as ::windows::core::Interface>::IID;
}
impl ::windows::core::RuntimeName for CompositionRadialGradientBrush {
    const NAME: &'static str = "Microsoft.UI.Composition.CompositionRadialGradientBrush";
}
::windows::core::interface_hierarchy!(
    CompositionRadialGradientBrush,
    ::windows::core::IUnknown,
    ::windows::core::IInspectable
);
impl ::core::convert::TryFrom<CompositionRadialGradientBrush> for IAnimationObject {
    type Error = ::windows::core::Error;
    fn try_from(value: CompositionRadialGradientBrush) -> ::windows::core::Result<Self> {
        ::core::convert::TryFrom::try_from(&value)
    }
}
impl ::core::convert::TryFrom<&CompositionRadialGradientBrush> for IAnimationObject {
    type Error = ::windows::core::Error;
    fn try_from(value: &CompositionRadialGradientBrush) -> ::windows::core::Result<Self> {
        ::windows::core::Interface::cast(value)
    }
}
impl<'a> ::core::convert::TryFrom<&CompositionRadialGradientBrush>
    for ::windows::core::InParam<'a, IAnimationObject>
{
    type Error = ::windows::core::Error;
    fn try_from(value: &CompositionRadialGradientBrush) -> ::windows::core::Result<Self> {
        let item = ::std::convert::TryInto::try_into(value)?;
        Ok(::windows::core::InParam::owned(item))
    }
}
impl ::core::convert::TryFrom<CompositionRadialGradientBrush> for ::windows::Foundation::IClosable {
    type Error = ::windows::core::Error;
    fn try_from(value: CompositionRadialGradientBrush) -> ::windows::core::Result<Self> {
        ::core::convert::TryFrom::try_from(&value)
    }
}
impl ::core::convert::TryFrom<&CompositionRadialGradientBrush>
    for ::windows::Foundation::IClosable
{
    type Error = ::windows::core::Error;
    fn try_from(value: &CompositionRadialGradientBrush) -> ::windows::core::Result<Self> {
        ::windows::core::Interface::cast(value)
    }
}
impl<'a> ::core::convert::TryFrom<&CompositionRadialGradientBrush>
    for ::windows::core::InParam<'a, ::windows::Foundation::IClosable>
{
    type Error = ::windows::core::Error;
    fn try_from(value: &CompositionRadialGradientBrush) -> ::windows::core::Result<Self> {
        let item = ::std::convert::TryInto::try_into(value)?;
        Ok(::windows::core::InParam::owned(item))
    }
}
impl ::core::convert::From<CompositionRadialGradientBrush> for CompositionGradientBrush {
    fn from(value: CompositionRadialGradientBrush) -> Self {
        ::core::convert::From::from(&value)
    }
}
impl ::core::convert::From<&CompositionRadialGradientBrush> for CompositionGradientBrush {
    fn from(value: &CompositionRadialGradientBrush) -> Self {
        ::windows::core::Interface::cast(value).unwrap()
    }
}
impl<'a> ::core::convert::From<&CompositionRadialGradientBrush>
    for ::windows::core::InParam<'a, CompositionGradientBrush>
{
    fn from(value: &CompositionRadialGradientBrush) -> Self {
        ::windows::core::InParam::owned(value.into())
    }
}
impl ::core::convert::From<CompositionRadialGradientBrush> for CompositionBrush {
    fn from(value: CompositionRadialGradientBrush) -> Self {
        ::core::convert::From::from(&value)
    }
}
impl ::core::convert::From<&CompositionRadialGradientBrush> for CompositionBrush {
    fn from(value: &CompositionRadialGradientBrush) -> Self {
        ::windows::core::Interface::cast(value).unwrap()
    }
}
impl<'a> ::core::convert::From<&CompositionRadialGradientBrush>
    for ::windows::core::InParam<'a, CompositionBrush>
{
    fn from(value: &CompositionRadialGradientBrush) -> Self {
        ::windows::core::InParam::owned(value.into())
    }
}
impl ::core::convert::From<CompositionRadialGradientBrush> for CompositionObject {
    fn from(value: CompositionRadialGradientBrush) -> Self {
        ::core::convert::From::from(&value)
    }
}
impl ::core::convert::From<&CompositionRadialGradientBrush> for CompositionObject {
    fn from(value: &CompositionRadialGradientBrush) -> Self {
        ::windows::core::Interface::cast(value).unwrap()
    }
}
impl<'a> ::core::convert::From<&CompositionRadialGradientBrush>
    for ::windows::core::InParam<'a, CompositionObject>
{
    fn from(value: &CompositionRadialGradientBrush) -> Self {
        ::windows::core::InParam::owned(value.into())
    }
}
unsafe impl ::core::marker::Send for CompositionRadialGradientBrush {}
unsafe impl ::core::marker::Sync for CompositionRadialGradientBrush {}
#[doc = "*Required features: `\"UI_Composition\"`*"]
#[repr(transparent)]
pub struct CompositionRectangleGeometry(::windows::core::IUnknown);
impl CompositionRectangleGeometry {
    pub fn PopulatePropertyInfo(
        &self,
        propertyname: &::windows::core::HSTRING,
        propertyinfo: &AnimationPropertyInfo,
    ) -> ::windows::core::Result<()> {
        let this = &::windows::core::Interface::cast::<IAnimationObject>(self)?;
        unsafe {
            (::windows::core::Vtable::vtable(this).PopulatePropertyInfo)(
                ::windows::core::Vtable::as_raw(this),
                ::core::mem::transmute_copy(propertyname),
                ::core::mem::transmute_copy(propertyinfo),
            )
            .ok()
        }
    }
    pub fn Close(&self) -> ::windows::core::Result<()> {
        let this = &::windows::core::Interface::cast::<::windows::Foundation::IClosable>(self)?;
        unsafe {
            (::windows::core::Vtable::vtable(this).Close)(::windows::core::Vtable::as_raw(this))
                .ok()
        }
    }
    pub fn TrimEnd(&self) -> ::windows::core::Result<f32> {
        let this = &::windows::core::Interface::cast::<ICompositionGeometry>(self)?;
        unsafe {
            let mut result__ = ::core::mem::MaybeUninit::zeroed();
            (::windows::core::Vtable::vtable(this).TrimEnd)(
                ::windows::core::Vtable::as_raw(this),
                result__.as_mut_ptr(),
            )
            .from_abi::<f32>(result__)
        }
    }
    pub fn SetTrimEnd(&self, value: f32) -> ::windows::core::Result<()> {
        let this = &::windows::core::Interface::cast::<ICompositionGeometry>(self)?;
        unsafe {
            (::windows::core::Vtable::vtable(this).SetTrimEnd)(
                ::windows::core::Vtable::as_raw(this),
                value,
            )
            .ok()
        }
    }
    pub fn TrimOffset(&self) -> ::windows::core::Result<f32> {
        let this = &::windows::core::Interface::cast::<ICompositionGeometry>(self)?;
        unsafe {
            let mut result__ = ::core::mem::MaybeUninit::zeroed();
            (::windows::core::Vtable::vtable(this).TrimOffset)(
                ::windows::core::Vtable::as_raw(this),
                result__.as_mut_ptr(),
            )
            .from_abi::<f32>(result__)
        }
    }
    pub fn SetTrimOffset(&self, value: f32) -> ::windows::core::Result<()> {
        let this = &::windows::core::Interface::cast::<ICompositionGeometry>(self)?;
        unsafe {
            (::windows::core::Vtable::vtable(this).SetTrimOffset)(
                ::windows::core::Vtable::as_raw(this),
                value,
            )
            .ok()
        }
    }
    pub fn TrimStart(&self) -> ::windows::core::Result<f32> {
        let this = &::windows::core::Interface::cast::<ICompositionGeometry>(self)?;
        unsafe {
            let mut result__ = ::core::mem::MaybeUninit::zeroed();
            (::windows::core::Vtable::vtable(this).TrimStart)(
                ::windows::core::Vtable::as_raw(this),
                result__.as_mut_ptr(),
            )
            .from_abi::<f32>(result__)
        }
    }
    pub fn SetTrimStart(&self, value: f32) -> ::windows::core::Result<()> {
        let this = &::windows::core::Interface::cast::<ICompositionGeometry>(self)?;
        unsafe {
            (::windows::core::Vtable::vtable(this).SetTrimStart)(
                ::windows::core::Vtable::as_raw(this),
                value,
            )
            .ok()
        }
    }
    pub fn Compositor(&self) -> ::windows::core::Result<Compositor> {
        let this = &::windows::core::Interface::cast::<ICompositionObject>(self)?;
        unsafe {
            let mut result__ = ::core::mem::MaybeUninit::zeroed();
            (::windows::core::Vtable::vtable(this).Compositor)(
                ::windows::core::Vtable::as_raw(this),
                result__.as_mut_ptr(),
            )
            .from_abi::<Compositor>(result__)
        }
    }
    pub fn Properties(&self) -> ::windows::core::Result<CompositionPropertySet> {
        let this = &::windows::core::Interface::cast::<ICompositionObject>(self)?;
        unsafe {
            let mut result__ = ::core::mem::MaybeUninit::zeroed();
            (::windows::core::Vtable::vtable(this).Properties)(
                ::windows::core::Vtable::as_raw(this),
                result__.as_mut_ptr(),
            )
            .from_abi::<CompositionPropertySet>(result__)
        }
    }
    pub fn StartAnimation<'a, P0>(
        &self,
        propertyname: &::windows::core::HSTRING,
        animation: P0,
    ) -> ::windows::core::Result<()>
    where
        P0: ::std::convert::Into<::windows::core::InParam<'a, CompositionAnimation>>,
    {
        let this = &::windows::core::Interface::cast::<ICompositionObject>(self)?;
        unsafe {
            (::windows::core::Vtable::vtable(this).StartAnimation)(
                ::windows::core::Vtable::as_raw(this),
                ::core::mem::transmute_copy(propertyname),
                animation.into().abi(),
            )
            .ok()
        }
    }
    pub fn StopAnimation(
        &self,
        propertyname: &::windows::core::HSTRING,
    ) -> ::windows::core::Result<()> {
        let this = &::windows::core::Interface::cast::<ICompositionObject>(self)?;
        unsafe {
            (::windows::core::Vtable::vtable(this).StopAnimation)(
                ::windows::core::Vtable::as_raw(this),
                ::core::mem::transmute_copy(propertyname),
            )
            .ok()
        }
    }
    pub fn Comment(&self) -> ::windows::core::Result<::windows::core::HSTRING> {
        let this = &::windows::core::Interface::cast::<ICompositionObject2>(self)?;
        unsafe {
            let mut result__ = ::core::mem::MaybeUninit::zeroed();
            (::windows::core::Vtable::vtable(this).Comment)(
                ::windows::core::Vtable::as_raw(this),
                result__.as_mut_ptr(),
            )
            .from_abi::<::windows::core::HSTRING>(result__)
        }
    }
    pub fn SetComment(&self, value: &::windows::core::HSTRING) -> ::windows::core::Result<()> {
        let this = &::windows::core::Interface::cast::<ICompositionObject2>(self)?;
        unsafe {
            (::windows::core::Vtable::vtable(this).SetComment)(
                ::windows::core::Vtable::as_raw(this),
                ::core::mem::transmute_copy(value),
            )
            .ok()
        }
    }
    pub fn ImplicitAnimations(&self) -> ::windows::core::Result<ImplicitAnimationCollection> {
        let this = &::windows::core::Interface::cast::<ICompositionObject2>(self)?;
        unsafe {
            let mut result__ = ::core::mem::MaybeUninit::zeroed();
            (::windows::core::Vtable::vtable(this).ImplicitAnimations)(
                ::windows::core::Vtable::as_raw(this),
                result__.as_mut_ptr(),
            )
            .from_abi::<ImplicitAnimationCollection>(result__)
        }
    }
    pub fn SetImplicitAnimations(
        &self,
        value: &ImplicitAnimationCollection,
    ) -> ::windows::core::Result<()> {
        let this = &::windows::core::Interface::cast::<ICompositionObject2>(self)?;
        unsafe {
            (::windows::core::Vtable::vtable(this).SetImplicitAnimations)(
                ::windows::core::Vtable::as_raw(this),
                ::core::mem::transmute_copy(value),
            )
            .ok()
        }
    }
    pub fn StartAnimationGroup<'a, P0, E0>(&self, value: P0) -> ::windows::core::Result<()>
    where
        P0: ::std::convert::TryInto<
            ::windows::core::InParam<'a, ICompositionAnimationBase>,
            Error = E0,
        >,
        E0: ::std::convert::Into<::windows::core::Error>,
    {
        let this = &::windows::core::Interface::cast::<ICompositionObject2>(self)?;
        unsafe {
            (::windows::core::Vtable::vtable(this).StartAnimationGroup)(
                ::windows::core::Vtable::as_raw(this),
                value.try_into().map_err(|e| e.into())?.abi(),
            )
            .ok()
        }
    }
    pub fn StopAnimationGroup<'a, P0, E0>(&self, value: P0) -> ::windows::core::Result<()>
    where
        P0: ::std::convert::TryInto<
            ::windows::core::InParam<'a, ICompositionAnimationBase>,
            Error = E0,
        >,
        E0: ::std::convert::Into<::windows::core::Error>,
    {
        let this = &::windows::core::Interface::cast::<ICompositionObject2>(self)?;
        unsafe {
            (::windows::core::Vtable::vtable(this).StopAnimationGroup)(
                ::windows::core::Vtable::as_raw(this),
                value.try_into().map_err(|e| e.into())?.abi(),
            )
            .ok()
        }
    }
    #[doc = "*Required features: `\"UI_Dispatching\"`*"]
    #[cfg(feature = "UI_Dispatching")]
    pub fn DispatcherQueue(&self) -> ::windows::core::Result<super::Dispatching::DispatcherQueue> {
        let this = &::windows::core::Interface::cast::<ICompositionObject3>(self)?;
        unsafe {
            let mut result__ = ::core::mem::MaybeUninit::zeroed();
            (::windows::core::Vtable::vtable(this).DispatcherQueue)(
                ::windows::core::Vtable::as_raw(this),
                result__.as_mut_ptr(),
            )
            .from_abi::<super::Dispatching::DispatcherQueue>(result__)
        }
    }
    pub fn TryGetAnimationController(
        &self,
        propertyname: &::windows::core::HSTRING,
    ) -> ::windows::core::Result<AnimationController> {
        let this = &::windows::core::Interface::cast::<ICompositionObject4>(self)?;
        unsafe {
            let mut result__ = ::core::mem::MaybeUninit::zeroed();
            (::windows::core::Vtable::vtable(this).TryGetAnimationController)(
                ::windows::core::Vtable::as_raw(this),
                ::core::mem::transmute_copy(propertyname),
                result__.as_mut_ptr(),
            )
            .from_abi::<AnimationController>(result__)
        }
    }
    pub fn StartAnimationWithController<'a, P0>(
        &self,
        propertyname: &::windows::core::HSTRING,
        animation: P0,
        animationcontroller: &AnimationController,
    ) -> ::windows::core::Result<()>
    where
        P0: ::std::convert::Into<::windows::core::InParam<'a, CompositionAnimation>>,
    {
        let this = &::windows::core::Interface::cast::<ICompositionObject5>(self)?;
        unsafe {
            (::windows::core::Vtable::vtable(this).StartAnimationWithController)(
                ::windows::core::Vtable::as_raw(this),
                ::core::mem::transmute_copy(propertyname),
                animation.into().abi(),
                ::core::mem::transmute_copy(animationcontroller),
            )
            .ok()
        }
    }
    pub fn Offset(&self) -> ::windows::core::Result<::windows::Foundation::Numerics::Vector2> {
        let this = self;
        unsafe {
            let mut result__ = ::core::mem::MaybeUninit::zeroed();
            (::windows::core::Vtable::vtable(this).Offset)(
                ::windows::core::Vtable::as_raw(this),
                result__.as_mut_ptr(),
            )
            .from_abi::<::windows::Foundation::Numerics::Vector2>(result__)
        }
    }
    pub fn SetOffset(
        &self,
        value: ::windows::Foundation::Numerics::Vector2,
    ) -> ::windows::core::Result<()> {
        let this = self;
        unsafe {
            (::windows::core::Vtable::vtable(this).SetOffset)(
                ::windows::core::Vtable::as_raw(this),
                value,
            )
            .ok()
        }
    }
    pub fn Size(&self) -> ::windows::core::Result<::windows::Foundation::Numerics::Vector2> {
        let this = self;
        unsafe {
            let mut result__ = ::core::mem::MaybeUninit::zeroed();
            (::windows::core::Vtable::vtable(this).Size)(
                ::windows::core::Vtable::as_raw(this),
                result__.as_mut_ptr(),
            )
            .from_abi::<::windows::Foundation::Numerics::Vector2>(result__)
        }
    }
    pub fn SetSize(
        &self,
        value: ::windows::Foundation::Numerics::Vector2,
    ) -> ::windows::core::Result<()> {
        let this = self;
        unsafe {
            (::windows::core::Vtable::vtable(this).SetSize)(
                ::windows::core::Vtable::as_raw(this),
                value,
            )
            .ok()
        }
    }
}
impl ::core::clone::Clone for CompositionRectangleGeometry {
    fn clone(&self) -> Self {
        Self(self.0.clone())
    }
}
impl ::core::cmp::PartialEq for CompositionRectangleGeometry {
    fn eq(&self, other: &Self) -> bool {
        self.0 == other.0
    }
}
impl ::core::cmp::Eq for CompositionRectangleGeometry {}
impl ::core::fmt::Debug for CompositionRectangleGeometry {
    fn fmt(&self, f: &mut ::core::fmt::Formatter<'_>) -> ::core::fmt::Result {
        f.debug_tuple("CompositionRectangleGeometry").field(&self.0).finish()
    }
}
unsafe impl ::windows::core::RuntimeType for CompositionRectangleGeometry {
    const SIGNATURE : ::windows::core::ConstBuffer = ::windows::core::ConstBuffer::from_slice ( b"rc(Microsoft.UI.Composition.CompositionRectangleGeometry;{bd551fcf-2c7f-5125-ac44-50a4f1d8fa76})" ) ;
    type DefaultType = ::core::option::Option<Self>;
    fn from_default(from: &Self::DefaultType) -> ::windows::core::Result<Self> {
        from.as_ref().cloned().ok_or(::windows::core::Error::OK)
    }
}
unsafe impl ::windows::core::Vtable for CompositionRectangleGeometry {
    type Vtable = ICompositionRectangleGeometry_Vtbl;
}
unsafe impl ::windows::core::Interface for CompositionRectangleGeometry {
    const IID: ::windows::core::GUID =
        <ICompositionRectangleGeometry as ::windows::core::Interface>::IID;
}
impl ::windows::core::RuntimeName for CompositionRectangleGeometry {
    const NAME: &'static str = "Microsoft.UI.Composition.CompositionRectangleGeometry";
}
::windows::core::interface_hierarchy!(
    CompositionRectangleGeometry,
    ::windows::core::IUnknown,
    ::windows::core::IInspectable
);
impl ::core::convert::TryFrom<CompositionRectangleGeometry> for IAnimationObject {
    type Error = ::windows::core::Error;
    fn try_from(value: CompositionRectangleGeometry) -> ::windows::core::Result<Self> {
        ::core::convert::TryFrom::try_from(&value)
    }
}
impl ::core::convert::TryFrom<&CompositionRectangleGeometry> for IAnimationObject {
    type Error = ::windows::core::Error;
    fn try_from(value: &CompositionRectangleGeometry) -> ::windows::core::Result<Self> {
        ::windows::core::Interface::cast(value)
    }
}
impl<'a> ::core::convert::TryFrom<&CompositionRectangleGeometry>
    for ::windows::core::InParam<'a, IAnimationObject>
{
    type Error = ::windows::core::Error;
    fn try_from(value: &CompositionRectangleGeometry) -> ::windows::core::Result<Self> {
        let item = ::std::convert::TryInto::try_into(value)?;
        Ok(::windows::core::InParam::owned(item))
    }
}
impl ::core::convert::TryFrom<CompositionRectangleGeometry> for ::windows::Foundation::IClosable {
    type Error = ::windows::core::Error;
    fn try_from(value: CompositionRectangleGeometry) -> ::windows::core::Result<Self> {
        ::core::convert::TryFrom::try_from(&value)
    }
}
impl ::core::convert::TryFrom<&CompositionRectangleGeometry> for ::windows::Foundation::IClosable {
    type Error = ::windows::core::Error;
    fn try_from(value: &CompositionRectangleGeometry) -> ::windows::core::Result<Self> {
        ::windows::core::Interface::cast(value)
    }
}
impl<'a> ::core::convert::TryFrom<&CompositionRectangleGeometry>
    for ::windows::core::InParam<'a, ::windows::Foundation::IClosable>
{
    type Error = ::windows::core::Error;
    fn try_from(value: &CompositionRectangleGeometry) -> ::windows::core::Result<Self> {
        let item = ::std::convert::TryInto::try_into(value)?;
        Ok(::windows::core::InParam::owned(item))
    }
}
impl ::core::convert::From<CompositionRectangleGeometry> for CompositionGeometry {
    fn from(value: CompositionRectangleGeometry) -> Self {
        ::core::convert::From::from(&value)
    }
}
impl ::core::convert::From<&CompositionRectangleGeometry> for CompositionGeometry {
    fn from(value: &CompositionRectangleGeometry) -> Self {
        ::windows::core::Interface::cast(value).unwrap()
    }
}
impl<'a> ::core::convert::From<&CompositionRectangleGeometry>
    for ::windows::core::InParam<'a, CompositionGeometry>
{
    fn from(value: &CompositionRectangleGeometry) -> Self {
        ::windows::core::InParam::owned(value.into())
    }
}
impl ::core::convert::From<CompositionRectangleGeometry> for CompositionObject {
    fn from(value: CompositionRectangleGeometry) -> Self {
        ::core::convert::From::from(&value)
    }
}
impl ::core::convert::From<&CompositionRectangleGeometry> for CompositionObject {
    fn from(value: &CompositionRectangleGeometry) -> Self {
        ::windows::core::Interface::cast(value).unwrap()
    }
}
impl<'a> ::core::convert::From<&CompositionRectangleGeometry>
    for ::windows::core::InParam<'a, CompositionObject>
{
    fn from(value: &CompositionRectangleGeometry) -> Self {
        ::windows::core::InParam::owned(value.into())
    }
}
unsafe impl ::core::marker::Send for CompositionRectangleGeometry {}
unsafe impl ::core::marker::Sync for CompositionRectangleGeometry {}
#[doc = "*Required features: `\"UI_Composition\"`*"]
#[repr(transparent)]
pub struct CompositionRoundedRectangleGeometry(::windows::core::IUnknown);
impl CompositionRoundedRectangleGeometry {
    pub fn PopulatePropertyInfo(
        &self,
        propertyname: &::windows::core::HSTRING,
        propertyinfo: &AnimationPropertyInfo,
    ) -> ::windows::core::Result<()> {
        let this = &::windows::core::Interface::cast::<IAnimationObject>(self)?;
        unsafe {
            (::windows::core::Vtable::vtable(this).PopulatePropertyInfo)(
                ::windows::core::Vtable::as_raw(this),
                ::core::mem::transmute_copy(propertyname),
                ::core::mem::transmute_copy(propertyinfo),
            )
            .ok()
        }
    }
    pub fn Close(&self) -> ::windows::core::Result<()> {
        let this = &::windows::core::Interface::cast::<::windows::Foundation::IClosable>(self)?;
        unsafe {
            (::windows::core::Vtable::vtable(this).Close)(::windows::core::Vtable::as_raw(this))
                .ok()
        }
    }
    pub fn TrimEnd(&self) -> ::windows::core::Result<f32> {
        let this = &::windows::core::Interface::cast::<ICompositionGeometry>(self)?;
        unsafe {
            let mut result__ = ::core::mem::MaybeUninit::zeroed();
            (::windows::core::Vtable::vtable(this).TrimEnd)(
                ::windows::core::Vtable::as_raw(this),
                result__.as_mut_ptr(),
            )
            .from_abi::<f32>(result__)
        }
    }
    pub fn SetTrimEnd(&self, value: f32) -> ::windows::core::Result<()> {
        let this = &::windows::core::Interface::cast::<ICompositionGeometry>(self)?;
        unsafe {
            (::windows::core::Vtable::vtable(this).SetTrimEnd)(
                ::windows::core::Vtable::as_raw(this),
                value,
            )
            .ok()
        }
    }
    pub fn TrimOffset(&self) -> ::windows::core::Result<f32> {
        let this = &::windows::core::Interface::cast::<ICompositionGeometry>(self)?;
        unsafe {
            let mut result__ = ::core::mem::MaybeUninit::zeroed();
            (::windows::core::Vtable::vtable(this).TrimOffset)(
                ::windows::core::Vtable::as_raw(this),
                result__.as_mut_ptr(),
            )
            .from_abi::<f32>(result__)
        }
    }
    pub fn SetTrimOffset(&self, value: f32) -> ::windows::core::Result<()> {
        let this = &::windows::core::Interface::cast::<ICompositionGeometry>(self)?;
        unsafe {
            (::windows::core::Vtable::vtable(this).SetTrimOffset)(
                ::windows::core::Vtable::as_raw(this),
                value,
            )
            .ok()
        }
    }
    pub fn TrimStart(&self) -> ::windows::core::Result<f32> {
        let this = &::windows::core::Interface::cast::<ICompositionGeometry>(self)?;
        unsafe {
            let mut result__ = ::core::mem::MaybeUninit::zeroed();
            (::windows::core::Vtable::vtable(this).TrimStart)(
                ::windows::core::Vtable::as_raw(this),
                result__.as_mut_ptr(),
            )
            .from_abi::<f32>(result__)
        }
    }
    pub fn SetTrimStart(&self, value: f32) -> ::windows::core::Result<()> {
        let this = &::windows::core::Interface::cast::<ICompositionGeometry>(self)?;
        unsafe {
            (::windows::core::Vtable::vtable(this).SetTrimStart)(
                ::windows::core::Vtable::as_raw(this),
                value,
            )
            .ok()
        }
    }
    pub fn Compositor(&self) -> ::windows::core::Result<Compositor> {
        let this = &::windows::core::Interface::cast::<ICompositionObject>(self)?;
        unsafe {
            let mut result__ = ::core::mem::MaybeUninit::zeroed();
            (::windows::core::Vtable::vtable(this).Compositor)(
                ::windows::core::Vtable::as_raw(this),
                result__.as_mut_ptr(),
            )
            .from_abi::<Compositor>(result__)
        }
    }
    pub fn Properties(&self) -> ::windows::core::Result<CompositionPropertySet> {
        let this = &::windows::core::Interface::cast::<ICompositionObject>(self)?;
        unsafe {
            let mut result__ = ::core::mem::MaybeUninit::zeroed();
            (::windows::core::Vtable::vtable(this).Properties)(
                ::windows::core::Vtable::as_raw(this),
                result__.as_mut_ptr(),
            )
            .from_abi::<CompositionPropertySet>(result__)
        }
    }
    pub fn StartAnimation<'a, P0>(
        &self,
        propertyname: &::windows::core::HSTRING,
        animation: P0,
    ) -> ::windows::core::Result<()>
    where
        P0: ::std::convert::Into<::windows::core::InParam<'a, CompositionAnimation>>,
    {
        let this = &::windows::core::Interface::cast::<ICompositionObject>(self)?;
        unsafe {
            (::windows::core::Vtable::vtable(this).StartAnimation)(
                ::windows::core::Vtable::as_raw(this),
                ::core::mem::transmute_copy(propertyname),
                animation.into().abi(),
            )
            .ok()
        }
    }
    pub fn StopAnimation(
        &self,
        propertyname: &::windows::core::HSTRING,
    ) -> ::windows::core::Result<()> {
        let this = &::windows::core::Interface::cast::<ICompositionObject>(self)?;
        unsafe {
            (::windows::core::Vtable::vtable(this).StopAnimation)(
                ::windows::core::Vtable::as_raw(this),
                ::core::mem::transmute_copy(propertyname),
            )
            .ok()
        }
    }
    pub fn Comment(&self) -> ::windows::core::Result<::windows::core::HSTRING> {
        let this = &::windows::core::Interface::cast::<ICompositionObject2>(self)?;
        unsafe {
            let mut result__ = ::core::mem::MaybeUninit::zeroed();
            (::windows::core::Vtable::vtable(this).Comment)(
                ::windows::core::Vtable::as_raw(this),
                result__.as_mut_ptr(),
            )
            .from_abi::<::windows::core::HSTRING>(result__)
        }
    }
    pub fn SetComment(&self, value: &::windows::core::HSTRING) -> ::windows::core::Result<()> {
        let this = &::windows::core::Interface::cast::<ICompositionObject2>(self)?;
        unsafe {
            (::windows::core::Vtable::vtable(this).SetComment)(
                ::windows::core::Vtable::as_raw(this),
                ::core::mem::transmute_copy(value),
            )
            .ok()
        }
    }
    pub fn ImplicitAnimations(&self) -> ::windows::core::Result<ImplicitAnimationCollection> {
        let this = &::windows::core::Interface::cast::<ICompositionObject2>(self)?;
        unsafe {
            let mut result__ = ::core::mem::MaybeUninit::zeroed();
            (::windows::core::Vtable::vtable(this).ImplicitAnimations)(
                ::windows::core::Vtable::as_raw(this),
                result__.as_mut_ptr(),
            )
            .from_abi::<ImplicitAnimationCollection>(result__)
        }
    }
    pub fn SetImplicitAnimations(
        &self,
        value: &ImplicitAnimationCollection,
    ) -> ::windows::core::Result<()> {
        let this = &::windows::core::Interface::cast::<ICompositionObject2>(self)?;
        unsafe {
            (::windows::core::Vtable::vtable(this).SetImplicitAnimations)(
                ::windows::core::Vtable::as_raw(this),
                ::core::mem::transmute_copy(value),
            )
            .ok()
        }
    }
    pub fn StartAnimationGroup<'a, P0, E0>(&self, value: P0) -> ::windows::core::Result<()>
    where
        P0: ::std::convert::TryInto<
            ::windows::core::InParam<'a, ICompositionAnimationBase>,
            Error = E0,
        >,
        E0: ::std::convert::Into<::windows::core::Error>,
    {
        let this = &::windows::core::Interface::cast::<ICompositionObject2>(self)?;
        unsafe {
            (::windows::core::Vtable::vtable(this).StartAnimationGroup)(
                ::windows::core::Vtable::as_raw(this),
                value.try_into().map_err(|e| e.into())?.abi(),
            )
            .ok()
        }
    }
    pub fn StopAnimationGroup<'a, P0, E0>(&self, value: P0) -> ::windows::core::Result<()>
    where
        P0: ::std::convert::TryInto<
            ::windows::core::InParam<'a, ICompositionAnimationBase>,
            Error = E0,
        >,
        E0: ::std::convert::Into<::windows::core::Error>,
    {
        let this = &::windows::core::Interface::cast::<ICompositionObject2>(self)?;
        unsafe {
            (::windows::core::Vtable::vtable(this).StopAnimationGroup)(
                ::windows::core::Vtable::as_raw(this),
                value.try_into().map_err(|e| e.into())?.abi(),
            )
            .ok()
        }
    }
    #[doc = "*Required features: `\"UI_Dispatching\"`*"]
    #[cfg(feature = "UI_Dispatching")]
    pub fn DispatcherQueue(&self) -> ::windows::core::Result<super::Dispatching::DispatcherQueue> {
        let this = &::windows::core::Interface::cast::<ICompositionObject3>(self)?;
        unsafe {
            let mut result__ = ::core::mem::MaybeUninit::zeroed();
            (::windows::core::Vtable::vtable(this).DispatcherQueue)(
                ::windows::core::Vtable::as_raw(this),
                result__.as_mut_ptr(),
            )
            .from_abi::<super::Dispatching::DispatcherQueue>(result__)
        }
    }
    pub fn TryGetAnimationController(
        &self,
        propertyname: &::windows::core::HSTRING,
    ) -> ::windows::core::Result<AnimationController> {
        let this = &::windows::core::Interface::cast::<ICompositionObject4>(self)?;
        unsafe {
            let mut result__ = ::core::mem::MaybeUninit::zeroed();
            (::windows::core::Vtable::vtable(this).TryGetAnimationController)(
                ::windows::core::Vtable::as_raw(this),
                ::core::mem::transmute_copy(propertyname),
                result__.as_mut_ptr(),
            )
            .from_abi::<AnimationController>(result__)
        }
    }
    pub fn StartAnimationWithController<'a, P0>(
        &self,
        propertyname: &::windows::core::HSTRING,
        animation: P0,
        animationcontroller: &AnimationController,
    ) -> ::windows::core::Result<()>
    where
        P0: ::std::convert::Into<::windows::core::InParam<'a, CompositionAnimation>>,
    {
        let this = &::windows::core::Interface::cast::<ICompositionObject5>(self)?;
        unsafe {
            (::windows::core::Vtable::vtable(this).StartAnimationWithController)(
                ::windows::core::Vtable::as_raw(this),
                ::core::mem::transmute_copy(propertyname),
                animation.into().abi(),
                ::core::mem::transmute_copy(animationcontroller),
            )
            .ok()
        }
    }
    pub fn CornerRadius(
        &self,
    ) -> ::windows::core::Result<::windows::Foundation::Numerics::Vector2> {
        let this = self;
        unsafe {
            let mut result__ = ::core::mem::MaybeUninit::zeroed();
            (::windows::core::Vtable::vtable(this).CornerRadius)(
                ::windows::core::Vtable::as_raw(this),
                result__.as_mut_ptr(),
            )
            .from_abi::<::windows::Foundation::Numerics::Vector2>(result__)
        }
    }
    pub fn SetCornerRadius(
        &self,
        value: ::windows::Foundation::Numerics::Vector2,
    ) -> ::windows::core::Result<()> {
        let this = self;
        unsafe {
            (::windows::core::Vtable::vtable(this).SetCornerRadius)(
                ::windows::core::Vtable::as_raw(this),
                value,
            )
            .ok()
        }
    }
    pub fn Offset(&self) -> ::windows::core::Result<::windows::Foundation::Numerics::Vector2> {
        let this = self;
        unsafe {
            let mut result__ = ::core::mem::MaybeUninit::zeroed();
            (::windows::core::Vtable::vtable(this).Offset)(
                ::windows::core::Vtable::as_raw(this),
                result__.as_mut_ptr(),
            )
            .from_abi::<::windows::Foundation::Numerics::Vector2>(result__)
        }
    }
    pub fn SetOffset(
        &self,
        value: ::windows::Foundation::Numerics::Vector2,
    ) -> ::windows::core::Result<()> {
        let this = self;
        unsafe {
            (::windows::core::Vtable::vtable(this).SetOffset)(
                ::windows::core::Vtable::as_raw(this),
                value,
            )
            .ok()
        }
    }
    pub fn Size(&self) -> ::windows::core::Result<::windows::Foundation::Numerics::Vector2> {
        let this = self;
        unsafe {
            let mut result__ = ::core::mem::MaybeUninit::zeroed();
            (::windows::core::Vtable::vtable(this).Size)(
                ::windows::core::Vtable::as_raw(this),
                result__.as_mut_ptr(),
            )
            .from_abi::<::windows::Foundation::Numerics::Vector2>(result__)
        }
    }
    pub fn SetSize(
        &self,
        value: ::windows::Foundation::Numerics::Vector2,
    ) -> ::windows::core::Result<()> {
        let this = self;
        unsafe {
            (::windows::core::Vtable::vtable(this).SetSize)(
                ::windows::core::Vtable::as_raw(this),
                value,
            )
            .ok()
        }
    }
}
impl ::core::clone::Clone for CompositionRoundedRectangleGeometry {
    fn clone(&self) -> Self {
        Self(self.0.clone())
    }
}
impl ::core::cmp::PartialEq for CompositionRoundedRectangleGeometry {
    fn eq(&self, other: &Self) -> bool {
        self.0 == other.0
    }
}
impl ::core::cmp::Eq for CompositionRoundedRectangleGeometry {}
impl ::core::fmt::Debug for CompositionRoundedRectangleGeometry {
    fn fmt(&self, f: &mut ::core::fmt::Formatter<'_>) -> ::core::fmt::Result {
        f.debug_tuple("CompositionRoundedRectangleGeometry").field(&self.0).finish()
    }
}
unsafe impl ::windows::core::RuntimeType for CompositionRoundedRectangleGeometry {
    const SIGNATURE : ::windows::core::ConstBuffer = ::windows::core::ConstBuffer::from_slice ( b"rc(Microsoft.UI.Composition.CompositionRoundedRectangleGeometry;{02eafc87-8d1f-5445-a416-d81baee8a750})" ) ;
    type DefaultType = ::core::option::Option<Self>;
    fn from_default(from: &Self::DefaultType) -> ::windows::core::Result<Self> {
        from.as_ref().cloned().ok_or(::windows::core::Error::OK)
    }
}
unsafe impl ::windows::core::Vtable for CompositionRoundedRectangleGeometry {
    type Vtable = ICompositionRoundedRectangleGeometry_Vtbl;
}
unsafe impl ::windows::core::Interface for CompositionRoundedRectangleGeometry {
    const IID: ::windows::core::GUID =
        <ICompositionRoundedRectangleGeometry as ::windows::core::Interface>::IID;
}
impl ::windows::core::RuntimeName for CompositionRoundedRectangleGeometry {
    const NAME: &'static str = "Microsoft.UI.Composition.CompositionRoundedRectangleGeometry";
}
::windows::core::interface_hierarchy!(
    CompositionRoundedRectangleGeometry,
    ::windows::core::IUnknown,
    ::windows::core::IInspectable
);
impl ::core::convert::TryFrom<CompositionRoundedRectangleGeometry> for IAnimationObject {
    type Error = ::windows::core::Error;
    fn try_from(value: CompositionRoundedRectangleGeometry) -> ::windows::core::Result<Self> {
        ::core::convert::TryFrom::try_from(&value)
    }
}
impl ::core::convert::TryFrom<&CompositionRoundedRectangleGeometry> for IAnimationObject {
    type Error = ::windows::core::Error;
    fn try_from(value: &CompositionRoundedRectangleGeometry) -> ::windows::core::Result<Self> {
        ::windows::core::Interface::cast(value)
    }
}
impl<'a> ::core::convert::TryFrom<&CompositionRoundedRectangleGeometry>
    for ::windows::core::InParam<'a, IAnimationObject>
{
    type Error = ::windows::core::Error;
    fn try_from(value: &CompositionRoundedRectangleGeometry) -> ::windows::core::Result<Self> {
        let item = ::std::convert::TryInto::try_into(value)?;
        Ok(::windows::core::InParam::owned(item))
    }
}
impl ::core::convert::TryFrom<CompositionRoundedRectangleGeometry>
    for ::windows::Foundation::IClosable
{
    type Error = ::windows::core::Error;
    fn try_from(value: CompositionRoundedRectangleGeometry) -> ::windows::core::Result<Self> {
        ::core::convert::TryFrom::try_from(&value)
    }
}
impl ::core::convert::TryFrom<&CompositionRoundedRectangleGeometry>
    for ::windows::Foundation::IClosable
{
    type Error = ::windows::core::Error;
    fn try_from(value: &CompositionRoundedRectangleGeometry) -> ::windows::core::Result<Self> {
        ::windows::core::Interface::cast(value)
    }
}
impl<'a> ::core::convert::TryFrom<&CompositionRoundedRectangleGeometry>
    for ::windows::core::InParam<'a, ::windows::Foundation::IClosable>
{
    type Error = ::windows::core::Error;
    fn try_from(value: &CompositionRoundedRectangleGeometry) -> ::windows::core::Result<Self> {
        let item = ::std::convert::TryInto::try_into(value)?;
        Ok(::windows::core::InParam::owned(item))
    }
}
impl ::core::convert::From<CompositionRoundedRectangleGeometry> for CompositionGeometry {
    fn from(value: CompositionRoundedRectangleGeometry) -> Self {
        ::core::convert::From::from(&value)
    }
}
impl ::core::convert::From<&CompositionRoundedRectangleGeometry> for CompositionGeometry {
    fn from(value: &CompositionRoundedRectangleGeometry) -> Self {
        ::windows::core::Interface::cast(value).unwrap()
    }
}
impl<'a> ::core::convert::From<&CompositionRoundedRectangleGeometry>
    for ::windows::core::InParam<'a, CompositionGeometry>
{
    fn from(value: &CompositionRoundedRectangleGeometry) -> Self {
        ::windows::core::InParam::owned(value.into())
    }
}
impl ::core::convert::From<CompositionRoundedRectangleGeometry> for CompositionObject {
    fn from(value: CompositionRoundedRectangleGeometry) -> Self {
        ::core::convert::From::from(&value)
    }
}
impl ::core::convert::From<&CompositionRoundedRectangleGeometry> for CompositionObject {
    fn from(value: &CompositionRoundedRectangleGeometry) -> Self {
        ::windows::core::Interface::cast(value).unwrap()
    }
}
impl<'a> ::core::convert::From<&CompositionRoundedRectangleGeometry>
    for ::windows::core::InParam<'a, CompositionObject>
{
    fn from(value: &CompositionRoundedRectangleGeometry) -> Self {
        ::windows::core::InParam::owned(value.into())
    }
}
unsafe impl ::core::marker::Send for CompositionRoundedRectangleGeometry {}
unsafe impl ::core::marker::Sync for CompositionRoundedRectangleGeometry {}
#[doc = "*Required features: `\"UI_Composition\"`*"]
#[repr(transparent)]
pub struct CompositionScopedBatch(::windows::core::IUnknown);
impl CompositionScopedBatch {
    pub fn PopulatePropertyInfo(
        &self,
        propertyname: &::windows::core::HSTRING,
        propertyinfo: &AnimationPropertyInfo,
    ) -> ::windows::core::Result<()> {
        let this = &::windows::core::Interface::cast::<IAnimationObject>(self)?;
        unsafe {
            (::windows::core::Vtable::vtable(this).PopulatePropertyInfo)(
                ::windows::core::Vtable::as_raw(this),
                ::core::mem::transmute_copy(propertyname),
                ::core::mem::transmute_copy(propertyinfo),
            )
            .ok()
        }
    }
    pub fn Close(&self) -> ::windows::core::Result<()> {
        let this = &::windows::core::Interface::cast::<::windows::Foundation::IClosable>(self)?;
        unsafe {
            (::windows::core::Vtable::vtable(this).Close)(::windows::core::Vtable::as_raw(this))
                .ok()
        }
    }
    pub fn Compositor(&self) -> ::windows::core::Result<Compositor> {
        let this = &::windows::core::Interface::cast::<ICompositionObject>(self)?;
        unsafe {
            let mut result__ = ::core::mem::MaybeUninit::zeroed();
            (::windows::core::Vtable::vtable(this).Compositor)(
                ::windows::core::Vtable::as_raw(this),
                result__.as_mut_ptr(),
            )
            .from_abi::<Compositor>(result__)
        }
    }
    pub fn Properties(&self) -> ::windows::core::Result<CompositionPropertySet> {
        let this = &::windows::core::Interface::cast::<ICompositionObject>(self)?;
        unsafe {
            let mut result__ = ::core::mem::MaybeUninit::zeroed();
            (::windows::core::Vtable::vtable(this).Properties)(
                ::windows::core::Vtable::as_raw(this),
                result__.as_mut_ptr(),
            )
            .from_abi::<CompositionPropertySet>(result__)
        }
    }
    pub fn StartAnimation<'a, P0>(
        &self,
        propertyname: &::windows::core::HSTRING,
        animation: P0,
    ) -> ::windows::core::Result<()>
    where
        P0: ::std::convert::Into<::windows::core::InParam<'a, CompositionAnimation>>,
    {
        let this = &::windows::core::Interface::cast::<ICompositionObject>(self)?;
        unsafe {
            (::windows::core::Vtable::vtable(this).StartAnimation)(
                ::windows::core::Vtable::as_raw(this),
                ::core::mem::transmute_copy(propertyname),
                animation.into().abi(),
            )
            .ok()
        }
    }
    pub fn StopAnimation(
        &self,
        propertyname: &::windows::core::HSTRING,
    ) -> ::windows::core::Result<()> {
        let this = &::windows::core::Interface::cast::<ICompositionObject>(self)?;
        unsafe {
            (::windows::core::Vtable::vtable(this).StopAnimation)(
                ::windows::core::Vtable::as_raw(this),
                ::core::mem::transmute_copy(propertyname),
            )
            .ok()
        }
    }
    pub fn Comment(&self) -> ::windows::core::Result<::windows::core::HSTRING> {
        let this = &::windows::core::Interface::cast::<ICompositionObject2>(self)?;
        unsafe {
            let mut result__ = ::core::mem::MaybeUninit::zeroed();
            (::windows::core::Vtable::vtable(this).Comment)(
                ::windows::core::Vtable::as_raw(this),
                result__.as_mut_ptr(),
            )
            .from_abi::<::windows::core::HSTRING>(result__)
        }
    }
    pub fn SetComment(&self, value: &::windows::core::HSTRING) -> ::windows::core::Result<()> {
        let this = &::windows::core::Interface::cast::<ICompositionObject2>(self)?;
        unsafe {
            (::windows::core::Vtable::vtable(this).SetComment)(
                ::windows::core::Vtable::as_raw(this),
                ::core::mem::transmute_copy(value),
            )
            .ok()
        }
    }
    pub fn ImplicitAnimations(&self) -> ::windows::core::Result<ImplicitAnimationCollection> {
        let this = &::windows::core::Interface::cast::<ICompositionObject2>(self)?;
        unsafe {
            let mut result__ = ::core::mem::MaybeUninit::zeroed();
            (::windows::core::Vtable::vtable(this).ImplicitAnimations)(
                ::windows::core::Vtable::as_raw(this),
                result__.as_mut_ptr(),
            )
            .from_abi::<ImplicitAnimationCollection>(result__)
        }
    }
    pub fn SetImplicitAnimations(
        &self,
        value: &ImplicitAnimationCollection,
    ) -> ::windows::core::Result<()> {
        let this = &::windows::core::Interface::cast::<ICompositionObject2>(self)?;
        unsafe {
            (::windows::core::Vtable::vtable(this).SetImplicitAnimations)(
                ::windows::core::Vtable::as_raw(this),
                ::core::mem::transmute_copy(value),
            )
            .ok()
        }
    }
    pub fn StartAnimationGroup<'a, P0, E0>(&self, value: P0) -> ::windows::core::Result<()>
    where
        P0: ::std::convert::TryInto<
            ::windows::core::InParam<'a, ICompositionAnimationBase>,
            Error = E0,
        >,
        E0: ::std::convert::Into<::windows::core::Error>,
    {
        let this = &::windows::core::Interface::cast::<ICompositionObject2>(self)?;
        unsafe {
            (::windows::core::Vtable::vtable(this).StartAnimationGroup)(
                ::windows::core::Vtable::as_raw(this),
                value.try_into().map_err(|e| e.into())?.abi(),
            )
            .ok()
        }
    }
    pub fn StopAnimationGroup<'a, P0, E0>(&self, value: P0) -> ::windows::core::Result<()>
    where
        P0: ::std::convert::TryInto<
            ::windows::core::InParam<'a, ICompositionAnimationBase>,
            Error = E0,
        >,
        E0: ::std::convert::Into<::windows::core::Error>,
    {
        let this = &::windows::core::Interface::cast::<ICompositionObject2>(self)?;
        unsafe {
            (::windows::core::Vtable::vtable(this).StopAnimationGroup)(
                ::windows::core::Vtable::as_raw(this),
                value.try_into().map_err(|e| e.into())?.abi(),
            )
            .ok()
        }
    }
    #[doc = "*Required features: `\"UI_Dispatching\"`*"]
    #[cfg(feature = "UI_Dispatching")]
    pub fn DispatcherQueue(&self) -> ::windows::core::Result<super::Dispatching::DispatcherQueue> {
        let this = &::windows::core::Interface::cast::<ICompositionObject3>(self)?;
        unsafe {
            let mut result__ = ::core::mem::MaybeUninit::zeroed();
            (::windows::core::Vtable::vtable(this).DispatcherQueue)(
                ::windows::core::Vtable::as_raw(this),
                result__.as_mut_ptr(),
            )
            .from_abi::<super::Dispatching::DispatcherQueue>(result__)
        }
    }
    pub fn TryGetAnimationController(
        &self,
        propertyname: &::windows::core::HSTRING,
    ) -> ::windows::core::Result<AnimationController> {
        let this = &::windows::core::Interface::cast::<ICompositionObject4>(self)?;
        unsafe {
            let mut result__ = ::core::mem::MaybeUninit::zeroed();
            (::windows::core::Vtable::vtable(this).TryGetAnimationController)(
                ::windows::core::Vtable::as_raw(this),
                ::core::mem::transmute_copy(propertyname),
                result__.as_mut_ptr(),
            )
            .from_abi::<AnimationController>(result__)
        }
    }
    pub fn StartAnimationWithController<'a, P0>(
        &self,
        propertyname: &::windows::core::HSTRING,
        animation: P0,
        animationcontroller: &AnimationController,
    ) -> ::windows::core::Result<()>
    where
        P0: ::std::convert::Into<::windows::core::InParam<'a, CompositionAnimation>>,
    {
        let this = &::windows::core::Interface::cast::<ICompositionObject5>(self)?;
        unsafe {
            (::windows::core::Vtable::vtable(this).StartAnimationWithController)(
                ::windows::core::Vtable::as_raw(this),
                ::core::mem::transmute_copy(propertyname),
                animation.into().abi(),
                ::core::mem::transmute_copy(animationcontroller),
            )
            .ok()
        }
    }
    pub fn IsActive(&self) -> ::windows::core::Result<bool> {
        let this = self;
        unsafe {
            let mut result__ = ::core::mem::MaybeUninit::zeroed();
            (::windows::core::Vtable::vtable(this).IsActive)(
                ::windows::core::Vtable::as_raw(this),
                result__.as_mut_ptr(),
            )
            .from_abi::<bool>(result__)
        }
    }
    pub fn IsEnded(&self) -> ::windows::core::Result<bool> {
        let this = self;
        unsafe {
            let mut result__ = ::core::mem::MaybeUninit::zeroed();
            (::windows::core::Vtable::vtable(this).IsEnded)(
                ::windows::core::Vtable::as_raw(this),
                result__.as_mut_ptr(),
            )
            .from_abi::<bool>(result__)
        }
    }
    pub fn End(&self) -> ::windows::core::Result<()> {
        let this = self;
        unsafe {
            (::windows::core::Vtable::vtable(this).End)(::windows::core::Vtable::as_raw(this)).ok()
        }
    }
    pub fn Resume(&self) -> ::windows::core::Result<()> {
        let this = self;
        unsafe {
            (::windows::core::Vtable::vtable(this).Resume)(::windows::core::Vtable::as_raw(this))
                .ok()
        }
    }
    pub fn Suspend(&self) -> ::windows::core::Result<()> {
        let this = self;
        unsafe {
            (::windows::core::Vtable::vtable(this).Suspend)(::windows::core::Vtable::as_raw(this))
                .ok()
        }
    }
    pub fn Completed(
        &self,
        handler: &::windows::Foundation::TypedEventHandler<
            ::windows::core::IInspectable,
            CompositionBatchCompletedEventArgs,
        >,
    ) -> ::windows::core::Result<::windows::Foundation::EventRegistrationToken> {
        let this = self;
        unsafe {
            let mut result__ = ::core::mem::MaybeUninit::zeroed();
            (::windows::core::Vtable::vtable(this).Completed)(
                ::windows::core::Vtable::as_raw(this),
                ::core::mem::transmute_copy(handler),
                result__.as_mut_ptr(),
            )
            .from_abi::<::windows::Foundation::EventRegistrationToken>(result__)
        }
    }
    pub fn RemoveCompleted(
        &self,
        token: ::windows::Foundation::EventRegistrationToken,
    ) -> ::windows::core::Result<()> {
        let this = self;
        unsafe {
            (::windows::core::Vtable::vtable(this).RemoveCompleted)(
                ::windows::core::Vtable::as_raw(this),
                token,
            )
            .ok()
        }
    }
}
impl ::core::clone::Clone for CompositionScopedBatch {
    fn clone(&self) -> Self {
        Self(self.0.clone())
    }
}
impl ::core::cmp::PartialEq for CompositionScopedBatch {
    fn eq(&self, other: &Self) -> bool {
        self.0 == other.0
    }
}
impl ::core::cmp::Eq for CompositionScopedBatch {}
impl ::core::fmt::Debug for CompositionScopedBatch {
    fn fmt(&self, f: &mut ::core::fmt::Formatter<'_>) -> ::core::fmt::Result {
        f.debug_tuple("CompositionScopedBatch").field(&self.0).finish()
    }
}
unsafe impl ::windows::core::RuntimeType for CompositionScopedBatch {
    const SIGNATURE : ::windows::core::ConstBuffer = ::windows::core::ConstBuffer::from_slice ( b"rc(Microsoft.UI.Composition.CompositionScopedBatch;{d31ca572-99ce-5969-b042-6c2d330a3859})" ) ;
    type DefaultType = ::core::option::Option<Self>;
    fn from_default(from: &Self::DefaultType) -> ::windows::core::Result<Self> {
        from.as_ref().cloned().ok_or(::windows::core::Error::OK)
    }
}
unsafe impl ::windows::core::Vtable for CompositionScopedBatch {
    type Vtable = ICompositionScopedBatch_Vtbl;
}
unsafe impl ::windows::core::Interface for CompositionScopedBatch {
    const IID: ::windows::core::GUID = <ICompositionScopedBatch as ::windows::core::Interface>::IID;
}
impl ::windows::core::RuntimeName for CompositionScopedBatch {
    const NAME: &'static str = "Microsoft.UI.Composition.CompositionScopedBatch";
}
::windows::core::interface_hierarchy!(
    CompositionScopedBatch,
    ::windows::core::IUnknown,
    ::windows::core::IInspectable
);
impl ::core::convert::TryFrom<CompositionScopedBatch> for IAnimationObject {
    type Error = ::windows::core::Error;
    fn try_from(value: CompositionScopedBatch) -> ::windows::core::Result<Self> {
        ::core::convert::TryFrom::try_from(&value)
    }
}
impl ::core::convert::TryFrom<&CompositionScopedBatch> for IAnimationObject {
    type Error = ::windows::core::Error;
    fn try_from(value: &CompositionScopedBatch) -> ::windows::core::Result<Self> {
        ::windows::core::Interface::cast(value)
    }
}
impl<'a> ::core::convert::TryFrom<&CompositionScopedBatch>
    for ::windows::core::InParam<'a, IAnimationObject>
{
    type Error = ::windows::core::Error;
    fn try_from(value: &CompositionScopedBatch) -> ::windows::core::Result<Self> {
        let item = ::std::convert::TryInto::try_into(value)?;
        Ok(::windows::core::InParam::owned(item))
    }
}
impl ::core::convert::TryFrom<CompositionScopedBatch> for ::windows::Foundation::IClosable {
    type Error = ::windows::core::Error;
    fn try_from(value: CompositionScopedBatch) -> ::windows::core::Result<Self> {
        ::core::convert::TryFrom::try_from(&value)
    }
}
impl ::core::convert::TryFrom<&CompositionScopedBatch> for ::windows::Foundation::IClosable {
    type Error = ::windows::core::Error;
    fn try_from(value: &CompositionScopedBatch) -> ::windows::core::Result<Self> {
        ::windows::core::Interface::cast(value)
    }
}
impl<'a> ::core::convert::TryFrom<&CompositionScopedBatch>
    for ::windows::core::InParam<'a, ::windows::Foundation::IClosable>
{
    type Error = ::windows::core::Error;
    fn try_from(value: &CompositionScopedBatch) -> ::windows::core::Result<Self> {
        let item = ::std::convert::TryInto::try_into(value)?;
        Ok(::windows::core::InParam::owned(item))
    }
}
impl ::core::convert::From<CompositionScopedBatch> for CompositionObject {
    fn from(value: CompositionScopedBatch) -> Self {
        ::core::convert::From::from(&value)
    }
}
impl ::core::convert::From<&CompositionScopedBatch> for CompositionObject {
    fn from(value: &CompositionScopedBatch) -> Self {
        ::windows::core::Interface::cast(value).unwrap()
    }
}
impl<'a> ::core::convert::From<&CompositionScopedBatch>
    for ::windows::core::InParam<'a, CompositionObject>
{
    fn from(value: &CompositionScopedBatch) -> Self {
        ::windows::core::InParam::owned(value.into())
    }
}
unsafe impl ::core::marker::Send for CompositionScopedBatch {}
unsafe impl ::core::marker::Sync for CompositionScopedBatch {}
#[doc = "*Required features: `\"UI_Composition\"`*"]
#[repr(transparent)]
pub struct CompositionShadow(::windows::core::IUnknown);
impl CompositionShadow {
    pub fn PopulatePropertyInfo(
        &self,
        propertyname: &::windows::core::HSTRING,
        propertyinfo: &AnimationPropertyInfo,
    ) -> ::windows::core::Result<()> {
        let this = &::windows::core::Interface::cast::<IAnimationObject>(self)?;
        unsafe {
            (::windows::core::Vtable::vtable(this).PopulatePropertyInfo)(
                ::windows::core::Vtable::as_raw(this),
                ::core::mem::transmute_copy(propertyname),
                ::core::mem::transmute_copy(propertyinfo),
            )
            .ok()
        }
    }
    pub fn Close(&self) -> ::windows::core::Result<()> {
        let this = &::windows::core::Interface::cast::<::windows::Foundation::IClosable>(self)?;
        unsafe {
            (::windows::core::Vtable::vtable(this).Close)(::windows::core::Vtable::as_raw(this))
                .ok()
        }
    }
    pub fn Compositor(&self) -> ::windows::core::Result<Compositor> {
        let this = &::windows::core::Interface::cast::<ICompositionObject>(self)?;
        unsafe {
            let mut result__ = ::core::mem::MaybeUninit::zeroed();
            (::windows::core::Vtable::vtable(this).Compositor)(
                ::windows::core::Vtable::as_raw(this),
                result__.as_mut_ptr(),
            )
            .from_abi::<Compositor>(result__)
        }
    }
    pub fn Properties(&self) -> ::windows::core::Result<CompositionPropertySet> {
        let this = &::windows::core::Interface::cast::<ICompositionObject>(self)?;
        unsafe {
            let mut result__ = ::core::mem::MaybeUninit::zeroed();
            (::windows::core::Vtable::vtable(this).Properties)(
                ::windows::core::Vtable::as_raw(this),
                result__.as_mut_ptr(),
            )
            .from_abi::<CompositionPropertySet>(result__)
        }
    }
    pub fn StartAnimation<'a, P0>(
        &self,
        propertyname: &::windows::core::HSTRING,
        animation: P0,
    ) -> ::windows::core::Result<()>
    where
        P0: ::std::convert::Into<::windows::core::InParam<'a, CompositionAnimation>>,
    {
        let this = &::windows::core::Interface::cast::<ICompositionObject>(self)?;
        unsafe {
            (::windows::core::Vtable::vtable(this).StartAnimation)(
                ::windows::core::Vtable::as_raw(this),
                ::core::mem::transmute_copy(propertyname),
                animation.into().abi(),
            )
            .ok()
        }
    }
    pub fn StopAnimation(
        &self,
        propertyname: &::windows::core::HSTRING,
    ) -> ::windows::core::Result<()> {
        let this = &::windows::core::Interface::cast::<ICompositionObject>(self)?;
        unsafe {
            (::windows::core::Vtable::vtable(this).StopAnimation)(
                ::windows::core::Vtable::as_raw(this),
                ::core::mem::transmute_copy(propertyname),
            )
            .ok()
        }
    }
    pub fn Comment(&self) -> ::windows::core::Result<::windows::core::HSTRING> {
        let this = &::windows::core::Interface::cast::<ICompositionObject2>(self)?;
        unsafe {
            let mut result__ = ::core::mem::MaybeUninit::zeroed();
            (::windows::core::Vtable::vtable(this).Comment)(
                ::windows::core::Vtable::as_raw(this),
                result__.as_mut_ptr(),
            )
            .from_abi::<::windows::core::HSTRING>(result__)
        }
    }
    pub fn SetComment(&self, value: &::windows::core::HSTRING) -> ::windows::core::Result<()> {
        let this = &::windows::core::Interface::cast::<ICompositionObject2>(self)?;
        unsafe {
            (::windows::core::Vtable::vtable(this).SetComment)(
                ::windows::core::Vtable::as_raw(this),
                ::core::mem::transmute_copy(value),
            )
            .ok()
        }
    }
    pub fn ImplicitAnimations(&self) -> ::windows::core::Result<ImplicitAnimationCollection> {
        let this = &::windows::core::Interface::cast::<ICompositionObject2>(self)?;
        unsafe {
            let mut result__ = ::core::mem::MaybeUninit::zeroed();
            (::windows::core::Vtable::vtable(this).ImplicitAnimations)(
                ::windows::core::Vtable::as_raw(this),
                result__.as_mut_ptr(),
            )
            .from_abi::<ImplicitAnimationCollection>(result__)
        }
    }
    pub fn SetImplicitAnimations(
        &self,
        value: &ImplicitAnimationCollection,
    ) -> ::windows::core::Result<()> {
        let this = &::windows::core::Interface::cast::<ICompositionObject2>(self)?;
        unsafe {
            (::windows::core::Vtable::vtable(this).SetImplicitAnimations)(
                ::windows::core::Vtable::as_raw(this),
                ::core::mem::transmute_copy(value),
            )
            .ok()
        }
    }
    pub fn StartAnimationGroup<'a, P0, E0>(&self, value: P0) -> ::windows::core::Result<()>
    where
        P0: ::std::convert::TryInto<
            ::windows::core::InParam<'a, ICompositionAnimationBase>,
            Error = E0,
        >,
        E0: ::std::convert::Into<::windows::core::Error>,
    {
        let this = &::windows::core::Interface::cast::<ICompositionObject2>(self)?;
        unsafe {
            (::windows::core::Vtable::vtable(this).StartAnimationGroup)(
                ::windows::core::Vtable::as_raw(this),
                value.try_into().map_err(|e| e.into())?.abi(),
            )
            .ok()
        }
    }
    pub fn StopAnimationGroup<'a, P0, E0>(&self, value: P0) -> ::windows::core::Result<()>
    where
        P0: ::std::convert::TryInto<
            ::windows::core::InParam<'a, ICompositionAnimationBase>,
            Error = E0,
        >,
        E0: ::std::convert::Into<::windows::core::Error>,
    {
        let this = &::windows::core::Interface::cast::<ICompositionObject2>(self)?;
        unsafe {
            (::windows::core::Vtable::vtable(this).StopAnimationGroup)(
                ::windows::core::Vtable::as_raw(this),
                value.try_into().map_err(|e| e.into())?.abi(),
            )
            .ok()
        }
    }
    #[doc = "*Required features: `\"UI_Dispatching\"`*"]
    #[cfg(feature = "UI_Dispatching")]
    pub fn DispatcherQueue(&self) -> ::windows::core::Result<super::Dispatching::DispatcherQueue> {
        let this = &::windows::core::Interface::cast::<ICompositionObject3>(self)?;
        unsafe {
            let mut result__ = ::core::mem::MaybeUninit::zeroed();
            (::windows::core::Vtable::vtable(this).DispatcherQueue)(
                ::windows::core::Vtable::as_raw(this),
                result__.as_mut_ptr(),
            )
            .from_abi::<super::Dispatching::DispatcherQueue>(result__)
        }
    }
    pub fn TryGetAnimationController(
        &self,
        propertyname: &::windows::core::HSTRING,
    ) -> ::windows::core::Result<AnimationController> {
        let this = &::windows::core::Interface::cast::<ICompositionObject4>(self)?;
        unsafe {
            let mut result__ = ::core::mem::MaybeUninit::zeroed();
            (::windows::core::Vtable::vtable(this).TryGetAnimationController)(
                ::windows::core::Vtable::as_raw(this),
                ::core::mem::transmute_copy(propertyname),
                result__.as_mut_ptr(),
            )
            .from_abi::<AnimationController>(result__)
        }
    }
    pub fn StartAnimationWithController<'a, P0>(
        &self,
        propertyname: &::windows::core::HSTRING,
        animation: P0,
        animationcontroller: &AnimationController,
    ) -> ::windows::core::Result<()>
    where
        P0: ::std::convert::Into<::windows::core::InParam<'a, CompositionAnimation>>,
    {
        let this = &::windows::core::Interface::cast::<ICompositionObject5>(self)?;
        unsafe {
            (::windows::core::Vtable::vtable(this).StartAnimationWithController)(
                ::windows::core::Vtable::as_raw(this),
                ::core::mem::transmute_copy(propertyname),
                animation.into().abi(),
                ::core::mem::transmute_copy(animationcontroller),
            )
            .ok()
        }
    }
}
impl ::core::clone::Clone for CompositionShadow {
    fn clone(&self) -> Self {
        Self(self.0.clone())
    }
}
impl ::core::cmp::PartialEq for CompositionShadow {
    fn eq(&self, other: &Self) -> bool {
        self.0 == other.0
    }
}
impl ::core::cmp::Eq for CompositionShadow {}
impl ::core::fmt::Debug for CompositionShadow {
    fn fmt(&self, f: &mut ::core::fmt::Formatter<'_>) -> ::core::fmt::Result {
        f.debug_tuple("CompositionShadow").field(&self.0).finish()
    }
}
unsafe impl ::windows::core::RuntimeType for CompositionShadow {
    const SIGNATURE: ::windows::core::ConstBuffer = ::windows::core::ConstBuffer::from_slice(
        b"rc(Microsoft.UI.Composition.CompositionShadow;{176b8bb5-4dae-59b2-b9a0-2499b243267c})",
    );
    type DefaultType = ::core::option::Option<Self>;
    fn from_default(from: &Self::DefaultType) -> ::windows::core::Result<Self> {
        from.as_ref().cloned().ok_or(::windows::core::Error::OK)
    }
}
unsafe impl ::windows::core::Vtable for CompositionShadow {
    type Vtable = ICompositionShadow_Vtbl;
}
unsafe impl ::windows::core::Interface for CompositionShadow {
    const IID: ::windows::core::GUID = <ICompositionShadow as ::windows::core::Interface>::IID;
}
impl ::windows::core::RuntimeName for CompositionShadow {
    const NAME: &'static str = "Microsoft.UI.Composition.CompositionShadow";
}
::windows::core::interface_hierarchy!(
    CompositionShadow,
    ::windows::core::IUnknown,
    ::windows::core::IInspectable
);
impl ::core::convert::TryFrom<CompositionShadow> for IAnimationObject {
    type Error = ::windows::core::Error;
    fn try_from(value: CompositionShadow) -> ::windows::core::Result<Self> {
        ::core::convert::TryFrom::try_from(&value)
    }
}
impl ::core::convert::TryFrom<&CompositionShadow> for IAnimationObject {
    type Error = ::windows::core::Error;
    fn try_from(value: &CompositionShadow) -> ::windows::core::Result<Self> {
        ::windows::core::Interface::cast(value)
    }
}
impl<'a> ::core::convert::TryFrom<&CompositionShadow>
    for ::windows::core::InParam<'a, IAnimationObject>
{
    type Error = ::windows::core::Error;
    fn try_from(value: &CompositionShadow) -> ::windows::core::Result<Self> {
        let item = ::std::convert::TryInto::try_into(value)?;
        Ok(::windows::core::InParam::owned(item))
    }
}
impl ::core::convert::TryFrom<CompositionShadow> for ::windows::Foundation::IClosable {
    type Error = ::windows::core::Error;
    fn try_from(value: CompositionShadow) -> ::windows::core::Result<Self> {
        ::core::convert::TryFrom::try_from(&value)
    }
}
impl ::core::convert::TryFrom<&CompositionShadow> for ::windows::Foundation::IClosable {
    type Error = ::windows::core::Error;
    fn try_from(value: &CompositionShadow) -> ::windows::core::Result<Self> {
        ::windows::core::Interface::cast(value)
    }
}
impl<'a> ::core::convert::TryFrom<&CompositionShadow>
    for ::windows::core::InParam<'a, ::windows::Foundation::IClosable>
{
    type Error = ::windows::core::Error;
    fn try_from(value: &CompositionShadow) -> ::windows::core::Result<Self> {
        let item = ::std::convert::TryInto::try_into(value)?;
        Ok(::windows::core::InParam::owned(item))
    }
}
impl ::core::convert::From<CompositionShadow> for CompositionObject {
    fn from(value: CompositionShadow) -> Self {
        ::core::convert::From::from(&value)
    }
}
impl ::core::convert::From<&CompositionShadow> for CompositionObject {
    fn from(value: &CompositionShadow) -> Self {
        ::windows::core::Interface::cast(value).unwrap()
    }
}
impl<'a> ::core::convert::From<&CompositionShadow>
    for ::windows::core::InParam<'a, CompositionObject>
{
    fn from(value: &CompositionShadow) -> Self {
        ::windows::core::InParam::owned(value.into())
    }
}
unsafe impl ::core::marker::Send for CompositionShadow {}
unsafe impl ::core::marker::Sync for CompositionShadow {}
#[doc = "*Required features: `\"UI_Composition\"`*"]
#[repr(transparent)]
pub struct CompositionShape(::windows::core::IUnknown);
impl CompositionShape {
    pub fn PopulatePropertyInfo(
        &self,
        propertyname: &::windows::core::HSTRING,
        propertyinfo: &AnimationPropertyInfo,
    ) -> ::windows::core::Result<()> {
        let this = &::windows::core::Interface::cast::<IAnimationObject>(self)?;
        unsafe {
            (::windows::core::Vtable::vtable(this).PopulatePropertyInfo)(
                ::windows::core::Vtable::as_raw(this),
                ::core::mem::transmute_copy(propertyname),
                ::core::mem::transmute_copy(propertyinfo),
            )
            .ok()
        }
    }
    pub fn Close(&self) -> ::windows::core::Result<()> {
        let this = &::windows::core::Interface::cast::<::windows::Foundation::IClosable>(self)?;
        unsafe {
            (::windows::core::Vtable::vtable(this).Close)(::windows::core::Vtable::as_raw(this))
                .ok()
        }
    }
    pub fn Compositor(&self) -> ::windows::core::Result<Compositor> {
        let this = &::windows::core::Interface::cast::<ICompositionObject>(self)?;
        unsafe {
            let mut result__ = ::core::mem::MaybeUninit::zeroed();
            (::windows::core::Vtable::vtable(this).Compositor)(
                ::windows::core::Vtable::as_raw(this),
                result__.as_mut_ptr(),
            )
            .from_abi::<Compositor>(result__)
        }
    }
    pub fn Properties(&self) -> ::windows::core::Result<CompositionPropertySet> {
        let this = &::windows::core::Interface::cast::<ICompositionObject>(self)?;
        unsafe {
            let mut result__ = ::core::mem::MaybeUninit::zeroed();
            (::windows::core::Vtable::vtable(this).Properties)(
                ::windows::core::Vtable::as_raw(this),
                result__.as_mut_ptr(),
            )
            .from_abi::<CompositionPropertySet>(result__)
        }
    }
    pub fn StartAnimation<'a, P0>(
        &self,
        propertyname: &::windows::core::HSTRING,
        animation: P0,
    ) -> ::windows::core::Result<()>
    where
        P0: ::std::convert::Into<::windows::core::InParam<'a, CompositionAnimation>>,
    {
        let this = &::windows::core::Interface::cast::<ICompositionObject>(self)?;
        unsafe {
            (::windows::core::Vtable::vtable(this).StartAnimation)(
                ::windows::core::Vtable::as_raw(this),
                ::core::mem::transmute_copy(propertyname),
                animation.into().abi(),
            )
            .ok()
        }
    }
    pub fn StopAnimation(
        &self,
        propertyname: &::windows::core::HSTRING,
    ) -> ::windows::core::Result<()> {
        let this = &::windows::core::Interface::cast::<ICompositionObject>(self)?;
        unsafe {
            (::windows::core::Vtable::vtable(this).StopAnimation)(
                ::windows::core::Vtable::as_raw(this),
                ::core::mem::transmute_copy(propertyname),
            )
            .ok()
        }
    }
    pub fn Comment(&self) -> ::windows::core::Result<::windows::core::HSTRING> {
        let this = &::windows::core::Interface::cast::<ICompositionObject2>(self)?;
        unsafe {
            let mut result__ = ::core::mem::MaybeUninit::zeroed();
            (::windows::core::Vtable::vtable(this).Comment)(
                ::windows::core::Vtable::as_raw(this),
                result__.as_mut_ptr(),
            )
            .from_abi::<::windows::core::HSTRING>(result__)
        }
    }
    pub fn SetComment(&self, value: &::windows::core::HSTRING) -> ::windows::core::Result<()> {
        let this = &::windows::core::Interface::cast::<ICompositionObject2>(self)?;
        unsafe {
            (::windows::core::Vtable::vtable(this).SetComment)(
                ::windows::core::Vtable::as_raw(this),
                ::core::mem::transmute_copy(value),
            )
            .ok()
        }
    }
    pub fn ImplicitAnimations(&self) -> ::windows::core::Result<ImplicitAnimationCollection> {
        let this = &::windows::core::Interface::cast::<ICompositionObject2>(self)?;
        unsafe {
            let mut result__ = ::core::mem::MaybeUninit::zeroed();
            (::windows::core::Vtable::vtable(this).ImplicitAnimations)(
                ::windows::core::Vtable::as_raw(this),
                result__.as_mut_ptr(),
            )
            .from_abi::<ImplicitAnimationCollection>(result__)
        }
    }
    pub fn SetImplicitAnimations(
        &self,
        value: &ImplicitAnimationCollection,
    ) -> ::windows::core::Result<()> {
        let this = &::windows::core::Interface::cast::<ICompositionObject2>(self)?;
        unsafe {
            (::windows::core::Vtable::vtable(this).SetImplicitAnimations)(
                ::windows::core::Vtable::as_raw(this),
                ::core::mem::transmute_copy(value),
            )
            .ok()
        }
    }
    pub fn StartAnimationGroup<'a, P0, E0>(&self, value: P0) -> ::windows::core::Result<()>
    where
        P0: ::std::convert::TryInto<
            ::windows::core::InParam<'a, ICompositionAnimationBase>,
            Error = E0,
        >,
        E0: ::std::convert::Into<::windows::core::Error>,
    {
        let this = &::windows::core::Interface::cast::<ICompositionObject2>(self)?;
        unsafe {
            (::windows::core::Vtable::vtable(this).StartAnimationGroup)(
                ::windows::core::Vtable::as_raw(this),
                value.try_into().map_err(|e| e.into())?.abi(),
            )
            .ok()
        }
    }
    pub fn StopAnimationGroup<'a, P0, E0>(&self, value: P0) -> ::windows::core::Result<()>
    where
        P0: ::std::convert::TryInto<
            ::windows::core::InParam<'a, ICompositionAnimationBase>,
            Error = E0,
        >,
        E0: ::std::convert::Into<::windows::core::Error>,
    {
        let this = &::windows::core::Interface::cast::<ICompositionObject2>(self)?;
        unsafe {
            (::windows::core::Vtable::vtable(this).StopAnimationGroup)(
                ::windows::core::Vtable::as_raw(this),
                value.try_into().map_err(|e| e.into())?.abi(),
            )
            .ok()
        }
    }
    #[doc = "*Required features: `\"UI_Dispatching\"`*"]
    #[cfg(feature = "UI_Dispatching")]
    pub fn DispatcherQueue(&self) -> ::windows::core::Result<super::Dispatching::DispatcherQueue> {
        let this = &::windows::core::Interface::cast::<ICompositionObject3>(self)?;
        unsafe {
            let mut result__ = ::core::mem::MaybeUninit::zeroed();
            (::windows::core::Vtable::vtable(this).DispatcherQueue)(
                ::windows::core::Vtable::as_raw(this),
                result__.as_mut_ptr(),
            )
            .from_abi::<super::Dispatching::DispatcherQueue>(result__)
        }
    }
    pub fn TryGetAnimationController(
        &self,
        propertyname: &::windows::core::HSTRING,
    ) -> ::windows::core::Result<AnimationController> {
        let this = &::windows::core::Interface::cast::<ICompositionObject4>(self)?;
        unsafe {
            let mut result__ = ::core::mem::MaybeUninit::zeroed();
            (::windows::core::Vtable::vtable(this).TryGetAnimationController)(
                ::windows::core::Vtable::as_raw(this),
                ::core::mem::transmute_copy(propertyname),
                result__.as_mut_ptr(),
            )
            .from_abi::<AnimationController>(result__)
        }
    }
    pub fn StartAnimationWithController<'a, P0>(
        &self,
        propertyname: &::windows::core::HSTRING,
        animation: P0,
        animationcontroller: &AnimationController,
    ) -> ::windows::core::Result<()>
    where
        P0: ::std::convert::Into<::windows::core::InParam<'a, CompositionAnimation>>,
    {
        let this = &::windows::core::Interface::cast::<ICompositionObject5>(self)?;
        unsafe {
            (::windows::core::Vtable::vtable(this).StartAnimationWithController)(
                ::windows::core::Vtable::as_raw(this),
                ::core::mem::transmute_copy(propertyname),
                animation.into().abi(),
                ::core::mem::transmute_copy(animationcontroller),
            )
            .ok()
        }
    }
    pub fn CenterPoint(&self) -> ::windows::core::Result<::windows::Foundation::Numerics::Vector2> {
        let this = self;
        unsafe {
            let mut result__ = ::core::mem::MaybeUninit::zeroed();
            (::windows::core::Vtable::vtable(this).CenterPoint)(
                ::windows::core::Vtable::as_raw(this),
                result__.as_mut_ptr(),
            )
            .from_abi::<::windows::Foundation::Numerics::Vector2>(result__)
        }
    }
    pub fn SetCenterPoint(
        &self,
        value: ::windows::Foundation::Numerics::Vector2,
    ) -> ::windows::core::Result<()> {
        let this = self;
        unsafe {
            (::windows::core::Vtable::vtable(this).SetCenterPoint)(
                ::windows::core::Vtable::as_raw(this),
                value,
            )
            .ok()
        }
    }
    pub fn Offset(&self) -> ::windows::core::Result<::windows::Foundation::Numerics::Vector2> {
        let this = self;
        unsafe {
            let mut result__ = ::core::mem::MaybeUninit::zeroed();
            (::windows::core::Vtable::vtable(this).Offset)(
                ::windows::core::Vtable::as_raw(this),
                result__.as_mut_ptr(),
            )
            .from_abi::<::windows::Foundation::Numerics::Vector2>(result__)
        }
    }
    pub fn SetOffset(
        &self,
        value: ::windows::Foundation::Numerics::Vector2,
    ) -> ::windows::core::Result<()> {
        let this = self;
        unsafe {
            (::windows::core::Vtable::vtable(this).SetOffset)(
                ::windows::core::Vtable::as_raw(this),
                value,
            )
            .ok()
        }
    }
    pub fn RotationAngle(&self) -> ::windows::core::Result<f32> {
        let this = self;
        unsafe {
            let mut result__ = ::core::mem::MaybeUninit::zeroed();
            (::windows::core::Vtable::vtable(this).RotationAngle)(
                ::windows::core::Vtable::as_raw(this),
                result__.as_mut_ptr(),
            )
            .from_abi::<f32>(result__)
        }
    }
    pub fn SetRotationAngle(&self, value: f32) -> ::windows::core::Result<()> {
        let this = self;
        unsafe {
            (::windows::core::Vtable::vtable(this).SetRotationAngle)(
                ::windows::core::Vtable::as_raw(this),
                value,
            )
            .ok()
        }
    }
    pub fn RotationAngleInDegrees(&self) -> ::windows::core::Result<f32> {
        let this = self;
        unsafe {
            let mut result__ = ::core::mem::MaybeUninit::zeroed();
            (::windows::core::Vtable::vtable(this).RotationAngleInDegrees)(
                ::windows::core::Vtable::as_raw(this),
                result__.as_mut_ptr(),
            )
            .from_abi::<f32>(result__)
        }
    }
    pub fn SetRotationAngleInDegrees(&self, value: f32) -> ::windows::core::Result<()> {
        let this = self;
        unsafe {
            (::windows::core::Vtable::vtable(this).SetRotationAngleInDegrees)(
                ::windows::core::Vtable::as_raw(this),
                value,
            )
            .ok()
        }
    }
    pub fn Scale(&self) -> ::windows::core::Result<::windows::Foundation::Numerics::Vector2> {
        let this = self;
        unsafe {
            let mut result__ = ::core::mem::MaybeUninit::zeroed();
            (::windows::core::Vtable::vtable(this).Scale)(
                ::windows::core::Vtable::as_raw(this),
                result__.as_mut_ptr(),
            )
            .from_abi::<::windows::Foundation::Numerics::Vector2>(result__)
        }
    }
    pub fn SetScale(
        &self,
        value: ::windows::Foundation::Numerics::Vector2,
    ) -> ::windows::core::Result<()> {
        let this = self;
        unsafe {
            (::windows::core::Vtable::vtable(this).SetScale)(
                ::windows::core::Vtable::as_raw(this),
                value,
            )
            .ok()
        }
    }
    pub fn TransformMatrix(
        &self,
    ) -> ::windows::core::Result<::windows::Foundation::Numerics::Matrix3x2> {
        let this = self;
        unsafe {
            let mut result__ = ::core::mem::MaybeUninit::zeroed();
            (::windows::core::Vtable::vtable(this).TransformMatrix)(
                ::windows::core::Vtable::as_raw(this),
                result__.as_mut_ptr(),
            )
            .from_abi::<::windows::Foundation::Numerics::Matrix3x2>(result__)
        }
    }
    pub fn SetTransformMatrix(
        &self,
        value: ::windows::Foundation::Numerics::Matrix3x2,
    ) -> ::windows::core::Result<()> {
        let this = self;
        unsafe {
            (::windows::core::Vtable::vtable(this).SetTransformMatrix)(
                ::windows::core::Vtable::as_raw(this),
                value,
            )
            .ok()
        }
    }
}
impl ::core::clone::Clone for CompositionShape {
    fn clone(&self) -> Self {
        Self(self.0.clone())
    }
}
impl ::core::cmp::PartialEq for CompositionShape {
    fn eq(&self, other: &Self) -> bool {
        self.0 == other.0
    }
}
impl ::core::cmp::Eq for CompositionShape {}
impl ::core::fmt::Debug for CompositionShape {
    fn fmt(&self, f: &mut ::core::fmt::Formatter<'_>) -> ::core::fmt::Result {
        f.debug_tuple("CompositionShape").field(&self.0).finish()
    }
}
unsafe impl ::windows::core::RuntimeType for CompositionShape {
    const SIGNATURE: ::windows::core::ConstBuffer = ::windows::core::ConstBuffer::from_slice(
        b"rc(Microsoft.UI.Composition.CompositionShape;{ed75d4d8-437f-5640-9720-faae35ce5895})",
    );
    type DefaultType = ::core::option::Option<Self>;
    fn from_default(from: &Self::DefaultType) -> ::windows::core::Result<Self> {
        from.as_ref().cloned().ok_or(::windows::core::Error::OK)
    }
}
unsafe impl ::windows::core::Vtable for CompositionShape {
    type Vtable = ICompositionShape_Vtbl;
}
unsafe impl ::windows::core::Interface for CompositionShape {
    const IID: ::windows::core::GUID = <ICompositionShape as ::windows::core::Interface>::IID;
}
impl ::windows::core::RuntimeName for CompositionShape {
    const NAME: &'static str = "Microsoft.UI.Composition.CompositionShape";
}
::windows::core::interface_hierarchy!(
    CompositionShape,
    ::windows::core::IUnknown,
    ::windows::core::IInspectable
);
impl ::core::convert::TryFrom<CompositionShape> for IAnimationObject {
    type Error = ::windows::core::Error;
    fn try_from(value: CompositionShape) -> ::windows::core::Result<Self> {
        ::core::convert::TryFrom::try_from(&value)
    }
}
impl ::core::convert::TryFrom<&CompositionShape> for IAnimationObject {
    type Error = ::windows::core::Error;
    fn try_from(value: &CompositionShape) -> ::windows::core::Result<Self> {
        ::windows::core::Interface::cast(value)
    }
}
impl<'a> ::core::convert::TryFrom<&CompositionShape>
    for ::windows::core::InParam<'a, IAnimationObject>
{
    type Error = ::windows::core::Error;
    fn try_from(value: &CompositionShape) -> ::windows::core::Result<Self> {
        let item = ::std::convert::TryInto::try_into(value)?;
        Ok(::windows::core::InParam::owned(item))
    }
}
impl ::core::convert::TryFrom<CompositionShape> for ::windows::Foundation::IClosable {
    type Error = ::windows::core::Error;
    fn try_from(value: CompositionShape) -> ::windows::core::Result<Self> {
        ::core::convert::TryFrom::try_from(&value)
    }
}
impl ::core::convert::TryFrom<&CompositionShape> for ::windows::Foundation::IClosable {
    type Error = ::windows::core::Error;
    fn try_from(value: &CompositionShape) -> ::windows::core::Result<Self> {
        ::windows::core::Interface::cast(value)
    }
}
impl<'a> ::core::convert::TryFrom<&CompositionShape>
    for ::windows::core::InParam<'a, ::windows::Foundation::IClosable>
{
    type Error = ::windows::core::Error;
    fn try_from(value: &CompositionShape) -> ::windows::core::Result<Self> {
        let item = ::std::convert::TryInto::try_into(value)?;
        Ok(::windows::core::InParam::owned(item))
    }
}
impl ::core::convert::From<CompositionShape> for CompositionObject {
    fn from(value: CompositionShape) -> Self {
        ::core::convert::From::from(&value)
    }
}
impl ::core::convert::From<&CompositionShape> for CompositionObject {
    fn from(value: &CompositionShape) -> Self {
        ::windows::core::Interface::cast(value).unwrap()
    }
}
impl<'a> ::core::convert::From<&CompositionShape>
    for ::windows::core::InParam<'a, CompositionObject>
{
    fn from(value: &CompositionShape) -> Self {
        ::windows::core::InParam::owned(value.into())
    }
}
unsafe impl ::core::marker::Send for CompositionShape {}
unsafe impl ::core::marker::Sync for CompositionShape {}
#[doc = "*Required features: `\"UI_Composition\"`*"]
#[repr(transparent)]
pub struct CompositionShapeCollection(::windows::core::IUnknown);
impl CompositionShapeCollection {
    pub fn PopulatePropertyInfo(
        &self,
        propertyname: &::windows::core::HSTRING,
        propertyinfo: &AnimationPropertyInfo,
    ) -> ::windows::core::Result<()> {
        let this = &::windows::core::Interface::cast::<IAnimationObject>(self)?;
        unsafe {
            (::windows::core::Vtable::vtable(this).PopulatePropertyInfo)(
                ::windows::core::Vtable::as_raw(this),
                ::core::mem::transmute_copy(propertyname),
                ::core::mem::transmute_copy(propertyinfo),
            )
            .ok()
        }
    }
    pub fn Close(&self) -> ::windows::core::Result<()> {
        let this = &::windows::core::Interface::cast::<::windows::Foundation::IClosable>(self)?;
        unsafe {
            (::windows::core::Vtable::vtable(this).Close)(::windows::core::Vtable::as_raw(this))
                .ok()
        }
    }
    pub fn Compositor(&self) -> ::windows::core::Result<Compositor> {
        let this = &::windows::core::Interface::cast::<ICompositionObject>(self)?;
        unsafe {
            let mut result__ = ::core::mem::MaybeUninit::zeroed();
            (::windows::core::Vtable::vtable(this).Compositor)(
                ::windows::core::Vtable::as_raw(this),
                result__.as_mut_ptr(),
            )
            .from_abi::<Compositor>(result__)
        }
    }
    pub fn Properties(&self) -> ::windows::core::Result<CompositionPropertySet> {
        let this = &::windows::core::Interface::cast::<ICompositionObject>(self)?;
        unsafe {
            let mut result__ = ::core::mem::MaybeUninit::zeroed();
            (::windows::core::Vtable::vtable(this).Properties)(
                ::windows::core::Vtable::as_raw(this),
                result__.as_mut_ptr(),
            )
            .from_abi::<CompositionPropertySet>(result__)
        }
    }
    pub fn StartAnimation<'a, P0>(
        &self,
        propertyname: &::windows::core::HSTRING,
        animation: P0,
    ) -> ::windows::core::Result<()>
    where
        P0: ::std::convert::Into<::windows::core::InParam<'a, CompositionAnimation>>,
    {
        let this = &::windows::core::Interface::cast::<ICompositionObject>(self)?;
        unsafe {
            (::windows::core::Vtable::vtable(this).StartAnimation)(
                ::windows::core::Vtable::as_raw(this),
                ::core::mem::transmute_copy(propertyname),
                animation.into().abi(),
            )
            .ok()
        }
    }
    pub fn StopAnimation(
        &self,
        propertyname: &::windows::core::HSTRING,
    ) -> ::windows::core::Result<()> {
        let this = &::windows::core::Interface::cast::<ICompositionObject>(self)?;
        unsafe {
            (::windows::core::Vtable::vtable(this).StopAnimation)(
                ::windows::core::Vtable::as_raw(this),
                ::core::mem::transmute_copy(propertyname),
            )
            .ok()
        }
    }
    pub fn Comment(&self) -> ::windows::core::Result<::windows::core::HSTRING> {
        let this = &::windows::core::Interface::cast::<ICompositionObject2>(self)?;
        unsafe {
            let mut result__ = ::core::mem::MaybeUninit::zeroed();
            (::windows::core::Vtable::vtable(this).Comment)(
                ::windows::core::Vtable::as_raw(this),
                result__.as_mut_ptr(),
            )
            .from_abi::<::windows::core::HSTRING>(result__)
        }
    }
    pub fn SetComment(&self, value: &::windows::core::HSTRING) -> ::windows::core::Result<()> {
        let this = &::windows::core::Interface::cast::<ICompositionObject2>(self)?;
        unsafe {
            (::windows::core::Vtable::vtable(this).SetComment)(
                ::windows::core::Vtable::as_raw(this),
                ::core::mem::transmute_copy(value),
            )
            .ok()
        }
    }
    pub fn ImplicitAnimations(&self) -> ::windows::core::Result<ImplicitAnimationCollection> {
        let this = &::windows::core::Interface::cast::<ICompositionObject2>(self)?;
        unsafe {
            let mut result__ = ::core::mem::MaybeUninit::zeroed();
            (::windows::core::Vtable::vtable(this).ImplicitAnimations)(
                ::windows::core::Vtable::as_raw(this),
                result__.as_mut_ptr(),
            )
            .from_abi::<ImplicitAnimationCollection>(result__)
        }
    }
    pub fn SetImplicitAnimations(
        &self,
        value: &ImplicitAnimationCollection,
    ) -> ::windows::core::Result<()> {
        let this = &::windows::core::Interface::cast::<ICompositionObject2>(self)?;
        unsafe {
            (::windows::core::Vtable::vtable(this).SetImplicitAnimations)(
                ::windows::core::Vtable::as_raw(this),
                ::core::mem::transmute_copy(value),
            )
            .ok()
        }
    }
    pub fn StartAnimationGroup<'a, P0, E0>(&self, value: P0) -> ::windows::core::Result<()>
    where
        P0: ::std::convert::TryInto<
            ::windows::core::InParam<'a, ICompositionAnimationBase>,
            Error = E0,
        >,
        E0: ::std::convert::Into<::windows::core::Error>,
    {
        let this = &::windows::core::Interface::cast::<ICompositionObject2>(self)?;
        unsafe {
            (::windows::core::Vtable::vtable(this).StartAnimationGroup)(
                ::windows::core::Vtable::as_raw(this),
                value.try_into().map_err(|e| e.into())?.abi(),
            )
            .ok()
        }
    }
    pub fn StopAnimationGroup<'a, P0, E0>(&self, value: P0) -> ::windows::core::Result<()>
    where
        P0: ::std::convert::TryInto<
            ::windows::core::InParam<'a, ICompositionAnimationBase>,
            Error = E0,
        >,
        E0: ::std::convert::Into<::windows::core::Error>,
    {
        let this = &::windows::core::Interface::cast::<ICompositionObject2>(self)?;
        unsafe {
            (::windows::core::Vtable::vtable(this).StopAnimationGroup)(
                ::windows::core::Vtable::as_raw(this),
                value.try_into().map_err(|e| e.into())?.abi(),
            )
            .ok()
        }
    }
    #[doc = "*Required features: `\"UI_Dispatching\"`*"]
    #[cfg(feature = "UI_Dispatching")]
    pub fn DispatcherQueue(&self) -> ::windows::core::Result<super::Dispatching::DispatcherQueue> {
        let this = &::windows::core::Interface::cast::<ICompositionObject3>(self)?;
        unsafe {
            let mut result__ = ::core::mem::MaybeUninit::zeroed();
            (::windows::core::Vtable::vtable(this).DispatcherQueue)(
                ::windows::core::Vtable::as_raw(this),
                result__.as_mut_ptr(),
            )
            .from_abi::<super::Dispatching::DispatcherQueue>(result__)
        }
    }
    pub fn TryGetAnimationController(
        &self,
        propertyname: &::windows::core::HSTRING,
    ) -> ::windows::core::Result<AnimationController> {
        let this = &::windows::core::Interface::cast::<ICompositionObject4>(self)?;
        unsafe {
            let mut result__ = ::core::mem::MaybeUninit::zeroed();
            (::windows::core::Vtable::vtable(this).TryGetAnimationController)(
                ::windows::core::Vtable::as_raw(this),
                ::core::mem::transmute_copy(propertyname),
                result__.as_mut_ptr(),
            )
            .from_abi::<AnimationController>(result__)
        }
    }
    pub fn StartAnimationWithController<'a, P0>(
        &self,
        propertyname: &::windows::core::HSTRING,
        animation: P0,
        animationcontroller: &AnimationController,
    ) -> ::windows::core::Result<()>
    where
        P0: ::std::convert::Into<::windows::core::InParam<'a, CompositionAnimation>>,
    {
        let this = &::windows::core::Interface::cast::<ICompositionObject5>(self)?;
        unsafe {
            (::windows::core::Vtable::vtable(this).StartAnimationWithController)(
                ::windows::core::Vtable::as_raw(this),
                ::core::mem::transmute_copy(propertyname),
                animation.into().abi(),
                ::core::mem::transmute_copy(animationcontroller),
            )
            .ok()
        }
    }
    pub fn First(
        &self,
    ) -> ::windows::core::Result<::windows::Foundation::Collections::IIterator<CompositionShape>>
    {
        let this = &::windows::core::Interface::cast::<
            ::windows::Foundation::Collections::IIterable<CompositionShape>,
        >(self)?;
        unsafe {
            let mut result__ = ::core::mem::MaybeUninit::zeroed();
            (::windows::core::Vtable::vtable(this).First)(
                ::windows::core::Vtable::as_raw(this),
                result__.as_mut_ptr(),
            )
            .from_abi::<::windows::Foundation::Collections::IIterator<CompositionShape>>(result__)
        }
    }
    pub fn GetAt(&self, index: u32) -> ::windows::core::Result<CompositionShape> {
        let this = self;
        unsafe {
            let mut result__ = ::core::mem::MaybeUninit::zeroed();
            (::windows::core::Vtable::vtable(this).GetAt)(
                ::windows::core::Vtable::as_raw(this),
                index,
                result__.as_mut_ptr(),
            )
            .from_abi::<CompositionShape>(result__)
        }
    }
    pub fn Size(&self) -> ::windows::core::Result<u32> {
        let this = self;
        unsafe {
            let mut result__ = ::core::mem::MaybeUninit::zeroed();
            (::windows::core::Vtable::vtable(this).Size)(
                ::windows::core::Vtable::as_raw(this),
                result__.as_mut_ptr(),
            )
            .from_abi::<u32>(result__)
        }
    }
    pub fn GetView(
        &self,
    ) -> ::windows::core::Result<::windows::Foundation::Collections::IVectorView<CompositionShape>>
    {
        let this = self;
        unsafe {
            let mut result__ = ::core::mem::MaybeUninit::zeroed();
            (::windows::core::Vtable::vtable(this).GetView)(
                ::windows::core::Vtable::as_raw(this),
                result__.as_mut_ptr(),
            )
            .from_abi::<::windows::Foundation::Collections::IVectorView<CompositionShape>>(result__)
        }
    }
    pub fn IndexOf<'a, P0>(&self, value: P0, index: &mut u32) -> ::windows::core::Result<bool>
    where
        P0: ::std::convert::Into<::windows::core::InParam<'a, CompositionShape>>,
    {
        let this = self;
        unsafe {
            let mut result__ = ::core::mem::MaybeUninit::zeroed();
            (::windows::core::Vtable::vtable(this).IndexOf)(
                ::windows::core::Vtable::as_raw(this),
                value.into().abi(),
                index,
                result__.as_mut_ptr(),
            )
            .from_abi::<bool>(result__)
        }
    }
    pub fn SetAt<'a, P0>(&self, index: u32, value: P0) -> ::windows::core::Result<()>
    where
        P0: ::std::convert::Into<::windows::core::InParam<'a, CompositionShape>>,
    {
        let this = self;
        unsafe {
            (::windows::core::Vtable::vtable(this).SetAt)(
                ::windows::core::Vtable::as_raw(this),
                index,
                value.into().abi(),
            )
            .ok()
        }
    }
    pub fn InsertAt<'a, P0>(&self, index: u32, value: P0) -> ::windows::core::Result<()>
    where
        P0: ::std::convert::Into<::windows::core::InParam<'a, CompositionShape>>,
    {
        let this = self;
        unsafe {
            (::windows::core::Vtable::vtable(this).InsertAt)(
                ::windows::core::Vtable::as_raw(this),
                index,
                value.into().abi(),
            )
            .ok()
        }
    }
    pub fn RemoveAt(&self, index: u32) -> ::windows::core::Result<()> {
        let this = self;
        unsafe {
            (::windows::core::Vtable::vtable(this).RemoveAt)(
                ::windows::core::Vtable::as_raw(this),
                index,
            )
            .ok()
        }
    }
    pub fn Append<'a, P0>(&self, value: P0) -> ::windows::core::Result<()>
    where
        P0: ::std::convert::Into<::windows::core::InParam<'a, CompositionShape>>,
    {
        let this = self;
        unsafe {
            (::windows::core::Vtable::vtable(this).Append)(
                ::windows::core::Vtable::as_raw(this),
                value.into().abi(),
            )
            .ok()
        }
    }
    pub fn RemoveAtEnd(&self) -> ::windows::core::Result<()> {
        let this = self;
        unsafe {
            (::windows::core::Vtable::vtable(this).RemoveAtEnd)(::windows::core::Vtable::as_raw(
                this,
            ))
            .ok()
        }
    }
    pub fn Clear(&self) -> ::windows::core::Result<()> {
        let this = self;
        unsafe {
            (::windows::core::Vtable::vtable(this).Clear)(::windows::core::Vtable::as_raw(this))
                .ok()
        }
    }
    pub fn GetMany(
        &self,
        startindex: u32,
        items: &mut [::core::option::Option<CompositionShape>],
    ) -> ::windows::core::Result<u32> {
        let this = self;
        unsafe {
            let mut result__ = ::core::mem::MaybeUninit::zeroed();
            (::windows::core::Vtable::vtable(this).GetMany)(
                ::windows::core::Vtable::as_raw(this),
                startindex,
                items.len() as u32,
                ::core::mem::transmute_copy(&items),
                result__.as_mut_ptr(),
            )
            .from_abi::<u32>(result__)
        }
    }
    pub fn ReplaceAll(
        &self,
        items: &[::core::option::Option<CompositionShape>],
    ) -> ::windows::core::Result<()> {
        let this = self;
        unsafe {
            (::windows::core::Vtable::vtable(this).ReplaceAll)(
                ::windows::core::Vtable::as_raw(this),
                items.len() as u32,
                ::core::mem::transmute(items.as_ptr()),
            )
            .ok()
        }
    }
}
impl ::core::clone::Clone for CompositionShapeCollection {
    fn clone(&self) -> Self {
        Self(self.0.clone())
    }
}
impl ::core::cmp::PartialEq for CompositionShapeCollection {
    fn eq(&self, other: &Self) -> bool {
        self.0 == other.0
    }
}
impl ::core::cmp::Eq for CompositionShapeCollection {}
impl ::core::fmt::Debug for CompositionShapeCollection {
    fn fmt(&self, f: &mut ::core::fmt::Formatter<'_>) -> ::core::fmt::Result {
        f.debug_tuple("CompositionShapeCollection").field(&self.0).finish()
    }
}
unsafe impl ::windows::core::RuntimeType for CompositionShapeCollection {
    const SIGNATURE : ::windows::core::ConstBuffer = ::windows::core::ConstBuffer::from_slice ( b"rc(Microsoft.UI.Composition.CompositionShapeCollection;pinterface({913337e9-11a1-4345-a3a2-4e7f956e222d};rc(Microsoft.UI.Composition.CompositionShape;{ed75d4d8-437f-5640-9720-faae35ce5895})))" ) ;
    type DefaultType = ::core::option::Option<Self>;
    fn from_default(from: &Self::DefaultType) -> ::windows::core::Result<Self> {
        from.as_ref().cloned().ok_or(::windows::core::Error::OK)
    }
}
unsafe impl ::windows::core::Vtable for CompositionShapeCollection {
    type Vtable = ::windows::Foundation::Collections::IVector_Vtbl<CompositionShape>;
}
unsafe impl ::windows::core::Interface for CompositionShapeCollection {
    const IID: ::windows::core::GUID = <::windows::Foundation::Collections::IVector<
        CompositionShape,
    > as ::windows::core::Interface>::IID;
}
impl ::windows::core::RuntimeName for CompositionShapeCollection {
    const NAME: &'static str = "Microsoft.UI.Composition.CompositionShapeCollection";
}
impl ::core::iter::IntoIterator for CompositionShapeCollection {
    type Item = CompositionShape;
    type IntoIter = ::windows::Foundation::Collections::VectorIterator<Self::Item>;
    fn into_iter(self) -> Self::IntoIter {
        ::core::iter::IntoIterator::into_iter(&self)
    }
}
impl ::core::iter::IntoIterator for &CompositionShapeCollection {
    type Item = CompositionShape;
    type IntoIter = ::windows::Foundation::Collections::VectorIterator<Self::Item>;
    fn into_iter(self) -> Self::IntoIter {
        ::windows::Foundation::Collections::VectorIterator::new(
            ::core::convert::TryInto::try_into(self).ok(),
        )
    }
}
::windows::core::interface_hierarchy!(
    CompositionShapeCollection,
    ::windows::core::IUnknown,
    ::windows::core::IInspectable
);
impl ::core::convert::TryFrom<CompositionShapeCollection> for IAnimationObject {
    type Error = ::windows::core::Error;
    fn try_from(value: CompositionShapeCollection) -> ::windows::core::Result<Self> {
        ::core::convert::TryFrom::try_from(&value)
    }
}
impl ::core::convert::TryFrom<&CompositionShapeCollection> for IAnimationObject {
    type Error = ::windows::core::Error;
    fn try_from(value: &CompositionShapeCollection) -> ::windows::core::Result<Self> {
        ::windows::core::Interface::cast(value)
    }
}
impl<'a> ::core::convert::TryFrom<&CompositionShapeCollection>
    for ::windows::core::InParam<'a, IAnimationObject>
{
    type Error = ::windows::core::Error;
    fn try_from(value: &CompositionShapeCollection) -> ::windows::core::Result<Self> {
        let item = ::std::convert::TryInto::try_into(value)?;
        Ok(::windows::core::InParam::owned(item))
    }
}
impl ::core::convert::TryFrom<CompositionShapeCollection> for ::windows::Foundation::IClosable {
    type Error = ::windows::core::Error;
    fn try_from(value: CompositionShapeCollection) -> ::windows::core::Result<Self> {
        ::core::convert::TryFrom::try_from(&value)
    }
}
impl ::core::convert::TryFrom<&CompositionShapeCollection> for ::windows::Foundation::IClosable {
    type Error = ::windows::core::Error;
    fn try_from(value: &CompositionShapeCollection) -> ::windows::core::Result<Self> {
        ::windows::core::Interface::cast(value)
    }
}
impl<'a> ::core::convert::TryFrom<&CompositionShapeCollection>
    for ::windows::core::InParam<'a, ::windows::Foundation::IClosable>
{
    type Error = ::windows::core::Error;
    fn try_from(value: &CompositionShapeCollection) -> ::windows::core::Result<Self> {
        let item = ::std::convert::TryInto::try_into(value)?;
        Ok(::windows::core::InParam::owned(item))
    }
}
impl ::core::convert::TryFrom<CompositionShapeCollection>
    for ::windows::Foundation::Collections::IIterable<CompositionShape>
{
    type Error = ::windows::core::Error;
    fn try_from(value: CompositionShapeCollection) -> ::windows::core::Result<Self> {
        ::core::convert::TryFrom::try_from(&value)
    }
}
impl ::core::convert::TryFrom<&CompositionShapeCollection>
    for ::windows::Foundation::Collections::IIterable<CompositionShape>
{
    type Error = ::windows::core::Error;
    fn try_from(value: &CompositionShapeCollection) -> ::windows::core::Result<Self> {
        ::windows::core::Interface::cast(value)
    }
}
impl<'a> ::core::convert::TryFrom<&CompositionShapeCollection>
    for ::windows::core::InParam<
        'a,
        ::windows::Foundation::Collections::IIterable<CompositionShape>,
    >
{
    type Error = ::windows::core::Error;
    fn try_from(value: &CompositionShapeCollection) -> ::windows::core::Result<Self> {
        let item = ::std::convert::TryInto::try_into(value)?;
        Ok(::windows::core::InParam::owned(item))
    }
}
impl ::core::convert::TryFrom<CompositionShapeCollection>
    for ::windows::Foundation::Collections::IVector<CompositionShape>
{
    type Error = ::windows::core::Error;
    fn try_from(value: CompositionShapeCollection) -> ::windows::core::Result<Self> {
        ::core::convert::TryFrom::try_from(&value)
    }
}
impl ::core::convert::TryFrom<&CompositionShapeCollection>
    for ::windows::Foundation::Collections::IVector<CompositionShape>
{
    type Error = ::windows::core::Error;
    fn try_from(value: &CompositionShapeCollection) -> ::windows::core::Result<Self> {
        ::windows::core::Interface::cast(value)
    }
}
impl<'a> ::core::convert::TryFrom<&CompositionShapeCollection>
    for ::windows::core::InParam<'a, ::windows::Foundation::Collections::IVector<CompositionShape>>
{
    type Error = ::windows::core::Error;
    fn try_from(value: &CompositionShapeCollection) -> ::windows::core::Result<Self> {
        let item = ::std::convert::TryInto::try_into(value)?;
        Ok(::windows::core::InParam::owned(item))
    }
}
impl ::core::convert::From<CompositionShapeCollection> for CompositionObject {
    fn from(value: CompositionShapeCollection) -> Self {
        ::core::convert::From::from(&value)
    }
}
impl ::core::convert::From<&CompositionShapeCollection> for CompositionObject {
    fn from(value: &CompositionShapeCollection) -> Self {
        ::windows::core::Interface::cast(value).unwrap()
    }
}
impl<'a> ::core::convert::From<&CompositionShapeCollection>
    for ::windows::core::InParam<'a, CompositionObject>
{
    fn from(value: &CompositionShapeCollection) -> Self {
        ::windows::core::InParam::owned(value.into())
    }
}
unsafe impl ::core::marker::Send for CompositionShapeCollection {}
unsafe impl ::core::marker::Sync for CompositionShapeCollection {}
#[doc = "*Required features: `\"UI_Composition\"`*"]
#[repr(transparent)]
pub struct CompositionSpriteShape(::windows::core::IUnknown);
impl CompositionSpriteShape {
    pub fn PopulatePropertyInfo(
        &self,
        propertyname: &::windows::core::HSTRING,
        propertyinfo: &AnimationPropertyInfo,
    ) -> ::windows::core::Result<()> {
        let this = &::windows::core::Interface::cast::<IAnimationObject>(self)?;
        unsafe {
            (::windows::core::Vtable::vtable(this).PopulatePropertyInfo)(
                ::windows::core::Vtable::as_raw(this),
                ::core::mem::transmute_copy(propertyname),
                ::core::mem::transmute_copy(propertyinfo),
            )
            .ok()
        }
    }
    pub fn Close(&self) -> ::windows::core::Result<()> {
        let this = &::windows::core::Interface::cast::<::windows::Foundation::IClosable>(self)?;
        unsafe {
            (::windows::core::Vtable::vtable(this).Close)(::windows::core::Vtable::as_raw(this))
                .ok()
        }
    }
    pub fn Compositor(&self) -> ::windows::core::Result<Compositor> {
        let this = &::windows::core::Interface::cast::<ICompositionObject>(self)?;
        unsafe {
            let mut result__ = ::core::mem::MaybeUninit::zeroed();
            (::windows::core::Vtable::vtable(this).Compositor)(
                ::windows::core::Vtable::as_raw(this),
                result__.as_mut_ptr(),
            )
            .from_abi::<Compositor>(result__)
        }
    }
    pub fn Properties(&self) -> ::windows::core::Result<CompositionPropertySet> {
        let this = &::windows::core::Interface::cast::<ICompositionObject>(self)?;
        unsafe {
            let mut result__ = ::core::mem::MaybeUninit::zeroed();
            (::windows::core::Vtable::vtable(this).Properties)(
                ::windows::core::Vtable::as_raw(this),
                result__.as_mut_ptr(),
            )
            .from_abi::<CompositionPropertySet>(result__)
        }
    }
    pub fn StartAnimation<'a, P0>(
        &self,
        propertyname: &::windows::core::HSTRING,
        animation: P0,
    ) -> ::windows::core::Result<()>
    where
        P0: ::std::convert::Into<::windows::core::InParam<'a, CompositionAnimation>>,
    {
        let this = &::windows::core::Interface::cast::<ICompositionObject>(self)?;
        unsafe {
            (::windows::core::Vtable::vtable(this).StartAnimation)(
                ::windows::core::Vtable::as_raw(this),
                ::core::mem::transmute_copy(propertyname),
                animation.into().abi(),
            )
            .ok()
        }
    }
    pub fn StopAnimation(
        &self,
        propertyname: &::windows::core::HSTRING,
    ) -> ::windows::core::Result<()> {
        let this = &::windows::core::Interface::cast::<ICompositionObject>(self)?;
        unsafe {
            (::windows::core::Vtable::vtable(this).StopAnimation)(
                ::windows::core::Vtable::as_raw(this),
                ::core::mem::transmute_copy(propertyname),
            )
            .ok()
        }
    }
    pub fn Comment(&self) -> ::windows::core::Result<::windows::core::HSTRING> {
        let this = &::windows::core::Interface::cast::<ICompositionObject2>(self)?;
        unsafe {
            let mut result__ = ::core::mem::MaybeUninit::zeroed();
            (::windows::core::Vtable::vtable(this).Comment)(
                ::windows::core::Vtable::as_raw(this),
                result__.as_mut_ptr(),
            )
            .from_abi::<::windows::core::HSTRING>(result__)
        }
    }
    pub fn SetComment(&self, value: &::windows::core::HSTRING) -> ::windows::core::Result<()> {
        let this = &::windows::core::Interface::cast::<ICompositionObject2>(self)?;
        unsafe {
            (::windows::core::Vtable::vtable(this).SetComment)(
                ::windows::core::Vtable::as_raw(this),
                ::core::mem::transmute_copy(value),
            )
            .ok()
        }
    }
    pub fn ImplicitAnimations(&self) -> ::windows::core::Result<ImplicitAnimationCollection> {
        let this = &::windows::core::Interface::cast::<ICompositionObject2>(self)?;
        unsafe {
            let mut result__ = ::core::mem::MaybeUninit::zeroed();
            (::windows::core::Vtable::vtable(this).ImplicitAnimations)(
                ::windows::core::Vtable::as_raw(this),
                result__.as_mut_ptr(),
            )
            .from_abi::<ImplicitAnimationCollection>(result__)
        }
    }
    pub fn SetImplicitAnimations(
        &self,
        value: &ImplicitAnimationCollection,
    ) -> ::windows::core::Result<()> {
        let this = &::windows::core::Interface::cast::<ICompositionObject2>(self)?;
        unsafe {
            (::windows::core::Vtable::vtable(this).SetImplicitAnimations)(
                ::windows::core::Vtable::as_raw(this),
                ::core::mem::transmute_copy(value),
            )
            .ok()
        }
    }
    pub fn StartAnimationGroup<'a, P0, E0>(&self, value: P0) -> ::windows::core::Result<()>
    where
        P0: ::std::convert::TryInto<
            ::windows::core::InParam<'a, ICompositionAnimationBase>,
            Error = E0,
        >,
        E0: ::std::convert::Into<::windows::core::Error>,
    {
        let this = &::windows::core::Interface::cast::<ICompositionObject2>(self)?;
        unsafe {
            (::windows::core::Vtable::vtable(this).StartAnimationGroup)(
                ::windows::core::Vtable::as_raw(this),
                value.try_into().map_err(|e| e.into())?.abi(),
            )
            .ok()
        }
    }
    pub fn StopAnimationGroup<'a, P0, E0>(&self, value: P0) -> ::windows::core::Result<()>
    where
        P0: ::std::convert::TryInto<
            ::windows::core::InParam<'a, ICompositionAnimationBase>,
            Error = E0,
        >,
        E0: ::std::convert::Into<::windows::core::Error>,
    {
        let this = &::windows::core::Interface::cast::<ICompositionObject2>(self)?;
        unsafe {
            (::windows::core::Vtable::vtable(this).StopAnimationGroup)(
                ::windows::core::Vtable::as_raw(this),
                value.try_into().map_err(|e| e.into())?.abi(),
            )
            .ok()
        }
    }
    #[doc = "*Required features: `\"UI_Dispatching\"`*"]
    #[cfg(feature = "UI_Dispatching")]
    pub fn DispatcherQueue(&self) -> ::windows::core::Result<super::Dispatching::DispatcherQueue> {
        let this = &::windows::core::Interface::cast::<ICompositionObject3>(self)?;
        unsafe {
            let mut result__ = ::core::mem::MaybeUninit::zeroed();
            (::windows::core::Vtable::vtable(this).DispatcherQueue)(
                ::windows::core::Vtable::as_raw(this),
                result__.as_mut_ptr(),
            )
            .from_abi::<super::Dispatching::DispatcherQueue>(result__)
        }
    }
    pub fn TryGetAnimationController(
        &self,
        propertyname: &::windows::core::HSTRING,
    ) -> ::windows::core::Result<AnimationController> {
        let this = &::windows::core::Interface::cast::<ICompositionObject4>(self)?;
        unsafe {
            let mut result__ = ::core::mem::MaybeUninit::zeroed();
            (::windows::core::Vtable::vtable(this).TryGetAnimationController)(
                ::windows::core::Vtable::as_raw(this),
                ::core::mem::transmute_copy(propertyname),
                result__.as_mut_ptr(),
            )
            .from_abi::<AnimationController>(result__)
        }
    }
    pub fn StartAnimationWithController<'a, P0>(
        &self,
        propertyname: &::windows::core::HSTRING,
        animation: P0,
        animationcontroller: &AnimationController,
    ) -> ::windows::core::Result<()>
    where
        P0: ::std::convert::Into<::windows::core::InParam<'a, CompositionAnimation>>,
    {
        let this = &::windows::core::Interface::cast::<ICompositionObject5>(self)?;
        unsafe {
            (::windows::core::Vtable::vtable(this).StartAnimationWithController)(
                ::windows::core::Vtable::as_raw(this),
                ::core::mem::transmute_copy(propertyname),
                animation.into().abi(),
                ::core::mem::transmute_copy(animationcontroller),
            )
            .ok()
        }
    }
    pub fn CenterPoint(&self) -> ::windows::core::Result<::windows::Foundation::Numerics::Vector2> {
        let this = &::windows::core::Interface::cast::<ICompositionShape>(self)?;
        unsafe {
            let mut result__ = ::core::mem::MaybeUninit::zeroed();
            (::windows::core::Vtable::vtable(this).CenterPoint)(
                ::windows::core::Vtable::as_raw(this),
                result__.as_mut_ptr(),
            )
            .from_abi::<::windows::Foundation::Numerics::Vector2>(result__)
        }
    }
    pub fn SetCenterPoint(
        &self,
        value: ::windows::Foundation::Numerics::Vector2,
    ) -> ::windows::core::Result<()> {
        let this = &::windows::core::Interface::cast::<ICompositionShape>(self)?;
        unsafe {
            (::windows::core::Vtable::vtable(this).SetCenterPoint)(
                ::windows::core::Vtable::as_raw(this),
                value,
            )
            .ok()
        }
    }
    pub fn Offset(&self) -> ::windows::core::Result<::windows::Foundation::Numerics::Vector2> {
        let this = &::windows::core::Interface::cast::<ICompositionShape>(self)?;
        unsafe {
            let mut result__ = ::core::mem::MaybeUninit::zeroed();
            (::windows::core::Vtable::vtable(this).Offset)(
                ::windows::core::Vtable::as_raw(this),
                result__.as_mut_ptr(),
            )
            .from_abi::<::windows::Foundation::Numerics::Vector2>(result__)
        }
    }
    pub fn SetOffset(
        &self,
        value: ::windows::Foundation::Numerics::Vector2,
    ) -> ::windows::core::Result<()> {
        let this = &::windows::core::Interface::cast::<ICompositionShape>(self)?;
        unsafe {
            (::windows::core::Vtable::vtable(this).SetOffset)(
                ::windows::core::Vtable::as_raw(this),
                value,
            )
            .ok()
        }
    }
    pub fn RotationAngle(&self) -> ::windows::core::Result<f32> {
        let this = &::windows::core::Interface::cast::<ICompositionShape>(self)?;
        unsafe {
            let mut result__ = ::core::mem::MaybeUninit::zeroed();
            (::windows::core::Vtable::vtable(this).RotationAngle)(
                ::windows::core::Vtable::as_raw(this),
                result__.as_mut_ptr(),
            )
            .from_abi::<f32>(result__)
        }
    }
    pub fn SetRotationAngle(&self, value: f32) -> ::windows::core::Result<()> {
        let this = &::windows::core::Interface::cast::<ICompositionShape>(self)?;
        unsafe {
            (::windows::core::Vtable::vtable(this).SetRotationAngle)(
                ::windows::core::Vtable::as_raw(this),
                value,
            )
            .ok()
        }
    }
    pub fn RotationAngleInDegrees(&self) -> ::windows::core::Result<f32> {
        let this = &::windows::core::Interface::cast::<ICompositionShape>(self)?;
        unsafe {
            let mut result__ = ::core::mem::MaybeUninit::zeroed();
            (::windows::core::Vtable::vtable(this).RotationAngleInDegrees)(
                ::windows::core::Vtable::as_raw(this),
                result__.as_mut_ptr(),
            )
            .from_abi::<f32>(result__)
        }
    }
    pub fn SetRotationAngleInDegrees(&self, value: f32) -> ::windows::core::Result<()> {
        let this = &::windows::core::Interface::cast::<ICompositionShape>(self)?;
        unsafe {
            (::windows::core::Vtable::vtable(this).SetRotationAngleInDegrees)(
                ::windows::core::Vtable::as_raw(this),
                value,
            )
            .ok()
        }
    }
    pub fn Scale(&self) -> ::windows::core::Result<::windows::Foundation::Numerics::Vector2> {
        let this = &::windows::core::Interface::cast::<ICompositionShape>(self)?;
        unsafe {
            let mut result__ = ::core::mem::MaybeUninit::zeroed();
            (::windows::core::Vtable::vtable(this).Scale)(
                ::windows::core::Vtable::as_raw(this),
                result__.as_mut_ptr(),
            )
            .from_abi::<::windows::Foundation::Numerics::Vector2>(result__)
        }
    }
    pub fn SetScale(
        &self,
        value: ::windows::Foundation::Numerics::Vector2,
    ) -> ::windows::core::Result<()> {
        let this = &::windows::core::Interface::cast::<ICompositionShape>(self)?;
        unsafe {
            (::windows::core::Vtable::vtable(this).SetScale)(
                ::windows::core::Vtable::as_raw(this),
                value,
            )
            .ok()
        }
    }
    pub fn TransformMatrix(
        &self,
    ) -> ::windows::core::Result<::windows::Foundation::Numerics::Matrix3x2> {
        let this = &::windows::core::Interface::cast::<ICompositionShape>(self)?;
        unsafe {
            let mut result__ = ::core::mem::MaybeUninit::zeroed();
            (::windows::core::Vtable::vtable(this).TransformMatrix)(
                ::windows::core::Vtable::as_raw(this),
                result__.as_mut_ptr(),
            )
            .from_abi::<::windows::Foundation::Numerics::Matrix3x2>(result__)
        }
    }
    pub fn SetTransformMatrix(
        &self,
        value: ::windows::Foundation::Numerics::Matrix3x2,
    ) -> ::windows::core::Result<()> {
        let this = &::windows::core::Interface::cast::<ICompositionShape>(self)?;
        unsafe {
            (::windows::core::Vtable::vtable(this).SetTransformMatrix)(
                ::windows::core::Vtable::as_raw(this),
                value,
            )
            .ok()
        }
    }
    pub fn FillBrush(&self) -> ::windows::core::Result<CompositionBrush> {
        let this = self;
        unsafe {
            let mut result__ = ::core::mem::MaybeUninit::zeroed();
            (::windows::core::Vtable::vtable(this).FillBrush)(
                ::windows::core::Vtable::as_raw(this),
                result__.as_mut_ptr(),
            )
            .from_abi::<CompositionBrush>(result__)
        }
    }
    pub fn SetFillBrush<'a, P0>(&self, value: P0) -> ::windows::core::Result<()>
    where
        P0: ::std::convert::Into<::windows::core::InParam<'a, CompositionBrush>>,
    {
        let this = self;
        unsafe {
            (::windows::core::Vtable::vtable(this).SetFillBrush)(
                ::windows::core::Vtable::as_raw(this),
                value.into().abi(),
            )
            .ok()
        }
    }
    pub fn Geometry(&self) -> ::windows::core::Result<CompositionGeometry> {
        let this = self;
        unsafe {
            let mut result__ = ::core::mem::MaybeUninit::zeroed();
            (::windows::core::Vtable::vtable(this).Geometry)(
                ::windows::core::Vtable::as_raw(this),
                result__.as_mut_ptr(),
            )
            .from_abi::<CompositionGeometry>(result__)
        }
    }
    pub fn SetGeometry<'a, P0>(&self, value: P0) -> ::windows::core::Result<()>
    where
        P0: ::std::convert::Into<::windows::core::InParam<'a, CompositionGeometry>>,
    {
        let this = self;
        unsafe {
            (::windows::core::Vtable::vtable(this).SetGeometry)(
                ::windows::core::Vtable::as_raw(this),
                value.into().abi(),
            )
            .ok()
        }
    }
    pub fn IsStrokeNonScaling(&self) -> ::windows::core::Result<bool> {
        let this = self;
        unsafe {
            let mut result__ = ::core::mem::MaybeUninit::zeroed();
            (::windows::core::Vtable::vtable(this).IsStrokeNonScaling)(
                ::windows::core::Vtable::as_raw(this),
                result__.as_mut_ptr(),
            )
            .from_abi::<bool>(result__)
        }
    }
    pub fn SetIsStrokeNonScaling(&self, value: bool) -> ::windows::core::Result<()> {
        let this = self;
        unsafe {
            (::windows::core::Vtable::vtable(this).SetIsStrokeNonScaling)(
                ::windows::core::Vtable::as_raw(this),
                value,
            )
            .ok()
        }
    }
    pub fn StrokeBrush(&self) -> ::windows::core::Result<CompositionBrush> {
        let this = self;
        unsafe {
            let mut result__ = ::core::mem::MaybeUninit::zeroed();
            (::windows::core::Vtable::vtable(this).StrokeBrush)(
                ::windows::core::Vtable::as_raw(this),
                result__.as_mut_ptr(),
            )
            .from_abi::<CompositionBrush>(result__)
        }
    }
    pub fn SetStrokeBrush<'a, P0>(&self, value: P0) -> ::windows::core::Result<()>
    where
        P0: ::std::convert::Into<::windows::core::InParam<'a, CompositionBrush>>,
    {
        let this = self;
        unsafe {
            (::windows::core::Vtable::vtable(this).SetStrokeBrush)(
                ::windows::core::Vtable::as_raw(this),
                value.into().abi(),
            )
            .ok()
        }
    }
    pub fn StrokeDashArray(&self) -> ::windows::core::Result<CompositionStrokeDashArray> {
        let this = self;
        unsafe {
            let mut result__ = ::core::mem::MaybeUninit::zeroed();
            (::windows::core::Vtable::vtable(this).StrokeDashArray)(
                ::windows::core::Vtable::as_raw(this),
                result__.as_mut_ptr(),
            )
            .from_abi::<CompositionStrokeDashArray>(result__)
        }
    }
    pub fn StrokeDashCap(&self) -> ::windows::core::Result<CompositionStrokeCap> {
        let this = self;
        unsafe {
            let mut result__ = ::core::mem::MaybeUninit::zeroed();
            (::windows::core::Vtable::vtable(this).StrokeDashCap)(
                ::windows::core::Vtable::as_raw(this),
                result__.as_mut_ptr(),
            )
            .from_abi::<CompositionStrokeCap>(result__)
        }
    }
    pub fn SetStrokeDashCap(&self, value: CompositionStrokeCap) -> ::windows::core::Result<()> {
        let this = self;
        unsafe {
            (::windows::core::Vtable::vtable(this).SetStrokeDashCap)(
                ::windows::core::Vtable::as_raw(this),
                value,
            )
            .ok()
        }
    }
    pub fn StrokeDashOffset(&self) -> ::windows::core::Result<f32> {
        let this = self;
        unsafe {
            let mut result__ = ::core::mem::MaybeUninit::zeroed();
            (::windows::core::Vtable::vtable(this).StrokeDashOffset)(
                ::windows::core::Vtable::as_raw(this),
                result__.as_mut_ptr(),
            )
            .from_abi::<f32>(result__)
        }
    }
    pub fn SetStrokeDashOffset(&self, value: f32) -> ::windows::core::Result<()> {
        let this = self;
        unsafe {
            (::windows::core::Vtable::vtable(this).SetStrokeDashOffset)(
                ::windows::core::Vtable::as_raw(this),
                value,
            )
            .ok()
        }
    }
    pub fn StrokeEndCap(&self) -> ::windows::core::Result<CompositionStrokeCap> {
        let this = self;
        unsafe {
            let mut result__ = ::core::mem::MaybeUninit::zeroed();
            (::windows::core::Vtable::vtable(this).StrokeEndCap)(
                ::windows::core::Vtable::as_raw(this),
                result__.as_mut_ptr(),
            )
            .from_abi::<CompositionStrokeCap>(result__)
        }
    }
    pub fn SetStrokeEndCap(&self, value: CompositionStrokeCap) -> ::windows::core::Result<()> {
        let this = self;
        unsafe {
            (::windows::core::Vtable::vtable(this).SetStrokeEndCap)(
                ::windows::core::Vtable::as_raw(this),
                value,
            )
            .ok()
        }
    }
    pub fn StrokeLineJoin(&self) -> ::windows::core::Result<CompositionStrokeLineJoin> {
        let this = self;
        unsafe {
            let mut result__ = ::core::mem::MaybeUninit::zeroed();
            (::windows::core::Vtable::vtable(this).StrokeLineJoin)(
                ::windows::core::Vtable::as_raw(this),
                result__.as_mut_ptr(),
            )
            .from_abi::<CompositionStrokeLineJoin>(result__)
        }
    }
    pub fn SetStrokeLineJoin(
        &self,
        value: CompositionStrokeLineJoin,
    ) -> ::windows::core::Result<()> {
        let this = self;
        unsafe {
            (::windows::core::Vtable::vtable(this).SetStrokeLineJoin)(
                ::windows::core::Vtable::as_raw(this),
                value,
            )
            .ok()
        }
    }
    pub fn StrokeMiterLimit(&self) -> ::windows::core::Result<f32> {
        let this = self;
        unsafe {
            let mut result__ = ::core::mem::MaybeUninit::zeroed();
            (::windows::core::Vtable::vtable(this).StrokeMiterLimit)(
                ::windows::core::Vtable::as_raw(this),
                result__.as_mut_ptr(),
            )
            .from_abi::<f32>(result__)
        }
    }
    pub fn SetStrokeMiterLimit(&self, value: f32) -> ::windows::core::Result<()> {
        let this = self;
        unsafe {
            (::windows::core::Vtable::vtable(this).SetStrokeMiterLimit)(
                ::windows::core::Vtable::as_raw(this),
                value,
            )
            .ok()
        }
    }
    pub fn StrokeStartCap(&self) -> ::windows::core::Result<CompositionStrokeCap> {
        let this = self;
        unsafe {
            let mut result__ = ::core::mem::MaybeUninit::zeroed();
            (::windows::core::Vtable::vtable(this).StrokeStartCap)(
                ::windows::core::Vtable::as_raw(this),
                result__.as_mut_ptr(),
            )
            .from_abi::<CompositionStrokeCap>(result__)
        }
    }
    pub fn SetStrokeStartCap(&self, value: CompositionStrokeCap) -> ::windows::core::Result<()> {
        let this = self;
        unsafe {
            (::windows::core::Vtable::vtable(this).SetStrokeStartCap)(
                ::windows::core::Vtable::as_raw(this),
                value,
            )
            .ok()
        }
    }
    pub fn StrokeThickness(&self) -> ::windows::core::Result<f32> {
        let this = self;
        unsafe {
            let mut result__ = ::core::mem::MaybeUninit::zeroed();
            (::windows::core::Vtable::vtable(this).StrokeThickness)(
                ::windows::core::Vtable::as_raw(this),
                result__.as_mut_ptr(),
            )
            .from_abi::<f32>(result__)
        }
    }
    pub fn SetStrokeThickness(&self, value: f32) -> ::windows::core::Result<()> {
        let this = self;
        unsafe {
            (::windows::core::Vtable::vtable(this).SetStrokeThickness)(
                ::windows::core::Vtable::as_raw(this),
                value,
            )
            .ok()
        }
    }
}
impl ::core::clone::Clone for CompositionSpriteShape {
    fn clone(&self) -> Self {
        Self(self.0.clone())
    }
}
impl ::core::cmp::PartialEq for CompositionSpriteShape {
    fn eq(&self, other: &Self) -> bool {
        self.0 == other.0
    }
}
impl ::core::cmp::Eq for CompositionSpriteShape {}
impl ::core::fmt::Debug for CompositionSpriteShape {
    fn fmt(&self, f: &mut ::core::fmt::Formatter<'_>) -> ::core::fmt::Result {
        f.debug_tuple("CompositionSpriteShape").field(&self.0).finish()
    }
}
unsafe impl ::windows::core::RuntimeType for CompositionSpriteShape {
    const SIGNATURE : ::windows::core::ConstBuffer = ::windows::core::ConstBuffer::from_slice ( b"rc(Microsoft.UI.Composition.CompositionSpriteShape;{982138f2-5781-509a-ba5d-112bcb0b98ef})" ) ;
    type DefaultType = ::core::option::Option<Self>;
    fn from_default(from: &Self::DefaultType) -> ::windows::core::Result<Self> {
        from.as_ref().cloned().ok_or(::windows::core::Error::OK)
    }
}
unsafe impl ::windows::core::Vtable for CompositionSpriteShape {
    type Vtable = ICompositionSpriteShape_Vtbl;
}
unsafe impl ::windows::core::Interface for CompositionSpriteShape {
    const IID: ::windows::core::GUID = <ICompositionSpriteShape as ::windows::core::Interface>::IID;
}
impl ::windows::core::RuntimeName for CompositionSpriteShape {
    const NAME: &'static str = "Microsoft.UI.Composition.CompositionSpriteShape";
}
::windows::core::interface_hierarchy!(
    CompositionSpriteShape,
    ::windows::core::IUnknown,
    ::windows::core::IInspectable
);
impl ::core::convert::TryFrom<CompositionSpriteShape> for IAnimationObject {
    type Error = ::windows::core::Error;
    fn try_from(value: CompositionSpriteShape) -> ::windows::core::Result<Self> {
        ::core::convert::TryFrom::try_from(&value)
    }
}
impl ::core::convert::TryFrom<&CompositionSpriteShape> for IAnimationObject {
    type Error = ::windows::core::Error;
    fn try_from(value: &CompositionSpriteShape) -> ::windows::core::Result<Self> {
        ::windows::core::Interface::cast(value)
    }
}
impl<'a> ::core::convert::TryFrom<&CompositionSpriteShape>
    for ::windows::core::InParam<'a, IAnimationObject>
{
    type Error = ::windows::core::Error;
    fn try_from(value: &CompositionSpriteShape) -> ::windows::core::Result<Self> {
        let item = ::std::convert::TryInto::try_into(value)?;
        Ok(::windows::core::InParam::owned(item))
    }
}
impl ::core::convert::TryFrom<CompositionSpriteShape> for ::windows::Foundation::IClosable {
    type Error = ::windows::core::Error;
    fn try_from(value: CompositionSpriteShape) -> ::windows::core::Result<Self> {
        ::core::convert::TryFrom::try_from(&value)
    }
}
impl ::core::convert::TryFrom<&CompositionSpriteShape> for ::windows::Foundation::IClosable {
    type Error = ::windows::core::Error;
    fn try_from(value: &CompositionSpriteShape) -> ::windows::core::Result<Self> {
        ::windows::core::Interface::cast(value)
    }
}
impl<'a> ::core::convert::TryFrom<&CompositionSpriteShape>
    for ::windows::core::InParam<'a, ::windows::Foundation::IClosable>
{
    type Error = ::windows::core::Error;
    fn try_from(value: &CompositionSpriteShape) -> ::windows::core::Result<Self> {
        let item = ::std::convert::TryInto::try_into(value)?;
        Ok(::windows::core::InParam::owned(item))
    }
}
impl ::core::convert::From<CompositionSpriteShape> for CompositionShape {
    fn from(value: CompositionSpriteShape) -> Self {
        ::core::convert::From::from(&value)
    }
}
impl ::core::convert::From<&CompositionSpriteShape> for CompositionShape {
    fn from(value: &CompositionSpriteShape) -> Self {
        ::windows::core::Interface::cast(value).unwrap()
    }
}
impl<'a> ::core::convert::From<&CompositionSpriteShape>
    for ::windows::core::InParam<'a, CompositionShape>
{
    fn from(value: &CompositionSpriteShape) -> Self {
        ::windows::core::InParam::owned(value.into())
    }
}
impl ::core::convert::From<CompositionSpriteShape> for CompositionObject {
    fn from(value: CompositionSpriteShape) -> Self {
        ::core::convert::From::from(&value)
    }
}
impl ::core::convert::From<&CompositionSpriteShape> for CompositionObject {
    fn from(value: &CompositionSpriteShape) -> Self {
        ::windows::core::Interface::cast(value).unwrap()
    }
}
impl<'a> ::core::convert::From<&CompositionSpriteShape>
    for ::windows::core::InParam<'a, CompositionObject>
{
    fn from(value: &CompositionSpriteShape) -> Self {
        ::windows::core::InParam::owned(value.into())
    }
}
unsafe impl ::core::marker::Send for CompositionSpriteShape {}
unsafe impl ::core::marker::Sync for CompositionSpriteShape {}
#[doc = "*Required features: `\"UI_Composition\"`*"]
#[repr(transparent)]
pub struct CompositionStrokeDashArray(::windows::core::IUnknown);
impl CompositionStrokeDashArray {
    pub fn PopulatePropertyInfo(
        &self,
        propertyname: &::windows::core::HSTRING,
        propertyinfo: &AnimationPropertyInfo,
    ) -> ::windows::core::Result<()> {
        let this = &::windows::core::Interface::cast::<IAnimationObject>(self)?;
        unsafe {
            (::windows::core::Vtable::vtable(this).PopulatePropertyInfo)(
                ::windows::core::Vtable::as_raw(this),
                ::core::mem::transmute_copy(propertyname),
                ::core::mem::transmute_copy(propertyinfo),
            )
            .ok()
        }
    }
    pub fn Close(&self) -> ::windows::core::Result<()> {
        let this = &::windows::core::Interface::cast::<::windows::Foundation::IClosable>(self)?;
        unsafe {
            (::windows::core::Vtable::vtable(this).Close)(::windows::core::Vtable::as_raw(this))
                .ok()
        }
    }
    pub fn Compositor(&self) -> ::windows::core::Result<Compositor> {
        let this = &::windows::core::Interface::cast::<ICompositionObject>(self)?;
        unsafe {
            let mut result__ = ::core::mem::MaybeUninit::zeroed();
            (::windows::core::Vtable::vtable(this).Compositor)(
                ::windows::core::Vtable::as_raw(this),
                result__.as_mut_ptr(),
            )
            .from_abi::<Compositor>(result__)
        }
    }
    pub fn Properties(&self) -> ::windows::core::Result<CompositionPropertySet> {
        let this = &::windows::core::Interface::cast::<ICompositionObject>(self)?;
        unsafe {
            let mut result__ = ::core::mem::MaybeUninit::zeroed();
            (::windows::core::Vtable::vtable(this).Properties)(
                ::windows::core::Vtable::as_raw(this),
                result__.as_mut_ptr(),
            )
            .from_abi::<CompositionPropertySet>(result__)
        }
    }
    pub fn StartAnimation<'a, P0>(
        &self,
        propertyname: &::windows::core::HSTRING,
        animation: P0,
    ) -> ::windows::core::Result<()>
    where
        P0: ::std::convert::Into<::windows::core::InParam<'a, CompositionAnimation>>,
    {
        let this = &::windows::core::Interface::cast::<ICompositionObject>(self)?;
        unsafe {
            (::windows::core::Vtable::vtable(this).StartAnimation)(
                ::windows::core::Vtable::as_raw(this),
                ::core::mem::transmute_copy(propertyname),
                animation.into().abi(),
            )
            .ok()
        }
    }
    pub fn StopAnimation(
        &self,
        propertyname: &::windows::core::HSTRING,
    ) -> ::windows::core::Result<()> {
        let this = &::windows::core::Interface::cast::<ICompositionObject>(self)?;
        unsafe {
            (::windows::core::Vtable::vtable(this).StopAnimation)(
                ::windows::core::Vtable::as_raw(this),
                ::core::mem::transmute_copy(propertyname),
            )
            .ok()
        }
    }
    pub fn Comment(&self) -> ::windows::core::Result<::windows::core::HSTRING> {
        let this = &::windows::core::Interface::cast::<ICompositionObject2>(self)?;
        unsafe {
            let mut result__ = ::core::mem::MaybeUninit::zeroed();
            (::windows::core::Vtable::vtable(this).Comment)(
                ::windows::core::Vtable::as_raw(this),
                result__.as_mut_ptr(),
            )
            .from_abi::<::windows::core::HSTRING>(result__)
        }
    }
    pub fn SetComment(&self, value: &::windows::core::HSTRING) -> ::windows::core::Result<()> {
        let this = &::windows::core::Interface::cast::<ICompositionObject2>(self)?;
        unsafe {
            (::windows::core::Vtable::vtable(this).SetComment)(
                ::windows::core::Vtable::as_raw(this),
                ::core::mem::transmute_copy(value),
            )
            .ok()
        }
    }
    pub fn ImplicitAnimations(&self) -> ::windows::core::Result<ImplicitAnimationCollection> {
        let this = &::windows::core::Interface::cast::<ICompositionObject2>(self)?;
        unsafe {
            let mut result__ = ::core::mem::MaybeUninit::zeroed();
            (::windows::core::Vtable::vtable(this).ImplicitAnimations)(
                ::windows::core::Vtable::as_raw(this),
                result__.as_mut_ptr(),
            )
            .from_abi::<ImplicitAnimationCollection>(result__)
        }
    }
    pub fn SetImplicitAnimations(
        &self,
        value: &ImplicitAnimationCollection,
    ) -> ::windows::core::Result<()> {
        let this = &::windows::core::Interface::cast::<ICompositionObject2>(self)?;
        unsafe {
            (::windows::core::Vtable::vtable(this).SetImplicitAnimations)(
                ::windows::core::Vtable::as_raw(this),
                ::core::mem::transmute_copy(value),
            )
            .ok()
        }
    }
    pub fn StartAnimationGroup<'a, P0, E0>(&self, value: P0) -> ::windows::core::Result<()>
    where
        P0: ::std::convert::TryInto<
            ::windows::core::InParam<'a, ICompositionAnimationBase>,
            Error = E0,
        >,
        E0: ::std::convert::Into<::windows::core::Error>,
    {
        let this = &::windows::core::Interface::cast::<ICompositionObject2>(self)?;
        unsafe {
            (::windows::core::Vtable::vtable(this).StartAnimationGroup)(
                ::windows::core::Vtable::as_raw(this),
                value.try_into().map_err(|e| e.into())?.abi(),
            )
            .ok()
        }
    }
    pub fn StopAnimationGroup<'a, P0, E0>(&self, value: P0) -> ::windows::core::Result<()>
    where
        P0: ::std::convert::TryInto<
            ::windows::core::InParam<'a, ICompositionAnimationBase>,
            Error = E0,
        >,
        E0: ::std::convert::Into<::windows::core::Error>,
    {
        let this = &::windows::core::Interface::cast::<ICompositionObject2>(self)?;
        unsafe {
            (::windows::core::Vtable::vtable(this).StopAnimationGroup)(
                ::windows::core::Vtable::as_raw(this),
                value.try_into().map_err(|e| e.into())?.abi(),
            )
            .ok()
        }
    }
    #[doc = "*Required features: `\"UI_Dispatching\"`*"]
    #[cfg(feature = "UI_Dispatching")]
    pub fn DispatcherQueue(&self) -> ::windows::core::Result<super::Dispatching::DispatcherQueue> {
        let this = &::windows::core::Interface::cast::<ICompositionObject3>(self)?;
        unsafe {
            let mut result__ = ::core::mem::MaybeUninit::zeroed();
            (::windows::core::Vtable::vtable(this).DispatcherQueue)(
                ::windows::core::Vtable::as_raw(this),
                result__.as_mut_ptr(),
            )
            .from_abi::<super::Dispatching::DispatcherQueue>(result__)
        }
    }
    pub fn TryGetAnimationController(
        &self,
        propertyname: &::windows::core::HSTRING,
    ) -> ::windows::core::Result<AnimationController> {
        let this = &::windows::core::Interface::cast::<ICompositionObject4>(self)?;
        unsafe {
            let mut result__ = ::core::mem::MaybeUninit::zeroed();
            (::windows::core::Vtable::vtable(this).TryGetAnimationController)(
                ::windows::core::Vtable::as_raw(this),
                ::core::mem::transmute_copy(propertyname),
                result__.as_mut_ptr(),
            )
            .from_abi::<AnimationController>(result__)
        }
    }
    pub fn StartAnimationWithController<'a, P0>(
        &self,
        propertyname: &::windows::core::HSTRING,
        animation: P0,
        animationcontroller: &AnimationController,
    ) -> ::windows::core::Result<()>
    where
        P0: ::std::convert::Into<::windows::core::InParam<'a, CompositionAnimation>>,
    {
        let this = &::windows::core::Interface::cast::<ICompositionObject5>(self)?;
        unsafe {
            (::windows::core::Vtable::vtable(this).StartAnimationWithController)(
                ::windows::core::Vtable::as_raw(this),
                ::core::mem::transmute_copy(propertyname),
                animation.into().abi(),
                ::core::mem::transmute_copy(animationcontroller),
            )
            .ok()
        }
    }
    pub fn First(
        &self,
    ) -> ::windows::core::Result<::windows::Foundation::Collections::IIterator<f32>> {
        let this = &::windows::core::Interface::cast::<
            ::windows::Foundation::Collections::IIterable<f32>,
        >(self)?;
        unsafe {
            let mut result__ = ::core::mem::MaybeUninit::zeroed();
            (::windows::core::Vtable::vtable(this).First)(
                ::windows::core::Vtable::as_raw(this),
                result__.as_mut_ptr(),
            )
            .from_abi::<::windows::Foundation::Collections::IIterator<f32>>(result__)
        }
    }
    pub fn GetAt(&self, index: u32) -> ::windows::core::Result<f32> {
        let this = self;
        unsafe {
            let mut result__ = ::core::mem::MaybeUninit::zeroed();
            (::windows::core::Vtable::vtable(this).GetAt)(
                ::windows::core::Vtable::as_raw(this),
                index,
                result__.as_mut_ptr(),
            )
            .from_abi::<f32>(result__)
        }
    }
    pub fn Size(&self) -> ::windows::core::Result<u32> {
        let this = self;
        unsafe {
            let mut result__ = ::core::mem::MaybeUninit::zeroed();
            (::windows::core::Vtable::vtable(this).Size)(
                ::windows::core::Vtable::as_raw(this),
                result__.as_mut_ptr(),
            )
            .from_abi::<u32>(result__)
        }
    }
    pub fn GetView(
        &self,
    ) -> ::windows::core::Result<::windows::Foundation::Collections::IVectorView<f32>> {
        let this = self;
        unsafe {
            let mut result__ = ::core::mem::MaybeUninit::zeroed();
            (::windows::core::Vtable::vtable(this).GetView)(
                ::windows::core::Vtable::as_raw(this),
                result__.as_mut_ptr(),
            )
            .from_abi::<::windows::Foundation::Collections::IVectorView<f32>>(result__)
        }
    }
    pub fn IndexOf(&self, value: f32, index: &mut u32) -> ::windows::core::Result<bool> {
        let this = self;
        unsafe {
            let mut result__ = ::core::mem::MaybeUninit::zeroed();
            (::windows::core::Vtable::vtable(this).IndexOf)(
                ::windows::core::Vtable::as_raw(this),
                value,
                index,
                result__.as_mut_ptr(),
            )
            .from_abi::<bool>(result__)
        }
    }
    pub fn SetAt(&self, index: u32, value: f32) -> ::windows::core::Result<()> {
        let this = self;
        unsafe {
            (::windows::core::Vtable::vtable(this).SetAt)(
                ::windows::core::Vtable::as_raw(this),
                index,
                value,
            )
            .ok()
        }
    }
    pub fn InsertAt(&self, index: u32, value: f32) -> ::windows::core::Result<()> {
        let this = self;
        unsafe {
            (::windows::core::Vtable::vtable(this).InsertAt)(
                ::windows::core::Vtable::as_raw(this),
                index,
                value,
            )
            .ok()
        }
    }
    pub fn RemoveAt(&self, index: u32) -> ::windows::core::Result<()> {
        let this = self;
        unsafe {
            (::windows::core::Vtable::vtable(this).RemoveAt)(
                ::windows::core::Vtable::as_raw(this),
                index,
            )
            .ok()
        }
    }
    pub fn Append(&self, value: f32) -> ::windows::core::Result<()> {
        let this = self;
        unsafe {
            (::windows::core::Vtable::vtable(this).Append)(
                ::windows::core::Vtable::as_raw(this),
                value,
            )
            .ok()
        }
    }
    pub fn RemoveAtEnd(&self) -> ::windows::core::Result<()> {
        let this = self;
        unsafe {
            (::windows::core::Vtable::vtable(this).RemoveAtEnd)(::windows::core::Vtable::as_raw(
                this,
            ))
            .ok()
        }
    }
    pub fn Clear(&self) -> ::windows::core::Result<()> {
        let this = self;
        unsafe {
            (::windows::core::Vtable::vtable(this).Clear)(::windows::core::Vtable::as_raw(this))
                .ok()
        }
    }
    pub fn GetMany(&self, startindex: u32, items: &mut [f32]) -> ::windows::core::Result<u32> {
        let this = self;
        unsafe {
            let mut result__ = ::core::mem::MaybeUninit::zeroed();
            (::windows::core::Vtable::vtable(this).GetMany)(
                ::windows::core::Vtable::as_raw(this),
                startindex,
                items.len() as u32,
                items.as_mut_ptr(),
                result__.as_mut_ptr(),
            )
            .from_abi::<u32>(result__)
        }
    }
    pub fn ReplaceAll(&self, items: &[f32]) -> ::windows::core::Result<()> {
        let this = self;
        unsafe {
            (::windows::core::Vtable::vtable(this).ReplaceAll)(
                ::windows::core::Vtable::as_raw(this),
                items.len() as u32,
                items.as_ptr(),
            )
            .ok()
        }
    }
}
impl ::core::clone::Clone for CompositionStrokeDashArray {
    fn clone(&self) -> Self {
        Self(self.0.clone())
    }
}
impl ::core::cmp::PartialEq for CompositionStrokeDashArray {
    fn eq(&self, other: &Self) -> bool {
        self.0 == other.0
    }
}
impl ::core::cmp::Eq for CompositionStrokeDashArray {}
impl ::core::fmt::Debug for CompositionStrokeDashArray {
    fn fmt(&self, f: &mut ::core::fmt::Formatter<'_>) -> ::core::fmt::Result {
        f.debug_tuple("CompositionStrokeDashArray").field(&self.0).finish()
    }
}
unsafe impl ::windows::core::RuntimeType for CompositionStrokeDashArray {
    const SIGNATURE : ::windows::core::ConstBuffer = ::windows::core::ConstBuffer::from_slice ( b"rc(Microsoft.UI.Composition.CompositionStrokeDashArray;pinterface({913337e9-11a1-4345-a3a2-4e7f956e222d};f4))" ) ;
    type DefaultType = ::core::option::Option<Self>;
    fn from_default(from: &Self::DefaultType) -> ::windows::core::Result<Self> {
        from.as_ref().cloned().ok_or(::windows::core::Error::OK)
    }
}
unsafe impl ::windows::core::Vtable for CompositionStrokeDashArray {
    type Vtable = ::windows::Foundation::Collections::IVector_Vtbl<f32>;
}
unsafe impl ::windows::core::Interface for CompositionStrokeDashArray {
    const IID: ::windows::core::GUID =
        <::windows::Foundation::Collections::IVector<f32> as ::windows::core::Interface>::IID;
}
impl ::windows::core::RuntimeName for CompositionStrokeDashArray {
    const NAME: &'static str = "Microsoft.UI.Composition.CompositionStrokeDashArray";
}
impl ::core::iter::IntoIterator for CompositionStrokeDashArray {
    type Item = f32;
    type IntoIter = ::windows::Foundation::Collections::VectorIterator<Self::Item>;
    fn into_iter(self) -> Self::IntoIter {
        ::core::iter::IntoIterator::into_iter(&self)
    }
}
impl ::core::iter::IntoIterator for &CompositionStrokeDashArray {
    type Item = f32;
    type IntoIter = ::windows::Foundation::Collections::VectorIterator<Self::Item>;
    fn into_iter(self) -> Self::IntoIter {
        ::windows::Foundation::Collections::VectorIterator::new(
            ::core::convert::TryInto::try_into(self).ok(),
        )
    }
}
::windows::core::interface_hierarchy!(
    CompositionStrokeDashArray,
    ::windows::core::IUnknown,
    ::windows::core::IInspectable
);
impl ::core::convert::TryFrom<CompositionStrokeDashArray> for IAnimationObject {
    type Error = ::windows::core::Error;
    fn try_from(value: CompositionStrokeDashArray) -> ::windows::core::Result<Self> {
        ::core::convert::TryFrom::try_from(&value)
    }
}
impl ::core::convert::TryFrom<&CompositionStrokeDashArray> for IAnimationObject {
    type Error = ::windows::core::Error;
    fn try_from(value: &CompositionStrokeDashArray) -> ::windows::core::Result<Self> {
        ::windows::core::Interface::cast(value)
    }
}
impl<'a> ::core::convert::TryFrom<&CompositionStrokeDashArray>
    for ::windows::core::InParam<'a, IAnimationObject>
{
    type Error = ::windows::core::Error;
    fn try_from(value: &CompositionStrokeDashArray) -> ::windows::core::Result<Self> {
        let item = ::std::convert::TryInto::try_into(value)?;
        Ok(::windows::core::InParam::owned(item))
    }
}
impl ::core::convert::TryFrom<CompositionStrokeDashArray> for ::windows::Foundation::IClosable {
    type Error = ::windows::core::Error;
    fn try_from(value: CompositionStrokeDashArray) -> ::windows::core::Result<Self> {
        ::core::convert::TryFrom::try_from(&value)
    }
}
impl ::core::convert::TryFrom<&CompositionStrokeDashArray> for ::windows::Foundation::IClosable {
    type Error = ::windows::core::Error;
    fn try_from(value: &CompositionStrokeDashArray) -> ::windows::core::Result<Self> {
        ::windows::core::Interface::cast(value)
    }
}
impl<'a> ::core::convert::TryFrom<&CompositionStrokeDashArray>
    for ::windows::core::InParam<'a, ::windows::Foundation::IClosable>
{
    type Error = ::windows::core::Error;
    fn try_from(value: &CompositionStrokeDashArray) -> ::windows::core::Result<Self> {
        let item = ::std::convert::TryInto::try_into(value)?;
        Ok(::windows::core::InParam::owned(item))
    }
}
impl ::core::convert::TryFrom<CompositionStrokeDashArray>
    for ::windows::Foundation::Collections::IIterable<f32>
{
    type Error = ::windows::core::Error;
    fn try_from(value: CompositionStrokeDashArray) -> ::windows::core::Result<Self> {
        ::core::convert::TryFrom::try_from(&value)
    }
}
impl ::core::convert::TryFrom<&CompositionStrokeDashArray>
    for ::windows::Foundation::Collections::IIterable<f32>
{
    type Error = ::windows::core::Error;
    fn try_from(value: &CompositionStrokeDashArray) -> ::windows::core::Result<Self> {
        ::windows::core::Interface::cast(value)
    }
}
impl<'a> ::core::convert::TryFrom<&CompositionStrokeDashArray>
    for ::windows::core::InParam<'a, ::windows::Foundation::Collections::IIterable<f32>>
{
    type Error = ::windows::core::Error;
    fn try_from(value: &CompositionStrokeDashArray) -> ::windows::core::Result<Self> {
        let item = ::std::convert::TryInto::try_into(value)?;
        Ok(::windows::core::InParam::owned(item))
    }
}
impl ::core::convert::TryFrom<CompositionStrokeDashArray>
    for ::windows::Foundation::Collections::IVector<f32>
{
    type Error = ::windows::core::Error;
    fn try_from(value: CompositionStrokeDashArray) -> ::windows::core::Result<Self> {
        ::core::convert::TryFrom::try_from(&value)
    }
}
impl ::core::convert::TryFrom<&CompositionStrokeDashArray>
    for ::windows::Foundation::Collections::IVector<f32>
{
    type Error = ::windows::core::Error;
    fn try_from(value: &CompositionStrokeDashArray) -> ::windows::core::Result<Self> {
        ::windows::core::Interface::cast(value)
    }
}
impl<'a> ::core::convert::TryFrom<&CompositionStrokeDashArray>
    for ::windows::core::InParam<'a, ::windows::Foundation::Collections::IVector<f32>>
{
    type Error = ::windows::core::Error;
    fn try_from(value: &CompositionStrokeDashArray) -> ::windows::core::Result<Self> {
        let item = ::std::convert::TryInto::try_into(value)?;
        Ok(::windows::core::InParam::owned(item))
    }
}
impl ::core::convert::From<CompositionStrokeDashArray> for CompositionObject {
    fn from(value: CompositionStrokeDashArray) -> Self {
        ::core::convert::From::from(&value)
    }
}
impl ::core::convert::From<&CompositionStrokeDashArray> for CompositionObject {
    fn from(value: &CompositionStrokeDashArray) -> Self {
        ::windows::core::Interface::cast(value).unwrap()
    }
}
impl<'a> ::core::convert::From<&CompositionStrokeDashArray>
    for ::windows::core::InParam<'a, CompositionObject>
{
    fn from(value: &CompositionStrokeDashArray) -> Self {
        ::windows::core::InParam::owned(value.into())
    }
}
unsafe impl ::core::marker::Send for CompositionStrokeDashArray {}
unsafe impl ::core::marker::Sync for CompositionStrokeDashArray {}
#[doc = "*Required features: `\"UI_Composition\"`*"]
#[repr(transparent)]
pub struct CompositionSurfaceBrush(::windows::core::IUnknown);
impl CompositionSurfaceBrush {
    pub fn PopulatePropertyInfo(
        &self,
        propertyname: &::windows::core::HSTRING,
        propertyinfo: &AnimationPropertyInfo,
    ) -> ::windows::core::Result<()> {
        let this = &::windows::core::Interface::cast::<IAnimationObject>(self)?;
        unsafe {
            (::windows::core::Vtable::vtable(this).PopulatePropertyInfo)(
                ::windows::core::Vtable::as_raw(this),
                ::core::mem::transmute_copy(propertyname),
                ::core::mem::transmute_copy(propertyinfo),
            )
            .ok()
        }
    }
    pub fn Close(&self) -> ::windows::core::Result<()> {
        let this = &::windows::core::Interface::cast::<::windows::Foundation::IClosable>(self)?;
        unsafe {
            (::windows::core::Vtable::vtable(this).Close)(::windows::core::Vtable::as_raw(this))
                .ok()
        }
    }
    pub fn Compositor(&self) -> ::windows::core::Result<Compositor> {
        let this = &::windows::core::Interface::cast::<ICompositionObject>(self)?;
        unsafe {
            let mut result__ = ::core::mem::MaybeUninit::zeroed();
            (::windows::core::Vtable::vtable(this).Compositor)(
                ::windows::core::Vtable::as_raw(this),
                result__.as_mut_ptr(),
            )
            .from_abi::<Compositor>(result__)
        }
    }
    pub fn Properties(&self) -> ::windows::core::Result<CompositionPropertySet> {
        let this = &::windows::core::Interface::cast::<ICompositionObject>(self)?;
        unsafe {
            let mut result__ = ::core::mem::MaybeUninit::zeroed();
            (::windows::core::Vtable::vtable(this).Properties)(
                ::windows::core::Vtable::as_raw(this),
                result__.as_mut_ptr(),
            )
            .from_abi::<CompositionPropertySet>(result__)
        }
    }
    pub fn StartAnimation<'a, P0>(
        &self,
        propertyname: &::windows::core::HSTRING,
        animation: P0,
    ) -> ::windows::core::Result<()>
    where
        P0: ::std::convert::Into<::windows::core::InParam<'a, CompositionAnimation>>,
    {
        let this = &::windows::core::Interface::cast::<ICompositionObject>(self)?;
        unsafe {
            (::windows::core::Vtable::vtable(this).StartAnimation)(
                ::windows::core::Vtable::as_raw(this),
                ::core::mem::transmute_copy(propertyname),
                animation.into().abi(),
            )
            .ok()
        }
    }
    pub fn StopAnimation(
        &self,
        propertyname: &::windows::core::HSTRING,
    ) -> ::windows::core::Result<()> {
        let this = &::windows::core::Interface::cast::<ICompositionObject>(self)?;
        unsafe {
            (::windows::core::Vtable::vtable(this).StopAnimation)(
                ::windows::core::Vtable::as_raw(this),
                ::core::mem::transmute_copy(propertyname),
            )
            .ok()
        }
    }
    pub fn Comment(&self) -> ::windows::core::Result<::windows::core::HSTRING> {
        let this = &::windows::core::Interface::cast::<ICompositionObject2>(self)?;
        unsafe {
            let mut result__ = ::core::mem::MaybeUninit::zeroed();
            (::windows::core::Vtable::vtable(this).Comment)(
                ::windows::core::Vtable::as_raw(this),
                result__.as_mut_ptr(),
            )
            .from_abi::<::windows::core::HSTRING>(result__)
        }
    }
    pub fn SetComment(&self, value: &::windows::core::HSTRING) -> ::windows::core::Result<()> {
        let this = &::windows::core::Interface::cast::<ICompositionObject2>(self)?;
        unsafe {
            (::windows::core::Vtable::vtable(this).SetComment)(
                ::windows::core::Vtable::as_raw(this),
                ::core::mem::transmute_copy(value),
            )
            .ok()
        }
    }
    pub fn ImplicitAnimations(&self) -> ::windows::core::Result<ImplicitAnimationCollection> {
        let this = &::windows::core::Interface::cast::<ICompositionObject2>(self)?;
        unsafe {
            let mut result__ = ::core::mem::MaybeUninit::zeroed();
            (::windows::core::Vtable::vtable(this).ImplicitAnimations)(
                ::windows::core::Vtable::as_raw(this),
                result__.as_mut_ptr(),
            )
            .from_abi::<ImplicitAnimationCollection>(result__)
        }
    }
    pub fn SetImplicitAnimations(
        &self,
        value: &ImplicitAnimationCollection,
    ) -> ::windows::core::Result<()> {
        let this = &::windows::core::Interface::cast::<ICompositionObject2>(self)?;
        unsafe {
            (::windows::core::Vtable::vtable(this).SetImplicitAnimations)(
                ::windows::core::Vtable::as_raw(this),
                ::core::mem::transmute_copy(value),
            )
            .ok()
        }
    }
    pub fn StartAnimationGroup<'a, P0, E0>(&self, value: P0) -> ::windows::core::Result<()>
    where
        P0: ::std::convert::TryInto<
            ::windows::core::InParam<'a, ICompositionAnimationBase>,
            Error = E0,
        >,
        E0: ::std::convert::Into<::windows::core::Error>,
    {
        let this = &::windows::core::Interface::cast::<ICompositionObject2>(self)?;
        unsafe {
            (::windows::core::Vtable::vtable(this).StartAnimationGroup)(
                ::windows::core::Vtable::as_raw(this),
                value.try_into().map_err(|e| e.into())?.abi(),
            )
            .ok()
        }
    }
    pub fn StopAnimationGroup<'a, P0, E0>(&self, value: P0) -> ::windows::core::Result<()>
    where
        P0: ::std::convert::TryInto<
            ::windows::core::InParam<'a, ICompositionAnimationBase>,
            Error = E0,
        >,
        E0: ::std::convert::Into<::windows::core::Error>,
    {
        let this = &::windows::core::Interface::cast::<ICompositionObject2>(self)?;
        unsafe {
            (::windows::core::Vtable::vtable(this).StopAnimationGroup)(
                ::windows::core::Vtable::as_raw(this),
                value.try_into().map_err(|e| e.into())?.abi(),
            )
            .ok()
        }
    }
    #[doc = "*Required features: `\"UI_Dispatching\"`*"]
    #[cfg(feature = "UI_Dispatching")]
    pub fn DispatcherQueue(&self) -> ::windows::core::Result<super::Dispatching::DispatcherQueue> {
        let this = &::windows::core::Interface::cast::<ICompositionObject3>(self)?;
        unsafe {
            let mut result__ = ::core::mem::MaybeUninit::zeroed();
            (::windows::core::Vtable::vtable(this).DispatcherQueue)(
                ::windows::core::Vtable::as_raw(this),
                result__.as_mut_ptr(),
            )
            .from_abi::<super::Dispatching::DispatcherQueue>(result__)
        }
    }
    pub fn TryGetAnimationController(
        &self,
        propertyname: &::windows::core::HSTRING,
    ) -> ::windows::core::Result<AnimationController> {
        let this = &::windows::core::Interface::cast::<ICompositionObject4>(self)?;
        unsafe {
            let mut result__ = ::core::mem::MaybeUninit::zeroed();
            (::windows::core::Vtable::vtable(this).TryGetAnimationController)(
                ::windows::core::Vtable::as_raw(this),
                ::core::mem::transmute_copy(propertyname),
                result__.as_mut_ptr(),
            )
            .from_abi::<AnimationController>(result__)
        }
    }
    pub fn StartAnimationWithController<'a, P0>(
        &self,
        propertyname: &::windows::core::HSTRING,
        animation: P0,
        animationcontroller: &AnimationController,
    ) -> ::windows::core::Result<()>
    where
        P0: ::std::convert::Into<::windows::core::InParam<'a, CompositionAnimation>>,
    {
        let this = &::windows::core::Interface::cast::<ICompositionObject5>(self)?;
        unsafe {
            (::windows::core::Vtable::vtable(this).StartAnimationWithController)(
                ::windows::core::Vtable::as_raw(this),
                ::core::mem::transmute_copy(propertyname),
                animation.into().abi(),
                ::core::mem::transmute_copy(animationcontroller),
            )
            .ok()
        }
    }
    pub fn BitmapInterpolationMode(
        &self,
    ) -> ::windows::core::Result<CompositionBitmapInterpolationMode> {
        let this = self;
        unsafe {
            let mut result__ = ::core::mem::MaybeUninit::zeroed();
            (::windows::core::Vtable::vtable(this).BitmapInterpolationMode)(
                ::windows::core::Vtable::as_raw(this),
                result__.as_mut_ptr(),
            )
            .from_abi::<CompositionBitmapInterpolationMode>(result__)
        }
    }
    pub fn SetBitmapInterpolationMode(
        &self,
        value: CompositionBitmapInterpolationMode,
    ) -> ::windows::core::Result<()> {
        let this = self;
        unsafe {
            (::windows::core::Vtable::vtable(this).SetBitmapInterpolationMode)(
                ::windows::core::Vtable::as_raw(this),
                value,
            )
            .ok()
        }
    }
    pub fn HorizontalAlignmentRatio(&self) -> ::windows::core::Result<f32> {
        let this = self;
        unsafe {
            let mut result__ = ::core::mem::MaybeUninit::zeroed();
            (::windows::core::Vtable::vtable(this).HorizontalAlignmentRatio)(
                ::windows::core::Vtable::as_raw(this),
                result__.as_mut_ptr(),
            )
            .from_abi::<f32>(result__)
        }
    }
    pub fn SetHorizontalAlignmentRatio(&self, value: f32) -> ::windows::core::Result<()> {
        let this = self;
        unsafe {
            (::windows::core::Vtable::vtable(this).SetHorizontalAlignmentRatio)(
                ::windows::core::Vtable::as_raw(this),
                value,
            )
            .ok()
        }
    }
    pub fn Stretch(&self) -> ::windows::core::Result<CompositionStretch> {
        let this = self;
        unsafe {
            let mut result__ = ::core::mem::MaybeUninit::zeroed();
            (::windows::core::Vtable::vtable(this).Stretch)(
                ::windows::core::Vtable::as_raw(this),
                result__.as_mut_ptr(),
            )
            .from_abi::<CompositionStretch>(result__)
        }
    }
    pub fn SetStretch(&self, value: CompositionStretch) -> ::windows::core::Result<()> {
        let this = self;
        unsafe {
            (::windows::core::Vtable::vtable(this).SetStretch)(
                ::windows::core::Vtable::as_raw(this),
                value,
            )
            .ok()
        }
    }
    pub fn Surface(&self) -> ::windows::core::Result<ICompositionSurface> {
        let this = self;
        unsafe {
            let mut result__ = ::core::mem::MaybeUninit::zeroed();
            (::windows::core::Vtable::vtable(this).Surface)(
                ::windows::core::Vtable::as_raw(this),
                result__.as_mut_ptr(),
            )
            .from_abi::<ICompositionSurface>(result__)
        }
    }
    pub fn SetSurface<'a, P0, E0>(&self, value: P0) -> ::windows::core::Result<()>
    where
        P0: ::std::convert::TryInto<::windows::core::InParam<'a, ICompositionSurface>, Error = E0>,
        E0: ::std::convert::Into<::windows::core::Error>,
    {
        let this = self;
        unsafe {
            (::windows::core::Vtable::vtable(this).SetSurface)(
                ::windows::core::Vtable::as_raw(this),
                value.try_into().map_err(|e| e.into())?.abi(),
            )
            .ok()
        }
    }
    pub fn VerticalAlignmentRatio(&self) -> ::windows::core::Result<f32> {
        let this = self;
        unsafe {
            let mut result__ = ::core::mem::MaybeUninit::zeroed();
            (::windows::core::Vtable::vtable(this).VerticalAlignmentRatio)(
                ::windows::core::Vtable::as_raw(this),
                result__.as_mut_ptr(),
            )
            .from_abi::<f32>(result__)
        }
    }
    pub fn SetVerticalAlignmentRatio(&self, value: f32) -> ::windows::core::Result<()> {
        let this = self;
        unsafe {
            (::windows::core::Vtable::vtable(this).SetVerticalAlignmentRatio)(
                ::windows::core::Vtable::as_raw(this),
                value,
            )
            .ok()
        }
    }
    pub fn AnchorPoint(&self) -> ::windows::core::Result<::windows::Foundation::Numerics::Vector2> {
        let this = &::windows::core::Interface::cast::<ICompositionSurfaceBrush2>(self)?;
        unsafe {
            let mut result__ = ::core::mem::MaybeUninit::zeroed();
            (::windows::core::Vtable::vtable(this).AnchorPoint)(
                ::windows::core::Vtable::as_raw(this),
                result__.as_mut_ptr(),
            )
            .from_abi::<::windows::Foundation::Numerics::Vector2>(result__)
        }
    }
    pub fn SetAnchorPoint(
        &self,
        value: ::windows::Foundation::Numerics::Vector2,
    ) -> ::windows::core::Result<()> {
        let this = &::windows::core::Interface::cast::<ICompositionSurfaceBrush2>(self)?;
        unsafe {
            (::windows::core::Vtable::vtable(this).SetAnchorPoint)(
                ::windows::core::Vtable::as_raw(this),
                value,
            )
            .ok()
        }
    }
    pub fn CenterPoint(&self) -> ::windows::core::Result<::windows::Foundation::Numerics::Vector2> {
        let this = &::windows::core::Interface::cast::<ICompositionSurfaceBrush2>(self)?;
        unsafe {
            let mut result__ = ::core::mem::MaybeUninit::zeroed();
            (::windows::core::Vtable::vtable(this).CenterPoint)(
                ::windows::core::Vtable::as_raw(this),
                result__.as_mut_ptr(),
            )
            .from_abi::<::windows::Foundation::Numerics::Vector2>(result__)
        }
    }
    pub fn SetCenterPoint(
        &self,
        value: ::windows::Foundation::Numerics::Vector2,
    ) -> ::windows::core::Result<()> {
        let this = &::windows::core::Interface::cast::<ICompositionSurfaceBrush2>(self)?;
        unsafe {
            (::windows::core::Vtable::vtable(this).SetCenterPoint)(
                ::windows::core::Vtable::as_raw(this),
                value,
            )
            .ok()
        }
    }
    pub fn Offset(&self) -> ::windows::core::Result<::windows::Foundation::Numerics::Vector2> {
        let this = &::windows::core::Interface::cast::<ICompositionSurfaceBrush2>(self)?;
        unsafe {
            let mut result__ = ::core::mem::MaybeUninit::zeroed();
            (::windows::core::Vtable::vtable(this).Offset)(
                ::windows::core::Vtable::as_raw(this),
                result__.as_mut_ptr(),
            )
            .from_abi::<::windows::Foundation::Numerics::Vector2>(result__)
        }
    }
    pub fn SetOffset(
        &self,
        value: ::windows::Foundation::Numerics::Vector2,
    ) -> ::windows::core::Result<()> {
        let this = &::windows::core::Interface::cast::<ICompositionSurfaceBrush2>(self)?;
        unsafe {
            (::windows::core::Vtable::vtable(this).SetOffset)(
                ::windows::core::Vtable::as_raw(this),
                value,
            )
            .ok()
        }
    }
    pub fn RotationAngle(&self) -> ::windows::core::Result<f32> {
        let this = &::windows::core::Interface::cast::<ICompositionSurfaceBrush2>(self)?;
        unsafe {
            let mut result__ = ::core::mem::MaybeUninit::zeroed();
            (::windows::core::Vtable::vtable(this).RotationAngle)(
                ::windows::core::Vtable::as_raw(this),
                result__.as_mut_ptr(),
            )
            .from_abi::<f32>(result__)
        }
    }
    pub fn SetRotationAngle(&self, value: f32) -> ::windows::core::Result<()> {
        let this = &::windows::core::Interface::cast::<ICompositionSurfaceBrush2>(self)?;
        unsafe {
            (::windows::core::Vtable::vtable(this).SetRotationAngle)(
                ::windows::core::Vtable::as_raw(this),
                value,
            )
            .ok()
        }
    }
    pub fn RotationAngleInDegrees(&self) -> ::windows::core::Result<f32> {
        let this = &::windows::core::Interface::cast::<ICompositionSurfaceBrush2>(self)?;
        unsafe {
            let mut result__ = ::core::mem::MaybeUninit::zeroed();
            (::windows::core::Vtable::vtable(this).RotationAngleInDegrees)(
                ::windows::core::Vtable::as_raw(this),
                result__.as_mut_ptr(),
            )
            .from_abi::<f32>(result__)
        }
    }
    pub fn SetRotationAngleInDegrees(&self, value: f32) -> ::windows::core::Result<()> {
        let this = &::windows::core::Interface::cast::<ICompositionSurfaceBrush2>(self)?;
        unsafe {
            (::windows::core::Vtable::vtable(this).SetRotationAngleInDegrees)(
                ::windows::core::Vtable::as_raw(this),
                value,
            )
            .ok()
        }
    }
    pub fn Scale(&self) -> ::windows::core::Result<::windows::Foundation::Numerics::Vector2> {
        let this = &::windows::core::Interface::cast::<ICompositionSurfaceBrush2>(self)?;
        unsafe {
            let mut result__ = ::core::mem::MaybeUninit::zeroed();
            (::windows::core::Vtable::vtable(this).Scale)(
                ::windows::core::Vtable::as_raw(this),
                result__.as_mut_ptr(),
            )
            .from_abi::<::windows::Foundation::Numerics::Vector2>(result__)
        }
    }
    pub fn SetScale(
        &self,
        value: ::windows::Foundation::Numerics::Vector2,
    ) -> ::windows::core::Result<()> {
        let this = &::windows::core::Interface::cast::<ICompositionSurfaceBrush2>(self)?;
        unsafe {
            (::windows::core::Vtable::vtable(this).SetScale)(
                ::windows::core::Vtable::as_raw(this),
                value,
            )
            .ok()
        }
    }
    pub fn TransformMatrix(
        &self,
    ) -> ::windows::core::Result<::windows::Foundation::Numerics::Matrix3x2> {
        let this = &::windows::core::Interface::cast::<ICompositionSurfaceBrush2>(self)?;
        unsafe {
            let mut result__ = ::core::mem::MaybeUninit::zeroed();
            (::windows::core::Vtable::vtable(this).TransformMatrix)(
                ::windows::core::Vtable::as_raw(this),
                result__.as_mut_ptr(),
            )
            .from_abi::<::windows::Foundation::Numerics::Matrix3x2>(result__)
        }
    }
    pub fn SetTransformMatrix(
        &self,
        value: ::windows::Foundation::Numerics::Matrix3x2,
    ) -> ::windows::core::Result<()> {
        let this = &::windows::core::Interface::cast::<ICompositionSurfaceBrush2>(self)?;
        unsafe {
            (::windows::core::Vtable::vtable(this).SetTransformMatrix)(
                ::windows::core::Vtable::as_raw(this),
                value,
            )
            .ok()
        }
    }
    pub fn SnapToPixels(&self) -> ::windows::core::Result<bool> {
        let this = &::windows::core::Interface::cast::<ICompositionSurfaceBrush3>(self)?;
        unsafe {
            let mut result__ = ::core::mem::MaybeUninit::zeroed();
            (::windows::core::Vtable::vtable(this).SnapToPixels)(
                ::windows::core::Vtable::as_raw(this),
                result__.as_mut_ptr(),
            )
            .from_abi::<bool>(result__)
        }
    }
    pub fn SetSnapToPixels(&self, value: bool) -> ::windows::core::Result<()> {
        let this = &::windows::core::Interface::cast::<ICompositionSurfaceBrush3>(self)?;
        unsafe {
            (::windows::core::Vtable::vtable(this).SetSnapToPixels)(
                ::windows::core::Vtable::as_raw(this),
                value,
            )
            .ok()
        }
    }
}
impl ::core::clone::Clone for CompositionSurfaceBrush {
    fn clone(&self) -> Self {
        Self(self.0.clone())
    }
}
impl ::core::cmp::PartialEq for CompositionSurfaceBrush {
    fn eq(&self, other: &Self) -> bool {
        self.0 == other.0
    }
}
impl ::core::cmp::Eq for CompositionSurfaceBrush {}
impl ::core::fmt::Debug for CompositionSurfaceBrush {
    fn fmt(&self, f: &mut ::core::fmt::Formatter<'_>) -> ::core::fmt::Result {
        f.debug_tuple("CompositionSurfaceBrush").field(&self.0).finish()
    }
}
unsafe impl ::windows::core::RuntimeType for CompositionSurfaceBrush {
    const SIGNATURE : ::windows::core::ConstBuffer = ::windows::core::ConstBuffer::from_slice ( b"rc(Microsoft.UI.Composition.CompositionSurfaceBrush;{616bb5a5-0a33-512d-b4b1-3d3734f04aca})" ) ;
    type DefaultType = ::core::option::Option<Self>;
    fn from_default(from: &Self::DefaultType) -> ::windows::core::Result<Self> {
        from.as_ref().cloned().ok_or(::windows::core::Error::OK)
    }
}
unsafe impl ::windows::core::Vtable for CompositionSurfaceBrush {
    type Vtable = ICompositionSurfaceBrush_Vtbl;
}
unsafe impl ::windows::core::Interface for CompositionSurfaceBrush {
    const IID: ::windows::core::GUID =
        <ICompositionSurfaceBrush as ::windows::core::Interface>::IID;
}
impl ::windows::core::RuntimeName for CompositionSurfaceBrush {
    const NAME: &'static str = "Microsoft.UI.Composition.CompositionSurfaceBrush";
}
::windows::core::interface_hierarchy!(
    CompositionSurfaceBrush,
    ::windows::core::IUnknown,
    ::windows::core::IInspectable
);
impl ::core::convert::TryFrom<CompositionSurfaceBrush> for IAnimationObject {
    type Error = ::windows::core::Error;
    fn try_from(value: CompositionSurfaceBrush) -> ::windows::core::Result<Self> {
        ::core::convert::TryFrom::try_from(&value)
    }
}
impl ::core::convert::TryFrom<&CompositionSurfaceBrush> for IAnimationObject {
    type Error = ::windows::core::Error;
    fn try_from(value: &CompositionSurfaceBrush) -> ::windows::core::Result<Self> {
        ::windows::core::Interface::cast(value)
    }
}
impl<'a> ::core::convert::TryFrom<&CompositionSurfaceBrush>
    for ::windows::core::InParam<'a, IAnimationObject>
{
    type Error = ::windows::core::Error;
    fn try_from(value: &CompositionSurfaceBrush) -> ::windows::core::Result<Self> {
        let item = ::std::convert::TryInto::try_into(value)?;
        Ok(::windows::core::InParam::owned(item))
    }
}
impl ::core::convert::TryFrom<CompositionSurfaceBrush> for ::windows::Foundation::IClosable {
    type Error = ::windows::core::Error;
    fn try_from(value: CompositionSurfaceBrush) -> ::windows::core::Result<Self> {
        ::core::convert::TryFrom::try_from(&value)
    }
}
impl ::core::convert::TryFrom<&CompositionSurfaceBrush> for ::windows::Foundation::IClosable {
    type Error = ::windows::core::Error;
    fn try_from(value: &CompositionSurfaceBrush) -> ::windows::core::Result<Self> {
        ::windows::core::Interface::cast(value)
    }
}
impl<'a> ::core::convert::TryFrom<&CompositionSurfaceBrush>
    for ::windows::core::InParam<'a, ::windows::Foundation::IClosable>
{
    type Error = ::windows::core::Error;
    fn try_from(value: &CompositionSurfaceBrush) -> ::windows::core::Result<Self> {
        let item = ::std::convert::TryInto::try_into(value)?;
        Ok(::windows::core::InParam::owned(item))
    }
}
impl ::core::convert::From<CompositionSurfaceBrush> for CompositionBrush {
    fn from(value: CompositionSurfaceBrush) -> Self {
        ::core::convert::From::from(&value)
    }
}
impl ::core::convert::From<&CompositionSurfaceBrush> for CompositionBrush {
    fn from(value: &CompositionSurfaceBrush) -> Self {
        ::windows::core::Interface::cast(value).unwrap()
    }
}
impl<'a> ::core::convert::From<&CompositionSurfaceBrush>
    for ::windows::core::InParam<'a, CompositionBrush>
{
    fn from(value: &CompositionSurfaceBrush) -> Self {
        ::windows::core::InParam::owned(value.into())
    }
}
impl ::core::convert::From<CompositionSurfaceBrush> for CompositionObject {
    fn from(value: CompositionSurfaceBrush) -> Self {
        ::core::convert::From::from(&value)
    }
}
impl ::core::convert::From<&CompositionSurfaceBrush> for CompositionObject {
    fn from(value: &CompositionSurfaceBrush) -> Self {
        ::windows::core::Interface::cast(value).unwrap()
    }
}
impl<'a> ::core::convert::From<&CompositionSurfaceBrush>
    for ::windows::core::InParam<'a, CompositionObject>
{
    fn from(value: &CompositionSurfaceBrush) -> Self {
        ::windows::core::InParam::owned(value.into())
    }
}
unsafe impl ::core::marker::Send for CompositionSurfaceBrush {}
unsafe impl ::core::marker::Sync for CompositionSurfaceBrush {}
#[doc = "*Required features: `\"UI_Composition\"`*"]
#[repr(transparent)]
pub struct CompositionTransform(::windows::core::IUnknown);
impl CompositionTransform {
    pub fn PopulatePropertyInfo(
        &self,
        propertyname: &::windows::core::HSTRING,
        propertyinfo: &AnimationPropertyInfo,
    ) -> ::windows::core::Result<()> {
        let this = &::windows::core::Interface::cast::<IAnimationObject>(self)?;
        unsafe {
            (::windows::core::Vtable::vtable(this).PopulatePropertyInfo)(
                ::windows::core::Vtable::as_raw(this),
                ::core::mem::transmute_copy(propertyname),
                ::core::mem::transmute_copy(propertyinfo),
            )
            .ok()
        }
    }
    pub fn Close(&self) -> ::windows::core::Result<()> {
        let this = &::windows::core::Interface::cast::<::windows::Foundation::IClosable>(self)?;
        unsafe {
            (::windows::core::Vtable::vtable(this).Close)(::windows::core::Vtable::as_raw(this))
                .ok()
        }
    }
    pub fn Compositor(&self) -> ::windows::core::Result<Compositor> {
        let this = &::windows::core::Interface::cast::<ICompositionObject>(self)?;
        unsafe {
            let mut result__ = ::core::mem::MaybeUninit::zeroed();
            (::windows::core::Vtable::vtable(this).Compositor)(
                ::windows::core::Vtable::as_raw(this),
                result__.as_mut_ptr(),
            )
            .from_abi::<Compositor>(result__)
        }
    }
    pub fn Properties(&self) -> ::windows::core::Result<CompositionPropertySet> {
        let this = &::windows::core::Interface::cast::<ICompositionObject>(self)?;
        unsafe {
            let mut result__ = ::core::mem::MaybeUninit::zeroed();
            (::windows::core::Vtable::vtable(this).Properties)(
                ::windows::core::Vtable::as_raw(this),
                result__.as_mut_ptr(),
            )
            .from_abi::<CompositionPropertySet>(result__)
        }
    }
    pub fn StartAnimation<'a, P0>(
        &self,
        propertyname: &::windows::core::HSTRING,
        animation: P0,
    ) -> ::windows::core::Result<()>
    where
        P0: ::std::convert::Into<::windows::core::InParam<'a, CompositionAnimation>>,
    {
        let this = &::windows::core::Interface::cast::<ICompositionObject>(self)?;
        unsafe {
            (::windows::core::Vtable::vtable(this).StartAnimation)(
                ::windows::core::Vtable::as_raw(this),
                ::core::mem::transmute_copy(propertyname),
                animation.into().abi(),
            )
            .ok()
        }
    }
    pub fn StopAnimation(
        &self,
        propertyname: &::windows::core::HSTRING,
    ) -> ::windows::core::Result<()> {
        let this = &::windows::core::Interface::cast::<ICompositionObject>(self)?;
        unsafe {
            (::windows::core::Vtable::vtable(this).StopAnimation)(
                ::windows::core::Vtable::as_raw(this),
                ::core::mem::transmute_copy(propertyname),
            )
            .ok()
        }
    }
    pub fn Comment(&self) -> ::windows::core::Result<::windows::core::HSTRING> {
        let this = &::windows::core::Interface::cast::<ICompositionObject2>(self)?;
        unsafe {
            let mut result__ = ::core::mem::MaybeUninit::zeroed();
            (::windows::core::Vtable::vtable(this).Comment)(
                ::windows::core::Vtable::as_raw(this),
                result__.as_mut_ptr(),
            )
            .from_abi::<::windows::core::HSTRING>(result__)
        }
    }
    pub fn SetComment(&self, value: &::windows::core::HSTRING) -> ::windows::core::Result<()> {
        let this = &::windows::core::Interface::cast::<ICompositionObject2>(self)?;
        unsafe {
            (::windows::core::Vtable::vtable(this).SetComment)(
                ::windows::core::Vtable::as_raw(this),
                ::core::mem::transmute_copy(value),
            )
            .ok()
        }
    }
    pub fn ImplicitAnimations(&self) -> ::windows::core::Result<ImplicitAnimationCollection> {
        let this = &::windows::core::Interface::cast::<ICompositionObject2>(self)?;
        unsafe {
            let mut result__ = ::core::mem::MaybeUninit::zeroed();
            (::windows::core::Vtable::vtable(this).ImplicitAnimations)(
                ::windows::core::Vtable::as_raw(this),
                result__.as_mut_ptr(),
            )
            .from_abi::<ImplicitAnimationCollection>(result__)
        }
    }
    pub fn SetImplicitAnimations(
        &self,
        value: &ImplicitAnimationCollection,
    ) -> ::windows::core::Result<()> {
        let this = &::windows::core::Interface::cast::<ICompositionObject2>(self)?;
        unsafe {
            (::windows::core::Vtable::vtable(this).SetImplicitAnimations)(
                ::windows::core::Vtable::as_raw(this),
                ::core::mem::transmute_copy(value),
            )
            .ok()
        }
    }
    pub fn StartAnimationGroup<'a, P0, E0>(&self, value: P0) -> ::windows::core::Result<()>
    where
        P0: ::std::convert::TryInto<
            ::windows::core::InParam<'a, ICompositionAnimationBase>,
            Error = E0,
        >,
        E0: ::std::convert::Into<::windows::core::Error>,
    {
        let this = &::windows::core::Interface::cast::<ICompositionObject2>(self)?;
        unsafe {
            (::windows::core::Vtable::vtable(this).StartAnimationGroup)(
                ::windows::core::Vtable::as_raw(this),
                value.try_into().map_err(|e| e.into())?.abi(),
            )
            .ok()
        }
    }
    pub fn StopAnimationGroup<'a, P0, E0>(&self, value: P0) -> ::windows::core::Result<()>
    where
        P0: ::std::convert::TryInto<
            ::windows::core::InParam<'a, ICompositionAnimationBase>,
            Error = E0,
        >,
        E0: ::std::convert::Into<::windows::core::Error>,
    {
        let this = &::windows::core::Interface::cast::<ICompositionObject2>(self)?;
        unsafe {
            (::windows::core::Vtable::vtable(this).StopAnimationGroup)(
                ::windows::core::Vtable::as_raw(this),
                value.try_into().map_err(|e| e.into())?.abi(),
            )
            .ok()
        }
    }
    #[doc = "*Required features: `\"UI_Dispatching\"`*"]
    #[cfg(feature = "UI_Dispatching")]
    pub fn DispatcherQueue(&self) -> ::windows::core::Result<super::Dispatching::DispatcherQueue> {
        let this = &::windows::core::Interface::cast::<ICompositionObject3>(self)?;
        unsafe {
            let mut result__ = ::core::mem::MaybeUninit::zeroed();
            (::windows::core::Vtable::vtable(this).DispatcherQueue)(
                ::windows::core::Vtable::as_raw(this),
                result__.as_mut_ptr(),
            )
            .from_abi::<super::Dispatching::DispatcherQueue>(result__)
        }
    }
    pub fn TryGetAnimationController(
        &self,
        propertyname: &::windows::core::HSTRING,
    ) -> ::windows::core::Result<AnimationController> {
        let this = &::windows::core::Interface::cast::<ICompositionObject4>(self)?;
        unsafe {
            let mut result__ = ::core::mem::MaybeUninit::zeroed();
            (::windows::core::Vtable::vtable(this).TryGetAnimationController)(
                ::windows::core::Vtable::as_raw(this),
                ::core::mem::transmute_copy(propertyname),
                result__.as_mut_ptr(),
            )
            .from_abi::<AnimationController>(result__)
        }
    }
    pub fn StartAnimationWithController<'a, P0>(
        &self,
        propertyname: &::windows::core::HSTRING,
        animation: P0,
        animationcontroller: &AnimationController,
    ) -> ::windows::core::Result<()>
    where
        P0: ::std::convert::Into<::windows::core::InParam<'a, CompositionAnimation>>,
    {
        let this = &::windows::core::Interface::cast::<ICompositionObject5>(self)?;
        unsafe {
            (::windows::core::Vtable::vtable(this).StartAnimationWithController)(
                ::windows::core::Vtable::as_raw(this),
                ::core::mem::transmute_copy(propertyname),
                animation.into().abi(),
                ::core::mem::transmute_copy(animationcontroller),
            )
            .ok()
        }
    }
}
impl ::core::clone::Clone for CompositionTransform {
    fn clone(&self) -> Self {
        Self(self.0.clone())
    }
}
impl ::core::cmp::PartialEq for CompositionTransform {
    fn eq(&self, other: &Self) -> bool {
        self.0 == other.0
    }
}
impl ::core::cmp::Eq for CompositionTransform {}
impl ::core::fmt::Debug for CompositionTransform {
    fn fmt(&self, f: &mut ::core::fmt::Formatter<'_>) -> ::core::fmt::Result {
        f.debug_tuple("CompositionTransform").field(&self.0).finish()
    }
}
unsafe impl ::windows::core::RuntimeType for CompositionTransform {
    const SIGNATURE: ::windows::core::ConstBuffer = ::windows::core::ConstBuffer::from_slice(
        b"rc(Microsoft.UI.Composition.CompositionTransform;{670e1826-1932-51d0-bbb3-063b4ca94b56})",
    );
    type DefaultType = ::core::option::Option<Self>;
    fn from_default(from: &Self::DefaultType) -> ::windows::core::Result<Self> {
        from.as_ref().cloned().ok_or(::windows::core::Error::OK)
    }
}
unsafe impl ::windows::core::Vtable for CompositionTransform {
    type Vtable = ICompositionTransform_Vtbl;
}
unsafe impl ::windows::core::Interface for CompositionTransform {
    const IID: ::windows::core::GUID = <ICompositionTransform as ::windows::core::Interface>::IID;
}
impl ::windows::core::RuntimeName for CompositionTransform {
    const NAME: &'static str = "Microsoft.UI.Composition.CompositionTransform";
}
::windows::core::interface_hierarchy!(
    CompositionTransform,
    ::windows::core::IUnknown,
    ::windows::core::IInspectable
);
impl ::core::convert::TryFrom<CompositionTransform> for IAnimationObject {
    type Error = ::windows::core::Error;
    fn try_from(value: CompositionTransform) -> ::windows::core::Result<Self> {
        ::core::convert::TryFrom::try_from(&value)
    }
}
impl ::core::convert::TryFrom<&CompositionTransform> for IAnimationObject {
    type Error = ::windows::core::Error;
    fn try_from(value: &CompositionTransform) -> ::windows::core::Result<Self> {
        ::windows::core::Interface::cast(value)
    }
}
impl<'a> ::core::convert::TryFrom<&CompositionTransform>
    for ::windows::core::InParam<'a, IAnimationObject>
{
    type Error = ::windows::core::Error;
    fn try_from(value: &CompositionTransform) -> ::windows::core::Result<Self> {
        let item = ::std::convert::TryInto::try_into(value)?;
        Ok(::windows::core::InParam::owned(item))
    }
}
impl ::core::convert::TryFrom<CompositionTransform> for ::windows::Foundation::IClosable {
    type Error = ::windows::core::Error;
    fn try_from(value: CompositionTransform) -> ::windows::core::Result<Self> {
        ::core::convert::TryFrom::try_from(&value)
    }
}
impl ::core::convert::TryFrom<&CompositionTransform> for ::windows::Foundation::IClosable {
    type Error = ::windows::core::Error;
    fn try_from(value: &CompositionTransform) -> ::windows::core::Result<Self> {
        ::windows::core::Interface::cast(value)
    }
}
impl<'a> ::core::convert::TryFrom<&CompositionTransform>
    for ::windows::core::InParam<'a, ::windows::Foundation::IClosable>
{
    type Error = ::windows::core::Error;
    fn try_from(value: &CompositionTransform) -> ::windows::core::Result<Self> {
        let item = ::std::convert::TryInto::try_into(value)?;
        Ok(::windows::core::InParam::owned(item))
    }
}
impl ::core::convert::From<CompositionTransform> for CompositionObject {
    fn from(value: CompositionTransform) -> Self {
        ::core::convert::From::from(&value)
    }
}
impl ::core::convert::From<&CompositionTransform> for CompositionObject {
    fn from(value: &CompositionTransform) -> Self {
        ::windows::core::Interface::cast(value).unwrap()
    }
}
impl<'a> ::core::convert::From<&CompositionTransform>
    for ::windows::core::InParam<'a, CompositionObject>
{
    fn from(value: &CompositionTransform) -> Self {
        ::windows::core::InParam::owned(value.into())
    }
}
unsafe impl ::core::marker::Send for CompositionTransform {}
unsafe impl ::core::marker::Sync for CompositionTransform {}
#[doc = "*Required features: `\"UI_Composition\"`*"]
#[repr(transparent)]
pub struct CompositionViewBox(::windows::core::IUnknown);
impl CompositionViewBox {
    pub fn PopulatePropertyInfo(
        &self,
        propertyname: &::windows::core::HSTRING,
        propertyinfo: &AnimationPropertyInfo,
    ) -> ::windows::core::Result<()> {
        let this = &::windows::core::Interface::cast::<IAnimationObject>(self)?;
        unsafe {
            (::windows::core::Vtable::vtable(this).PopulatePropertyInfo)(
                ::windows::core::Vtable::as_raw(this),
                ::core::mem::transmute_copy(propertyname),
                ::core::mem::transmute_copy(propertyinfo),
            )
            .ok()
        }
    }
    pub fn Close(&self) -> ::windows::core::Result<()> {
        let this = &::windows::core::Interface::cast::<::windows::Foundation::IClosable>(self)?;
        unsafe {
            (::windows::core::Vtable::vtable(this).Close)(::windows::core::Vtable::as_raw(this))
                .ok()
        }
    }
    pub fn Compositor(&self) -> ::windows::core::Result<Compositor> {
        let this = &::windows::core::Interface::cast::<ICompositionObject>(self)?;
        unsafe {
            let mut result__ = ::core::mem::MaybeUninit::zeroed();
            (::windows::core::Vtable::vtable(this).Compositor)(
                ::windows::core::Vtable::as_raw(this),
                result__.as_mut_ptr(),
            )
            .from_abi::<Compositor>(result__)
        }
    }
    pub fn Properties(&self) -> ::windows::core::Result<CompositionPropertySet> {
        let this = &::windows::core::Interface::cast::<ICompositionObject>(self)?;
        unsafe {
            let mut result__ = ::core::mem::MaybeUninit::zeroed();
            (::windows::core::Vtable::vtable(this).Properties)(
                ::windows::core::Vtable::as_raw(this),
                result__.as_mut_ptr(),
            )
            .from_abi::<CompositionPropertySet>(result__)
        }
    }
    pub fn StartAnimation<'a, P0>(
        &self,
        propertyname: &::windows::core::HSTRING,
        animation: P0,
    ) -> ::windows::core::Result<()>
    where
        P0: ::std::convert::Into<::windows::core::InParam<'a, CompositionAnimation>>,
    {
        let this = &::windows::core::Interface::cast::<ICompositionObject>(self)?;
        unsafe {
            (::windows::core::Vtable::vtable(this).StartAnimation)(
                ::windows::core::Vtable::as_raw(this),
                ::core::mem::transmute_copy(propertyname),
                animation.into().abi(),
            )
            .ok()
        }
    }
    pub fn StopAnimation(
        &self,
        propertyname: &::windows::core::HSTRING,
    ) -> ::windows::core::Result<()> {
        let this = &::windows::core::Interface::cast::<ICompositionObject>(self)?;
        unsafe {
            (::windows::core::Vtable::vtable(this).StopAnimation)(
                ::windows::core::Vtable::as_raw(this),
                ::core::mem::transmute_copy(propertyname),
            )
            .ok()
        }
    }
    pub fn Comment(&self) -> ::windows::core::Result<::windows::core::HSTRING> {
        let this = &::windows::core::Interface::cast::<ICompositionObject2>(self)?;
        unsafe {
            let mut result__ = ::core::mem::MaybeUninit::zeroed();
            (::windows::core::Vtable::vtable(this).Comment)(
                ::windows::core::Vtable::as_raw(this),
                result__.as_mut_ptr(),
            )
            .from_abi::<::windows::core::HSTRING>(result__)
        }
    }
    pub fn SetComment(&self, value: &::windows::core::HSTRING) -> ::windows::core::Result<()> {
        let this = &::windows::core::Interface::cast::<ICompositionObject2>(self)?;
        unsafe {
            (::windows::core::Vtable::vtable(this).SetComment)(
                ::windows::core::Vtable::as_raw(this),
                ::core::mem::transmute_copy(value),
            )
            .ok()
        }
    }
    pub fn ImplicitAnimations(&self) -> ::windows::core::Result<ImplicitAnimationCollection> {
        let this = &::windows::core::Interface::cast::<ICompositionObject2>(self)?;
        unsafe {
            let mut result__ = ::core::mem::MaybeUninit::zeroed();
            (::windows::core::Vtable::vtable(this).ImplicitAnimations)(
                ::windows::core::Vtable::as_raw(this),
                result__.as_mut_ptr(),
            )
            .from_abi::<ImplicitAnimationCollection>(result__)
        }
    }
    pub fn SetImplicitAnimations(
        &self,
        value: &ImplicitAnimationCollection,
    ) -> ::windows::core::Result<()> {
        let this = &::windows::core::Interface::cast::<ICompositionObject2>(self)?;
        unsafe {
            (::windows::core::Vtable::vtable(this).SetImplicitAnimations)(
                ::windows::core::Vtable::as_raw(this),
                ::core::mem::transmute_copy(value),
            )
            .ok()
        }
    }
    pub fn StartAnimationGroup<'a, P0, E0>(&self, value: P0) -> ::windows::core::Result<()>
    where
        P0: ::std::convert::TryInto<
            ::windows::core::InParam<'a, ICompositionAnimationBase>,
            Error = E0,
        >,
        E0: ::std::convert::Into<::windows::core::Error>,
    {
        let this = &::windows::core::Interface::cast::<ICompositionObject2>(self)?;
        unsafe {
            (::windows::core::Vtable::vtable(this).StartAnimationGroup)(
                ::windows::core::Vtable::as_raw(this),
                value.try_into().map_err(|e| e.into())?.abi(),
            )
            .ok()
        }
    }
    pub fn StopAnimationGroup<'a, P0, E0>(&self, value: P0) -> ::windows::core::Result<()>
    where
        P0: ::std::convert::TryInto<
            ::windows::core::InParam<'a, ICompositionAnimationBase>,
            Error = E0,
        >,
        E0: ::std::convert::Into<::windows::core::Error>,
    {
        let this = &::windows::core::Interface::cast::<ICompositionObject2>(self)?;
        unsafe {
            (::windows::core::Vtable::vtable(this).StopAnimationGroup)(
                ::windows::core::Vtable::as_raw(this),
                value.try_into().map_err(|e| e.into())?.abi(),
            )
            .ok()
        }
    }
    #[doc = "*Required features: `\"UI_Dispatching\"`*"]
    #[cfg(feature = "UI_Dispatching")]
    pub fn DispatcherQueue(&self) -> ::windows::core::Result<super::Dispatching::DispatcherQueue> {
        let this = &::windows::core::Interface::cast::<ICompositionObject3>(self)?;
        unsafe {
            let mut result__ = ::core::mem::MaybeUninit::zeroed();
            (::windows::core::Vtable::vtable(this).DispatcherQueue)(
                ::windows::core::Vtable::as_raw(this),
                result__.as_mut_ptr(),
            )
            .from_abi::<super::Dispatching::DispatcherQueue>(result__)
        }
    }
    pub fn TryGetAnimationController(
        &self,
        propertyname: &::windows::core::HSTRING,
    ) -> ::windows::core::Result<AnimationController> {
        let this = &::windows::core::Interface::cast::<ICompositionObject4>(self)?;
        unsafe {
            let mut result__ = ::core::mem::MaybeUninit::zeroed();
            (::windows::core::Vtable::vtable(this).TryGetAnimationController)(
                ::windows::core::Vtable::as_raw(this),
                ::core::mem::transmute_copy(propertyname),
                result__.as_mut_ptr(),
            )
            .from_abi::<AnimationController>(result__)
        }
    }
    pub fn StartAnimationWithController<'a, P0>(
        &self,
        propertyname: &::windows::core::HSTRING,
        animation: P0,
        animationcontroller: &AnimationController,
    ) -> ::windows::core::Result<()>
    where
        P0: ::std::convert::Into<::windows::core::InParam<'a, CompositionAnimation>>,
    {
        let this = &::windows::core::Interface::cast::<ICompositionObject5>(self)?;
        unsafe {
            (::windows::core::Vtable::vtable(this).StartAnimationWithController)(
                ::windows::core::Vtable::as_raw(this),
                ::core::mem::transmute_copy(propertyname),
                animation.into().abi(),
                ::core::mem::transmute_copy(animationcontroller),
            )
            .ok()
        }
    }
    pub fn HorizontalAlignmentRatio(&self) -> ::windows::core::Result<f32> {
        let this = self;
        unsafe {
            let mut result__ = ::core::mem::MaybeUninit::zeroed();
            (::windows::core::Vtable::vtable(this).HorizontalAlignmentRatio)(
                ::windows::core::Vtable::as_raw(this),
                result__.as_mut_ptr(),
            )
            .from_abi::<f32>(result__)
        }
    }
    pub fn SetHorizontalAlignmentRatio(&self, value: f32) -> ::windows::core::Result<()> {
        let this = self;
        unsafe {
            (::windows::core::Vtable::vtable(this).SetHorizontalAlignmentRatio)(
                ::windows::core::Vtable::as_raw(this),
                value,
            )
            .ok()
        }
    }
    pub fn Offset(&self) -> ::windows::core::Result<::windows::Foundation::Numerics::Vector2> {
        let this = self;
        unsafe {
            let mut result__ = ::core::mem::MaybeUninit::zeroed();
            (::windows::core::Vtable::vtable(this).Offset)(
                ::windows::core::Vtable::as_raw(this),
                result__.as_mut_ptr(),
            )
            .from_abi::<::windows::Foundation::Numerics::Vector2>(result__)
        }
    }
    pub fn SetOffset(
        &self,
        value: ::windows::Foundation::Numerics::Vector2,
    ) -> ::windows::core::Result<()> {
        let this = self;
        unsafe {
            (::windows::core::Vtable::vtable(this).SetOffset)(
                ::windows::core::Vtable::as_raw(this),
                value,
            )
            .ok()
        }
    }
    pub fn Size(&self) -> ::windows::core::Result<::windows::Foundation::Numerics::Vector2> {
        let this = self;
        unsafe {
            let mut result__ = ::core::mem::MaybeUninit::zeroed();
            (::windows::core::Vtable::vtable(this).Size)(
                ::windows::core::Vtable::as_raw(this),
                result__.as_mut_ptr(),
            )
            .from_abi::<::windows::Foundation::Numerics::Vector2>(result__)
        }
    }
    pub fn SetSize(
        &self,
        value: ::windows::Foundation::Numerics::Vector2,
    ) -> ::windows::core::Result<()> {
        let this = self;
        unsafe {
            (::windows::core::Vtable::vtable(this).SetSize)(
                ::windows::core::Vtable::as_raw(this),
                value,
            )
            .ok()
        }
    }
    pub fn Stretch(&self) -> ::windows::core::Result<CompositionStretch> {
        let this = self;
        unsafe {
            let mut result__ = ::core::mem::MaybeUninit::zeroed();
            (::windows::core::Vtable::vtable(this).Stretch)(
                ::windows::core::Vtable::as_raw(this),
                result__.as_mut_ptr(),
            )
            .from_abi::<CompositionStretch>(result__)
        }
    }
    pub fn SetStretch(&self, value: CompositionStretch) -> ::windows::core::Result<()> {
        let this = self;
        unsafe {
            (::windows::core::Vtable::vtable(this).SetStretch)(
                ::windows::core::Vtable::as_raw(this),
                value,
            )
            .ok()
        }
    }
    pub fn VerticalAlignmentRatio(&self) -> ::windows::core::Result<f32> {
        let this = self;
        unsafe {
            let mut result__ = ::core::mem::MaybeUninit::zeroed();
            (::windows::core::Vtable::vtable(this).VerticalAlignmentRatio)(
                ::windows::core::Vtable::as_raw(this),
                result__.as_mut_ptr(),
            )
            .from_abi::<f32>(result__)
        }
    }
    pub fn SetVerticalAlignmentRatio(&self, value: f32) -> ::windows::core::Result<()> {
        let this = self;
        unsafe {
            (::windows::core::Vtable::vtable(this).SetVerticalAlignmentRatio)(
                ::windows::core::Vtable::as_raw(this),
                value,
            )
            .ok()
        }
    }
}
impl ::core::clone::Clone for CompositionViewBox {
    fn clone(&self) -> Self {
        Self(self.0.clone())
    }
}
impl ::core::cmp::PartialEq for CompositionViewBox {
    fn eq(&self, other: &Self) -> bool {
        self.0 == other.0
    }
}
impl ::core::cmp::Eq for CompositionViewBox {}
impl ::core::fmt::Debug for CompositionViewBox {
    fn fmt(&self, f: &mut ::core::fmt::Formatter<'_>) -> ::core::fmt::Result {
        f.debug_tuple("CompositionViewBox").field(&self.0).finish()
    }
}
unsafe impl ::windows::core::RuntimeType for CompositionViewBox {
    const SIGNATURE: ::windows::core::ConstBuffer = ::windows::core::ConstBuffer::from_slice(
        b"rc(Microsoft.UI.Composition.CompositionViewBox;{667e4071-addd-5ded-b6c0-09e03a14be7e})",
    );
    type DefaultType = ::core::option::Option<Self>;
    fn from_default(from: &Self::DefaultType) -> ::windows::core::Result<Self> {
        from.as_ref().cloned().ok_or(::windows::core::Error::OK)
    }
}
unsafe impl ::windows::core::Vtable for CompositionViewBox {
    type Vtable = ICompositionViewBox_Vtbl;
}
unsafe impl ::windows::core::Interface for CompositionViewBox {
    const IID: ::windows::core::GUID = <ICompositionViewBox as ::windows::core::Interface>::IID;
}
impl ::windows::core::RuntimeName for CompositionViewBox {
    const NAME: &'static str = "Microsoft.UI.Composition.CompositionViewBox";
}
::windows::core::interface_hierarchy!(
    CompositionViewBox,
    ::windows::core::IUnknown,
    ::windows::core::IInspectable
);
impl ::core::convert::TryFrom<CompositionViewBox> for IAnimationObject {
    type Error = ::windows::core::Error;
    fn try_from(value: CompositionViewBox) -> ::windows::core::Result<Self> {
        ::core::convert::TryFrom::try_from(&value)
    }
}
impl ::core::convert::TryFrom<&CompositionViewBox> for IAnimationObject {
    type Error = ::windows::core::Error;
    fn try_from(value: &CompositionViewBox) -> ::windows::core::Result<Self> {
        ::windows::core::Interface::cast(value)
    }
}
impl<'a> ::core::convert::TryFrom<&CompositionViewBox>
    for ::windows::core::InParam<'a, IAnimationObject>
{
    type Error = ::windows::core::Error;
    fn try_from(value: &CompositionViewBox) -> ::windows::core::Result<Self> {
        let item = ::std::convert::TryInto::try_into(value)?;
        Ok(::windows::core::InParam::owned(item))
    }
}
impl ::core::convert::TryFrom<CompositionViewBox> for ::windows::Foundation::IClosable {
    type Error = ::windows::core::Error;
    fn try_from(value: CompositionViewBox) -> ::windows::core::Result<Self> {
        ::core::convert::TryFrom::try_from(&value)
    }
}
impl ::core::convert::TryFrom<&CompositionViewBox> for ::windows::Foundation::IClosable {
    type Error = ::windows::core::Error;
    fn try_from(value: &CompositionViewBox) -> ::windows::core::Result<Self> {
        ::windows::core::Interface::cast(value)
    }
}
impl<'a> ::core::convert::TryFrom<&CompositionViewBox>
    for ::windows::core::InParam<'a, ::windows::Foundation::IClosable>
{
    type Error = ::windows::core::Error;
    fn try_from(value: &CompositionViewBox) -> ::windows::core::Result<Self> {
        let item = ::std::convert::TryInto::try_into(value)?;
        Ok(::windows::core::InParam::owned(item))
    }
}
impl ::core::convert::From<CompositionViewBox> for CompositionObject {
    fn from(value: CompositionViewBox) -> Self {
        ::core::convert::From::from(&value)
    }
}
impl ::core::convert::From<&CompositionViewBox> for CompositionObject {
    fn from(value: &CompositionViewBox) -> Self {
        ::windows::core::Interface::cast(value).unwrap()
    }
}
impl<'a> ::core::convert::From<&CompositionViewBox>
    for ::windows::core::InParam<'a, CompositionObject>
{
    fn from(value: &CompositionViewBox) -> Self {
        ::windows::core::InParam::owned(value.into())
    }
}
unsafe impl ::core::marker::Send for CompositionViewBox {}
unsafe impl ::core::marker::Sync for CompositionViewBox {}
#[doc = "*Required features: `\"UI_Composition\"`*"]
#[repr(transparent)]
pub struct CompositionVirtualDrawingSurface(::windows::core::IUnknown);
impl CompositionVirtualDrawingSurface {
    pub fn PopulatePropertyInfo(
        &self,
        propertyname: &::windows::core::HSTRING,
        propertyinfo: &AnimationPropertyInfo,
    ) -> ::windows::core::Result<()> {
        let this = &::windows::core::Interface::cast::<IAnimationObject>(self)?;
        unsafe {
            (::windows::core::Vtable::vtable(this).PopulatePropertyInfo)(
                ::windows::core::Vtable::as_raw(this),
                ::core::mem::transmute_copy(propertyname),
                ::core::mem::transmute_copy(propertyinfo),
            )
            .ok()
        }
    }
    pub fn Close(&self) -> ::windows::core::Result<()> {
        let this = &::windows::core::Interface::cast::<::windows::Foundation::IClosable>(self)?;
        unsafe {
            (::windows::core::Vtable::vtable(this).Close)(::windows::core::Vtable::as_raw(this))
                .ok()
        }
    }
    #[doc = "*Required features: `\"Graphics_DirectX\"`*"]
    #[cfg(feature = "Graphics_DirectX")]
    pub fn AlphaMode(
        &self,
    ) -> ::windows::core::Result<super::super::Graphics::DirectX::DirectXAlphaMode> {
        let this = &::windows::core::Interface::cast::<ICompositionDrawingSurface>(self)?;
        unsafe {
            let mut result__ = ::core::mem::MaybeUninit::zeroed();
            (::windows::core::Vtable::vtable(this).AlphaMode)(
                ::windows::core::Vtable::as_raw(this),
                result__.as_mut_ptr(),
            )
            .from_abi::<super::super::Graphics::DirectX::DirectXAlphaMode>(result__)
        }
    }
    #[doc = "*Required features: `\"Graphics_DirectX\"`*"]
    #[cfg(feature = "Graphics_DirectX")]
    pub fn PixelFormat(
        &self,
    ) -> ::windows::core::Result<super::super::Graphics::DirectX::DirectXPixelFormat> {
        let this = &::windows::core::Interface::cast::<ICompositionDrawingSurface>(self)?;
        unsafe {
            let mut result__ = ::core::mem::MaybeUninit::zeroed();
            (::windows::core::Vtable::vtable(this).PixelFormat)(
                ::windows::core::Vtable::as_raw(this),
                result__.as_mut_ptr(),
            )
            .from_abi::<super::super::Graphics::DirectX::DirectXPixelFormat>(result__)
        }
    }
    pub fn Size(&self) -> ::windows::core::Result<::windows::Foundation::Size> {
        let this = &::windows::core::Interface::cast::<ICompositionDrawingSurface>(self)?;
        unsafe {
            let mut result__ = ::core::mem::MaybeUninit::zeroed();
            (::windows::core::Vtable::vtable(this).Size)(
                ::windows::core::Vtable::as_raw(this),
                result__.as_mut_ptr(),
            )
            .from_abi::<::windows::Foundation::Size>(result__)
        }
    }
    pub fn SizeInt32(&self) -> ::windows::core::Result<::windows::Graphics::SizeInt32> {
        let this = &::windows::core::Interface::cast::<ICompositionDrawingSurface2>(self)?;
        unsafe {
            let mut result__ = ::core::mem::MaybeUninit::zeroed();
            (::windows::core::Vtable::vtable(this).SizeInt32)(
                ::windows::core::Vtable::as_raw(this),
                result__.as_mut_ptr(),
            )
            .from_abi::<::windows::Graphics::SizeInt32>(result__)
        }
    }
    pub fn Resize(
        &self,
        sizepixels: ::windows::Graphics::SizeInt32,
    ) -> ::windows::core::Result<()> {
        let this = &::windows::core::Interface::cast::<ICompositionDrawingSurface2>(self)?;
        unsafe {
            (::windows::core::Vtable::vtable(this).Resize)(
                ::windows::core::Vtable::as_raw(this),
                sizepixels,
            )
            .ok()
        }
    }
    pub fn Scroll(&self, offset: ::windows::Graphics::PointInt32) -> ::windows::core::Result<()> {
        let this = &::windows::core::Interface::cast::<ICompositionDrawingSurface2>(self)?;
        unsafe {
            (::windows::core::Vtable::vtable(this).Scroll)(
                ::windows::core::Vtable::as_raw(this),
                offset,
            )
            .ok()
        }
    }
    pub fn ScrollRect(
        &self,
        offset: ::windows::Graphics::PointInt32,
        scrollrect: ::windows::Graphics::RectInt32,
    ) -> ::windows::core::Result<()> {
        let this = &::windows::core::Interface::cast::<ICompositionDrawingSurface2>(self)?;
        unsafe {
            (::windows::core::Vtable::vtable(this).ScrollRect)(
                ::windows::core::Vtable::as_raw(this),
                offset,
                scrollrect,
            )
            .ok()
        }
    }
    pub fn ScrollWithClip(
        &self,
        offset: ::windows::Graphics::PointInt32,
        cliprect: ::windows::Graphics::RectInt32,
    ) -> ::windows::core::Result<()> {
        let this = &::windows::core::Interface::cast::<ICompositionDrawingSurface2>(self)?;
        unsafe {
            (::windows::core::Vtable::vtable(this).ScrollWithClip)(
                ::windows::core::Vtable::as_raw(this),
                offset,
                cliprect,
            )
            .ok()
        }
    }
    pub fn ScrollRectWithClip(
        &self,
        offset: ::windows::Graphics::PointInt32,
        cliprect: ::windows::Graphics::RectInt32,
        scrollrect: ::windows::Graphics::RectInt32,
    ) -> ::windows::core::Result<()> {
        let this = &::windows::core::Interface::cast::<ICompositionDrawingSurface2>(self)?;
        unsafe {
            (::windows::core::Vtable::vtable(this).ScrollRectWithClip)(
                ::windows::core::Vtable::as_raw(this),
                offset,
                cliprect,
                scrollrect,
            )
            .ok()
        }
    }
    pub fn Compositor(&self) -> ::windows::core::Result<Compositor> {
        let this = &::windows::core::Interface::cast::<ICompositionObject>(self)?;
        unsafe {
            let mut result__ = ::core::mem::MaybeUninit::zeroed();
            (::windows::core::Vtable::vtable(this).Compositor)(
                ::windows::core::Vtable::as_raw(this),
                result__.as_mut_ptr(),
            )
            .from_abi::<Compositor>(result__)
        }
    }
    pub fn Properties(&self) -> ::windows::core::Result<CompositionPropertySet> {
        let this = &::windows::core::Interface::cast::<ICompositionObject>(self)?;
        unsafe {
            let mut result__ = ::core::mem::MaybeUninit::zeroed();
            (::windows::core::Vtable::vtable(this).Properties)(
                ::windows::core::Vtable::as_raw(this),
                result__.as_mut_ptr(),
            )
            .from_abi::<CompositionPropertySet>(result__)
        }
    }
    pub fn StartAnimation<'a, P0>(
        &self,
        propertyname: &::windows::core::HSTRING,
        animation: P0,
    ) -> ::windows::core::Result<()>
    where
        P0: ::std::convert::Into<::windows::core::InParam<'a, CompositionAnimation>>,
    {
        let this = &::windows::core::Interface::cast::<ICompositionObject>(self)?;
        unsafe {
            (::windows::core::Vtable::vtable(this).StartAnimation)(
                ::windows::core::Vtable::as_raw(this),
                ::core::mem::transmute_copy(propertyname),
                animation.into().abi(),
            )
            .ok()
        }
    }
    pub fn StopAnimation(
        &self,
        propertyname: &::windows::core::HSTRING,
    ) -> ::windows::core::Result<()> {
        let this = &::windows::core::Interface::cast::<ICompositionObject>(self)?;
        unsafe {
            (::windows::core::Vtable::vtable(this).StopAnimation)(
                ::windows::core::Vtable::as_raw(this),
                ::core::mem::transmute_copy(propertyname),
            )
            .ok()
        }
    }
    pub fn Comment(&self) -> ::windows::core::Result<::windows::core::HSTRING> {
        let this = &::windows::core::Interface::cast::<ICompositionObject2>(self)?;
        unsafe {
            let mut result__ = ::core::mem::MaybeUninit::zeroed();
            (::windows::core::Vtable::vtable(this).Comment)(
                ::windows::core::Vtable::as_raw(this),
                result__.as_mut_ptr(),
            )
            .from_abi::<::windows::core::HSTRING>(result__)
        }
    }
    pub fn SetComment(&self, value: &::windows::core::HSTRING) -> ::windows::core::Result<()> {
        let this = &::windows::core::Interface::cast::<ICompositionObject2>(self)?;
        unsafe {
            (::windows::core::Vtable::vtable(this).SetComment)(
                ::windows::core::Vtable::as_raw(this),
                ::core::mem::transmute_copy(value),
            )
            .ok()
        }
    }
    pub fn ImplicitAnimations(&self) -> ::windows::core::Result<ImplicitAnimationCollection> {
        let this = &::windows::core::Interface::cast::<ICompositionObject2>(self)?;
        unsafe {
            let mut result__ = ::core::mem::MaybeUninit::zeroed();
            (::windows::core::Vtable::vtable(this).ImplicitAnimations)(
                ::windows::core::Vtable::as_raw(this),
                result__.as_mut_ptr(),
            )
            .from_abi::<ImplicitAnimationCollection>(result__)
        }
    }
    pub fn SetImplicitAnimations(
        &self,
        value: &ImplicitAnimationCollection,
    ) -> ::windows::core::Result<()> {
        let this = &::windows::core::Interface::cast::<ICompositionObject2>(self)?;
        unsafe {
            (::windows::core::Vtable::vtable(this).SetImplicitAnimations)(
                ::windows::core::Vtable::as_raw(this),
                ::core::mem::transmute_copy(value),
            )
            .ok()
        }
    }
    pub fn StartAnimationGroup<'a, P0, E0>(&self, value: P0) -> ::windows::core::Result<()>
    where
        P0: ::std::convert::TryInto<
            ::windows::core::InParam<'a, ICompositionAnimationBase>,
            Error = E0,
        >,
        E0: ::std::convert::Into<::windows::core::Error>,
    {
        let this = &::windows::core::Interface::cast::<ICompositionObject2>(self)?;
        unsafe {
            (::windows::core::Vtable::vtable(this).StartAnimationGroup)(
                ::windows::core::Vtable::as_raw(this),
                value.try_into().map_err(|e| e.into())?.abi(),
            )
            .ok()
        }
    }
    pub fn StopAnimationGroup<'a, P0, E0>(&self, value: P0) -> ::windows::core::Result<()>
    where
        P0: ::std::convert::TryInto<
            ::windows::core::InParam<'a, ICompositionAnimationBase>,
            Error = E0,
        >,
        E0: ::std::convert::Into<::windows::core::Error>,
    {
        let this = &::windows::core::Interface::cast::<ICompositionObject2>(self)?;
        unsafe {
            (::windows::core::Vtable::vtable(this).StopAnimationGroup)(
                ::windows::core::Vtable::as_raw(this),
                value.try_into().map_err(|e| e.into())?.abi(),
            )
            .ok()
        }
    }
    #[doc = "*Required features: `\"UI_Dispatching\"`*"]
    #[cfg(feature = "UI_Dispatching")]
    pub fn DispatcherQueue(&self) -> ::windows::core::Result<super::Dispatching::DispatcherQueue> {
        let this = &::windows::core::Interface::cast::<ICompositionObject3>(self)?;
        unsafe {
            let mut result__ = ::core::mem::MaybeUninit::zeroed();
            (::windows::core::Vtable::vtable(this).DispatcherQueue)(
                ::windows::core::Vtable::as_raw(this),
                result__.as_mut_ptr(),
            )
            .from_abi::<super::Dispatching::DispatcherQueue>(result__)
        }
    }
    pub fn TryGetAnimationController(
        &self,
        propertyname: &::windows::core::HSTRING,
    ) -> ::windows::core::Result<AnimationController> {
        let this = &::windows::core::Interface::cast::<ICompositionObject4>(self)?;
        unsafe {
            let mut result__ = ::core::mem::MaybeUninit::zeroed();
            (::windows::core::Vtable::vtable(this).TryGetAnimationController)(
                ::windows::core::Vtable::as_raw(this),
                ::core::mem::transmute_copy(propertyname),
                result__.as_mut_ptr(),
            )
            .from_abi::<AnimationController>(result__)
        }
    }
    pub fn StartAnimationWithController<'a, P0>(
        &self,
        propertyname: &::windows::core::HSTRING,
        animation: P0,
        animationcontroller: &AnimationController,
    ) -> ::windows::core::Result<()>
    where
        P0: ::std::convert::Into<::windows::core::InParam<'a, CompositionAnimation>>,
    {
        let this = &::windows::core::Interface::cast::<ICompositionObject5>(self)?;
        unsafe {
            (::windows::core::Vtable::vtable(this).StartAnimationWithController)(
                ::windows::core::Vtable::as_raw(this),
                ::core::mem::transmute_copy(propertyname),
                animation.into().abi(),
                ::core::mem::transmute_copy(animationcontroller),
            )
            .ok()
        }
    }
    pub fn Trim(&self, rects: &[::windows::Graphics::RectInt32]) -> ::windows::core::Result<()> {
        let this = self;
        unsafe {
            (::windows::core::Vtable::vtable(this).Trim)(
                ::windows::core::Vtable::as_raw(this),
                rects.len() as u32,
                rects.as_ptr(),
            )
            .ok()
        }
    }
}
impl ::core::clone::Clone for CompositionVirtualDrawingSurface {
    fn clone(&self) -> Self {
        Self(self.0.clone())
    }
}
impl ::core::cmp::PartialEq for CompositionVirtualDrawingSurface {
    fn eq(&self, other: &Self) -> bool {
        self.0 == other.0
    }
}
impl ::core::cmp::Eq for CompositionVirtualDrawingSurface {}
impl ::core::fmt::Debug for CompositionVirtualDrawingSurface {
    fn fmt(&self, f: &mut ::core::fmt::Formatter<'_>) -> ::core::fmt::Result {
        f.debug_tuple("CompositionVirtualDrawingSurface").field(&self.0).finish()
    }
}
unsafe impl ::windows::core::RuntimeType for CompositionVirtualDrawingSurface {
    const SIGNATURE : ::windows::core::ConstBuffer = ::windows::core::ConstBuffer::from_slice ( b"rc(Microsoft.UI.Composition.CompositionVirtualDrawingSurface;{d741b99d-e248-5ba7-b728-8beea53fe28e})" ) ;
    type DefaultType = ::core::option::Option<Self>;
    fn from_default(from: &Self::DefaultType) -> ::windows::core::Result<Self> {
        from.as_ref().cloned().ok_or(::windows::core::Error::OK)
    }
}
unsafe impl ::windows::core::Vtable for CompositionVirtualDrawingSurface {
    type Vtable = ICompositionVirtualDrawingSurface_Vtbl;
}
unsafe impl ::windows::core::Interface for CompositionVirtualDrawingSurface {
    const IID: ::windows::core::GUID =
        <ICompositionVirtualDrawingSurface as ::windows::core::Interface>::IID;
}
impl ::windows::core::RuntimeName for CompositionVirtualDrawingSurface {
    const NAME: &'static str = "Microsoft.UI.Composition.CompositionVirtualDrawingSurface";
}
::windows::core::interface_hierarchy!(
    CompositionVirtualDrawingSurface,
    ::windows::core::IUnknown,
    ::windows::core::IInspectable
);
impl ::core::convert::TryFrom<CompositionVirtualDrawingSurface> for IAnimationObject {
    type Error = ::windows::core::Error;
    fn try_from(value: CompositionVirtualDrawingSurface) -> ::windows::core::Result<Self> {
        ::core::convert::TryFrom::try_from(&value)
    }
}
impl ::core::convert::TryFrom<&CompositionVirtualDrawingSurface> for IAnimationObject {
    type Error = ::windows::core::Error;
    fn try_from(value: &CompositionVirtualDrawingSurface) -> ::windows::core::Result<Self> {
        ::windows::core::Interface::cast(value)
    }
}
impl<'a> ::core::convert::TryFrom<&CompositionVirtualDrawingSurface>
    for ::windows::core::InParam<'a, IAnimationObject>
{
    type Error = ::windows::core::Error;
    fn try_from(value: &CompositionVirtualDrawingSurface) -> ::windows::core::Result<Self> {
        let item = ::std::convert::TryInto::try_into(value)?;
        Ok(::windows::core::InParam::owned(item))
    }
}
impl ::core::convert::TryFrom<CompositionVirtualDrawingSurface>
    for ::windows::Foundation::IClosable
{
    type Error = ::windows::core::Error;
    fn try_from(value: CompositionVirtualDrawingSurface) -> ::windows::core::Result<Self> {
        ::core::convert::TryFrom::try_from(&value)
    }
}
impl ::core::convert::TryFrom<&CompositionVirtualDrawingSurface>
    for ::windows::Foundation::IClosable
{
    type Error = ::windows::core::Error;
    fn try_from(value: &CompositionVirtualDrawingSurface) -> ::windows::core::Result<Self> {
        ::windows::core::Interface::cast(value)
    }
}
impl<'a> ::core::convert::TryFrom<&CompositionVirtualDrawingSurface>
    for ::windows::core::InParam<'a, ::windows::Foundation::IClosable>
{
    type Error = ::windows::core::Error;
    fn try_from(value: &CompositionVirtualDrawingSurface) -> ::windows::core::Result<Self> {
        let item = ::std::convert::TryInto::try_into(value)?;
        Ok(::windows::core::InParam::owned(item))
    }
}
impl ::core::convert::TryFrom<CompositionVirtualDrawingSurface> for ICompositionSurface {
    type Error = ::windows::core::Error;
    fn try_from(value: CompositionVirtualDrawingSurface) -> ::windows::core::Result<Self> {
        ::core::convert::TryFrom::try_from(&value)
    }
}
impl ::core::convert::TryFrom<&CompositionVirtualDrawingSurface> for ICompositionSurface {
    type Error = ::windows::core::Error;
    fn try_from(value: &CompositionVirtualDrawingSurface) -> ::windows::core::Result<Self> {
        ::windows::core::Interface::cast(value)
    }
}
impl<'a> ::core::convert::TryFrom<&CompositionVirtualDrawingSurface>
    for ::windows::core::InParam<'a, ICompositionSurface>
{
    type Error = ::windows::core::Error;
    fn try_from(value: &CompositionVirtualDrawingSurface) -> ::windows::core::Result<Self> {
        let item = ::std::convert::TryInto::try_into(value)?;
        Ok(::windows::core::InParam::owned(item))
    }
}
impl ::core::convert::From<CompositionVirtualDrawingSurface> for CompositionDrawingSurface {
    fn from(value: CompositionVirtualDrawingSurface) -> Self {
        ::core::convert::From::from(&value)
    }
}
impl ::core::convert::From<&CompositionVirtualDrawingSurface> for CompositionDrawingSurface {
    fn from(value: &CompositionVirtualDrawingSurface) -> Self {
        ::windows::core::Interface::cast(value).unwrap()
    }
}
impl<'a> ::core::convert::From<&CompositionVirtualDrawingSurface>
    for ::windows::core::InParam<'a, CompositionDrawingSurface>
{
    fn from(value: &CompositionVirtualDrawingSurface) -> Self {
        ::windows::core::InParam::owned(value.into())
    }
}
impl ::core::convert::From<CompositionVirtualDrawingSurface> for CompositionObject {
    fn from(value: CompositionVirtualDrawingSurface) -> Self {
        ::core::convert::From::from(&value)
    }
}
impl ::core::convert::From<&CompositionVirtualDrawingSurface> for CompositionObject {
    fn from(value: &CompositionVirtualDrawingSurface) -> Self {
        ::windows::core::Interface::cast(value).unwrap()
    }
}
impl<'a> ::core::convert::From<&CompositionVirtualDrawingSurface>
    for ::windows::core::InParam<'a, CompositionObject>
{
    fn from(value: &CompositionVirtualDrawingSurface) -> Self {
        ::windows::core::InParam::owned(value.into())
    }
}
unsafe impl ::core::marker::Send for CompositionVirtualDrawingSurface {}
unsafe impl ::core::marker::Sync for CompositionVirtualDrawingSurface {}
#[doc = "*Required features: `\"UI_Composition\"`*"]
#[repr(transparent)]
pub struct CompositionVisualSurface(::windows::core::IUnknown);
impl CompositionVisualSurface {
    pub fn PopulatePropertyInfo(
        &self,
        propertyname: &::windows::core::HSTRING,
        propertyinfo: &AnimationPropertyInfo,
    ) -> ::windows::core::Result<()> {
        let this = &::windows::core::Interface::cast::<IAnimationObject>(self)?;
        unsafe {
            (::windows::core::Vtable::vtable(this).PopulatePropertyInfo)(
                ::windows::core::Vtable::as_raw(this),
                ::core::mem::transmute_copy(propertyname),
                ::core::mem::transmute_copy(propertyinfo),
            )
            .ok()
        }
    }
    pub fn Close(&self) -> ::windows::core::Result<()> {
        let this = &::windows::core::Interface::cast::<::windows::Foundation::IClosable>(self)?;
        unsafe {
            (::windows::core::Vtable::vtable(this).Close)(::windows::core::Vtable::as_raw(this))
                .ok()
        }
    }
    pub fn Compositor(&self) -> ::windows::core::Result<Compositor> {
        let this = &::windows::core::Interface::cast::<ICompositionObject>(self)?;
        unsafe {
            let mut result__ = ::core::mem::MaybeUninit::zeroed();
            (::windows::core::Vtable::vtable(this).Compositor)(
                ::windows::core::Vtable::as_raw(this),
                result__.as_mut_ptr(),
            )
            .from_abi::<Compositor>(result__)
        }
    }
    pub fn Properties(&self) -> ::windows::core::Result<CompositionPropertySet> {
        let this = &::windows::core::Interface::cast::<ICompositionObject>(self)?;
        unsafe {
            let mut result__ = ::core::mem::MaybeUninit::zeroed();
            (::windows::core::Vtable::vtable(this).Properties)(
                ::windows::core::Vtable::as_raw(this),
                result__.as_mut_ptr(),
            )
            .from_abi::<CompositionPropertySet>(result__)
        }
    }
    pub fn StartAnimation<'a, P0>(
        &self,
        propertyname: &::windows::core::HSTRING,
        animation: P0,
    ) -> ::windows::core::Result<()>
    where
        P0: ::std::convert::Into<::windows::core::InParam<'a, CompositionAnimation>>,
    {
        let this = &::windows::core::Interface::cast::<ICompositionObject>(self)?;
        unsafe {
            (::windows::core::Vtable::vtable(this).StartAnimation)(
                ::windows::core::Vtable::as_raw(this),
                ::core::mem::transmute_copy(propertyname),
                animation.into().abi(),
            )
            .ok()
        }
    }
    pub fn StopAnimation(
        &self,
        propertyname: &::windows::core::HSTRING,
    ) -> ::windows::core::Result<()> {
        let this = &::windows::core::Interface::cast::<ICompositionObject>(self)?;
        unsafe {
            (::windows::core::Vtable::vtable(this).StopAnimation)(
                ::windows::core::Vtable::as_raw(this),
                ::core::mem::transmute_copy(propertyname),
            )
            .ok()
        }
    }
    pub fn Comment(&self) -> ::windows::core::Result<::windows::core::HSTRING> {
        let this = &::windows::core::Interface::cast::<ICompositionObject2>(self)?;
        unsafe {
            let mut result__ = ::core::mem::MaybeUninit::zeroed();
            (::windows::core::Vtable::vtable(this).Comment)(
                ::windows::core::Vtable::as_raw(this),
                result__.as_mut_ptr(),
            )
            .from_abi::<::windows::core::HSTRING>(result__)
        }
    }
    pub fn SetComment(&self, value: &::windows::core::HSTRING) -> ::windows::core::Result<()> {
        let this = &::windows::core::Interface::cast::<ICompositionObject2>(self)?;
        unsafe {
            (::windows::core::Vtable::vtable(this).SetComment)(
                ::windows::core::Vtable::as_raw(this),
                ::core::mem::transmute_copy(value),
            )
            .ok()
        }
    }
    pub fn ImplicitAnimations(&self) -> ::windows::core::Result<ImplicitAnimationCollection> {
        let this = &::windows::core::Interface::cast::<ICompositionObject2>(self)?;
        unsafe {
            let mut result__ = ::core::mem::MaybeUninit::zeroed();
            (::windows::core::Vtable::vtable(this).ImplicitAnimations)(
                ::windows::core::Vtable::as_raw(this),
                result__.as_mut_ptr(),
            )
            .from_abi::<ImplicitAnimationCollection>(result__)
        }
    }
    pub fn SetImplicitAnimations(
        &self,
        value: &ImplicitAnimationCollection,
    ) -> ::windows::core::Result<()> {
        let this = &::windows::core::Interface::cast::<ICompositionObject2>(self)?;
        unsafe {
            (::windows::core::Vtable::vtable(this).SetImplicitAnimations)(
                ::windows::core::Vtable::as_raw(this),
                ::core::mem::transmute_copy(value),
            )
            .ok()
        }
    }
    pub fn StartAnimationGroup<'a, P0, E0>(&self, value: P0) -> ::windows::core::Result<()>
    where
        P0: ::std::convert::TryInto<
            ::windows::core::InParam<'a, ICompositionAnimationBase>,
            Error = E0,
        >,
        E0: ::std::convert::Into<::windows::core::Error>,
    {
        let this = &::windows::core::Interface::cast::<ICompositionObject2>(self)?;
        unsafe {
            (::windows::core::Vtable::vtable(this).StartAnimationGroup)(
                ::windows::core::Vtable::as_raw(this),
                value.try_into().map_err(|e| e.into())?.abi(),
            )
            .ok()
        }
    }
    pub fn StopAnimationGroup<'a, P0, E0>(&self, value: P0) -> ::windows::core::Result<()>
    where
        P0: ::std::convert::TryInto<
            ::windows::core::InParam<'a, ICompositionAnimationBase>,
            Error = E0,
        >,
        E0: ::std::convert::Into<::windows::core::Error>,
    {
        let this = &::windows::core::Interface::cast::<ICompositionObject2>(self)?;
        unsafe {
            (::windows::core::Vtable::vtable(this).StopAnimationGroup)(
                ::windows::core::Vtable::as_raw(this),
                value.try_into().map_err(|e| e.into())?.abi(),
            )
            .ok()
        }
    }
    #[doc = "*Required features: `\"UI_Dispatching\"`*"]
    #[cfg(feature = "UI_Dispatching")]
    pub fn DispatcherQueue(&self) -> ::windows::core::Result<super::Dispatching::DispatcherQueue> {
        let this = &::windows::core::Interface::cast::<ICompositionObject3>(self)?;
        unsafe {
            let mut result__ = ::core::mem::MaybeUninit::zeroed();
            (::windows::core::Vtable::vtable(this).DispatcherQueue)(
                ::windows::core::Vtable::as_raw(this),
                result__.as_mut_ptr(),
            )
            .from_abi::<super::Dispatching::DispatcherQueue>(result__)
        }
    }
    pub fn TryGetAnimationController(
        &self,
        propertyname: &::windows::core::HSTRING,
    ) -> ::windows::core::Result<AnimationController> {
        let this = &::windows::core::Interface::cast::<ICompositionObject4>(self)?;
        unsafe {
            let mut result__ = ::core::mem::MaybeUninit::zeroed();
            (::windows::core::Vtable::vtable(this).TryGetAnimationController)(
                ::windows::core::Vtable::as_raw(this),
                ::core::mem::transmute_copy(propertyname),
                result__.as_mut_ptr(),
            )
            .from_abi::<AnimationController>(result__)
        }
    }
    pub fn StartAnimationWithController<'a, P0>(
        &self,
        propertyname: &::windows::core::HSTRING,
        animation: P0,
        animationcontroller: &AnimationController,
    ) -> ::windows::core::Result<()>
    where
        P0: ::std::convert::Into<::windows::core::InParam<'a, CompositionAnimation>>,
    {
        let this = &::windows::core::Interface::cast::<ICompositionObject5>(self)?;
        unsafe {
            (::windows::core::Vtable::vtable(this).StartAnimationWithController)(
                ::windows::core::Vtable::as_raw(this),
                ::core::mem::transmute_copy(propertyname),
                animation.into().abi(),
                ::core::mem::transmute_copy(animationcontroller),
            )
            .ok()
        }
    }
    pub fn SourceVisual(&self) -> ::windows::core::Result<Visual> {
        let this = self;
        unsafe {
            let mut result__ = ::core::mem::MaybeUninit::zeroed();
            (::windows::core::Vtable::vtable(this).SourceVisual)(
                ::windows::core::Vtable::as_raw(this),
                result__.as_mut_ptr(),
            )
            .from_abi::<Visual>(result__)
        }
    }
    pub fn SetSourceVisual<'a, P0>(&self, value: P0) -> ::windows::core::Result<()>
    where
        P0: ::std::convert::Into<::windows::core::InParam<'a, Visual>>,
    {
        let this = self;
        unsafe {
            (::windows::core::Vtable::vtable(this).SetSourceVisual)(
                ::windows::core::Vtable::as_raw(this),
                value.into().abi(),
            )
            .ok()
        }
    }
    pub fn SourceOffset(
        &self,
    ) -> ::windows::core::Result<::windows::Foundation::Numerics::Vector2> {
        let this = self;
        unsafe {
            let mut result__ = ::core::mem::MaybeUninit::zeroed();
            (::windows::core::Vtable::vtable(this).SourceOffset)(
                ::windows::core::Vtable::as_raw(this),
                result__.as_mut_ptr(),
            )
            .from_abi::<::windows::Foundation::Numerics::Vector2>(result__)
        }
    }
    pub fn SetSourceOffset(
        &self,
        value: ::windows::Foundation::Numerics::Vector2,
    ) -> ::windows::core::Result<()> {
        let this = self;
        unsafe {
            (::windows::core::Vtable::vtable(this).SetSourceOffset)(
                ::windows::core::Vtable::as_raw(this),
                value,
            )
            .ok()
        }
    }
    pub fn SourceSize(&self) -> ::windows::core::Result<::windows::Foundation::Numerics::Vector2> {
        let this = self;
        unsafe {
            let mut result__ = ::core::mem::MaybeUninit::zeroed();
            (::windows::core::Vtable::vtable(this).SourceSize)(
                ::windows::core::Vtable::as_raw(this),
                result__.as_mut_ptr(),
            )
            .from_abi::<::windows::Foundation::Numerics::Vector2>(result__)
        }
    }
    pub fn SetSourceSize(
        &self,
        value: ::windows::Foundation::Numerics::Vector2,
    ) -> ::windows::core::Result<()> {
        let this = self;
        unsafe {
            (::windows::core::Vtable::vtable(this).SetSourceSize)(
                ::windows::core::Vtable::as_raw(this),
                value,
            )
            .ok()
        }
    }
}
impl ::core::clone::Clone for CompositionVisualSurface {
    fn clone(&self) -> Self {
        Self(self.0.clone())
    }
}
impl ::core::cmp::PartialEq for CompositionVisualSurface {
    fn eq(&self, other: &Self) -> bool {
        self.0 == other.0
    }
}
impl ::core::cmp::Eq for CompositionVisualSurface {}
impl ::core::fmt::Debug for CompositionVisualSurface {
    fn fmt(&self, f: &mut ::core::fmt::Formatter<'_>) -> ::core::fmt::Result {
        f.debug_tuple("CompositionVisualSurface").field(&self.0).finish()
    }
}
unsafe impl ::windows::core::RuntimeType for CompositionVisualSurface {
    const SIGNATURE : ::windows::core::ConstBuffer = ::windows::core::ConstBuffer::from_slice ( b"rc(Microsoft.UI.Composition.CompositionVisualSurface;{49e3624b-4d2e-53e7-9e02-f64831681134})" ) ;
    type DefaultType = ::core::option::Option<Self>;
    fn from_default(from: &Self::DefaultType) -> ::windows::core::Result<Self> {
        from.as_ref().cloned().ok_or(::windows::core::Error::OK)
    }
}
unsafe impl ::windows::core::Vtable for CompositionVisualSurface {
    type Vtable = ICompositionVisualSurface_Vtbl;
}
unsafe impl ::windows::core::Interface for CompositionVisualSurface {
    const IID: ::windows::core::GUID =
        <ICompositionVisualSurface as ::windows::core::Interface>::IID;
}
impl ::windows::core::RuntimeName for CompositionVisualSurface {
    const NAME: &'static str = "Microsoft.UI.Composition.CompositionVisualSurface";
}
::windows::core::interface_hierarchy!(
    CompositionVisualSurface,
    ::windows::core::IUnknown,
    ::windows::core::IInspectable
);
impl ::core::convert::TryFrom<CompositionVisualSurface> for IAnimationObject {
    type Error = ::windows::core::Error;
    fn try_from(value: CompositionVisualSurface) -> ::windows::core::Result<Self> {
        ::core::convert::TryFrom::try_from(&value)
    }
}
impl ::core::convert::TryFrom<&CompositionVisualSurface> for IAnimationObject {
    type Error = ::windows::core::Error;
    fn try_from(value: &CompositionVisualSurface) -> ::windows::core::Result<Self> {
        ::windows::core::Interface::cast(value)
    }
}
impl<'a> ::core::convert::TryFrom<&CompositionVisualSurface>
    for ::windows::core::InParam<'a, IAnimationObject>
{
    type Error = ::windows::core::Error;
    fn try_from(value: &CompositionVisualSurface) -> ::windows::core::Result<Self> {
        let item = ::std::convert::TryInto::try_into(value)?;
        Ok(::windows::core::InParam::owned(item))
    }
}
impl ::core::convert::TryFrom<CompositionVisualSurface> for ::windows::Foundation::IClosable {
    type Error = ::windows::core::Error;
    fn try_from(value: CompositionVisualSurface) -> ::windows::core::Result<Self> {
        ::core::convert::TryFrom::try_from(&value)
    }
}
impl ::core::convert::TryFrom<&CompositionVisualSurface> for ::windows::Foundation::IClosable {
    type Error = ::windows::core::Error;
    fn try_from(value: &CompositionVisualSurface) -> ::windows::core::Result<Self> {
        ::windows::core::Interface::cast(value)
    }
}
impl<'a> ::core::convert::TryFrom<&CompositionVisualSurface>
    for ::windows::core::InParam<'a, ::windows::Foundation::IClosable>
{
    type Error = ::windows::core::Error;
    fn try_from(value: &CompositionVisualSurface) -> ::windows::core::Result<Self> {
        let item = ::std::convert::TryInto::try_into(value)?;
        Ok(::windows::core::InParam::owned(item))
    }
}
impl ::core::convert::TryFrom<CompositionVisualSurface> for ICompositionSurface {
    type Error = ::windows::core::Error;
    fn try_from(value: CompositionVisualSurface) -> ::windows::core::Result<Self> {
        ::core::convert::TryFrom::try_from(&value)
    }
}
impl ::core::convert::TryFrom<&CompositionVisualSurface> for ICompositionSurface {
    type Error = ::windows::core::Error;
    fn try_from(value: &CompositionVisualSurface) -> ::windows::core::Result<Self> {
        ::windows::core::Interface::cast(value)
    }
}
impl<'a> ::core::convert::TryFrom<&CompositionVisualSurface>
    for ::windows::core::InParam<'a, ICompositionSurface>
{
    type Error = ::windows::core::Error;
    fn try_from(value: &CompositionVisualSurface) -> ::windows::core::Result<Self> {
        let item = ::std::convert::TryInto::try_into(value)?;
        Ok(::windows::core::InParam::owned(item))
    }
}
impl ::core::convert::From<CompositionVisualSurface> for CompositionObject {
    fn from(value: CompositionVisualSurface) -> Self {
        ::core::convert::From::from(&value)
    }
}
impl ::core::convert::From<&CompositionVisualSurface> for CompositionObject {
    fn from(value: &CompositionVisualSurface) -> Self {
        ::windows::core::Interface::cast(value).unwrap()
    }
}
impl<'a> ::core::convert::From<&CompositionVisualSurface>
    for ::windows::core::InParam<'a, CompositionObject>
{
    fn from(value: &CompositionVisualSurface) -> Self {
        ::windows::core::InParam::owned(value.into())
    }
}
unsafe impl ::core::marker::Send for CompositionVisualSurface {}
unsafe impl ::core::marker::Sync for CompositionVisualSurface {}
#[doc = "*Required features: `\"UI_Composition\"`*"]
#[repr(transparent)]
pub struct Compositor(::windows::core::IUnknown);
impl Compositor {
    pub fn new() -> ::windows::core::Result<Self> {
        Self::IActivationFactory(|f| f.ActivateInstance::<Self>())
    }
    fn IActivationFactory<
        R,
        F: FnOnce(&::windows::core::IGenericFactory) -> ::windows::core::Result<R>,
    >(
        callback: F,
    ) -> ::windows::core::Result<R> {
        static SHARED: ::windows::core::FactoryCache<Compositor, ::windows::core::IGenericFactory> =
            ::windows::core::FactoryCache::new();
        SHARED.call(callback)
    }
    pub fn Close(&self) -> ::windows::core::Result<()> {
        let this = &::windows::core::Interface::cast::<::windows::Foundation::IClosable>(self)?;
        unsafe {
            (::windows::core::Vtable::vtable(this).Close)(::windows::core::Vtable::as_raw(this))
                .ok()
        }
    }
    pub fn CreateColorKeyFrameAnimation(&self) -> ::windows::core::Result<ColorKeyFrameAnimation> {
        let this = self;
        unsafe {
            let mut result__ = ::core::mem::MaybeUninit::zeroed();
            (::windows::core::Vtable::vtable(this).CreateColorKeyFrameAnimation)(
                ::windows::core::Vtable::as_raw(this),
                result__.as_mut_ptr(),
            )
            .from_abi::<ColorKeyFrameAnimation>(result__)
        }
    }
    pub fn CreateColorBrush(&self) -> ::windows::core::Result<CompositionColorBrush> {
        let this = self;
        unsafe {
            let mut result__ = ::core::mem::MaybeUninit::zeroed();
            (::windows::core::Vtable::vtable(this).CreateColorBrush)(
                ::windows::core::Vtable::as_raw(this),
                result__.as_mut_ptr(),
            )
            .from_abi::<CompositionColorBrush>(result__)
        }
    }
    pub fn CreateColorBrushWithColor(
        &self,
        color: ::windows::UI::Color,
    ) -> ::windows::core::Result<CompositionColorBrush> {
        let this = self;
        unsafe {
            let mut result__ = ::core::mem::MaybeUninit::zeroed();
            (::windows::core::Vtable::vtable(this).CreateColorBrushWithColor)(
                ::windows::core::Vtable::as_raw(this),
                color,
                result__.as_mut_ptr(),
            )
            .from_abi::<CompositionColorBrush>(result__)
        }
    }
    pub fn CreateContainerVisual(&self) -> ::windows::core::Result<ContainerVisual> {
        let this = self;
        unsafe {
            let mut result__ = ::core::mem::MaybeUninit::zeroed();
            (::windows::core::Vtable::vtable(this).CreateContainerVisual)(
                ::windows::core::Vtable::as_raw(this),
                result__.as_mut_ptr(),
            )
            .from_abi::<ContainerVisual>(result__)
        }
    }
    pub fn CreateCubicBezierEasingFunction(
        &self,
        controlpoint1: ::windows::Foundation::Numerics::Vector2,
        controlpoint2: ::windows::Foundation::Numerics::Vector2,
    ) -> ::windows::core::Result<CubicBezierEasingFunction> {
        let this = self;
        unsafe {
            let mut result__ = ::core::mem::MaybeUninit::zeroed();
            (::windows::core::Vtable::vtable(this).CreateCubicBezierEasingFunction)(
                ::windows::core::Vtable::as_raw(this),
                controlpoint1,
                controlpoint2,
                result__.as_mut_ptr(),
            )
            .from_abi::<CubicBezierEasingFunction>(result__)
        }
    }
    pub fn CreateEffectFactory<'a, P0, E0>(
        &self,
        graphicseffect: P0,
    ) -> ::windows::core::Result<CompositionEffectFactory>
    where
        P0: ::std::convert::TryInto<
            ::windows::core::InParam<'a, ::windows::Graphics::Effects::IGraphicsEffect>,
            Error = E0,
        >,
        E0: ::std::convert::Into<::windows::core::Error>,
    {
        let this = self;
        unsafe {
            let mut result__ = ::core::mem::MaybeUninit::zeroed();
            (::windows::core::Vtable::vtable(this).CreateEffectFactory)(
                ::windows::core::Vtable::as_raw(this),
                graphicseffect.try_into().map_err(|e| e.into())?.abi(),
                result__.as_mut_ptr(),
            )
            .from_abi::<CompositionEffectFactory>(result__)
        }
    }
    pub fn CreateEffectFactoryWithProperties<'a, P0, E0, P1, E1>(
        &self,
        graphicseffect: P0,
        animatableproperties: P1,
    ) -> ::windows::core::Result<CompositionEffectFactory>
    where
        P0: ::std::convert::TryInto<
            ::windows::core::InParam<'a, ::windows::Graphics::Effects::IGraphicsEffect>,
            Error = E0,
        >,
        E0: ::std::convert::Into<::windows::core::Error>,
        P1: ::std::convert::TryInto<
            ::windows::core::InParam<
                'a,
                ::windows::Foundation::Collections::IIterable<::windows::core::HSTRING>,
            >,
            Error = E1,
        >,
        E1: ::std::convert::Into<::windows::core::Error>,
    {
        let this = self;
        unsafe {
            let mut result__ = ::core::mem::MaybeUninit::zeroed();
            (::windows::core::Vtable::vtable(this).CreateEffectFactoryWithProperties)(
                ::windows::core::Vtable::as_raw(this),
                graphicseffect.try_into().map_err(|e| e.into())?.abi(),
                animatableproperties.try_into().map_err(|e| e.into())?.abi(),
                result__.as_mut_ptr(),
            )
            .from_abi::<CompositionEffectFactory>(result__)
        }
    }
    pub fn CreateExpressionAnimation(&self) -> ::windows::core::Result<ExpressionAnimation> {
        let this = self;
        unsafe {
            let mut result__ = ::core::mem::MaybeUninit::zeroed();
            (::windows::core::Vtable::vtable(this).CreateExpressionAnimation)(
                ::windows::core::Vtable::as_raw(this),
                result__.as_mut_ptr(),
            )
            .from_abi::<ExpressionAnimation>(result__)
        }
    }
    pub fn CreateExpressionAnimationWithExpression(
        &self,
        expression: &::windows::core::HSTRING,
    ) -> ::windows::core::Result<ExpressionAnimation> {
        let this = self;
        unsafe {
            let mut result__ = ::core::mem::MaybeUninit::zeroed();
            (::windows::core::Vtable::vtable(this).CreateExpressionAnimationWithExpression)(
                ::windows::core::Vtable::as_raw(this),
                ::core::mem::transmute_copy(expression),
                result__.as_mut_ptr(),
            )
            .from_abi::<ExpressionAnimation>(result__)
        }
    }
    pub fn CreateInsetClip(&self) -> ::windows::core::Result<InsetClip> {
        let this = self;
        unsafe {
            let mut result__ = ::core::mem::MaybeUninit::zeroed();
            (::windows::core::Vtable::vtable(this).CreateInsetClip)(
                ::windows::core::Vtable::as_raw(this),
                result__.as_mut_ptr(),
            )
            .from_abi::<InsetClip>(result__)
        }
    }
    pub fn CreateInsetClipWithInsets(
        &self,
        leftinset: f32,
        topinset: f32,
        rightinset: f32,
        bottominset: f32,
    ) -> ::windows::core::Result<InsetClip> {
        let this = self;
        unsafe {
            let mut result__ = ::core::mem::MaybeUninit::zeroed();
            (::windows::core::Vtable::vtable(this).CreateInsetClipWithInsets)(
                ::windows::core::Vtable::as_raw(this),
                leftinset,
                topinset,
                rightinset,
                bottominset,
                result__.as_mut_ptr(),
            )
            .from_abi::<InsetClip>(result__)
        }
    }
    pub fn CreateLinearEasingFunction(&self) -> ::windows::core::Result<LinearEasingFunction> {
        let this = self;
        unsafe {
            let mut result__ = ::core::mem::MaybeUninit::zeroed();
            (::windows::core::Vtable::vtable(this).CreateLinearEasingFunction)(
                ::windows::core::Vtable::as_raw(this),
                result__.as_mut_ptr(),
            )
            .from_abi::<LinearEasingFunction>(result__)
        }
    }
    pub fn CreatePropertySet(&self) -> ::windows::core::Result<CompositionPropertySet> {
        let this = self;
        unsafe {
            let mut result__ = ::core::mem::MaybeUninit::zeroed();
            (::windows::core::Vtable::vtable(this).CreatePropertySet)(
                ::windows::core::Vtable::as_raw(this),
                result__.as_mut_ptr(),
            )
            .from_abi::<CompositionPropertySet>(result__)
        }
    }
    pub fn CreateQuaternionKeyFrameAnimation(
        &self,
    ) -> ::windows::core::Result<QuaternionKeyFrameAnimation> {
        let this = self;
        unsafe {
            let mut result__ = ::core::mem::MaybeUninit::zeroed();
            (::windows::core::Vtable::vtable(this).CreateQuaternionKeyFrameAnimation)(
                ::windows::core::Vtable::as_raw(this),
                result__.as_mut_ptr(),
            )
            .from_abi::<QuaternionKeyFrameAnimation>(result__)
        }
    }
    pub fn CreateScalarKeyFrameAnimation(
        &self,
    ) -> ::windows::core::Result<ScalarKeyFrameAnimation> {
        let this = self;
        unsafe {
            let mut result__ = ::core::mem::MaybeUninit::zeroed();
            (::windows::core::Vtable::vtable(this).CreateScalarKeyFrameAnimation)(
                ::windows::core::Vtable::as_raw(this),
                result__.as_mut_ptr(),
            )
            .from_abi::<ScalarKeyFrameAnimation>(result__)
        }
    }
    pub fn CreateScopedBatch(
        &self,
        batchtype: CompositionBatchTypes,
    ) -> ::windows::core::Result<CompositionScopedBatch> {
        let this = self;
        unsafe {
            let mut result__ = ::core::mem::MaybeUninit::zeroed();
            (::windows::core::Vtable::vtable(this).CreateScopedBatch)(
                ::windows::core::Vtable::as_raw(this),
                batchtype,
                result__.as_mut_ptr(),
            )
            .from_abi::<CompositionScopedBatch>(result__)
        }
    }
    pub fn CreateSpriteVisual(&self) -> ::windows::core::Result<SpriteVisual> {
        let this = self;
        unsafe {
            let mut result__ = ::core::mem::MaybeUninit::zeroed();
            (::windows::core::Vtable::vtable(this).CreateSpriteVisual)(
                ::windows::core::Vtable::as_raw(this),
                result__.as_mut_ptr(),
            )
            .from_abi::<SpriteVisual>(result__)
        }
    }
    pub fn CreateSurfaceBrush(&self) -> ::windows::core::Result<CompositionSurfaceBrush> {
        let this = self;
        unsafe {
            let mut result__ = ::core::mem::MaybeUninit::zeroed();
            (::windows::core::Vtable::vtable(this).CreateSurfaceBrush)(
                ::windows::core::Vtable::as_raw(this),
                result__.as_mut_ptr(),
            )
            .from_abi::<CompositionSurfaceBrush>(result__)
        }
    }
    pub fn CreateSurfaceBrushWithSurface<'a, P0, E0>(
        &self,
        surface: P0,
    ) -> ::windows::core::Result<CompositionSurfaceBrush>
    where
        P0: ::std::convert::TryInto<::windows::core::InParam<'a, ICompositionSurface>, Error = E0>,
        E0: ::std::convert::Into<::windows::core::Error>,
    {
        let this = self;
        unsafe {
            let mut result__ = ::core::mem::MaybeUninit::zeroed();
            (::windows::core::Vtable::vtable(this).CreateSurfaceBrushWithSurface)(
                ::windows::core::Vtable::as_raw(this),
                surface.try_into().map_err(|e| e.into())?.abi(),
                result__.as_mut_ptr(),
            )
            .from_abi::<CompositionSurfaceBrush>(result__)
        }
    }
    pub fn CreateVector2KeyFrameAnimation(
        &self,
    ) -> ::windows::core::Result<Vector2KeyFrameAnimation> {
        let this = self;
        unsafe {
            let mut result__ = ::core::mem::MaybeUninit::zeroed();
            (::windows::core::Vtable::vtable(this).CreateVector2KeyFrameAnimation)(
                ::windows::core::Vtable::as_raw(this),
                result__.as_mut_ptr(),
            )
            .from_abi::<Vector2KeyFrameAnimation>(result__)
        }
    }
    pub fn CreateVector3KeyFrameAnimation(
        &self,
    ) -> ::windows::core::Result<Vector3KeyFrameAnimation> {
        let this = self;
        unsafe {
            let mut result__ = ::core::mem::MaybeUninit::zeroed();
            (::windows::core::Vtable::vtable(this).CreateVector3KeyFrameAnimation)(
                ::windows::core::Vtable::as_raw(this),
                result__.as_mut_ptr(),
            )
            .from_abi::<Vector3KeyFrameAnimation>(result__)
        }
    }
    pub fn CreateVector4KeyFrameAnimation(
        &self,
    ) -> ::windows::core::Result<Vector4KeyFrameAnimation> {
        let this = self;
        unsafe {
            let mut result__ = ::core::mem::MaybeUninit::zeroed();
            (::windows::core::Vtable::vtable(this).CreateVector4KeyFrameAnimation)(
                ::windows::core::Vtable::as_raw(this),
                result__.as_mut_ptr(),
            )
            .from_abi::<Vector4KeyFrameAnimation>(result__)
        }
    }
    pub fn GetCommitBatch(
        &self,
        batchtype: CompositionBatchTypes,
    ) -> ::windows::core::Result<CompositionCommitBatch> {
        let this = self;
        unsafe {
            let mut result__ = ::core::mem::MaybeUninit::zeroed();
            (::windows::core::Vtable::vtable(this).GetCommitBatch)(
                ::windows::core::Vtable::as_raw(this),
                batchtype,
                result__.as_mut_ptr(),
            )
            .from_abi::<CompositionCommitBatch>(result__)
        }
    }
    pub fn CreateAmbientLight(&self) -> ::windows::core::Result<AmbientLight> {
        let this = &::windows::core::Interface::cast::<ICompositor2>(self)?;
        unsafe {
            let mut result__ = ::core::mem::MaybeUninit::zeroed();
            (::windows::core::Vtable::vtable(this).CreateAmbientLight)(
                ::windows::core::Vtable::as_raw(this),
                result__.as_mut_ptr(),
            )
            .from_abi::<AmbientLight>(result__)
        }
    }
    pub fn CreateAnimationGroup(&self) -> ::windows::core::Result<CompositionAnimationGroup> {
        let this = &::windows::core::Interface::cast::<ICompositor2>(self)?;
        unsafe {
            let mut result__ = ::core::mem::MaybeUninit::zeroed();
            (::windows::core::Vtable::vtable(this).CreateAnimationGroup)(
                ::windows::core::Vtable::as_raw(this),
                result__.as_mut_ptr(),
            )
            .from_abi::<CompositionAnimationGroup>(result__)
        }
    }
    pub fn CreateBackdropBrush(&self) -> ::windows::core::Result<CompositionBackdropBrush> {
        let this = &::windows::core::Interface::cast::<ICompositor2>(self)?;
        unsafe {
            let mut result__ = ::core::mem::MaybeUninit::zeroed();
            (::windows::core::Vtable::vtable(this).CreateBackdropBrush)(
                ::windows::core::Vtable::as_raw(this),
                result__.as_mut_ptr(),
            )
            .from_abi::<CompositionBackdropBrush>(result__)
        }
    }
    pub fn CreateDistantLight(&self) -> ::windows::core::Result<DistantLight> {
        let this = &::windows::core::Interface::cast::<ICompositor2>(self)?;
        unsafe {
            let mut result__ = ::core::mem::MaybeUninit::zeroed();
            (::windows::core::Vtable::vtable(this).CreateDistantLight)(
                ::windows::core::Vtable::as_raw(this),
                result__.as_mut_ptr(),
            )
            .from_abi::<DistantLight>(result__)
        }
    }
    pub fn CreateDropShadow(&self) -> ::windows::core::Result<DropShadow> {
        let this = &::windows::core::Interface::cast::<ICompositor2>(self)?;
        unsafe {
            let mut result__ = ::core::mem::MaybeUninit::zeroed();
            (::windows::core::Vtable::vtable(this).CreateDropShadow)(
                ::windows::core::Vtable::as_raw(this),
                result__.as_mut_ptr(),
            )
            .from_abi::<DropShadow>(result__)
        }
    }
    pub fn CreateImplicitAnimationCollection(
        &self,
    ) -> ::windows::core::Result<ImplicitAnimationCollection> {
        let this = &::windows::core::Interface::cast::<ICompositor2>(self)?;
        unsafe {
            let mut result__ = ::core::mem::MaybeUninit::zeroed();
            (::windows::core::Vtable::vtable(this).CreateImplicitAnimationCollection)(
                ::windows::core::Vtable::as_raw(this),
                result__.as_mut_ptr(),
            )
            .from_abi::<ImplicitAnimationCollection>(result__)
        }
    }
    pub fn CreateLayerVisual(&self) -> ::windows::core::Result<LayerVisual> {
        let this = &::windows::core::Interface::cast::<ICompositor2>(self)?;
        unsafe {
            let mut result__ = ::core::mem::MaybeUninit::zeroed();
            (::windows::core::Vtable::vtable(this).CreateLayerVisual)(
                ::windows::core::Vtable::as_raw(this),
                result__.as_mut_ptr(),
            )
            .from_abi::<LayerVisual>(result__)
        }
    }
    pub fn CreateMaskBrush(&self) -> ::windows::core::Result<CompositionMaskBrush> {
        let this = &::windows::core::Interface::cast::<ICompositor2>(self)?;
        unsafe {
            let mut result__ = ::core::mem::MaybeUninit::zeroed();
            (::windows::core::Vtable::vtable(this).CreateMaskBrush)(
                ::windows::core::Vtable::as_raw(this),
                result__.as_mut_ptr(),
            )
            .from_abi::<CompositionMaskBrush>(result__)
        }
    }
    pub fn CreateNineGridBrush(&self) -> ::windows::core::Result<CompositionNineGridBrush> {
        let this = &::windows::core::Interface::cast::<ICompositor2>(self)?;
        unsafe {
            let mut result__ = ::core::mem::MaybeUninit::zeroed();
            (::windows::core::Vtable::vtable(this).CreateNineGridBrush)(
                ::windows::core::Vtable::as_raw(this),
                result__.as_mut_ptr(),
            )
            .from_abi::<CompositionNineGridBrush>(result__)
        }
    }
    pub fn CreatePointLight(&self) -> ::windows::core::Result<PointLight> {
        let this = &::windows::core::Interface::cast::<ICompositor2>(self)?;
        unsafe {
            let mut result__ = ::core::mem::MaybeUninit::zeroed();
            (::windows::core::Vtable::vtable(this).CreatePointLight)(
                ::windows::core::Vtable::as_raw(this),
                result__.as_mut_ptr(),
            )
            .from_abi::<PointLight>(result__)
        }
    }
    pub fn CreateSpotLight(&self) -> ::windows::core::Result<SpotLight> {
        let this = &::windows::core::Interface::cast::<ICompositor2>(self)?;
        unsafe {
            let mut result__ = ::core::mem::MaybeUninit::zeroed();
            (::windows::core::Vtable::vtable(this).CreateSpotLight)(
                ::windows::core::Vtable::as_raw(this),
                result__.as_mut_ptr(),
            )
            .from_abi::<SpotLight>(result__)
        }
    }
    pub fn CreateStepEasingFunction(&self) -> ::windows::core::Result<StepEasingFunction> {
        let this = &::windows::core::Interface::cast::<ICompositor2>(self)?;
        unsafe {
            let mut result__ = ::core::mem::MaybeUninit::zeroed();
            (::windows::core::Vtable::vtable(this).CreateStepEasingFunction)(
                ::windows::core::Vtable::as_raw(this),
                result__.as_mut_ptr(),
            )
            .from_abi::<StepEasingFunction>(result__)
        }
    }
    pub fn CreateStepEasingFunctionWithStepCount(
        &self,
        stepcount: i32,
    ) -> ::windows::core::Result<StepEasingFunction> {
        let this = &::windows::core::Interface::cast::<ICompositor2>(self)?;
        unsafe {
            let mut result__ = ::core::mem::MaybeUninit::zeroed();
            (::windows::core::Vtable::vtable(this).CreateStepEasingFunctionWithStepCount)(
                ::windows::core::Vtable::as_raw(this),
                stepcount,
                result__.as_mut_ptr(),
            )
            .from_abi::<StepEasingFunction>(result__)
        }
    }
    pub fn CreateColorGradientStop(&self) -> ::windows::core::Result<CompositionColorGradientStop> {
        let this = &::windows::core::Interface::cast::<ICompositor4>(self)?;
        unsafe {
            let mut result__ = ::core::mem::MaybeUninit::zeroed();
            (::windows::core::Vtable::vtable(this).CreateColorGradientStop)(
                ::windows::core::Vtable::as_raw(this),
                result__.as_mut_ptr(),
            )
            .from_abi::<CompositionColorGradientStop>(result__)
        }
    }
    pub fn CreateColorGradientStopWithOffsetAndColor(
        &self,
        offset: f32,
        color: ::windows::UI::Color,
    ) -> ::windows::core::Result<CompositionColorGradientStop> {
        let this = &::windows::core::Interface::cast::<ICompositor4>(self)?;
        unsafe {
            let mut result__ = ::core::mem::MaybeUninit::zeroed();
            (::windows::core::Vtable::vtable(this).CreateColorGradientStopWithOffsetAndColor)(
                ::windows::core::Vtable::as_raw(this),
                offset,
                color,
                result__.as_mut_ptr(),
            )
            .from_abi::<CompositionColorGradientStop>(result__)
        }
    }
    pub fn CreateLinearGradientBrush(
        &self,
    ) -> ::windows::core::Result<CompositionLinearGradientBrush> {
        let this = &::windows::core::Interface::cast::<ICompositor4>(self)?;
        unsafe {
            let mut result__ = ::core::mem::MaybeUninit::zeroed();
            (::windows::core::Vtable::vtable(this).CreateLinearGradientBrush)(
                ::windows::core::Vtable::as_raw(this),
                result__.as_mut_ptr(),
            )
            .from_abi::<CompositionLinearGradientBrush>(result__)
        }
    }
    pub fn CreateSpringScalarAnimation(
        &self,
    ) -> ::windows::core::Result<SpringScalarNaturalMotionAnimation> {
        let this = &::windows::core::Interface::cast::<ICompositor4>(self)?;
        unsafe {
            let mut result__ = ::core::mem::MaybeUninit::zeroed();
            (::windows::core::Vtable::vtable(this).CreateSpringScalarAnimation)(
                ::windows::core::Vtable::as_raw(this),
                result__.as_mut_ptr(),
            )
            .from_abi::<SpringScalarNaturalMotionAnimation>(result__)
        }
    }
    pub fn CreateSpringVector2Animation(
        &self,
    ) -> ::windows::core::Result<SpringVector2NaturalMotionAnimation> {
        let this = &::windows::core::Interface::cast::<ICompositor4>(self)?;
        unsafe {
            let mut result__ = ::core::mem::MaybeUninit::zeroed();
            (::windows::core::Vtable::vtable(this).CreateSpringVector2Animation)(
                ::windows::core::Vtable::as_raw(this),
                result__.as_mut_ptr(),
            )
            .from_abi::<SpringVector2NaturalMotionAnimation>(result__)
        }
    }
    pub fn CreateSpringVector3Animation(
        &self,
    ) -> ::windows::core::Result<SpringVector3NaturalMotionAnimation> {
        let this = &::windows::core::Interface::cast::<ICompositor4>(self)?;
        unsafe {
            let mut result__ = ::core::mem::MaybeUninit::zeroed();
            (::windows::core::Vtable::vtable(this).CreateSpringVector3Animation)(
                ::windows::core::Vtable::as_raw(this),
                result__.as_mut_ptr(),
            )
            .from_abi::<SpringVector3NaturalMotionAnimation>(result__)
        }
    }
    pub fn Comment(&self) -> ::windows::core::Result<::windows::core::HSTRING> {
        let this = &::windows::core::Interface::cast::<ICompositor5>(self)?;
        unsafe {
            let mut result__ = ::core::mem::MaybeUninit::zeroed();
            (::windows::core::Vtable::vtable(this).Comment)(
                ::windows::core::Vtable::as_raw(this),
                result__.as_mut_ptr(),
            )
            .from_abi::<::windows::core::HSTRING>(result__)
        }
    }
    pub fn SetComment(&self, value: &::windows::core::HSTRING) -> ::windows::core::Result<()> {
        let this = &::windows::core::Interface::cast::<ICompositor5>(self)?;
        unsafe {
            (::windows::core::Vtable::vtable(this).SetComment)(
                ::windows::core::Vtable::as_raw(this),
                ::core::mem::transmute_copy(value),
            )
            .ok()
        }
    }
    pub fn GlobalPlaybackRate(&self) -> ::windows::core::Result<f32> {
        let this = &::windows::core::Interface::cast::<ICompositor5>(self)?;
        unsafe {
            let mut result__ = ::core::mem::MaybeUninit::zeroed();
            (::windows::core::Vtable::vtable(this).GlobalPlaybackRate)(
                ::windows::core::Vtable::as_raw(this),
                result__.as_mut_ptr(),
            )
            .from_abi::<f32>(result__)
        }
    }
    pub fn SetGlobalPlaybackRate(&self, value: f32) -> ::windows::core::Result<()> {
        let this = &::windows::core::Interface::cast::<ICompositor5>(self)?;
        unsafe {
            (::windows::core::Vtable::vtable(this).SetGlobalPlaybackRate)(
                ::windows::core::Vtable::as_raw(this),
                value,
            )
            .ok()
        }
    }
    pub fn CreateBounceScalarAnimation(
        &self,
    ) -> ::windows::core::Result<BounceScalarNaturalMotionAnimation> {
        let this = &::windows::core::Interface::cast::<ICompositor5>(self)?;
        unsafe {
            let mut result__ = ::core::mem::MaybeUninit::zeroed();
            (::windows::core::Vtable::vtable(this).CreateBounceScalarAnimation)(
                ::windows::core::Vtable::as_raw(this),
                result__.as_mut_ptr(),
            )
            .from_abi::<BounceScalarNaturalMotionAnimation>(result__)
        }
    }
    pub fn CreateBounceVector2Animation(
        &self,
    ) -> ::windows::core::Result<BounceVector2NaturalMotionAnimation> {
        let this = &::windows::core::Interface::cast::<ICompositor5>(self)?;
        unsafe {
            let mut result__ = ::core::mem::MaybeUninit::zeroed();
            (::windows::core::Vtable::vtable(this).CreateBounceVector2Animation)(
                ::windows::core::Vtable::as_raw(this),
                result__.as_mut_ptr(),
            )
            .from_abi::<BounceVector2NaturalMotionAnimation>(result__)
        }
    }
    pub fn CreateBounceVector3Animation(
        &self,
    ) -> ::windows::core::Result<BounceVector3NaturalMotionAnimation> {
        let this = &::windows::core::Interface::cast::<ICompositor5>(self)?;
        unsafe {
            let mut result__ = ::core::mem::MaybeUninit::zeroed();
            (::windows::core::Vtable::vtable(this).CreateBounceVector3Animation)(
                ::windows::core::Vtable::as_raw(this),
                result__.as_mut_ptr(),
            )
            .from_abi::<BounceVector3NaturalMotionAnimation>(result__)
        }
    }
    pub fn CreateContainerShape(&self) -> ::windows::core::Result<CompositionContainerShape> {
        let this = &::windows::core::Interface::cast::<ICompositor5>(self)?;
        unsafe {
            let mut result__ = ::core::mem::MaybeUninit::zeroed();
            (::windows::core::Vtable::vtable(this).CreateContainerShape)(
                ::windows::core::Vtable::as_raw(this),
                result__.as_mut_ptr(),
            )
            .from_abi::<CompositionContainerShape>(result__)
        }
    }
    pub fn CreateEllipseGeometry(&self) -> ::windows::core::Result<CompositionEllipseGeometry> {
        let this = &::windows::core::Interface::cast::<ICompositor5>(self)?;
        unsafe {
            let mut result__ = ::core::mem::MaybeUninit::zeroed();
            (::windows::core::Vtable::vtable(this).CreateEllipseGeometry)(
                ::windows::core::Vtable::as_raw(this),
                result__.as_mut_ptr(),
            )
            .from_abi::<CompositionEllipseGeometry>(result__)
        }
    }
    pub fn CreateLineGeometry(&self) -> ::windows::core::Result<CompositionLineGeometry> {
        let this = &::windows::core::Interface::cast::<ICompositor5>(self)?;
        unsafe {
            let mut result__ = ::core::mem::MaybeUninit::zeroed();
            (::windows::core::Vtable::vtable(this).CreateLineGeometry)(
                ::windows::core::Vtable::as_raw(this),
                result__.as_mut_ptr(),
            )
            .from_abi::<CompositionLineGeometry>(result__)
        }
    }
    pub fn CreatePathGeometry(&self) -> ::windows::core::Result<CompositionPathGeometry> {
        let this = &::windows::core::Interface::cast::<ICompositor5>(self)?;
        unsafe {
            let mut result__ = ::core::mem::MaybeUninit::zeroed();
            (::windows::core::Vtable::vtable(this).CreatePathGeometry)(
                ::windows::core::Vtable::as_raw(this),
                result__.as_mut_ptr(),
            )
            .from_abi::<CompositionPathGeometry>(result__)
        }
    }
    pub fn CreatePathGeometryWithPath(
        &self,
        path: &CompositionPath,
    ) -> ::windows::core::Result<CompositionPathGeometry> {
        let this = &::windows::core::Interface::cast::<ICompositor5>(self)?;
        unsafe {
            let mut result__ = ::core::mem::MaybeUninit::zeroed();
            (::windows::core::Vtable::vtable(this).CreatePathGeometryWithPath)(
                ::windows::core::Vtable::as_raw(this),
                ::core::mem::transmute_copy(path),
                result__.as_mut_ptr(),
            )
            .from_abi::<CompositionPathGeometry>(result__)
        }
    }
    pub fn CreatePathKeyFrameAnimation(&self) -> ::windows::core::Result<PathKeyFrameAnimation> {
        let this = &::windows::core::Interface::cast::<ICompositor5>(self)?;
        unsafe {
            let mut result__ = ::core::mem::MaybeUninit::zeroed();
            (::windows::core::Vtable::vtable(this).CreatePathKeyFrameAnimation)(
                ::windows::core::Vtable::as_raw(this),
                result__.as_mut_ptr(),
            )
            .from_abi::<PathKeyFrameAnimation>(result__)
        }
    }
    pub fn CreateRectangleGeometry(&self) -> ::windows::core::Result<CompositionRectangleGeometry> {
        let this = &::windows::core::Interface::cast::<ICompositor5>(self)?;
        unsafe {
            let mut result__ = ::core::mem::MaybeUninit::zeroed();
            (::windows::core::Vtable::vtable(this).CreateRectangleGeometry)(
                ::windows::core::Vtable::as_raw(this),
                result__.as_mut_ptr(),
            )
            .from_abi::<CompositionRectangleGeometry>(result__)
        }
    }
    pub fn CreateRoundedRectangleGeometry(
        &self,
    ) -> ::windows::core::Result<CompositionRoundedRectangleGeometry> {
        let this = &::windows::core::Interface::cast::<ICompositor5>(self)?;
        unsafe {
            let mut result__ = ::core::mem::MaybeUninit::zeroed();
            (::windows::core::Vtable::vtable(this).CreateRoundedRectangleGeometry)(
                ::windows::core::Vtable::as_raw(this),
                result__.as_mut_ptr(),
            )
            .from_abi::<CompositionRoundedRectangleGeometry>(result__)
        }
    }
    pub fn CreateShapeVisual(&self) -> ::windows::core::Result<ShapeVisual> {
        let this = &::windows::core::Interface::cast::<ICompositor5>(self)?;
        unsafe {
            let mut result__ = ::core::mem::MaybeUninit::zeroed();
            (::windows::core::Vtable::vtable(this).CreateShapeVisual)(
                ::windows::core::Vtable::as_raw(this),
                result__.as_mut_ptr(),
            )
            .from_abi::<ShapeVisual>(result__)
        }
    }
    pub fn CreateSpriteShape(&self) -> ::windows::core::Result<CompositionSpriteShape> {
        let this = &::windows::core::Interface::cast::<ICompositor5>(self)?;
        unsafe {
            let mut result__ = ::core::mem::MaybeUninit::zeroed();
            (::windows::core::Vtable::vtable(this).CreateSpriteShape)(
                ::windows::core::Vtable::as_raw(this),
                result__.as_mut_ptr(),
            )
            .from_abi::<CompositionSpriteShape>(result__)
        }
    }
    pub fn CreateSpriteShapeWithGeometry<'a, P0>(
        &self,
        geometry: P0,
    ) -> ::windows::core::Result<CompositionSpriteShape>
    where
        P0: ::std::convert::Into<::windows::core::InParam<'a, CompositionGeometry>>,
    {
        let this = &::windows::core::Interface::cast::<ICompositor5>(self)?;
        unsafe {
            let mut result__ = ::core::mem::MaybeUninit::zeroed();
            (::windows::core::Vtable::vtable(this).CreateSpriteShapeWithGeometry)(
                ::windows::core::Vtable::as_raw(this),
                geometry.into().abi(),
                result__.as_mut_ptr(),
            )
            .from_abi::<CompositionSpriteShape>(result__)
        }
    }
    pub fn CreateViewBox(&self) -> ::windows::core::Result<CompositionViewBox> {
        let this = &::windows::core::Interface::cast::<ICompositor5>(self)?;
        unsafe {
            let mut result__ = ::core::mem::MaybeUninit::zeroed();
            (::windows::core::Vtable::vtable(this).CreateViewBox)(
                ::windows::core::Vtable::as_raw(this),
                result__.as_mut_ptr(),
            )
            .from_abi::<CompositionViewBox>(result__)
        }
    }
    pub fn RequestCommitAsync(
        &self,
    ) -> ::windows::core::Result<::windows::Foundation::IAsyncAction> {
        let this = &::windows::core::Interface::cast::<ICompositor5>(self)?;
        unsafe {
            let mut result__ = ::core::mem::MaybeUninit::zeroed();
            (::windows::core::Vtable::vtable(this).RequestCommitAsync)(
                ::windows::core::Vtable::as_raw(this),
                result__.as_mut_ptr(),
            )
            .from_abi::<::windows::Foundation::IAsyncAction>(result__)
        }
    }
    pub fn CreateGeometricClip(&self) -> ::windows::core::Result<CompositionGeometricClip> {
        let this = &::windows::core::Interface::cast::<ICompositor6>(self)?;
        unsafe {
            let mut result__ = ::core::mem::MaybeUninit::zeroed();
            (::windows::core::Vtable::vtable(this).CreateGeometricClip)(
                ::windows::core::Vtable::as_raw(this),
                result__.as_mut_ptr(),
            )
            .from_abi::<CompositionGeometricClip>(result__)
        }
    }
    pub fn CreateGeometricClipWithGeometry<'a, P0>(
        &self,
        geometry: P0,
    ) -> ::windows::core::Result<CompositionGeometricClip>
    where
        P0: ::std::convert::Into<::windows::core::InParam<'a, CompositionGeometry>>,
    {
        let this = &::windows::core::Interface::cast::<ICompositor6>(self)?;
        unsafe {
            let mut result__ = ::core::mem::MaybeUninit::zeroed();
            (::windows::core::Vtable::vtable(this).CreateGeometricClipWithGeometry)(
                ::windows::core::Vtable::as_raw(this),
                geometry.into().abi(),
                result__.as_mut_ptr(),
            )
            .from_abi::<CompositionGeometricClip>(result__)
        }
    }
    pub fn CreateRedirectVisual(&self) -> ::windows::core::Result<RedirectVisual> {
        let this = &::windows::core::Interface::cast::<ICompositor6>(self)?;
        unsafe {
            let mut result__ = ::core::mem::MaybeUninit::zeroed();
            (::windows::core::Vtable::vtable(this).CreateRedirectVisual)(
                ::windows::core::Vtable::as_raw(this),
                result__.as_mut_ptr(),
            )
            .from_abi::<RedirectVisual>(result__)
        }
    }
    pub fn CreateRedirectVisualWithSourceVisual<'a, P0>(
        &self,
        source: P0,
    ) -> ::windows::core::Result<RedirectVisual>
    where
        P0: ::std::convert::Into<::windows::core::InParam<'a, Visual>>,
    {
        let this = &::windows::core::Interface::cast::<ICompositor6>(self)?;
        unsafe {
            let mut result__ = ::core::mem::MaybeUninit::zeroed();
            (::windows::core::Vtable::vtable(this).CreateRedirectVisualWithSourceVisual)(
                ::windows::core::Vtable::as_raw(this),
                source.into().abi(),
                result__.as_mut_ptr(),
            )
            .from_abi::<RedirectVisual>(result__)
        }
    }
    pub fn CreateBooleanKeyFrameAnimation(
        &self,
    ) -> ::windows::core::Result<BooleanKeyFrameAnimation> {
        let this = &::windows::core::Interface::cast::<ICompositor6>(self)?;
        unsafe {
            let mut result__ = ::core::mem::MaybeUninit::zeroed();
            (::windows::core::Vtable::vtable(this).CreateBooleanKeyFrameAnimation)(
                ::windows::core::Vtable::as_raw(this),
                result__.as_mut_ptr(),
            )
            .from_abi::<BooleanKeyFrameAnimation>(result__)
        }
    }
    #[doc = "*Required features: `\"UI_Dispatching\"`*"]
    #[cfg(feature = "UI_Dispatching")]
    pub fn DispatcherQueue(&self) -> ::windows::core::Result<super::Dispatching::DispatcherQueue> {
        let this = &::windows::core::Interface::cast::<ICompositor7>(self)?;
        unsafe {
            let mut result__ = ::core::mem::MaybeUninit::zeroed();
            (::windows::core::Vtable::vtable(this).DispatcherQueue)(
                ::windows::core::Vtable::as_raw(this),
                result__.as_mut_ptr(),
            )
            .from_abi::<super::Dispatching::DispatcherQueue>(result__)
        }
    }
    pub fn CreateAnimationPropertyInfo(&self) -> ::windows::core::Result<AnimationPropertyInfo> {
        let this = &::windows::core::Interface::cast::<ICompositor7>(self)?;
        unsafe {
            let mut result__ = ::core::mem::MaybeUninit::zeroed();
            (::windows::core::Vtable::vtable(this).CreateAnimationPropertyInfo)(
                ::windows::core::Vtable::as_raw(this),
                result__.as_mut_ptr(),
            )
            .from_abi::<AnimationPropertyInfo>(result__)
        }
    }
    pub fn CreateRectangleClip(&self) -> ::windows::core::Result<RectangleClip> {
        let this = &::windows::core::Interface::cast::<ICompositor7>(self)?;
        unsafe {
            let mut result__ = ::core::mem::MaybeUninit::zeroed();
            (::windows::core::Vtable::vtable(this).CreateRectangleClip)(
                ::windows::core::Vtable::as_raw(this),
                result__.as_mut_ptr(),
            )
            .from_abi::<RectangleClip>(result__)
        }
    }
    pub fn CreateRectangleClipWithSides(
        &self,
        left: f32,
        top: f32,
        right: f32,
        bottom: f32,
    ) -> ::windows::core::Result<RectangleClip> {
        let this = &::windows::core::Interface::cast::<ICompositor7>(self)?;
        unsafe {
            let mut result__ = ::core::mem::MaybeUninit::zeroed();
            (::windows::core::Vtable::vtable(this).CreateRectangleClipWithSides)(
                ::windows::core::Vtable::as_raw(this),
                left,
                top,
                right,
                bottom,
                result__.as_mut_ptr(),
            )
            .from_abi::<RectangleClip>(result__)
        }
    }
    pub fn CreateRectangleClipWithSidesAndRadius(
        &self,
        left: f32,
        top: f32,
        right: f32,
        bottom: f32,
        topleftradius: ::windows::Foundation::Numerics::Vector2,
        toprightradius: ::windows::Foundation::Numerics::Vector2,
        bottomrightradius: ::windows::Foundation::Numerics::Vector2,
        bottomleftradius: ::windows::Foundation::Numerics::Vector2,
    ) -> ::windows::core::Result<RectangleClip> {
        let this = &::windows::core::Interface::cast::<ICompositor7>(self)?;
        unsafe {
            let mut result__ = ::core::mem::MaybeUninit::zeroed();
            (::windows::core::Vtable::vtable(this).CreateRectangleClipWithSidesAndRadius)(
                ::windows::core::Vtable::as_raw(this),
                left,
                top,
                right,
                bottom,
                topleftradius,
                toprightradius,
                bottomrightradius,
                bottomleftradius,
                result__.as_mut_ptr(),
            )
            .from_abi::<RectangleClip>(result__)
        }
    }
    pub fn CreateAnimationController(&self) -> ::windows::core::Result<AnimationController> {
        let this = &::windows::core::Interface::cast::<ICompositor8>(self)?;
        unsafe {
            let mut result__ = ::core::mem::MaybeUninit::zeroed();
            (::windows::core::Vtable::vtable(this).CreateAnimationController)(
                ::windows::core::Vtable::as_raw(this),
                result__.as_mut_ptr(),
            )
            .from_abi::<AnimationController>(result__)
        }
    }
    pub fn MaxGlobalPlaybackRate() -> ::windows::core::Result<f32> {
        Self::ICompositorStatics(|this| unsafe {
            let mut result__ = ::core::mem::MaybeUninit::zeroed();
            (::windows::core::Vtable::vtable(this).MaxGlobalPlaybackRate)(
                ::windows::core::Vtable::as_raw(this),
                result__.as_mut_ptr(),
            )
            .from_abi::<f32>(result__)
        })
    }
    pub fn MinGlobalPlaybackRate() -> ::windows::core::Result<f32> {
        Self::ICompositorStatics(|this| unsafe {
            let mut result__ = ::core::mem::MaybeUninit::zeroed();
            (::windows::core::Vtable::vtable(this).MinGlobalPlaybackRate)(
                ::windows::core::Vtable::as_raw(this),
                result__.as_mut_ptr(),
            )
            .from_abi::<f32>(result__)
        })
    }
    pub fn CreateProjectedShadowCaster(
        &self,
    ) -> ::windows::core::Result<CompositionProjectedShadowCaster> {
        let this = &::windows::core::Interface::cast::<ICompositorWithProjectedShadow>(self)?;
        unsafe {
            let mut result__ = ::core::mem::MaybeUninit::zeroed();
            (::windows::core::Vtable::vtable(this).CreateProjectedShadowCaster)(
                ::windows::core::Vtable::as_raw(this),
                result__.as_mut_ptr(),
            )
            .from_abi::<CompositionProjectedShadowCaster>(result__)
        }
    }
    pub fn CreateProjectedShadow(&self) -> ::windows::core::Result<CompositionProjectedShadow> {
        let this = &::windows::core::Interface::cast::<ICompositorWithProjectedShadow>(self)?;
        unsafe {
            let mut result__ = ::core::mem::MaybeUninit::zeroed();
            (::windows::core::Vtable::vtable(this).CreateProjectedShadow)(
                ::windows::core::Vtable::as_raw(this),
                result__.as_mut_ptr(),
            )
            .from_abi::<CompositionProjectedShadow>(result__)
        }
    }
    pub fn CreateProjectedShadowReceiver(
        &self,
    ) -> ::windows::core::Result<CompositionProjectedShadowReceiver> {
        let this = &::windows::core::Interface::cast::<ICompositorWithProjectedShadow>(self)?;
        unsafe {
            let mut result__ = ::core::mem::MaybeUninit::zeroed();
            (::windows::core::Vtable::vtable(this).CreateProjectedShadowReceiver)(
                ::windows::core::Vtable::as_raw(this),
                result__.as_mut_ptr(),
            )
            .from_abi::<CompositionProjectedShadowReceiver>(result__)
        }
    }
    pub fn CreateRadialGradientBrush(
        &self,
    ) -> ::windows::core::Result<CompositionRadialGradientBrush> {
        let this = &::windows::core::Interface::cast::<ICompositorWithRadialGradient>(self)?;
        unsafe {
            let mut result__ = ::core::mem::MaybeUninit::zeroed();
            (::windows::core::Vtable::vtable(this).CreateRadialGradientBrush)(
                ::windows::core::Vtable::as_raw(this),
                result__.as_mut_ptr(),
            )
            .from_abi::<CompositionRadialGradientBrush>(result__)
        }
    }
    pub fn CreateVisualSurface(&self) -> ::windows::core::Result<CompositionVisualSurface> {
        let this = &::windows::core::Interface::cast::<ICompositorWithVisualSurface>(self)?;
        unsafe {
            let mut result__ = ::core::mem::MaybeUninit::zeroed();
            (::windows::core::Vtable::vtable(this).CreateVisualSurface)(
                ::windows::core::Vtable::as_raw(this),
                result__.as_mut_ptr(),
            )
            .from_abi::<CompositionVisualSurface>(result__)
        }
    }
    #[doc(hidden)]
    pub fn ICompositorStatics<R, F: FnOnce(&ICompositorStatics) -> ::windows::core::Result<R>>(
        callback: F,
    ) -> ::windows::core::Result<R> {
        static SHARED: ::windows::core::FactoryCache<Compositor, ICompositorStatics> =
            ::windows::core::FactoryCache::new();
        SHARED.call(callback)
    }
}
impl ::core::clone::Clone for Compositor {
    fn clone(&self) -> Self {
        Self(self.0.clone())
    }
}
impl ::core::cmp::PartialEq for Compositor {
    fn eq(&self, other: &Self) -> bool {
        self.0 == other.0
    }
}
impl ::core::cmp::Eq for Compositor {}
impl ::core::fmt::Debug for Compositor {
    fn fmt(&self, f: &mut ::core::fmt::Formatter<'_>) -> ::core::fmt::Result {
        f.debug_tuple("Compositor").field(&self.0).finish()
    }
}
unsafe impl ::windows::core::RuntimeType for Compositor {
    const SIGNATURE: ::windows::core::ConstBuffer = ::windows::core::ConstBuffer::from_slice(
        b"rc(Microsoft.UI.Composition.Compositor;{95213c13-c4cb-57de-b267-d21ab901ae38})",
    );
    type DefaultType = ::core::option::Option<Self>;
    fn from_default(from: &Self::DefaultType) -> ::windows::core::Result<Self> {
        from.as_ref().cloned().ok_or(::windows::core::Error::OK)
    }
}
unsafe impl ::windows::core::Vtable for Compositor {
    type Vtable = ICompositor_Vtbl;
}
unsafe impl ::windows::core::Interface for Compositor {
    const IID: ::windows::core::GUID = <ICompositor as ::windows::core::Interface>::IID;
}
impl ::windows::core::RuntimeName for Compositor {
    const NAME: &'static str = "Microsoft.UI.Composition.Compositor";
}
::windows::core::interface_hierarchy!(
    Compositor,
    ::windows::core::IUnknown,
    ::windows::core::IInspectable
);
impl ::core::convert::TryFrom<Compositor> for ::windows::Foundation::IClosable {
    type Error = ::windows::core::Error;
    fn try_from(value: Compositor) -> ::windows::core::Result<Self> {
        ::core::convert::TryFrom::try_from(&value)
    }
}
impl ::core::convert::TryFrom<&Compositor> for ::windows::Foundation::IClosable {
    type Error = ::windows::core::Error;
    fn try_from(value: &Compositor) -> ::windows::core::Result<Self> {
        ::windows::core::Interface::cast(value)
    }
}
impl<'a> ::core::convert::TryFrom<&Compositor>
    for ::windows::core::InParam<'a, ::windows::Foundation::IClosable>
{
    type Error = ::windows::core::Error;
    fn try_from(value: &Compositor) -> ::windows::core::Result<Self> {
        let item = ::std::convert::TryInto::try_into(value)?;
        Ok(::windows::core::InParam::owned(item))
    }
}
unsafe impl ::core::marker::Send for Compositor {}
unsafe impl ::core::marker::Sync for Compositor {}
#[doc = "*Required features: `\"UI_Composition\"`*"]
#[repr(transparent)]
pub struct ContainerVisual(::windows::core::IUnknown);
impl ContainerVisual {
    pub fn PopulatePropertyInfo(
        &self,
        propertyname: &::windows::core::HSTRING,
        propertyinfo: &AnimationPropertyInfo,
    ) -> ::windows::core::Result<()> {
        let this = &::windows::core::Interface::cast::<IAnimationObject>(self)?;
        unsafe {
            (::windows::core::Vtable::vtable(this).PopulatePropertyInfo)(
                ::windows::core::Vtable::as_raw(this),
                ::core::mem::transmute_copy(propertyname),
                ::core::mem::transmute_copy(propertyinfo),
            )
            .ok()
        }
    }
    pub fn Close(&self) -> ::windows::core::Result<()> {
        let this = &::windows::core::Interface::cast::<::windows::Foundation::IClosable>(self)?;
        unsafe {
            (::windows::core::Vtable::vtable(this).Close)(::windows::core::Vtable::as_raw(this))
                .ok()
        }
    }
    pub fn Compositor(&self) -> ::windows::core::Result<Compositor> {
        let this = &::windows::core::Interface::cast::<ICompositionObject>(self)?;
        unsafe {
            let mut result__ = ::core::mem::MaybeUninit::zeroed();
            (::windows::core::Vtable::vtable(this).Compositor)(
                ::windows::core::Vtable::as_raw(this),
                result__.as_mut_ptr(),
            )
            .from_abi::<Compositor>(result__)
        }
    }
    pub fn Properties(&self) -> ::windows::core::Result<CompositionPropertySet> {
        let this = &::windows::core::Interface::cast::<ICompositionObject>(self)?;
        unsafe {
            let mut result__ = ::core::mem::MaybeUninit::zeroed();
            (::windows::core::Vtable::vtable(this).Properties)(
                ::windows::core::Vtable::as_raw(this),
                result__.as_mut_ptr(),
            )
            .from_abi::<CompositionPropertySet>(result__)
        }
    }
    pub fn StartAnimation<'a, P0>(
        &self,
        propertyname: &::windows::core::HSTRING,
        animation: P0,
    ) -> ::windows::core::Result<()>
    where
        P0: ::std::convert::Into<::windows::core::InParam<'a, CompositionAnimation>>,
    {
        let this = &::windows::core::Interface::cast::<ICompositionObject>(self)?;
        unsafe {
            (::windows::core::Vtable::vtable(this).StartAnimation)(
                ::windows::core::Vtable::as_raw(this),
                ::core::mem::transmute_copy(propertyname),
                animation.into().abi(),
            )
            .ok()
        }
    }
    pub fn StopAnimation(
        &self,
        propertyname: &::windows::core::HSTRING,
    ) -> ::windows::core::Result<()> {
        let this = &::windows::core::Interface::cast::<ICompositionObject>(self)?;
        unsafe {
            (::windows::core::Vtable::vtable(this).StopAnimation)(
                ::windows::core::Vtable::as_raw(this),
                ::core::mem::transmute_copy(propertyname),
            )
            .ok()
        }
    }
    pub fn Comment(&self) -> ::windows::core::Result<::windows::core::HSTRING> {
        let this = &::windows::core::Interface::cast::<ICompositionObject2>(self)?;
        unsafe {
            let mut result__ = ::core::mem::MaybeUninit::zeroed();
            (::windows::core::Vtable::vtable(this).Comment)(
                ::windows::core::Vtable::as_raw(this),
                result__.as_mut_ptr(),
            )
            .from_abi::<::windows::core::HSTRING>(result__)
        }
    }
    pub fn SetComment(&self, value: &::windows::core::HSTRING) -> ::windows::core::Result<()> {
        let this = &::windows::core::Interface::cast::<ICompositionObject2>(self)?;
        unsafe {
            (::windows::core::Vtable::vtable(this).SetComment)(
                ::windows::core::Vtable::as_raw(this),
                ::core::mem::transmute_copy(value),
            )
            .ok()
        }
    }
    pub fn ImplicitAnimations(&self) -> ::windows::core::Result<ImplicitAnimationCollection> {
        let this = &::windows::core::Interface::cast::<ICompositionObject2>(self)?;
        unsafe {
            let mut result__ = ::core::mem::MaybeUninit::zeroed();
            (::windows::core::Vtable::vtable(this).ImplicitAnimations)(
                ::windows::core::Vtable::as_raw(this),
                result__.as_mut_ptr(),
            )
            .from_abi::<ImplicitAnimationCollection>(result__)
        }
    }
    pub fn SetImplicitAnimations(
        &self,
        value: &ImplicitAnimationCollection,
    ) -> ::windows::core::Result<()> {
        let this = &::windows::core::Interface::cast::<ICompositionObject2>(self)?;
        unsafe {
            (::windows::core::Vtable::vtable(this).SetImplicitAnimations)(
                ::windows::core::Vtable::as_raw(this),
                ::core::mem::transmute_copy(value),
            )
            .ok()
        }
    }
    pub fn StartAnimationGroup<'a, P0, E0>(&self, value: P0) -> ::windows::core::Result<()>
    where
        P0: ::std::convert::TryInto<
            ::windows::core::InParam<'a, ICompositionAnimationBase>,
            Error = E0,
        >,
        E0: ::std::convert::Into<::windows::core::Error>,
    {
        let this = &::windows::core::Interface::cast::<ICompositionObject2>(self)?;
        unsafe {
            (::windows::core::Vtable::vtable(this).StartAnimationGroup)(
                ::windows::core::Vtable::as_raw(this),
                value.try_into().map_err(|e| e.into())?.abi(),
            )
            .ok()
        }
    }
    pub fn StopAnimationGroup<'a, P0, E0>(&self, value: P0) -> ::windows::core::Result<()>
    where
        P0: ::std::convert::TryInto<
            ::windows::core::InParam<'a, ICompositionAnimationBase>,
            Error = E0,
        >,
        E0: ::std::convert::Into<::windows::core::Error>,
    {
        let this = &::windows::core::Interface::cast::<ICompositionObject2>(self)?;
        unsafe {
            (::windows::core::Vtable::vtable(this).StopAnimationGroup)(
                ::windows::core::Vtable::as_raw(this),
                value.try_into().map_err(|e| e.into())?.abi(),
            )
            .ok()
        }
    }
    #[doc = "*Required features: `\"UI_Dispatching\"`*"]
    #[cfg(feature = "UI_Dispatching")]
    pub fn DispatcherQueue(&self) -> ::windows::core::Result<super::Dispatching::DispatcherQueue> {
        let this = &::windows::core::Interface::cast::<ICompositionObject3>(self)?;
        unsafe {
            let mut result__ = ::core::mem::MaybeUninit::zeroed();
            (::windows::core::Vtable::vtable(this).DispatcherQueue)(
                ::windows::core::Vtable::as_raw(this),
                result__.as_mut_ptr(),
            )
            .from_abi::<super::Dispatching::DispatcherQueue>(result__)
        }
    }
    pub fn TryGetAnimationController(
        &self,
        propertyname: &::windows::core::HSTRING,
    ) -> ::windows::core::Result<AnimationController> {
        let this = &::windows::core::Interface::cast::<ICompositionObject4>(self)?;
        unsafe {
            let mut result__ = ::core::mem::MaybeUninit::zeroed();
            (::windows::core::Vtable::vtable(this).TryGetAnimationController)(
                ::windows::core::Vtable::as_raw(this),
                ::core::mem::transmute_copy(propertyname),
                result__.as_mut_ptr(),
            )
            .from_abi::<AnimationController>(result__)
        }
    }
    pub fn StartAnimationWithController<'a, P0>(
        &self,
        propertyname: &::windows::core::HSTRING,
        animation: P0,
        animationcontroller: &AnimationController,
    ) -> ::windows::core::Result<()>
    where
        P0: ::std::convert::Into<::windows::core::InParam<'a, CompositionAnimation>>,
    {
        let this = &::windows::core::Interface::cast::<ICompositionObject5>(self)?;
        unsafe {
            (::windows::core::Vtable::vtable(this).StartAnimationWithController)(
                ::windows::core::Vtable::as_raw(this),
                ::core::mem::transmute_copy(propertyname),
                animation.into().abi(),
                ::core::mem::transmute_copy(animationcontroller),
            )
            .ok()
        }
    }
    pub fn Children(&self) -> ::windows::core::Result<VisualCollection> {
        let this = self;
        unsafe {
            let mut result__ = ::core::mem::MaybeUninit::zeroed();
            (::windows::core::Vtable::vtable(this).Children)(
                ::windows::core::Vtable::as_raw(this),
                result__.as_mut_ptr(),
            )
            .from_abi::<VisualCollection>(result__)
        }
    }
    pub fn AnchorPoint(&self) -> ::windows::core::Result<::windows::Foundation::Numerics::Vector2> {
        let this = &::windows::core::Interface::cast::<IVisual>(self)?;
        unsafe {
            let mut result__ = ::core::mem::MaybeUninit::zeroed();
            (::windows::core::Vtable::vtable(this).AnchorPoint)(
                ::windows::core::Vtable::as_raw(this),
                result__.as_mut_ptr(),
            )
            .from_abi::<::windows::Foundation::Numerics::Vector2>(result__)
        }
    }
    pub fn SetAnchorPoint(
        &self,
        value: ::windows::Foundation::Numerics::Vector2,
    ) -> ::windows::core::Result<()> {
        let this = &::windows::core::Interface::cast::<IVisual>(self)?;
        unsafe {
            (::windows::core::Vtable::vtable(this).SetAnchorPoint)(
                ::windows::core::Vtable::as_raw(this),
                value,
            )
            .ok()
        }
    }
    pub fn BackfaceVisibility(&self) -> ::windows::core::Result<CompositionBackfaceVisibility> {
        let this = &::windows::core::Interface::cast::<IVisual>(self)?;
        unsafe {
            let mut result__ = ::core::mem::MaybeUninit::zeroed();
            (::windows::core::Vtable::vtable(this).BackfaceVisibility)(
                ::windows::core::Vtable::as_raw(this),
                result__.as_mut_ptr(),
            )
            .from_abi::<CompositionBackfaceVisibility>(result__)
        }
    }
    pub fn SetBackfaceVisibility(
        &self,
        value: CompositionBackfaceVisibility,
    ) -> ::windows::core::Result<()> {
        let this = &::windows::core::Interface::cast::<IVisual>(self)?;
        unsafe {
            (::windows::core::Vtable::vtable(this).SetBackfaceVisibility)(
                ::windows::core::Vtable::as_raw(this),
                value,
            )
            .ok()
        }
    }
    pub fn BorderMode(&self) -> ::windows::core::Result<CompositionBorderMode> {
        let this = &::windows::core::Interface::cast::<IVisual>(self)?;
        unsafe {
            let mut result__ = ::core::mem::MaybeUninit::zeroed();
            (::windows::core::Vtable::vtable(this).BorderMode)(
                ::windows::core::Vtable::as_raw(this),
                result__.as_mut_ptr(),
            )
            .from_abi::<CompositionBorderMode>(result__)
        }
    }
    pub fn SetBorderMode(&self, value: CompositionBorderMode) -> ::windows::core::Result<()> {
        let this = &::windows::core::Interface::cast::<IVisual>(self)?;
        unsafe {
            (::windows::core::Vtable::vtable(this).SetBorderMode)(
                ::windows::core::Vtable::as_raw(this),
                value,
            )
            .ok()
        }
    }
    pub fn CenterPoint(&self) -> ::windows::core::Result<::windows::Foundation::Numerics::Vector3> {
        let this = &::windows::core::Interface::cast::<IVisual>(self)?;
        unsafe {
            let mut result__ = ::core::mem::MaybeUninit::zeroed();
            (::windows::core::Vtable::vtable(this).CenterPoint)(
                ::windows::core::Vtable::as_raw(this),
                result__.as_mut_ptr(),
            )
            .from_abi::<::windows::Foundation::Numerics::Vector3>(result__)
        }
    }
    pub fn SetCenterPoint(
        &self,
        value: ::windows::Foundation::Numerics::Vector3,
    ) -> ::windows::core::Result<()> {
        let this = &::windows::core::Interface::cast::<IVisual>(self)?;
        unsafe {
            (::windows::core::Vtable::vtable(this).SetCenterPoint)(
                ::windows::core::Vtable::as_raw(this),
                value,
            )
            .ok()
        }
    }
    pub fn Clip(&self) -> ::windows::core::Result<CompositionClip> {
        let this = &::windows::core::Interface::cast::<IVisual>(self)?;
        unsafe {
            let mut result__ = ::core::mem::MaybeUninit::zeroed();
            (::windows::core::Vtable::vtable(this).Clip)(
                ::windows::core::Vtable::as_raw(this),
                result__.as_mut_ptr(),
            )
            .from_abi::<CompositionClip>(result__)
        }
    }
    pub fn SetClip<'a, P0>(&self, value: P0) -> ::windows::core::Result<()>
    where
        P0: ::std::convert::Into<::windows::core::InParam<'a, CompositionClip>>,
    {
        let this = &::windows::core::Interface::cast::<IVisual>(self)?;
        unsafe {
            (::windows::core::Vtable::vtable(this).SetClip)(
                ::windows::core::Vtable::as_raw(this),
                value.into().abi(),
            )
            .ok()
        }
    }
    pub fn CompositeMode(&self) -> ::windows::core::Result<CompositionCompositeMode> {
        let this = &::windows::core::Interface::cast::<IVisual>(self)?;
        unsafe {
            let mut result__ = ::core::mem::MaybeUninit::zeroed();
            (::windows::core::Vtable::vtable(this).CompositeMode)(
                ::windows::core::Vtable::as_raw(this),
                result__.as_mut_ptr(),
            )
            .from_abi::<CompositionCompositeMode>(result__)
        }
    }
    pub fn SetCompositeMode(&self, value: CompositionCompositeMode) -> ::windows::core::Result<()> {
        let this = &::windows::core::Interface::cast::<IVisual>(self)?;
        unsafe {
            (::windows::core::Vtable::vtable(this).SetCompositeMode)(
                ::windows::core::Vtable::as_raw(this),
                value,
            )
            .ok()
        }
    }
    pub fn IsVisible(&self) -> ::windows::core::Result<bool> {
        let this = &::windows::core::Interface::cast::<IVisual>(self)?;
        unsafe {
            let mut result__ = ::core::mem::MaybeUninit::zeroed();
            (::windows::core::Vtable::vtable(this).IsVisible)(
                ::windows::core::Vtable::as_raw(this),
                result__.as_mut_ptr(),
            )
            .from_abi::<bool>(result__)
        }
    }
    pub fn SetIsVisible(&self, value: bool) -> ::windows::core::Result<()> {
        let this = &::windows::core::Interface::cast::<IVisual>(self)?;
        unsafe {
            (::windows::core::Vtable::vtable(this).SetIsVisible)(
                ::windows::core::Vtable::as_raw(this),
                value,
            )
            .ok()
        }
    }
    pub fn Offset(&self) -> ::windows::core::Result<::windows::Foundation::Numerics::Vector3> {
        let this = &::windows::core::Interface::cast::<IVisual>(self)?;
        unsafe {
            let mut result__ = ::core::mem::MaybeUninit::zeroed();
            (::windows::core::Vtable::vtable(this).Offset)(
                ::windows::core::Vtable::as_raw(this),
                result__.as_mut_ptr(),
            )
            .from_abi::<::windows::Foundation::Numerics::Vector3>(result__)
        }
    }
    pub fn SetOffset(
        &self,
        value: ::windows::Foundation::Numerics::Vector3,
    ) -> ::windows::core::Result<()> {
        let this = &::windows::core::Interface::cast::<IVisual>(self)?;
        unsafe {
            (::windows::core::Vtable::vtable(this).SetOffset)(
                ::windows::core::Vtable::as_raw(this),
                value,
            )
            .ok()
        }
    }
    pub fn Opacity(&self) -> ::windows::core::Result<f32> {
        let this = &::windows::core::Interface::cast::<IVisual>(self)?;
        unsafe {
            let mut result__ = ::core::mem::MaybeUninit::zeroed();
            (::windows::core::Vtable::vtable(this).Opacity)(
                ::windows::core::Vtable::as_raw(this),
                result__.as_mut_ptr(),
            )
            .from_abi::<f32>(result__)
        }
    }
    pub fn SetOpacity(&self, value: f32) -> ::windows::core::Result<()> {
        let this = &::windows::core::Interface::cast::<IVisual>(self)?;
        unsafe {
            (::windows::core::Vtable::vtable(this).SetOpacity)(
                ::windows::core::Vtable::as_raw(this),
                value,
            )
            .ok()
        }
    }
    pub fn Orientation(
        &self,
    ) -> ::windows::core::Result<::windows::Foundation::Numerics::Quaternion> {
        let this = &::windows::core::Interface::cast::<IVisual>(self)?;
        unsafe {
            let mut result__ = ::core::mem::MaybeUninit::zeroed();
            (::windows::core::Vtable::vtable(this).Orientation)(
                ::windows::core::Vtable::as_raw(this),
                result__.as_mut_ptr(),
            )
            .from_abi::<::windows::Foundation::Numerics::Quaternion>(result__)
        }
    }
    pub fn SetOrientation(
        &self,
        value: ::windows::Foundation::Numerics::Quaternion,
    ) -> ::windows::core::Result<()> {
        let this = &::windows::core::Interface::cast::<IVisual>(self)?;
        unsafe {
            (::windows::core::Vtable::vtable(this).SetOrientation)(
                ::windows::core::Vtable::as_raw(this),
                value,
            )
            .ok()
        }
    }
    pub fn Parent(&self) -> ::windows::core::Result<ContainerVisual> {
        let this = &::windows::core::Interface::cast::<IVisual>(self)?;
        unsafe {
            let mut result__ = ::core::mem::MaybeUninit::zeroed();
            (::windows::core::Vtable::vtable(this).Parent)(
                ::windows::core::Vtable::as_raw(this),
                result__.as_mut_ptr(),
            )
            .from_abi::<ContainerVisual>(result__)
        }
    }
    pub fn RotationAngle(&self) -> ::windows::core::Result<f32> {
        let this = &::windows::core::Interface::cast::<IVisual>(self)?;
        unsafe {
            let mut result__ = ::core::mem::MaybeUninit::zeroed();
            (::windows::core::Vtable::vtable(this).RotationAngle)(
                ::windows::core::Vtable::as_raw(this),
                result__.as_mut_ptr(),
            )
            .from_abi::<f32>(result__)
        }
    }
    pub fn SetRotationAngle(&self, value: f32) -> ::windows::core::Result<()> {
        let this = &::windows::core::Interface::cast::<IVisual>(self)?;
        unsafe {
            (::windows::core::Vtable::vtable(this).SetRotationAngle)(
                ::windows::core::Vtable::as_raw(this),
                value,
            )
            .ok()
        }
    }
    pub fn RotationAngleInDegrees(&self) -> ::windows::core::Result<f32> {
        let this = &::windows::core::Interface::cast::<IVisual>(self)?;
        unsafe {
            let mut result__ = ::core::mem::MaybeUninit::zeroed();
            (::windows::core::Vtable::vtable(this).RotationAngleInDegrees)(
                ::windows::core::Vtable::as_raw(this),
                result__.as_mut_ptr(),
            )
            .from_abi::<f32>(result__)
        }
    }
    pub fn SetRotationAngleInDegrees(&self, value: f32) -> ::windows::core::Result<()> {
        let this = &::windows::core::Interface::cast::<IVisual>(self)?;
        unsafe {
            (::windows::core::Vtable::vtable(this).SetRotationAngleInDegrees)(
                ::windows::core::Vtable::as_raw(this),
                value,
            )
            .ok()
        }
    }
    pub fn RotationAxis(
        &self,
    ) -> ::windows::core::Result<::windows::Foundation::Numerics::Vector3> {
        let this = &::windows::core::Interface::cast::<IVisual>(self)?;
        unsafe {
            let mut result__ = ::core::mem::MaybeUninit::zeroed();
            (::windows::core::Vtable::vtable(this).RotationAxis)(
                ::windows::core::Vtable::as_raw(this),
                result__.as_mut_ptr(),
            )
            .from_abi::<::windows::Foundation::Numerics::Vector3>(result__)
        }
    }
    pub fn SetRotationAxis(
        &self,
        value: ::windows::Foundation::Numerics::Vector3,
    ) -> ::windows::core::Result<()> {
        let this = &::windows::core::Interface::cast::<IVisual>(self)?;
        unsafe {
            (::windows::core::Vtable::vtable(this).SetRotationAxis)(
                ::windows::core::Vtable::as_raw(this),
                value,
            )
            .ok()
        }
    }
    pub fn Scale(&self) -> ::windows::core::Result<::windows::Foundation::Numerics::Vector3> {
        let this = &::windows::core::Interface::cast::<IVisual>(self)?;
        unsafe {
            let mut result__ = ::core::mem::MaybeUninit::zeroed();
            (::windows::core::Vtable::vtable(this).Scale)(
                ::windows::core::Vtable::as_raw(this),
                result__.as_mut_ptr(),
            )
            .from_abi::<::windows::Foundation::Numerics::Vector3>(result__)
        }
    }
    pub fn SetScale(
        &self,
        value: ::windows::Foundation::Numerics::Vector3,
    ) -> ::windows::core::Result<()> {
        let this = &::windows::core::Interface::cast::<IVisual>(self)?;
        unsafe {
            (::windows::core::Vtable::vtable(this).SetScale)(
                ::windows::core::Vtable::as_raw(this),
                value,
            )
            .ok()
        }
    }
    pub fn Size(&self) -> ::windows::core::Result<::windows::Foundation::Numerics::Vector2> {
        let this = &::windows::core::Interface::cast::<IVisual>(self)?;
        unsafe {
            let mut result__ = ::core::mem::MaybeUninit::zeroed();
            (::windows::core::Vtable::vtable(this).Size)(
                ::windows::core::Vtable::as_raw(this),
                result__.as_mut_ptr(),
            )
            .from_abi::<::windows::Foundation::Numerics::Vector2>(result__)
        }
    }
    pub fn SetSize(
        &self,
        value: ::windows::Foundation::Numerics::Vector2,
    ) -> ::windows::core::Result<()> {
        let this = &::windows::core::Interface::cast::<IVisual>(self)?;
        unsafe {
            (::windows::core::Vtable::vtable(this).SetSize)(
                ::windows::core::Vtable::as_raw(this),
                value,
            )
            .ok()
        }
    }
    pub fn TransformMatrix(
        &self,
    ) -> ::windows::core::Result<::windows::Foundation::Numerics::Matrix4x4> {
        let this = &::windows::core::Interface::cast::<IVisual>(self)?;
        unsafe {
            let mut result__ = ::core::mem::MaybeUninit::zeroed();
            (::windows::core::Vtable::vtable(this).TransformMatrix)(
                ::windows::core::Vtable::as_raw(this),
                result__.as_mut_ptr(),
            )
            .from_abi::<::windows::Foundation::Numerics::Matrix4x4>(result__)
        }
    }
    pub fn SetTransformMatrix(
        &self,
        value: ::windows::Foundation::Numerics::Matrix4x4,
    ) -> ::windows::core::Result<()> {
        let this = &::windows::core::Interface::cast::<IVisual>(self)?;
        unsafe {
            (::windows::core::Vtable::vtable(this).SetTransformMatrix)(
                ::windows::core::Vtable::as_raw(this),
                value,
            )
            .ok()
        }
    }
    pub fn ParentForTransform(&self) -> ::windows::core::Result<Visual> {
        let this = &::windows::core::Interface::cast::<IVisual2>(self)?;
        unsafe {
            let mut result__ = ::core::mem::MaybeUninit::zeroed();
            (::windows::core::Vtable::vtable(this).ParentForTransform)(
                ::windows::core::Vtable::as_raw(this),
                result__.as_mut_ptr(),
            )
            .from_abi::<Visual>(result__)
        }
    }
    pub fn SetParentForTransform<'a, P0>(&self, value: P0) -> ::windows::core::Result<()>
    where
        P0: ::std::convert::Into<::windows::core::InParam<'a, Visual>>,
    {
        let this = &::windows::core::Interface::cast::<IVisual2>(self)?;
        unsafe {
            (::windows::core::Vtable::vtable(this).SetParentForTransform)(
                ::windows::core::Vtable::as_raw(this),
                value.into().abi(),
            )
            .ok()
        }
    }
    pub fn RelativeOffsetAdjustment(
        &self,
    ) -> ::windows::core::Result<::windows::Foundation::Numerics::Vector3> {
        let this = &::windows::core::Interface::cast::<IVisual2>(self)?;
        unsafe {
            let mut result__ = ::core::mem::MaybeUninit::zeroed();
            (::windows::core::Vtable::vtable(this).RelativeOffsetAdjustment)(
                ::windows::core::Vtable::as_raw(this),
                result__.as_mut_ptr(),
            )
            .from_abi::<::windows::Foundation::Numerics::Vector3>(result__)
        }
    }
    pub fn SetRelativeOffsetAdjustment(
        &self,
        value: ::windows::Foundation::Numerics::Vector3,
    ) -> ::windows::core::Result<()> {
        let this = &::windows::core::Interface::cast::<IVisual2>(self)?;
        unsafe {
            (::windows::core::Vtable::vtable(this).SetRelativeOffsetAdjustment)(
                ::windows::core::Vtable::as_raw(this),
                value,
            )
            .ok()
        }
    }
    pub fn RelativeSizeAdjustment(
        &self,
    ) -> ::windows::core::Result<::windows::Foundation::Numerics::Vector2> {
        let this = &::windows::core::Interface::cast::<IVisual2>(self)?;
        unsafe {
            let mut result__ = ::core::mem::MaybeUninit::zeroed();
            (::windows::core::Vtable::vtable(this).RelativeSizeAdjustment)(
                ::windows::core::Vtable::as_raw(this),
                result__.as_mut_ptr(),
            )
            .from_abi::<::windows::Foundation::Numerics::Vector2>(result__)
        }
    }
    pub fn SetRelativeSizeAdjustment(
        &self,
        value: ::windows::Foundation::Numerics::Vector2,
    ) -> ::windows::core::Result<()> {
        let this = &::windows::core::Interface::cast::<IVisual2>(self)?;
        unsafe {
            (::windows::core::Vtable::vtable(this).SetRelativeSizeAdjustment)(
                ::windows::core::Vtable::as_raw(this),
                value,
            )
            .ok()
        }
    }
    pub fn IsHitTestVisible(&self) -> ::windows::core::Result<bool> {
        let this = &::windows::core::Interface::cast::<IVisual3>(self)?;
        unsafe {
            let mut result__ = ::core::mem::MaybeUninit::zeroed();
            (::windows::core::Vtable::vtable(this).IsHitTestVisible)(
                ::windows::core::Vtable::as_raw(this),
                result__.as_mut_ptr(),
            )
            .from_abi::<bool>(result__)
        }
    }
    pub fn SetIsHitTestVisible(&self, value: bool) -> ::windows::core::Result<()> {
        let this = &::windows::core::Interface::cast::<IVisual3>(self)?;
        unsafe {
            (::windows::core::Vtable::vtable(this).SetIsHitTestVisible)(
                ::windows::core::Vtable::as_raw(this),
                value,
            )
            .ok()
        }
    }
    pub fn IsPixelSnappingEnabled(&self) -> ::windows::core::Result<bool> {
        let this = &::windows::core::Interface::cast::<IVisual4>(self)?;
        unsafe {
            let mut result__ = ::core::mem::MaybeUninit::zeroed();
            (::windows::core::Vtable::vtable(this).IsPixelSnappingEnabled)(
                ::windows::core::Vtable::as_raw(this),
                result__.as_mut_ptr(),
            )
            .from_abi::<bool>(result__)
        }
    }
    pub fn SetIsPixelSnappingEnabled(&self, value: bool) -> ::windows::core::Result<()> {
        let this = &::windows::core::Interface::cast::<IVisual4>(self)?;
        unsafe {
            (::windows::core::Vtable::vtable(this).SetIsPixelSnappingEnabled)(
                ::windows::core::Vtable::as_raw(this),
                value,
            )
            .ok()
        }
    }
}
impl ::core::clone::Clone for ContainerVisual {
    fn clone(&self) -> Self {
        Self(self.0.clone())
    }
}
impl ::core::cmp::PartialEq for ContainerVisual {
    fn eq(&self, other: &Self) -> bool {
        self.0 == other.0
    }
}
impl ::core::cmp::Eq for ContainerVisual {}
impl ::core::fmt::Debug for ContainerVisual {
    fn fmt(&self, f: &mut ::core::fmt::Formatter<'_>) -> ::core::fmt::Result {
        f.debug_tuple("ContainerVisual").field(&self.0).finish()
    }
}
unsafe impl ::windows::core::RuntimeType for ContainerVisual {
    const SIGNATURE: ::windows::core::ConstBuffer = ::windows::core::ConstBuffer::from_slice(
        b"rc(Microsoft.UI.Composition.ContainerVisual;{c70dbce1-2c2f-5d8e-91a4-aae1121e6186})",
    );
    type DefaultType = ::core::option::Option<Self>;
    fn from_default(from: &Self::DefaultType) -> ::windows::core::Result<Self> {
        from.as_ref().cloned().ok_or(::windows::core::Error::OK)
    }
}
unsafe impl ::windows::core::Vtable for ContainerVisual {
    type Vtable = IContainerVisual_Vtbl;
}
unsafe impl ::windows::core::Interface for ContainerVisual {
    const IID: ::windows::core::GUID = <IContainerVisual as ::windows::core::Interface>::IID;
}
impl ::windows::core::RuntimeName for ContainerVisual {
    const NAME: &'static str = "Microsoft.UI.Composition.ContainerVisual";
}
::windows::core::interface_hierarchy!(
    ContainerVisual,
    ::windows::core::IUnknown,
    ::windows::core::IInspectable
);
impl ::core::convert::TryFrom<ContainerVisual> for IAnimationObject {
    type Error = ::windows::core::Error;
    fn try_from(value: ContainerVisual) -> ::windows::core::Result<Self> {
        ::core::convert::TryFrom::try_from(&value)
    }
}
impl ::core::convert::TryFrom<&ContainerVisual> for IAnimationObject {
    type Error = ::windows::core::Error;
    fn try_from(value: &ContainerVisual) -> ::windows::core::Result<Self> {
        ::windows::core::Interface::cast(value)
    }
}
impl<'a> ::core::convert::TryFrom<&ContainerVisual>
    for ::windows::core::InParam<'a, IAnimationObject>
{
    type Error = ::windows::core::Error;
    fn try_from(value: &ContainerVisual) -> ::windows::core::Result<Self> {
        let item = ::std::convert::TryInto::try_into(value)?;
        Ok(::windows::core::InParam::owned(item))
    }
}
impl ::core::convert::TryFrom<ContainerVisual> for ::windows::Foundation::IClosable {
    type Error = ::windows::core::Error;
    fn try_from(value: ContainerVisual) -> ::windows::core::Result<Self> {
        ::core::convert::TryFrom::try_from(&value)
    }
}
impl ::core::convert::TryFrom<&ContainerVisual> for ::windows::Foundation::IClosable {
    type Error = ::windows::core::Error;
    fn try_from(value: &ContainerVisual) -> ::windows::core::Result<Self> {
        ::windows::core::Interface::cast(value)
    }
}
impl<'a> ::core::convert::TryFrom<&ContainerVisual>
    for ::windows::core::InParam<'a, ::windows::Foundation::IClosable>
{
    type Error = ::windows::core::Error;
    fn try_from(value: &ContainerVisual) -> ::windows::core::Result<Self> {
        let item = ::std::convert::TryInto::try_into(value)?;
        Ok(::windows::core::InParam::owned(item))
    }
}
impl ::core::convert::From<ContainerVisual> for Visual {
    fn from(value: ContainerVisual) -> Self {
        ::core::convert::From::from(&value)
    }
}
impl ::core::convert::From<&ContainerVisual> for Visual {
    fn from(value: &ContainerVisual) -> Self {
        ::windows::core::Interface::cast(value).unwrap()
    }
}
impl<'a> ::core::convert::From<&ContainerVisual> for ::windows::core::InParam<'a, Visual> {
    fn from(value: &ContainerVisual) -> Self {
        ::windows::core::InParam::owned(value.into())
    }
}
impl ::core::convert::From<ContainerVisual> for CompositionObject {
    fn from(value: ContainerVisual) -> Self {
        ::core::convert::From::from(&value)
    }
}
impl ::core::convert::From<&ContainerVisual> for CompositionObject {
    fn from(value: &ContainerVisual) -> Self {
        ::windows::core::Interface::cast(value).unwrap()
    }
}
impl<'a> ::core::convert::From<&ContainerVisual>
    for ::windows::core::InParam<'a, CompositionObject>
{
    fn from(value: &ContainerVisual) -> Self {
        ::windows::core::InParam::owned(value.into())
    }
}
unsafe impl ::core::marker::Send for ContainerVisual {}
unsafe impl ::core::marker::Sync for ContainerVisual {}
#[doc = "*Required features: `\"UI_Composition\"`*"]
#[repr(transparent)]
pub struct CubicBezierEasingFunction(::windows::core::IUnknown);
impl CubicBezierEasingFunction {
    pub fn PopulatePropertyInfo(
        &self,
        propertyname: &::windows::core::HSTRING,
        propertyinfo: &AnimationPropertyInfo,
    ) -> ::windows::core::Result<()> {
        let this = &::windows::core::Interface::cast::<IAnimationObject>(self)?;
        unsafe {
            (::windows::core::Vtable::vtable(this).PopulatePropertyInfo)(
                ::windows::core::Vtable::as_raw(this),
                ::core::mem::transmute_copy(propertyname),
                ::core::mem::transmute_copy(propertyinfo),
            )
            .ok()
        }
    }
    pub fn Close(&self) -> ::windows::core::Result<()> {
        let this = &::windows::core::Interface::cast::<::windows::Foundation::IClosable>(self)?;
        unsafe {
            (::windows::core::Vtable::vtable(this).Close)(::windows::core::Vtable::as_raw(this))
                .ok()
        }
    }
    pub fn Compositor(&self) -> ::windows::core::Result<Compositor> {
        let this = &::windows::core::Interface::cast::<ICompositionObject>(self)?;
        unsafe {
            let mut result__ = ::core::mem::MaybeUninit::zeroed();
            (::windows::core::Vtable::vtable(this).Compositor)(
                ::windows::core::Vtable::as_raw(this),
                result__.as_mut_ptr(),
            )
            .from_abi::<Compositor>(result__)
        }
    }
    pub fn Properties(&self) -> ::windows::core::Result<CompositionPropertySet> {
        let this = &::windows::core::Interface::cast::<ICompositionObject>(self)?;
        unsafe {
            let mut result__ = ::core::mem::MaybeUninit::zeroed();
            (::windows::core::Vtable::vtable(this).Properties)(
                ::windows::core::Vtable::as_raw(this),
                result__.as_mut_ptr(),
            )
            .from_abi::<CompositionPropertySet>(result__)
        }
    }
    pub fn StartAnimation<'a, P0>(
        &self,
        propertyname: &::windows::core::HSTRING,
        animation: P0,
    ) -> ::windows::core::Result<()>
    where
        P0: ::std::convert::Into<::windows::core::InParam<'a, CompositionAnimation>>,
    {
        let this = &::windows::core::Interface::cast::<ICompositionObject>(self)?;
        unsafe {
            (::windows::core::Vtable::vtable(this).StartAnimation)(
                ::windows::core::Vtable::as_raw(this),
                ::core::mem::transmute_copy(propertyname),
                animation.into().abi(),
            )
            .ok()
        }
    }
    pub fn StopAnimation(
        &self,
        propertyname: &::windows::core::HSTRING,
    ) -> ::windows::core::Result<()> {
        let this = &::windows::core::Interface::cast::<ICompositionObject>(self)?;
        unsafe {
            (::windows::core::Vtable::vtable(this).StopAnimation)(
                ::windows::core::Vtable::as_raw(this),
                ::core::mem::transmute_copy(propertyname),
            )
            .ok()
        }
    }
    pub fn Comment(&self) -> ::windows::core::Result<::windows::core::HSTRING> {
        let this = &::windows::core::Interface::cast::<ICompositionObject2>(self)?;
        unsafe {
            let mut result__ = ::core::mem::MaybeUninit::zeroed();
            (::windows::core::Vtable::vtable(this).Comment)(
                ::windows::core::Vtable::as_raw(this),
                result__.as_mut_ptr(),
            )
            .from_abi::<::windows::core::HSTRING>(result__)
        }
    }
    pub fn SetComment(&self, value: &::windows::core::HSTRING) -> ::windows::core::Result<()> {
        let this = &::windows::core::Interface::cast::<ICompositionObject2>(self)?;
        unsafe {
            (::windows::core::Vtable::vtable(this).SetComment)(
                ::windows::core::Vtable::as_raw(this),
                ::core::mem::transmute_copy(value),
            )
            .ok()
        }
    }
    pub fn ImplicitAnimations(&self) -> ::windows::core::Result<ImplicitAnimationCollection> {
        let this = &::windows::core::Interface::cast::<ICompositionObject2>(self)?;
        unsafe {
            let mut result__ = ::core::mem::MaybeUninit::zeroed();
            (::windows::core::Vtable::vtable(this).ImplicitAnimations)(
                ::windows::core::Vtable::as_raw(this),
                result__.as_mut_ptr(),
            )
            .from_abi::<ImplicitAnimationCollection>(result__)
        }
    }
    pub fn SetImplicitAnimations(
        &self,
        value: &ImplicitAnimationCollection,
    ) -> ::windows::core::Result<()> {
        let this = &::windows::core::Interface::cast::<ICompositionObject2>(self)?;
        unsafe {
            (::windows::core::Vtable::vtable(this).SetImplicitAnimations)(
                ::windows::core::Vtable::as_raw(this),
                ::core::mem::transmute_copy(value),
            )
            .ok()
        }
    }
    pub fn StartAnimationGroup<'a, P0, E0>(&self, value: P0) -> ::windows::core::Result<()>
    where
        P0: ::std::convert::TryInto<
            ::windows::core::InParam<'a, ICompositionAnimationBase>,
            Error = E0,
        >,
        E0: ::std::convert::Into<::windows::core::Error>,
    {
        let this = &::windows::core::Interface::cast::<ICompositionObject2>(self)?;
        unsafe {
            (::windows::core::Vtable::vtable(this).StartAnimationGroup)(
                ::windows::core::Vtable::as_raw(this),
                value.try_into().map_err(|e| e.into())?.abi(),
            )
            .ok()
        }
    }
    pub fn StopAnimationGroup<'a, P0, E0>(&self, value: P0) -> ::windows::core::Result<()>
    where
        P0: ::std::convert::TryInto<
            ::windows::core::InParam<'a, ICompositionAnimationBase>,
            Error = E0,
        >,
        E0: ::std::convert::Into<::windows::core::Error>,
    {
        let this = &::windows::core::Interface::cast::<ICompositionObject2>(self)?;
        unsafe {
            (::windows::core::Vtable::vtable(this).StopAnimationGroup)(
                ::windows::core::Vtable::as_raw(this),
                value.try_into().map_err(|e| e.into())?.abi(),
            )
            .ok()
        }
    }
    #[doc = "*Required features: `\"UI_Dispatching\"`*"]
    #[cfg(feature = "UI_Dispatching")]
    pub fn DispatcherQueue(&self) -> ::windows::core::Result<super::Dispatching::DispatcherQueue> {
        let this = &::windows::core::Interface::cast::<ICompositionObject3>(self)?;
        unsafe {
            let mut result__ = ::core::mem::MaybeUninit::zeroed();
            (::windows::core::Vtable::vtable(this).DispatcherQueue)(
                ::windows::core::Vtable::as_raw(this),
                result__.as_mut_ptr(),
            )
            .from_abi::<super::Dispatching::DispatcherQueue>(result__)
        }
    }
    pub fn TryGetAnimationController(
        &self,
        propertyname: &::windows::core::HSTRING,
    ) -> ::windows::core::Result<AnimationController> {
        let this = &::windows::core::Interface::cast::<ICompositionObject4>(self)?;
        unsafe {
            let mut result__ = ::core::mem::MaybeUninit::zeroed();
            (::windows::core::Vtable::vtable(this).TryGetAnimationController)(
                ::windows::core::Vtable::as_raw(this),
                ::core::mem::transmute_copy(propertyname),
                result__.as_mut_ptr(),
            )
            .from_abi::<AnimationController>(result__)
        }
    }
    pub fn StartAnimationWithController<'a, P0>(
        &self,
        propertyname: &::windows::core::HSTRING,
        animation: P0,
        animationcontroller: &AnimationController,
    ) -> ::windows::core::Result<()>
    where
        P0: ::std::convert::Into<::windows::core::InParam<'a, CompositionAnimation>>,
    {
        let this = &::windows::core::Interface::cast::<ICompositionObject5>(self)?;
        unsafe {
            (::windows::core::Vtable::vtable(this).StartAnimationWithController)(
                ::windows::core::Vtable::as_raw(this),
                ::core::mem::transmute_copy(propertyname),
                animation.into().abi(),
                ::core::mem::transmute_copy(animationcontroller),
            )
            .ok()
        }
    }
    pub fn ControlPoint1(
        &self,
    ) -> ::windows::core::Result<::windows::Foundation::Numerics::Vector2> {
        let this = self;
        unsafe {
            let mut result__ = ::core::mem::MaybeUninit::zeroed();
            (::windows::core::Vtable::vtable(this).ControlPoint1)(
                ::windows::core::Vtable::as_raw(this),
                result__.as_mut_ptr(),
            )
            .from_abi::<::windows::Foundation::Numerics::Vector2>(result__)
        }
    }
    pub fn ControlPoint2(
        &self,
    ) -> ::windows::core::Result<::windows::Foundation::Numerics::Vector2> {
        let this = self;
        unsafe {
            let mut result__ = ::core::mem::MaybeUninit::zeroed();
            (::windows::core::Vtable::vtable(this).ControlPoint2)(
                ::windows::core::Vtable::as_raw(this),
                result__.as_mut_ptr(),
            )
            .from_abi::<::windows::Foundation::Numerics::Vector2>(result__)
        }
    }
}
impl ::core::clone::Clone for CubicBezierEasingFunction {
    fn clone(&self) -> Self {
        Self(self.0.clone())
    }
}
impl ::core::cmp::PartialEq for CubicBezierEasingFunction {
    fn eq(&self, other: &Self) -> bool {
        self.0 == other.0
    }
}
impl ::core::cmp::Eq for CubicBezierEasingFunction {}
impl ::core::fmt::Debug for CubicBezierEasingFunction {
    fn fmt(&self, f: &mut ::core::fmt::Formatter<'_>) -> ::core::fmt::Result {
        f.debug_tuple("CubicBezierEasingFunction").field(&self.0).finish()
    }
}
unsafe impl ::windows::core::RuntimeType for CubicBezierEasingFunction {
    const SIGNATURE : ::windows::core::ConstBuffer = ::windows::core::ConstBuffer::from_slice ( b"rc(Microsoft.UI.Composition.CubicBezierEasingFunction;{35e7fcde-f9ce-590a-8b88-64a82a6b4b48})" ) ;
    type DefaultType = ::core::option::Option<Self>;
    fn from_default(from: &Self::DefaultType) -> ::windows::core::Result<Self> {
        from.as_ref().cloned().ok_or(::windows::core::Error::OK)
    }
}
unsafe impl ::windows::core::Vtable for CubicBezierEasingFunction {
    type Vtable = ICubicBezierEasingFunction_Vtbl;
}
unsafe impl ::windows::core::Interface for CubicBezierEasingFunction {
    const IID: ::windows::core::GUID =
        <ICubicBezierEasingFunction as ::windows::core::Interface>::IID;
}
impl ::windows::core::RuntimeName for CubicBezierEasingFunction {
    const NAME: &'static str = "Microsoft.UI.Composition.CubicBezierEasingFunction";
}
::windows::core::interface_hierarchy!(
    CubicBezierEasingFunction,
    ::windows::core::IUnknown,
    ::windows::core::IInspectable
);
impl ::core::convert::TryFrom<CubicBezierEasingFunction> for IAnimationObject {
    type Error = ::windows::core::Error;
    fn try_from(value: CubicBezierEasingFunction) -> ::windows::core::Result<Self> {
        ::core::convert::TryFrom::try_from(&value)
    }
}
impl ::core::convert::TryFrom<&CubicBezierEasingFunction> for IAnimationObject {
    type Error = ::windows::core::Error;
    fn try_from(value: &CubicBezierEasingFunction) -> ::windows::core::Result<Self> {
        ::windows::core::Interface::cast(value)
    }
}
impl<'a> ::core::convert::TryFrom<&CubicBezierEasingFunction>
    for ::windows::core::InParam<'a, IAnimationObject>
{
    type Error = ::windows::core::Error;
    fn try_from(value: &CubicBezierEasingFunction) -> ::windows::core::Result<Self> {
        let item = ::std::convert::TryInto::try_into(value)?;
        Ok(::windows::core::InParam::owned(item))
    }
}
impl ::core::convert::TryFrom<CubicBezierEasingFunction> for ::windows::Foundation::IClosable {
    type Error = ::windows::core::Error;
    fn try_from(value: CubicBezierEasingFunction) -> ::windows::core::Result<Self> {
        ::core::convert::TryFrom::try_from(&value)
    }
}
impl ::core::convert::TryFrom<&CubicBezierEasingFunction> for ::windows::Foundation::IClosable {
    type Error = ::windows::core::Error;
    fn try_from(value: &CubicBezierEasingFunction) -> ::windows::core::Result<Self> {
        ::windows::core::Interface::cast(value)
    }
}
impl<'a> ::core::convert::TryFrom<&CubicBezierEasingFunction>
    for ::windows::core::InParam<'a, ::windows::Foundation::IClosable>
{
    type Error = ::windows::core::Error;
    fn try_from(value: &CubicBezierEasingFunction) -> ::windows::core::Result<Self> {
        let item = ::std::convert::TryInto::try_into(value)?;
        Ok(::windows::core::InParam::owned(item))
    }
}
impl ::core::convert::From<CubicBezierEasingFunction> for CompositionEasingFunction {
    fn from(value: CubicBezierEasingFunction) -> Self {
        ::core::convert::From::from(&value)
    }
}
impl ::core::convert::From<&CubicBezierEasingFunction> for CompositionEasingFunction {
    fn from(value: &CubicBezierEasingFunction) -> Self {
        ::windows::core::Interface::cast(value).unwrap()
    }
}
impl<'a> ::core::convert::From<&CubicBezierEasingFunction>
    for ::windows::core::InParam<'a, CompositionEasingFunction>
{
    fn from(value: &CubicBezierEasingFunction) -> Self {
        ::windows::core::InParam::owned(value.into())
    }
}
impl ::core::convert::From<CubicBezierEasingFunction> for CompositionObject {
    fn from(value: CubicBezierEasingFunction) -> Self {
        ::core::convert::From::from(&value)
    }
}
impl ::core::convert::From<&CubicBezierEasingFunction> for CompositionObject {
    fn from(value: &CubicBezierEasingFunction) -> Self {
        ::windows::core::Interface::cast(value).unwrap()
    }
}
impl<'a> ::core::convert::From<&CubicBezierEasingFunction>
    for ::windows::core::InParam<'a, CompositionObject>
{
    fn from(value: &CubicBezierEasingFunction) -> Self {
        ::windows::core::InParam::owned(value.into())
    }
}
unsafe impl ::core::marker::Send for CubicBezierEasingFunction {}
unsafe impl ::core::marker::Sync for CubicBezierEasingFunction {}
#[doc = "*Required features: `\"UI_Composition\"`*"]
#[repr(transparent)]
pub struct DistantLight(::windows::core::IUnknown);
impl DistantLight {
    pub fn PopulatePropertyInfo(
        &self,
        propertyname: &::windows::core::HSTRING,
        propertyinfo: &AnimationPropertyInfo,
    ) -> ::windows::core::Result<()> {
        let this = &::windows::core::Interface::cast::<IAnimationObject>(self)?;
        unsafe {
            (::windows::core::Vtable::vtable(this).PopulatePropertyInfo)(
                ::windows::core::Vtable::as_raw(this),
                ::core::mem::transmute_copy(propertyname),
                ::core::mem::transmute_copy(propertyinfo),
            )
            .ok()
        }
    }
    pub fn Close(&self) -> ::windows::core::Result<()> {
        let this = &::windows::core::Interface::cast::<::windows::Foundation::IClosable>(self)?;
        unsafe {
            (::windows::core::Vtable::vtable(this).Close)(::windows::core::Vtable::as_raw(this))
                .ok()
        }
    }
    pub fn Targets(&self) -> ::windows::core::Result<VisualUnorderedCollection> {
        let this = &::windows::core::Interface::cast::<ICompositionLight>(self)?;
        unsafe {
            let mut result__ = ::core::mem::MaybeUninit::zeroed();
            (::windows::core::Vtable::vtable(this).Targets)(
                ::windows::core::Vtable::as_raw(this),
                result__.as_mut_ptr(),
            )
            .from_abi::<VisualUnorderedCollection>(result__)
        }
    }
    pub fn ExclusionsFromTargets(&self) -> ::windows::core::Result<VisualUnorderedCollection> {
        let this = &::windows::core::Interface::cast::<ICompositionLight2>(self)?;
        unsafe {
            let mut result__ = ::core::mem::MaybeUninit::zeroed();
            (::windows::core::Vtable::vtable(this).ExclusionsFromTargets)(
                ::windows::core::Vtable::as_raw(this),
                result__.as_mut_ptr(),
            )
            .from_abi::<VisualUnorderedCollection>(result__)
        }
    }
    pub fn IsEnabled(&self) -> ::windows::core::Result<bool> {
        let this = &::windows::core::Interface::cast::<ICompositionLight3>(self)?;
        unsafe {
            let mut result__ = ::core::mem::MaybeUninit::zeroed();
            (::windows::core::Vtable::vtable(this).IsEnabled)(
                ::windows::core::Vtable::as_raw(this),
                result__.as_mut_ptr(),
            )
            .from_abi::<bool>(result__)
        }
    }
    pub fn SetIsEnabled(&self, value: bool) -> ::windows::core::Result<()> {
        let this = &::windows::core::Interface::cast::<ICompositionLight3>(self)?;
        unsafe {
            (::windows::core::Vtable::vtable(this).SetIsEnabled)(
                ::windows::core::Vtable::as_raw(this),
                value,
            )
            .ok()
        }
    }
    pub fn Compositor(&self) -> ::windows::core::Result<Compositor> {
        let this = &::windows::core::Interface::cast::<ICompositionObject>(self)?;
        unsafe {
            let mut result__ = ::core::mem::MaybeUninit::zeroed();
            (::windows::core::Vtable::vtable(this).Compositor)(
                ::windows::core::Vtable::as_raw(this),
                result__.as_mut_ptr(),
            )
            .from_abi::<Compositor>(result__)
        }
    }
    pub fn Properties(&self) -> ::windows::core::Result<CompositionPropertySet> {
        let this = &::windows::core::Interface::cast::<ICompositionObject>(self)?;
        unsafe {
            let mut result__ = ::core::mem::MaybeUninit::zeroed();
            (::windows::core::Vtable::vtable(this).Properties)(
                ::windows::core::Vtable::as_raw(this),
                result__.as_mut_ptr(),
            )
            .from_abi::<CompositionPropertySet>(result__)
        }
    }
    pub fn StartAnimation<'a, P0>(
        &self,
        propertyname: &::windows::core::HSTRING,
        animation: P0,
    ) -> ::windows::core::Result<()>
    where
        P0: ::std::convert::Into<::windows::core::InParam<'a, CompositionAnimation>>,
    {
        let this = &::windows::core::Interface::cast::<ICompositionObject>(self)?;
        unsafe {
            (::windows::core::Vtable::vtable(this).StartAnimation)(
                ::windows::core::Vtable::as_raw(this),
                ::core::mem::transmute_copy(propertyname),
                animation.into().abi(),
            )
            .ok()
        }
    }
    pub fn StopAnimation(
        &self,
        propertyname: &::windows::core::HSTRING,
    ) -> ::windows::core::Result<()> {
        let this = &::windows::core::Interface::cast::<ICompositionObject>(self)?;
        unsafe {
            (::windows::core::Vtable::vtable(this).StopAnimation)(
                ::windows::core::Vtable::as_raw(this),
                ::core::mem::transmute_copy(propertyname),
            )
            .ok()
        }
    }
    pub fn Comment(&self) -> ::windows::core::Result<::windows::core::HSTRING> {
        let this = &::windows::core::Interface::cast::<ICompositionObject2>(self)?;
        unsafe {
            let mut result__ = ::core::mem::MaybeUninit::zeroed();
            (::windows::core::Vtable::vtable(this).Comment)(
                ::windows::core::Vtable::as_raw(this),
                result__.as_mut_ptr(),
            )
            .from_abi::<::windows::core::HSTRING>(result__)
        }
    }
    pub fn SetComment(&self, value: &::windows::core::HSTRING) -> ::windows::core::Result<()> {
        let this = &::windows::core::Interface::cast::<ICompositionObject2>(self)?;
        unsafe {
            (::windows::core::Vtable::vtable(this).SetComment)(
                ::windows::core::Vtable::as_raw(this),
                ::core::mem::transmute_copy(value),
            )
            .ok()
        }
    }
    pub fn ImplicitAnimations(&self) -> ::windows::core::Result<ImplicitAnimationCollection> {
        let this = &::windows::core::Interface::cast::<ICompositionObject2>(self)?;
        unsafe {
            let mut result__ = ::core::mem::MaybeUninit::zeroed();
            (::windows::core::Vtable::vtable(this).ImplicitAnimations)(
                ::windows::core::Vtable::as_raw(this),
                result__.as_mut_ptr(),
            )
            .from_abi::<ImplicitAnimationCollection>(result__)
        }
    }
    pub fn SetImplicitAnimations(
        &self,
        value: &ImplicitAnimationCollection,
    ) -> ::windows::core::Result<()> {
        let this = &::windows::core::Interface::cast::<ICompositionObject2>(self)?;
        unsafe {
            (::windows::core::Vtable::vtable(this).SetImplicitAnimations)(
                ::windows::core::Vtable::as_raw(this),
                ::core::mem::transmute_copy(value),
            )
            .ok()
        }
    }
    pub fn StartAnimationGroup<'a, P0, E0>(&self, value: P0) -> ::windows::core::Result<()>
    where
        P0: ::std::convert::TryInto<
            ::windows::core::InParam<'a, ICompositionAnimationBase>,
            Error = E0,
        >,
        E0: ::std::convert::Into<::windows::core::Error>,
    {
        let this = &::windows::core::Interface::cast::<ICompositionObject2>(self)?;
        unsafe {
            (::windows::core::Vtable::vtable(this).StartAnimationGroup)(
                ::windows::core::Vtable::as_raw(this),
                value.try_into().map_err(|e| e.into())?.abi(),
            )
            .ok()
        }
    }
    pub fn StopAnimationGroup<'a, P0, E0>(&self, value: P0) -> ::windows::core::Result<()>
    where
        P0: ::std::convert::TryInto<
            ::windows::core::InParam<'a, ICompositionAnimationBase>,
            Error = E0,
        >,
        E0: ::std::convert::Into<::windows::core::Error>,
    {
        let this = &::windows::core::Interface::cast::<ICompositionObject2>(self)?;
        unsafe {
            (::windows::core::Vtable::vtable(this).StopAnimationGroup)(
                ::windows::core::Vtable::as_raw(this),
                value.try_into().map_err(|e| e.into())?.abi(),
            )
            .ok()
        }
    }
    #[doc = "*Required features: `\"UI_Dispatching\"`*"]
    #[cfg(feature = "UI_Dispatching")]
    pub fn DispatcherQueue(&self) -> ::windows::core::Result<super::Dispatching::DispatcherQueue> {
        let this = &::windows::core::Interface::cast::<ICompositionObject3>(self)?;
        unsafe {
            let mut result__ = ::core::mem::MaybeUninit::zeroed();
            (::windows::core::Vtable::vtable(this).DispatcherQueue)(
                ::windows::core::Vtable::as_raw(this),
                result__.as_mut_ptr(),
            )
            .from_abi::<super::Dispatching::DispatcherQueue>(result__)
        }
    }
    pub fn TryGetAnimationController(
        &self,
        propertyname: &::windows::core::HSTRING,
    ) -> ::windows::core::Result<AnimationController> {
        let this = &::windows::core::Interface::cast::<ICompositionObject4>(self)?;
        unsafe {
            let mut result__ = ::core::mem::MaybeUninit::zeroed();
            (::windows::core::Vtable::vtable(this).TryGetAnimationController)(
                ::windows::core::Vtable::as_raw(this),
                ::core::mem::transmute_copy(propertyname),
                result__.as_mut_ptr(),
            )
            .from_abi::<AnimationController>(result__)
        }
    }
    pub fn StartAnimationWithController<'a, P0>(
        &self,
        propertyname: &::windows::core::HSTRING,
        animation: P0,
        animationcontroller: &AnimationController,
    ) -> ::windows::core::Result<()>
    where
        P0: ::std::convert::Into<::windows::core::InParam<'a, CompositionAnimation>>,
    {
        let this = &::windows::core::Interface::cast::<ICompositionObject5>(self)?;
        unsafe {
            (::windows::core::Vtable::vtable(this).StartAnimationWithController)(
                ::windows::core::Vtable::as_raw(this),
                ::core::mem::transmute_copy(propertyname),
                animation.into().abi(),
                ::core::mem::transmute_copy(animationcontroller),
            )
            .ok()
        }
    }
    pub fn Color(&self) -> ::windows::core::Result<::windows::UI::Color> {
        let this = self;
        unsafe {
            let mut result__ = ::core::mem::MaybeUninit::zeroed();
            (::windows::core::Vtable::vtable(this).Color)(
                ::windows::core::Vtable::as_raw(this),
                result__.as_mut_ptr(),
            )
            .from_abi::<::windows::UI::Color>(result__)
        }
    }
    pub fn SetColor(&self, value: ::windows::UI::Color) -> ::windows::core::Result<()> {
        let this = self;
        unsafe {
            (::windows::core::Vtable::vtable(this).SetColor)(
                ::windows::core::Vtable::as_raw(this),
                value,
            )
            .ok()
        }
    }
    pub fn CoordinateSpace(&self) -> ::windows::core::Result<Visual> {
        let this = self;
        unsafe {
            let mut result__ = ::core::mem::MaybeUninit::zeroed();
            (::windows::core::Vtable::vtable(this).CoordinateSpace)(
                ::windows::core::Vtable::as_raw(this),
                result__.as_mut_ptr(),
            )
            .from_abi::<Visual>(result__)
        }
    }
    pub fn SetCoordinateSpace<'a, P0>(&self, value: P0) -> ::windows::core::Result<()>
    where
        P0: ::std::convert::Into<::windows::core::InParam<'a, Visual>>,
    {
        let this = self;
        unsafe {
            (::windows::core::Vtable::vtable(this).SetCoordinateSpace)(
                ::windows::core::Vtable::as_raw(this),
                value.into().abi(),
            )
            .ok()
        }
    }
    pub fn Direction(&self) -> ::windows::core::Result<::windows::Foundation::Numerics::Vector3> {
        let this = self;
        unsafe {
            let mut result__ = ::core::mem::MaybeUninit::zeroed();
            (::windows::core::Vtable::vtable(this).Direction)(
                ::windows::core::Vtable::as_raw(this),
                result__.as_mut_ptr(),
            )
            .from_abi::<::windows::Foundation::Numerics::Vector3>(result__)
        }
    }
    pub fn SetDirection(
        &self,
        value: ::windows::Foundation::Numerics::Vector3,
    ) -> ::windows::core::Result<()> {
        let this = self;
        unsafe {
            (::windows::core::Vtable::vtable(this).SetDirection)(
                ::windows::core::Vtable::as_raw(this),
                value,
            )
            .ok()
        }
    }
    pub fn Intensity(&self) -> ::windows::core::Result<f32> {
        let this = &::windows::core::Interface::cast::<IDistantLight2>(self)?;
        unsafe {
            let mut result__ = ::core::mem::MaybeUninit::zeroed();
            (::windows::core::Vtable::vtable(this).Intensity)(
                ::windows::core::Vtable::as_raw(this),
                result__.as_mut_ptr(),
            )
            .from_abi::<f32>(result__)
        }
    }
    pub fn SetIntensity(&self, value: f32) -> ::windows::core::Result<()> {
        let this = &::windows::core::Interface::cast::<IDistantLight2>(self)?;
        unsafe {
            (::windows::core::Vtable::vtable(this).SetIntensity)(
                ::windows::core::Vtable::as_raw(this),
                value,
            )
            .ok()
        }
    }
}
impl ::core::clone::Clone for DistantLight {
    fn clone(&self) -> Self {
        Self(self.0.clone())
    }
}
impl ::core::cmp::PartialEq for DistantLight {
    fn eq(&self, other: &Self) -> bool {
        self.0 == other.0
    }
}
impl ::core::cmp::Eq for DistantLight {}
impl ::core::fmt::Debug for DistantLight {
    fn fmt(&self, f: &mut ::core::fmt::Formatter<'_>) -> ::core::fmt::Result {
        f.debug_tuple("DistantLight").field(&self.0).finish()
    }
}
unsafe impl ::windows::core::RuntimeType for DistantLight {
    const SIGNATURE: ::windows::core::ConstBuffer = ::windows::core::ConstBuffer::from_slice(
        b"rc(Microsoft.UI.Composition.DistantLight;{125ef556-56ee-5c60-b944-571928ca03f5})",
    );
    type DefaultType = ::core::option::Option<Self>;
    fn from_default(from: &Self::DefaultType) -> ::windows::core::Result<Self> {
        from.as_ref().cloned().ok_or(::windows::core::Error::OK)
    }
}
unsafe impl ::windows::core::Vtable for DistantLight {
    type Vtable = IDistantLight_Vtbl;
}
unsafe impl ::windows::core::Interface for DistantLight {
    const IID: ::windows::core::GUID = <IDistantLight as ::windows::core::Interface>::IID;
}
impl ::windows::core::RuntimeName for DistantLight {
    const NAME: &'static str = "Microsoft.UI.Composition.DistantLight";
}
::windows::core::interface_hierarchy!(
    DistantLight,
    ::windows::core::IUnknown,
    ::windows::core::IInspectable
);
impl ::core::convert::TryFrom<DistantLight> for IAnimationObject {
    type Error = ::windows::core::Error;
    fn try_from(value: DistantLight) -> ::windows::core::Result<Self> {
        ::core::convert::TryFrom::try_from(&value)
    }
}
impl ::core::convert::TryFrom<&DistantLight> for IAnimationObject {
    type Error = ::windows::core::Error;
    fn try_from(value: &DistantLight) -> ::windows::core::Result<Self> {
        ::windows::core::Interface::cast(value)
    }
}
impl<'a> ::core::convert::TryFrom<&DistantLight>
    for ::windows::core::InParam<'a, IAnimationObject>
{
    type Error = ::windows::core::Error;
    fn try_from(value: &DistantLight) -> ::windows::core::Result<Self> {
        let item = ::std::convert::TryInto::try_into(value)?;
        Ok(::windows::core::InParam::owned(item))
    }
}
impl ::core::convert::TryFrom<DistantLight> for ::windows::Foundation::IClosable {
    type Error = ::windows::core::Error;
    fn try_from(value: DistantLight) -> ::windows::core::Result<Self> {
        ::core::convert::TryFrom::try_from(&value)
    }
}
impl ::core::convert::TryFrom<&DistantLight> for ::windows::Foundation::IClosable {
    type Error = ::windows::core::Error;
    fn try_from(value: &DistantLight) -> ::windows::core::Result<Self> {
        ::windows::core::Interface::cast(value)
    }
}
impl<'a> ::core::convert::TryFrom<&DistantLight>
    for ::windows::core::InParam<'a, ::windows::Foundation::IClosable>
{
    type Error = ::windows::core::Error;
    fn try_from(value: &DistantLight) -> ::windows::core::Result<Self> {
        let item = ::std::convert::TryInto::try_into(value)?;
        Ok(::windows::core::InParam::owned(item))
    }
}
impl ::core::convert::From<DistantLight> for CompositionLight {
    fn from(value: DistantLight) -> Self {
        ::core::convert::From::from(&value)
    }
}
impl ::core::convert::From<&DistantLight> for CompositionLight {
    fn from(value: &DistantLight) -> Self {
        ::windows::core::Interface::cast(value).unwrap()
    }
}
impl<'a> ::core::convert::From<&DistantLight> for ::windows::core::InParam<'a, CompositionLight> {
    fn from(value: &DistantLight) -> Self {
        ::windows::core::InParam::owned(value.into())
    }
}
impl ::core::convert::From<DistantLight> for CompositionObject {
    fn from(value: DistantLight) -> Self {
        ::core::convert::From::from(&value)
    }
}
impl ::core::convert::From<&DistantLight> for CompositionObject {
    fn from(value: &DistantLight) -> Self {
        ::windows::core::Interface::cast(value).unwrap()
    }
}
impl<'a> ::core::convert::From<&DistantLight> for ::windows::core::InParam<'a, CompositionObject> {
    fn from(value: &DistantLight) -> Self {
        ::windows::core::InParam::owned(value.into())
    }
}
unsafe impl ::core::marker::Send for DistantLight {}
unsafe impl ::core::marker::Sync for DistantLight {}
#[doc = "*Required features: `\"UI_Composition\"`*"]
#[repr(transparent)]
pub struct DropShadow(::windows::core::IUnknown);
impl DropShadow {
    pub fn PopulatePropertyInfo(
        &self,
        propertyname: &::windows::core::HSTRING,
        propertyinfo: &AnimationPropertyInfo,
    ) -> ::windows::core::Result<()> {
        let this = &::windows::core::Interface::cast::<IAnimationObject>(self)?;
        unsafe {
            (::windows::core::Vtable::vtable(this).PopulatePropertyInfo)(
                ::windows::core::Vtable::as_raw(this),
                ::core::mem::transmute_copy(propertyname),
                ::core::mem::transmute_copy(propertyinfo),
            )
            .ok()
        }
    }
    pub fn Close(&self) -> ::windows::core::Result<()> {
        let this = &::windows::core::Interface::cast::<::windows::Foundation::IClosable>(self)?;
        unsafe {
            (::windows::core::Vtable::vtable(this).Close)(::windows::core::Vtable::as_raw(this))
                .ok()
        }
    }
    pub fn Compositor(&self) -> ::windows::core::Result<Compositor> {
        let this = &::windows::core::Interface::cast::<ICompositionObject>(self)?;
        unsafe {
            let mut result__ = ::core::mem::MaybeUninit::zeroed();
            (::windows::core::Vtable::vtable(this).Compositor)(
                ::windows::core::Vtable::as_raw(this),
                result__.as_mut_ptr(),
            )
            .from_abi::<Compositor>(result__)
        }
    }
    pub fn Properties(&self) -> ::windows::core::Result<CompositionPropertySet> {
        let this = &::windows::core::Interface::cast::<ICompositionObject>(self)?;
        unsafe {
            let mut result__ = ::core::mem::MaybeUninit::zeroed();
            (::windows::core::Vtable::vtable(this).Properties)(
                ::windows::core::Vtable::as_raw(this),
                result__.as_mut_ptr(),
            )
            .from_abi::<CompositionPropertySet>(result__)
        }
    }
    pub fn StartAnimation<'a, P0>(
        &self,
        propertyname: &::windows::core::HSTRING,
        animation: P0,
    ) -> ::windows::core::Result<()>
    where
        P0: ::std::convert::Into<::windows::core::InParam<'a, CompositionAnimation>>,
    {
        let this = &::windows::core::Interface::cast::<ICompositionObject>(self)?;
        unsafe {
            (::windows::core::Vtable::vtable(this).StartAnimation)(
                ::windows::core::Vtable::as_raw(this),
                ::core::mem::transmute_copy(propertyname),
                animation.into().abi(),
            )
            .ok()
        }
    }
    pub fn StopAnimation(
        &self,
        propertyname: &::windows::core::HSTRING,
    ) -> ::windows::core::Result<()> {
        let this = &::windows::core::Interface::cast::<ICompositionObject>(self)?;
        unsafe {
            (::windows::core::Vtable::vtable(this).StopAnimation)(
                ::windows::core::Vtable::as_raw(this),
                ::core::mem::transmute_copy(propertyname),
            )
            .ok()
        }
    }
    pub fn Comment(&self) -> ::windows::core::Result<::windows::core::HSTRING> {
        let this = &::windows::core::Interface::cast::<ICompositionObject2>(self)?;
        unsafe {
            let mut result__ = ::core::mem::MaybeUninit::zeroed();
            (::windows::core::Vtable::vtable(this).Comment)(
                ::windows::core::Vtable::as_raw(this),
                result__.as_mut_ptr(),
            )
            .from_abi::<::windows::core::HSTRING>(result__)
        }
    }
    pub fn SetComment(&self, value: &::windows::core::HSTRING) -> ::windows::core::Result<()> {
        let this = &::windows::core::Interface::cast::<ICompositionObject2>(self)?;
        unsafe {
            (::windows::core::Vtable::vtable(this).SetComment)(
                ::windows::core::Vtable::as_raw(this),
                ::core::mem::transmute_copy(value),
            )
            .ok()
        }
    }
    pub fn ImplicitAnimations(&self) -> ::windows::core::Result<ImplicitAnimationCollection> {
        let this = &::windows::core::Interface::cast::<ICompositionObject2>(self)?;
        unsafe {
            let mut result__ = ::core::mem::MaybeUninit::zeroed();
            (::windows::core::Vtable::vtable(this).ImplicitAnimations)(
                ::windows::core::Vtable::as_raw(this),
                result__.as_mut_ptr(),
            )
            .from_abi::<ImplicitAnimationCollection>(result__)
        }
    }
    pub fn SetImplicitAnimations(
        &self,
        value: &ImplicitAnimationCollection,
    ) -> ::windows::core::Result<()> {
        let this = &::windows::core::Interface::cast::<ICompositionObject2>(self)?;
        unsafe {
            (::windows::core::Vtable::vtable(this).SetImplicitAnimations)(
                ::windows::core::Vtable::as_raw(this),
                ::core::mem::transmute_copy(value),
            )
            .ok()
        }
    }
    pub fn StartAnimationGroup<'a, P0, E0>(&self, value: P0) -> ::windows::core::Result<()>
    where
        P0: ::std::convert::TryInto<
            ::windows::core::InParam<'a, ICompositionAnimationBase>,
            Error = E0,
        >,
        E0: ::std::convert::Into<::windows::core::Error>,
    {
        let this = &::windows::core::Interface::cast::<ICompositionObject2>(self)?;
        unsafe {
            (::windows::core::Vtable::vtable(this).StartAnimationGroup)(
                ::windows::core::Vtable::as_raw(this),
                value.try_into().map_err(|e| e.into())?.abi(),
            )
            .ok()
        }
    }
    pub fn StopAnimationGroup<'a, P0, E0>(&self, value: P0) -> ::windows::core::Result<()>
    where
        P0: ::std::convert::TryInto<
            ::windows::core::InParam<'a, ICompositionAnimationBase>,
            Error = E0,
        >,
        E0: ::std::convert::Into<::windows::core::Error>,
    {
        let this = &::windows::core::Interface::cast::<ICompositionObject2>(self)?;
        unsafe {
            (::windows::core::Vtable::vtable(this).StopAnimationGroup)(
                ::windows::core::Vtable::as_raw(this),
                value.try_into().map_err(|e| e.into())?.abi(),
            )
            .ok()
        }
    }
    #[doc = "*Required features: `\"UI_Dispatching\"`*"]
    #[cfg(feature = "UI_Dispatching")]
    pub fn DispatcherQueue(&self) -> ::windows::core::Result<super::Dispatching::DispatcherQueue> {
        let this = &::windows::core::Interface::cast::<ICompositionObject3>(self)?;
        unsafe {
            let mut result__ = ::core::mem::MaybeUninit::zeroed();
            (::windows::core::Vtable::vtable(this).DispatcherQueue)(
                ::windows::core::Vtable::as_raw(this),
                result__.as_mut_ptr(),
            )
            .from_abi::<super::Dispatching::DispatcherQueue>(result__)
        }
    }
    pub fn TryGetAnimationController(
        &self,
        propertyname: &::windows::core::HSTRING,
    ) -> ::windows::core::Result<AnimationController> {
        let this = &::windows::core::Interface::cast::<ICompositionObject4>(self)?;
        unsafe {
            let mut result__ = ::core::mem::MaybeUninit::zeroed();
            (::windows::core::Vtable::vtable(this).TryGetAnimationController)(
                ::windows::core::Vtable::as_raw(this),
                ::core::mem::transmute_copy(propertyname),
                result__.as_mut_ptr(),
            )
            .from_abi::<AnimationController>(result__)
        }
    }
    pub fn StartAnimationWithController<'a, P0>(
        &self,
        propertyname: &::windows::core::HSTRING,
        animation: P0,
        animationcontroller: &AnimationController,
    ) -> ::windows::core::Result<()>
    where
        P0: ::std::convert::Into<::windows::core::InParam<'a, CompositionAnimation>>,
    {
        let this = &::windows::core::Interface::cast::<ICompositionObject5>(self)?;
        unsafe {
            (::windows::core::Vtable::vtable(this).StartAnimationWithController)(
                ::windows::core::Vtable::as_raw(this),
                ::core::mem::transmute_copy(propertyname),
                animation.into().abi(),
                ::core::mem::transmute_copy(animationcontroller),
            )
            .ok()
        }
    }
    pub fn BlurRadius(&self) -> ::windows::core::Result<f32> {
        let this = self;
        unsafe {
            let mut result__ = ::core::mem::MaybeUninit::zeroed();
            (::windows::core::Vtable::vtable(this).BlurRadius)(
                ::windows::core::Vtable::as_raw(this),
                result__.as_mut_ptr(),
            )
            .from_abi::<f32>(result__)
        }
    }
    pub fn SetBlurRadius(&self, value: f32) -> ::windows::core::Result<()> {
        let this = self;
        unsafe {
            (::windows::core::Vtable::vtable(this).SetBlurRadius)(
                ::windows::core::Vtable::as_raw(this),
                value,
            )
            .ok()
        }
    }
    pub fn Color(&self) -> ::windows::core::Result<::windows::UI::Color> {
        let this = self;
        unsafe {
            let mut result__ = ::core::mem::MaybeUninit::zeroed();
            (::windows::core::Vtable::vtable(this).Color)(
                ::windows::core::Vtable::as_raw(this),
                result__.as_mut_ptr(),
            )
            .from_abi::<::windows::UI::Color>(result__)
        }
    }
    pub fn SetColor(&self, value: ::windows::UI::Color) -> ::windows::core::Result<()> {
        let this = self;
        unsafe {
            (::windows::core::Vtable::vtable(this).SetColor)(
                ::windows::core::Vtable::as_raw(this),
                value,
            )
            .ok()
        }
    }
    pub fn Mask(&self) -> ::windows::core::Result<CompositionBrush> {
        let this = self;
        unsafe {
            let mut result__ = ::core::mem::MaybeUninit::zeroed();
            (::windows::core::Vtable::vtable(this).Mask)(
                ::windows::core::Vtable::as_raw(this),
                result__.as_mut_ptr(),
            )
            .from_abi::<CompositionBrush>(result__)
        }
    }
    pub fn SetMask<'a, P0>(&self, value: P0) -> ::windows::core::Result<()>
    where
        P0: ::std::convert::Into<::windows::core::InParam<'a, CompositionBrush>>,
    {
        let this = self;
        unsafe {
            (::windows::core::Vtable::vtable(this).SetMask)(
                ::windows::core::Vtable::as_raw(this),
                value.into().abi(),
            )
            .ok()
        }
    }
    pub fn Offset(&self) -> ::windows::core::Result<::windows::Foundation::Numerics::Vector3> {
        let this = self;
        unsafe {
            let mut result__ = ::core::mem::MaybeUninit::zeroed();
            (::windows::core::Vtable::vtable(this).Offset)(
                ::windows::core::Vtable::as_raw(this),
                result__.as_mut_ptr(),
            )
            .from_abi::<::windows::Foundation::Numerics::Vector3>(result__)
        }
    }
    pub fn SetOffset(
        &self,
        value: ::windows::Foundation::Numerics::Vector3,
    ) -> ::windows::core::Result<()> {
        let this = self;
        unsafe {
            (::windows::core::Vtable::vtable(this).SetOffset)(
                ::windows::core::Vtable::as_raw(this),
                value,
            )
            .ok()
        }
    }
    pub fn Opacity(&self) -> ::windows::core::Result<f32> {
        let this = self;
        unsafe {
            let mut result__ = ::core::mem::MaybeUninit::zeroed();
            (::windows::core::Vtable::vtable(this).Opacity)(
                ::windows::core::Vtable::as_raw(this),
                result__.as_mut_ptr(),
            )
            .from_abi::<f32>(result__)
        }
    }
    pub fn SetOpacity(&self, value: f32) -> ::windows::core::Result<()> {
        let this = self;
        unsafe {
            (::windows::core::Vtable::vtable(this).SetOpacity)(
                ::windows::core::Vtable::as_raw(this),
                value,
            )
            .ok()
        }
    }
    pub fn SourcePolicy(&self) -> ::windows::core::Result<CompositionDropShadowSourcePolicy> {
        let this = &::windows::core::Interface::cast::<IDropShadow2>(self)?;
        unsafe {
            let mut result__ = ::core::mem::MaybeUninit::zeroed();
            (::windows::core::Vtable::vtable(this).SourcePolicy)(
                ::windows::core::Vtable::as_raw(this),
                result__.as_mut_ptr(),
            )
            .from_abi::<CompositionDropShadowSourcePolicy>(result__)
        }
    }
    pub fn SetSourcePolicy(
        &self,
        value: CompositionDropShadowSourcePolicy,
    ) -> ::windows::core::Result<()> {
        let this = &::windows::core::Interface::cast::<IDropShadow2>(self)?;
        unsafe {
            (::windows::core::Vtable::vtable(this).SetSourcePolicy)(
                ::windows::core::Vtable::as_raw(this),
                value,
            )
            .ok()
        }
    }
}
impl ::core::clone::Clone for DropShadow {
    fn clone(&self) -> Self {
        Self(self.0.clone())
    }
}
impl ::core::cmp::PartialEq for DropShadow {
    fn eq(&self, other: &Self) -> bool {
        self.0 == other.0
    }
}
impl ::core::cmp::Eq for DropShadow {}
impl ::core::fmt::Debug for DropShadow {
    fn fmt(&self, f: &mut ::core::fmt::Formatter<'_>) -> ::core::fmt::Result {
        f.debug_tuple("DropShadow").field(&self.0).finish()
    }
}
unsafe impl ::windows::core::RuntimeType for DropShadow {
    const SIGNATURE: ::windows::core::ConstBuffer = ::windows::core::ConstBuffer::from_slice(
        b"rc(Microsoft.UI.Composition.DropShadow;{977095d2-265f-5f58-9789-cb7f85e98c9e})",
    );
    type DefaultType = ::core::option::Option<Self>;
    fn from_default(from: &Self::DefaultType) -> ::windows::core::Result<Self> {
        from.as_ref().cloned().ok_or(::windows::core::Error::OK)
    }
}
unsafe impl ::windows::core::Vtable for DropShadow {
    type Vtable = IDropShadow_Vtbl;
}
unsafe impl ::windows::core::Interface for DropShadow {
    const IID: ::windows::core::GUID = <IDropShadow as ::windows::core::Interface>::IID;
}
impl ::windows::core::RuntimeName for DropShadow {
    const NAME: &'static str = "Microsoft.UI.Composition.DropShadow";
}
::windows::core::interface_hierarchy!(
    DropShadow,
    ::windows::core::IUnknown,
    ::windows::core::IInspectable
);
impl ::core::convert::TryFrom<DropShadow> for IAnimationObject {
    type Error = ::windows::core::Error;
    fn try_from(value: DropShadow) -> ::windows::core::Result<Self> {
        ::core::convert::TryFrom::try_from(&value)
    }
}
impl ::core::convert::TryFrom<&DropShadow> for IAnimationObject {
    type Error = ::windows::core::Error;
    fn try_from(value: &DropShadow) -> ::windows::core::Result<Self> {
        ::windows::core::Interface::cast(value)
    }
}
impl<'a> ::core::convert::TryFrom<&DropShadow> for ::windows::core::InParam<'a, IAnimationObject> {
    type Error = ::windows::core::Error;
    fn try_from(value: &DropShadow) -> ::windows::core::Result<Self> {
        let item = ::std::convert::TryInto::try_into(value)?;
        Ok(::windows::core::InParam::owned(item))
    }
}
impl ::core::convert::TryFrom<DropShadow> for ::windows::Foundation::IClosable {
    type Error = ::windows::core::Error;
    fn try_from(value: DropShadow) -> ::windows::core::Result<Self> {
        ::core::convert::TryFrom::try_from(&value)
    }
}
impl ::core::convert::TryFrom<&DropShadow> for ::windows::Foundation::IClosable {
    type Error = ::windows::core::Error;
    fn try_from(value: &DropShadow) -> ::windows::core::Result<Self> {
        ::windows::core::Interface::cast(value)
    }
}
impl<'a> ::core::convert::TryFrom<&DropShadow>
    for ::windows::core::InParam<'a, ::windows::Foundation::IClosable>
{
    type Error = ::windows::core::Error;
    fn try_from(value: &DropShadow) -> ::windows::core::Result<Self> {
        let item = ::std::convert::TryInto::try_into(value)?;
        Ok(::windows::core::InParam::owned(item))
    }
}
impl ::core::convert::From<DropShadow> for CompositionShadow {
    fn from(value: DropShadow) -> Self {
        ::core::convert::From::from(&value)
    }
}
impl ::core::convert::From<&DropShadow> for CompositionShadow {
    fn from(value: &DropShadow) -> Self {
        ::windows::core::Interface::cast(value).unwrap()
    }
}
impl<'a> ::core::convert::From<&DropShadow> for ::windows::core::InParam<'a, CompositionShadow> {
    fn from(value: &DropShadow) -> Self {
        ::windows::core::InParam::owned(value.into())
    }
}
impl ::core::convert::From<DropShadow> for CompositionObject {
    fn from(value: DropShadow) -> Self {
        ::core::convert::From::from(&value)
    }
}
impl ::core::convert::From<&DropShadow> for CompositionObject {
    fn from(value: &DropShadow) -> Self {
        ::windows::core::Interface::cast(value).unwrap()
    }
}
impl<'a> ::core::convert::From<&DropShadow> for ::windows::core::InParam<'a, CompositionObject> {
    fn from(value: &DropShadow) -> Self {
        ::windows::core::InParam::owned(value.into())
    }
}
unsafe impl ::core::marker::Send for DropShadow {}
unsafe impl ::core::marker::Sync for DropShadow {}
#[doc = "*Required features: `\"UI_Composition\"`*"]
#[repr(transparent)]
pub struct ElasticEasingFunction(::windows::core::IUnknown);
impl ElasticEasingFunction {
    pub fn PopulatePropertyInfo(
        &self,
        propertyname: &::windows::core::HSTRING,
        propertyinfo: &AnimationPropertyInfo,
    ) -> ::windows::core::Result<()> {
        let this = &::windows::core::Interface::cast::<IAnimationObject>(self)?;
        unsafe {
            (::windows::core::Vtable::vtable(this).PopulatePropertyInfo)(
                ::windows::core::Vtable::as_raw(this),
                ::core::mem::transmute_copy(propertyname),
                ::core::mem::transmute_copy(propertyinfo),
            )
            .ok()
        }
    }
    pub fn Close(&self) -> ::windows::core::Result<()> {
        let this = &::windows::core::Interface::cast::<::windows::Foundation::IClosable>(self)?;
        unsafe {
            (::windows::core::Vtable::vtable(this).Close)(::windows::core::Vtable::as_raw(this))
                .ok()
        }
    }
    pub fn Compositor(&self) -> ::windows::core::Result<Compositor> {
        let this = &::windows::core::Interface::cast::<ICompositionObject>(self)?;
        unsafe {
            let mut result__ = ::core::mem::MaybeUninit::zeroed();
            (::windows::core::Vtable::vtable(this).Compositor)(
                ::windows::core::Vtable::as_raw(this),
                result__.as_mut_ptr(),
            )
            .from_abi::<Compositor>(result__)
        }
    }
    pub fn Properties(&self) -> ::windows::core::Result<CompositionPropertySet> {
        let this = &::windows::core::Interface::cast::<ICompositionObject>(self)?;
        unsafe {
            let mut result__ = ::core::mem::MaybeUninit::zeroed();
            (::windows::core::Vtable::vtable(this).Properties)(
                ::windows::core::Vtable::as_raw(this),
                result__.as_mut_ptr(),
            )
            .from_abi::<CompositionPropertySet>(result__)
        }
    }
    pub fn StartAnimation<'a, P0>(
        &self,
        propertyname: &::windows::core::HSTRING,
        animation: P0,
    ) -> ::windows::core::Result<()>
    where
        P0: ::std::convert::Into<::windows::core::InParam<'a, CompositionAnimation>>,
    {
        let this = &::windows::core::Interface::cast::<ICompositionObject>(self)?;
        unsafe {
            (::windows::core::Vtable::vtable(this).StartAnimation)(
                ::windows::core::Vtable::as_raw(this),
                ::core::mem::transmute_copy(propertyname),
                animation.into().abi(),
            )
            .ok()
        }
    }
    pub fn StopAnimation(
        &self,
        propertyname: &::windows::core::HSTRING,
    ) -> ::windows::core::Result<()> {
        let this = &::windows::core::Interface::cast::<ICompositionObject>(self)?;
        unsafe {
            (::windows::core::Vtable::vtable(this).StopAnimation)(
                ::windows::core::Vtable::as_raw(this),
                ::core::mem::transmute_copy(propertyname),
            )
            .ok()
        }
    }
    pub fn Comment(&self) -> ::windows::core::Result<::windows::core::HSTRING> {
        let this = &::windows::core::Interface::cast::<ICompositionObject2>(self)?;
        unsafe {
            let mut result__ = ::core::mem::MaybeUninit::zeroed();
            (::windows::core::Vtable::vtable(this).Comment)(
                ::windows::core::Vtable::as_raw(this),
                result__.as_mut_ptr(),
            )
            .from_abi::<::windows::core::HSTRING>(result__)
        }
    }
    pub fn SetComment(&self, value: &::windows::core::HSTRING) -> ::windows::core::Result<()> {
        let this = &::windows::core::Interface::cast::<ICompositionObject2>(self)?;
        unsafe {
            (::windows::core::Vtable::vtable(this).SetComment)(
                ::windows::core::Vtable::as_raw(this),
                ::core::mem::transmute_copy(value),
            )
            .ok()
        }
    }
    pub fn ImplicitAnimations(&self) -> ::windows::core::Result<ImplicitAnimationCollection> {
        let this = &::windows::core::Interface::cast::<ICompositionObject2>(self)?;
        unsafe {
            let mut result__ = ::core::mem::MaybeUninit::zeroed();
            (::windows::core::Vtable::vtable(this).ImplicitAnimations)(
                ::windows::core::Vtable::as_raw(this),
                result__.as_mut_ptr(),
            )
            .from_abi::<ImplicitAnimationCollection>(result__)
        }
    }
    pub fn SetImplicitAnimations(
        &self,
        value: &ImplicitAnimationCollection,
    ) -> ::windows::core::Result<()> {
        let this = &::windows::core::Interface::cast::<ICompositionObject2>(self)?;
        unsafe {
            (::windows::core::Vtable::vtable(this).SetImplicitAnimations)(
                ::windows::core::Vtable::as_raw(this),
                ::core::mem::transmute_copy(value),
            )
            .ok()
        }
    }
    pub fn StartAnimationGroup<'a, P0, E0>(&self, value: P0) -> ::windows::core::Result<()>
    where
        P0: ::std::convert::TryInto<
            ::windows::core::InParam<'a, ICompositionAnimationBase>,
            Error = E0,
        >,
        E0: ::std::convert::Into<::windows::core::Error>,
    {
        let this = &::windows::core::Interface::cast::<ICompositionObject2>(self)?;
        unsafe {
            (::windows::core::Vtable::vtable(this).StartAnimationGroup)(
                ::windows::core::Vtable::as_raw(this),
                value.try_into().map_err(|e| e.into())?.abi(),
            )
            .ok()
        }
    }
    pub fn StopAnimationGroup<'a, P0, E0>(&self, value: P0) -> ::windows::core::Result<()>
    where
        P0: ::std::convert::TryInto<
            ::windows::core::InParam<'a, ICompositionAnimationBase>,
            Error = E0,
        >,
        E0: ::std::convert::Into<::windows::core::Error>,
    {
        let this = &::windows::core::Interface::cast::<ICompositionObject2>(self)?;
        unsafe {
            (::windows::core::Vtable::vtable(this).StopAnimationGroup)(
                ::windows::core::Vtable::as_raw(this),
                value.try_into().map_err(|e| e.into())?.abi(),
            )
            .ok()
        }
    }
    #[doc = "*Required features: `\"UI_Dispatching\"`*"]
    #[cfg(feature = "UI_Dispatching")]
    pub fn DispatcherQueue(&self) -> ::windows::core::Result<super::Dispatching::DispatcherQueue> {
        let this = &::windows::core::Interface::cast::<ICompositionObject3>(self)?;
        unsafe {
            let mut result__ = ::core::mem::MaybeUninit::zeroed();
            (::windows::core::Vtable::vtable(this).DispatcherQueue)(
                ::windows::core::Vtable::as_raw(this),
                result__.as_mut_ptr(),
            )
            .from_abi::<super::Dispatching::DispatcherQueue>(result__)
        }
    }
    pub fn TryGetAnimationController(
        &self,
        propertyname: &::windows::core::HSTRING,
    ) -> ::windows::core::Result<AnimationController> {
        let this = &::windows::core::Interface::cast::<ICompositionObject4>(self)?;
        unsafe {
            let mut result__ = ::core::mem::MaybeUninit::zeroed();
            (::windows::core::Vtable::vtable(this).TryGetAnimationController)(
                ::windows::core::Vtable::as_raw(this),
                ::core::mem::transmute_copy(propertyname),
                result__.as_mut_ptr(),
            )
            .from_abi::<AnimationController>(result__)
        }
    }
    pub fn StartAnimationWithController<'a, P0>(
        &self,
        propertyname: &::windows::core::HSTRING,
        animation: P0,
        animationcontroller: &AnimationController,
    ) -> ::windows::core::Result<()>
    where
        P0: ::std::convert::Into<::windows::core::InParam<'a, CompositionAnimation>>,
    {
        let this = &::windows::core::Interface::cast::<ICompositionObject5>(self)?;
        unsafe {
            (::windows::core::Vtable::vtable(this).StartAnimationWithController)(
                ::windows::core::Vtable::as_raw(this),
                ::core::mem::transmute_copy(propertyname),
                animation.into().abi(),
                ::core::mem::transmute_copy(animationcontroller),
            )
            .ok()
        }
    }
    pub fn Mode(&self) -> ::windows::core::Result<CompositionEasingFunctionMode> {
        let this = self;
        unsafe {
            let mut result__ = ::core::mem::MaybeUninit::zeroed();
            (::windows::core::Vtable::vtable(this).Mode)(
                ::windows::core::Vtable::as_raw(this),
                result__.as_mut_ptr(),
            )
            .from_abi::<CompositionEasingFunctionMode>(result__)
        }
    }
    pub fn Oscillations(&self) -> ::windows::core::Result<i32> {
        let this = self;
        unsafe {
            let mut result__ = ::core::mem::MaybeUninit::zeroed();
            (::windows::core::Vtable::vtable(this).Oscillations)(
                ::windows::core::Vtable::as_raw(this),
                result__.as_mut_ptr(),
            )
            .from_abi::<i32>(result__)
        }
    }
    pub fn Springiness(&self) -> ::windows::core::Result<f32> {
        let this = self;
        unsafe {
            let mut result__ = ::core::mem::MaybeUninit::zeroed();
            (::windows::core::Vtable::vtable(this).Springiness)(
                ::windows::core::Vtable::as_raw(this),
                result__.as_mut_ptr(),
            )
            .from_abi::<f32>(result__)
        }
    }
}
impl ::core::clone::Clone for ElasticEasingFunction {
    fn clone(&self) -> Self {
        Self(self.0.clone())
    }
}
impl ::core::cmp::PartialEq for ElasticEasingFunction {
    fn eq(&self, other: &Self) -> bool {
        self.0 == other.0
    }
}
impl ::core::cmp::Eq for ElasticEasingFunction {}
impl ::core::fmt::Debug for ElasticEasingFunction {
    fn fmt(&self, f: &mut ::core::fmt::Formatter<'_>) -> ::core::fmt::Result {
        f.debug_tuple("ElasticEasingFunction").field(&self.0).finish()
    }
}
unsafe impl ::windows::core::RuntimeType for ElasticEasingFunction {
    const SIGNATURE : ::windows::core::ConstBuffer = ::windows::core::ConstBuffer::from_slice ( b"rc(Microsoft.UI.Composition.ElasticEasingFunction;{b952e12f-4a50-51a9-a11a-23855f4aae07})" ) ;
    type DefaultType = ::core::option::Option<Self>;
    fn from_default(from: &Self::DefaultType) -> ::windows::core::Result<Self> {
        from.as_ref().cloned().ok_or(::windows::core::Error::OK)
    }
}
unsafe impl ::windows::core::Vtable for ElasticEasingFunction {
    type Vtable = IElasticEasingFunction_Vtbl;
}
unsafe impl ::windows::core::Interface for ElasticEasingFunction {
    const IID: ::windows::core::GUID = <IElasticEasingFunction as ::windows::core::Interface>::IID;
}
impl ::windows::core::RuntimeName for ElasticEasingFunction {
    const NAME: &'static str = "Microsoft.UI.Composition.ElasticEasingFunction";
}
::windows::core::interface_hierarchy!(
    ElasticEasingFunction,
    ::windows::core::IUnknown,
    ::windows::core::IInspectable
);
impl ::core::convert::TryFrom<ElasticEasingFunction> for IAnimationObject {
    type Error = ::windows::core::Error;
    fn try_from(value: ElasticEasingFunction) -> ::windows::core::Result<Self> {
        ::core::convert::TryFrom::try_from(&value)
    }
}
impl ::core::convert::TryFrom<&ElasticEasingFunction> for IAnimationObject {
    type Error = ::windows::core::Error;
    fn try_from(value: &ElasticEasingFunction) -> ::windows::core::Result<Self> {
        ::windows::core::Interface::cast(value)
    }
}
impl<'a> ::core::convert::TryFrom<&ElasticEasingFunction>
    for ::windows::core::InParam<'a, IAnimationObject>
{
    type Error = ::windows::core::Error;
    fn try_from(value: &ElasticEasingFunction) -> ::windows::core::Result<Self> {
        let item = ::std::convert::TryInto::try_into(value)?;
        Ok(::windows::core::InParam::owned(item))
    }
}
impl ::core::convert::TryFrom<ElasticEasingFunction> for ::windows::Foundation::IClosable {
    type Error = ::windows::core::Error;
    fn try_from(value: ElasticEasingFunction) -> ::windows::core::Result<Self> {
        ::core::convert::TryFrom::try_from(&value)
    }
}
impl ::core::convert::TryFrom<&ElasticEasingFunction> for ::windows::Foundation::IClosable {
    type Error = ::windows::core::Error;
    fn try_from(value: &ElasticEasingFunction) -> ::windows::core::Result<Self> {
        ::windows::core::Interface::cast(value)
    }
}
impl<'a> ::core::convert::TryFrom<&ElasticEasingFunction>
    for ::windows::core::InParam<'a, ::windows::Foundation::IClosable>
{
    type Error = ::windows::core::Error;
    fn try_from(value: &ElasticEasingFunction) -> ::windows::core::Result<Self> {
        let item = ::std::convert::TryInto::try_into(value)?;
        Ok(::windows::core::InParam::owned(item))
    }
}
impl ::core::convert::From<ElasticEasingFunction> for CompositionEasingFunction {
    fn from(value: ElasticEasingFunction) -> Self {
        ::core::convert::From::from(&value)
    }
}
impl ::core::convert::From<&ElasticEasingFunction> for CompositionEasingFunction {
    fn from(value: &ElasticEasingFunction) -> Self {
        ::windows::core::Interface::cast(value).unwrap()
    }
}
impl<'a> ::core::convert::From<&ElasticEasingFunction>
    for ::windows::core::InParam<'a, CompositionEasingFunction>
{
    fn from(value: &ElasticEasingFunction) -> Self {
        ::windows::core::InParam::owned(value.into())
    }
}
impl ::core::convert::From<ElasticEasingFunction> for CompositionObject {
    fn from(value: ElasticEasingFunction) -> Self {
        ::core::convert::From::from(&value)
    }
}
impl ::core::convert::From<&ElasticEasingFunction> for CompositionObject {
    fn from(value: &ElasticEasingFunction) -> Self {
        ::windows::core::Interface::cast(value).unwrap()
    }
}
impl<'a> ::core::convert::From<&ElasticEasingFunction>
    for ::windows::core::InParam<'a, CompositionObject>
{
    fn from(value: &ElasticEasingFunction) -> Self {
        ::windows::core::InParam::owned(value.into())
    }
}
unsafe impl ::core::marker::Send for ElasticEasingFunction {}
unsafe impl ::core::marker::Sync for ElasticEasingFunction {}
#[doc = "*Required features: `\"UI_Composition\"`*"]
#[repr(transparent)]
pub struct ExponentialEasingFunction(::windows::core::IUnknown);
impl ExponentialEasingFunction {
    pub fn PopulatePropertyInfo(
        &self,
        propertyname: &::windows::core::HSTRING,
        propertyinfo: &AnimationPropertyInfo,
    ) -> ::windows::core::Result<()> {
        let this = &::windows::core::Interface::cast::<IAnimationObject>(self)?;
        unsafe {
            (::windows::core::Vtable::vtable(this).PopulatePropertyInfo)(
                ::windows::core::Vtable::as_raw(this),
                ::core::mem::transmute_copy(propertyname),
                ::core::mem::transmute_copy(propertyinfo),
            )
            .ok()
        }
    }
    pub fn Close(&self) -> ::windows::core::Result<()> {
        let this = &::windows::core::Interface::cast::<::windows::Foundation::IClosable>(self)?;
        unsafe {
            (::windows::core::Vtable::vtable(this).Close)(::windows::core::Vtable::as_raw(this))
                .ok()
        }
    }
    pub fn Compositor(&self) -> ::windows::core::Result<Compositor> {
        let this = &::windows::core::Interface::cast::<ICompositionObject>(self)?;
        unsafe {
            let mut result__ = ::core::mem::MaybeUninit::zeroed();
            (::windows::core::Vtable::vtable(this).Compositor)(
                ::windows::core::Vtable::as_raw(this),
                result__.as_mut_ptr(),
            )
            .from_abi::<Compositor>(result__)
        }
    }
    pub fn Properties(&self) -> ::windows::core::Result<CompositionPropertySet> {
        let this = &::windows::core::Interface::cast::<ICompositionObject>(self)?;
        unsafe {
            let mut result__ = ::core::mem::MaybeUninit::zeroed();
            (::windows::core::Vtable::vtable(this).Properties)(
                ::windows::core::Vtable::as_raw(this),
                result__.as_mut_ptr(),
            )
            .from_abi::<CompositionPropertySet>(result__)
        }
    }
    pub fn StartAnimation<'a, P0>(
        &self,
        propertyname: &::windows::core::HSTRING,
        animation: P0,
    ) -> ::windows::core::Result<()>
    where
        P0: ::std::convert::Into<::windows::core::InParam<'a, CompositionAnimation>>,
    {
        let this = &::windows::core::Interface::cast::<ICompositionObject>(self)?;
        unsafe {
            (::windows::core::Vtable::vtable(this).StartAnimation)(
                ::windows::core::Vtable::as_raw(this),
                ::core::mem::transmute_copy(propertyname),
                animation.into().abi(),
            )
            .ok()
        }
    }
    pub fn StopAnimation(
        &self,
        propertyname: &::windows::core::HSTRING,
    ) -> ::windows::core::Result<()> {
        let this = &::windows::core::Interface::cast::<ICompositionObject>(self)?;
        unsafe {
            (::windows::core::Vtable::vtable(this).StopAnimation)(
                ::windows::core::Vtable::as_raw(this),
                ::core::mem::transmute_copy(propertyname),
            )
            .ok()
        }
    }
    pub fn Comment(&self) -> ::windows::core::Result<::windows::core::HSTRING> {
        let this = &::windows::core::Interface::cast::<ICompositionObject2>(self)?;
        unsafe {
            let mut result__ = ::core::mem::MaybeUninit::zeroed();
            (::windows::core::Vtable::vtable(this).Comment)(
                ::windows::core::Vtable::as_raw(this),
                result__.as_mut_ptr(),
            )
            .from_abi::<::windows::core::HSTRING>(result__)
        }
    }
    pub fn SetComment(&self, value: &::windows::core::HSTRING) -> ::windows::core::Result<()> {
        let this = &::windows::core::Interface::cast::<ICompositionObject2>(self)?;
        unsafe {
            (::windows::core::Vtable::vtable(this).SetComment)(
                ::windows::core::Vtable::as_raw(this),
                ::core::mem::transmute_copy(value),
            )
            .ok()
        }
    }
    pub fn ImplicitAnimations(&self) -> ::windows::core::Result<ImplicitAnimationCollection> {
        let this = &::windows::core::Interface::cast::<ICompositionObject2>(self)?;
        unsafe {
            let mut result__ = ::core::mem::MaybeUninit::zeroed();
            (::windows::core::Vtable::vtable(this).ImplicitAnimations)(
                ::windows::core::Vtable::as_raw(this),
                result__.as_mut_ptr(),
            )
            .from_abi::<ImplicitAnimationCollection>(result__)
        }
    }
    pub fn SetImplicitAnimations(
        &self,
        value: &ImplicitAnimationCollection,
    ) -> ::windows::core::Result<()> {
        let this = &::windows::core::Interface::cast::<ICompositionObject2>(self)?;
        unsafe {
            (::windows::core::Vtable::vtable(this).SetImplicitAnimations)(
                ::windows::core::Vtable::as_raw(this),
                ::core::mem::transmute_copy(value),
            )
            .ok()
        }
    }
    pub fn StartAnimationGroup<'a, P0, E0>(&self, value: P0) -> ::windows::core::Result<()>
    where
        P0: ::std::convert::TryInto<
            ::windows::core::InParam<'a, ICompositionAnimationBase>,
            Error = E0,
        >,
        E0: ::std::convert::Into<::windows::core::Error>,
    {
        let this = &::windows::core::Interface::cast::<ICompositionObject2>(self)?;
        unsafe {
            (::windows::core::Vtable::vtable(this).StartAnimationGroup)(
                ::windows::core::Vtable::as_raw(this),
                value.try_into().map_err(|e| e.into())?.abi(),
            )
            .ok()
        }
    }
    pub fn StopAnimationGroup<'a, P0, E0>(&self, value: P0) -> ::windows::core::Result<()>
    where
        P0: ::std::convert::TryInto<
            ::windows::core::InParam<'a, ICompositionAnimationBase>,
            Error = E0,
        >,
        E0: ::std::convert::Into<::windows::core::Error>,
    {
        let this = &::windows::core::Interface::cast::<ICompositionObject2>(self)?;
        unsafe {
            (::windows::core::Vtable::vtable(this).StopAnimationGroup)(
                ::windows::core::Vtable::as_raw(this),
                value.try_into().map_err(|e| e.into())?.abi(),
            )
            .ok()
        }
    }
    #[doc = "*Required features: `\"UI_Dispatching\"`*"]
    #[cfg(feature = "UI_Dispatching")]
    pub fn DispatcherQueue(&self) -> ::windows::core::Result<super::Dispatching::DispatcherQueue> {
        let this = &::windows::core::Interface::cast::<ICompositionObject3>(self)?;
        unsafe {
            let mut result__ = ::core::mem::MaybeUninit::zeroed();
            (::windows::core::Vtable::vtable(this).DispatcherQueue)(
                ::windows::core::Vtable::as_raw(this),
                result__.as_mut_ptr(),
            )
            .from_abi::<super::Dispatching::DispatcherQueue>(result__)
        }
    }
    pub fn TryGetAnimationController(
        &self,
        propertyname: &::windows::core::HSTRING,
    ) -> ::windows::core::Result<AnimationController> {
        let this = &::windows::core::Interface::cast::<ICompositionObject4>(self)?;
        unsafe {
            let mut result__ = ::core::mem::MaybeUninit::zeroed();
            (::windows::core::Vtable::vtable(this).TryGetAnimationController)(
                ::windows::core::Vtable::as_raw(this),
                ::core::mem::transmute_copy(propertyname),
                result__.as_mut_ptr(),
            )
            .from_abi::<AnimationController>(result__)
        }
    }
    pub fn StartAnimationWithController<'a, P0>(
        &self,
        propertyname: &::windows::core::HSTRING,
        animation: P0,
        animationcontroller: &AnimationController,
    ) -> ::windows::core::Result<()>
    where
        P0: ::std::convert::Into<::windows::core::InParam<'a, CompositionAnimation>>,
    {
        let this = &::windows::core::Interface::cast::<ICompositionObject5>(self)?;
        unsafe {
            (::windows::core::Vtable::vtable(this).StartAnimationWithController)(
                ::windows::core::Vtable::as_raw(this),
                ::core::mem::transmute_copy(propertyname),
                animation.into().abi(),
                ::core::mem::transmute_copy(animationcontroller),
            )
            .ok()
        }
    }
    pub fn Mode(&self) -> ::windows::core::Result<CompositionEasingFunctionMode> {
        let this = self;
        unsafe {
            let mut result__ = ::core::mem::MaybeUninit::zeroed();
            (::windows::core::Vtable::vtable(this).Mode)(
                ::windows::core::Vtable::as_raw(this),
                result__.as_mut_ptr(),
            )
            .from_abi::<CompositionEasingFunctionMode>(result__)
        }
    }
    pub fn Exponent(&self) -> ::windows::core::Result<f32> {
        let this = self;
        unsafe {
            let mut result__ = ::core::mem::MaybeUninit::zeroed();
            (::windows::core::Vtable::vtable(this).Exponent)(
                ::windows::core::Vtable::as_raw(this),
                result__.as_mut_ptr(),
            )
            .from_abi::<f32>(result__)
        }
    }
}
impl ::core::clone::Clone for ExponentialEasingFunction {
    fn clone(&self) -> Self {
        Self(self.0.clone())
    }
}
impl ::core::cmp::PartialEq for ExponentialEasingFunction {
    fn eq(&self, other: &Self) -> bool {
        self.0 == other.0
    }
}
impl ::core::cmp::Eq for ExponentialEasingFunction {}
impl ::core::fmt::Debug for ExponentialEasingFunction {
    fn fmt(&self, f: &mut ::core::fmt::Formatter<'_>) -> ::core::fmt::Result {
        f.debug_tuple("ExponentialEasingFunction").field(&self.0).finish()
    }
}
unsafe impl ::windows::core::RuntimeType for ExponentialEasingFunction {
    const SIGNATURE : ::windows::core::ConstBuffer = ::windows::core::ConstBuffer::from_slice ( b"rc(Microsoft.UI.Composition.ExponentialEasingFunction;{df29ecc1-3ffc-565f-9d6c-533586908106})" ) ;
    type DefaultType = ::core::option::Option<Self>;
    fn from_default(from: &Self::DefaultType) -> ::windows::core::Result<Self> {
        from.as_ref().cloned().ok_or(::windows::core::Error::OK)
    }
}
unsafe impl ::windows::core::Vtable for ExponentialEasingFunction {
    type Vtable = IExponentialEasingFunction_Vtbl;
}
unsafe impl ::windows::core::Interface for ExponentialEasingFunction {
    const IID: ::windows::core::GUID =
        <IExponentialEasingFunction as ::windows::core::Interface>::IID;
}
impl ::windows::core::RuntimeName for ExponentialEasingFunction {
    const NAME: &'static str = "Microsoft.UI.Composition.ExponentialEasingFunction";
}
::windows::core::interface_hierarchy!(
    ExponentialEasingFunction,
    ::windows::core::IUnknown,
    ::windows::core::IInspectable
);
impl ::core::convert::TryFrom<ExponentialEasingFunction> for IAnimationObject {
    type Error = ::windows::core::Error;
    fn try_from(value: ExponentialEasingFunction) -> ::windows::core::Result<Self> {
        ::core::convert::TryFrom::try_from(&value)
    }
}
impl ::core::convert::TryFrom<&ExponentialEasingFunction> for IAnimationObject {
    type Error = ::windows::core::Error;
    fn try_from(value: &ExponentialEasingFunction) -> ::windows::core::Result<Self> {
        ::windows::core::Interface::cast(value)
    }
}
impl<'a> ::core::convert::TryFrom<&ExponentialEasingFunction>
    for ::windows::core::InParam<'a, IAnimationObject>
{
    type Error = ::windows::core::Error;
    fn try_from(value: &ExponentialEasingFunction) -> ::windows::core::Result<Self> {
        let item = ::std::convert::TryInto::try_into(value)?;
        Ok(::windows::core::InParam::owned(item))
    }
}
impl ::core::convert::TryFrom<ExponentialEasingFunction> for ::windows::Foundation::IClosable {
    type Error = ::windows::core::Error;
    fn try_from(value: ExponentialEasingFunction) -> ::windows::core::Result<Self> {
        ::core::convert::TryFrom::try_from(&value)
    }
}
impl ::core::convert::TryFrom<&ExponentialEasingFunction> for ::windows::Foundation::IClosable {
    type Error = ::windows::core::Error;
    fn try_from(value: &ExponentialEasingFunction) -> ::windows::core::Result<Self> {
        ::windows::core::Interface::cast(value)
    }
}
impl<'a> ::core::convert::TryFrom<&ExponentialEasingFunction>
    for ::windows::core::InParam<'a, ::windows::Foundation::IClosable>
{
    type Error = ::windows::core::Error;
    fn try_from(value: &ExponentialEasingFunction) -> ::windows::core::Result<Self> {
        let item = ::std::convert::TryInto::try_into(value)?;
        Ok(::windows::core::InParam::owned(item))
    }
}
impl ::core::convert::From<ExponentialEasingFunction> for CompositionEasingFunction {
    fn from(value: ExponentialEasingFunction) -> Self {
        ::core::convert::From::from(&value)
    }
}
impl ::core::convert::From<&ExponentialEasingFunction> for CompositionEasingFunction {
    fn from(value: &ExponentialEasingFunction) -> Self {
        ::windows::core::Interface::cast(value).unwrap()
    }
}
impl<'a> ::core::convert::From<&ExponentialEasingFunction>
    for ::windows::core::InParam<'a, CompositionEasingFunction>
{
    fn from(value: &ExponentialEasingFunction) -> Self {
        ::windows::core::InParam::owned(value.into())
    }
}
impl ::core::convert::From<ExponentialEasingFunction> for CompositionObject {
    fn from(value: ExponentialEasingFunction) -> Self {
        ::core::convert::From::from(&value)
    }
}
impl ::core::convert::From<&ExponentialEasingFunction> for CompositionObject {
    fn from(value: &ExponentialEasingFunction) -> Self {
        ::windows::core::Interface::cast(value).unwrap()
    }
}
impl<'a> ::core::convert::From<&ExponentialEasingFunction>
    for ::windows::core::InParam<'a, CompositionObject>
{
    fn from(value: &ExponentialEasingFunction) -> Self {
        ::windows::core::InParam::owned(value.into())
    }
}
unsafe impl ::core::marker::Send for ExponentialEasingFunction {}
unsafe impl ::core::marker::Sync for ExponentialEasingFunction {}
#[doc = "*Required features: `\"UI_Composition\"`*"]
#[repr(transparent)]
pub struct ExpressionAnimation(::windows::core::IUnknown);
impl ExpressionAnimation {
    pub fn PopulatePropertyInfo(
        &self,
        propertyname: &::windows::core::HSTRING,
        propertyinfo: &AnimationPropertyInfo,
    ) -> ::windows::core::Result<()> {
        let this = &::windows::core::Interface::cast::<IAnimationObject>(self)?;
        unsafe {
            (::windows::core::Vtable::vtable(this).PopulatePropertyInfo)(
                ::windows::core::Vtable::as_raw(this),
                ::core::mem::transmute_copy(propertyname),
                ::core::mem::transmute_copy(propertyinfo),
            )
            .ok()
        }
    }
    pub fn Close(&self) -> ::windows::core::Result<()> {
        let this = &::windows::core::Interface::cast::<::windows::Foundation::IClosable>(self)?;
        unsafe {
            (::windows::core::Vtable::vtable(this).Close)(::windows::core::Vtable::as_raw(this))
                .ok()
        }
    }
    pub fn ClearAllParameters(&self) -> ::windows::core::Result<()> {
        let this = &::windows::core::Interface::cast::<ICompositionAnimation>(self)?;
        unsafe {
            (::windows::core::Vtable::vtable(this).ClearAllParameters)(
                ::windows::core::Vtable::as_raw(this),
            )
            .ok()
        }
    }
    pub fn ClearParameter(&self, key: &::windows::core::HSTRING) -> ::windows::core::Result<()> {
        let this = &::windows::core::Interface::cast::<ICompositionAnimation>(self)?;
        unsafe {
            (::windows::core::Vtable::vtable(this).ClearParameter)(
                ::windows::core::Vtable::as_raw(this),
                ::core::mem::transmute_copy(key),
            )
            .ok()
        }
    }
    pub fn SetColorParameter(
        &self,
        key: &::windows::core::HSTRING,
        value: ::windows::UI::Color,
    ) -> ::windows::core::Result<()> {
        let this = &::windows::core::Interface::cast::<ICompositionAnimation>(self)?;
        unsafe {
            (::windows::core::Vtable::vtable(this).SetColorParameter)(
                ::windows::core::Vtable::as_raw(this),
                ::core::mem::transmute_copy(key),
                value,
            )
            .ok()
        }
    }
    pub fn SetMatrix3x2Parameter(
        &self,
        key: &::windows::core::HSTRING,
        value: ::windows::Foundation::Numerics::Matrix3x2,
    ) -> ::windows::core::Result<()> {
        let this = &::windows::core::Interface::cast::<ICompositionAnimation>(self)?;
        unsafe {
            (::windows::core::Vtable::vtable(this).SetMatrix3x2Parameter)(
                ::windows::core::Vtable::as_raw(this),
                ::core::mem::transmute_copy(key),
                value,
            )
            .ok()
        }
    }
    pub fn SetMatrix4x4Parameter(
        &self,
        key: &::windows::core::HSTRING,
        value: ::windows::Foundation::Numerics::Matrix4x4,
    ) -> ::windows::core::Result<()> {
        let this = &::windows::core::Interface::cast::<ICompositionAnimation>(self)?;
        unsafe {
            (::windows::core::Vtable::vtable(this).SetMatrix4x4Parameter)(
                ::windows::core::Vtable::as_raw(this),
                ::core::mem::transmute_copy(key),
                value,
            )
            .ok()
        }
    }
    pub fn SetQuaternionParameter(
        &self,
        key: &::windows::core::HSTRING,
        value: ::windows::Foundation::Numerics::Quaternion,
    ) -> ::windows::core::Result<()> {
        let this = &::windows::core::Interface::cast::<ICompositionAnimation>(self)?;
        unsafe {
            (::windows::core::Vtable::vtable(this).SetQuaternionParameter)(
                ::windows::core::Vtable::as_raw(this),
                ::core::mem::transmute_copy(key),
                value,
            )
            .ok()
        }
    }
    pub fn SetReferenceParameter<'a, P0>(
        &self,
        key: &::windows::core::HSTRING,
        compositionobject: P0,
    ) -> ::windows::core::Result<()>
    where
        P0: ::std::convert::Into<::windows::core::InParam<'a, CompositionObject>>,
    {
        let this = &::windows::core::Interface::cast::<ICompositionAnimation>(self)?;
        unsafe {
            (::windows::core::Vtable::vtable(this).SetReferenceParameter)(
                ::windows::core::Vtable::as_raw(this),
                ::core::mem::transmute_copy(key),
                compositionobject.into().abi(),
            )
            .ok()
        }
    }
    pub fn SetScalarParameter(
        &self,
        key: &::windows::core::HSTRING,
        value: f32,
    ) -> ::windows::core::Result<()> {
        let this = &::windows::core::Interface::cast::<ICompositionAnimation>(self)?;
        unsafe {
            (::windows::core::Vtable::vtable(this).SetScalarParameter)(
                ::windows::core::Vtable::as_raw(this),
                ::core::mem::transmute_copy(key),
                value,
            )
            .ok()
        }
    }
    pub fn SetVector2Parameter(
        &self,
        key: &::windows::core::HSTRING,
        value: ::windows::Foundation::Numerics::Vector2,
    ) -> ::windows::core::Result<()> {
        let this = &::windows::core::Interface::cast::<ICompositionAnimation>(self)?;
        unsafe {
            (::windows::core::Vtable::vtable(this).SetVector2Parameter)(
                ::windows::core::Vtable::as_raw(this),
                ::core::mem::transmute_copy(key),
                value,
            )
            .ok()
        }
    }
    pub fn SetVector3Parameter(
        &self,
        key: &::windows::core::HSTRING,
        value: ::windows::Foundation::Numerics::Vector3,
    ) -> ::windows::core::Result<()> {
        let this = &::windows::core::Interface::cast::<ICompositionAnimation>(self)?;
        unsafe {
            (::windows::core::Vtable::vtable(this).SetVector3Parameter)(
                ::windows::core::Vtable::as_raw(this),
                ::core::mem::transmute_copy(key),
                value,
            )
            .ok()
        }
    }
    pub fn SetVector4Parameter(
        &self,
        key: &::windows::core::HSTRING,
        value: ::windows::Foundation::Numerics::Vector4,
    ) -> ::windows::core::Result<()> {
        let this = &::windows::core::Interface::cast::<ICompositionAnimation>(self)?;
        unsafe {
            (::windows::core::Vtable::vtable(this).SetVector4Parameter)(
                ::windows::core::Vtable::as_raw(this),
                ::core::mem::transmute_copy(key),
                value,
            )
            .ok()
        }
    }
    pub fn SetBooleanParameter(
        &self,
        key: &::windows::core::HSTRING,
        value: bool,
    ) -> ::windows::core::Result<()> {
        let this = &::windows::core::Interface::cast::<ICompositionAnimation2>(self)?;
        unsafe {
            (::windows::core::Vtable::vtable(this).SetBooleanParameter)(
                ::windows::core::Vtable::as_raw(this),
                ::core::mem::transmute_copy(key),
                value,
            )
            .ok()
        }
    }
    pub fn Target(&self) -> ::windows::core::Result<::windows::core::HSTRING> {
        let this = &::windows::core::Interface::cast::<ICompositionAnimation2>(self)?;
        unsafe {
            let mut result__ = ::core::mem::MaybeUninit::zeroed();
            (::windows::core::Vtable::vtable(this).Target)(
                ::windows::core::Vtable::as_raw(this),
                result__.as_mut_ptr(),
            )
            .from_abi::<::windows::core::HSTRING>(result__)
        }
    }
    pub fn SetTarget(&self, value: &::windows::core::HSTRING) -> ::windows::core::Result<()> {
        let this = &::windows::core::Interface::cast::<ICompositionAnimation2>(self)?;
        unsafe {
            (::windows::core::Vtable::vtable(this).SetTarget)(
                ::windows::core::Vtable::as_raw(this),
                ::core::mem::transmute_copy(value),
            )
            .ok()
        }
    }
    pub fn InitialValueExpressions(
        &self,
    ) -> ::windows::core::Result<InitialValueExpressionCollection> {
        let this = &::windows::core::Interface::cast::<ICompositionAnimation3>(self)?;
        unsafe {
            let mut result__ = ::core::mem::MaybeUninit::zeroed();
            (::windows::core::Vtable::vtable(this).InitialValueExpressions)(
                ::windows::core::Vtable::as_raw(this),
                result__.as_mut_ptr(),
            )
            .from_abi::<InitialValueExpressionCollection>(result__)
        }
    }
    pub fn SetExpressionReferenceParameter<'a, P0, E0>(
        &self,
        parametername: &::windows::core::HSTRING,
        source: P0,
    ) -> ::windows::core::Result<()>
    where
        P0: ::std::convert::TryInto<::windows::core::InParam<'a, IAnimationObject>, Error = E0>,
        E0: ::std::convert::Into<::windows::core::Error>,
    {
        let this = &::windows::core::Interface::cast::<ICompositionAnimation4>(self)?;
        unsafe {
            (::windows::core::Vtable::vtable(this).SetExpressionReferenceParameter)(
                ::windows::core::Vtable::as_raw(this),
                ::core::mem::transmute_copy(parametername),
                source.try_into().map_err(|e| e.into())?.abi(),
            )
            .ok()
        }
    }
    pub fn Compositor(&self) -> ::windows::core::Result<Compositor> {
        let this = &::windows::core::Interface::cast::<ICompositionObject>(self)?;
        unsafe {
            let mut result__ = ::core::mem::MaybeUninit::zeroed();
            (::windows::core::Vtable::vtable(this).Compositor)(
                ::windows::core::Vtable::as_raw(this),
                result__.as_mut_ptr(),
            )
            .from_abi::<Compositor>(result__)
        }
    }
    pub fn Properties(&self) -> ::windows::core::Result<CompositionPropertySet> {
        let this = &::windows::core::Interface::cast::<ICompositionObject>(self)?;
        unsafe {
            let mut result__ = ::core::mem::MaybeUninit::zeroed();
            (::windows::core::Vtable::vtable(this).Properties)(
                ::windows::core::Vtable::as_raw(this),
                result__.as_mut_ptr(),
            )
            .from_abi::<CompositionPropertySet>(result__)
        }
    }
    pub fn StartAnimation<'a, P0>(
        &self,
        propertyname: &::windows::core::HSTRING,
        animation: P0,
    ) -> ::windows::core::Result<()>
    where
        P0: ::std::convert::Into<::windows::core::InParam<'a, CompositionAnimation>>,
    {
        let this = &::windows::core::Interface::cast::<ICompositionObject>(self)?;
        unsafe {
            (::windows::core::Vtable::vtable(this).StartAnimation)(
                ::windows::core::Vtable::as_raw(this),
                ::core::mem::transmute_copy(propertyname),
                animation.into().abi(),
            )
            .ok()
        }
    }
    pub fn StopAnimation(
        &self,
        propertyname: &::windows::core::HSTRING,
    ) -> ::windows::core::Result<()> {
        let this = &::windows::core::Interface::cast::<ICompositionObject>(self)?;
        unsafe {
            (::windows::core::Vtable::vtable(this).StopAnimation)(
                ::windows::core::Vtable::as_raw(this),
                ::core::mem::transmute_copy(propertyname),
            )
            .ok()
        }
    }
    pub fn Comment(&self) -> ::windows::core::Result<::windows::core::HSTRING> {
        let this = &::windows::core::Interface::cast::<ICompositionObject2>(self)?;
        unsafe {
            let mut result__ = ::core::mem::MaybeUninit::zeroed();
            (::windows::core::Vtable::vtable(this).Comment)(
                ::windows::core::Vtable::as_raw(this),
                result__.as_mut_ptr(),
            )
            .from_abi::<::windows::core::HSTRING>(result__)
        }
    }
    pub fn SetComment(&self, value: &::windows::core::HSTRING) -> ::windows::core::Result<()> {
        let this = &::windows::core::Interface::cast::<ICompositionObject2>(self)?;
        unsafe {
            (::windows::core::Vtable::vtable(this).SetComment)(
                ::windows::core::Vtable::as_raw(this),
                ::core::mem::transmute_copy(value),
            )
            .ok()
        }
    }
    pub fn ImplicitAnimations(&self) -> ::windows::core::Result<ImplicitAnimationCollection> {
        let this = &::windows::core::Interface::cast::<ICompositionObject2>(self)?;
        unsafe {
            let mut result__ = ::core::mem::MaybeUninit::zeroed();
            (::windows::core::Vtable::vtable(this).ImplicitAnimations)(
                ::windows::core::Vtable::as_raw(this),
                result__.as_mut_ptr(),
            )
            .from_abi::<ImplicitAnimationCollection>(result__)
        }
    }
    pub fn SetImplicitAnimations(
        &self,
        value: &ImplicitAnimationCollection,
    ) -> ::windows::core::Result<()> {
        let this = &::windows::core::Interface::cast::<ICompositionObject2>(self)?;
        unsafe {
            (::windows::core::Vtable::vtable(this).SetImplicitAnimations)(
                ::windows::core::Vtable::as_raw(this),
                ::core::mem::transmute_copy(value),
            )
            .ok()
        }
    }
    pub fn StartAnimationGroup<'a, P0, E0>(&self, value: P0) -> ::windows::core::Result<()>
    where
        P0: ::std::convert::TryInto<
            ::windows::core::InParam<'a, ICompositionAnimationBase>,
            Error = E0,
        >,
        E0: ::std::convert::Into<::windows::core::Error>,
    {
        let this = &::windows::core::Interface::cast::<ICompositionObject2>(self)?;
        unsafe {
            (::windows::core::Vtable::vtable(this).StartAnimationGroup)(
                ::windows::core::Vtable::as_raw(this),
                value.try_into().map_err(|e| e.into())?.abi(),
            )
            .ok()
        }
    }
    pub fn StopAnimationGroup<'a, P0, E0>(&self, value: P0) -> ::windows::core::Result<()>
    where
        P0: ::std::convert::TryInto<
            ::windows::core::InParam<'a, ICompositionAnimationBase>,
            Error = E0,
        >,
        E0: ::std::convert::Into<::windows::core::Error>,
    {
        let this = &::windows::core::Interface::cast::<ICompositionObject2>(self)?;
        unsafe {
            (::windows::core::Vtable::vtable(this).StopAnimationGroup)(
                ::windows::core::Vtable::as_raw(this),
                value.try_into().map_err(|e| e.into())?.abi(),
            )
            .ok()
        }
    }
    #[doc = "*Required features: `\"UI_Dispatching\"`*"]
    #[cfg(feature = "UI_Dispatching")]
    pub fn DispatcherQueue(&self) -> ::windows::core::Result<super::Dispatching::DispatcherQueue> {
        let this = &::windows::core::Interface::cast::<ICompositionObject3>(self)?;
        unsafe {
            let mut result__ = ::core::mem::MaybeUninit::zeroed();
            (::windows::core::Vtable::vtable(this).DispatcherQueue)(
                ::windows::core::Vtable::as_raw(this),
                result__.as_mut_ptr(),
            )
            .from_abi::<super::Dispatching::DispatcherQueue>(result__)
        }
    }
    pub fn TryGetAnimationController(
        &self,
        propertyname: &::windows::core::HSTRING,
    ) -> ::windows::core::Result<AnimationController> {
        let this = &::windows::core::Interface::cast::<ICompositionObject4>(self)?;
        unsafe {
            let mut result__ = ::core::mem::MaybeUninit::zeroed();
            (::windows::core::Vtable::vtable(this).TryGetAnimationController)(
                ::windows::core::Vtable::as_raw(this),
                ::core::mem::transmute_copy(propertyname),
                result__.as_mut_ptr(),
            )
            .from_abi::<AnimationController>(result__)
        }
    }
    pub fn StartAnimationWithController<'a, P0>(
        &self,
        propertyname: &::windows::core::HSTRING,
        animation: P0,
        animationcontroller: &AnimationController,
    ) -> ::windows::core::Result<()>
    where
        P0: ::std::convert::Into<::windows::core::InParam<'a, CompositionAnimation>>,
    {
        let this = &::windows::core::Interface::cast::<ICompositionObject5>(self)?;
        unsafe {
            (::windows::core::Vtable::vtable(this).StartAnimationWithController)(
                ::windows::core::Vtable::as_raw(this),
                ::core::mem::transmute_copy(propertyname),
                animation.into().abi(),
                ::core::mem::transmute_copy(animationcontroller),
            )
            .ok()
        }
    }
    pub fn Expression(&self) -> ::windows::core::Result<::windows::core::HSTRING> {
        let this = self;
        unsafe {
            let mut result__ = ::core::mem::MaybeUninit::zeroed();
            (::windows::core::Vtable::vtable(this).Expression)(
                ::windows::core::Vtable::as_raw(this),
                result__.as_mut_ptr(),
            )
            .from_abi::<::windows::core::HSTRING>(result__)
        }
    }
    pub fn SetExpression(&self, value: &::windows::core::HSTRING) -> ::windows::core::Result<()> {
        let this = self;
        unsafe {
            (::windows::core::Vtable::vtable(this).SetExpression)(
                ::windows::core::Vtable::as_raw(this),
                ::core::mem::transmute_copy(value),
            )
            .ok()
        }
    }
}
impl ::core::clone::Clone for ExpressionAnimation {
    fn clone(&self) -> Self {
        Self(self.0.clone())
    }
}
impl ::core::cmp::PartialEq for ExpressionAnimation {
    fn eq(&self, other: &Self) -> bool {
        self.0 == other.0
    }
}
impl ::core::cmp::Eq for ExpressionAnimation {}
impl ::core::fmt::Debug for ExpressionAnimation {
    fn fmt(&self, f: &mut ::core::fmt::Formatter<'_>) -> ::core::fmt::Result {
        f.debug_tuple("ExpressionAnimation").field(&self.0).finish()
    }
}
unsafe impl ::windows::core::RuntimeType for ExpressionAnimation {
    const SIGNATURE: ::windows::core::ConstBuffer = ::windows::core::ConstBuffer::from_slice(
        b"rc(Microsoft.UI.Composition.ExpressionAnimation;{7fff5826-1992-56c0-9060-5ade561a4f2d})",
    );
    type DefaultType = ::core::option::Option<Self>;
    fn from_default(from: &Self::DefaultType) -> ::windows::core::Result<Self> {
        from.as_ref().cloned().ok_or(::windows::core::Error::OK)
    }
}
unsafe impl ::windows::core::Vtable for ExpressionAnimation {
    type Vtable = IExpressionAnimation_Vtbl;
}
unsafe impl ::windows::core::Interface for ExpressionAnimation {
    const IID: ::windows::core::GUID = <IExpressionAnimation as ::windows::core::Interface>::IID;
}
impl ::windows::core::RuntimeName for ExpressionAnimation {
    const NAME: &'static str = "Microsoft.UI.Composition.ExpressionAnimation";
}
::windows::core::interface_hierarchy!(
    ExpressionAnimation,
    ::windows::core::IUnknown,
    ::windows::core::IInspectable
);
impl ::core::convert::TryFrom<ExpressionAnimation> for IAnimationObject {
    type Error = ::windows::core::Error;
    fn try_from(value: ExpressionAnimation) -> ::windows::core::Result<Self> {
        ::core::convert::TryFrom::try_from(&value)
    }
}
impl ::core::convert::TryFrom<&ExpressionAnimation> for IAnimationObject {
    type Error = ::windows::core::Error;
    fn try_from(value: &ExpressionAnimation) -> ::windows::core::Result<Self> {
        ::windows::core::Interface::cast(value)
    }
}
impl<'a> ::core::convert::TryFrom<&ExpressionAnimation>
    for ::windows::core::InParam<'a, IAnimationObject>
{
    type Error = ::windows::core::Error;
    fn try_from(value: &ExpressionAnimation) -> ::windows::core::Result<Self> {
        let item = ::std::convert::TryInto::try_into(value)?;
        Ok(::windows::core::InParam::owned(item))
    }
}
impl ::core::convert::TryFrom<ExpressionAnimation> for ::windows::Foundation::IClosable {
    type Error = ::windows::core::Error;
    fn try_from(value: ExpressionAnimation) -> ::windows::core::Result<Self> {
        ::core::convert::TryFrom::try_from(&value)
    }
}
impl ::core::convert::TryFrom<&ExpressionAnimation> for ::windows::Foundation::IClosable {
    type Error = ::windows::core::Error;
    fn try_from(value: &ExpressionAnimation) -> ::windows::core::Result<Self> {
        ::windows::core::Interface::cast(value)
    }
}
impl<'a> ::core::convert::TryFrom<&ExpressionAnimation>
    for ::windows::core::InParam<'a, ::windows::Foundation::IClosable>
{
    type Error = ::windows::core::Error;
    fn try_from(value: &ExpressionAnimation) -> ::windows::core::Result<Self> {
        let item = ::std::convert::TryInto::try_into(value)?;
        Ok(::windows::core::InParam::owned(item))
    }
}
impl ::core::convert::TryFrom<ExpressionAnimation> for ICompositionAnimationBase {
    type Error = ::windows::core::Error;
    fn try_from(value: ExpressionAnimation) -> ::windows::core::Result<Self> {
        ::core::convert::TryFrom::try_from(&value)
    }
}
impl ::core::convert::TryFrom<&ExpressionAnimation> for ICompositionAnimationBase {
    type Error = ::windows::core::Error;
    fn try_from(value: &ExpressionAnimation) -> ::windows::core::Result<Self> {
        ::windows::core::Interface::cast(value)
    }
}
impl<'a> ::core::convert::TryFrom<&ExpressionAnimation>
    for ::windows::core::InParam<'a, ICompositionAnimationBase>
{
    type Error = ::windows::core::Error;
    fn try_from(value: &ExpressionAnimation) -> ::windows::core::Result<Self> {
        let item = ::std::convert::TryInto::try_into(value)?;
        Ok(::windows::core::InParam::owned(item))
    }
}
impl ::core::convert::From<ExpressionAnimation> for CompositionAnimation {
    fn from(value: ExpressionAnimation) -> Self {
        ::core::convert::From::from(&value)
    }
}
impl ::core::convert::From<&ExpressionAnimation> for CompositionAnimation {
    fn from(value: &ExpressionAnimation) -> Self {
        ::windows::core::Interface::cast(value).unwrap()
    }
}
impl<'a> ::core::convert::From<&ExpressionAnimation>
    for ::windows::core::InParam<'a, CompositionAnimation>
{
    fn from(value: &ExpressionAnimation) -> Self {
        ::windows::core::InParam::owned(value.into())
    }
}
impl ::core::convert::From<ExpressionAnimation> for CompositionObject {
    fn from(value: ExpressionAnimation) -> Self {
        ::core::convert::From::from(&value)
    }
}
impl ::core::convert::From<&ExpressionAnimation> for CompositionObject {
    fn from(value: &ExpressionAnimation) -> Self {
        ::windows::core::Interface::cast(value).unwrap()
    }
}
impl<'a> ::core::convert::From<&ExpressionAnimation>
    for ::windows::core::InParam<'a, CompositionObject>
{
    fn from(value: &ExpressionAnimation) -> Self {
        ::windows::core::InParam::owned(value.into())
    }
}
unsafe impl ::core::marker::Send for ExpressionAnimation {}
unsafe impl ::core::marker::Sync for ExpressionAnimation {}
#[doc = "*Required features: `\"UI_Composition\"`*"]
#[repr(transparent)]
pub struct ImplicitAnimationCollection(::windows::core::IUnknown);
impl ImplicitAnimationCollection {
    pub fn PopulatePropertyInfo(
        &self,
        propertyname: &::windows::core::HSTRING,
        propertyinfo: &AnimationPropertyInfo,
    ) -> ::windows::core::Result<()> {
        let this = &::windows::core::Interface::cast::<IAnimationObject>(self)?;
        unsafe {
            (::windows::core::Vtable::vtable(this).PopulatePropertyInfo)(
                ::windows::core::Vtable::as_raw(this),
                ::core::mem::transmute_copy(propertyname),
                ::core::mem::transmute_copy(propertyinfo),
            )
            .ok()
        }
    }
    pub fn Close(&self) -> ::windows::core::Result<()> {
        let this = &::windows::core::Interface::cast::<::windows::Foundation::IClosable>(self)?;
        unsafe {
            (::windows::core::Vtable::vtable(this).Close)(::windows::core::Vtable::as_raw(this))
                .ok()
        }
    }
    pub fn Compositor(&self) -> ::windows::core::Result<Compositor> {
        let this = &::windows::core::Interface::cast::<ICompositionObject>(self)?;
        unsafe {
            let mut result__ = ::core::mem::MaybeUninit::zeroed();
            (::windows::core::Vtable::vtable(this).Compositor)(
                ::windows::core::Vtable::as_raw(this),
                result__.as_mut_ptr(),
            )
            .from_abi::<Compositor>(result__)
        }
    }
    pub fn Properties(&self) -> ::windows::core::Result<CompositionPropertySet> {
        let this = &::windows::core::Interface::cast::<ICompositionObject>(self)?;
        unsafe {
            let mut result__ = ::core::mem::MaybeUninit::zeroed();
            (::windows::core::Vtable::vtable(this).Properties)(
                ::windows::core::Vtable::as_raw(this),
                result__.as_mut_ptr(),
            )
            .from_abi::<CompositionPropertySet>(result__)
        }
    }
    pub fn StartAnimation<'a, P0>(
        &self,
        propertyname: &::windows::core::HSTRING,
        animation: P0,
    ) -> ::windows::core::Result<()>
    where
        P0: ::std::convert::Into<::windows::core::InParam<'a, CompositionAnimation>>,
    {
        let this = &::windows::core::Interface::cast::<ICompositionObject>(self)?;
        unsafe {
            (::windows::core::Vtable::vtable(this).StartAnimation)(
                ::windows::core::Vtable::as_raw(this),
                ::core::mem::transmute_copy(propertyname),
                animation.into().abi(),
            )
            .ok()
        }
    }
    pub fn StopAnimation(
        &self,
        propertyname: &::windows::core::HSTRING,
    ) -> ::windows::core::Result<()> {
        let this = &::windows::core::Interface::cast::<ICompositionObject>(self)?;
        unsafe {
            (::windows::core::Vtable::vtable(this).StopAnimation)(
                ::windows::core::Vtable::as_raw(this),
                ::core::mem::transmute_copy(propertyname),
            )
            .ok()
        }
    }
    pub fn Comment(&self) -> ::windows::core::Result<::windows::core::HSTRING> {
        let this = &::windows::core::Interface::cast::<ICompositionObject2>(self)?;
        unsafe {
            let mut result__ = ::core::mem::MaybeUninit::zeroed();
            (::windows::core::Vtable::vtable(this).Comment)(
                ::windows::core::Vtable::as_raw(this),
                result__.as_mut_ptr(),
            )
            .from_abi::<::windows::core::HSTRING>(result__)
        }
    }
    pub fn SetComment(&self, value: &::windows::core::HSTRING) -> ::windows::core::Result<()> {
        let this = &::windows::core::Interface::cast::<ICompositionObject2>(self)?;
        unsafe {
            (::windows::core::Vtable::vtable(this).SetComment)(
                ::windows::core::Vtable::as_raw(this),
                ::core::mem::transmute_copy(value),
            )
            .ok()
        }
    }
    pub fn ImplicitAnimations(&self) -> ::windows::core::Result<ImplicitAnimationCollection> {
        let this = &::windows::core::Interface::cast::<ICompositionObject2>(self)?;
        unsafe {
            let mut result__ = ::core::mem::MaybeUninit::zeroed();
            (::windows::core::Vtable::vtable(this).ImplicitAnimations)(
                ::windows::core::Vtable::as_raw(this),
                result__.as_mut_ptr(),
            )
            .from_abi::<ImplicitAnimationCollection>(result__)
        }
    }
    pub fn SetImplicitAnimations(
        &self,
        value: &ImplicitAnimationCollection,
    ) -> ::windows::core::Result<()> {
        let this = &::windows::core::Interface::cast::<ICompositionObject2>(self)?;
        unsafe {
            (::windows::core::Vtable::vtable(this).SetImplicitAnimations)(
                ::windows::core::Vtable::as_raw(this),
                ::core::mem::transmute_copy(value),
            )
            .ok()
        }
    }
    pub fn StartAnimationGroup<'a, P0, E0>(&self, value: P0) -> ::windows::core::Result<()>
    where
        P0: ::std::convert::TryInto<
            ::windows::core::InParam<'a, ICompositionAnimationBase>,
            Error = E0,
        >,
        E0: ::std::convert::Into<::windows::core::Error>,
    {
        let this = &::windows::core::Interface::cast::<ICompositionObject2>(self)?;
        unsafe {
            (::windows::core::Vtable::vtable(this).StartAnimationGroup)(
                ::windows::core::Vtable::as_raw(this),
                value.try_into().map_err(|e| e.into())?.abi(),
            )
            .ok()
        }
    }
    pub fn StopAnimationGroup<'a, P0, E0>(&self, value: P0) -> ::windows::core::Result<()>
    where
        P0: ::std::convert::TryInto<
            ::windows::core::InParam<'a, ICompositionAnimationBase>,
            Error = E0,
        >,
        E0: ::std::convert::Into<::windows::core::Error>,
    {
        let this = &::windows::core::Interface::cast::<ICompositionObject2>(self)?;
        unsafe {
            (::windows::core::Vtable::vtable(this).StopAnimationGroup)(
                ::windows::core::Vtable::as_raw(this),
                value.try_into().map_err(|e| e.into())?.abi(),
            )
            .ok()
        }
    }
    #[doc = "*Required features: `\"UI_Dispatching\"`*"]
    #[cfg(feature = "UI_Dispatching")]
    pub fn DispatcherQueue(&self) -> ::windows::core::Result<super::Dispatching::DispatcherQueue> {
        let this = &::windows::core::Interface::cast::<ICompositionObject3>(self)?;
        unsafe {
            let mut result__ = ::core::mem::MaybeUninit::zeroed();
            (::windows::core::Vtable::vtable(this).DispatcherQueue)(
                ::windows::core::Vtable::as_raw(this),
                result__.as_mut_ptr(),
            )
            .from_abi::<super::Dispatching::DispatcherQueue>(result__)
        }
    }
    pub fn TryGetAnimationController(
        &self,
        propertyname: &::windows::core::HSTRING,
    ) -> ::windows::core::Result<AnimationController> {
        let this = &::windows::core::Interface::cast::<ICompositionObject4>(self)?;
        unsafe {
            let mut result__ = ::core::mem::MaybeUninit::zeroed();
            (::windows::core::Vtable::vtable(this).TryGetAnimationController)(
                ::windows::core::Vtable::as_raw(this),
                ::core::mem::transmute_copy(propertyname),
                result__.as_mut_ptr(),
            )
            .from_abi::<AnimationController>(result__)
        }
    }
    pub fn StartAnimationWithController<'a, P0>(
        &self,
        propertyname: &::windows::core::HSTRING,
        animation: P0,
        animationcontroller: &AnimationController,
    ) -> ::windows::core::Result<()>
    where
        P0: ::std::convert::Into<::windows::core::InParam<'a, CompositionAnimation>>,
    {
        let this = &::windows::core::Interface::cast::<ICompositionObject5>(self)?;
        unsafe {
            (::windows::core::Vtable::vtable(this).StartAnimationWithController)(
                ::windows::core::Vtable::as_raw(this),
                ::core::mem::transmute_copy(propertyname),
                animation.into().abi(),
                ::core::mem::transmute_copy(animationcontroller),
            )
            .ok()
        }
    }
    pub fn First(
        &self,
    ) -> ::windows::core::Result<
        ::windows::Foundation::Collections::IIterator<
            ::windows::Foundation::Collections::IKeyValuePair<
                ::windows::core::HSTRING,
                ICompositionAnimationBase,
            >,
        >,
    > {
        let this = &::windows::core::Interface::cast::<
            ::windows::Foundation::Collections::IIterable<
                ::windows::Foundation::Collections::IKeyValuePair<
                    ::windows::core::HSTRING,
                    ICompositionAnimationBase,
                >,
            >,
        >(self)?;
        unsafe {
            let mut result__ = ::core::mem::MaybeUninit::zeroed();
            (::windows::core::Vtable::vtable(this).First)(
                ::windows::core::Vtable::as_raw(this),
                result__.as_mut_ptr(),
            )
            .from_abi::<::windows::Foundation::Collections::IIterator<
                ::windows::Foundation::Collections::IKeyValuePair<
                    ::windows::core::HSTRING,
                    ICompositionAnimationBase,
                >,
            >>(result__)
        }
    }
    pub fn Lookup(
        &self,
        key: &::windows::core::HSTRING,
    ) -> ::windows::core::Result<ICompositionAnimationBase> {
        let this = &::windows::core::Interface::cast::<
            ::windows::Foundation::Collections::IMap<
                ::windows::core::HSTRING,
                ICompositionAnimationBase,
            >,
        >(self)?;
        unsafe {
            let mut result__ = ::core::mem::MaybeUninit::zeroed();
            (::windows::core::Vtable::vtable(this).Lookup)(
                ::windows::core::Vtable::as_raw(this),
                ::core::mem::transmute_copy(key),
                result__.as_mut_ptr(),
            )
            .from_abi::<ICompositionAnimationBase>(result__)
        }
    }
    pub fn Size(&self) -> ::windows::core::Result<u32> {
        let this = &::windows::core::Interface::cast::<
            ::windows::Foundation::Collections::IMap<
                ::windows::core::HSTRING,
                ICompositionAnimationBase,
            >,
        >(self)?;
        unsafe {
            let mut result__ = ::core::mem::MaybeUninit::zeroed();
            (::windows::core::Vtable::vtable(this).Size)(
                ::windows::core::Vtable::as_raw(this),
                result__.as_mut_ptr(),
            )
            .from_abi::<u32>(result__)
        }
    }
    pub fn HasKey(&self, key: &::windows::core::HSTRING) -> ::windows::core::Result<bool> {
        let this = &::windows::core::Interface::cast::<
            ::windows::Foundation::Collections::IMap<
                ::windows::core::HSTRING,
                ICompositionAnimationBase,
            >,
        >(self)?;
        unsafe {
            let mut result__ = ::core::mem::MaybeUninit::zeroed();
            (::windows::core::Vtable::vtable(this).HasKey)(
                ::windows::core::Vtable::as_raw(this),
                ::core::mem::transmute_copy(key),
                result__.as_mut_ptr(),
            )
            .from_abi::<bool>(result__)
        }
    }
    pub fn GetView(
        &self,
    ) -> ::windows::core::Result<
        ::windows::Foundation::Collections::IMapView<
            ::windows::core::HSTRING,
            ICompositionAnimationBase,
        >,
    > {
        let this = &::windows::core::Interface::cast::<
            ::windows::Foundation::Collections::IMap<
                ::windows::core::HSTRING,
                ICompositionAnimationBase,
            >,
        >(self)?;
        unsafe {
            let mut result__ = ::core::mem::MaybeUninit::zeroed();
            (::windows::core::Vtable::vtable(this).GetView)(
                ::windows::core::Vtable::as_raw(this),
                result__.as_mut_ptr(),
            )
            .from_abi::<::windows::Foundation::Collections::IMapView<
                ::windows::core::HSTRING,
                ICompositionAnimationBase,
            >>(result__)
        }
    }
    pub fn Insert<'a, P0, E0>(
        &self,
        key: &::windows::core::HSTRING,
        value: P0,
    ) -> ::windows::core::Result<bool>
    where
        P0: ::std::convert::TryInto<
            ::windows::core::InParam<'a, ICompositionAnimationBase>,
            Error = E0,
        >,
        E0: ::std::convert::Into<::windows::core::Error>,
    {
        let this = &::windows::core::Interface::cast::<
            ::windows::Foundation::Collections::IMap<
                ::windows::core::HSTRING,
                ICompositionAnimationBase,
            >,
        >(self)?;
        unsafe {
            let mut result__ = ::core::mem::MaybeUninit::zeroed();
            (::windows::core::Vtable::vtable(this).Insert)(
                ::windows::core::Vtable::as_raw(this),
                ::core::mem::transmute_copy(key),
                value.try_into().map_err(|e| e.into())?.abi(),
                result__.as_mut_ptr(),
            )
            .from_abi::<bool>(result__)
        }
    }
    pub fn Remove(&self, key: &::windows::core::HSTRING) -> ::windows::core::Result<()> {
        let this = &::windows::core::Interface::cast::<
            ::windows::Foundation::Collections::IMap<
                ::windows::core::HSTRING,
                ICompositionAnimationBase,
            >,
        >(self)?;
        unsafe {
            (::windows::core::Vtable::vtable(this).Remove)(
                ::windows::core::Vtable::as_raw(this),
                ::core::mem::transmute_copy(key),
            )
            .ok()
        }
    }
    pub fn Clear(&self) -> ::windows::core::Result<()> {
        let this = &::windows::core::Interface::cast::<
            ::windows::Foundation::Collections::IMap<
                ::windows::core::HSTRING,
                ICompositionAnimationBase,
            >,
        >(self)?;
        unsafe {
            (::windows::core::Vtable::vtable(this).Clear)(::windows::core::Vtable::as_raw(this))
                .ok()
        }
    }
}
impl ::core::clone::Clone for ImplicitAnimationCollection {
    fn clone(&self) -> Self {
        Self(self.0.clone())
    }
}
impl ::core::cmp::PartialEq for ImplicitAnimationCollection {
    fn eq(&self, other: &Self) -> bool {
        self.0 == other.0
    }
}
impl ::core::cmp::Eq for ImplicitAnimationCollection {}
impl ::core::fmt::Debug for ImplicitAnimationCollection {
    fn fmt(&self, f: &mut ::core::fmt::Formatter<'_>) -> ::core::fmt::Result {
        f.debug_tuple("ImplicitAnimationCollection").field(&self.0).finish()
    }
}
unsafe impl ::windows::core::RuntimeType for ImplicitAnimationCollection {
    const SIGNATURE : ::windows::core::ConstBuffer = ::windows::core::ConstBuffer::from_slice ( b"rc(Microsoft.UI.Composition.ImplicitAnimationCollection;{c5c0689e-f5ae-5bed-829b-c522cda39717})" ) ;
    type DefaultType = ::core::option::Option<Self>;
    fn from_default(from: &Self::DefaultType) -> ::windows::core::Result<Self> {
        from.as_ref().cloned().ok_or(::windows::core::Error::OK)
    }
}
unsafe impl ::windows::core::Vtable for ImplicitAnimationCollection {
    type Vtable = IImplicitAnimationCollection_Vtbl;
}
unsafe impl ::windows::core::Interface for ImplicitAnimationCollection {
    const IID: ::windows::core::GUID =
        <IImplicitAnimationCollection as ::windows::core::Interface>::IID;
}
impl ::windows::core::RuntimeName for ImplicitAnimationCollection {
    const NAME: &'static str = "Microsoft.UI.Composition.ImplicitAnimationCollection";
}
impl ::core::iter::IntoIterator for ImplicitAnimationCollection {
    type Item = ::windows::Foundation::Collections::IKeyValuePair<
        ::windows::core::HSTRING,
        ICompositionAnimationBase,
    >;
    type IntoIter = ::windows::Foundation::Collections::IIterator<Self::Item>;
    fn into_iter(self) -> Self::IntoIter {
        ::core::iter::IntoIterator::into_iter(&self)
    }
}
impl ::core::iter::IntoIterator for &ImplicitAnimationCollection {
    type Item = ::windows::Foundation::Collections::IKeyValuePair<
        ::windows::core::HSTRING,
        ICompositionAnimationBase,
    >;
    type IntoIter = ::windows::Foundation::Collections::IIterator<Self::Item>;
    fn into_iter(self) -> Self::IntoIter {
        self.First().unwrap()
    }
}
::windows::core::interface_hierarchy!(
    ImplicitAnimationCollection,
    ::windows::core::IUnknown,
    ::windows::core::IInspectable
);
impl ::core::convert::TryFrom<ImplicitAnimationCollection> for IAnimationObject {
    type Error = ::windows::core::Error;
    fn try_from(value: ImplicitAnimationCollection) -> ::windows::core::Result<Self> {
        ::core::convert::TryFrom::try_from(&value)
    }
}
impl ::core::convert::TryFrom<&ImplicitAnimationCollection> for IAnimationObject {
    type Error = ::windows::core::Error;
    fn try_from(value: &ImplicitAnimationCollection) -> ::windows::core::Result<Self> {
        ::windows::core::Interface::cast(value)
    }
}
impl<'a> ::core::convert::TryFrom<&ImplicitAnimationCollection>
    for ::windows::core::InParam<'a, IAnimationObject>
{
    type Error = ::windows::core::Error;
    fn try_from(value: &ImplicitAnimationCollection) -> ::windows::core::Result<Self> {
        let item = ::std::convert::TryInto::try_into(value)?;
        Ok(::windows::core::InParam::owned(item))
    }
}
impl ::core::convert::TryFrom<ImplicitAnimationCollection> for ::windows::Foundation::IClosable {
    type Error = ::windows::core::Error;
    fn try_from(value: ImplicitAnimationCollection) -> ::windows::core::Result<Self> {
        ::core::convert::TryFrom::try_from(&value)
    }
}
impl ::core::convert::TryFrom<&ImplicitAnimationCollection> for ::windows::Foundation::IClosable {
    type Error = ::windows::core::Error;
    fn try_from(value: &ImplicitAnimationCollection) -> ::windows::core::Result<Self> {
        ::windows::core::Interface::cast(value)
    }
}
impl<'a> ::core::convert::TryFrom<&ImplicitAnimationCollection>
    for ::windows::core::InParam<'a, ::windows::Foundation::IClosable>
{
    type Error = ::windows::core::Error;
    fn try_from(value: &ImplicitAnimationCollection) -> ::windows::core::Result<Self> {
        let item = ::std::convert::TryInto::try_into(value)?;
        Ok(::windows::core::InParam::owned(item))
    }
}
impl ::core::convert::TryFrom<ImplicitAnimationCollection>
    for ::windows::Foundation::Collections::IIterable<
        ::windows::Foundation::Collections::IKeyValuePair<
            ::windows::core::HSTRING,
            ICompositionAnimationBase,
        >,
    >
{
    type Error = ::windows::core::Error;
    fn try_from(value: ImplicitAnimationCollection) -> ::windows::core::Result<Self> {
        ::core::convert::TryFrom::try_from(&value)
    }
}
impl ::core::convert::TryFrom<&ImplicitAnimationCollection>
    for ::windows::Foundation::Collections::IIterable<
        ::windows::Foundation::Collections::IKeyValuePair<
            ::windows::core::HSTRING,
            ICompositionAnimationBase,
        >,
    >
{
    type Error = ::windows::core::Error;
    fn try_from(value: &ImplicitAnimationCollection) -> ::windows::core::Result<Self> {
        ::windows::core::Interface::cast(value)
    }
}
impl<'a> ::core::convert::TryFrom<&ImplicitAnimationCollection>
    for ::windows::core::InParam<
        'a,
        ::windows::Foundation::Collections::IIterable<
            ::windows::Foundation::Collections::IKeyValuePair<
                ::windows::core::HSTRING,
                ICompositionAnimationBase,
            >,
        >,
    >
{
    type Error = ::windows::core::Error;
    fn try_from(value: &ImplicitAnimationCollection) -> ::windows::core::Result<Self> {
        let item = ::std::convert::TryInto::try_into(value)?;
        Ok(::windows::core::InParam::owned(item))
    }
}
impl ::core::convert::TryFrom<ImplicitAnimationCollection>
    for ::windows::Foundation::Collections::IMap<
        ::windows::core::HSTRING,
        ICompositionAnimationBase,
    >
{
    type Error = ::windows::core::Error;
    fn try_from(value: ImplicitAnimationCollection) -> ::windows::core::Result<Self> {
        ::core::convert::TryFrom::try_from(&value)
    }
}
impl ::core::convert::TryFrom<&ImplicitAnimationCollection>
    for ::windows::Foundation::Collections::IMap<
        ::windows::core::HSTRING,
        ICompositionAnimationBase,
    >
{
    type Error = ::windows::core::Error;
    fn try_from(value: &ImplicitAnimationCollection) -> ::windows::core::Result<Self> {
        ::windows::core::Interface::cast(value)
    }
}
impl<'a> ::core::convert::TryFrom<&ImplicitAnimationCollection>
    for ::windows::core::InParam<
        'a,
        ::windows::Foundation::Collections::IMap<
            ::windows::core::HSTRING,
            ICompositionAnimationBase,
        >,
    >
{
    type Error = ::windows::core::Error;
    fn try_from(value: &ImplicitAnimationCollection) -> ::windows::core::Result<Self> {
        let item = ::std::convert::TryInto::try_into(value)?;
        Ok(::windows::core::InParam::owned(item))
    }
}
impl ::core::convert::From<ImplicitAnimationCollection> for CompositionObject {
    fn from(value: ImplicitAnimationCollection) -> Self {
        ::core::convert::From::from(&value)
    }
}
impl ::core::convert::From<&ImplicitAnimationCollection> for CompositionObject {
    fn from(value: &ImplicitAnimationCollection) -> Self {
        ::windows::core::Interface::cast(value).unwrap()
    }
}
impl<'a> ::core::convert::From<&ImplicitAnimationCollection>
    for ::windows::core::InParam<'a, CompositionObject>
{
    fn from(value: &ImplicitAnimationCollection) -> Self {
        ::windows::core::InParam::owned(value.into())
    }
}
unsafe impl ::core::marker::Send for ImplicitAnimationCollection {}
unsafe impl ::core::marker::Sync for ImplicitAnimationCollection {}
#[doc = "*Required features: `\"UI_Composition\"`*"]
#[repr(transparent)]
pub struct InitialValueExpressionCollection(::windows::core::IUnknown);
impl InitialValueExpressionCollection {
    pub fn PopulatePropertyInfo(
        &self,
        propertyname: &::windows::core::HSTRING,
        propertyinfo: &AnimationPropertyInfo,
    ) -> ::windows::core::Result<()> {
        let this = &::windows::core::Interface::cast::<IAnimationObject>(self)?;
        unsafe {
            (::windows::core::Vtable::vtable(this).PopulatePropertyInfo)(
                ::windows::core::Vtable::as_raw(this),
                ::core::mem::transmute_copy(propertyname),
                ::core::mem::transmute_copy(propertyinfo),
            )
            .ok()
        }
    }
    pub fn Close(&self) -> ::windows::core::Result<()> {
        let this = &::windows::core::Interface::cast::<::windows::Foundation::IClosable>(self)?;
        unsafe {
            (::windows::core::Vtable::vtable(this).Close)(::windows::core::Vtable::as_raw(this))
                .ok()
        }
    }
    pub fn Compositor(&self) -> ::windows::core::Result<Compositor> {
        let this = &::windows::core::Interface::cast::<ICompositionObject>(self)?;
        unsafe {
            let mut result__ = ::core::mem::MaybeUninit::zeroed();
            (::windows::core::Vtable::vtable(this).Compositor)(
                ::windows::core::Vtable::as_raw(this),
                result__.as_mut_ptr(),
            )
            .from_abi::<Compositor>(result__)
        }
    }
    pub fn Properties(&self) -> ::windows::core::Result<CompositionPropertySet> {
        let this = &::windows::core::Interface::cast::<ICompositionObject>(self)?;
        unsafe {
            let mut result__ = ::core::mem::MaybeUninit::zeroed();
            (::windows::core::Vtable::vtable(this).Properties)(
                ::windows::core::Vtable::as_raw(this),
                result__.as_mut_ptr(),
            )
            .from_abi::<CompositionPropertySet>(result__)
        }
    }
    pub fn StartAnimation<'a, P0>(
        &self,
        propertyname: &::windows::core::HSTRING,
        animation: P0,
    ) -> ::windows::core::Result<()>
    where
        P0: ::std::convert::Into<::windows::core::InParam<'a, CompositionAnimation>>,
    {
        let this = &::windows::core::Interface::cast::<ICompositionObject>(self)?;
        unsafe {
            (::windows::core::Vtable::vtable(this).StartAnimation)(
                ::windows::core::Vtable::as_raw(this),
                ::core::mem::transmute_copy(propertyname),
                animation.into().abi(),
            )
            .ok()
        }
    }
    pub fn StopAnimation(
        &self,
        propertyname: &::windows::core::HSTRING,
    ) -> ::windows::core::Result<()> {
        let this = &::windows::core::Interface::cast::<ICompositionObject>(self)?;
        unsafe {
            (::windows::core::Vtable::vtable(this).StopAnimation)(
                ::windows::core::Vtable::as_raw(this),
                ::core::mem::transmute_copy(propertyname),
            )
            .ok()
        }
    }
    pub fn Comment(&self) -> ::windows::core::Result<::windows::core::HSTRING> {
        let this = &::windows::core::Interface::cast::<ICompositionObject2>(self)?;
        unsafe {
            let mut result__ = ::core::mem::MaybeUninit::zeroed();
            (::windows::core::Vtable::vtable(this).Comment)(
                ::windows::core::Vtable::as_raw(this),
                result__.as_mut_ptr(),
            )
            .from_abi::<::windows::core::HSTRING>(result__)
        }
    }
    pub fn SetComment(&self, value: &::windows::core::HSTRING) -> ::windows::core::Result<()> {
        let this = &::windows::core::Interface::cast::<ICompositionObject2>(self)?;
        unsafe {
            (::windows::core::Vtable::vtable(this).SetComment)(
                ::windows::core::Vtable::as_raw(this),
                ::core::mem::transmute_copy(value),
            )
            .ok()
        }
    }
    pub fn ImplicitAnimations(&self) -> ::windows::core::Result<ImplicitAnimationCollection> {
        let this = &::windows::core::Interface::cast::<ICompositionObject2>(self)?;
        unsafe {
            let mut result__ = ::core::mem::MaybeUninit::zeroed();
            (::windows::core::Vtable::vtable(this).ImplicitAnimations)(
                ::windows::core::Vtable::as_raw(this),
                result__.as_mut_ptr(),
            )
            .from_abi::<ImplicitAnimationCollection>(result__)
        }
    }
    pub fn SetImplicitAnimations(
        &self,
        value: &ImplicitAnimationCollection,
    ) -> ::windows::core::Result<()> {
        let this = &::windows::core::Interface::cast::<ICompositionObject2>(self)?;
        unsafe {
            (::windows::core::Vtable::vtable(this).SetImplicitAnimations)(
                ::windows::core::Vtable::as_raw(this),
                ::core::mem::transmute_copy(value),
            )
            .ok()
        }
    }
    pub fn StartAnimationGroup<'a, P0, E0>(&self, value: P0) -> ::windows::core::Result<()>
    where
        P0: ::std::convert::TryInto<
            ::windows::core::InParam<'a, ICompositionAnimationBase>,
            Error = E0,
        >,
        E0: ::std::convert::Into<::windows::core::Error>,
    {
        let this = &::windows::core::Interface::cast::<ICompositionObject2>(self)?;
        unsafe {
            (::windows::core::Vtable::vtable(this).StartAnimationGroup)(
                ::windows::core::Vtable::as_raw(this),
                value.try_into().map_err(|e| e.into())?.abi(),
            )
            .ok()
        }
    }
    pub fn StopAnimationGroup<'a, P0, E0>(&self, value: P0) -> ::windows::core::Result<()>
    where
        P0: ::std::convert::TryInto<
            ::windows::core::InParam<'a, ICompositionAnimationBase>,
            Error = E0,
        >,
        E0: ::std::convert::Into<::windows::core::Error>,
    {
        let this = &::windows::core::Interface::cast::<ICompositionObject2>(self)?;
        unsafe {
            (::windows::core::Vtable::vtable(this).StopAnimationGroup)(
                ::windows::core::Vtable::as_raw(this),
                value.try_into().map_err(|e| e.into())?.abi(),
            )
            .ok()
        }
    }
    #[doc = "*Required features: `\"UI_Dispatching\"`*"]
    #[cfg(feature = "UI_Dispatching")]
    pub fn DispatcherQueue(&self) -> ::windows::core::Result<super::Dispatching::DispatcherQueue> {
        let this = &::windows::core::Interface::cast::<ICompositionObject3>(self)?;
        unsafe {
            let mut result__ = ::core::mem::MaybeUninit::zeroed();
            (::windows::core::Vtable::vtable(this).DispatcherQueue)(
                ::windows::core::Vtable::as_raw(this),
                result__.as_mut_ptr(),
            )
            .from_abi::<super::Dispatching::DispatcherQueue>(result__)
        }
    }
    pub fn TryGetAnimationController(
        &self,
        propertyname: &::windows::core::HSTRING,
    ) -> ::windows::core::Result<AnimationController> {
        let this = &::windows::core::Interface::cast::<ICompositionObject4>(self)?;
        unsafe {
            let mut result__ = ::core::mem::MaybeUninit::zeroed();
            (::windows::core::Vtable::vtable(this).TryGetAnimationController)(
                ::windows::core::Vtable::as_raw(this),
                ::core::mem::transmute_copy(propertyname),
                result__.as_mut_ptr(),
            )
            .from_abi::<AnimationController>(result__)
        }
    }
    pub fn StartAnimationWithController<'a, P0>(
        &self,
        propertyname: &::windows::core::HSTRING,
        animation: P0,
        animationcontroller: &AnimationController,
    ) -> ::windows::core::Result<()>
    where
        P0: ::std::convert::Into<::windows::core::InParam<'a, CompositionAnimation>>,
    {
        let this = &::windows::core::Interface::cast::<ICompositionObject5>(self)?;
        unsafe {
            (::windows::core::Vtable::vtable(this).StartAnimationWithController)(
                ::windows::core::Vtable::as_raw(this),
                ::core::mem::transmute_copy(propertyname),
                animation.into().abi(),
                ::core::mem::transmute_copy(animationcontroller),
            )
            .ok()
        }
    }
    pub fn First(
        &self,
    ) -> ::windows::core::Result<
        ::windows::Foundation::Collections::IIterator<
            ::windows::Foundation::Collections::IKeyValuePair<
                ::windows::core::HSTRING,
                ::windows::core::HSTRING,
            >,
        >,
    > {
        let this = &::windows::core::Interface::cast::<
            ::windows::Foundation::Collections::IIterable<
                ::windows::Foundation::Collections::IKeyValuePair<
                    ::windows::core::HSTRING,
                    ::windows::core::HSTRING,
                >,
            >,
        >(self)?;
        unsafe {
            let mut result__ = ::core::mem::MaybeUninit::zeroed();
            (::windows::core::Vtable::vtable(this).First)(
                ::windows::core::Vtable::as_raw(this),
                result__.as_mut_ptr(),
            )
            .from_abi::<::windows::Foundation::Collections::IIterator<
                ::windows::Foundation::Collections::IKeyValuePair<
                    ::windows::core::HSTRING,
                    ::windows::core::HSTRING,
                >,
            >>(result__)
        }
    }
    pub fn Lookup(
        &self,
        key: &::windows::core::HSTRING,
    ) -> ::windows::core::Result<::windows::core::HSTRING> {
        let this = self;
        unsafe {
            let mut result__ = ::core::mem::MaybeUninit::zeroed();
            (::windows::core::Vtable::vtable(this).Lookup)(
                ::windows::core::Vtable::as_raw(this),
                ::core::mem::transmute_copy(key),
                result__.as_mut_ptr(),
            )
            .from_abi::<::windows::core::HSTRING>(result__)
        }
    }
    pub fn Size(&self) -> ::windows::core::Result<u32> {
        let this = self;
        unsafe {
            let mut result__ = ::core::mem::MaybeUninit::zeroed();
            (::windows::core::Vtable::vtable(this).Size)(
                ::windows::core::Vtable::as_raw(this),
                result__.as_mut_ptr(),
            )
            .from_abi::<u32>(result__)
        }
    }
    pub fn HasKey(&self, key: &::windows::core::HSTRING) -> ::windows::core::Result<bool> {
        let this = self;
        unsafe {
            let mut result__ = ::core::mem::MaybeUninit::zeroed();
            (::windows::core::Vtable::vtable(this).HasKey)(
                ::windows::core::Vtable::as_raw(this),
                ::core::mem::transmute_copy(key),
                result__.as_mut_ptr(),
            )
            .from_abi::<bool>(result__)
        }
    }
    pub fn GetView(
        &self,
    ) -> ::windows::core::Result<
        ::windows::Foundation::Collections::IMapView<
            ::windows::core::HSTRING,
            ::windows::core::HSTRING,
        >,
    > {
        let this = self;
        unsafe {
            let mut result__ = ::core::mem::MaybeUninit::zeroed();
            (::windows::core::Vtable::vtable(this).GetView)(
                ::windows::core::Vtable::as_raw(this),
                result__.as_mut_ptr(),
            )
            .from_abi::<::windows::Foundation::Collections::IMapView<
                ::windows::core::HSTRING,
                ::windows::core::HSTRING,
            >>(result__)
        }
    }
    pub fn Insert(
        &self,
        key: &::windows::core::HSTRING,
        value: &::windows::core::HSTRING,
    ) -> ::windows::core::Result<bool> {
        let this = self;
        unsafe {
            let mut result__ = ::core::mem::MaybeUninit::zeroed();
            (::windows::core::Vtable::vtable(this).Insert)(
                ::windows::core::Vtable::as_raw(this),
                ::core::mem::transmute_copy(key),
                ::core::mem::transmute_copy(value),
                result__.as_mut_ptr(),
            )
            .from_abi::<bool>(result__)
        }
    }
    pub fn Remove(&self, key: &::windows::core::HSTRING) -> ::windows::core::Result<()> {
        let this = self;
        unsafe {
            (::windows::core::Vtable::vtable(this).Remove)(
                ::windows::core::Vtable::as_raw(this),
                ::core::mem::transmute_copy(key),
            )
            .ok()
        }
    }
    pub fn Clear(&self) -> ::windows::core::Result<()> {
        let this = self;
        unsafe {
            (::windows::core::Vtable::vtable(this).Clear)(::windows::core::Vtable::as_raw(this))
                .ok()
        }
    }
}
impl ::core::clone::Clone for InitialValueExpressionCollection {
    fn clone(&self) -> Self {
        Self(self.0.clone())
    }
}
impl ::core::cmp::PartialEq for InitialValueExpressionCollection {
    fn eq(&self, other: &Self) -> bool {
        self.0 == other.0
    }
}
impl ::core::cmp::Eq for InitialValueExpressionCollection {}
impl ::core::fmt::Debug for InitialValueExpressionCollection {
    fn fmt(&self, f: &mut ::core::fmt::Formatter<'_>) -> ::core::fmt::Result {
        f.debug_tuple("InitialValueExpressionCollection").field(&self.0).finish()
    }
}
unsafe impl ::windows::core::RuntimeType for InitialValueExpressionCollection {
    const SIGNATURE : ::windows::core::ConstBuffer = ::windows::core::ConstBuffer::from_slice ( b"rc(Microsoft.UI.Composition.InitialValueExpressionCollection;pinterface({3c2925fe-8519-45c1-aa79-197b6718c1c1};string;string))" ) ;
    type DefaultType = ::core::option::Option<Self>;
    fn from_default(from: &Self::DefaultType) -> ::windows::core::Result<Self> {
        from.as_ref().cloned().ok_or(::windows::core::Error::OK)
    }
}
unsafe impl ::windows::core::Vtable for InitialValueExpressionCollection {
    type Vtable = ::windows::Foundation::Collections::IMap_Vtbl<
        ::windows::core::HSTRING,
        ::windows::core::HSTRING,
    >;
}
unsafe impl ::windows::core::Interface for InitialValueExpressionCollection {
    const IID: ::windows::core::GUID = <::windows::Foundation::Collections::IMap<
        ::windows::core::HSTRING,
        ::windows::core::HSTRING,
    > as ::windows::core::Interface>::IID;
}
impl ::windows::core::RuntimeName for InitialValueExpressionCollection {
    const NAME: &'static str = "Microsoft.UI.Composition.InitialValueExpressionCollection";
}
impl ::core::iter::IntoIterator for InitialValueExpressionCollection {
    type Item = ::windows::Foundation::Collections::IKeyValuePair<
        ::windows::core::HSTRING,
        ::windows::core::HSTRING,
    >;
    type IntoIter = ::windows::Foundation::Collections::IIterator<Self::Item>;
    fn into_iter(self) -> Self::IntoIter {
        ::core::iter::IntoIterator::into_iter(&self)
    }
}
impl ::core::iter::IntoIterator for &InitialValueExpressionCollection {
    type Item = ::windows::Foundation::Collections::IKeyValuePair<
        ::windows::core::HSTRING,
        ::windows::core::HSTRING,
    >;
    type IntoIter = ::windows::Foundation::Collections::IIterator<Self::Item>;
    fn into_iter(self) -> Self::IntoIter {
        self.First().unwrap()
    }
}
::windows::core::interface_hierarchy!(
    InitialValueExpressionCollection,
    ::windows::core::IUnknown,
    ::windows::core::IInspectable
);
impl ::core::convert::TryFrom<InitialValueExpressionCollection> for IAnimationObject {
    type Error = ::windows::core::Error;
    fn try_from(value: InitialValueExpressionCollection) -> ::windows::core::Result<Self> {
        ::core::convert::TryFrom::try_from(&value)
    }
}
impl ::core::convert::TryFrom<&InitialValueExpressionCollection> for IAnimationObject {
    type Error = ::windows::core::Error;
    fn try_from(value: &InitialValueExpressionCollection) -> ::windows::core::Result<Self> {
        ::windows::core::Interface::cast(value)
    }
}
impl<'a> ::core::convert::TryFrom<&InitialValueExpressionCollection>
    for ::windows::core::InParam<'a, IAnimationObject>
{
    type Error = ::windows::core::Error;
    fn try_from(value: &InitialValueExpressionCollection) -> ::windows::core::Result<Self> {
        let item = ::std::convert::TryInto::try_into(value)?;
        Ok(::windows::core::InParam::owned(item))
    }
}
impl ::core::convert::TryFrom<InitialValueExpressionCollection>
    for ::windows::Foundation::IClosable
{
    type Error = ::windows::core::Error;
    fn try_from(value: InitialValueExpressionCollection) -> ::windows::core::Result<Self> {
        ::core::convert::TryFrom::try_from(&value)
    }
}
impl ::core::convert::TryFrom<&InitialValueExpressionCollection>
    for ::windows::Foundation::IClosable
{
    type Error = ::windows::core::Error;
    fn try_from(value: &InitialValueExpressionCollection) -> ::windows::core::Result<Self> {
        ::windows::core::Interface::cast(value)
    }
}
impl<'a> ::core::convert::TryFrom<&InitialValueExpressionCollection>
    for ::windows::core::InParam<'a, ::windows::Foundation::IClosable>
{
    type Error = ::windows::core::Error;
    fn try_from(value: &InitialValueExpressionCollection) -> ::windows::core::Result<Self> {
        let item = ::std::convert::TryInto::try_into(value)?;
        Ok(::windows::core::InParam::owned(item))
    }
}
impl ::core::convert::TryFrom<InitialValueExpressionCollection>
    for ::windows::Foundation::Collections::IIterable<
        ::windows::Foundation::Collections::IKeyValuePair<
            ::windows::core::HSTRING,
            ::windows::core::HSTRING,
        >,
    >
{
    type Error = ::windows::core::Error;
    fn try_from(value: InitialValueExpressionCollection) -> ::windows::core::Result<Self> {
        ::core::convert::TryFrom::try_from(&value)
    }
}
impl ::core::convert::TryFrom<&InitialValueExpressionCollection>
    for ::windows::Foundation::Collections::IIterable<
        ::windows::Foundation::Collections::IKeyValuePair<
            ::windows::core::HSTRING,
            ::windows::core::HSTRING,
        >,
    >
{
    type Error = ::windows::core::Error;
    fn try_from(value: &InitialValueExpressionCollection) -> ::windows::core::Result<Self> {
        ::windows::core::Interface::cast(value)
    }
}
impl<'a> ::core::convert::TryFrom<&InitialValueExpressionCollection>
    for ::windows::core::InParam<
        'a,
        ::windows::Foundation::Collections::IIterable<
            ::windows::Foundation::Collections::IKeyValuePair<
                ::windows::core::HSTRING,
                ::windows::core::HSTRING,
            >,
        >,
    >
{
    type Error = ::windows::core::Error;
    fn try_from(value: &InitialValueExpressionCollection) -> ::windows::core::Result<Self> {
        let item = ::std::convert::TryInto::try_into(value)?;
        Ok(::windows::core::InParam::owned(item))
    }
}
impl ::core::convert::TryFrom<InitialValueExpressionCollection>
    for ::windows::Foundation::Collections::IMap<::windows::core::HSTRING, ::windows::core::HSTRING>
{
    type Error = ::windows::core::Error;
    fn try_from(value: InitialValueExpressionCollection) -> ::windows::core::Result<Self> {
        ::core::convert::TryFrom::try_from(&value)
    }
}
impl ::core::convert::TryFrom<&InitialValueExpressionCollection>
    for ::windows::Foundation::Collections::IMap<::windows::core::HSTRING, ::windows::core::HSTRING>
{
    type Error = ::windows::core::Error;
    fn try_from(value: &InitialValueExpressionCollection) -> ::windows::core::Result<Self> {
        ::windows::core::Interface::cast(value)
    }
}
impl<'a> ::core::convert::TryFrom<&InitialValueExpressionCollection>
    for ::windows::core::InParam<
        'a,
        ::windows::Foundation::Collections::IMap<
            ::windows::core::HSTRING,
            ::windows::core::HSTRING,
        >,
    >
{
    type Error = ::windows::core::Error;
    fn try_from(value: &InitialValueExpressionCollection) -> ::windows::core::Result<Self> {
        let item = ::std::convert::TryInto::try_into(value)?;
        Ok(::windows::core::InParam::owned(item))
    }
}
impl ::core::convert::From<InitialValueExpressionCollection> for CompositionObject {
    fn from(value: InitialValueExpressionCollection) -> Self {
        ::core::convert::From::from(&value)
    }
}
impl ::core::convert::From<&InitialValueExpressionCollection> for CompositionObject {
    fn from(value: &InitialValueExpressionCollection) -> Self {
        ::windows::core::Interface::cast(value).unwrap()
    }
}
impl<'a> ::core::convert::From<&InitialValueExpressionCollection>
    for ::windows::core::InParam<'a, CompositionObject>
{
    fn from(value: &InitialValueExpressionCollection) -> Self {
        ::windows::core::InParam::owned(value.into())
    }
}
unsafe impl ::core::marker::Send for InitialValueExpressionCollection {}
unsafe impl ::core::marker::Sync for InitialValueExpressionCollection {}
#[doc = "*Required features: `\"UI_Composition\"`*"]
#[repr(transparent)]
pub struct InsetClip(::windows::core::IUnknown);
impl InsetClip {
    pub fn PopulatePropertyInfo(
        &self,
        propertyname: &::windows::core::HSTRING,
        propertyinfo: &AnimationPropertyInfo,
    ) -> ::windows::core::Result<()> {
        let this = &::windows::core::Interface::cast::<IAnimationObject>(self)?;
        unsafe {
            (::windows::core::Vtable::vtable(this).PopulatePropertyInfo)(
                ::windows::core::Vtable::as_raw(this),
                ::core::mem::transmute_copy(propertyname),
                ::core::mem::transmute_copy(propertyinfo),
            )
            .ok()
        }
    }
    pub fn Close(&self) -> ::windows::core::Result<()> {
        let this = &::windows::core::Interface::cast::<::windows::Foundation::IClosable>(self)?;
        unsafe {
            (::windows::core::Vtable::vtable(this).Close)(::windows::core::Vtable::as_raw(this))
                .ok()
        }
    }
    pub fn AnchorPoint(&self) -> ::windows::core::Result<::windows::Foundation::Numerics::Vector2> {
        let this = &::windows::core::Interface::cast::<ICompositionClip2>(self)?;
        unsafe {
            let mut result__ = ::core::mem::MaybeUninit::zeroed();
            (::windows::core::Vtable::vtable(this).AnchorPoint)(
                ::windows::core::Vtable::as_raw(this),
                result__.as_mut_ptr(),
            )
            .from_abi::<::windows::Foundation::Numerics::Vector2>(result__)
        }
    }
    pub fn SetAnchorPoint(
        &self,
        value: ::windows::Foundation::Numerics::Vector2,
    ) -> ::windows::core::Result<()> {
        let this = &::windows::core::Interface::cast::<ICompositionClip2>(self)?;
        unsafe {
            (::windows::core::Vtable::vtable(this).SetAnchorPoint)(
                ::windows::core::Vtable::as_raw(this),
                value,
            )
            .ok()
        }
    }
    pub fn CenterPoint(&self) -> ::windows::core::Result<::windows::Foundation::Numerics::Vector2> {
        let this = &::windows::core::Interface::cast::<ICompositionClip2>(self)?;
        unsafe {
            let mut result__ = ::core::mem::MaybeUninit::zeroed();
            (::windows::core::Vtable::vtable(this).CenterPoint)(
                ::windows::core::Vtable::as_raw(this),
                result__.as_mut_ptr(),
            )
            .from_abi::<::windows::Foundation::Numerics::Vector2>(result__)
        }
    }
    pub fn SetCenterPoint(
        &self,
        value: ::windows::Foundation::Numerics::Vector2,
    ) -> ::windows::core::Result<()> {
        let this = &::windows::core::Interface::cast::<ICompositionClip2>(self)?;
        unsafe {
            (::windows::core::Vtable::vtable(this).SetCenterPoint)(
                ::windows::core::Vtable::as_raw(this),
                value,
            )
            .ok()
        }
    }
    pub fn Offset(&self) -> ::windows::core::Result<::windows::Foundation::Numerics::Vector2> {
        let this = &::windows::core::Interface::cast::<ICompositionClip2>(self)?;
        unsafe {
            let mut result__ = ::core::mem::MaybeUninit::zeroed();
            (::windows::core::Vtable::vtable(this).Offset)(
                ::windows::core::Vtable::as_raw(this),
                result__.as_mut_ptr(),
            )
            .from_abi::<::windows::Foundation::Numerics::Vector2>(result__)
        }
    }
    pub fn SetOffset(
        &self,
        value: ::windows::Foundation::Numerics::Vector2,
    ) -> ::windows::core::Result<()> {
        let this = &::windows::core::Interface::cast::<ICompositionClip2>(self)?;
        unsafe {
            (::windows::core::Vtable::vtable(this).SetOffset)(
                ::windows::core::Vtable::as_raw(this),
                value,
            )
            .ok()
        }
    }
    pub fn RotationAngle(&self) -> ::windows::core::Result<f32> {
        let this = &::windows::core::Interface::cast::<ICompositionClip2>(self)?;
        unsafe {
            let mut result__ = ::core::mem::MaybeUninit::zeroed();
            (::windows::core::Vtable::vtable(this).RotationAngle)(
                ::windows::core::Vtable::as_raw(this),
                result__.as_mut_ptr(),
            )
            .from_abi::<f32>(result__)
        }
    }
    pub fn SetRotationAngle(&self, value: f32) -> ::windows::core::Result<()> {
        let this = &::windows::core::Interface::cast::<ICompositionClip2>(self)?;
        unsafe {
            (::windows::core::Vtable::vtable(this).SetRotationAngle)(
                ::windows::core::Vtable::as_raw(this),
                value,
            )
            .ok()
        }
    }
    pub fn RotationAngleInDegrees(&self) -> ::windows::core::Result<f32> {
        let this = &::windows::core::Interface::cast::<ICompositionClip2>(self)?;
        unsafe {
            let mut result__ = ::core::mem::MaybeUninit::zeroed();
            (::windows::core::Vtable::vtable(this).RotationAngleInDegrees)(
                ::windows::core::Vtable::as_raw(this),
                result__.as_mut_ptr(),
            )
            .from_abi::<f32>(result__)
        }
    }
    pub fn SetRotationAngleInDegrees(&self, value: f32) -> ::windows::core::Result<()> {
        let this = &::windows::core::Interface::cast::<ICompositionClip2>(self)?;
        unsafe {
            (::windows::core::Vtable::vtable(this).SetRotationAngleInDegrees)(
                ::windows::core::Vtable::as_raw(this),
                value,
            )
            .ok()
        }
    }
    pub fn Scale(&self) -> ::windows::core::Result<::windows::Foundation::Numerics::Vector2> {
        let this = &::windows::core::Interface::cast::<ICompositionClip2>(self)?;
        unsafe {
            let mut result__ = ::core::mem::MaybeUninit::zeroed();
            (::windows::core::Vtable::vtable(this).Scale)(
                ::windows::core::Vtable::as_raw(this),
                result__.as_mut_ptr(),
            )
            .from_abi::<::windows::Foundation::Numerics::Vector2>(result__)
        }
    }
    pub fn SetScale(
        &self,
        value: ::windows::Foundation::Numerics::Vector2,
    ) -> ::windows::core::Result<()> {
        let this = &::windows::core::Interface::cast::<ICompositionClip2>(self)?;
        unsafe {
            (::windows::core::Vtable::vtable(this).SetScale)(
                ::windows::core::Vtable::as_raw(this),
                value,
            )
            .ok()
        }
    }
    pub fn TransformMatrix(
        &self,
    ) -> ::windows::core::Result<::windows::Foundation::Numerics::Matrix3x2> {
        let this = &::windows::core::Interface::cast::<ICompositionClip2>(self)?;
        unsafe {
            let mut result__ = ::core::mem::MaybeUninit::zeroed();
            (::windows::core::Vtable::vtable(this).TransformMatrix)(
                ::windows::core::Vtable::as_raw(this),
                result__.as_mut_ptr(),
            )
            .from_abi::<::windows::Foundation::Numerics::Matrix3x2>(result__)
        }
    }
    pub fn SetTransformMatrix(
        &self,
        value: ::windows::Foundation::Numerics::Matrix3x2,
    ) -> ::windows::core::Result<()> {
        let this = &::windows::core::Interface::cast::<ICompositionClip2>(self)?;
        unsafe {
            (::windows::core::Vtable::vtable(this).SetTransformMatrix)(
                ::windows::core::Vtable::as_raw(this),
                value,
            )
            .ok()
        }
    }
    pub fn Compositor(&self) -> ::windows::core::Result<Compositor> {
        let this = &::windows::core::Interface::cast::<ICompositionObject>(self)?;
        unsafe {
            let mut result__ = ::core::mem::MaybeUninit::zeroed();
            (::windows::core::Vtable::vtable(this).Compositor)(
                ::windows::core::Vtable::as_raw(this),
                result__.as_mut_ptr(),
            )
            .from_abi::<Compositor>(result__)
        }
    }
    pub fn Properties(&self) -> ::windows::core::Result<CompositionPropertySet> {
        let this = &::windows::core::Interface::cast::<ICompositionObject>(self)?;
        unsafe {
            let mut result__ = ::core::mem::MaybeUninit::zeroed();
            (::windows::core::Vtable::vtable(this).Properties)(
                ::windows::core::Vtable::as_raw(this),
                result__.as_mut_ptr(),
            )
            .from_abi::<CompositionPropertySet>(result__)
        }
    }
    pub fn StartAnimation<'a, P0>(
        &self,
        propertyname: &::windows::core::HSTRING,
        animation: P0,
    ) -> ::windows::core::Result<()>
    where
        P0: ::std::convert::Into<::windows::core::InParam<'a, CompositionAnimation>>,
    {
        let this = &::windows::core::Interface::cast::<ICompositionObject>(self)?;
        unsafe {
            (::windows::core::Vtable::vtable(this).StartAnimation)(
                ::windows::core::Vtable::as_raw(this),
                ::core::mem::transmute_copy(propertyname),
                animation.into().abi(),
            )
            .ok()
        }
    }
    pub fn StopAnimation(
        &self,
        propertyname: &::windows::core::HSTRING,
    ) -> ::windows::core::Result<()> {
        let this = &::windows::core::Interface::cast::<ICompositionObject>(self)?;
        unsafe {
            (::windows::core::Vtable::vtable(this).StopAnimation)(
                ::windows::core::Vtable::as_raw(this),
                ::core::mem::transmute_copy(propertyname),
            )
            .ok()
        }
    }
    pub fn Comment(&self) -> ::windows::core::Result<::windows::core::HSTRING> {
        let this = &::windows::core::Interface::cast::<ICompositionObject2>(self)?;
        unsafe {
            let mut result__ = ::core::mem::MaybeUninit::zeroed();
            (::windows::core::Vtable::vtable(this).Comment)(
                ::windows::core::Vtable::as_raw(this),
                result__.as_mut_ptr(),
            )
            .from_abi::<::windows::core::HSTRING>(result__)
        }
    }
    pub fn SetComment(&self, value: &::windows::core::HSTRING) -> ::windows::core::Result<()> {
        let this = &::windows::core::Interface::cast::<ICompositionObject2>(self)?;
        unsafe {
            (::windows::core::Vtable::vtable(this).SetComment)(
                ::windows::core::Vtable::as_raw(this),
                ::core::mem::transmute_copy(value),
            )
            .ok()
        }
    }
    pub fn ImplicitAnimations(&self) -> ::windows::core::Result<ImplicitAnimationCollection> {
        let this = &::windows::core::Interface::cast::<ICompositionObject2>(self)?;
        unsafe {
            let mut result__ = ::core::mem::MaybeUninit::zeroed();
            (::windows::core::Vtable::vtable(this).ImplicitAnimations)(
                ::windows::core::Vtable::as_raw(this),
                result__.as_mut_ptr(),
            )
            .from_abi::<ImplicitAnimationCollection>(result__)
        }
    }
    pub fn SetImplicitAnimations(
        &self,
        value: &ImplicitAnimationCollection,
    ) -> ::windows::core::Result<()> {
        let this = &::windows::core::Interface::cast::<ICompositionObject2>(self)?;
        unsafe {
            (::windows::core::Vtable::vtable(this).SetImplicitAnimations)(
                ::windows::core::Vtable::as_raw(this),
                ::core::mem::transmute_copy(value),
            )
            .ok()
        }
    }
    pub fn StartAnimationGroup<'a, P0, E0>(&self, value: P0) -> ::windows::core::Result<()>
    where
        P0: ::std::convert::TryInto<
            ::windows::core::InParam<'a, ICompositionAnimationBase>,
            Error = E0,
        >,
        E0: ::std::convert::Into<::windows::core::Error>,
    {
        let this = &::windows::core::Interface::cast::<ICompositionObject2>(self)?;
        unsafe {
            (::windows::core::Vtable::vtable(this).StartAnimationGroup)(
                ::windows::core::Vtable::as_raw(this),
                value.try_into().map_err(|e| e.into())?.abi(),
            )
            .ok()
        }
    }
    pub fn StopAnimationGroup<'a, P0, E0>(&self, value: P0) -> ::windows::core::Result<()>
    where
        P0: ::std::convert::TryInto<
            ::windows::core::InParam<'a, ICompositionAnimationBase>,
            Error = E0,
        >,
        E0: ::std::convert::Into<::windows::core::Error>,
    {
        let this = &::windows::core::Interface::cast::<ICompositionObject2>(self)?;
        unsafe {
            (::windows::core::Vtable::vtable(this).StopAnimationGroup)(
                ::windows::core::Vtable::as_raw(this),
                value.try_into().map_err(|e| e.into())?.abi(),
            )
            .ok()
        }
    }
    #[doc = "*Required features: `\"UI_Dispatching\"`*"]
    #[cfg(feature = "UI_Dispatching")]
    pub fn DispatcherQueue(&self) -> ::windows::core::Result<super::Dispatching::DispatcherQueue> {
        let this = &::windows::core::Interface::cast::<ICompositionObject3>(self)?;
        unsafe {
            let mut result__ = ::core::mem::MaybeUninit::zeroed();
            (::windows::core::Vtable::vtable(this).DispatcherQueue)(
                ::windows::core::Vtable::as_raw(this),
                result__.as_mut_ptr(),
            )
            .from_abi::<super::Dispatching::DispatcherQueue>(result__)
        }
    }
    pub fn TryGetAnimationController(
        &self,
        propertyname: &::windows::core::HSTRING,
    ) -> ::windows::core::Result<AnimationController> {
        let this = &::windows::core::Interface::cast::<ICompositionObject4>(self)?;
        unsafe {
            let mut result__ = ::core::mem::MaybeUninit::zeroed();
            (::windows::core::Vtable::vtable(this).TryGetAnimationController)(
                ::windows::core::Vtable::as_raw(this),
                ::core::mem::transmute_copy(propertyname),
                result__.as_mut_ptr(),
            )
            .from_abi::<AnimationController>(result__)
        }
    }
    pub fn StartAnimationWithController<'a, P0>(
        &self,
        propertyname: &::windows::core::HSTRING,
        animation: P0,
        animationcontroller: &AnimationController,
    ) -> ::windows::core::Result<()>
    where
        P0: ::std::convert::Into<::windows::core::InParam<'a, CompositionAnimation>>,
    {
        let this = &::windows::core::Interface::cast::<ICompositionObject5>(self)?;
        unsafe {
            (::windows::core::Vtable::vtable(this).StartAnimationWithController)(
                ::windows::core::Vtable::as_raw(this),
                ::core::mem::transmute_copy(propertyname),
                animation.into().abi(),
                ::core::mem::transmute_copy(animationcontroller),
            )
            .ok()
        }
    }
    pub fn BottomInset(&self) -> ::windows::core::Result<f32> {
        let this = self;
        unsafe {
            let mut result__ = ::core::mem::MaybeUninit::zeroed();
            (::windows::core::Vtable::vtable(this).BottomInset)(
                ::windows::core::Vtable::as_raw(this),
                result__.as_mut_ptr(),
            )
            .from_abi::<f32>(result__)
        }
    }
    pub fn SetBottomInset(&self, value: f32) -> ::windows::core::Result<()> {
        let this = self;
        unsafe {
            (::windows::core::Vtable::vtable(this).SetBottomInset)(
                ::windows::core::Vtable::as_raw(this),
                value,
            )
            .ok()
        }
    }
    pub fn LeftInset(&self) -> ::windows::core::Result<f32> {
        let this = self;
        unsafe {
            let mut result__ = ::core::mem::MaybeUninit::zeroed();
            (::windows::core::Vtable::vtable(this).LeftInset)(
                ::windows::core::Vtable::as_raw(this),
                result__.as_mut_ptr(),
            )
            .from_abi::<f32>(result__)
        }
    }
    pub fn SetLeftInset(&self, value: f32) -> ::windows::core::Result<()> {
        let this = self;
        unsafe {
            (::windows::core::Vtable::vtable(this).SetLeftInset)(
                ::windows::core::Vtable::as_raw(this),
                value,
            )
            .ok()
        }
    }
    pub fn RightInset(&self) -> ::windows::core::Result<f32> {
        let this = self;
        unsafe {
            let mut result__ = ::core::mem::MaybeUninit::zeroed();
            (::windows::core::Vtable::vtable(this).RightInset)(
                ::windows::core::Vtable::as_raw(this),
                result__.as_mut_ptr(),
            )
            .from_abi::<f32>(result__)
        }
    }
    pub fn SetRightInset(&self, value: f32) -> ::windows::core::Result<()> {
        let this = self;
        unsafe {
            (::windows::core::Vtable::vtable(this).SetRightInset)(
                ::windows::core::Vtable::as_raw(this),
                value,
            )
            .ok()
        }
    }
    pub fn TopInset(&self) -> ::windows::core::Result<f32> {
        let this = self;
        unsafe {
            let mut result__ = ::core::mem::MaybeUninit::zeroed();
            (::windows::core::Vtable::vtable(this).TopInset)(
                ::windows::core::Vtable::as_raw(this),
                result__.as_mut_ptr(),
            )
            .from_abi::<f32>(result__)
        }
    }
    pub fn SetTopInset(&self, value: f32) -> ::windows::core::Result<()> {
        let this = self;
        unsafe {
            (::windows::core::Vtable::vtable(this).SetTopInset)(
                ::windows::core::Vtable::as_raw(this),
                value,
            )
            .ok()
        }
    }
}
impl ::core::clone::Clone for InsetClip {
    fn clone(&self) -> Self {
        Self(self.0.clone())
    }
}
impl ::core::cmp::PartialEq for InsetClip {
    fn eq(&self, other: &Self) -> bool {
        self.0 == other.0
    }
}
impl ::core::cmp::Eq for InsetClip {}
impl ::core::fmt::Debug for InsetClip {
    fn fmt(&self, f: &mut ::core::fmt::Formatter<'_>) -> ::core::fmt::Result {
        f.debug_tuple("InsetClip").field(&self.0).finish()
    }
}
unsafe impl ::windows::core::RuntimeType for InsetClip {
    const SIGNATURE: ::windows::core::ConstBuffer = ::windows::core::ConstBuffer::from_slice(
        b"rc(Microsoft.UI.Composition.InsetClip;{f9d99475-7b59-5b28-a1d2-b832da6988c9})",
    );
    type DefaultType = ::core::option::Option<Self>;
    fn from_default(from: &Self::DefaultType) -> ::windows::core::Result<Self> {
        from.as_ref().cloned().ok_or(::windows::core::Error::OK)
    }
}
unsafe impl ::windows::core::Vtable for InsetClip {
    type Vtable = IInsetClip_Vtbl;
}
unsafe impl ::windows::core::Interface for InsetClip {
    const IID: ::windows::core::GUID = <IInsetClip as ::windows::core::Interface>::IID;
}
impl ::windows::core::RuntimeName for InsetClip {
    const NAME: &'static str = "Microsoft.UI.Composition.InsetClip";
}
::windows::core::interface_hierarchy!(
    InsetClip,
    ::windows::core::IUnknown,
    ::windows::core::IInspectable
);
impl ::core::convert::TryFrom<InsetClip> for IAnimationObject {
    type Error = ::windows::core::Error;
    fn try_from(value: InsetClip) -> ::windows::core::Result<Self> {
        ::core::convert::TryFrom::try_from(&value)
    }
}
impl ::core::convert::TryFrom<&InsetClip> for IAnimationObject {
    type Error = ::windows::core::Error;
    fn try_from(value: &InsetClip) -> ::windows::core::Result<Self> {
        ::windows::core::Interface::cast(value)
    }
}
impl<'a> ::core::convert::TryFrom<&InsetClip> for ::windows::core::InParam<'a, IAnimationObject> {
    type Error = ::windows::core::Error;
    fn try_from(value: &InsetClip) -> ::windows::core::Result<Self> {
        let item = ::std::convert::TryInto::try_into(value)?;
        Ok(::windows::core::InParam::owned(item))
    }
}
impl ::core::convert::TryFrom<InsetClip> for ::windows::Foundation::IClosable {
    type Error = ::windows::core::Error;
    fn try_from(value: InsetClip) -> ::windows::core::Result<Self> {
        ::core::convert::TryFrom::try_from(&value)
    }
}
impl ::core::convert::TryFrom<&InsetClip> for ::windows::Foundation::IClosable {
    type Error = ::windows::core::Error;
    fn try_from(value: &InsetClip) -> ::windows::core::Result<Self> {
        ::windows::core::Interface::cast(value)
    }
}
impl<'a> ::core::convert::TryFrom<&InsetClip>
    for ::windows::core::InParam<'a, ::windows::Foundation::IClosable>
{
    type Error = ::windows::core::Error;
    fn try_from(value: &InsetClip) -> ::windows::core::Result<Self> {
        let item = ::std::convert::TryInto::try_into(value)?;
        Ok(::windows::core::InParam::owned(item))
    }
}
impl ::core::convert::From<InsetClip> for CompositionClip {
    fn from(value: InsetClip) -> Self {
        ::core::convert::From::from(&value)
    }
}
impl ::core::convert::From<&InsetClip> for CompositionClip {
    fn from(value: &InsetClip) -> Self {
        ::windows::core::Interface::cast(value).unwrap()
    }
}
impl<'a> ::core::convert::From<&InsetClip> for ::windows::core::InParam<'a, CompositionClip> {
    fn from(value: &InsetClip) -> Self {
        ::windows::core::InParam::owned(value.into())
    }
}
impl ::core::convert::From<InsetClip> for CompositionObject {
    fn from(value: InsetClip) -> Self {
        ::core::convert::From::from(&value)
    }
}
impl ::core::convert::From<&InsetClip> for CompositionObject {
    fn from(value: &InsetClip) -> Self {
        ::windows::core::Interface::cast(value).unwrap()
    }
}
impl<'a> ::core::convert::From<&InsetClip> for ::windows::core::InParam<'a, CompositionObject> {
    fn from(value: &InsetClip) -> Self {
        ::windows::core::InParam::owned(value.into())
    }
}
unsafe impl ::core::marker::Send for InsetClip {}
unsafe impl ::core::marker::Sync for InsetClip {}
#[doc = "*Required features: `\"UI_Composition\"`*"]
#[repr(transparent)]
pub struct KeyFrameAnimation(::windows::core::IUnknown);
impl KeyFrameAnimation {
    pub fn PopulatePropertyInfo(
        &self,
        propertyname: &::windows::core::HSTRING,
        propertyinfo: &AnimationPropertyInfo,
    ) -> ::windows::core::Result<()> {
        let this = &::windows::core::Interface::cast::<IAnimationObject>(self)?;
        unsafe {
            (::windows::core::Vtable::vtable(this).PopulatePropertyInfo)(
                ::windows::core::Vtable::as_raw(this),
                ::core::mem::transmute_copy(propertyname),
                ::core::mem::transmute_copy(propertyinfo),
            )
            .ok()
        }
    }
    pub fn Close(&self) -> ::windows::core::Result<()> {
        let this = &::windows::core::Interface::cast::<::windows::Foundation::IClosable>(self)?;
        unsafe {
            (::windows::core::Vtable::vtable(this).Close)(::windows::core::Vtable::as_raw(this))
                .ok()
        }
    }
    pub fn ClearAllParameters(&self) -> ::windows::core::Result<()> {
        let this = &::windows::core::Interface::cast::<ICompositionAnimation>(self)?;
        unsafe {
            (::windows::core::Vtable::vtable(this).ClearAllParameters)(
                ::windows::core::Vtable::as_raw(this),
            )
            .ok()
        }
    }
    pub fn ClearParameter(&self, key: &::windows::core::HSTRING) -> ::windows::core::Result<()> {
        let this = &::windows::core::Interface::cast::<ICompositionAnimation>(self)?;
        unsafe {
            (::windows::core::Vtable::vtable(this).ClearParameter)(
                ::windows::core::Vtable::as_raw(this),
                ::core::mem::transmute_copy(key),
            )
            .ok()
        }
    }
    pub fn SetColorParameter(
        &self,
        key: &::windows::core::HSTRING,
        value: ::windows::UI::Color,
    ) -> ::windows::core::Result<()> {
        let this = &::windows::core::Interface::cast::<ICompositionAnimation>(self)?;
        unsafe {
            (::windows::core::Vtable::vtable(this).SetColorParameter)(
                ::windows::core::Vtable::as_raw(this),
                ::core::mem::transmute_copy(key),
                value,
            )
            .ok()
        }
    }
    pub fn SetMatrix3x2Parameter(
        &self,
        key: &::windows::core::HSTRING,
        value: ::windows::Foundation::Numerics::Matrix3x2,
    ) -> ::windows::core::Result<()> {
        let this = &::windows::core::Interface::cast::<ICompositionAnimation>(self)?;
        unsafe {
            (::windows::core::Vtable::vtable(this).SetMatrix3x2Parameter)(
                ::windows::core::Vtable::as_raw(this),
                ::core::mem::transmute_copy(key),
                value,
            )
            .ok()
        }
    }
    pub fn SetMatrix4x4Parameter(
        &self,
        key: &::windows::core::HSTRING,
        value: ::windows::Foundation::Numerics::Matrix4x4,
    ) -> ::windows::core::Result<()> {
        let this = &::windows::core::Interface::cast::<ICompositionAnimation>(self)?;
        unsafe {
            (::windows::core::Vtable::vtable(this).SetMatrix4x4Parameter)(
                ::windows::core::Vtable::as_raw(this),
                ::core::mem::transmute_copy(key),
                value,
            )
            .ok()
        }
    }
    pub fn SetQuaternionParameter(
        &self,
        key: &::windows::core::HSTRING,
        value: ::windows::Foundation::Numerics::Quaternion,
    ) -> ::windows::core::Result<()> {
        let this = &::windows::core::Interface::cast::<ICompositionAnimation>(self)?;
        unsafe {
            (::windows::core::Vtable::vtable(this).SetQuaternionParameter)(
                ::windows::core::Vtable::as_raw(this),
                ::core::mem::transmute_copy(key),
                value,
            )
            .ok()
        }
    }
    pub fn SetReferenceParameter<'a, P0>(
        &self,
        key: &::windows::core::HSTRING,
        compositionobject: P0,
    ) -> ::windows::core::Result<()>
    where
        P0: ::std::convert::Into<::windows::core::InParam<'a, CompositionObject>>,
    {
        let this = &::windows::core::Interface::cast::<ICompositionAnimation>(self)?;
        unsafe {
            (::windows::core::Vtable::vtable(this).SetReferenceParameter)(
                ::windows::core::Vtable::as_raw(this),
                ::core::mem::transmute_copy(key),
                compositionobject.into().abi(),
            )
            .ok()
        }
    }
    pub fn SetScalarParameter(
        &self,
        key: &::windows::core::HSTRING,
        value: f32,
    ) -> ::windows::core::Result<()> {
        let this = &::windows::core::Interface::cast::<ICompositionAnimation>(self)?;
        unsafe {
            (::windows::core::Vtable::vtable(this).SetScalarParameter)(
                ::windows::core::Vtable::as_raw(this),
                ::core::mem::transmute_copy(key),
                value,
            )
            .ok()
        }
    }
    pub fn SetVector2Parameter(
        &self,
        key: &::windows::core::HSTRING,
        value: ::windows::Foundation::Numerics::Vector2,
    ) -> ::windows::core::Result<()> {
        let this = &::windows::core::Interface::cast::<ICompositionAnimation>(self)?;
        unsafe {
            (::windows::core::Vtable::vtable(this).SetVector2Parameter)(
                ::windows::core::Vtable::as_raw(this),
                ::core::mem::transmute_copy(key),
                value,
            )
            .ok()
        }
    }
    pub fn SetVector3Parameter(
        &self,
        key: &::windows::core::HSTRING,
        value: ::windows::Foundation::Numerics::Vector3,
    ) -> ::windows::core::Result<()> {
        let this = &::windows::core::Interface::cast::<ICompositionAnimation>(self)?;
        unsafe {
            (::windows::core::Vtable::vtable(this).SetVector3Parameter)(
                ::windows::core::Vtable::as_raw(this),
                ::core::mem::transmute_copy(key),
                value,
            )
            .ok()
        }
    }
    pub fn SetVector4Parameter(
        &self,
        key: &::windows::core::HSTRING,
        value: ::windows::Foundation::Numerics::Vector4,
    ) -> ::windows::core::Result<()> {
        let this = &::windows::core::Interface::cast::<ICompositionAnimation>(self)?;
        unsafe {
            (::windows::core::Vtable::vtable(this).SetVector4Parameter)(
                ::windows::core::Vtable::as_raw(this),
                ::core::mem::transmute_copy(key),
                value,
            )
            .ok()
        }
    }
    pub fn SetBooleanParameter(
        &self,
        key: &::windows::core::HSTRING,
        value: bool,
    ) -> ::windows::core::Result<()> {
        let this = &::windows::core::Interface::cast::<ICompositionAnimation2>(self)?;
        unsafe {
            (::windows::core::Vtable::vtable(this).SetBooleanParameter)(
                ::windows::core::Vtable::as_raw(this),
                ::core::mem::transmute_copy(key),
                value,
            )
            .ok()
        }
    }
    pub fn Target(&self) -> ::windows::core::Result<::windows::core::HSTRING> {
        let this = &::windows::core::Interface::cast::<ICompositionAnimation2>(self)?;
        unsafe {
            let mut result__ = ::core::mem::MaybeUninit::zeroed();
            (::windows::core::Vtable::vtable(this).Target)(
                ::windows::core::Vtable::as_raw(this),
                result__.as_mut_ptr(),
            )
            .from_abi::<::windows::core::HSTRING>(result__)
        }
    }
    pub fn SetTarget(&self, value: &::windows::core::HSTRING) -> ::windows::core::Result<()> {
        let this = &::windows::core::Interface::cast::<ICompositionAnimation2>(self)?;
        unsafe {
            (::windows::core::Vtable::vtable(this).SetTarget)(
                ::windows::core::Vtable::as_raw(this),
                ::core::mem::transmute_copy(value),
            )
            .ok()
        }
    }
    pub fn InitialValueExpressions(
        &self,
    ) -> ::windows::core::Result<InitialValueExpressionCollection> {
        let this = &::windows::core::Interface::cast::<ICompositionAnimation3>(self)?;
        unsafe {
            let mut result__ = ::core::mem::MaybeUninit::zeroed();
            (::windows::core::Vtable::vtable(this).InitialValueExpressions)(
                ::windows::core::Vtable::as_raw(this),
                result__.as_mut_ptr(),
            )
            .from_abi::<InitialValueExpressionCollection>(result__)
        }
    }
    pub fn SetExpressionReferenceParameter<'a, P0, E0>(
        &self,
        parametername: &::windows::core::HSTRING,
        source: P0,
    ) -> ::windows::core::Result<()>
    where
        P0: ::std::convert::TryInto<::windows::core::InParam<'a, IAnimationObject>, Error = E0>,
        E0: ::std::convert::Into<::windows::core::Error>,
    {
        let this = &::windows::core::Interface::cast::<ICompositionAnimation4>(self)?;
        unsafe {
            (::windows::core::Vtable::vtable(this).SetExpressionReferenceParameter)(
                ::windows::core::Vtable::as_raw(this),
                ::core::mem::transmute_copy(parametername),
                source.try_into().map_err(|e| e.into())?.abi(),
            )
            .ok()
        }
    }
    pub fn Compositor(&self) -> ::windows::core::Result<Compositor> {
        let this = &::windows::core::Interface::cast::<ICompositionObject>(self)?;
        unsafe {
            let mut result__ = ::core::mem::MaybeUninit::zeroed();
            (::windows::core::Vtable::vtable(this).Compositor)(
                ::windows::core::Vtable::as_raw(this),
                result__.as_mut_ptr(),
            )
            .from_abi::<Compositor>(result__)
        }
    }
    pub fn Properties(&self) -> ::windows::core::Result<CompositionPropertySet> {
        let this = &::windows::core::Interface::cast::<ICompositionObject>(self)?;
        unsafe {
            let mut result__ = ::core::mem::MaybeUninit::zeroed();
            (::windows::core::Vtable::vtable(this).Properties)(
                ::windows::core::Vtable::as_raw(this),
                result__.as_mut_ptr(),
            )
            .from_abi::<CompositionPropertySet>(result__)
        }
    }
    pub fn StartAnimation<'a, P0>(
        &self,
        propertyname: &::windows::core::HSTRING,
        animation: P0,
    ) -> ::windows::core::Result<()>
    where
        P0: ::std::convert::Into<::windows::core::InParam<'a, CompositionAnimation>>,
    {
        let this = &::windows::core::Interface::cast::<ICompositionObject>(self)?;
        unsafe {
            (::windows::core::Vtable::vtable(this).StartAnimation)(
                ::windows::core::Vtable::as_raw(this),
                ::core::mem::transmute_copy(propertyname),
                animation.into().abi(),
            )
            .ok()
        }
    }
    pub fn StopAnimation(
        &self,
        propertyname: &::windows::core::HSTRING,
    ) -> ::windows::core::Result<()> {
        let this = &::windows::core::Interface::cast::<ICompositionObject>(self)?;
        unsafe {
            (::windows::core::Vtable::vtable(this).StopAnimation)(
                ::windows::core::Vtable::as_raw(this),
                ::core::mem::transmute_copy(propertyname),
            )
            .ok()
        }
    }
    pub fn Comment(&self) -> ::windows::core::Result<::windows::core::HSTRING> {
        let this = &::windows::core::Interface::cast::<ICompositionObject2>(self)?;
        unsafe {
            let mut result__ = ::core::mem::MaybeUninit::zeroed();
            (::windows::core::Vtable::vtable(this).Comment)(
                ::windows::core::Vtable::as_raw(this),
                result__.as_mut_ptr(),
            )
            .from_abi::<::windows::core::HSTRING>(result__)
        }
    }
    pub fn SetComment(&self, value: &::windows::core::HSTRING) -> ::windows::core::Result<()> {
        let this = &::windows::core::Interface::cast::<ICompositionObject2>(self)?;
        unsafe {
            (::windows::core::Vtable::vtable(this).SetComment)(
                ::windows::core::Vtable::as_raw(this),
                ::core::mem::transmute_copy(value),
            )
            .ok()
        }
    }
    pub fn ImplicitAnimations(&self) -> ::windows::core::Result<ImplicitAnimationCollection> {
        let this = &::windows::core::Interface::cast::<ICompositionObject2>(self)?;
        unsafe {
            let mut result__ = ::core::mem::MaybeUninit::zeroed();
            (::windows::core::Vtable::vtable(this).ImplicitAnimations)(
                ::windows::core::Vtable::as_raw(this),
                result__.as_mut_ptr(),
            )
            .from_abi::<ImplicitAnimationCollection>(result__)
        }
    }
    pub fn SetImplicitAnimations(
        &self,
        value: &ImplicitAnimationCollection,
    ) -> ::windows::core::Result<()> {
        let this = &::windows::core::Interface::cast::<ICompositionObject2>(self)?;
        unsafe {
            (::windows::core::Vtable::vtable(this).SetImplicitAnimations)(
                ::windows::core::Vtable::as_raw(this),
                ::core::mem::transmute_copy(value),
            )
            .ok()
        }
    }
    pub fn StartAnimationGroup<'a, P0, E0>(&self, value: P0) -> ::windows::core::Result<()>
    where
        P0: ::std::convert::TryInto<
            ::windows::core::InParam<'a, ICompositionAnimationBase>,
            Error = E0,
        >,
        E0: ::std::convert::Into<::windows::core::Error>,
    {
        let this = &::windows::core::Interface::cast::<ICompositionObject2>(self)?;
        unsafe {
            (::windows::core::Vtable::vtable(this).StartAnimationGroup)(
                ::windows::core::Vtable::as_raw(this),
                value.try_into().map_err(|e| e.into())?.abi(),
            )
            .ok()
        }
    }
    pub fn StopAnimationGroup<'a, P0, E0>(&self, value: P0) -> ::windows::core::Result<()>
    where
        P0: ::std::convert::TryInto<
            ::windows::core::InParam<'a, ICompositionAnimationBase>,
            Error = E0,
        >,
        E0: ::std::convert::Into<::windows::core::Error>,
    {
        let this = &::windows::core::Interface::cast::<ICompositionObject2>(self)?;
        unsafe {
            (::windows::core::Vtable::vtable(this).StopAnimationGroup)(
                ::windows::core::Vtable::as_raw(this),
                value.try_into().map_err(|e| e.into())?.abi(),
            )
            .ok()
        }
    }
    #[doc = "*Required features: `\"UI_Dispatching\"`*"]
    #[cfg(feature = "UI_Dispatching")]
    pub fn DispatcherQueue(&self) -> ::windows::core::Result<super::Dispatching::DispatcherQueue> {
        let this = &::windows::core::Interface::cast::<ICompositionObject3>(self)?;
        unsafe {
            let mut result__ = ::core::mem::MaybeUninit::zeroed();
            (::windows::core::Vtable::vtable(this).DispatcherQueue)(
                ::windows::core::Vtable::as_raw(this),
                result__.as_mut_ptr(),
            )
            .from_abi::<super::Dispatching::DispatcherQueue>(result__)
        }
    }
    pub fn TryGetAnimationController(
        &self,
        propertyname: &::windows::core::HSTRING,
    ) -> ::windows::core::Result<AnimationController> {
        let this = &::windows::core::Interface::cast::<ICompositionObject4>(self)?;
        unsafe {
            let mut result__ = ::core::mem::MaybeUninit::zeroed();
            (::windows::core::Vtable::vtable(this).TryGetAnimationController)(
                ::windows::core::Vtable::as_raw(this),
                ::core::mem::transmute_copy(propertyname),
                result__.as_mut_ptr(),
            )
            .from_abi::<AnimationController>(result__)
        }
    }
    pub fn StartAnimationWithController<'a, P0>(
        &self,
        propertyname: &::windows::core::HSTRING,
        animation: P0,
        animationcontroller: &AnimationController,
    ) -> ::windows::core::Result<()>
    where
        P0: ::std::convert::Into<::windows::core::InParam<'a, CompositionAnimation>>,
    {
        let this = &::windows::core::Interface::cast::<ICompositionObject5>(self)?;
        unsafe {
            (::windows::core::Vtable::vtable(this).StartAnimationWithController)(
                ::windows::core::Vtable::as_raw(this),
                ::core::mem::transmute_copy(propertyname),
                animation.into().abi(),
                ::core::mem::transmute_copy(animationcontroller),
            )
            .ok()
        }
    }
    pub fn DelayTime(&self) -> ::windows::core::Result<::windows::Foundation::TimeSpan> {
        let this = self;
        unsafe {
            let mut result__ = ::core::mem::MaybeUninit::zeroed();
            (::windows::core::Vtable::vtable(this).DelayTime)(
                ::windows::core::Vtable::as_raw(this),
                result__.as_mut_ptr(),
            )
            .from_abi::<::windows::Foundation::TimeSpan>(result__)
        }
    }
    pub fn SetDelayTime(
        &self,
        value: ::windows::Foundation::TimeSpan,
    ) -> ::windows::core::Result<()> {
        let this = self;
        unsafe {
            (::windows::core::Vtable::vtable(this).SetDelayTime)(
                ::windows::core::Vtable::as_raw(this),
                value,
            )
            .ok()
        }
    }
    pub fn Duration(&self) -> ::windows::core::Result<::windows::Foundation::TimeSpan> {
        let this = self;
        unsafe {
            let mut result__ = ::core::mem::MaybeUninit::zeroed();
            (::windows::core::Vtable::vtable(this).Duration)(
                ::windows::core::Vtable::as_raw(this),
                result__.as_mut_ptr(),
            )
            .from_abi::<::windows::Foundation::TimeSpan>(result__)
        }
    }
    pub fn SetDuration(
        &self,
        value: ::windows::Foundation::TimeSpan,
    ) -> ::windows::core::Result<()> {
        let this = self;
        unsafe {
            (::windows::core::Vtable::vtable(this).SetDuration)(
                ::windows::core::Vtable::as_raw(this),
                value,
            )
            .ok()
        }
    }
    pub fn IterationBehavior(&self) -> ::windows::core::Result<AnimationIterationBehavior> {
        let this = self;
        unsafe {
            let mut result__ = ::core::mem::MaybeUninit::zeroed();
            (::windows::core::Vtable::vtable(this).IterationBehavior)(
                ::windows::core::Vtable::as_raw(this),
                result__.as_mut_ptr(),
            )
            .from_abi::<AnimationIterationBehavior>(result__)
        }
    }
    pub fn SetIterationBehavior(
        &self,
        value: AnimationIterationBehavior,
    ) -> ::windows::core::Result<()> {
        let this = self;
        unsafe {
            (::windows::core::Vtable::vtable(this).SetIterationBehavior)(
                ::windows::core::Vtable::as_raw(this),
                value,
            )
            .ok()
        }
    }
    pub fn IterationCount(&self) -> ::windows::core::Result<i32> {
        let this = self;
        unsafe {
            let mut result__ = ::core::mem::MaybeUninit::zeroed();
            (::windows::core::Vtable::vtable(this).IterationCount)(
                ::windows::core::Vtable::as_raw(this),
                result__.as_mut_ptr(),
            )
            .from_abi::<i32>(result__)
        }
    }
    pub fn SetIterationCount(&self, value: i32) -> ::windows::core::Result<()> {
        let this = self;
        unsafe {
            (::windows::core::Vtable::vtable(this).SetIterationCount)(
                ::windows::core::Vtable::as_raw(this),
                value,
            )
            .ok()
        }
    }
    pub fn KeyFrameCount(&self) -> ::windows::core::Result<i32> {
        let this = self;
        unsafe {
            let mut result__ = ::core::mem::MaybeUninit::zeroed();
            (::windows::core::Vtable::vtable(this).KeyFrameCount)(
                ::windows::core::Vtable::as_raw(this),
                result__.as_mut_ptr(),
            )
            .from_abi::<i32>(result__)
        }
    }
    pub fn StopBehavior(&self) -> ::windows::core::Result<AnimationStopBehavior> {
        let this = self;
        unsafe {
            let mut result__ = ::core::mem::MaybeUninit::zeroed();
            (::windows::core::Vtable::vtable(this).StopBehavior)(
                ::windows::core::Vtable::as_raw(this),
                result__.as_mut_ptr(),
            )
            .from_abi::<AnimationStopBehavior>(result__)
        }
    }
    pub fn SetStopBehavior(&self, value: AnimationStopBehavior) -> ::windows::core::Result<()> {
        let this = self;
        unsafe {
            (::windows::core::Vtable::vtable(this).SetStopBehavior)(
                ::windows::core::Vtable::as_raw(this),
                value,
            )
            .ok()
        }
    }
    pub fn InsertExpressionKeyFrame(
        &self,
        normalizedprogresskey: f32,
        value: &::windows::core::HSTRING,
    ) -> ::windows::core::Result<()> {
        let this = self;
        unsafe {
            (::windows::core::Vtable::vtable(this).InsertExpressionKeyFrame)(
                ::windows::core::Vtable::as_raw(this),
                normalizedprogresskey,
                ::core::mem::transmute_copy(value),
            )
            .ok()
        }
    }
    pub fn InsertExpressionKeyFrameWithEasingFunction<'a, P0>(
        &self,
        normalizedprogresskey: f32,
        value: &::windows::core::HSTRING,
        easingfunction: P0,
    ) -> ::windows::core::Result<()>
    where
        P0: ::std::convert::Into<::windows::core::InParam<'a, CompositionEasingFunction>>,
    {
        let this = self;
        unsafe {
            (::windows::core::Vtable::vtable(this).InsertExpressionKeyFrameWithEasingFunction)(
                ::windows::core::Vtable::as_raw(this),
                normalizedprogresskey,
                ::core::mem::transmute_copy(value),
                easingfunction.into().abi(),
            )
            .ok()
        }
    }
    pub fn Direction(&self) -> ::windows::core::Result<AnimationDirection> {
        let this = &::windows::core::Interface::cast::<IKeyFrameAnimation2>(self)?;
        unsafe {
            let mut result__ = ::core::mem::MaybeUninit::zeroed();
            (::windows::core::Vtable::vtable(this).Direction)(
                ::windows::core::Vtable::as_raw(this),
                result__.as_mut_ptr(),
            )
            .from_abi::<AnimationDirection>(result__)
        }
    }
    pub fn SetDirection(&self, value: AnimationDirection) -> ::windows::core::Result<()> {
        let this = &::windows::core::Interface::cast::<IKeyFrameAnimation2>(self)?;
        unsafe {
            (::windows::core::Vtable::vtable(this).SetDirection)(
                ::windows::core::Vtable::as_raw(this),
                value,
            )
            .ok()
        }
    }
    pub fn DelayBehavior(&self) -> ::windows::core::Result<AnimationDelayBehavior> {
        let this = &::windows::core::Interface::cast::<IKeyFrameAnimation3>(self)?;
        unsafe {
            let mut result__ = ::core::mem::MaybeUninit::zeroed();
            (::windows::core::Vtable::vtable(this).DelayBehavior)(
                ::windows::core::Vtable::as_raw(this),
                result__.as_mut_ptr(),
            )
            .from_abi::<AnimationDelayBehavior>(result__)
        }
    }
    pub fn SetDelayBehavior(&self, value: AnimationDelayBehavior) -> ::windows::core::Result<()> {
        let this = &::windows::core::Interface::cast::<IKeyFrameAnimation3>(self)?;
        unsafe {
            (::windows::core::Vtable::vtable(this).SetDelayBehavior)(
                ::windows::core::Vtable::as_raw(this),
                value,
            )
            .ok()
        }
    }
}
impl ::core::clone::Clone for KeyFrameAnimation {
    fn clone(&self) -> Self {
        Self(self.0.clone())
    }
}
impl ::core::cmp::PartialEq for KeyFrameAnimation {
    fn eq(&self, other: &Self) -> bool {
        self.0 == other.0
    }
}
impl ::core::cmp::Eq for KeyFrameAnimation {}
impl ::core::fmt::Debug for KeyFrameAnimation {
    fn fmt(&self, f: &mut ::core::fmt::Formatter<'_>) -> ::core::fmt::Result {
        f.debug_tuple("KeyFrameAnimation").field(&self.0).finish()
    }
}
unsafe impl ::windows::core::RuntimeType for KeyFrameAnimation {
    const SIGNATURE: ::windows::core::ConstBuffer = ::windows::core::ConstBuffer::from_slice(
        b"rc(Microsoft.UI.Composition.KeyFrameAnimation;{5a8f57f0-f059-5b47-b308-c4c80fc71248})",
    );
    type DefaultType = ::core::option::Option<Self>;
    fn from_default(from: &Self::DefaultType) -> ::windows::core::Result<Self> {
        from.as_ref().cloned().ok_or(::windows::core::Error::OK)
    }
}
unsafe impl ::windows::core::Vtable for KeyFrameAnimation {
    type Vtable = IKeyFrameAnimation_Vtbl;
}
unsafe impl ::windows::core::Interface for KeyFrameAnimation {
    const IID: ::windows::core::GUID = <IKeyFrameAnimation as ::windows::core::Interface>::IID;
}
impl ::windows::core::RuntimeName for KeyFrameAnimation {
    const NAME: &'static str = "Microsoft.UI.Composition.KeyFrameAnimation";
}
::windows::core::interface_hierarchy!(
    KeyFrameAnimation,
    ::windows::core::IUnknown,
    ::windows::core::IInspectable
);
impl ::core::convert::TryFrom<KeyFrameAnimation> for IAnimationObject {
    type Error = ::windows::core::Error;
    fn try_from(value: KeyFrameAnimation) -> ::windows::core::Result<Self> {
        ::core::convert::TryFrom::try_from(&value)
    }
}
impl ::core::convert::TryFrom<&KeyFrameAnimation> for IAnimationObject {
    type Error = ::windows::core::Error;
    fn try_from(value: &KeyFrameAnimation) -> ::windows::core::Result<Self> {
        ::windows::core::Interface::cast(value)
    }
}
impl<'a> ::core::convert::TryFrom<&KeyFrameAnimation>
    for ::windows::core::InParam<'a, IAnimationObject>
{
    type Error = ::windows::core::Error;
    fn try_from(value: &KeyFrameAnimation) -> ::windows::core::Result<Self> {
        let item = ::std::convert::TryInto::try_into(value)?;
        Ok(::windows::core::InParam::owned(item))
    }
}
impl ::core::convert::TryFrom<KeyFrameAnimation> for ::windows::Foundation::IClosable {
    type Error = ::windows::core::Error;
    fn try_from(value: KeyFrameAnimation) -> ::windows::core::Result<Self> {
        ::core::convert::TryFrom::try_from(&value)
    }
}
impl ::core::convert::TryFrom<&KeyFrameAnimation> for ::windows::Foundation::IClosable {
    type Error = ::windows::core::Error;
    fn try_from(value: &KeyFrameAnimation) -> ::windows::core::Result<Self> {
        ::windows::core::Interface::cast(value)
    }
}
impl<'a> ::core::convert::TryFrom<&KeyFrameAnimation>
    for ::windows::core::InParam<'a, ::windows::Foundation::IClosable>
{
    type Error = ::windows::core::Error;
    fn try_from(value: &KeyFrameAnimation) -> ::windows::core::Result<Self> {
        let item = ::std::convert::TryInto::try_into(value)?;
        Ok(::windows::core::InParam::owned(item))
    }
}
impl ::core::convert::TryFrom<KeyFrameAnimation> for ICompositionAnimationBase {
    type Error = ::windows::core::Error;
    fn try_from(value: KeyFrameAnimation) -> ::windows::core::Result<Self> {
        ::core::convert::TryFrom::try_from(&value)
    }
}
impl ::core::convert::TryFrom<&KeyFrameAnimation> for ICompositionAnimationBase {
    type Error = ::windows::core::Error;
    fn try_from(value: &KeyFrameAnimation) -> ::windows::core::Result<Self> {
        ::windows::core::Interface::cast(value)
    }
}
impl<'a> ::core::convert::TryFrom<&KeyFrameAnimation>
    for ::windows::core::InParam<'a, ICompositionAnimationBase>
{
    type Error = ::windows::core::Error;
    fn try_from(value: &KeyFrameAnimation) -> ::windows::core::Result<Self> {
        let item = ::std::convert::TryInto::try_into(value)?;
        Ok(::windows::core::InParam::owned(item))
    }
}
impl ::core::convert::From<KeyFrameAnimation> for CompositionAnimation {
    fn from(value: KeyFrameAnimation) -> Self {
        ::core::convert::From::from(&value)
    }
}
impl ::core::convert::From<&KeyFrameAnimation> for CompositionAnimation {
    fn from(value: &KeyFrameAnimation) -> Self {
        ::windows::core::Interface::cast(value).unwrap()
    }
}
impl<'a> ::core::convert::From<&KeyFrameAnimation>
    for ::windows::core::InParam<'a, CompositionAnimation>
{
    fn from(value: &KeyFrameAnimation) -> Self {
        ::windows::core::InParam::owned(value.into())
    }
}
impl ::core::convert::From<KeyFrameAnimation> for CompositionObject {
    fn from(value: KeyFrameAnimation) -> Self {
        ::core::convert::From::from(&value)
    }
}
impl ::core::convert::From<&KeyFrameAnimation> for CompositionObject {
    fn from(value: &KeyFrameAnimation) -> Self {
        ::windows::core::Interface::cast(value).unwrap()
    }
}
impl<'a> ::core::convert::From<&KeyFrameAnimation>
    for ::windows::core::InParam<'a, CompositionObject>
{
    fn from(value: &KeyFrameAnimation) -> Self {
        ::windows::core::InParam::owned(value.into())
    }
}
unsafe impl ::core::marker::Send for KeyFrameAnimation {}
unsafe impl ::core::marker::Sync for KeyFrameAnimation {}
#[doc = "*Required features: `\"UI_Composition\"`*"]
#[repr(transparent)]
pub struct LayerVisual(::windows::core::IUnknown);
impl LayerVisual {
    pub fn PopulatePropertyInfo(
        &self,
        propertyname: &::windows::core::HSTRING,
        propertyinfo: &AnimationPropertyInfo,
    ) -> ::windows::core::Result<()> {
        let this = &::windows::core::Interface::cast::<IAnimationObject>(self)?;
        unsafe {
            (::windows::core::Vtable::vtable(this).PopulatePropertyInfo)(
                ::windows::core::Vtable::as_raw(this),
                ::core::mem::transmute_copy(propertyname),
                ::core::mem::transmute_copy(propertyinfo),
            )
            .ok()
        }
    }
    pub fn Close(&self) -> ::windows::core::Result<()> {
        let this = &::windows::core::Interface::cast::<::windows::Foundation::IClosable>(self)?;
        unsafe {
            (::windows::core::Vtable::vtable(this).Close)(::windows::core::Vtable::as_raw(this))
                .ok()
        }
    }
    pub fn Compositor(&self) -> ::windows::core::Result<Compositor> {
        let this = &::windows::core::Interface::cast::<ICompositionObject>(self)?;
        unsafe {
            let mut result__ = ::core::mem::MaybeUninit::zeroed();
            (::windows::core::Vtable::vtable(this).Compositor)(
                ::windows::core::Vtable::as_raw(this),
                result__.as_mut_ptr(),
            )
            .from_abi::<Compositor>(result__)
        }
    }
    pub fn Properties(&self) -> ::windows::core::Result<CompositionPropertySet> {
        let this = &::windows::core::Interface::cast::<ICompositionObject>(self)?;
        unsafe {
            let mut result__ = ::core::mem::MaybeUninit::zeroed();
            (::windows::core::Vtable::vtable(this).Properties)(
                ::windows::core::Vtable::as_raw(this),
                result__.as_mut_ptr(),
            )
            .from_abi::<CompositionPropertySet>(result__)
        }
    }
    pub fn StartAnimation<'a, P0>(
        &self,
        propertyname: &::windows::core::HSTRING,
        animation: P0,
    ) -> ::windows::core::Result<()>
    where
        P0: ::std::convert::Into<::windows::core::InParam<'a, CompositionAnimation>>,
    {
        let this = &::windows::core::Interface::cast::<ICompositionObject>(self)?;
        unsafe {
            (::windows::core::Vtable::vtable(this).StartAnimation)(
                ::windows::core::Vtable::as_raw(this),
                ::core::mem::transmute_copy(propertyname),
                animation.into().abi(),
            )
            .ok()
        }
    }
    pub fn StopAnimation(
        &self,
        propertyname: &::windows::core::HSTRING,
    ) -> ::windows::core::Result<()> {
        let this = &::windows::core::Interface::cast::<ICompositionObject>(self)?;
        unsafe {
            (::windows::core::Vtable::vtable(this).StopAnimation)(
                ::windows::core::Vtable::as_raw(this),
                ::core::mem::transmute_copy(propertyname),
            )
            .ok()
        }
    }
    pub fn Comment(&self) -> ::windows::core::Result<::windows::core::HSTRING> {
        let this = &::windows::core::Interface::cast::<ICompositionObject2>(self)?;
        unsafe {
            let mut result__ = ::core::mem::MaybeUninit::zeroed();
            (::windows::core::Vtable::vtable(this).Comment)(
                ::windows::core::Vtable::as_raw(this),
                result__.as_mut_ptr(),
            )
            .from_abi::<::windows::core::HSTRING>(result__)
        }
    }
    pub fn SetComment(&self, value: &::windows::core::HSTRING) -> ::windows::core::Result<()> {
        let this = &::windows::core::Interface::cast::<ICompositionObject2>(self)?;
        unsafe {
            (::windows::core::Vtable::vtable(this).SetComment)(
                ::windows::core::Vtable::as_raw(this),
                ::core::mem::transmute_copy(value),
            )
            .ok()
        }
    }
    pub fn ImplicitAnimations(&self) -> ::windows::core::Result<ImplicitAnimationCollection> {
        let this = &::windows::core::Interface::cast::<ICompositionObject2>(self)?;
        unsafe {
            let mut result__ = ::core::mem::MaybeUninit::zeroed();
            (::windows::core::Vtable::vtable(this).ImplicitAnimations)(
                ::windows::core::Vtable::as_raw(this),
                result__.as_mut_ptr(),
            )
            .from_abi::<ImplicitAnimationCollection>(result__)
        }
    }
    pub fn SetImplicitAnimations(
        &self,
        value: &ImplicitAnimationCollection,
    ) -> ::windows::core::Result<()> {
        let this = &::windows::core::Interface::cast::<ICompositionObject2>(self)?;
        unsafe {
            (::windows::core::Vtable::vtable(this).SetImplicitAnimations)(
                ::windows::core::Vtable::as_raw(this),
                ::core::mem::transmute_copy(value),
            )
            .ok()
        }
    }
    pub fn StartAnimationGroup<'a, P0, E0>(&self, value: P0) -> ::windows::core::Result<()>
    where
        P0: ::std::convert::TryInto<
            ::windows::core::InParam<'a, ICompositionAnimationBase>,
            Error = E0,
        >,
        E0: ::std::convert::Into<::windows::core::Error>,
    {
        let this = &::windows::core::Interface::cast::<ICompositionObject2>(self)?;
        unsafe {
            (::windows::core::Vtable::vtable(this).StartAnimationGroup)(
                ::windows::core::Vtable::as_raw(this),
                value.try_into().map_err(|e| e.into())?.abi(),
            )
            .ok()
        }
    }
    pub fn StopAnimationGroup<'a, P0, E0>(&self, value: P0) -> ::windows::core::Result<()>
    where
        P0: ::std::convert::TryInto<
            ::windows::core::InParam<'a, ICompositionAnimationBase>,
            Error = E0,
        >,
        E0: ::std::convert::Into<::windows::core::Error>,
    {
        let this = &::windows::core::Interface::cast::<ICompositionObject2>(self)?;
        unsafe {
            (::windows::core::Vtable::vtable(this).StopAnimationGroup)(
                ::windows::core::Vtable::as_raw(this),
                value.try_into().map_err(|e| e.into())?.abi(),
            )
            .ok()
        }
    }
    #[doc = "*Required features: `\"UI_Dispatching\"`*"]
    #[cfg(feature = "UI_Dispatching")]
    pub fn DispatcherQueue(&self) -> ::windows::core::Result<super::Dispatching::DispatcherQueue> {
        let this = &::windows::core::Interface::cast::<ICompositionObject3>(self)?;
        unsafe {
            let mut result__ = ::core::mem::MaybeUninit::zeroed();
            (::windows::core::Vtable::vtable(this).DispatcherQueue)(
                ::windows::core::Vtable::as_raw(this),
                result__.as_mut_ptr(),
            )
            .from_abi::<super::Dispatching::DispatcherQueue>(result__)
        }
    }
    pub fn TryGetAnimationController(
        &self,
        propertyname: &::windows::core::HSTRING,
    ) -> ::windows::core::Result<AnimationController> {
        let this = &::windows::core::Interface::cast::<ICompositionObject4>(self)?;
        unsafe {
            let mut result__ = ::core::mem::MaybeUninit::zeroed();
            (::windows::core::Vtable::vtable(this).TryGetAnimationController)(
                ::windows::core::Vtable::as_raw(this),
                ::core::mem::transmute_copy(propertyname),
                result__.as_mut_ptr(),
            )
            .from_abi::<AnimationController>(result__)
        }
    }
    pub fn StartAnimationWithController<'a, P0>(
        &self,
        propertyname: &::windows::core::HSTRING,
        animation: P0,
        animationcontroller: &AnimationController,
    ) -> ::windows::core::Result<()>
    where
        P0: ::std::convert::Into<::windows::core::InParam<'a, CompositionAnimation>>,
    {
        let this = &::windows::core::Interface::cast::<ICompositionObject5>(self)?;
        unsafe {
            (::windows::core::Vtable::vtable(this).StartAnimationWithController)(
                ::windows::core::Vtable::as_raw(this),
                ::core::mem::transmute_copy(propertyname),
                animation.into().abi(),
                ::core::mem::transmute_copy(animationcontroller),
            )
            .ok()
        }
    }
    pub fn Children(&self) -> ::windows::core::Result<VisualCollection> {
        let this = &::windows::core::Interface::cast::<IContainerVisual>(self)?;
        unsafe {
            let mut result__ = ::core::mem::MaybeUninit::zeroed();
            (::windows::core::Vtable::vtable(this).Children)(
                ::windows::core::Vtable::as_raw(this),
                result__.as_mut_ptr(),
            )
            .from_abi::<VisualCollection>(result__)
        }
    }
    pub fn Effect(&self) -> ::windows::core::Result<CompositionEffectBrush> {
        let this = self;
        unsafe {
            let mut result__ = ::core::mem::MaybeUninit::zeroed();
            (::windows::core::Vtable::vtable(this).Effect)(
                ::windows::core::Vtable::as_raw(this),
                result__.as_mut_ptr(),
            )
            .from_abi::<CompositionEffectBrush>(result__)
        }
    }
    pub fn SetEffect(&self, value: &CompositionEffectBrush) -> ::windows::core::Result<()> {
        let this = self;
        unsafe {
            (::windows::core::Vtable::vtable(this).SetEffect)(
                ::windows::core::Vtable::as_raw(this),
                ::core::mem::transmute_copy(value),
            )
            .ok()
        }
    }
    pub fn Shadow(&self) -> ::windows::core::Result<CompositionShadow> {
        let this = &::windows::core::Interface::cast::<ILayerVisual2>(self)?;
        unsafe {
            let mut result__ = ::core::mem::MaybeUninit::zeroed();
            (::windows::core::Vtable::vtable(this).Shadow)(
                ::windows::core::Vtable::as_raw(this),
                result__.as_mut_ptr(),
            )
            .from_abi::<CompositionShadow>(result__)
        }
    }
    pub fn SetShadow<'a, P0>(&self, value: P0) -> ::windows::core::Result<()>
    where
        P0: ::std::convert::Into<::windows::core::InParam<'a, CompositionShadow>>,
    {
        let this = &::windows::core::Interface::cast::<ILayerVisual2>(self)?;
        unsafe {
            (::windows::core::Vtable::vtable(this).SetShadow)(
                ::windows::core::Vtable::as_raw(this),
                value.into().abi(),
            )
            .ok()
        }
    }
    pub fn AnchorPoint(&self) -> ::windows::core::Result<::windows::Foundation::Numerics::Vector2> {
        let this = &::windows::core::Interface::cast::<IVisual>(self)?;
        unsafe {
            let mut result__ = ::core::mem::MaybeUninit::zeroed();
            (::windows::core::Vtable::vtable(this).AnchorPoint)(
                ::windows::core::Vtable::as_raw(this),
                result__.as_mut_ptr(),
            )
            .from_abi::<::windows::Foundation::Numerics::Vector2>(result__)
        }
    }
    pub fn SetAnchorPoint(
        &self,
        value: ::windows::Foundation::Numerics::Vector2,
    ) -> ::windows::core::Result<()> {
        let this = &::windows::core::Interface::cast::<IVisual>(self)?;
        unsafe {
            (::windows::core::Vtable::vtable(this).SetAnchorPoint)(
                ::windows::core::Vtable::as_raw(this),
                value,
            )
            .ok()
        }
    }
    pub fn BackfaceVisibility(&self) -> ::windows::core::Result<CompositionBackfaceVisibility> {
        let this = &::windows::core::Interface::cast::<IVisual>(self)?;
        unsafe {
            let mut result__ = ::core::mem::MaybeUninit::zeroed();
            (::windows::core::Vtable::vtable(this).BackfaceVisibility)(
                ::windows::core::Vtable::as_raw(this),
                result__.as_mut_ptr(),
            )
            .from_abi::<CompositionBackfaceVisibility>(result__)
        }
    }
    pub fn SetBackfaceVisibility(
        &self,
        value: CompositionBackfaceVisibility,
    ) -> ::windows::core::Result<()> {
        let this = &::windows::core::Interface::cast::<IVisual>(self)?;
        unsafe {
            (::windows::core::Vtable::vtable(this).SetBackfaceVisibility)(
                ::windows::core::Vtable::as_raw(this),
                value,
            )
            .ok()
        }
    }
    pub fn BorderMode(&self) -> ::windows::core::Result<CompositionBorderMode> {
        let this = &::windows::core::Interface::cast::<IVisual>(self)?;
        unsafe {
            let mut result__ = ::core::mem::MaybeUninit::zeroed();
            (::windows::core::Vtable::vtable(this).BorderMode)(
                ::windows::core::Vtable::as_raw(this),
                result__.as_mut_ptr(),
            )
            .from_abi::<CompositionBorderMode>(result__)
        }
    }
    pub fn SetBorderMode(&self, value: CompositionBorderMode) -> ::windows::core::Result<()> {
        let this = &::windows::core::Interface::cast::<IVisual>(self)?;
        unsafe {
            (::windows::core::Vtable::vtable(this).SetBorderMode)(
                ::windows::core::Vtable::as_raw(this),
                value,
            )
            .ok()
        }
    }
    pub fn CenterPoint(&self) -> ::windows::core::Result<::windows::Foundation::Numerics::Vector3> {
        let this = &::windows::core::Interface::cast::<IVisual>(self)?;
        unsafe {
            let mut result__ = ::core::mem::MaybeUninit::zeroed();
            (::windows::core::Vtable::vtable(this).CenterPoint)(
                ::windows::core::Vtable::as_raw(this),
                result__.as_mut_ptr(),
            )
            .from_abi::<::windows::Foundation::Numerics::Vector3>(result__)
        }
    }
    pub fn SetCenterPoint(
        &self,
        value: ::windows::Foundation::Numerics::Vector3,
    ) -> ::windows::core::Result<()> {
        let this = &::windows::core::Interface::cast::<IVisual>(self)?;
        unsafe {
            (::windows::core::Vtable::vtable(this).SetCenterPoint)(
                ::windows::core::Vtable::as_raw(this),
                value,
            )
            .ok()
        }
    }
    pub fn Clip(&self) -> ::windows::core::Result<CompositionClip> {
        let this = &::windows::core::Interface::cast::<IVisual>(self)?;
        unsafe {
            let mut result__ = ::core::mem::MaybeUninit::zeroed();
            (::windows::core::Vtable::vtable(this).Clip)(
                ::windows::core::Vtable::as_raw(this),
                result__.as_mut_ptr(),
            )
            .from_abi::<CompositionClip>(result__)
        }
    }
    pub fn SetClip<'a, P0>(&self, value: P0) -> ::windows::core::Result<()>
    where
        P0: ::std::convert::Into<::windows::core::InParam<'a, CompositionClip>>,
    {
        let this = &::windows::core::Interface::cast::<IVisual>(self)?;
        unsafe {
            (::windows::core::Vtable::vtable(this).SetClip)(
                ::windows::core::Vtable::as_raw(this),
                value.into().abi(),
            )
            .ok()
        }
    }
    pub fn CompositeMode(&self) -> ::windows::core::Result<CompositionCompositeMode> {
        let this = &::windows::core::Interface::cast::<IVisual>(self)?;
        unsafe {
            let mut result__ = ::core::mem::MaybeUninit::zeroed();
            (::windows::core::Vtable::vtable(this).CompositeMode)(
                ::windows::core::Vtable::as_raw(this),
                result__.as_mut_ptr(),
            )
            .from_abi::<CompositionCompositeMode>(result__)
        }
    }
    pub fn SetCompositeMode(&self, value: CompositionCompositeMode) -> ::windows::core::Result<()> {
        let this = &::windows::core::Interface::cast::<IVisual>(self)?;
        unsafe {
            (::windows::core::Vtable::vtable(this).SetCompositeMode)(
                ::windows::core::Vtable::as_raw(this),
                value,
            )
            .ok()
        }
    }
    pub fn IsVisible(&self) -> ::windows::core::Result<bool> {
        let this = &::windows::core::Interface::cast::<IVisual>(self)?;
        unsafe {
            let mut result__ = ::core::mem::MaybeUninit::zeroed();
            (::windows::core::Vtable::vtable(this).IsVisible)(
                ::windows::core::Vtable::as_raw(this),
                result__.as_mut_ptr(),
            )
            .from_abi::<bool>(result__)
        }
    }
    pub fn SetIsVisible(&self, value: bool) -> ::windows::core::Result<()> {
        let this = &::windows::core::Interface::cast::<IVisual>(self)?;
        unsafe {
            (::windows::core::Vtable::vtable(this).SetIsVisible)(
                ::windows::core::Vtable::as_raw(this),
                value,
            )
            .ok()
        }
    }
    pub fn Offset(&self) -> ::windows::core::Result<::windows::Foundation::Numerics::Vector3> {
        let this = &::windows::core::Interface::cast::<IVisual>(self)?;
        unsafe {
            let mut result__ = ::core::mem::MaybeUninit::zeroed();
            (::windows::core::Vtable::vtable(this).Offset)(
                ::windows::core::Vtable::as_raw(this),
                result__.as_mut_ptr(),
            )
            .from_abi::<::windows::Foundation::Numerics::Vector3>(result__)
        }
    }
    pub fn SetOffset(
        &self,
        value: ::windows::Foundation::Numerics::Vector3,
    ) -> ::windows::core::Result<()> {
        let this = &::windows::core::Interface::cast::<IVisual>(self)?;
        unsafe {
            (::windows::core::Vtable::vtable(this).SetOffset)(
                ::windows::core::Vtable::as_raw(this),
                value,
            )
            .ok()
        }
    }
    pub fn Opacity(&self) -> ::windows::core::Result<f32> {
        let this = &::windows::core::Interface::cast::<IVisual>(self)?;
        unsafe {
            let mut result__ = ::core::mem::MaybeUninit::zeroed();
            (::windows::core::Vtable::vtable(this).Opacity)(
                ::windows::core::Vtable::as_raw(this),
                result__.as_mut_ptr(),
            )
            .from_abi::<f32>(result__)
        }
    }
    pub fn SetOpacity(&self, value: f32) -> ::windows::core::Result<()> {
        let this = &::windows::core::Interface::cast::<IVisual>(self)?;
        unsafe {
            (::windows::core::Vtable::vtable(this).SetOpacity)(
                ::windows::core::Vtable::as_raw(this),
                value,
            )
            .ok()
        }
    }
    pub fn Orientation(
        &self,
    ) -> ::windows::core::Result<::windows::Foundation::Numerics::Quaternion> {
        let this = &::windows::core::Interface::cast::<IVisual>(self)?;
        unsafe {
            let mut result__ = ::core::mem::MaybeUninit::zeroed();
            (::windows::core::Vtable::vtable(this).Orientation)(
                ::windows::core::Vtable::as_raw(this),
                result__.as_mut_ptr(),
            )
            .from_abi::<::windows::Foundation::Numerics::Quaternion>(result__)
        }
    }
    pub fn SetOrientation(
        &self,
        value: ::windows::Foundation::Numerics::Quaternion,
    ) -> ::windows::core::Result<()> {
        let this = &::windows::core::Interface::cast::<IVisual>(self)?;
        unsafe {
            (::windows::core::Vtable::vtable(this).SetOrientation)(
                ::windows::core::Vtable::as_raw(this),
                value,
            )
            .ok()
        }
    }
    pub fn Parent(&self) -> ::windows::core::Result<ContainerVisual> {
        let this = &::windows::core::Interface::cast::<IVisual>(self)?;
        unsafe {
            let mut result__ = ::core::mem::MaybeUninit::zeroed();
            (::windows::core::Vtable::vtable(this).Parent)(
                ::windows::core::Vtable::as_raw(this),
                result__.as_mut_ptr(),
            )
            .from_abi::<ContainerVisual>(result__)
        }
    }
    pub fn RotationAngle(&self) -> ::windows::core::Result<f32> {
        let this = &::windows::core::Interface::cast::<IVisual>(self)?;
        unsafe {
            let mut result__ = ::core::mem::MaybeUninit::zeroed();
            (::windows::core::Vtable::vtable(this).RotationAngle)(
                ::windows::core::Vtable::as_raw(this),
                result__.as_mut_ptr(),
            )
            .from_abi::<f32>(result__)
        }
    }
    pub fn SetRotationAngle(&self, value: f32) -> ::windows::core::Result<()> {
        let this = &::windows::core::Interface::cast::<IVisual>(self)?;
        unsafe {
            (::windows::core::Vtable::vtable(this).SetRotationAngle)(
                ::windows::core::Vtable::as_raw(this),
                value,
            )
            .ok()
        }
    }
    pub fn RotationAngleInDegrees(&self) -> ::windows::core::Result<f32> {
        let this = &::windows::core::Interface::cast::<IVisual>(self)?;
        unsafe {
            let mut result__ = ::core::mem::MaybeUninit::zeroed();
            (::windows::core::Vtable::vtable(this).RotationAngleInDegrees)(
                ::windows::core::Vtable::as_raw(this),
                result__.as_mut_ptr(),
            )
            .from_abi::<f32>(result__)
        }
    }
    pub fn SetRotationAngleInDegrees(&self, value: f32) -> ::windows::core::Result<()> {
        let this = &::windows::core::Interface::cast::<IVisual>(self)?;
        unsafe {
            (::windows::core::Vtable::vtable(this).SetRotationAngleInDegrees)(
                ::windows::core::Vtable::as_raw(this),
                value,
            )
            .ok()
        }
    }
    pub fn RotationAxis(
        &self,
    ) -> ::windows::core::Result<::windows::Foundation::Numerics::Vector3> {
        let this = &::windows::core::Interface::cast::<IVisual>(self)?;
        unsafe {
            let mut result__ = ::core::mem::MaybeUninit::zeroed();
            (::windows::core::Vtable::vtable(this).RotationAxis)(
                ::windows::core::Vtable::as_raw(this),
                result__.as_mut_ptr(),
            )
            .from_abi::<::windows::Foundation::Numerics::Vector3>(result__)
        }
    }
    pub fn SetRotationAxis(
        &self,
        value: ::windows::Foundation::Numerics::Vector3,
    ) -> ::windows::core::Result<()> {
        let this = &::windows::core::Interface::cast::<IVisual>(self)?;
        unsafe {
            (::windows::core::Vtable::vtable(this).SetRotationAxis)(
                ::windows::core::Vtable::as_raw(this),
                value,
            )
            .ok()
        }
    }
    pub fn Scale(&self) -> ::windows::core::Result<::windows::Foundation::Numerics::Vector3> {
        let this = &::windows::core::Interface::cast::<IVisual>(self)?;
        unsafe {
            let mut result__ = ::core::mem::MaybeUninit::zeroed();
            (::windows::core::Vtable::vtable(this).Scale)(
                ::windows::core::Vtable::as_raw(this),
                result__.as_mut_ptr(),
            )
            .from_abi::<::windows::Foundation::Numerics::Vector3>(result__)
        }
    }
    pub fn SetScale(
        &self,
        value: ::windows::Foundation::Numerics::Vector3,
    ) -> ::windows::core::Result<()> {
        let this = &::windows::core::Interface::cast::<IVisual>(self)?;
        unsafe {
            (::windows::core::Vtable::vtable(this).SetScale)(
                ::windows::core::Vtable::as_raw(this),
                value,
            )
            .ok()
        }
    }
    pub fn Size(&self) -> ::windows::core::Result<::windows::Foundation::Numerics::Vector2> {
        let this = &::windows::core::Interface::cast::<IVisual>(self)?;
        unsafe {
            let mut result__ = ::core::mem::MaybeUninit::zeroed();
            (::windows::core::Vtable::vtable(this).Size)(
                ::windows::core::Vtable::as_raw(this),
                result__.as_mut_ptr(),
            )
            .from_abi::<::windows::Foundation::Numerics::Vector2>(result__)
        }
    }
    pub fn SetSize(
        &self,
        value: ::windows::Foundation::Numerics::Vector2,
    ) -> ::windows::core::Result<()> {
        let this = &::windows::core::Interface::cast::<IVisual>(self)?;
        unsafe {
            (::windows::core::Vtable::vtable(this).SetSize)(
                ::windows::core::Vtable::as_raw(this),
                value,
            )
            .ok()
        }
    }
    pub fn TransformMatrix(
        &self,
    ) -> ::windows::core::Result<::windows::Foundation::Numerics::Matrix4x4> {
        let this = &::windows::core::Interface::cast::<IVisual>(self)?;
        unsafe {
            let mut result__ = ::core::mem::MaybeUninit::zeroed();
            (::windows::core::Vtable::vtable(this).TransformMatrix)(
                ::windows::core::Vtable::as_raw(this),
                result__.as_mut_ptr(),
            )
            .from_abi::<::windows::Foundation::Numerics::Matrix4x4>(result__)
        }
    }
    pub fn SetTransformMatrix(
        &self,
        value: ::windows::Foundation::Numerics::Matrix4x4,
    ) -> ::windows::core::Result<()> {
        let this = &::windows::core::Interface::cast::<IVisual>(self)?;
        unsafe {
            (::windows::core::Vtable::vtable(this).SetTransformMatrix)(
                ::windows::core::Vtable::as_raw(this),
                value,
            )
            .ok()
        }
    }
    pub fn ParentForTransform(&self) -> ::windows::core::Result<Visual> {
        let this = &::windows::core::Interface::cast::<IVisual2>(self)?;
        unsafe {
            let mut result__ = ::core::mem::MaybeUninit::zeroed();
            (::windows::core::Vtable::vtable(this).ParentForTransform)(
                ::windows::core::Vtable::as_raw(this),
                result__.as_mut_ptr(),
            )
            .from_abi::<Visual>(result__)
        }
    }
    pub fn SetParentForTransform<'a, P0>(&self, value: P0) -> ::windows::core::Result<()>
    where
        P0: ::std::convert::Into<::windows::core::InParam<'a, Visual>>,
    {
        let this = &::windows::core::Interface::cast::<IVisual2>(self)?;
        unsafe {
            (::windows::core::Vtable::vtable(this).SetParentForTransform)(
                ::windows::core::Vtable::as_raw(this),
                value.into().abi(),
            )
            .ok()
        }
    }
    pub fn RelativeOffsetAdjustment(
        &self,
    ) -> ::windows::core::Result<::windows::Foundation::Numerics::Vector3> {
        let this = &::windows::core::Interface::cast::<IVisual2>(self)?;
        unsafe {
            let mut result__ = ::core::mem::MaybeUninit::zeroed();
            (::windows::core::Vtable::vtable(this).RelativeOffsetAdjustment)(
                ::windows::core::Vtable::as_raw(this),
                result__.as_mut_ptr(),
            )
            .from_abi::<::windows::Foundation::Numerics::Vector3>(result__)
        }
    }
    pub fn SetRelativeOffsetAdjustment(
        &self,
        value: ::windows::Foundation::Numerics::Vector3,
    ) -> ::windows::core::Result<()> {
        let this = &::windows::core::Interface::cast::<IVisual2>(self)?;
        unsafe {
            (::windows::core::Vtable::vtable(this).SetRelativeOffsetAdjustment)(
                ::windows::core::Vtable::as_raw(this),
                value,
            )
            .ok()
        }
    }
    pub fn RelativeSizeAdjustment(
        &self,
    ) -> ::windows::core::Result<::windows::Foundation::Numerics::Vector2> {
        let this = &::windows::core::Interface::cast::<IVisual2>(self)?;
        unsafe {
            let mut result__ = ::core::mem::MaybeUninit::zeroed();
            (::windows::core::Vtable::vtable(this).RelativeSizeAdjustment)(
                ::windows::core::Vtable::as_raw(this),
                result__.as_mut_ptr(),
            )
            .from_abi::<::windows::Foundation::Numerics::Vector2>(result__)
        }
    }
    pub fn SetRelativeSizeAdjustment(
        &self,
        value: ::windows::Foundation::Numerics::Vector2,
    ) -> ::windows::core::Result<()> {
        let this = &::windows::core::Interface::cast::<IVisual2>(self)?;
        unsafe {
            (::windows::core::Vtable::vtable(this).SetRelativeSizeAdjustment)(
                ::windows::core::Vtable::as_raw(this),
                value,
            )
            .ok()
        }
    }
    pub fn IsHitTestVisible(&self) -> ::windows::core::Result<bool> {
        let this = &::windows::core::Interface::cast::<IVisual3>(self)?;
        unsafe {
            let mut result__ = ::core::mem::MaybeUninit::zeroed();
            (::windows::core::Vtable::vtable(this).IsHitTestVisible)(
                ::windows::core::Vtable::as_raw(this),
                result__.as_mut_ptr(),
            )
            .from_abi::<bool>(result__)
        }
    }
    pub fn SetIsHitTestVisible(&self, value: bool) -> ::windows::core::Result<()> {
        let this = &::windows::core::Interface::cast::<IVisual3>(self)?;
        unsafe {
            (::windows::core::Vtable::vtable(this).SetIsHitTestVisible)(
                ::windows::core::Vtable::as_raw(this),
                value,
            )
            .ok()
        }
    }
    pub fn IsPixelSnappingEnabled(&self) -> ::windows::core::Result<bool> {
        let this = &::windows::core::Interface::cast::<IVisual4>(self)?;
        unsafe {
            let mut result__ = ::core::mem::MaybeUninit::zeroed();
            (::windows::core::Vtable::vtable(this).IsPixelSnappingEnabled)(
                ::windows::core::Vtable::as_raw(this),
                result__.as_mut_ptr(),
            )
            .from_abi::<bool>(result__)
        }
    }
    pub fn SetIsPixelSnappingEnabled(&self, value: bool) -> ::windows::core::Result<()> {
        let this = &::windows::core::Interface::cast::<IVisual4>(self)?;
        unsafe {
            (::windows::core::Vtable::vtable(this).SetIsPixelSnappingEnabled)(
                ::windows::core::Vtable::as_raw(this),
                value,
            )
            .ok()
        }
    }
}
impl ::core::clone::Clone for LayerVisual {
    fn clone(&self) -> Self {
        Self(self.0.clone())
    }
}
impl ::core::cmp::PartialEq for LayerVisual {
    fn eq(&self, other: &Self) -> bool {
        self.0 == other.0
    }
}
impl ::core::cmp::Eq for LayerVisual {}
impl ::core::fmt::Debug for LayerVisual {
    fn fmt(&self, f: &mut ::core::fmt::Formatter<'_>) -> ::core::fmt::Result {
        f.debug_tuple("LayerVisual").field(&self.0).finish()
    }
}
unsafe impl ::windows::core::RuntimeType for LayerVisual {
    const SIGNATURE: ::windows::core::ConstBuffer = ::windows::core::ConstBuffer::from_slice(
        b"rc(Microsoft.UI.Composition.LayerVisual;{64d05ca1-3bf6-5d4f-98a1-7500f2f23ebe})",
    );
    type DefaultType = ::core::option::Option<Self>;
    fn from_default(from: &Self::DefaultType) -> ::windows::core::Result<Self> {
        from.as_ref().cloned().ok_or(::windows::core::Error::OK)
    }
}
unsafe impl ::windows::core::Vtable for LayerVisual {
    type Vtable = ILayerVisual_Vtbl;
}
unsafe impl ::windows::core::Interface for LayerVisual {
    const IID: ::windows::core::GUID = <ILayerVisual as ::windows::core::Interface>::IID;
}
impl ::windows::core::RuntimeName for LayerVisual {
    const NAME: &'static str = "Microsoft.UI.Composition.LayerVisual";
}
::windows::core::interface_hierarchy!(
    LayerVisual,
    ::windows::core::IUnknown,
    ::windows::core::IInspectable
);
impl ::core::convert::TryFrom<LayerVisual> for IAnimationObject {
    type Error = ::windows::core::Error;
    fn try_from(value: LayerVisual) -> ::windows::core::Result<Self> {
        ::core::convert::TryFrom::try_from(&value)
    }
}
impl ::core::convert::TryFrom<&LayerVisual> for IAnimationObject {
    type Error = ::windows::core::Error;
    fn try_from(value: &LayerVisual) -> ::windows::core::Result<Self> {
        ::windows::core::Interface::cast(value)
    }
}
impl<'a> ::core::convert::TryFrom<&LayerVisual> for ::windows::core::InParam<'a, IAnimationObject> {
    type Error = ::windows::core::Error;
    fn try_from(value: &LayerVisual) -> ::windows::core::Result<Self> {
        let item = ::std::convert::TryInto::try_into(value)?;
        Ok(::windows::core::InParam::owned(item))
    }
}
impl ::core::convert::TryFrom<LayerVisual> for ::windows::Foundation::IClosable {
    type Error = ::windows::core::Error;
    fn try_from(value: LayerVisual) -> ::windows::core::Result<Self> {
        ::core::convert::TryFrom::try_from(&value)
    }
}
impl ::core::convert::TryFrom<&LayerVisual> for ::windows::Foundation::IClosable {
    type Error = ::windows::core::Error;
    fn try_from(value: &LayerVisual) -> ::windows::core::Result<Self> {
        ::windows::core::Interface::cast(value)
    }
}
impl<'a> ::core::convert::TryFrom<&LayerVisual>
    for ::windows::core::InParam<'a, ::windows::Foundation::IClosable>
{
    type Error = ::windows::core::Error;
    fn try_from(value: &LayerVisual) -> ::windows::core::Result<Self> {
        let item = ::std::convert::TryInto::try_into(value)?;
        Ok(::windows::core::InParam::owned(item))
    }
}
impl ::core::convert::From<LayerVisual> for ContainerVisual {
    fn from(value: LayerVisual) -> Self {
        ::core::convert::From::from(&value)
    }
}
impl ::core::convert::From<&LayerVisual> for ContainerVisual {
    fn from(value: &LayerVisual) -> Self {
        ::windows::core::Interface::cast(value).unwrap()
    }
}
impl<'a> ::core::convert::From<&LayerVisual> for ::windows::core::InParam<'a, ContainerVisual> {
    fn from(value: &LayerVisual) -> Self {
        ::windows::core::InParam::owned(value.into())
    }
}
impl ::core::convert::From<LayerVisual> for Visual {
    fn from(value: LayerVisual) -> Self {
        ::core::convert::From::from(&value)
    }
}
impl ::core::convert::From<&LayerVisual> for Visual {
    fn from(value: &LayerVisual) -> Self {
        ::windows::core::Interface::cast(value).unwrap()
    }
}
impl<'a> ::core::convert::From<&LayerVisual> for ::windows::core::InParam<'a, Visual> {
    fn from(value: &LayerVisual) -> Self {
        ::windows::core::InParam::owned(value.into())
    }
}
impl ::core::convert::From<LayerVisual> for CompositionObject {
    fn from(value: LayerVisual) -> Self {
        ::core::convert::From::from(&value)
    }
}
impl ::core::convert::From<&LayerVisual> for CompositionObject {
    fn from(value: &LayerVisual) -> Self {
        ::windows::core::Interface::cast(value).unwrap()
    }
}
impl<'a> ::core::convert::From<&LayerVisual> for ::windows::core::InParam<'a, CompositionObject> {
    fn from(value: &LayerVisual) -> Self {
        ::windows::core::InParam::owned(value.into())
    }
}
unsafe impl ::core::marker::Send for LayerVisual {}
unsafe impl ::core::marker::Sync for LayerVisual {}
#[doc = "*Required features: `\"UI_Composition\"`*"]
#[repr(transparent)]
pub struct LinearEasingFunction(::windows::core::IUnknown);
impl LinearEasingFunction {
    pub fn PopulatePropertyInfo(
        &self,
        propertyname: &::windows::core::HSTRING,
        propertyinfo: &AnimationPropertyInfo,
    ) -> ::windows::core::Result<()> {
        let this = &::windows::core::Interface::cast::<IAnimationObject>(self)?;
        unsafe {
            (::windows::core::Vtable::vtable(this).PopulatePropertyInfo)(
                ::windows::core::Vtable::as_raw(this),
                ::core::mem::transmute_copy(propertyname),
                ::core::mem::transmute_copy(propertyinfo),
            )
            .ok()
        }
    }
    pub fn Close(&self) -> ::windows::core::Result<()> {
        let this = &::windows::core::Interface::cast::<::windows::Foundation::IClosable>(self)?;
        unsafe {
            (::windows::core::Vtable::vtable(this).Close)(::windows::core::Vtable::as_raw(this))
                .ok()
        }
    }
    pub fn Compositor(&self) -> ::windows::core::Result<Compositor> {
        let this = &::windows::core::Interface::cast::<ICompositionObject>(self)?;
        unsafe {
            let mut result__ = ::core::mem::MaybeUninit::zeroed();
            (::windows::core::Vtable::vtable(this).Compositor)(
                ::windows::core::Vtable::as_raw(this),
                result__.as_mut_ptr(),
            )
            .from_abi::<Compositor>(result__)
        }
    }
    pub fn Properties(&self) -> ::windows::core::Result<CompositionPropertySet> {
        let this = &::windows::core::Interface::cast::<ICompositionObject>(self)?;
        unsafe {
            let mut result__ = ::core::mem::MaybeUninit::zeroed();
            (::windows::core::Vtable::vtable(this).Properties)(
                ::windows::core::Vtable::as_raw(this),
                result__.as_mut_ptr(),
            )
            .from_abi::<CompositionPropertySet>(result__)
        }
    }
    pub fn StartAnimation<'a, P0>(
        &self,
        propertyname: &::windows::core::HSTRING,
        animation: P0,
    ) -> ::windows::core::Result<()>
    where
        P0: ::std::convert::Into<::windows::core::InParam<'a, CompositionAnimation>>,
    {
        let this = &::windows::core::Interface::cast::<ICompositionObject>(self)?;
        unsafe {
            (::windows::core::Vtable::vtable(this).StartAnimation)(
                ::windows::core::Vtable::as_raw(this),
                ::core::mem::transmute_copy(propertyname),
                animation.into().abi(),
            )
            .ok()
        }
    }
    pub fn StopAnimation(
        &self,
        propertyname: &::windows::core::HSTRING,
    ) -> ::windows::core::Result<()> {
        let this = &::windows::core::Interface::cast::<ICompositionObject>(self)?;
        unsafe {
            (::windows::core::Vtable::vtable(this).StopAnimation)(
                ::windows::core::Vtable::as_raw(this),
                ::core::mem::transmute_copy(propertyname),
            )
            .ok()
        }
    }
    pub fn Comment(&self) -> ::windows::core::Result<::windows::core::HSTRING> {
        let this = &::windows::core::Interface::cast::<ICompositionObject2>(self)?;
        unsafe {
            let mut result__ = ::core::mem::MaybeUninit::zeroed();
            (::windows::core::Vtable::vtable(this).Comment)(
                ::windows::core::Vtable::as_raw(this),
                result__.as_mut_ptr(),
            )
            .from_abi::<::windows::core::HSTRING>(result__)
        }
    }
    pub fn SetComment(&self, value: &::windows::core::HSTRING) -> ::windows::core::Result<()> {
        let this = &::windows::core::Interface::cast::<ICompositionObject2>(self)?;
        unsafe {
            (::windows::core::Vtable::vtable(this).SetComment)(
                ::windows::core::Vtable::as_raw(this),
                ::core::mem::transmute_copy(value),
            )
            .ok()
        }
    }
    pub fn ImplicitAnimations(&self) -> ::windows::core::Result<ImplicitAnimationCollection> {
        let this = &::windows::core::Interface::cast::<ICompositionObject2>(self)?;
        unsafe {
            let mut result__ = ::core::mem::MaybeUninit::zeroed();
            (::windows::core::Vtable::vtable(this).ImplicitAnimations)(
                ::windows::core::Vtable::as_raw(this),
                result__.as_mut_ptr(),
            )
            .from_abi::<ImplicitAnimationCollection>(result__)
        }
    }
    pub fn SetImplicitAnimations(
        &self,
        value: &ImplicitAnimationCollection,
    ) -> ::windows::core::Result<()> {
        let this = &::windows::core::Interface::cast::<ICompositionObject2>(self)?;
        unsafe {
            (::windows::core::Vtable::vtable(this).SetImplicitAnimations)(
                ::windows::core::Vtable::as_raw(this),
                ::core::mem::transmute_copy(value),
            )
            .ok()
        }
    }
    pub fn StartAnimationGroup<'a, P0, E0>(&self, value: P0) -> ::windows::core::Result<()>
    where
        P0: ::std::convert::TryInto<
            ::windows::core::InParam<'a, ICompositionAnimationBase>,
            Error = E0,
        >,
        E0: ::std::convert::Into<::windows::core::Error>,
    {
        let this = &::windows::core::Interface::cast::<ICompositionObject2>(self)?;
        unsafe {
            (::windows::core::Vtable::vtable(this).StartAnimationGroup)(
                ::windows::core::Vtable::as_raw(this),
                value.try_into().map_err(|e| e.into())?.abi(),
            )
            .ok()
        }
    }
    pub fn StopAnimationGroup<'a, P0, E0>(&self, value: P0) -> ::windows::core::Result<()>
    where
        P0: ::std::convert::TryInto<
            ::windows::core::InParam<'a, ICompositionAnimationBase>,
            Error = E0,
        >,
        E0: ::std::convert::Into<::windows::core::Error>,
    {
        let this = &::windows::core::Interface::cast::<ICompositionObject2>(self)?;
        unsafe {
            (::windows::core::Vtable::vtable(this).StopAnimationGroup)(
                ::windows::core::Vtable::as_raw(this),
                value.try_into().map_err(|e| e.into())?.abi(),
            )
            .ok()
        }
    }
    #[doc = "*Required features: `\"UI_Dispatching\"`*"]
    #[cfg(feature = "UI_Dispatching")]
    pub fn DispatcherQueue(&self) -> ::windows::core::Result<super::Dispatching::DispatcherQueue> {
        let this = &::windows::core::Interface::cast::<ICompositionObject3>(self)?;
        unsafe {
            let mut result__ = ::core::mem::MaybeUninit::zeroed();
            (::windows::core::Vtable::vtable(this).DispatcherQueue)(
                ::windows::core::Vtable::as_raw(this),
                result__.as_mut_ptr(),
            )
            .from_abi::<super::Dispatching::DispatcherQueue>(result__)
        }
    }
    pub fn TryGetAnimationController(
        &self,
        propertyname: &::windows::core::HSTRING,
    ) -> ::windows::core::Result<AnimationController> {
        let this = &::windows::core::Interface::cast::<ICompositionObject4>(self)?;
        unsafe {
            let mut result__ = ::core::mem::MaybeUninit::zeroed();
            (::windows::core::Vtable::vtable(this).TryGetAnimationController)(
                ::windows::core::Vtable::as_raw(this),
                ::core::mem::transmute_copy(propertyname),
                result__.as_mut_ptr(),
            )
            .from_abi::<AnimationController>(result__)
        }
    }
    pub fn StartAnimationWithController<'a, P0>(
        &self,
        propertyname: &::windows::core::HSTRING,
        animation: P0,
        animationcontroller: &AnimationController,
    ) -> ::windows::core::Result<()>
    where
        P0: ::std::convert::Into<::windows::core::InParam<'a, CompositionAnimation>>,
    {
        let this = &::windows::core::Interface::cast::<ICompositionObject5>(self)?;
        unsafe {
            (::windows::core::Vtable::vtable(this).StartAnimationWithController)(
                ::windows::core::Vtable::as_raw(this),
                ::core::mem::transmute_copy(propertyname),
                animation.into().abi(),
                ::core::mem::transmute_copy(animationcontroller),
            )
            .ok()
        }
    }
}
impl ::core::clone::Clone for LinearEasingFunction {
    fn clone(&self) -> Self {
        Self(self.0.clone())
    }
}
impl ::core::cmp::PartialEq for LinearEasingFunction {
    fn eq(&self, other: &Self) -> bool {
        self.0 == other.0
    }
}
impl ::core::cmp::Eq for LinearEasingFunction {}
impl ::core::fmt::Debug for LinearEasingFunction {
    fn fmt(&self, f: &mut ::core::fmt::Formatter<'_>) -> ::core::fmt::Result {
        f.debug_tuple("LinearEasingFunction").field(&self.0).finish()
    }
}
unsafe impl ::windows::core::RuntimeType for LinearEasingFunction {
    const SIGNATURE: ::windows::core::ConstBuffer = ::windows::core::ConstBuffer::from_slice(
        b"rc(Microsoft.UI.Composition.LinearEasingFunction;{79bfeef6-70c7-50a6-bb3a-0e9636148695})",
    );
    type DefaultType = ::core::option::Option<Self>;
    fn from_default(from: &Self::DefaultType) -> ::windows::core::Result<Self> {
        from.as_ref().cloned().ok_or(::windows::core::Error::OK)
    }
}
unsafe impl ::windows::core::Vtable for LinearEasingFunction {
    type Vtable = ILinearEasingFunction_Vtbl;
}
unsafe impl ::windows::core::Interface for LinearEasingFunction {
    const IID: ::windows::core::GUID = <ILinearEasingFunction as ::windows::core::Interface>::IID;
}
impl ::windows::core::RuntimeName for LinearEasingFunction {
    const NAME: &'static str = "Microsoft.UI.Composition.LinearEasingFunction";
}
::windows::core::interface_hierarchy!(
    LinearEasingFunction,
    ::windows::core::IUnknown,
    ::windows::core::IInspectable
);
impl ::core::convert::TryFrom<LinearEasingFunction> for IAnimationObject {
    type Error = ::windows::core::Error;
    fn try_from(value: LinearEasingFunction) -> ::windows::core::Result<Self> {
        ::core::convert::TryFrom::try_from(&value)
    }
}
impl ::core::convert::TryFrom<&LinearEasingFunction> for IAnimationObject {
    type Error = ::windows::core::Error;
    fn try_from(value: &LinearEasingFunction) -> ::windows::core::Result<Self> {
        ::windows::core::Interface::cast(value)
    }
}
impl<'a> ::core::convert::TryFrom<&LinearEasingFunction>
    for ::windows::core::InParam<'a, IAnimationObject>
{
    type Error = ::windows::core::Error;
    fn try_from(value: &LinearEasingFunction) -> ::windows::core::Result<Self> {
        let item = ::std::convert::TryInto::try_into(value)?;
        Ok(::windows::core::InParam::owned(item))
    }
}
impl ::core::convert::TryFrom<LinearEasingFunction> for ::windows::Foundation::IClosable {
    type Error = ::windows::core::Error;
    fn try_from(value: LinearEasingFunction) -> ::windows::core::Result<Self> {
        ::core::convert::TryFrom::try_from(&value)
    }
}
impl ::core::convert::TryFrom<&LinearEasingFunction> for ::windows::Foundation::IClosable {
    type Error = ::windows::core::Error;
    fn try_from(value: &LinearEasingFunction) -> ::windows::core::Result<Self> {
        ::windows::core::Interface::cast(value)
    }
}
impl<'a> ::core::convert::TryFrom<&LinearEasingFunction>
    for ::windows::core::InParam<'a, ::windows::Foundation::IClosable>
{
    type Error = ::windows::core::Error;
    fn try_from(value: &LinearEasingFunction) -> ::windows::core::Result<Self> {
        let item = ::std::convert::TryInto::try_into(value)?;
        Ok(::windows::core::InParam::owned(item))
    }
}
impl ::core::convert::From<LinearEasingFunction> for CompositionEasingFunction {
    fn from(value: LinearEasingFunction) -> Self {
        ::core::convert::From::from(&value)
    }
}
impl ::core::convert::From<&LinearEasingFunction> for CompositionEasingFunction {
    fn from(value: &LinearEasingFunction) -> Self {
        ::windows::core::Interface::cast(value).unwrap()
    }
}
impl<'a> ::core::convert::From<&LinearEasingFunction>
    for ::windows::core::InParam<'a, CompositionEasingFunction>
{
    fn from(value: &LinearEasingFunction) -> Self {
        ::windows::core::InParam::owned(value.into())
    }
}
impl ::core::convert::From<LinearEasingFunction> for CompositionObject {
    fn from(value: LinearEasingFunction) -> Self {
        ::core::convert::From::from(&value)
    }
}
impl ::core::convert::From<&LinearEasingFunction> for CompositionObject {
    fn from(value: &LinearEasingFunction) -> Self {
        ::windows::core::Interface::cast(value).unwrap()
    }
}
impl<'a> ::core::convert::From<&LinearEasingFunction>
    for ::windows::core::InParam<'a, CompositionObject>
{
    fn from(value: &LinearEasingFunction) -> Self {
        ::windows::core::InParam::owned(value.into())
    }
}
unsafe impl ::core::marker::Send for LinearEasingFunction {}
unsafe impl ::core::marker::Sync for LinearEasingFunction {}
#[doc = "*Required features: `\"UI_Composition\"`*"]
#[repr(transparent)]
pub struct NaturalMotionAnimation(::windows::core::IUnknown);
impl NaturalMotionAnimation {
    pub fn PopulatePropertyInfo(
        &self,
        propertyname: &::windows::core::HSTRING,
        propertyinfo: &AnimationPropertyInfo,
    ) -> ::windows::core::Result<()> {
        let this = &::windows::core::Interface::cast::<IAnimationObject>(self)?;
        unsafe {
            (::windows::core::Vtable::vtable(this).PopulatePropertyInfo)(
                ::windows::core::Vtable::as_raw(this),
                ::core::mem::transmute_copy(propertyname),
                ::core::mem::transmute_copy(propertyinfo),
            )
            .ok()
        }
    }
    pub fn Close(&self) -> ::windows::core::Result<()> {
        let this = &::windows::core::Interface::cast::<::windows::Foundation::IClosable>(self)?;
        unsafe {
            (::windows::core::Vtable::vtable(this).Close)(::windows::core::Vtable::as_raw(this))
                .ok()
        }
    }
    pub fn ClearAllParameters(&self) -> ::windows::core::Result<()> {
        let this = &::windows::core::Interface::cast::<ICompositionAnimation>(self)?;
        unsafe {
            (::windows::core::Vtable::vtable(this).ClearAllParameters)(
                ::windows::core::Vtable::as_raw(this),
            )
            .ok()
        }
    }
    pub fn ClearParameter(&self, key: &::windows::core::HSTRING) -> ::windows::core::Result<()> {
        let this = &::windows::core::Interface::cast::<ICompositionAnimation>(self)?;
        unsafe {
            (::windows::core::Vtable::vtable(this).ClearParameter)(
                ::windows::core::Vtable::as_raw(this),
                ::core::mem::transmute_copy(key),
            )
            .ok()
        }
    }
    pub fn SetColorParameter(
        &self,
        key: &::windows::core::HSTRING,
        value: ::windows::UI::Color,
    ) -> ::windows::core::Result<()> {
        let this = &::windows::core::Interface::cast::<ICompositionAnimation>(self)?;
        unsafe {
            (::windows::core::Vtable::vtable(this).SetColorParameter)(
                ::windows::core::Vtable::as_raw(this),
                ::core::mem::transmute_copy(key),
                value,
            )
            .ok()
        }
    }
    pub fn SetMatrix3x2Parameter(
        &self,
        key: &::windows::core::HSTRING,
        value: ::windows::Foundation::Numerics::Matrix3x2,
    ) -> ::windows::core::Result<()> {
        let this = &::windows::core::Interface::cast::<ICompositionAnimation>(self)?;
        unsafe {
            (::windows::core::Vtable::vtable(this).SetMatrix3x2Parameter)(
                ::windows::core::Vtable::as_raw(this),
                ::core::mem::transmute_copy(key),
                value,
            )
            .ok()
        }
    }
    pub fn SetMatrix4x4Parameter(
        &self,
        key: &::windows::core::HSTRING,
        value: ::windows::Foundation::Numerics::Matrix4x4,
    ) -> ::windows::core::Result<()> {
        let this = &::windows::core::Interface::cast::<ICompositionAnimation>(self)?;
        unsafe {
            (::windows::core::Vtable::vtable(this).SetMatrix4x4Parameter)(
                ::windows::core::Vtable::as_raw(this),
                ::core::mem::transmute_copy(key),
                value,
            )
            .ok()
        }
    }
    pub fn SetQuaternionParameter(
        &self,
        key: &::windows::core::HSTRING,
        value: ::windows::Foundation::Numerics::Quaternion,
    ) -> ::windows::core::Result<()> {
        let this = &::windows::core::Interface::cast::<ICompositionAnimation>(self)?;
        unsafe {
            (::windows::core::Vtable::vtable(this).SetQuaternionParameter)(
                ::windows::core::Vtable::as_raw(this),
                ::core::mem::transmute_copy(key),
                value,
            )
            .ok()
        }
    }
    pub fn SetReferenceParameter<'a, P0>(
        &self,
        key: &::windows::core::HSTRING,
        compositionobject: P0,
    ) -> ::windows::core::Result<()>
    where
        P0: ::std::convert::Into<::windows::core::InParam<'a, CompositionObject>>,
    {
        let this = &::windows::core::Interface::cast::<ICompositionAnimation>(self)?;
        unsafe {
            (::windows::core::Vtable::vtable(this).SetReferenceParameter)(
                ::windows::core::Vtable::as_raw(this),
                ::core::mem::transmute_copy(key),
                compositionobject.into().abi(),
            )
            .ok()
        }
    }
    pub fn SetScalarParameter(
        &self,
        key: &::windows::core::HSTRING,
        value: f32,
    ) -> ::windows::core::Result<()> {
        let this = &::windows::core::Interface::cast::<ICompositionAnimation>(self)?;
        unsafe {
            (::windows::core::Vtable::vtable(this).SetScalarParameter)(
                ::windows::core::Vtable::as_raw(this),
                ::core::mem::transmute_copy(key),
                value,
            )
            .ok()
        }
    }
    pub fn SetVector2Parameter(
        &self,
        key: &::windows::core::HSTRING,
        value: ::windows::Foundation::Numerics::Vector2,
    ) -> ::windows::core::Result<()> {
        let this = &::windows::core::Interface::cast::<ICompositionAnimation>(self)?;
        unsafe {
            (::windows::core::Vtable::vtable(this).SetVector2Parameter)(
                ::windows::core::Vtable::as_raw(this),
                ::core::mem::transmute_copy(key),
                value,
            )
            .ok()
        }
    }
    pub fn SetVector3Parameter(
        &self,
        key: &::windows::core::HSTRING,
        value: ::windows::Foundation::Numerics::Vector3,
    ) -> ::windows::core::Result<()> {
        let this = &::windows::core::Interface::cast::<ICompositionAnimation>(self)?;
        unsafe {
            (::windows::core::Vtable::vtable(this).SetVector3Parameter)(
                ::windows::core::Vtable::as_raw(this),
                ::core::mem::transmute_copy(key),
                value,
            )
            .ok()
        }
    }
    pub fn SetVector4Parameter(
        &self,
        key: &::windows::core::HSTRING,
        value: ::windows::Foundation::Numerics::Vector4,
    ) -> ::windows::core::Result<()> {
        let this = &::windows::core::Interface::cast::<ICompositionAnimation>(self)?;
        unsafe {
            (::windows::core::Vtable::vtable(this).SetVector4Parameter)(
                ::windows::core::Vtable::as_raw(this),
                ::core::mem::transmute_copy(key),
                value,
            )
            .ok()
        }
    }
    pub fn SetBooleanParameter(
        &self,
        key: &::windows::core::HSTRING,
        value: bool,
    ) -> ::windows::core::Result<()> {
        let this = &::windows::core::Interface::cast::<ICompositionAnimation2>(self)?;
        unsafe {
            (::windows::core::Vtable::vtable(this).SetBooleanParameter)(
                ::windows::core::Vtable::as_raw(this),
                ::core::mem::transmute_copy(key),
                value,
            )
            .ok()
        }
    }
    pub fn Target(&self) -> ::windows::core::Result<::windows::core::HSTRING> {
        let this = &::windows::core::Interface::cast::<ICompositionAnimation2>(self)?;
        unsafe {
            let mut result__ = ::core::mem::MaybeUninit::zeroed();
            (::windows::core::Vtable::vtable(this).Target)(
                ::windows::core::Vtable::as_raw(this),
                result__.as_mut_ptr(),
            )
            .from_abi::<::windows::core::HSTRING>(result__)
        }
    }
    pub fn SetTarget(&self, value: &::windows::core::HSTRING) -> ::windows::core::Result<()> {
        let this = &::windows::core::Interface::cast::<ICompositionAnimation2>(self)?;
        unsafe {
            (::windows::core::Vtable::vtable(this).SetTarget)(
                ::windows::core::Vtable::as_raw(this),
                ::core::mem::transmute_copy(value),
            )
            .ok()
        }
    }
    pub fn InitialValueExpressions(
        &self,
    ) -> ::windows::core::Result<InitialValueExpressionCollection> {
        let this = &::windows::core::Interface::cast::<ICompositionAnimation3>(self)?;
        unsafe {
            let mut result__ = ::core::mem::MaybeUninit::zeroed();
            (::windows::core::Vtable::vtable(this).InitialValueExpressions)(
                ::windows::core::Vtable::as_raw(this),
                result__.as_mut_ptr(),
            )
            .from_abi::<InitialValueExpressionCollection>(result__)
        }
    }
    pub fn SetExpressionReferenceParameter<'a, P0, E0>(
        &self,
        parametername: &::windows::core::HSTRING,
        source: P0,
    ) -> ::windows::core::Result<()>
    where
        P0: ::std::convert::TryInto<::windows::core::InParam<'a, IAnimationObject>, Error = E0>,
        E0: ::std::convert::Into<::windows::core::Error>,
    {
        let this = &::windows::core::Interface::cast::<ICompositionAnimation4>(self)?;
        unsafe {
            (::windows::core::Vtable::vtable(this).SetExpressionReferenceParameter)(
                ::windows::core::Vtable::as_raw(this),
                ::core::mem::transmute_copy(parametername),
                source.try_into().map_err(|e| e.into())?.abi(),
            )
            .ok()
        }
    }
    pub fn Compositor(&self) -> ::windows::core::Result<Compositor> {
        let this = &::windows::core::Interface::cast::<ICompositionObject>(self)?;
        unsafe {
            let mut result__ = ::core::mem::MaybeUninit::zeroed();
            (::windows::core::Vtable::vtable(this).Compositor)(
                ::windows::core::Vtable::as_raw(this),
                result__.as_mut_ptr(),
            )
            .from_abi::<Compositor>(result__)
        }
    }
    pub fn Properties(&self) -> ::windows::core::Result<CompositionPropertySet> {
        let this = &::windows::core::Interface::cast::<ICompositionObject>(self)?;
        unsafe {
            let mut result__ = ::core::mem::MaybeUninit::zeroed();
            (::windows::core::Vtable::vtable(this).Properties)(
                ::windows::core::Vtable::as_raw(this),
                result__.as_mut_ptr(),
            )
            .from_abi::<CompositionPropertySet>(result__)
        }
    }
    pub fn StartAnimation<'a, P0>(
        &self,
        propertyname: &::windows::core::HSTRING,
        animation: P0,
    ) -> ::windows::core::Result<()>
    where
        P0: ::std::convert::Into<::windows::core::InParam<'a, CompositionAnimation>>,
    {
        let this = &::windows::core::Interface::cast::<ICompositionObject>(self)?;
        unsafe {
            (::windows::core::Vtable::vtable(this).StartAnimation)(
                ::windows::core::Vtable::as_raw(this),
                ::core::mem::transmute_copy(propertyname),
                animation.into().abi(),
            )
            .ok()
        }
    }
    pub fn StopAnimation(
        &self,
        propertyname: &::windows::core::HSTRING,
    ) -> ::windows::core::Result<()> {
        let this = &::windows::core::Interface::cast::<ICompositionObject>(self)?;
        unsafe {
            (::windows::core::Vtable::vtable(this).StopAnimation)(
                ::windows::core::Vtable::as_raw(this),
                ::core::mem::transmute_copy(propertyname),
            )
            .ok()
        }
    }
    pub fn Comment(&self) -> ::windows::core::Result<::windows::core::HSTRING> {
        let this = &::windows::core::Interface::cast::<ICompositionObject2>(self)?;
        unsafe {
            let mut result__ = ::core::mem::MaybeUninit::zeroed();
            (::windows::core::Vtable::vtable(this).Comment)(
                ::windows::core::Vtable::as_raw(this),
                result__.as_mut_ptr(),
            )
            .from_abi::<::windows::core::HSTRING>(result__)
        }
    }
    pub fn SetComment(&self, value: &::windows::core::HSTRING) -> ::windows::core::Result<()> {
        let this = &::windows::core::Interface::cast::<ICompositionObject2>(self)?;
        unsafe {
            (::windows::core::Vtable::vtable(this).SetComment)(
                ::windows::core::Vtable::as_raw(this),
                ::core::mem::transmute_copy(value),
            )
            .ok()
        }
    }
    pub fn ImplicitAnimations(&self) -> ::windows::core::Result<ImplicitAnimationCollection> {
        let this = &::windows::core::Interface::cast::<ICompositionObject2>(self)?;
        unsafe {
            let mut result__ = ::core::mem::MaybeUninit::zeroed();
            (::windows::core::Vtable::vtable(this).ImplicitAnimations)(
                ::windows::core::Vtable::as_raw(this),
                result__.as_mut_ptr(),
            )
            .from_abi::<ImplicitAnimationCollection>(result__)
        }
    }
    pub fn SetImplicitAnimations(
        &self,
        value: &ImplicitAnimationCollection,
    ) -> ::windows::core::Result<()> {
        let this = &::windows::core::Interface::cast::<ICompositionObject2>(self)?;
        unsafe {
            (::windows::core::Vtable::vtable(this).SetImplicitAnimations)(
                ::windows::core::Vtable::as_raw(this),
                ::core::mem::transmute_copy(value),
            )
            .ok()
        }
    }
    pub fn StartAnimationGroup<'a, P0, E0>(&self, value: P0) -> ::windows::core::Result<()>
    where
        P0: ::std::convert::TryInto<
            ::windows::core::InParam<'a, ICompositionAnimationBase>,
            Error = E0,
        >,
        E0: ::std::convert::Into<::windows::core::Error>,
    {
        let this = &::windows::core::Interface::cast::<ICompositionObject2>(self)?;
        unsafe {
            (::windows::core::Vtable::vtable(this).StartAnimationGroup)(
                ::windows::core::Vtable::as_raw(this),
                value.try_into().map_err(|e| e.into())?.abi(),
            )
            .ok()
        }
    }
    pub fn StopAnimationGroup<'a, P0, E0>(&self, value: P0) -> ::windows::core::Result<()>
    where
        P0: ::std::convert::TryInto<
            ::windows::core::InParam<'a, ICompositionAnimationBase>,
            Error = E0,
        >,
        E0: ::std::convert::Into<::windows::core::Error>,
    {
        let this = &::windows::core::Interface::cast::<ICompositionObject2>(self)?;
        unsafe {
            (::windows::core::Vtable::vtable(this).StopAnimationGroup)(
                ::windows::core::Vtable::as_raw(this),
                value.try_into().map_err(|e| e.into())?.abi(),
            )
            .ok()
        }
    }
    #[doc = "*Required features: `\"UI_Dispatching\"`*"]
    #[cfg(feature = "UI_Dispatching")]
    pub fn DispatcherQueue(&self) -> ::windows::core::Result<super::Dispatching::DispatcherQueue> {
        let this = &::windows::core::Interface::cast::<ICompositionObject3>(self)?;
        unsafe {
            let mut result__ = ::core::mem::MaybeUninit::zeroed();
            (::windows::core::Vtable::vtable(this).DispatcherQueue)(
                ::windows::core::Vtable::as_raw(this),
                result__.as_mut_ptr(),
            )
            .from_abi::<super::Dispatching::DispatcherQueue>(result__)
        }
    }
    pub fn TryGetAnimationController(
        &self,
        propertyname: &::windows::core::HSTRING,
    ) -> ::windows::core::Result<AnimationController> {
        let this = &::windows::core::Interface::cast::<ICompositionObject4>(self)?;
        unsafe {
            let mut result__ = ::core::mem::MaybeUninit::zeroed();
            (::windows::core::Vtable::vtable(this).TryGetAnimationController)(
                ::windows::core::Vtable::as_raw(this),
                ::core::mem::transmute_copy(propertyname),
                result__.as_mut_ptr(),
            )
            .from_abi::<AnimationController>(result__)
        }
    }
    pub fn StartAnimationWithController<'a, P0>(
        &self,
        propertyname: &::windows::core::HSTRING,
        animation: P0,
        animationcontroller: &AnimationController,
    ) -> ::windows::core::Result<()>
    where
        P0: ::std::convert::Into<::windows::core::InParam<'a, CompositionAnimation>>,
    {
        let this = &::windows::core::Interface::cast::<ICompositionObject5>(self)?;
        unsafe {
            (::windows::core::Vtable::vtable(this).StartAnimationWithController)(
                ::windows::core::Vtable::as_raw(this),
                ::core::mem::transmute_copy(propertyname),
                animation.into().abi(),
                ::core::mem::transmute_copy(animationcontroller),
            )
            .ok()
        }
    }
    pub fn DelayBehavior(&self) -> ::windows::core::Result<AnimationDelayBehavior> {
        let this = self;
        unsafe {
            let mut result__ = ::core::mem::MaybeUninit::zeroed();
            (::windows::core::Vtable::vtable(this).DelayBehavior)(
                ::windows::core::Vtable::as_raw(this),
                result__.as_mut_ptr(),
            )
            .from_abi::<AnimationDelayBehavior>(result__)
        }
    }
    pub fn SetDelayBehavior(&self, value: AnimationDelayBehavior) -> ::windows::core::Result<()> {
        let this = self;
        unsafe {
            (::windows::core::Vtable::vtable(this).SetDelayBehavior)(
                ::windows::core::Vtable::as_raw(this),
                value,
            )
            .ok()
        }
    }
    pub fn DelayTime(&self) -> ::windows::core::Result<::windows::Foundation::TimeSpan> {
        let this = self;
        unsafe {
            let mut result__ = ::core::mem::MaybeUninit::zeroed();
            (::windows::core::Vtable::vtable(this).DelayTime)(
                ::windows::core::Vtable::as_raw(this),
                result__.as_mut_ptr(),
            )
            .from_abi::<::windows::Foundation::TimeSpan>(result__)
        }
    }
    pub fn SetDelayTime(
        &self,
        value: ::windows::Foundation::TimeSpan,
    ) -> ::windows::core::Result<()> {
        let this = self;
        unsafe {
            (::windows::core::Vtable::vtable(this).SetDelayTime)(
                ::windows::core::Vtable::as_raw(this),
                value,
            )
            .ok()
        }
    }
    pub fn StopBehavior(&self) -> ::windows::core::Result<AnimationStopBehavior> {
        let this = self;
        unsafe {
            let mut result__ = ::core::mem::MaybeUninit::zeroed();
            (::windows::core::Vtable::vtable(this).StopBehavior)(
                ::windows::core::Vtable::as_raw(this),
                result__.as_mut_ptr(),
            )
            .from_abi::<AnimationStopBehavior>(result__)
        }
    }
    pub fn SetStopBehavior(&self, value: AnimationStopBehavior) -> ::windows::core::Result<()> {
        let this = self;
        unsafe {
            (::windows::core::Vtable::vtable(this).SetStopBehavior)(
                ::windows::core::Vtable::as_raw(this),
                value,
            )
            .ok()
        }
    }
}
impl ::core::clone::Clone for NaturalMotionAnimation {
    fn clone(&self) -> Self {
        Self(self.0.clone())
    }
}
impl ::core::cmp::PartialEq for NaturalMotionAnimation {
    fn eq(&self, other: &Self) -> bool {
        self.0 == other.0
    }
}
impl ::core::cmp::Eq for NaturalMotionAnimation {}
impl ::core::fmt::Debug for NaturalMotionAnimation {
    fn fmt(&self, f: &mut ::core::fmt::Formatter<'_>) -> ::core::fmt::Result {
        f.debug_tuple("NaturalMotionAnimation").field(&self.0).finish()
    }
}
unsafe impl ::windows::core::RuntimeType for NaturalMotionAnimation {
    const SIGNATURE : ::windows::core::ConstBuffer = ::windows::core::ConstBuffer::from_slice ( b"rc(Microsoft.UI.Composition.NaturalMotionAnimation;{2ff54ebb-a035-50be-a73c-20014975ee31})" ) ;
    type DefaultType = ::core::option::Option<Self>;
    fn from_default(from: &Self::DefaultType) -> ::windows::core::Result<Self> {
        from.as_ref().cloned().ok_or(::windows::core::Error::OK)
    }
}
unsafe impl ::windows::core::Vtable for NaturalMotionAnimation {
    type Vtable = INaturalMotionAnimation_Vtbl;
}
unsafe impl ::windows::core::Interface for NaturalMotionAnimation {
    const IID: ::windows::core::GUID = <INaturalMotionAnimation as ::windows::core::Interface>::IID;
}
impl ::windows::core::RuntimeName for NaturalMotionAnimation {
    const NAME: &'static str = "Microsoft.UI.Composition.NaturalMotionAnimation";
}
::windows::core::interface_hierarchy!(
    NaturalMotionAnimation,
    ::windows::core::IUnknown,
    ::windows::core::IInspectable
);
impl ::core::convert::TryFrom<NaturalMotionAnimation> for IAnimationObject {
    type Error = ::windows::core::Error;
    fn try_from(value: NaturalMotionAnimation) -> ::windows::core::Result<Self> {
        ::core::convert::TryFrom::try_from(&value)
    }
}
impl ::core::convert::TryFrom<&NaturalMotionAnimation> for IAnimationObject {
    type Error = ::windows::core::Error;
    fn try_from(value: &NaturalMotionAnimation) -> ::windows::core::Result<Self> {
        ::windows::core::Interface::cast(value)
    }
}
impl<'a> ::core::convert::TryFrom<&NaturalMotionAnimation>
    for ::windows::core::InParam<'a, IAnimationObject>
{
    type Error = ::windows::core::Error;
    fn try_from(value: &NaturalMotionAnimation) -> ::windows::core::Result<Self> {
        let item = ::std::convert::TryInto::try_into(value)?;
        Ok(::windows::core::InParam::owned(item))
    }
}
impl ::core::convert::TryFrom<NaturalMotionAnimation> for ::windows::Foundation::IClosable {
    type Error = ::windows::core::Error;
    fn try_from(value: NaturalMotionAnimation) -> ::windows::core::Result<Self> {
        ::core::convert::TryFrom::try_from(&value)
    }
}
impl ::core::convert::TryFrom<&NaturalMotionAnimation> for ::windows::Foundation::IClosable {
    type Error = ::windows::core::Error;
    fn try_from(value: &NaturalMotionAnimation) -> ::windows::core::Result<Self> {
        ::windows::core::Interface::cast(value)
    }
}
impl<'a> ::core::convert::TryFrom<&NaturalMotionAnimation>
    for ::windows::core::InParam<'a, ::windows::Foundation::IClosable>
{
    type Error = ::windows::core::Error;
    fn try_from(value: &NaturalMotionAnimation) -> ::windows::core::Result<Self> {
        let item = ::std::convert::TryInto::try_into(value)?;
        Ok(::windows::core::InParam::owned(item))
    }
}
impl ::core::convert::TryFrom<NaturalMotionAnimation> for ICompositionAnimationBase {
    type Error = ::windows::core::Error;
    fn try_from(value: NaturalMotionAnimation) -> ::windows::core::Result<Self> {
        ::core::convert::TryFrom::try_from(&value)
    }
}
impl ::core::convert::TryFrom<&NaturalMotionAnimation> for ICompositionAnimationBase {
    type Error = ::windows::core::Error;
    fn try_from(value: &NaturalMotionAnimation) -> ::windows::core::Result<Self> {
        ::windows::core::Interface::cast(value)
    }
}
impl<'a> ::core::convert::TryFrom<&NaturalMotionAnimation>
    for ::windows::core::InParam<'a, ICompositionAnimationBase>
{
    type Error = ::windows::core::Error;
    fn try_from(value: &NaturalMotionAnimation) -> ::windows::core::Result<Self> {
        let item = ::std::convert::TryInto::try_into(value)?;
        Ok(::windows::core::InParam::owned(item))
    }
}
impl ::core::convert::From<NaturalMotionAnimation> for CompositionAnimation {
    fn from(value: NaturalMotionAnimation) -> Self {
        ::core::convert::From::from(&value)
    }
}
impl ::core::convert::From<&NaturalMotionAnimation> for CompositionAnimation {
    fn from(value: &NaturalMotionAnimation) -> Self {
        ::windows::core::Interface::cast(value).unwrap()
    }
}
impl<'a> ::core::convert::From<&NaturalMotionAnimation>
    for ::windows::core::InParam<'a, CompositionAnimation>
{
    fn from(value: &NaturalMotionAnimation) -> Self {
        ::windows::core::InParam::owned(value.into())
    }
}
impl ::core::convert::From<NaturalMotionAnimation> for CompositionObject {
    fn from(value: NaturalMotionAnimation) -> Self {
        ::core::convert::From::from(&value)
    }
}
impl ::core::convert::From<&NaturalMotionAnimation> for CompositionObject {
    fn from(value: &NaturalMotionAnimation) -> Self {
        ::windows::core::Interface::cast(value).unwrap()
    }
}
impl<'a> ::core::convert::From<&NaturalMotionAnimation>
    for ::windows::core::InParam<'a, CompositionObject>
{
    fn from(value: &NaturalMotionAnimation) -> Self {
        ::windows::core::InParam::owned(value.into())
    }
}
unsafe impl ::core::marker::Send for NaturalMotionAnimation {}
unsafe impl ::core::marker::Sync for NaturalMotionAnimation {}
#[doc = "*Required features: `\"UI_Composition\"`*"]
#[repr(transparent)]
pub struct PathKeyFrameAnimation(::windows::core::IUnknown);
impl PathKeyFrameAnimation {
    pub fn PopulatePropertyInfo(
        &self,
        propertyname: &::windows::core::HSTRING,
        propertyinfo: &AnimationPropertyInfo,
    ) -> ::windows::core::Result<()> {
        let this = &::windows::core::Interface::cast::<IAnimationObject>(self)?;
        unsafe {
            (::windows::core::Vtable::vtable(this).PopulatePropertyInfo)(
                ::windows::core::Vtable::as_raw(this),
                ::core::mem::transmute_copy(propertyname),
                ::core::mem::transmute_copy(propertyinfo),
            )
            .ok()
        }
    }
    pub fn Close(&self) -> ::windows::core::Result<()> {
        let this = &::windows::core::Interface::cast::<::windows::Foundation::IClosable>(self)?;
        unsafe {
            (::windows::core::Vtable::vtable(this).Close)(::windows::core::Vtable::as_raw(this))
                .ok()
        }
    }
    pub fn ClearAllParameters(&self) -> ::windows::core::Result<()> {
        let this = &::windows::core::Interface::cast::<ICompositionAnimation>(self)?;
        unsafe {
            (::windows::core::Vtable::vtable(this).ClearAllParameters)(
                ::windows::core::Vtable::as_raw(this),
            )
            .ok()
        }
    }
    pub fn ClearParameter(&self, key: &::windows::core::HSTRING) -> ::windows::core::Result<()> {
        let this = &::windows::core::Interface::cast::<ICompositionAnimation>(self)?;
        unsafe {
            (::windows::core::Vtable::vtable(this).ClearParameter)(
                ::windows::core::Vtable::as_raw(this),
                ::core::mem::transmute_copy(key),
            )
            .ok()
        }
    }
    pub fn SetColorParameter(
        &self,
        key: &::windows::core::HSTRING,
        value: ::windows::UI::Color,
    ) -> ::windows::core::Result<()> {
        let this = &::windows::core::Interface::cast::<ICompositionAnimation>(self)?;
        unsafe {
            (::windows::core::Vtable::vtable(this).SetColorParameter)(
                ::windows::core::Vtable::as_raw(this),
                ::core::mem::transmute_copy(key),
                value,
            )
            .ok()
        }
    }
    pub fn SetMatrix3x2Parameter(
        &self,
        key: &::windows::core::HSTRING,
        value: ::windows::Foundation::Numerics::Matrix3x2,
    ) -> ::windows::core::Result<()> {
        let this = &::windows::core::Interface::cast::<ICompositionAnimation>(self)?;
        unsafe {
            (::windows::core::Vtable::vtable(this).SetMatrix3x2Parameter)(
                ::windows::core::Vtable::as_raw(this),
                ::core::mem::transmute_copy(key),
                value,
            )
            .ok()
        }
    }
    pub fn SetMatrix4x4Parameter(
        &self,
        key: &::windows::core::HSTRING,
        value: ::windows::Foundation::Numerics::Matrix4x4,
    ) -> ::windows::core::Result<()> {
        let this = &::windows::core::Interface::cast::<ICompositionAnimation>(self)?;
        unsafe {
            (::windows::core::Vtable::vtable(this).SetMatrix4x4Parameter)(
                ::windows::core::Vtable::as_raw(this),
                ::core::mem::transmute_copy(key),
                value,
            )
            .ok()
        }
    }
    pub fn SetQuaternionParameter(
        &self,
        key: &::windows::core::HSTRING,
        value: ::windows::Foundation::Numerics::Quaternion,
    ) -> ::windows::core::Result<()> {
        let this = &::windows::core::Interface::cast::<ICompositionAnimation>(self)?;
        unsafe {
            (::windows::core::Vtable::vtable(this).SetQuaternionParameter)(
                ::windows::core::Vtable::as_raw(this),
                ::core::mem::transmute_copy(key),
                value,
            )
            .ok()
        }
    }
    pub fn SetReferenceParameter<'a, P0>(
        &self,
        key: &::windows::core::HSTRING,
        compositionobject: P0,
    ) -> ::windows::core::Result<()>
    where
        P0: ::std::convert::Into<::windows::core::InParam<'a, CompositionObject>>,
    {
        let this = &::windows::core::Interface::cast::<ICompositionAnimation>(self)?;
        unsafe {
            (::windows::core::Vtable::vtable(this).SetReferenceParameter)(
                ::windows::core::Vtable::as_raw(this),
                ::core::mem::transmute_copy(key),
                compositionobject.into().abi(),
            )
            .ok()
        }
    }
    pub fn SetScalarParameter(
        &self,
        key: &::windows::core::HSTRING,
        value: f32,
    ) -> ::windows::core::Result<()> {
        let this = &::windows::core::Interface::cast::<ICompositionAnimation>(self)?;
        unsafe {
            (::windows::core::Vtable::vtable(this).SetScalarParameter)(
                ::windows::core::Vtable::as_raw(this),
                ::core::mem::transmute_copy(key),
                value,
            )
            .ok()
        }
    }
    pub fn SetVector2Parameter(
        &self,
        key: &::windows::core::HSTRING,
        value: ::windows::Foundation::Numerics::Vector2,
    ) -> ::windows::core::Result<()> {
        let this = &::windows::core::Interface::cast::<ICompositionAnimation>(self)?;
        unsafe {
            (::windows::core::Vtable::vtable(this).SetVector2Parameter)(
                ::windows::core::Vtable::as_raw(this),
                ::core::mem::transmute_copy(key),
                value,
            )
            .ok()
        }
    }
    pub fn SetVector3Parameter(
        &self,
        key: &::windows::core::HSTRING,
        value: ::windows::Foundation::Numerics::Vector3,
    ) -> ::windows::core::Result<()> {
        let this = &::windows::core::Interface::cast::<ICompositionAnimation>(self)?;
        unsafe {
            (::windows::core::Vtable::vtable(this).SetVector3Parameter)(
                ::windows::core::Vtable::as_raw(this),
                ::core::mem::transmute_copy(key),
                value,
            )
            .ok()
        }
    }
    pub fn SetVector4Parameter(
        &self,
        key: &::windows::core::HSTRING,
        value: ::windows::Foundation::Numerics::Vector4,
    ) -> ::windows::core::Result<()> {
        let this = &::windows::core::Interface::cast::<ICompositionAnimation>(self)?;
        unsafe {
            (::windows::core::Vtable::vtable(this).SetVector4Parameter)(
                ::windows::core::Vtable::as_raw(this),
                ::core::mem::transmute_copy(key),
                value,
            )
            .ok()
        }
    }
    pub fn SetBooleanParameter(
        &self,
        key: &::windows::core::HSTRING,
        value: bool,
    ) -> ::windows::core::Result<()> {
        let this = &::windows::core::Interface::cast::<ICompositionAnimation2>(self)?;
        unsafe {
            (::windows::core::Vtable::vtable(this).SetBooleanParameter)(
                ::windows::core::Vtable::as_raw(this),
                ::core::mem::transmute_copy(key),
                value,
            )
            .ok()
        }
    }
    pub fn Target(&self) -> ::windows::core::Result<::windows::core::HSTRING> {
        let this = &::windows::core::Interface::cast::<ICompositionAnimation2>(self)?;
        unsafe {
            let mut result__ = ::core::mem::MaybeUninit::zeroed();
            (::windows::core::Vtable::vtable(this).Target)(
                ::windows::core::Vtable::as_raw(this),
                result__.as_mut_ptr(),
            )
            .from_abi::<::windows::core::HSTRING>(result__)
        }
    }
    pub fn SetTarget(&self, value: &::windows::core::HSTRING) -> ::windows::core::Result<()> {
        let this = &::windows::core::Interface::cast::<ICompositionAnimation2>(self)?;
        unsafe {
            (::windows::core::Vtable::vtable(this).SetTarget)(
                ::windows::core::Vtable::as_raw(this),
                ::core::mem::transmute_copy(value),
            )
            .ok()
        }
    }
    pub fn InitialValueExpressions(
        &self,
    ) -> ::windows::core::Result<InitialValueExpressionCollection> {
        let this = &::windows::core::Interface::cast::<ICompositionAnimation3>(self)?;
        unsafe {
            let mut result__ = ::core::mem::MaybeUninit::zeroed();
            (::windows::core::Vtable::vtable(this).InitialValueExpressions)(
                ::windows::core::Vtable::as_raw(this),
                result__.as_mut_ptr(),
            )
            .from_abi::<InitialValueExpressionCollection>(result__)
        }
    }
    pub fn SetExpressionReferenceParameter<'a, P0, E0>(
        &self,
        parametername: &::windows::core::HSTRING,
        source: P0,
    ) -> ::windows::core::Result<()>
    where
        P0: ::std::convert::TryInto<::windows::core::InParam<'a, IAnimationObject>, Error = E0>,
        E0: ::std::convert::Into<::windows::core::Error>,
    {
        let this = &::windows::core::Interface::cast::<ICompositionAnimation4>(self)?;
        unsafe {
            (::windows::core::Vtable::vtable(this).SetExpressionReferenceParameter)(
                ::windows::core::Vtable::as_raw(this),
                ::core::mem::transmute_copy(parametername),
                source.try_into().map_err(|e| e.into())?.abi(),
            )
            .ok()
        }
    }
    pub fn Compositor(&self) -> ::windows::core::Result<Compositor> {
        let this = &::windows::core::Interface::cast::<ICompositionObject>(self)?;
        unsafe {
            let mut result__ = ::core::mem::MaybeUninit::zeroed();
            (::windows::core::Vtable::vtable(this).Compositor)(
                ::windows::core::Vtable::as_raw(this),
                result__.as_mut_ptr(),
            )
            .from_abi::<Compositor>(result__)
        }
    }
    pub fn Properties(&self) -> ::windows::core::Result<CompositionPropertySet> {
        let this = &::windows::core::Interface::cast::<ICompositionObject>(self)?;
        unsafe {
            let mut result__ = ::core::mem::MaybeUninit::zeroed();
            (::windows::core::Vtable::vtable(this).Properties)(
                ::windows::core::Vtable::as_raw(this),
                result__.as_mut_ptr(),
            )
            .from_abi::<CompositionPropertySet>(result__)
        }
    }
    pub fn StartAnimation<'a, P0>(
        &self,
        propertyname: &::windows::core::HSTRING,
        animation: P0,
    ) -> ::windows::core::Result<()>
    where
        P0: ::std::convert::Into<::windows::core::InParam<'a, CompositionAnimation>>,
    {
        let this = &::windows::core::Interface::cast::<ICompositionObject>(self)?;
        unsafe {
            (::windows::core::Vtable::vtable(this).StartAnimation)(
                ::windows::core::Vtable::as_raw(this),
                ::core::mem::transmute_copy(propertyname),
                animation.into().abi(),
            )
            .ok()
        }
    }
    pub fn StopAnimation(
        &self,
        propertyname: &::windows::core::HSTRING,
    ) -> ::windows::core::Result<()> {
        let this = &::windows::core::Interface::cast::<ICompositionObject>(self)?;
        unsafe {
            (::windows::core::Vtable::vtable(this).StopAnimation)(
                ::windows::core::Vtable::as_raw(this),
                ::core::mem::transmute_copy(propertyname),
            )
            .ok()
        }
    }
    pub fn Comment(&self) -> ::windows::core::Result<::windows::core::HSTRING> {
        let this = &::windows::core::Interface::cast::<ICompositionObject2>(self)?;
        unsafe {
            let mut result__ = ::core::mem::MaybeUninit::zeroed();
            (::windows::core::Vtable::vtable(this).Comment)(
                ::windows::core::Vtable::as_raw(this),
                result__.as_mut_ptr(),
            )
            .from_abi::<::windows::core::HSTRING>(result__)
        }
    }
    pub fn SetComment(&self, value: &::windows::core::HSTRING) -> ::windows::core::Result<()> {
        let this = &::windows::core::Interface::cast::<ICompositionObject2>(self)?;
        unsafe {
            (::windows::core::Vtable::vtable(this).SetComment)(
                ::windows::core::Vtable::as_raw(this),
                ::core::mem::transmute_copy(value),
            )
            .ok()
        }
    }
    pub fn ImplicitAnimations(&self) -> ::windows::core::Result<ImplicitAnimationCollection> {
        let this = &::windows::core::Interface::cast::<ICompositionObject2>(self)?;
        unsafe {
            let mut result__ = ::core::mem::MaybeUninit::zeroed();
            (::windows::core::Vtable::vtable(this).ImplicitAnimations)(
                ::windows::core::Vtable::as_raw(this),
                result__.as_mut_ptr(),
            )
            .from_abi::<ImplicitAnimationCollection>(result__)
        }
    }
    pub fn SetImplicitAnimations(
        &self,
        value: &ImplicitAnimationCollection,
    ) -> ::windows::core::Result<()> {
        let this = &::windows::core::Interface::cast::<ICompositionObject2>(self)?;
        unsafe {
            (::windows::core::Vtable::vtable(this).SetImplicitAnimations)(
                ::windows::core::Vtable::as_raw(this),
                ::core::mem::transmute_copy(value),
            )
            .ok()
        }
    }
    pub fn StartAnimationGroup<'a, P0, E0>(&self, value: P0) -> ::windows::core::Result<()>
    where
        P0: ::std::convert::TryInto<
            ::windows::core::InParam<'a, ICompositionAnimationBase>,
            Error = E0,
        >,
        E0: ::std::convert::Into<::windows::core::Error>,
    {
        let this = &::windows::core::Interface::cast::<ICompositionObject2>(self)?;
        unsafe {
            (::windows::core::Vtable::vtable(this).StartAnimationGroup)(
                ::windows::core::Vtable::as_raw(this),
                value.try_into().map_err(|e| e.into())?.abi(),
            )
            .ok()
        }
    }
    pub fn StopAnimationGroup<'a, P0, E0>(&self, value: P0) -> ::windows::core::Result<()>
    where
        P0: ::std::convert::TryInto<
            ::windows::core::InParam<'a, ICompositionAnimationBase>,
            Error = E0,
        >,
        E0: ::std::convert::Into<::windows::core::Error>,
    {
        let this = &::windows::core::Interface::cast::<ICompositionObject2>(self)?;
        unsafe {
            (::windows::core::Vtable::vtable(this).StopAnimationGroup)(
                ::windows::core::Vtable::as_raw(this),
                value.try_into().map_err(|e| e.into())?.abi(),
            )
            .ok()
        }
    }
    #[doc = "*Required features: `\"UI_Dispatching\"`*"]
    #[cfg(feature = "UI_Dispatching")]
    pub fn DispatcherQueue(&self) -> ::windows::core::Result<super::Dispatching::DispatcherQueue> {
        let this = &::windows::core::Interface::cast::<ICompositionObject3>(self)?;
        unsafe {
            let mut result__ = ::core::mem::MaybeUninit::zeroed();
            (::windows::core::Vtable::vtable(this).DispatcherQueue)(
                ::windows::core::Vtable::as_raw(this),
                result__.as_mut_ptr(),
            )
            .from_abi::<super::Dispatching::DispatcherQueue>(result__)
        }
    }
    pub fn TryGetAnimationController(
        &self,
        propertyname: &::windows::core::HSTRING,
    ) -> ::windows::core::Result<AnimationController> {
        let this = &::windows::core::Interface::cast::<ICompositionObject4>(self)?;
        unsafe {
            let mut result__ = ::core::mem::MaybeUninit::zeroed();
            (::windows::core::Vtable::vtable(this).TryGetAnimationController)(
                ::windows::core::Vtable::as_raw(this),
                ::core::mem::transmute_copy(propertyname),
                result__.as_mut_ptr(),
            )
            .from_abi::<AnimationController>(result__)
        }
    }
    pub fn StartAnimationWithController<'a, P0>(
        &self,
        propertyname: &::windows::core::HSTRING,
        animation: P0,
        animationcontroller: &AnimationController,
    ) -> ::windows::core::Result<()>
    where
        P0: ::std::convert::Into<::windows::core::InParam<'a, CompositionAnimation>>,
    {
        let this = &::windows::core::Interface::cast::<ICompositionObject5>(self)?;
        unsafe {
            (::windows::core::Vtable::vtable(this).StartAnimationWithController)(
                ::windows::core::Vtable::as_raw(this),
                ::core::mem::transmute_copy(propertyname),
                animation.into().abi(),
                ::core::mem::transmute_copy(animationcontroller),
            )
            .ok()
        }
    }
    pub fn DelayTime(&self) -> ::windows::core::Result<::windows::Foundation::TimeSpan> {
        let this = &::windows::core::Interface::cast::<IKeyFrameAnimation>(self)?;
        unsafe {
            let mut result__ = ::core::mem::MaybeUninit::zeroed();
            (::windows::core::Vtable::vtable(this).DelayTime)(
                ::windows::core::Vtable::as_raw(this),
                result__.as_mut_ptr(),
            )
            .from_abi::<::windows::Foundation::TimeSpan>(result__)
        }
    }
    pub fn SetDelayTime(
        &self,
        value: ::windows::Foundation::TimeSpan,
    ) -> ::windows::core::Result<()> {
        let this = &::windows::core::Interface::cast::<IKeyFrameAnimation>(self)?;
        unsafe {
            (::windows::core::Vtable::vtable(this).SetDelayTime)(
                ::windows::core::Vtable::as_raw(this),
                value,
            )
            .ok()
        }
    }
    pub fn Duration(&self) -> ::windows::core::Result<::windows::Foundation::TimeSpan> {
        let this = &::windows::core::Interface::cast::<IKeyFrameAnimation>(self)?;
        unsafe {
            let mut result__ = ::core::mem::MaybeUninit::zeroed();
            (::windows::core::Vtable::vtable(this).Duration)(
                ::windows::core::Vtable::as_raw(this),
                result__.as_mut_ptr(),
            )
            .from_abi::<::windows::Foundation::TimeSpan>(result__)
        }
    }
    pub fn SetDuration(
        &self,
        value: ::windows::Foundation::TimeSpan,
    ) -> ::windows::core::Result<()> {
        let this = &::windows::core::Interface::cast::<IKeyFrameAnimation>(self)?;
        unsafe {
            (::windows::core::Vtable::vtable(this).SetDuration)(
                ::windows::core::Vtable::as_raw(this),
                value,
            )
            .ok()
        }
    }
    pub fn IterationBehavior(&self) -> ::windows::core::Result<AnimationIterationBehavior> {
        let this = &::windows::core::Interface::cast::<IKeyFrameAnimation>(self)?;
        unsafe {
            let mut result__ = ::core::mem::MaybeUninit::zeroed();
            (::windows::core::Vtable::vtable(this).IterationBehavior)(
                ::windows::core::Vtable::as_raw(this),
                result__.as_mut_ptr(),
            )
            .from_abi::<AnimationIterationBehavior>(result__)
        }
    }
    pub fn SetIterationBehavior(
        &self,
        value: AnimationIterationBehavior,
    ) -> ::windows::core::Result<()> {
        let this = &::windows::core::Interface::cast::<IKeyFrameAnimation>(self)?;
        unsafe {
            (::windows::core::Vtable::vtable(this).SetIterationBehavior)(
                ::windows::core::Vtable::as_raw(this),
                value,
            )
            .ok()
        }
    }
    pub fn IterationCount(&self) -> ::windows::core::Result<i32> {
        let this = &::windows::core::Interface::cast::<IKeyFrameAnimation>(self)?;
        unsafe {
            let mut result__ = ::core::mem::MaybeUninit::zeroed();
            (::windows::core::Vtable::vtable(this).IterationCount)(
                ::windows::core::Vtable::as_raw(this),
                result__.as_mut_ptr(),
            )
            .from_abi::<i32>(result__)
        }
    }
    pub fn SetIterationCount(&self, value: i32) -> ::windows::core::Result<()> {
        let this = &::windows::core::Interface::cast::<IKeyFrameAnimation>(self)?;
        unsafe {
            (::windows::core::Vtable::vtable(this).SetIterationCount)(
                ::windows::core::Vtable::as_raw(this),
                value,
            )
            .ok()
        }
    }
    pub fn KeyFrameCount(&self) -> ::windows::core::Result<i32> {
        let this = &::windows::core::Interface::cast::<IKeyFrameAnimation>(self)?;
        unsafe {
            let mut result__ = ::core::mem::MaybeUninit::zeroed();
            (::windows::core::Vtable::vtable(this).KeyFrameCount)(
                ::windows::core::Vtable::as_raw(this),
                result__.as_mut_ptr(),
            )
            .from_abi::<i32>(result__)
        }
    }
    pub fn StopBehavior(&self) -> ::windows::core::Result<AnimationStopBehavior> {
        let this = &::windows::core::Interface::cast::<IKeyFrameAnimation>(self)?;
        unsafe {
            let mut result__ = ::core::mem::MaybeUninit::zeroed();
            (::windows::core::Vtable::vtable(this).StopBehavior)(
                ::windows::core::Vtable::as_raw(this),
                result__.as_mut_ptr(),
            )
            .from_abi::<AnimationStopBehavior>(result__)
        }
    }
    pub fn SetStopBehavior(&self, value: AnimationStopBehavior) -> ::windows::core::Result<()> {
        let this = &::windows::core::Interface::cast::<IKeyFrameAnimation>(self)?;
        unsafe {
            (::windows::core::Vtable::vtable(this).SetStopBehavior)(
                ::windows::core::Vtable::as_raw(this),
                value,
            )
            .ok()
        }
    }
    pub fn InsertExpressionKeyFrame(
        &self,
        normalizedprogresskey: f32,
        value: &::windows::core::HSTRING,
    ) -> ::windows::core::Result<()> {
        let this = &::windows::core::Interface::cast::<IKeyFrameAnimation>(self)?;
        unsafe {
            (::windows::core::Vtable::vtable(this).InsertExpressionKeyFrame)(
                ::windows::core::Vtable::as_raw(this),
                normalizedprogresskey,
                ::core::mem::transmute_copy(value),
            )
            .ok()
        }
    }
    pub fn InsertExpressionKeyFrameWithEasingFunction<'a, P0>(
        &self,
        normalizedprogresskey: f32,
        value: &::windows::core::HSTRING,
        easingfunction: P0,
    ) -> ::windows::core::Result<()>
    where
        P0: ::std::convert::Into<::windows::core::InParam<'a, CompositionEasingFunction>>,
    {
        let this = &::windows::core::Interface::cast::<IKeyFrameAnimation>(self)?;
        unsafe {
            (::windows::core::Vtable::vtable(this).InsertExpressionKeyFrameWithEasingFunction)(
                ::windows::core::Vtable::as_raw(this),
                normalizedprogresskey,
                ::core::mem::transmute_copy(value),
                easingfunction.into().abi(),
            )
            .ok()
        }
    }
    pub fn Direction(&self) -> ::windows::core::Result<AnimationDirection> {
        let this = &::windows::core::Interface::cast::<IKeyFrameAnimation2>(self)?;
        unsafe {
            let mut result__ = ::core::mem::MaybeUninit::zeroed();
            (::windows::core::Vtable::vtable(this).Direction)(
                ::windows::core::Vtable::as_raw(this),
                result__.as_mut_ptr(),
            )
            .from_abi::<AnimationDirection>(result__)
        }
    }
    pub fn SetDirection(&self, value: AnimationDirection) -> ::windows::core::Result<()> {
        let this = &::windows::core::Interface::cast::<IKeyFrameAnimation2>(self)?;
        unsafe {
            (::windows::core::Vtable::vtable(this).SetDirection)(
                ::windows::core::Vtable::as_raw(this),
                value,
            )
            .ok()
        }
    }
    pub fn DelayBehavior(&self) -> ::windows::core::Result<AnimationDelayBehavior> {
        let this = &::windows::core::Interface::cast::<IKeyFrameAnimation3>(self)?;
        unsafe {
            let mut result__ = ::core::mem::MaybeUninit::zeroed();
            (::windows::core::Vtable::vtable(this).DelayBehavior)(
                ::windows::core::Vtable::as_raw(this),
                result__.as_mut_ptr(),
            )
            .from_abi::<AnimationDelayBehavior>(result__)
        }
    }
    pub fn SetDelayBehavior(&self, value: AnimationDelayBehavior) -> ::windows::core::Result<()> {
        let this = &::windows::core::Interface::cast::<IKeyFrameAnimation3>(self)?;
        unsafe {
            (::windows::core::Vtable::vtable(this).SetDelayBehavior)(
                ::windows::core::Vtable::as_raw(this),
                value,
            )
            .ok()
        }
    }
    pub fn InsertKeyFrame(
        &self,
        normalizedprogresskey: f32,
        path: &CompositionPath,
    ) -> ::windows::core::Result<()> {
        let this = self;
        unsafe {
            (::windows::core::Vtable::vtable(this).InsertKeyFrame)(
                ::windows::core::Vtable::as_raw(this),
                normalizedprogresskey,
                ::core::mem::transmute_copy(path),
            )
            .ok()
        }
    }
    pub fn InsertKeyFrameWithEasingFunction<'a, P0>(
        &self,
        normalizedprogresskey: f32,
        path: &CompositionPath,
        easingfunction: P0,
    ) -> ::windows::core::Result<()>
    where
        P0: ::std::convert::Into<::windows::core::InParam<'a, CompositionEasingFunction>>,
    {
        let this = self;
        unsafe {
            (::windows::core::Vtable::vtable(this).InsertKeyFrameWithEasingFunction)(
                ::windows::core::Vtable::as_raw(this),
                normalizedprogresskey,
                ::core::mem::transmute_copy(path),
                easingfunction.into().abi(),
            )
            .ok()
        }
    }
}
impl ::core::clone::Clone for PathKeyFrameAnimation {
    fn clone(&self) -> Self {
        Self(self.0.clone())
    }
}
impl ::core::cmp::PartialEq for PathKeyFrameAnimation {
    fn eq(&self, other: &Self) -> bool {
        self.0 == other.0
    }
}
impl ::core::cmp::Eq for PathKeyFrameAnimation {}
impl ::core::fmt::Debug for PathKeyFrameAnimation {
    fn fmt(&self, f: &mut ::core::fmt::Formatter<'_>) -> ::core::fmt::Result {
        f.debug_tuple("PathKeyFrameAnimation").field(&self.0).finish()
    }
}
unsafe impl ::windows::core::RuntimeType for PathKeyFrameAnimation {
    const SIGNATURE : ::windows::core::ConstBuffer = ::windows::core::ConstBuffer::from_slice ( b"rc(Microsoft.UI.Composition.PathKeyFrameAnimation;{2b692808-43da-5118-b66d-904a3ec74fd9})" ) ;
    type DefaultType = ::core::option::Option<Self>;
    fn from_default(from: &Self::DefaultType) -> ::windows::core::Result<Self> {
        from.as_ref().cloned().ok_or(::windows::core::Error::OK)
    }
}
unsafe impl ::windows::core::Vtable for PathKeyFrameAnimation {
    type Vtable = IPathKeyFrameAnimation_Vtbl;
}
unsafe impl ::windows::core::Interface for PathKeyFrameAnimation {
    const IID: ::windows::core::GUID = <IPathKeyFrameAnimation as ::windows::core::Interface>::IID;
}
impl ::windows::core::RuntimeName for PathKeyFrameAnimation {
    const NAME: &'static str = "Microsoft.UI.Composition.PathKeyFrameAnimation";
}
::windows::core::interface_hierarchy!(
    PathKeyFrameAnimation,
    ::windows::core::IUnknown,
    ::windows::core::IInspectable
);
impl ::core::convert::TryFrom<PathKeyFrameAnimation> for IAnimationObject {
    type Error = ::windows::core::Error;
    fn try_from(value: PathKeyFrameAnimation) -> ::windows::core::Result<Self> {
        ::core::convert::TryFrom::try_from(&value)
    }
}
impl ::core::convert::TryFrom<&PathKeyFrameAnimation> for IAnimationObject {
    type Error = ::windows::core::Error;
    fn try_from(value: &PathKeyFrameAnimation) -> ::windows::core::Result<Self> {
        ::windows::core::Interface::cast(value)
    }
}
impl<'a> ::core::convert::TryFrom<&PathKeyFrameAnimation>
    for ::windows::core::InParam<'a, IAnimationObject>
{
    type Error = ::windows::core::Error;
    fn try_from(value: &PathKeyFrameAnimation) -> ::windows::core::Result<Self> {
        let item = ::std::convert::TryInto::try_into(value)?;
        Ok(::windows::core::InParam::owned(item))
    }
}
impl ::core::convert::TryFrom<PathKeyFrameAnimation> for ::windows::Foundation::IClosable {
    type Error = ::windows::core::Error;
    fn try_from(value: PathKeyFrameAnimation) -> ::windows::core::Result<Self> {
        ::core::convert::TryFrom::try_from(&value)
    }
}
impl ::core::convert::TryFrom<&PathKeyFrameAnimation> for ::windows::Foundation::IClosable {
    type Error = ::windows::core::Error;
    fn try_from(value: &PathKeyFrameAnimation) -> ::windows::core::Result<Self> {
        ::windows::core::Interface::cast(value)
    }
}
impl<'a> ::core::convert::TryFrom<&PathKeyFrameAnimation>
    for ::windows::core::InParam<'a, ::windows::Foundation::IClosable>
{
    type Error = ::windows::core::Error;
    fn try_from(value: &PathKeyFrameAnimation) -> ::windows::core::Result<Self> {
        let item = ::std::convert::TryInto::try_into(value)?;
        Ok(::windows::core::InParam::owned(item))
    }
}
impl ::core::convert::TryFrom<PathKeyFrameAnimation> for ICompositionAnimationBase {
    type Error = ::windows::core::Error;
    fn try_from(value: PathKeyFrameAnimation) -> ::windows::core::Result<Self> {
        ::core::convert::TryFrom::try_from(&value)
    }
}
impl ::core::convert::TryFrom<&PathKeyFrameAnimation> for ICompositionAnimationBase {
    type Error = ::windows::core::Error;
    fn try_from(value: &PathKeyFrameAnimation) -> ::windows::core::Result<Self> {
        ::windows::core::Interface::cast(value)
    }
}
impl<'a> ::core::convert::TryFrom<&PathKeyFrameAnimation>
    for ::windows::core::InParam<'a, ICompositionAnimationBase>
{
    type Error = ::windows::core::Error;
    fn try_from(value: &PathKeyFrameAnimation) -> ::windows::core::Result<Self> {
        let item = ::std::convert::TryInto::try_into(value)?;
        Ok(::windows::core::InParam::owned(item))
    }
}
impl ::core::convert::From<PathKeyFrameAnimation> for KeyFrameAnimation {
    fn from(value: PathKeyFrameAnimation) -> Self {
        ::core::convert::From::from(&value)
    }
}
impl ::core::convert::From<&PathKeyFrameAnimation> for KeyFrameAnimation {
    fn from(value: &PathKeyFrameAnimation) -> Self {
        ::windows::core::Interface::cast(value).unwrap()
    }
}
impl<'a> ::core::convert::From<&PathKeyFrameAnimation>
    for ::windows::core::InParam<'a, KeyFrameAnimation>
{
    fn from(value: &PathKeyFrameAnimation) -> Self {
        ::windows::core::InParam::owned(value.into())
    }
}
impl ::core::convert::From<PathKeyFrameAnimation> for CompositionAnimation {
    fn from(value: PathKeyFrameAnimation) -> Self {
        ::core::convert::From::from(&value)
    }
}
impl ::core::convert::From<&PathKeyFrameAnimation> for CompositionAnimation {
    fn from(value: &PathKeyFrameAnimation) -> Self {
        ::windows::core::Interface::cast(value).unwrap()
    }
}
impl<'a> ::core::convert::From<&PathKeyFrameAnimation>
    for ::windows::core::InParam<'a, CompositionAnimation>
{
    fn from(value: &PathKeyFrameAnimation) -> Self {
        ::windows::core::InParam::owned(value.into())
    }
}
impl ::core::convert::From<PathKeyFrameAnimation> for CompositionObject {
    fn from(value: PathKeyFrameAnimation) -> Self {
        ::core::convert::From::from(&value)
    }
}
impl ::core::convert::From<&PathKeyFrameAnimation> for CompositionObject {
    fn from(value: &PathKeyFrameAnimation) -> Self {
        ::windows::core::Interface::cast(value).unwrap()
    }
}
impl<'a> ::core::convert::From<&PathKeyFrameAnimation>
    for ::windows::core::InParam<'a, CompositionObject>
{
    fn from(value: &PathKeyFrameAnimation) -> Self {
        ::windows::core::InParam::owned(value.into())
    }
}
unsafe impl ::core::marker::Send for PathKeyFrameAnimation {}
unsafe impl ::core::marker::Sync for PathKeyFrameAnimation {}
#[doc = "*Required features: `\"UI_Composition\"`*"]
#[repr(transparent)]
pub struct PointLight(::windows::core::IUnknown);
impl PointLight {
    pub fn PopulatePropertyInfo(
        &self,
        propertyname: &::windows::core::HSTRING,
        propertyinfo: &AnimationPropertyInfo,
    ) -> ::windows::core::Result<()> {
        let this = &::windows::core::Interface::cast::<IAnimationObject>(self)?;
        unsafe {
            (::windows::core::Vtable::vtable(this).PopulatePropertyInfo)(
                ::windows::core::Vtable::as_raw(this),
                ::core::mem::transmute_copy(propertyname),
                ::core::mem::transmute_copy(propertyinfo),
            )
            .ok()
        }
    }
    pub fn Close(&self) -> ::windows::core::Result<()> {
        let this = &::windows::core::Interface::cast::<::windows::Foundation::IClosable>(self)?;
        unsafe {
            (::windows::core::Vtable::vtable(this).Close)(::windows::core::Vtable::as_raw(this))
                .ok()
        }
    }
    pub fn Targets(&self) -> ::windows::core::Result<VisualUnorderedCollection> {
        let this = &::windows::core::Interface::cast::<ICompositionLight>(self)?;
        unsafe {
            let mut result__ = ::core::mem::MaybeUninit::zeroed();
            (::windows::core::Vtable::vtable(this).Targets)(
                ::windows::core::Vtable::as_raw(this),
                result__.as_mut_ptr(),
            )
            .from_abi::<VisualUnorderedCollection>(result__)
        }
    }
    pub fn ExclusionsFromTargets(&self) -> ::windows::core::Result<VisualUnorderedCollection> {
        let this = &::windows::core::Interface::cast::<ICompositionLight2>(self)?;
        unsafe {
            let mut result__ = ::core::mem::MaybeUninit::zeroed();
            (::windows::core::Vtable::vtable(this).ExclusionsFromTargets)(
                ::windows::core::Vtable::as_raw(this),
                result__.as_mut_ptr(),
            )
            .from_abi::<VisualUnorderedCollection>(result__)
        }
    }
    pub fn IsEnabled(&self) -> ::windows::core::Result<bool> {
        let this = &::windows::core::Interface::cast::<ICompositionLight3>(self)?;
        unsafe {
            let mut result__ = ::core::mem::MaybeUninit::zeroed();
            (::windows::core::Vtable::vtable(this).IsEnabled)(
                ::windows::core::Vtable::as_raw(this),
                result__.as_mut_ptr(),
            )
            .from_abi::<bool>(result__)
        }
    }
    pub fn SetIsEnabled(&self, value: bool) -> ::windows::core::Result<()> {
        let this = &::windows::core::Interface::cast::<ICompositionLight3>(self)?;
        unsafe {
            (::windows::core::Vtable::vtable(this).SetIsEnabled)(
                ::windows::core::Vtable::as_raw(this),
                value,
            )
            .ok()
        }
    }
    pub fn Compositor(&self) -> ::windows::core::Result<Compositor> {
        let this = &::windows::core::Interface::cast::<ICompositionObject>(self)?;
        unsafe {
            let mut result__ = ::core::mem::MaybeUninit::zeroed();
            (::windows::core::Vtable::vtable(this).Compositor)(
                ::windows::core::Vtable::as_raw(this),
                result__.as_mut_ptr(),
            )
            .from_abi::<Compositor>(result__)
        }
    }
    pub fn Properties(&self) -> ::windows::core::Result<CompositionPropertySet> {
        let this = &::windows::core::Interface::cast::<ICompositionObject>(self)?;
        unsafe {
            let mut result__ = ::core::mem::MaybeUninit::zeroed();
            (::windows::core::Vtable::vtable(this).Properties)(
                ::windows::core::Vtable::as_raw(this),
                result__.as_mut_ptr(),
            )
            .from_abi::<CompositionPropertySet>(result__)
        }
    }
    pub fn StartAnimation<'a, P0>(
        &self,
        propertyname: &::windows::core::HSTRING,
        animation: P0,
    ) -> ::windows::core::Result<()>
    where
        P0: ::std::convert::Into<::windows::core::InParam<'a, CompositionAnimation>>,
    {
        let this = &::windows::core::Interface::cast::<ICompositionObject>(self)?;
        unsafe {
            (::windows::core::Vtable::vtable(this).StartAnimation)(
                ::windows::core::Vtable::as_raw(this),
                ::core::mem::transmute_copy(propertyname),
                animation.into().abi(),
            )
            .ok()
        }
    }
    pub fn StopAnimation(
        &self,
        propertyname: &::windows::core::HSTRING,
    ) -> ::windows::core::Result<()> {
        let this = &::windows::core::Interface::cast::<ICompositionObject>(self)?;
        unsafe {
            (::windows::core::Vtable::vtable(this).StopAnimation)(
                ::windows::core::Vtable::as_raw(this),
                ::core::mem::transmute_copy(propertyname),
            )
            .ok()
        }
    }
    pub fn Comment(&self) -> ::windows::core::Result<::windows::core::HSTRING> {
        let this = &::windows::core::Interface::cast::<ICompositionObject2>(self)?;
        unsafe {
            let mut result__ = ::core::mem::MaybeUninit::zeroed();
            (::windows::core::Vtable::vtable(this).Comment)(
                ::windows::core::Vtable::as_raw(this),
                result__.as_mut_ptr(),
            )
            .from_abi::<::windows::core::HSTRING>(result__)
        }
    }
    pub fn SetComment(&self, value: &::windows::core::HSTRING) -> ::windows::core::Result<()> {
        let this = &::windows::core::Interface::cast::<ICompositionObject2>(self)?;
        unsafe {
            (::windows::core::Vtable::vtable(this).SetComment)(
                ::windows::core::Vtable::as_raw(this),
                ::core::mem::transmute_copy(value),
            )
            .ok()
        }
    }
    pub fn ImplicitAnimations(&self) -> ::windows::core::Result<ImplicitAnimationCollection> {
        let this = &::windows::core::Interface::cast::<ICompositionObject2>(self)?;
        unsafe {
            let mut result__ = ::core::mem::MaybeUninit::zeroed();
            (::windows::core::Vtable::vtable(this).ImplicitAnimations)(
                ::windows::core::Vtable::as_raw(this),
                result__.as_mut_ptr(),
            )
            .from_abi::<ImplicitAnimationCollection>(result__)
        }
    }
    pub fn SetImplicitAnimations(
        &self,
        value: &ImplicitAnimationCollection,
    ) -> ::windows::core::Result<()> {
        let this = &::windows::core::Interface::cast::<ICompositionObject2>(self)?;
        unsafe {
            (::windows::core::Vtable::vtable(this).SetImplicitAnimations)(
                ::windows::core::Vtable::as_raw(this),
                ::core::mem::transmute_copy(value),
            )
            .ok()
        }
    }
    pub fn StartAnimationGroup<'a, P0, E0>(&self, value: P0) -> ::windows::core::Result<()>
    where
        P0: ::std::convert::TryInto<
            ::windows::core::InParam<'a, ICompositionAnimationBase>,
            Error = E0,
        >,
        E0: ::std::convert::Into<::windows::core::Error>,
    {
        let this = &::windows::core::Interface::cast::<ICompositionObject2>(self)?;
        unsafe {
            (::windows::core::Vtable::vtable(this).StartAnimationGroup)(
                ::windows::core::Vtable::as_raw(this),
                value.try_into().map_err(|e| e.into())?.abi(),
            )
            .ok()
        }
    }
    pub fn StopAnimationGroup<'a, P0, E0>(&self, value: P0) -> ::windows::core::Result<()>
    where
        P0: ::std::convert::TryInto<
            ::windows::core::InParam<'a, ICompositionAnimationBase>,
            Error = E0,
        >,
        E0: ::std::convert::Into<::windows::core::Error>,
    {
        let this = &::windows::core::Interface::cast::<ICompositionObject2>(self)?;
        unsafe {
            (::windows::core::Vtable::vtable(this).StopAnimationGroup)(
                ::windows::core::Vtable::as_raw(this),
                value.try_into().map_err(|e| e.into())?.abi(),
            )
            .ok()
        }
    }
    #[doc = "*Required features: `\"UI_Dispatching\"`*"]
    #[cfg(feature = "UI_Dispatching")]
    pub fn DispatcherQueue(&self) -> ::windows::core::Result<super::Dispatching::DispatcherQueue> {
        let this = &::windows::core::Interface::cast::<ICompositionObject3>(self)?;
        unsafe {
            let mut result__ = ::core::mem::MaybeUninit::zeroed();
            (::windows::core::Vtable::vtable(this).DispatcherQueue)(
                ::windows::core::Vtable::as_raw(this),
                result__.as_mut_ptr(),
            )
            .from_abi::<super::Dispatching::DispatcherQueue>(result__)
        }
    }
    pub fn TryGetAnimationController(
        &self,
        propertyname: &::windows::core::HSTRING,
    ) -> ::windows::core::Result<AnimationController> {
        let this = &::windows::core::Interface::cast::<ICompositionObject4>(self)?;
        unsafe {
            let mut result__ = ::core::mem::MaybeUninit::zeroed();
            (::windows::core::Vtable::vtable(this).TryGetAnimationController)(
                ::windows::core::Vtable::as_raw(this),
                ::core::mem::transmute_copy(propertyname),
                result__.as_mut_ptr(),
            )
            .from_abi::<AnimationController>(result__)
        }
    }
    pub fn StartAnimationWithController<'a, P0>(
        &self,
        propertyname: &::windows::core::HSTRING,
        animation: P0,
        animationcontroller: &AnimationController,
    ) -> ::windows::core::Result<()>
    where
        P0: ::std::convert::Into<::windows::core::InParam<'a, CompositionAnimation>>,
    {
        let this = &::windows::core::Interface::cast::<ICompositionObject5>(self)?;
        unsafe {
            (::windows::core::Vtable::vtable(this).StartAnimationWithController)(
                ::windows::core::Vtable::as_raw(this),
                ::core::mem::transmute_copy(propertyname),
                animation.into().abi(),
                ::core::mem::transmute_copy(animationcontroller),
            )
            .ok()
        }
    }
    pub fn Color(&self) -> ::windows::core::Result<::windows::UI::Color> {
        let this = self;
        unsafe {
            let mut result__ = ::core::mem::MaybeUninit::zeroed();
            (::windows::core::Vtable::vtable(this).Color)(
                ::windows::core::Vtable::as_raw(this),
                result__.as_mut_ptr(),
            )
            .from_abi::<::windows::UI::Color>(result__)
        }
    }
    pub fn SetColor(&self, value: ::windows::UI::Color) -> ::windows::core::Result<()> {
        let this = self;
        unsafe {
            (::windows::core::Vtable::vtable(this).SetColor)(
                ::windows::core::Vtable::as_raw(this),
                value,
            )
            .ok()
        }
    }
    pub fn ConstantAttenuation(&self) -> ::windows::core::Result<f32> {
        let this = self;
        unsafe {
            let mut result__ = ::core::mem::MaybeUninit::zeroed();
            (::windows::core::Vtable::vtable(this).ConstantAttenuation)(
                ::windows::core::Vtable::as_raw(this),
                result__.as_mut_ptr(),
            )
            .from_abi::<f32>(result__)
        }
    }
    pub fn SetConstantAttenuation(&self, value: f32) -> ::windows::core::Result<()> {
        let this = self;
        unsafe {
            (::windows::core::Vtable::vtable(this).SetConstantAttenuation)(
                ::windows::core::Vtable::as_raw(this),
                value,
            )
            .ok()
        }
    }
    pub fn CoordinateSpace(&self) -> ::windows::core::Result<Visual> {
        let this = self;
        unsafe {
            let mut result__ = ::core::mem::MaybeUninit::zeroed();
            (::windows::core::Vtable::vtable(this).CoordinateSpace)(
                ::windows::core::Vtable::as_raw(this),
                result__.as_mut_ptr(),
            )
            .from_abi::<Visual>(result__)
        }
    }
    pub fn SetCoordinateSpace<'a, P0>(&self, value: P0) -> ::windows::core::Result<()>
    where
        P0: ::std::convert::Into<::windows::core::InParam<'a, Visual>>,
    {
        let this = self;
        unsafe {
            (::windows::core::Vtable::vtable(this).SetCoordinateSpace)(
                ::windows::core::Vtable::as_raw(this),
                value.into().abi(),
            )
            .ok()
        }
    }
    pub fn LinearAttenuation(&self) -> ::windows::core::Result<f32> {
        let this = self;
        unsafe {
            let mut result__ = ::core::mem::MaybeUninit::zeroed();
            (::windows::core::Vtable::vtable(this).LinearAttenuation)(
                ::windows::core::Vtable::as_raw(this),
                result__.as_mut_ptr(),
            )
            .from_abi::<f32>(result__)
        }
    }
    pub fn SetLinearAttenuation(&self, value: f32) -> ::windows::core::Result<()> {
        let this = self;
        unsafe {
            (::windows::core::Vtable::vtable(this).SetLinearAttenuation)(
                ::windows::core::Vtable::as_raw(this),
                value,
            )
            .ok()
        }
    }
    pub fn Offset(&self) -> ::windows::core::Result<::windows::Foundation::Numerics::Vector3> {
        let this = self;
        unsafe {
            let mut result__ = ::core::mem::MaybeUninit::zeroed();
            (::windows::core::Vtable::vtable(this).Offset)(
                ::windows::core::Vtable::as_raw(this),
                result__.as_mut_ptr(),
            )
            .from_abi::<::windows::Foundation::Numerics::Vector3>(result__)
        }
    }
    pub fn SetOffset(
        &self,
        value: ::windows::Foundation::Numerics::Vector3,
    ) -> ::windows::core::Result<()> {
        let this = self;
        unsafe {
            (::windows::core::Vtable::vtable(this).SetOffset)(
                ::windows::core::Vtable::as_raw(this),
                value,
            )
            .ok()
        }
    }
    pub fn QuadraticAttenuation(&self) -> ::windows::core::Result<f32> {
        let this = self;
        unsafe {
            let mut result__ = ::core::mem::MaybeUninit::zeroed();
            (::windows::core::Vtable::vtable(this).QuadraticAttenuation)(
                ::windows::core::Vtable::as_raw(this),
                result__.as_mut_ptr(),
            )
            .from_abi::<f32>(result__)
        }
    }
    pub fn SetQuadraticAttenuation(&self, value: f32) -> ::windows::core::Result<()> {
        let this = self;
        unsafe {
            (::windows::core::Vtable::vtable(this).SetQuadraticAttenuation)(
                ::windows::core::Vtable::as_raw(this),
                value,
            )
            .ok()
        }
    }
    pub fn Intensity(&self) -> ::windows::core::Result<f32> {
        let this = &::windows::core::Interface::cast::<IPointLight2>(self)?;
        unsafe {
            let mut result__ = ::core::mem::MaybeUninit::zeroed();
            (::windows::core::Vtable::vtable(this).Intensity)(
                ::windows::core::Vtable::as_raw(this),
                result__.as_mut_ptr(),
            )
            .from_abi::<f32>(result__)
        }
    }
    pub fn SetIntensity(&self, value: f32) -> ::windows::core::Result<()> {
        let this = &::windows::core::Interface::cast::<IPointLight2>(self)?;
        unsafe {
            (::windows::core::Vtable::vtable(this).SetIntensity)(
                ::windows::core::Vtable::as_raw(this),
                value,
            )
            .ok()
        }
    }
    pub fn MinAttenuationCutoff(&self) -> ::windows::core::Result<f32> {
        let this = &::windows::core::Interface::cast::<IPointLight3>(self)?;
        unsafe {
            let mut result__ = ::core::mem::MaybeUninit::zeroed();
            (::windows::core::Vtable::vtable(this).MinAttenuationCutoff)(
                ::windows::core::Vtable::as_raw(this),
                result__.as_mut_ptr(),
            )
            .from_abi::<f32>(result__)
        }
    }
    pub fn SetMinAttenuationCutoff(&self, value: f32) -> ::windows::core::Result<()> {
        let this = &::windows::core::Interface::cast::<IPointLight3>(self)?;
        unsafe {
            (::windows::core::Vtable::vtable(this).SetMinAttenuationCutoff)(
                ::windows::core::Vtable::as_raw(this),
                value,
            )
            .ok()
        }
    }
    pub fn MaxAttenuationCutoff(&self) -> ::windows::core::Result<f32> {
        let this = &::windows::core::Interface::cast::<IPointLight3>(self)?;
        unsafe {
            let mut result__ = ::core::mem::MaybeUninit::zeroed();
            (::windows::core::Vtable::vtable(this).MaxAttenuationCutoff)(
                ::windows::core::Vtable::as_raw(this),
                result__.as_mut_ptr(),
            )
            .from_abi::<f32>(result__)
        }
    }
    pub fn SetMaxAttenuationCutoff(&self, value: f32) -> ::windows::core::Result<()> {
        let this = &::windows::core::Interface::cast::<IPointLight3>(self)?;
        unsafe {
            (::windows::core::Vtable::vtable(this).SetMaxAttenuationCutoff)(
                ::windows::core::Vtable::as_raw(this),
                value,
            )
            .ok()
        }
    }
}
impl ::core::clone::Clone for PointLight {
    fn clone(&self) -> Self {
        Self(self.0.clone())
    }
}
impl ::core::cmp::PartialEq for PointLight {
    fn eq(&self, other: &Self) -> bool {
        self.0 == other.0
    }
}
impl ::core::cmp::Eq for PointLight {}
impl ::core::fmt::Debug for PointLight {
    fn fmt(&self, f: &mut ::core::fmt::Formatter<'_>) -> ::core::fmt::Result {
        f.debug_tuple("PointLight").field(&self.0).finish()
    }
}
unsafe impl ::windows::core::RuntimeType for PointLight {
    const SIGNATURE: ::windows::core::ConstBuffer = ::windows::core::ConstBuffer::from_slice(
        b"rc(Microsoft.UI.Composition.PointLight;{ed5cc102-f0ac-59a8-8678-ce54146e7be8})",
    );
    type DefaultType = ::core::option::Option<Self>;
    fn from_default(from: &Self::DefaultType) -> ::windows::core::Result<Self> {
        from.as_ref().cloned().ok_or(::windows::core::Error::OK)
    }
}
unsafe impl ::windows::core::Vtable for PointLight {
    type Vtable = IPointLight_Vtbl;
}
unsafe impl ::windows::core::Interface for PointLight {
    const IID: ::windows::core::GUID = <IPointLight as ::windows::core::Interface>::IID;
}
impl ::windows::core::RuntimeName for PointLight {
    const NAME: &'static str = "Microsoft.UI.Composition.PointLight";
}
::windows::core::interface_hierarchy!(
    PointLight,
    ::windows::core::IUnknown,
    ::windows::core::IInspectable
);
impl ::core::convert::TryFrom<PointLight> for IAnimationObject {
    type Error = ::windows::core::Error;
    fn try_from(value: PointLight) -> ::windows::core::Result<Self> {
        ::core::convert::TryFrom::try_from(&value)
    }
}
impl ::core::convert::TryFrom<&PointLight> for IAnimationObject {
    type Error = ::windows::core::Error;
    fn try_from(value: &PointLight) -> ::windows::core::Result<Self> {
        ::windows::core::Interface::cast(value)
    }
}
impl<'a> ::core::convert::TryFrom<&PointLight> for ::windows::core::InParam<'a, IAnimationObject> {
    type Error = ::windows::core::Error;
    fn try_from(value: &PointLight) -> ::windows::core::Result<Self> {
        let item = ::std::convert::TryInto::try_into(value)?;
        Ok(::windows::core::InParam::owned(item))
    }
}
impl ::core::convert::TryFrom<PointLight> for ::windows::Foundation::IClosable {
    type Error = ::windows::core::Error;
    fn try_from(value: PointLight) -> ::windows::core::Result<Self> {
        ::core::convert::TryFrom::try_from(&value)
    }
}
impl ::core::convert::TryFrom<&PointLight> for ::windows::Foundation::IClosable {
    type Error = ::windows::core::Error;
    fn try_from(value: &PointLight) -> ::windows::core::Result<Self> {
        ::windows::core::Interface::cast(value)
    }
}
impl<'a> ::core::convert::TryFrom<&PointLight>
    for ::windows::core::InParam<'a, ::windows::Foundation::IClosable>
{
    type Error = ::windows::core::Error;
    fn try_from(value: &PointLight) -> ::windows::core::Result<Self> {
        let item = ::std::convert::TryInto::try_into(value)?;
        Ok(::windows::core::InParam::owned(item))
    }
}
impl ::core::convert::From<PointLight> for CompositionLight {
    fn from(value: PointLight) -> Self {
        ::core::convert::From::from(&value)
    }
}
impl ::core::convert::From<&PointLight> for CompositionLight {
    fn from(value: &PointLight) -> Self {
        ::windows::core::Interface::cast(value).unwrap()
    }
}
impl<'a> ::core::convert::From<&PointLight> for ::windows::core::InParam<'a, CompositionLight> {
    fn from(value: &PointLight) -> Self {
        ::windows::core::InParam::owned(value.into())
    }
}
impl ::core::convert::From<PointLight> for CompositionObject {
    fn from(value: PointLight) -> Self {
        ::core::convert::From::from(&value)
    }
}
impl ::core::convert::From<&PointLight> for CompositionObject {
    fn from(value: &PointLight) -> Self {
        ::windows::core::Interface::cast(value).unwrap()
    }
}
impl<'a> ::core::convert::From<&PointLight> for ::windows::core::InParam<'a, CompositionObject> {
    fn from(value: &PointLight) -> Self {
        ::windows::core::InParam::owned(value.into())
    }
}
unsafe impl ::core::marker::Send for PointLight {}
unsafe impl ::core::marker::Sync for PointLight {}
#[doc = "*Required features: `\"UI_Composition\"`*"]
#[repr(transparent)]
pub struct PowerEasingFunction(::windows::core::IUnknown);
impl PowerEasingFunction {
    pub fn PopulatePropertyInfo(
        &self,
        propertyname: &::windows::core::HSTRING,
        propertyinfo: &AnimationPropertyInfo,
    ) -> ::windows::core::Result<()> {
        let this = &::windows::core::Interface::cast::<IAnimationObject>(self)?;
        unsafe {
            (::windows::core::Vtable::vtable(this).PopulatePropertyInfo)(
                ::windows::core::Vtable::as_raw(this),
                ::core::mem::transmute_copy(propertyname),
                ::core::mem::transmute_copy(propertyinfo),
            )
            .ok()
        }
    }
    pub fn Close(&self) -> ::windows::core::Result<()> {
        let this = &::windows::core::Interface::cast::<::windows::Foundation::IClosable>(self)?;
        unsafe {
            (::windows::core::Vtable::vtable(this).Close)(::windows::core::Vtable::as_raw(this))
                .ok()
        }
    }
    pub fn Compositor(&self) -> ::windows::core::Result<Compositor> {
        let this = &::windows::core::Interface::cast::<ICompositionObject>(self)?;
        unsafe {
            let mut result__ = ::core::mem::MaybeUninit::zeroed();
            (::windows::core::Vtable::vtable(this).Compositor)(
                ::windows::core::Vtable::as_raw(this),
                result__.as_mut_ptr(),
            )
            .from_abi::<Compositor>(result__)
        }
    }
    pub fn Properties(&self) -> ::windows::core::Result<CompositionPropertySet> {
        let this = &::windows::core::Interface::cast::<ICompositionObject>(self)?;
        unsafe {
            let mut result__ = ::core::mem::MaybeUninit::zeroed();
            (::windows::core::Vtable::vtable(this).Properties)(
                ::windows::core::Vtable::as_raw(this),
                result__.as_mut_ptr(),
            )
            .from_abi::<CompositionPropertySet>(result__)
        }
    }
    pub fn StartAnimation<'a, P0>(
        &self,
        propertyname: &::windows::core::HSTRING,
        animation: P0,
    ) -> ::windows::core::Result<()>
    where
        P0: ::std::convert::Into<::windows::core::InParam<'a, CompositionAnimation>>,
    {
        let this = &::windows::core::Interface::cast::<ICompositionObject>(self)?;
        unsafe {
            (::windows::core::Vtable::vtable(this).StartAnimation)(
                ::windows::core::Vtable::as_raw(this),
                ::core::mem::transmute_copy(propertyname),
                animation.into().abi(),
            )
            .ok()
        }
    }
    pub fn StopAnimation(
        &self,
        propertyname: &::windows::core::HSTRING,
    ) -> ::windows::core::Result<()> {
        let this = &::windows::core::Interface::cast::<ICompositionObject>(self)?;
        unsafe {
            (::windows::core::Vtable::vtable(this).StopAnimation)(
                ::windows::core::Vtable::as_raw(this),
                ::core::mem::transmute_copy(propertyname),
            )
            .ok()
        }
    }
    pub fn Comment(&self) -> ::windows::core::Result<::windows::core::HSTRING> {
        let this = &::windows::core::Interface::cast::<ICompositionObject2>(self)?;
        unsafe {
            let mut result__ = ::core::mem::MaybeUninit::zeroed();
            (::windows::core::Vtable::vtable(this).Comment)(
                ::windows::core::Vtable::as_raw(this),
                result__.as_mut_ptr(),
            )
            .from_abi::<::windows::core::HSTRING>(result__)
        }
    }
    pub fn SetComment(&self, value: &::windows::core::HSTRING) -> ::windows::core::Result<()> {
        let this = &::windows::core::Interface::cast::<ICompositionObject2>(self)?;
        unsafe {
            (::windows::core::Vtable::vtable(this).SetComment)(
                ::windows::core::Vtable::as_raw(this),
                ::core::mem::transmute_copy(value),
            )
            .ok()
        }
    }
    pub fn ImplicitAnimations(&self) -> ::windows::core::Result<ImplicitAnimationCollection> {
        let this = &::windows::core::Interface::cast::<ICompositionObject2>(self)?;
        unsafe {
            let mut result__ = ::core::mem::MaybeUninit::zeroed();
            (::windows::core::Vtable::vtable(this).ImplicitAnimations)(
                ::windows::core::Vtable::as_raw(this),
                result__.as_mut_ptr(),
            )
            .from_abi::<ImplicitAnimationCollection>(result__)
        }
    }
    pub fn SetImplicitAnimations(
        &self,
        value: &ImplicitAnimationCollection,
    ) -> ::windows::core::Result<()> {
        let this = &::windows::core::Interface::cast::<ICompositionObject2>(self)?;
        unsafe {
            (::windows::core::Vtable::vtable(this).SetImplicitAnimations)(
                ::windows::core::Vtable::as_raw(this),
                ::core::mem::transmute_copy(value),
            )
            .ok()
        }
    }
    pub fn StartAnimationGroup<'a, P0, E0>(&self, value: P0) -> ::windows::core::Result<()>
    where
        P0: ::std::convert::TryInto<
            ::windows::core::InParam<'a, ICompositionAnimationBase>,
            Error = E0,
        >,
        E0: ::std::convert::Into<::windows::core::Error>,
    {
        let this = &::windows::core::Interface::cast::<ICompositionObject2>(self)?;
        unsafe {
            (::windows::core::Vtable::vtable(this).StartAnimationGroup)(
                ::windows::core::Vtable::as_raw(this),
                value.try_into().map_err(|e| e.into())?.abi(),
            )
            .ok()
        }
    }
    pub fn StopAnimationGroup<'a, P0, E0>(&self, value: P0) -> ::windows::core::Result<()>
    where
        P0: ::std::convert::TryInto<
            ::windows::core::InParam<'a, ICompositionAnimationBase>,
            Error = E0,
        >,
        E0: ::std::convert::Into<::windows::core::Error>,
    {
        let this = &::windows::core::Interface::cast::<ICompositionObject2>(self)?;
        unsafe {
            (::windows::core::Vtable::vtable(this).StopAnimationGroup)(
                ::windows::core::Vtable::as_raw(this),
                value.try_into().map_err(|e| e.into())?.abi(),
            )
            .ok()
        }
    }
    #[doc = "*Required features: `\"UI_Dispatching\"`*"]
    #[cfg(feature = "UI_Dispatching")]
    pub fn DispatcherQueue(&self) -> ::windows::core::Result<super::Dispatching::DispatcherQueue> {
        let this = &::windows::core::Interface::cast::<ICompositionObject3>(self)?;
        unsafe {
            let mut result__ = ::core::mem::MaybeUninit::zeroed();
            (::windows::core::Vtable::vtable(this).DispatcherQueue)(
                ::windows::core::Vtable::as_raw(this),
                result__.as_mut_ptr(),
            )
            .from_abi::<super::Dispatching::DispatcherQueue>(result__)
        }
    }
    pub fn TryGetAnimationController(
        &self,
        propertyname: &::windows::core::HSTRING,
    ) -> ::windows::core::Result<AnimationController> {
        let this = &::windows::core::Interface::cast::<ICompositionObject4>(self)?;
        unsafe {
            let mut result__ = ::core::mem::MaybeUninit::zeroed();
            (::windows::core::Vtable::vtable(this).TryGetAnimationController)(
                ::windows::core::Vtable::as_raw(this),
                ::core::mem::transmute_copy(propertyname),
                result__.as_mut_ptr(),
            )
            .from_abi::<AnimationController>(result__)
        }
    }
    pub fn StartAnimationWithController<'a, P0>(
        &self,
        propertyname: &::windows::core::HSTRING,
        animation: P0,
        animationcontroller: &AnimationController,
    ) -> ::windows::core::Result<()>
    where
        P0: ::std::convert::Into<::windows::core::InParam<'a, CompositionAnimation>>,
    {
        let this = &::windows::core::Interface::cast::<ICompositionObject5>(self)?;
        unsafe {
            (::windows::core::Vtable::vtable(this).StartAnimationWithController)(
                ::windows::core::Vtable::as_raw(this),
                ::core::mem::transmute_copy(propertyname),
                animation.into().abi(),
                ::core::mem::transmute_copy(animationcontroller),
            )
            .ok()
        }
    }
    pub fn Mode(&self) -> ::windows::core::Result<CompositionEasingFunctionMode> {
        let this = self;
        unsafe {
            let mut result__ = ::core::mem::MaybeUninit::zeroed();
            (::windows::core::Vtable::vtable(this).Mode)(
                ::windows::core::Vtable::as_raw(this),
                result__.as_mut_ptr(),
            )
            .from_abi::<CompositionEasingFunctionMode>(result__)
        }
    }
    pub fn Power(&self) -> ::windows::core::Result<f32> {
        let this = self;
        unsafe {
            let mut result__ = ::core::mem::MaybeUninit::zeroed();
            (::windows::core::Vtable::vtable(this).Power)(
                ::windows::core::Vtable::as_raw(this),
                result__.as_mut_ptr(),
            )
            .from_abi::<f32>(result__)
        }
    }
}
impl ::core::clone::Clone for PowerEasingFunction {
    fn clone(&self) -> Self {
        Self(self.0.clone())
    }
}
impl ::core::cmp::PartialEq for PowerEasingFunction {
    fn eq(&self, other: &Self) -> bool {
        self.0 == other.0
    }
}
impl ::core::cmp::Eq for PowerEasingFunction {}
impl ::core::fmt::Debug for PowerEasingFunction {
    fn fmt(&self, f: &mut ::core::fmt::Formatter<'_>) -> ::core::fmt::Result {
        f.debug_tuple("PowerEasingFunction").field(&self.0).finish()
    }
}
unsafe impl ::windows::core::RuntimeType for PowerEasingFunction {
    const SIGNATURE: ::windows::core::ConstBuffer = ::windows::core::ConstBuffer::from_slice(
        b"rc(Microsoft.UI.Composition.PowerEasingFunction;{0268a272-ea06-5fb0-8def-49726bcee39b})",
    );
    type DefaultType = ::core::option::Option<Self>;
    fn from_default(from: &Self::DefaultType) -> ::windows::core::Result<Self> {
        from.as_ref().cloned().ok_or(::windows::core::Error::OK)
    }
}
unsafe impl ::windows::core::Vtable for PowerEasingFunction {
    type Vtable = IPowerEasingFunction_Vtbl;
}
unsafe impl ::windows::core::Interface for PowerEasingFunction {
    const IID: ::windows::core::GUID = <IPowerEasingFunction as ::windows::core::Interface>::IID;
}
impl ::windows::core::RuntimeName for PowerEasingFunction {
    const NAME: &'static str = "Microsoft.UI.Composition.PowerEasingFunction";
}
::windows::core::interface_hierarchy!(
    PowerEasingFunction,
    ::windows::core::IUnknown,
    ::windows::core::IInspectable
);
impl ::core::convert::TryFrom<PowerEasingFunction> for IAnimationObject {
    type Error = ::windows::core::Error;
    fn try_from(value: PowerEasingFunction) -> ::windows::core::Result<Self> {
        ::core::convert::TryFrom::try_from(&value)
    }
}
impl ::core::convert::TryFrom<&PowerEasingFunction> for IAnimationObject {
    type Error = ::windows::core::Error;
    fn try_from(value: &PowerEasingFunction) -> ::windows::core::Result<Self> {
        ::windows::core::Interface::cast(value)
    }
}
impl<'a> ::core::convert::TryFrom<&PowerEasingFunction>
    for ::windows::core::InParam<'a, IAnimationObject>
{
    type Error = ::windows::core::Error;
    fn try_from(value: &PowerEasingFunction) -> ::windows::core::Result<Self> {
        let item = ::std::convert::TryInto::try_into(value)?;
        Ok(::windows::core::InParam::owned(item))
    }
}
impl ::core::convert::TryFrom<PowerEasingFunction> for ::windows::Foundation::IClosable {
    type Error = ::windows::core::Error;
    fn try_from(value: PowerEasingFunction) -> ::windows::core::Result<Self> {
        ::core::convert::TryFrom::try_from(&value)
    }
}
impl ::core::convert::TryFrom<&PowerEasingFunction> for ::windows::Foundation::IClosable {
    type Error = ::windows::core::Error;
    fn try_from(value: &PowerEasingFunction) -> ::windows::core::Result<Self> {
        ::windows::core::Interface::cast(value)
    }
}
impl<'a> ::core::convert::TryFrom<&PowerEasingFunction>
    for ::windows::core::InParam<'a, ::windows::Foundation::IClosable>
{
    type Error = ::windows::core::Error;
    fn try_from(value: &PowerEasingFunction) -> ::windows::core::Result<Self> {
        let item = ::std::convert::TryInto::try_into(value)?;
        Ok(::windows::core::InParam::owned(item))
    }
}
impl ::core::convert::From<PowerEasingFunction> for CompositionEasingFunction {
    fn from(value: PowerEasingFunction) -> Self {
        ::core::convert::From::from(&value)
    }
}
impl ::core::convert::From<&PowerEasingFunction> for CompositionEasingFunction {
    fn from(value: &PowerEasingFunction) -> Self {
        ::windows::core::Interface::cast(value).unwrap()
    }
}
impl<'a> ::core::convert::From<&PowerEasingFunction>
    for ::windows::core::InParam<'a, CompositionEasingFunction>
{
    fn from(value: &PowerEasingFunction) -> Self {
        ::windows::core::InParam::owned(value.into())
    }
}
impl ::core::convert::From<PowerEasingFunction> for CompositionObject {
    fn from(value: PowerEasingFunction) -> Self {
        ::core::convert::From::from(&value)
    }
}
impl ::core::convert::From<&PowerEasingFunction> for CompositionObject {
    fn from(value: &PowerEasingFunction) -> Self {
        ::windows::core::Interface::cast(value).unwrap()
    }
}
impl<'a> ::core::convert::From<&PowerEasingFunction>
    for ::windows::core::InParam<'a, CompositionObject>
{
    fn from(value: &PowerEasingFunction) -> Self {
        ::windows::core::InParam::owned(value.into())
    }
}
unsafe impl ::core::marker::Send for PowerEasingFunction {}
unsafe impl ::core::marker::Sync for PowerEasingFunction {}
#[doc = "*Required features: `\"UI_Composition\"`*"]
#[repr(transparent)]
pub struct QuaternionKeyFrameAnimation(::windows::core::IUnknown);
impl QuaternionKeyFrameAnimation {
    pub fn PopulatePropertyInfo(
        &self,
        propertyname: &::windows::core::HSTRING,
        propertyinfo: &AnimationPropertyInfo,
    ) -> ::windows::core::Result<()> {
        let this = &::windows::core::Interface::cast::<IAnimationObject>(self)?;
        unsafe {
            (::windows::core::Vtable::vtable(this).PopulatePropertyInfo)(
                ::windows::core::Vtable::as_raw(this),
                ::core::mem::transmute_copy(propertyname),
                ::core::mem::transmute_copy(propertyinfo),
            )
            .ok()
        }
    }
    pub fn Close(&self) -> ::windows::core::Result<()> {
        let this = &::windows::core::Interface::cast::<::windows::Foundation::IClosable>(self)?;
        unsafe {
            (::windows::core::Vtable::vtable(this).Close)(::windows::core::Vtable::as_raw(this))
                .ok()
        }
    }
    pub fn ClearAllParameters(&self) -> ::windows::core::Result<()> {
        let this = &::windows::core::Interface::cast::<ICompositionAnimation>(self)?;
        unsafe {
            (::windows::core::Vtable::vtable(this).ClearAllParameters)(
                ::windows::core::Vtable::as_raw(this),
            )
            .ok()
        }
    }
    pub fn ClearParameter(&self, key: &::windows::core::HSTRING) -> ::windows::core::Result<()> {
        let this = &::windows::core::Interface::cast::<ICompositionAnimation>(self)?;
        unsafe {
            (::windows::core::Vtable::vtable(this).ClearParameter)(
                ::windows::core::Vtable::as_raw(this),
                ::core::mem::transmute_copy(key),
            )
            .ok()
        }
    }
    pub fn SetColorParameter(
        &self,
        key: &::windows::core::HSTRING,
        value: ::windows::UI::Color,
    ) -> ::windows::core::Result<()> {
        let this = &::windows::core::Interface::cast::<ICompositionAnimation>(self)?;
        unsafe {
            (::windows::core::Vtable::vtable(this).SetColorParameter)(
                ::windows::core::Vtable::as_raw(this),
                ::core::mem::transmute_copy(key),
                value,
            )
            .ok()
        }
    }
    pub fn SetMatrix3x2Parameter(
        &self,
        key: &::windows::core::HSTRING,
        value: ::windows::Foundation::Numerics::Matrix3x2,
    ) -> ::windows::core::Result<()> {
        let this = &::windows::core::Interface::cast::<ICompositionAnimation>(self)?;
        unsafe {
            (::windows::core::Vtable::vtable(this).SetMatrix3x2Parameter)(
                ::windows::core::Vtable::as_raw(this),
                ::core::mem::transmute_copy(key),
                value,
            )
            .ok()
        }
    }
    pub fn SetMatrix4x4Parameter(
        &self,
        key: &::windows::core::HSTRING,
        value: ::windows::Foundation::Numerics::Matrix4x4,
    ) -> ::windows::core::Result<()> {
        let this = &::windows::core::Interface::cast::<ICompositionAnimation>(self)?;
        unsafe {
            (::windows::core::Vtable::vtable(this).SetMatrix4x4Parameter)(
                ::windows::core::Vtable::as_raw(this),
                ::core::mem::transmute_copy(key),
                value,
            )
            .ok()
        }
    }
    pub fn SetQuaternionParameter(
        &self,
        key: &::windows::core::HSTRING,
        value: ::windows::Foundation::Numerics::Quaternion,
    ) -> ::windows::core::Result<()> {
        let this = &::windows::core::Interface::cast::<ICompositionAnimation>(self)?;
        unsafe {
            (::windows::core::Vtable::vtable(this).SetQuaternionParameter)(
                ::windows::core::Vtable::as_raw(this),
                ::core::mem::transmute_copy(key),
                value,
            )
            .ok()
        }
    }
    pub fn SetReferenceParameter<'a, P0>(
        &self,
        key: &::windows::core::HSTRING,
        compositionobject: P0,
    ) -> ::windows::core::Result<()>
    where
        P0: ::std::convert::Into<::windows::core::InParam<'a, CompositionObject>>,
    {
        let this = &::windows::core::Interface::cast::<ICompositionAnimation>(self)?;
        unsafe {
            (::windows::core::Vtable::vtable(this).SetReferenceParameter)(
                ::windows::core::Vtable::as_raw(this),
                ::core::mem::transmute_copy(key),
                compositionobject.into().abi(),
            )
            .ok()
        }
    }
    pub fn SetScalarParameter(
        &self,
        key: &::windows::core::HSTRING,
        value: f32,
    ) -> ::windows::core::Result<()> {
        let this = &::windows::core::Interface::cast::<ICompositionAnimation>(self)?;
        unsafe {
            (::windows::core::Vtable::vtable(this).SetScalarParameter)(
                ::windows::core::Vtable::as_raw(this),
                ::core::mem::transmute_copy(key),
                value,
            )
            .ok()
        }
    }
    pub fn SetVector2Parameter(
        &self,
        key: &::windows::core::HSTRING,
        value: ::windows::Foundation::Numerics::Vector2,
    ) -> ::windows::core::Result<()> {
        let this = &::windows::core::Interface::cast::<ICompositionAnimation>(self)?;
        unsafe {
            (::windows::core::Vtable::vtable(this).SetVector2Parameter)(
                ::windows::core::Vtable::as_raw(this),
                ::core::mem::transmute_copy(key),
                value,
            )
            .ok()
        }
    }
    pub fn SetVector3Parameter(
        &self,
        key: &::windows::core::HSTRING,
        value: ::windows::Foundation::Numerics::Vector3,
    ) -> ::windows::core::Result<()> {
        let this = &::windows::core::Interface::cast::<ICompositionAnimation>(self)?;
        unsafe {
            (::windows::core::Vtable::vtable(this).SetVector3Parameter)(
                ::windows::core::Vtable::as_raw(this),
                ::core::mem::transmute_copy(key),
                value,
            )
            .ok()
        }
    }
    pub fn SetVector4Parameter(
        &self,
        key: &::windows::core::HSTRING,
        value: ::windows::Foundation::Numerics::Vector4,
    ) -> ::windows::core::Result<()> {
        let this = &::windows::core::Interface::cast::<ICompositionAnimation>(self)?;
        unsafe {
            (::windows::core::Vtable::vtable(this).SetVector4Parameter)(
                ::windows::core::Vtable::as_raw(this),
                ::core::mem::transmute_copy(key),
                value,
            )
            .ok()
        }
    }
    pub fn SetBooleanParameter(
        &self,
        key: &::windows::core::HSTRING,
        value: bool,
    ) -> ::windows::core::Result<()> {
        let this = &::windows::core::Interface::cast::<ICompositionAnimation2>(self)?;
        unsafe {
            (::windows::core::Vtable::vtable(this).SetBooleanParameter)(
                ::windows::core::Vtable::as_raw(this),
                ::core::mem::transmute_copy(key),
                value,
            )
            .ok()
        }
    }
    pub fn Target(&self) -> ::windows::core::Result<::windows::core::HSTRING> {
        let this = &::windows::core::Interface::cast::<ICompositionAnimation2>(self)?;
        unsafe {
            let mut result__ = ::core::mem::MaybeUninit::zeroed();
            (::windows::core::Vtable::vtable(this).Target)(
                ::windows::core::Vtable::as_raw(this),
                result__.as_mut_ptr(),
            )
            .from_abi::<::windows::core::HSTRING>(result__)
        }
    }
    pub fn SetTarget(&self, value: &::windows::core::HSTRING) -> ::windows::core::Result<()> {
        let this = &::windows::core::Interface::cast::<ICompositionAnimation2>(self)?;
        unsafe {
            (::windows::core::Vtable::vtable(this).SetTarget)(
                ::windows::core::Vtable::as_raw(this),
                ::core::mem::transmute_copy(value),
            )
            .ok()
        }
    }
    pub fn InitialValueExpressions(
        &self,
    ) -> ::windows::core::Result<InitialValueExpressionCollection> {
        let this = &::windows::core::Interface::cast::<ICompositionAnimation3>(self)?;
        unsafe {
            let mut result__ = ::core::mem::MaybeUninit::zeroed();
            (::windows::core::Vtable::vtable(this).InitialValueExpressions)(
                ::windows::core::Vtable::as_raw(this),
                result__.as_mut_ptr(),
            )
            .from_abi::<InitialValueExpressionCollection>(result__)
        }
    }
    pub fn SetExpressionReferenceParameter<'a, P0, E0>(
        &self,
        parametername: &::windows::core::HSTRING,
        source: P0,
    ) -> ::windows::core::Result<()>
    where
        P0: ::std::convert::TryInto<::windows::core::InParam<'a, IAnimationObject>, Error = E0>,
        E0: ::std::convert::Into<::windows::core::Error>,
    {
        let this = &::windows::core::Interface::cast::<ICompositionAnimation4>(self)?;
        unsafe {
            (::windows::core::Vtable::vtable(this).SetExpressionReferenceParameter)(
                ::windows::core::Vtable::as_raw(this),
                ::core::mem::transmute_copy(parametername),
                source.try_into().map_err(|e| e.into())?.abi(),
            )
            .ok()
        }
    }
    pub fn Compositor(&self) -> ::windows::core::Result<Compositor> {
        let this = &::windows::core::Interface::cast::<ICompositionObject>(self)?;
        unsafe {
            let mut result__ = ::core::mem::MaybeUninit::zeroed();
            (::windows::core::Vtable::vtable(this).Compositor)(
                ::windows::core::Vtable::as_raw(this),
                result__.as_mut_ptr(),
            )
            .from_abi::<Compositor>(result__)
        }
    }
    pub fn Properties(&self) -> ::windows::core::Result<CompositionPropertySet> {
        let this = &::windows::core::Interface::cast::<ICompositionObject>(self)?;
        unsafe {
            let mut result__ = ::core::mem::MaybeUninit::zeroed();
            (::windows::core::Vtable::vtable(this).Properties)(
                ::windows::core::Vtable::as_raw(this),
                result__.as_mut_ptr(),
            )
            .from_abi::<CompositionPropertySet>(result__)
        }
    }
    pub fn StartAnimation<'a, P0>(
        &self,
        propertyname: &::windows::core::HSTRING,
        animation: P0,
    ) -> ::windows::core::Result<()>
    where
        P0: ::std::convert::Into<::windows::core::InParam<'a, CompositionAnimation>>,
    {
        let this = &::windows::core::Interface::cast::<ICompositionObject>(self)?;
        unsafe {
            (::windows::core::Vtable::vtable(this).StartAnimation)(
                ::windows::core::Vtable::as_raw(this),
                ::core::mem::transmute_copy(propertyname),
                animation.into().abi(),
            )
            .ok()
        }
    }
    pub fn StopAnimation(
        &self,
        propertyname: &::windows::core::HSTRING,
    ) -> ::windows::core::Result<()> {
        let this = &::windows::core::Interface::cast::<ICompositionObject>(self)?;
        unsafe {
            (::windows::core::Vtable::vtable(this).StopAnimation)(
                ::windows::core::Vtable::as_raw(this),
                ::core::mem::transmute_copy(propertyname),
            )
            .ok()
        }
    }
    pub fn Comment(&self) -> ::windows::core::Result<::windows::core::HSTRING> {
        let this = &::windows::core::Interface::cast::<ICompositionObject2>(self)?;
        unsafe {
            let mut result__ = ::core::mem::MaybeUninit::zeroed();
            (::windows::core::Vtable::vtable(this).Comment)(
                ::windows::core::Vtable::as_raw(this),
                result__.as_mut_ptr(),
            )
            .from_abi::<::windows::core::HSTRING>(result__)
        }
    }
    pub fn SetComment(&self, value: &::windows::core::HSTRING) -> ::windows::core::Result<()> {
        let this = &::windows::core::Interface::cast::<ICompositionObject2>(self)?;
        unsafe {
            (::windows::core::Vtable::vtable(this).SetComment)(
                ::windows::core::Vtable::as_raw(this),
                ::core::mem::transmute_copy(value),
            )
            .ok()
        }
    }
    pub fn ImplicitAnimations(&self) -> ::windows::core::Result<ImplicitAnimationCollection> {
        let this = &::windows::core::Interface::cast::<ICompositionObject2>(self)?;
        unsafe {
            let mut result__ = ::core::mem::MaybeUninit::zeroed();
            (::windows::core::Vtable::vtable(this).ImplicitAnimations)(
                ::windows::core::Vtable::as_raw(this),
                result__.as_mut_ptr(),
            )
            .from_abi::<ImplicitAnimationCollection>(result__)
        }
    }
    pub fn SetImplicitAnimations(
        &self,
        value: &ImplicitAnimationCollection,
    ) -> ::windows::core::Result<()> {
        let this = &::windows::core::Interface::cast::<ICompositionObject2>(self)?;
        unsafe {
            (::windows::core::Vtable::vtable(this).SetImplicitAnimations)(
                ::windows::core::Vtable::as_raw(this),
                ::core::mem::transmute_copy(value),
            )
            .ok()
        }
    }
    pub fn StartAnimationGroup<'a, P0, E0>(&self, value: P0) -> ::windows::core::Result<()>
    where
        P0: ::std::convert::TryInto<
            ::windows::core::InParam<'a, ICompositionAnimationBase>,
            Error = E0,
        >,
        E0: ::std::convert::Into<::windows::core::Error>,
    {
        let this = &::windows::core::Interface::cast::<ICompositionObject2>(self)?;
        unsafe {
            (::windows::core::Vtable::vtable(this).StartAnimationGroup)(
                ::windows::core::Vtable::as_raw(this),
                value.try_into().map_err(|e| e.into())?.abi(),
            )
            .ok()
        }
    }
    pub fn StopAnimationGroup<'a, P0, E0>(&self, value: P0) -> ::windows::core::Result<()>
    where
        P0: ::std::convert::TryInto<
            ::windows::core::InParam<'a, ICompositionAnimationBase>,
            Error = E0,
        >,
        E0: ::std::convert::Into<::windows::core::Error>,
    {
        let this = &::windows::core::Interface::cast::<ICompositionObject2>(self)?;
        unsafe {
            (::windows::core::Vtable::vtable(this).StopAnimationGroup)(
                ::windows::core::Vtable::as_raw(this),
                value.try_into().map_err(|e| e.into())?.abi(),
            )
            .ok()
        }
    }
    #[doc = "*Required features: `\"UI_Dispatching\"`*"]
    #[cfg(feature = "UI_Dispatching")]
    pub fn DispatcherQueue(&self) -> ::windows::core::Result<super::Dispatching::DispatcherQueue> {
        let this = &::windows::core::Interface::cast::<ICompositionObject3>(self)?;
        unsafe {
            let mut result__ = ::core::mem::MaybeUninit::zeroed();
            (::windows::core::Vtable::vtable(this).DispatcherQueue)(
                ::windows::core::Vtable::as_raw(this),
                result__.as_mut_ptr(),
            )
            .from_abi::<super::Dispatching::DispatcherQueue>(result__)
        }
    }
    pub fn TryGetAnimationController(
        &self,
        propertyname: &::windows::core::HSTRING,
    ) -> ::windows::core::Result<AnimationController> {
        let this = &::windows::core::Interface::cast::<ICompositionObject4>(self)?;
        unsafe {
            let mut result__ = ::core::mem::MaybeUninit::zeroed();
            (::windows::core::Vtable::vtable(this).TryGetAnimationController)(
                ::windows::core::Vtable::as_raw(this),
                ::core::mem::transmute_copy(propertyname),
                result__.as_mut_ptr(),
            )
            .from_abi::<AnimationController>(result__)
        }
    }
    pub fn StartAnimationWithController<'a, P0>(
        &self,
        propertyname: &::windows::core::HSTRING,
        animation: P0,
        animationcontroller: &AnimationController,
    ) -> ::windows::core::Result<()>
    where
        P0: ::std::convert::Into<::windows::core::InParam<'a, CompositionAnimation>>,
    {
        let this = &::windows::core::Interface::cast::<ICompositionObject5>(self)?;
        unsafe {
            (::windows::core::Vtable::vtable(this).StartAnimationWithController)(
                ::windows::core::Vtable::as_raw(this),
                ::core::mem::transmute_copy(propertyname),
                animation.into().abi(),
                ::core::mem::transmute_copy(animationcontroller),
            )
            .ok()
        }
    }
    pub fn DelayTime(&self) -> ::windows::core::Result<::windows::Foundation::TimeSpan> {
        let this = &::windows::core::Interface::cast::<IKeyFrameAnimation>(self)?;
        unsafe {
            let mut result__ = ::core::mem::MaybeUninit::zeroed();
            (::windows::core::Vtable::vtable(this).DelayTime)(
                ::windows::core::Vtable::as_raw(this),
                result__.as_mut_ptr(),
            )
            .from_abi::<::windows::Foundation::TimeSpan>(result__)
        }
    }
    pub fn SetDelayTime(
        &self,
        value: ::windows::Foundation::TimeSpan,
    ) -> ::windows::core::Result<()> {
        let this = &::windows::core::Interface::cast::<IKeyFrameAnimation>(self)?;
        unsafe {
            (::windows::core::Vtable::vtable(this).SetDelayTime)(
                ::windows::core::Vtable::as_raw(this),
                value,
            )
            .ok()
        }
    }
    pub fn Duration(&self) -> ::windows::core::Result<::windows::Foundation::TimeSpan> {
        let this = &::windows::core::Interface::cast::<IKeyFrameAnimation>(self)?;
        unsafe {
            let mut result__ = ::core::mem::MaybeUninit::zeroed();
            (::windows::core::Vtable::vtable(this).Duration)(
                ::windows::core::Vtable::as_raw(this),
                result__.as_mut_ptr(),
            )
            .from_abi::<::windows::Foundation::TimeSpan>(result__)
        }
    }
    pub fn SetDuration(
        &self,
        value: ::windows::Foundation::TimeSpan,
    ) -> ::windows::core::Result<()> {
        let this = &::windows::core::Interface::cast::<IKeyFrameAnimation>(self)?;
        unsafe {
            (::windows::core::Vtable::vtable(this).SetDuration)(
                ::windows::core::Vtable::as_raw(this),
                value,
            )
            .ok()
        }
    }
    pub fn IterationBehavior(&self) -> ::windows::core::Result<AnimationIterationBehavior> {
        let this = &::windows::core::Interface::cast::<IKeyFrameAnimation>(self)?;
        unsafe {
            let mut result__ = ::core::mem::MaybeUninit::zeroed();
            (::windows::core::Vtable::vtable(this).IterationBehavior)(
                ::windows::core::Vtable::as_raw(this),
                result__.as_mut_ptr(),
            )
            .from_abi::<AnimationIterationBehavior>(result__)
        }
    }
    pub fn SetIterationBehavior(
        &self,
        value: AnimationIterationBehavior,
    ) -> ::windows::core::Result<()> {
        let this = &::windows::core::Interface::cast::<IKeyFrameAnimation>(self)?;
        unsafe {
            (::windows::core::Vtable::vtable(this).SetIterationBehavior)(
                ::windows::core::Vtable::as_raw(this),
                value,
            )
            .ok()
        }
    }
    pub fn IterationCount(&self) -> ::windows::core::Result<i32> {
        let this = &::windows::core::Interface::cast::<IKeyFrameAnimation>(self)?;
        unsafe {
            let mut result__ = ::core::mem::MaybeUninit::zeroed();
            (::windows::core::Vtable::vtable(this).IterationCount)(
                ::windows::core::Vtable::as_raw(this),
                result__.as_mut_ptr(),
            )
            .from_abi::<i32>(result__)
        }
    }
    pub fn SetIterationCount(&self, value: i32) -> ::windows::core::Result<()> {
        let this = &::windows::core::Interface::cast::<IKeyFrameAnimation>(self)?;
        unsafe {
            (::windows::core::Vtable::vtable(this).SetIterationCount)(
                ::windows::core::Vtable::as_raw(this),
                value,
            )
            .ok()
        }
    }
    pub fn KeyFrameCount(&self) -> ::windows::core::Result<i32> {
        let this = &::windows::core::Interface::cast::<IKeyFrameAnimation>(self)?;
        unsafe {
            let mut result__ = ::core::mem::MaybeUninit::zeroed();
            (::windows::core::Vtable::vtable(this).KeyFrameCount)(
                ::windows::core::Vtable::as_raw(this),
                result__.as_mut_ptr(),
            )
            .from_abi::<i32>(result__)
        }
    }
    pub fn StopBehavior(&self) -> ::windows::core::Result<AnimationStopBehavior> {
        let this = &::windows::core::Interface::cast::<IKeyFrameAnimation>(self)?;
        unsafe {
            let mut result__ = ::core::mem::MaybeUninit::zeroed();
            (::windows::core::Vtable::vtable(this).StopBehavior)(
                ::windows::core::Vtable::as_raw(this),
                result__.as_mut_ptr(),
            )
            .from_abi::<AnimationStopBehavior>(result__)
        }
    }
    pub fn SetStopBehavior(&self, value: AnimationStopBehavior) -> ::windows::core::Result<()> {
        let this = &::windows::core::Interface::cast::<IKeyFrameAnimation>(self)?;
        unsafe {
            (::windows::core::Vtable::vtable(this).SetStopBehavior)(
                ::windows::core::Vtable::as_raw(this),
                value,
            )
            .ok()
        }
    }
    pub fn InsertExpressionKeyFrame(
        &self,
        normalizedprogresskey: f32,
        value: &::windows::core::HSTRING,
    ) -> ::windows::core::Result<()> {
        let this = &::windows::core::Interface::cast::<IKeyFrameAnimation>(self)?;
        unsafe {
            (::windows::core::Vtable::vtable(this).InsertExpressionKeyFrame)(
                ::windows::core::Vtable::as_raw(this),
                normalizedprogresskey,
                ::core::mem::transmute_copy(value),
            )
            .ok()
        }
    }
    pub fn InsertExpressionKeyFrameWithEasingFunction<'a, P0>(
        &self,
        normalizedprogresskey: f32,
        value: &::windows::core::HSTRING,
        easingfunction: P0,
    ) -> ::windows::core::Result<()>
    where
        P0: ::std::convert::Into<::windows::core::InParam<'a, CompositionEasingFunction>>,
    {
        let this = &::windows::core::Interface::cast::<IKeyFrameAnimation>(self)?;
        unsafe {
            (::windows::core::Vtable::vtable(this).InsertExpressionKeyFrameWithEasingFunction)(
                ::windows::core::Vtable::as_raw(this),
                normalizedprogresskey,
                ::core::mem::transmute_copy(value),
                easingfunction.into().abi(),
            )
            .ok()
        }
    }
    pub fn Direction(&self) -> ::windows::core::Result<AnimationDirection> {
        let this = &::windows::core::Interface::cast::<IKeyFrameAnimation2>(self)?;
        unsafe {
            let mut result__ = ::core::mem::MaybeUninit::zeroed();
            (::windows::core::Vtable::vtable(this).Direction)(
                ::windows::core::Vtable::as_raw(this),
                result__.as_mut_ptr(),
            )
            .from_abi::<AnimationDirection>(result__)
        }
    }
    pub fn SetDirection(&self, value: AnimationDirection) -> ::windows::core::Result<()> {
        let this = &::windows::core::Interface::cast::<IKeyFrameAnimation2>(self)?;
        unsafe {
            (::windows::core::Vtable::vtable(this).SetDirection)(
                ::windows::core::Vtable::as_raw(this),
                value,
            )
            .ok()
        }
    }
    pub fn DelayBehavior(&self) -> ::windows::core::Result<AnimationDelayBehavior> {
        let this = &::windows::core::Interface::cast::<IKeyFrameAnimation3>(self)?;
        unsafe {
            let mut result__ = ::core::mem::MaybeUninit::zeroed();
            (::windows::core::Vtable::vtable(this).DelayBehavior)(
                ::windows::core::Vtable::as_raw(this),
                result__.as_mut_ptr(),
            )
            .from_abi::<AnimationDelayBehavior>(result__)
        }
    }
    pub fn SetDelayBehavior(&self, value: AnimationDelayBehavior) -> ::windows::core::Result<()> {
        let this = &::windows::core::Interface::cast::<IKeyFrameAnimation3>(self)?;
        unsafe {
            (::windows::core::Vtable::vtable(this).SetDelayBehavior)(
                ::windows::core::Vtable::as_raw(this),
                value,
            )
            .ok()
        }
    }
    pub fn InsertKeyFrame(
        &self,
        normalizedprogresskey: f32,
        value: ::windows::Foundation::Numerics::Quaternion,
    ) -> ::windows::core::Result<()> {
        let this = self;
        unsafe {
            (::windows::core::Vtable::vtable(this).InsertKeyFrame)(
                ::windows::core::Vtable::as_raw(this),
                normalizedprogresskey,
                value,
            )
            .ok()
        }
    }
    pub fn InsertKeyFrameWithEasingFunction<'a, P0>(
        &self,
        normalizedprogresskey: f32,
        value: ::windows::Foundation::Numerics::Quaternion,
        easingfunction: P0,
    ) -> ::windows::core::Result<()>
    where
        P0: ::std::convert::Into<::windows::core::InParam<'a, CompositionEasingFunction>>,
    {
        let this = self;
        unsafe {
            (::windows::core::Vtable::vtable(this).InsertKeyFrameWithEasingFunction)(
                ::windows::core::Vtable::as_raw(this),
                normalizedprogresskey,
                value,
                easingfunction.into().abi(),
            )
            .ok()
        }
    }
}
impl ::core::clone::Clone for QuaternionKeyFrameAnimation {
    fn clone(&self) -> Self {
        Self(self.0.clone())
    }
}
impl ::core::cmp::PartialEq for QuaternionKeyFrameAnimation {
    fn eq(&self, other: &Self) -> bool {
        self.0 == other.0
    }
}
impl ::core::cmp::Eq for QuaternionKeyFrameAnimation {}
impl ::core::fmt::Debug for QuaternionKeyFrameAnimation {
    fn fmt(&self, f: &mut ::core::fmt::Formatter<'_>) -> ::core::fmt::Result {
        f.debug_tuple("QuaternionKeyFrameAnimation").field(&self.0).finish()
    }
}
unsafe impl ::windows::core::RuntimeType for QuaternionKeyFrameAnimation {
    const SIGNATURE : ::windows::core::ConstBuffer = ::windows::core::ConstBuffer::from_slice ( b"rc(Microsoft.UI.Composition.QuaternionKeyFrameAnimation;{e72d1026-da3b-5d56-858b-3a9aa3c57d70})" ) ;
    type DefaultType = ::core::option::Option<Self>;
    fn from_default(from: &Self::DefaultType) -> ::windows::core::Result<Self> {
        from.as_ref().cloned().ok_or(::windows::core::Error::OK)
    }
}
unsafe impl ::windows::core::Vtable for QuaternionKeyFrameAnimation {
    type Vtable = IQuaternionKeyFrameAnimation_Vtbl;
}
unsafe impl ::windows::core::Interface for QuaternionKeyFrameAnimation {
    const IID: ::windows::core::GUID =
        <IQuaternionKeyFrameAnimation as ::windows::core::Interface>::IID;
}
impl ::windows::core::RuntimeName for QuaternionKeyFrameAnimation {
    const NAME: &'static str = "Microsoft.UI.Composition.QuaternionKeyFrameAnimation";
}
::windows::core::interface_hierarchy!(
    QuaternionKeyFrameAnimation,
    ::windows::core::IUnknown,
    ::windows::core::IInspectable
);
impl ::core::convert::TryFrom<QuaternionKeyFrameAnimation> for IAnimationObject {
    type Error = ::windows::core::Error;
    fn try_from(value: QuaternionKeyFrameAnimation) -> ::windows::core::Result<Self> {
        ::core::convert::TryFrom::try_from(&value)
    }
}
impl ::core::convert::TryFrom<&QuaternionKeyFrameAnimation> for IAnimationObject {
    type Error = ::windows::core::Error;
    fn try_from(value: &QuaternionKeyFrameAnimation) -> ::windows::core::Result<Self> {
        ::windows::core::Interface::cast(value)
    }
}
impl<'a> ::core::convert::TryFrom<&QuaternionKeyFrameAnimation>
    for ::windows::core::InParam<'a, IAnimationObject>
{
    type Error = ::windows::core::Error;
    fn try_from(value: &QuaternionKeyFrameAnimation) -> ::windows::core::Result<Self> {
        let item = ::std::convert::TryInto::try_into(value)?;
        Ok(::windows::core::InParam::owned(item))
    }
}
impl ::core::convert::TryFrom<QuaternionKeyFrameAnimation> for ::windows::Foundation::IClosable {
    type Error = ::windows::core::Error;
    fn try_from(value: QuaternionKeyFrameAnimation) -> ::windows::core::Result<Self> {
        ::core::convert::TryFrom::try_from(&value)
    }
}
impl ::core::convert::TryFrom<&QuaternionKeyFrameAnimation> for ::windows::Foundation::IClosable {
    type Error = ::windows::core::Error;
    fn try_from(value: &QuaternionKeyFrameAnimation) -> ::windows::core::Result<Self> {
        ::windows::core::Interface::cast(value)
    }
}
impl<'a> ::core::convert::TryFrom<&QuaternionKeyFrameAnimation>
    for ::windows::core::InParam<'a, ::windows::Foundation::IClosable>
{
    type Error = ::windows::core::Error;
    fn try_from(value: &QuaternionKeyFrameAnimation) -> ::windows::core::Result<Self> {
        let item = ::std::convert::TryInto::try_into(value)?;
        Ok(::windows::core::InParam::owned(item))
    }
}
impl ::core::convert::TryFrom<QuaternionKeyFrameAnimation> for ICompositionAnimationBase {
    type Error = ::windows::core::Error;
    fn try_from(value: QuaternionKeyFrameAnimation) -> ::windows::core::Result<Self> {
        ::core::convert::TryFrom::try_from(&value)
    }
}
impl ::core::convert::TryFrom<&QuaternionKeyFrameAnimation> for ICompositionAnimationBase {
    type Error = ::windows::core::Error;
    fn try_from(value: &QuaternionKeyFrameAnimation) -> ::windows::core::Result<Self> {
        ::windows::core::Interface::cast(value)
    }
}
impl<'a> ::core::convert::TryFrom<&QuaternionKeyFrameAnimation>
    for ::windows::core::InParam<'a, ICompositionAnimationBase>
{
    type Error = ::windows::core::Error;
    fn try_from(value: &QuaternionKeyFrameAnimation) -> ::windows::core::Result<Self> {
        let item = ::std::convert::TryInto::try_into(value)?;
        Ok(::windows::core::InParam::owned(item))
    }
}
impl ::core::convert::From<QuaternionKeyFrameAnimation> for KeyFrameAnimation {
    fn from(value: QuaternionKeyFrameAnimation) -> Self {
        ::core::convert::From::from(&value)
    }
}
impl ::core::convert::From<&QuaternionKeyFrameAnimation> for KeyFrameAnimation {
    fn from(value: &QuaternionKeyFrameAnimation) -> Self {
        ::windows::core::Interface::cast(value).unwrap()
    }
}
impl<'a> ::core::convert::From<&QuaternionKeyFrameAnimation>
    for ::windows::core::InParam<'a, KeyFrameAnimation>
{
    fn from(value: &QuaternionKeyFrameAnimation) -> Self {
        ::windows::core::InParam::owned(value.into())
    }
}
impl ::core::convert::From<QuaternionKeyFrameAnimation> for CompositionAnimation {
    fn from(value: QuaternionKeyFrameAnimation) -> Self {
        ::core::convert::From::from(&value)
    }
}
impl ::core::convert::From<&QuaternionKeyFrameAnimation> for CompositionAnimation {
    fn from(value: &QuaternionKeyFrameAnimation) -> Self {
        ::windows::core::Interface::cast(value).unwrap()
    }
}
impl<'a> ::core::convert::From<&QuaternionKeyFrameAnimation>
    for ::windows::core::InParam<'a, CompositionAnimation>
{
    fn from(value: &QuaternionKeyFrameAnimation) -> Self {
        ::windows::core::InParam::owned(value.into())
    }
}
impl ::core::convert::From<QuaternionKeyFrameAnimation> for CompositionObject {
    fn from(value: QuaternionKeyFrameAnimation) -> Self {
        ::core::convert::From::from(&value)
    }
}
impl ::core::convert::From<&QuaternionKeyFrameAnimation> for CompositionObject {
    fn from(value: &QuaternionKeyFrameAnimation) -> Self {
        ::windows::core::Interface::cast(value).unwrap()
    }
}
impl<'a> ::core::convert::From<&QuaternionKeyFrameAnimation>
    for ::windows::core::InParam<'a, CompositionObject>
{
    fn from(value: &QuaternionKeyFrameAnimation) -> Self {
        ::windows::core::InParam::owned(value.into())
    }
}
unsafe impl ::core::marker::Send for QuaternionKeyFrameAnimation {}
unsafe impl ::core::marker::Sync for QuaternionKeyFrameAnimation {}
#[doc = "*Required features: `\"UI_Composition\"`*"]
#[repr(transparent)]
pub struct RectangleClip(::windows::core::IUnknown);
impl RectangleClip {
    pub fn PopulatePropertyInfo(
        &self,
        propertyname: &::windows::core::HSTRING,
        propertyinfo: &AnimationPropertyInfo,
    ) -> ::windows::core::Result<()> {
        let this = &::windows::core::Interface::cast::<IAnimationObject>(self)?;
        unsafe {
            (::windows::core::Vtable::vtable(this).PopulatePropertyInfo)(
                ::windows::core::Vtable::as_raw(this),
                ::core::mem::transmute_copy(propertyname),
                ::core::mem::transmute_copy(propertyinfo),
            )
            .ok()
        }
    }
    pub fn Close(&self) -> ::windows::core::Result<()> {
        let this = &::windows::core::Interface::cast::<::windows::Foundation::IClosable>(self)?;
        unsafe {
            (::windows::core::Vtable::vtable(this).Close)(::windows::core::Vtable::as_raw(this))
                .ok()
        }
    }
    pub fn AnchorPoint(&self) -> ::windows::core::Result<::windows::Foundation::Numerics::Vector2> {
        let this = &::windows::core::Interface::cast::<ICompositionClip2>(self)?;
        unsafe {
            let mut result__ = ::core::mem::MaybeUninit::zeroed();
            (::windows::core::Vtable::vtable(this).AnchorPoint)(
                ::windows::core::Vtable::as_raw(this),
                result__.as_mut_ptr(),
            )
            .from_abi::<::windows::Foundation::Numerics::Vector2>(result__)
        }
    }
    pub fn SetAnchorPoint(
        &self,
        value: ::windows::Foundation::Numerics::Vector2,
    ) -> ::windows::core::Result<()> {
        let this = &::windows::core::Interface::cast::<ICompositionClip2>(self)?;
        unsafe {
            (::windows::core::Vtable::vtable(this).SetAnchorPoint)(
                ::windows::core::Vtable::as_raw(this),
                value,
            )
            .ok()
        }
    }
    pub fn CenterPoint(&self) -> ::windows::core::Result<::windows::Foundation::Numerics::Vector2> {
        let this = &::windows::core::Interface::cast::<ICompositionClip2>(self)?;
        unsafe {
            let mut result__ = ::core::mem::MaybeUninit::zeroed();
            (::windows::core::Vtable::vtable(this).CenterPoint)(
                ::windows::core::Vtable::as_raw(this),
                result__.as_mut_ptr(),
            )
            .from_abi::<::windows::Foundation::Numerics::Vector2>(result__)
        }
    }
    pub fn SetCenterPoint(
        &self,
        value: ::windows::Foundation::Numerics::Vector2,
    ) -> ::windows::core::Result<()> {
        let this = &::windows::core::Interface::cast::<ICompositionClip2>(self)?;
        unsafe {
            (::windows::core::Vtable::vtable(this).SetCenterPoint)(
                ::windows::core::Vtable::as_raw(this),
                value,
            )
            .ok()
        }
    }
    pub fn Offset(&self) -> ::windows::core::Result<::windows::Foundation::Numerics::Vector2> {
        let this = &::windows::core::Interface::cast::<ICompositionClip2>(self)?;
        unsafe {
            let mut result__ = ::core::mem::MaybeUninit::zeroed();
            (::windows::core::Vtable::vtable(this).Offset)(
                ::windows::core::Vtable::as_raw(this),
                result__.as_mut_ptr(),
            )
            .from_abi::<::windows::Foundation::Numerics::Vector2>(result__)
        }
    }
    pub fn SetOffset(
        &self,
        value: ::windows::Foundation::Numerics::Vector2,
    ) -> ::windows::core::Result<()> {
        let this = &::windows::core::Interface::cast::<ICompositionClip2>(self)?;
        unsafe {
            (::windows::core::Vtable::vtable(this).SetOffset)(
                ::windows::core::Vtable::as_raw(this),
                value,
            )
            .ok()
        }
    }
    pub fn RotationAngle(&self) -> ::windows::core::Result<f32> {
        let this = &::windows::core::Interface::cast::<ICompositionClip2>(self)?;
        unsafe {
            let mut result__ = ::core::mem::MaybeUninit::zeroed();
            (::windows::core::Vtable::vtable(this).RotationAngle)(
                ::windows::core::Vtable::as_raw(this),
                result__.as_mut_ptr(),
            )
            .from_abi::<f32>(result__)
        }
    }
    pub fn SetRotationAngle(&self, value: f32) -> ::windows::core::Result<()> {
        let this = &::windows::core::Interface::cast::<ICompositionClip2>(self)?;
        unsafe {
            (::windows::core::Vtable::vtable(this).SetRotationAngle)(
                ::windows::core::Vtable::as_raw(this),
                value,
            )
            .ok()
        }
    }
    pub fn RotationAngleInDegrees(&self) -> ::windows::core::Result<f32> {
        let this = &::windows::core::Interface::cast::<ICompositionClip2>(self)?;
        unsafe {
            let mut result__ = ::core::mem::MaybeUninit::zeroed();
            (::windows::core::Vtable::vtable(this).RotationAngleInDegrees)(
                ::windows::core::Vtable::as_raw(this),
                result__.as_mut_ptr(),
            )
            .from_abi::<f32>(result__)
        }
    }
    pub fn SetRotationAngleInDegrees(&self, value: f32) -> ::windows::core::Result<()> {
        let this = &::windows::core::Interface::cast::<ICompositionClip2>(self)?;
        unsafe {
            (::windows::core::Vtable::vtable(this).SetRotationAngleInDegrees)(
                ::windows::core::Vtable::as_raw(this),
                value,
            )
            .ok()
        }
    }
    pub fn Scale(&self) -> ::windows::core::Result<::windows::Foundation::Numerics::Vector2> {
        let this = &::windows::core::Interface::cast::<ICompositionClip2>(self)?;
        unsafe {
            let mut result__ = ::core::mem::MaybeUninit::zeroed();
            (::windows::core::Vtable::vtable(this).Scale)(
                ::windows::core::Vtable::as_raw(this),
                result__.as_mut_ptr(),
            )
            .from_abi::<::windows::Foundation::Numerics::Vector2>(result__)
        }
    }
    pub fn SetScale(
        &self,
        value: ::windows::Foundation::Numerics::Vector2,
    ) -> ::windows::core::Result<()> {
        let this = &::windows::core::Interface::cast::<ICompositionClip2>(self)?;
        unsafe {
            (::windows::core::Vtable::vtable(this).SetScale)(
                ::windows::core::Vtable::as_raw(this),
                value,
            )
            .ok()
        }
    }
    pub fn TransformMatrix(
        &self,
    ) -> ::windows::core::Result<::windows::Foundation::Numerics::Matrix3x2> {
        let this = &::windows::core::Interface::cast::<ICompositionClip2>(self)?;
        unsafe {
            let mut result__ = ::core::mem::MaybeUninit::zeroed();
            (::windows::core::Vtable::vtable(this).TransformMatrix)(
                ::windows::core::Vtable::as_raw(this),
                result__.as_mut_ptr(),
            )
            .from_abi::<::windows::Foundation::Numerics::Matrix3x2>(result__)
        }
    }
    pub fn SetTransformMatrix(
        &self,
        value: ::windows::Foundation::Numerics::Matrix3x2,
    ) -> ::windows::core::Result<()> {
        let this = &::windows::core::Interface::cast::<ICompositionClip2>(self)?;
        unsafe {
            (::windows::core::Vtable::vtable(this).SetTransformMatrix)(
                ::windows::core::Vtable::as_raw(this),
                value,
            )
            .ok()
        }
    }
    pub fn Compositor(&self) -> ::windows::core::Result<Compositor> {
        let this = &::windows::core::Interface::cast::<ICompositionObject>(self)?;
        unsafe {
            let mut result__ = ::core::mem::MaybeUninit::zeroed();
            (::windows::core::Vtable::vtable(this).Compositor)(
                ::windows::core::Vtable::as_raw(this),
                result__.as_mut_ptr(),
            )
            .from_abi::<Compositor>(result__)
        }
    }
    pub fn Properties(&self) -> ::windows::core::Result<CompositionPropertySet> {
        let this = &::windows::core::Interface::cast::<ICompositionObject>(self)?;
        unsafe {
            let mut result__ = ::core::mem::MaybeUninit::zeroed();
            (::windows::core::Vtable::vtable(this).Properties)(
                ::windows::core::Vtable::as_raw(this),
                result__.as_mut_ptr(),
            )
            .from_abi::<CompositionPropertySet>(result__)
        }
    }
    pub fn StartAnimation<'a, P0>(
        &self,
        propertyname: &::windows::core::HSTRING,
        animation: P0,
    ) -> ::windows::core::Result<()>
    where
        P0: ::std::convert::Into<::windows::core::InParam<'a, CompositionAnimation>>,
    {
        let this = &::windows::core::Interface::cast::<ICompositionObject>(self)?;
        unsafe {
            (::windows::core::Vtable::vtable(this).StartAnimation)(
                ::windows::core::Vtable::as_raw(this),
                ::core::mem::transmute_copy(propertyname),
                animation.into().abi(),
            )
            .ok()
        }
    }
    pub fn StopAnimation(
        &self,
        propertyname: &::windows::core::HSTRING,
    ) -> ::windows::core::Result<()> {
        let this = &::windows::core::Interface::cast::<ICompositionObject>(self)?;
        unsafe {
            (::windows::core::Vtable::vtable(this).StopAnimation)(
                ::windows::core::Vtable::as_raw(this),
                ::core::mem::transmute_copy(propertyname),
            )
            .ok()
        }
    }
    pub fn Comment(&self) -> ::windows::core::Result<::windows::core::HSTRING> {
        let this = &::windows::core::Interface::cast::<ICompositionObject2>(self)?;
        unsafe {
            let mut result__ = ::core::mem::MaybeUninit::zeroed();
            (::windows::core::Vtable::vtable(this).Comment)(
                ::windows::core::Vtable::as_raw(this),
                result__.as_mut_ptr(),
            )
            .from_abi::<::windows::core::HSTRING>(result__)
        }
    }
    pub fn SetComment(&self, value: &::windows::core::HSTRING) -> ::windows::core::Result<()> {
        let this = &::windows::core::Interface::cast::<ICompositionObject2>(self)?;
        unsafe {
            (::windows::core::Vtable::vtable(this).SetComment)(
                ::windows::core::Vtable::as_raw(this),
                ::core::mem::transmute_copy(value),
            )
            .ok()
        }
    }
    pub fn ImplicitAnimations(&self) -> ::windows::core::Result<ImplicitAnimationCollection> {
        let this = &::windows::core::Interface::cast::<ICompositionObject2>(self)?;
        unsafe {
            let mut result__ = ::core::mem::MaybeUninit::zeroed();
            (::windows::core::Vtable::vtable(this).ImplicitAnimations)(
                ::windows::core::Vtable::as_raw(this),
                result__.as_mut_ptr(),
            )
            .from_abi::<ImplicitAnimationCollection>(result__)
        }
    }
    pub fn SetImplicitAnimations(
        &self,
        value: &ImplicitAnimationCollection,
    ) -> ::windows::core::Result<()> {
        let this = &::windows::core::Interface::cast::<ICompositionObject2>(self)?;
        unsafe {
            (::windows::core::Vtable::vtable(this).SetImplicitAnimations)(
                ::windows::core::Vtable::as_raw(this),
                ::core::mem::transmute_copy(value),
            )
            .ok()
        }
    }
    pub fn StartAnimationGroup<'a, P0, E0>(&self, value: P0) -> ::windows::core::Result<()>
    where
        P0: ::std::convert::TryInto<
            ::windows::core::InParam<'a, ICompositionAnimationBase>,
            Error = E0,
        >,
        E0: ::std::convert::Into<::windows::core::Error>,
    {
        let this = &::windows::core::Interface::cast::<ICompositionObject2>(self)?;
        unsafe {
            (::windows::core::Vtable::vtable(this).StartAnimationGroup)(
                ::windows::core::Vtable::as_raw(this),
                value.try_into().map_err(|e| e.into())?.abi(),
            )
            .ok()
        }
    }
    pub fn StopAnimationGroup<'a, P0, E0>(&self, value: P0) -> ::windows::core::Result<()>
    where
        P0: ::std::convert::TryInto<
            ::windows::core::InParam<'a, ICompositionAnimationBase>,
            Error = E0,
        >,
        E0: ::std::convert::Into<::windows::core::Error>,
    {
        let this = &::windows::core::Interface::cast::<ICompositionObject2>(self)?;
        unsafe {
            (::windows::core::Vtable::vtable(this).StopAnimationGroup)(
                ::windows::core::Vtable::as_raw(this),
                value.try_into().map_err(|e| e.into())?.abi(),
            )
            .ok()
        }
    }
    #[doc = "*Required features: `\"UI_Dispatching\"`*"]
    #[cfg(feature = "UI_Dispatching")]
    pub fn DispatcherQueue(&self) -> ::windows::core::Result<super::Dispatching::DispatcherQueue> {
        let this = &::windows::core::Interface::cast::<ICompositionObject3>(self)?;
        unsafe {
            let mut result__ = ::core::mem::MaybeUninit::zeroed();
            (::windows::core::Vtable::vtable(this).DispatcherQueue)(
                ::windows::core::Vtable::as_raw(this),
                result__.as_mut_ptr(),
            )
            .from_abi::<super::Dispatching::DispatcherQueue>(result__)
        }
    }
    pub fn TryGetAnimationController(
        &self,
        propertyname: &::windows::core::HSTRING,
    ) -> ::windows::core::Result<AnimationController> {
        let this = &::windows::core::Interface::cast::<ICompositionObject4>(self)?;
        unsafe {
            let mut result__ = ::core::mem::MaybeUninit::zeroed();
            (::windows::core::Vtable::vtable(this).TryGetAnimationController)(
                ::windows::core::Vtable::as_raw(this),
                ::core::mem::transmute_copy(propertyname),
                result__.as_mut_ptr(),
            )
            .from_abi::<AnimationController>(result__)
        }
    }
    pub fn StartAnimationWithController<'a, P0>(
        &self,
        propertyname: &::windows::core::HSTRING,
        animation: P0,
        animationcontroller: &AnimationController,
    ) -> ::windows::core::Result<()>
    where
        P0: ::std::convert::Into<::windows::core::InParam<'a, CompositionAnimation>>,
    {
        let this = &::windows::core::Interface::cast::<ICompositionObject5>(self)?;
        unsafe {
            (::windows::core::Vtable::vtable(this).StartAnimationWithController)(
                ::windows::core::Vtable::as_raw(this),
                ::core::mem::transmute_copy(propertyname),
                animation.into().abi(),
                ::core::mem::transmute_copy(animationcontroller),
            )
            .ok()
        }
    }
    pub fn Bottom(&self) -> ::windows::core::Result<f32> {
        let this = self;
        unsafe {
            let mut result__ = ::core::mem::MaybeUninit::zeroed();
            (::windows::core::Vtable::vtable(this).Bottom)(
                ::windows::core::Vtable::as_raw(this),
                result__.as_mut_ptr(),
            )
            .from_abi::<f32>(result__)
        }
    }
    pub fn SetBottom(&self, value: f32) -> ::windows::core::Result<()> {
        let this = self;
        unsafe {
            (::windows::core::Vtable::vtable(this).SetBottom)(
                ::windows::core::Vtable::as_raw(this),
                value,
            )
            .ok()
        }
    }
    pub fn BottomLeftRadius(
        &self,
    ) -> ::windows::core::Result<::windows::Foundation::Numerics::Vector2> {
        let this = self;
        unsafe {
            let mut result__ = ::core::mem::MaybeUninit::zeroed();
            (::windows::core::Vtable::vtable(this).BottomLeftRadius)(
                ::windows::core::Vtable::as_raw(this),
                result__.as_mut_ptr(),
            )
            .from_abi::<::windows::Foundation::Numerics::Vector2>(result__)
        }
    }
    pub fn SetBottomLeftRadius(
        &self,
        value: ::windows::Foundation::Numerics::Vector2,
    ) -> ::windows::core::Result<()> {
        let this = self;
        unsafe {
            (::windows::core::Vtable::vtable(this).SetBottomLeftRadius)(
                ::windows::core::Vtable::as_raw(this),
                value,
            )
            .ok()
        }
    }
    pub fn BottomRightRadius(
        &self,
    ) -> ::windows::core::Result<::windows::Foundation::Numerics::Vector2> {
        let this = self;
        unsafe {
            let mut result__ = ::core::mem::MaybeUninit::zeroed();
            (::windows::core::Vtable::vtable(this).BottomRightRadius)(
                ::windows::core::Vtable::as_raw(this),
                result__.as_mut_ptr(),
            )
            .from_abi::<::windows::Foundation::Numerics::Vector2>(result__)
        }
    }
    pub fn SetBottomRightRadius(
        &self,
        value: ::windows::Foundation::Numerics::Vector2,
    ) -> ::windows::core::Result<()> {
        let this = self;
        unsafe {
            (::windows::core::Vtable::vtable(this).SetBottomRightRadius)(
                ::windows::core::Vtable::as_raw(this),
                value,
            )
            .ok()
        }
    }
    pub fn Left(&self) -> ::windows::core::Result<f32> {
        let this = self;
        unsafe {
            let mut result__ = ::core::mem::MaybeUninit::zeroed();
            (::windows::core::Vtable::vtable(this).Left)(
                ::windows::core::Vtable::as_raw(this),
                result__.as_mut_ptr(),
            )
            .from_abi::<f32>(result__)
        }
    }
    pub fn SetLeft(&self, value: f32) -> ::windows::core::Result<()> {
        let this = self;
        unsafe {
            (::windows::core::Vtable::vtable(this).SetLeft)(
                ::windows::core::Vtable::as_raw(this),
                value,
            )
            .ok()
        }
    }
    pub fn Right(&self) -> ::windows::core::Result<f32> {
        let this = self;
        unsafe {
            let mut result__ = ::core::mem::MaybeUninit::zeroed();
            (::windows::core::Vtable::vtable(this).Right)(
                ::windows::core::Vtable::as_raw(this),
                result__.as_mut_ptr(),
            )
            .from_abi::<f32>(result__)
        }
    }
    pub fn SetRight(&self, value: f32) -> ::windows::core::Result<()> {
        let this = self;
        unsafe {
            (::windows::core::Vtable::vtable(this).SetRight)(
                ::windows::core::Vtable::as_raw(this),
                value,
            )
            .ok()
        }
    }
    pub fn Top(&self) -> ::windows::core::Result<f32> {
        let this = self;
        unsafe {
            let mut result__ = ::core::mem::MaybeUninit::zeroed();
            (::windows::core::Vtable::vtable(this).Top)(
                ::windows::core::Vtable::as_raw(this),
                result__.as_mut_ptr(),
            )
            .from_abi::<f32>(result__)
        }
    }
    pub fn SetTop(&self, value: f32) -> ::windows::core::Result<()> {
        let this = self;
        unsafe {
            (::windows::core::Vtable::vtable(this).SetTop)(
                ::windows::core::Vtable::as_raw(this),
                value,
            )
            .ok()
        }
    }
    pub fn TopLeftRadius(
        &self,
    ) -> ::windows::core::Result<::windows::Foundation::Numerics::Vector2> {
        let this = self;
        unsafe {
            let mut result__ = ::core::mem::MaybeUninit::zeroed();
            (::windows::core::Vtable::vtable(this).TopLeftRadius)(
                ::windows::core::Vtable::as_raw(this),
                result__.as_mut_ptr(),
            )
            .from_abi::<::windows::Foundation::Numerics::Vector2>(result__)
        }
    }
    pub fn SetTopLeftRadius(
        &self,
        value: ::windows::Foundation::Numerics::Vector2,
    ) -> ::windows::core::Result<()> {
        let this = self;
        unsafe {
            (::windows::core::Vtable::vtable(this).SetTopLeftRadius)(
                ::windows::core::Vtable::as_raw(this),
                value,
            )
            .ok()
        }
    }
    pub fn TopRightRadius(
        &self,
    ) -> ::windows::core::Result<::windows::Foundation::Numerics::Vector2> {
        let this = self;
        unsafe {
            let mut result__ = ::core::mem::MaybeUninit::zeroed();
            (::windows::core::Vtable::vtable(this).TopRightRadius)(
                ::windows::core::Vtable::as_raw(this),
                result__.as_mut_ptr(),
            )
            .from_abi::<::windows::Foundation::Numerics::Vector2>(result__)
        }
    }
    pub fn SetTopRightRadius(
        &self,
        value: ::windows::Foundation::Numerics::Vector2,
    ) -> ::windows::core::Result<()> {
        let this = self;
        unsafe {
            (::windows::core::Vtable::vtable(this).SetTopRightRadius)(
                ::windows::core::Vtable::as_raw(this),
                value,
            )
            .ok()
        }
    }
}
impl ::core::clone::Clone for RectangleClip {
    fn clone(&self) -> Self {
        Self(self.0.clone())
    }
}
impl ::core::cmp::PartialEq for RectangleClip {
    fn eq(&self, other: &Self) -> bool {
        self.0 == other.0
    }
}
impl ::core::cmp::Eq for RectangleClip {}
impl ::core::fmt::Debug for RectangleClip {
    fn fmt(&self, f: &mut ::core::fmt::Formatter<'_>) -> ::core::fmt::Result {
        f.debug_tuple("RectangleClip").field(&self.0).finish()
    }
}
unsafe impl ::windows::core::RuntimeType for RectangleClip {
    const SIGNATURE: ::windows::core::ConstBuffer = ::windows::core::ConstBuffer::from_slice(
        b"rc(Microsoft.UI.Composition.RectangleClip;{bc261502-2259-5c01-8616-556110a09657})",
    );
    type DefaultType = ::core::option::Option<Self>;
    fn from_default(from: &Self::DefaultType) -> ::windows::core::Result<Self> {
        from.as_ref().cloned().ok_or(::windows::core::Error::OK)
    }
}
unsafe impl ::windows::core::Vtable for RectangleClip {
    type Vtable = IRectangleClip_Vtbl;
}
unsafe impl ::windows::core::Interface for RectangleClip {
    const IID: ::windows::core::GUID = <IRectangleClip as ::windows::core::Interface>::IID;
}
impl ::windows::core::RuntimeName for RectangleClip {
    const NAME: &'static str = "Microsoft.UI.Composition.RectangleClip";
}
::windows::core::interface_hierarchy!(
    RectangleClip,
    ::windows::core::IUnknown,
    ::windows::core::IInspectable
);
impl ::core::convert::TryFrom<RectangleClip> for IAnimationObject {
    type Error = ::windows::core::Error;
    fn try_from(value: RectangleClip) -> ::windows::core::Result<Self> {
        ::core::convert::TryFrom::try_from(&value)
    }
}
impl ::core::convert::TryFrom<&RectangleClip> for IAnimationObject {
    type Error = ::windows::core::Error;
    fn try_from(value: &RectangleClip) -> ::windows::core::Result<Self> {
        ::windows::core::Interface::cast(value)
    }
}
impl<'a> ::core::convert::TryFrom<&RectangleClip>
    for ::windows::core::InParam<'a, IAnimationObject>
{
    type Error = ::windows::core::Error;
    fn try_from(value: &RectangleClip) -> ::windows::core::Result<Self> {
        let item = ::std::convert::TryInto::try_into(value)?;
        Ok(::windows::core::InParam::owned(item))
    }
}
impl ::core::convert::TryFrom<RectangleClip> for ::windows::Foundation::IClosable {
    type Error = ::windows::core::Error;
    fn try_from(value: RectangleClip) -> ::windows::core::Result<Self> {
        ::core::convert::TryFrom::try_from(&value)
    }
}
impl ::core::convert::TryFrom<&RectangleClip> for ::windows::Foundation::IClosable {
    type Error = ::windows::core::Error;
    fn try_from(value: &RectangleClip) -> ::windows::core::Result<Self> {
        ::windows::core::Interface::cast(value)
    }
}
impl<'a> ::core::convert::TryFrom<&RectangleClip>
    for ::windows::core::InParam<'a, ::windows::Foundation::IClosable>
{
    type Error = ::windows::core::Error;
    fn try_from(value: &RectangleClip) -> ::windows::core::Result<Self> {
        let item = ::std::convert::TryInto::try_into(value)?;
        Ok(::windows::core::InParam::owned(item))
    }
}
impl ::core::convert::From<RectangleClip> for CompositionClip {
    fn from(value: RectangleClip) -> Self {
        ::core::convert::From::from(&value)
    }
}
impl ::core::convert::From<&RectangleClip> for CompositionClip {
    fn from(value: &RectangleClip) -> Self {
        ::windows::core::Interface::cast(value).unwrap()
    }
}
impl<'a> ::core::convert::From<&RectangleClip> for ::windows::core::InParam<'a, CompositionClip> {
    fn from(value: &RectangleClip) -> Self {
        ::windows::core::InParam::owned(value.into())
    }
}
impl ::core::convert::From<RectangleClip> for CompositionObject {
    fn from(value: RectangleClip) -> Self {
        ::core::convert::From::from(&value)
    }
}
impl ::core::convert::From<&RectangleClip> for CompositionObject {
    fn from(value: &RectangleClip) -> Self {
        ::windows::core::Interface::cast(value).unwrap()
    }
}
impl<'a> ::core::convert::From<&RectangleClip> for ::windows::core::InParam<'a, CompositionObject> {
    fn from(value: &RectangleClip) -> Self {
        ::windows::core::InParam::owned(value.into())
    }
}
unsafe impl ::core::marker::Send for RectangleClip {}
unsafe impl ::core::marker::Sync for RectangleClip {}
#[doc = "*Required features: `\"UI_Composition\"`*"]
#[repr(transparent)]
pub struct RedirectVisual(::windows::core::IUnknown);
impl RedirectVisual {
    pub fn PopulatePropertyInfo(
        &self,
        propertyname: &::windows::core::HSTRING,
        propertyinfo: &AnimationPropertyInfo,
    ) -> ::windows::core::Result<()> {
        let this = &::windows::core::Interface::cast::<IAnimationObject>(self)?;
        unsafe {
            (::windows::core::Vtable::vtable(this).PopulatePropertyInfo)(
                ::windows::core::Vtable::as_raw(this),
                ::core::mem::transmute_copy(propertyname),
                ::core::mem::transmute_copy(propertyinfo),
            )
            .ok()
        }
    }
    pub fn Close(&self) -> ::windows::core::Result<()> {
        let this = &::windows::core::Interface::cast::<::windows::Foundation::IClosable>(self)?;
        unsafe {
            (::windows::core::Vtable::vtable(this).Close)(::windows::core::Vtable::as_raw(this))
                .ok()
        }
    }
    pub fn Compositor(&self) -> ::windows::core::Result<Compositor> {
        let this = &::windows::core::Interface::cast::<ICompositionObject>(self)?;
        unsafe {
            let mut result__ = ::core::mem::MaybeUninit::zeroed();
            (::windows::core::Vtable::vtable(this).Compositor)(
                ::windows::core::Vtable::as_raw(this),
                result__.as_mut_ptr(),
            )
            .from_abi::<Compositor>(result__)
        }
    }
    pub fn Properties(&self) -> ::windows::core::Result<CompositionPropertySet> {
        let this = &::windows::core::Interface::cast::<ICompositionObject>(self)?;
        unsafe {
            let mut result__ = ::core::mem::MaybeUninit::zeroed();
            (::windows::core::Vtable::vtable(this).Properties)(
                ::windows::core::Vtable::as_raw(this),
                result__.as_mut_ptr(),
            )
            .from_abi::<CompositionPropertySet>(result__)
        }
    }
    pub fn StartAnimation<'a, P0>(
        &self,
        propertyname: &::windows::core::HSTRING,
        animation: P0,
    ) -> ::windows::core::Result<()>
    where
        P0: ::std::convert::Into<::windows::core::InParam<'a, CompositionAnimation>>,
    {
        let this = &::windows::core::Interface::cast::<ICompositionObject>(self)?;
        unsafe {
            (::windows::core::Vtable::vtable(this).StartAnimation)(
                ::windows::core::Vtable::as_raw(this),
                ::core::mem::transmute_copy(propertyname),
                animation.into().abi(),
            )
            .ok()
        }
    }
    pub fn StopAnimation(
        &self,
        propertyname: &::windows::core::HSTRING,
    ) -> ::windows::core::Result<()> {
        let this = &::windows::core::Interface::cast::<ICompositionObject>(self)?;
        unsafe {
            (::windows::core::Vtable::vtable(this).StopAnimation)(
                ::windows::core::Vtable::as_raw(this),
                ::core::mem::transmute_copy(propertyname),
            )
            .ok()
        }
    }
    pub fn Comment(&self) -> ::windows::core::Result<::windows::core::HSTRING> {
        let this = &::windows::core::Interface::cast::<ICompositionObject2>(self)?;
        unsafe {
            let mut result__ = ::core::mem::MaybeUninit::zeroed();
            (::windows::core::Vtable::vtable(this).Comment)(
                ::windows::core::Vtable::as_raw(this),
                result__.as_mut_ptr(),
            )
            .from_abi::<::windows::core::HSTRING>(result__)
        }
    }
    pub fn SetComment(&self, value: &::windows::core::HSTRING) -> ::windows::core::Result<()> {
        let this = &::windows::core::Interface::cast::<ICompositionObject2>(self)?;
        unsafe {
            (::windows::core::Vtable::vtable(this).SetComment)(
                ::windows::core::Vtable::as_raw(this),
                ::core::mem::transmute_copy(value),
            )
            .ok()
        }
    }
    pub fn ImplicitAnimations(&self) -> ::windows::core::Result<ImplicitAnimationCollection> {
        let this = &::windows::core::Interface::cast::<ICompositionObject2>(self)?;
        unsafe {
            let mut result__ = ::core::mem::MaybeUninit::zeroed();
            (::windows::core::Vtable::vtable(this).ImplicitAnimations)(
                ::windows::core::Vtable::as_raw(this),
                result__.as_mut_ptr(),
            )
            .from_abi::<ImplicitAnimationCollection>(result__)
        }
    }
    pub fn SetImplicitAnimations(
        &self,
        value: &ImplicitAnimationCollection,
    ) -> ::windows::core::Result<()> {
        let this = &::windows::core::Interface::cast::<ICompositionObject2>(self)?;
        unsafe {
            (::windows::core::Vtable::vtable(this).SetImplicitAnimations)(
                ::windows::core::Vtable::as_raw(this),
                ::core::mem::transmute_copy(value),
            )
            .ok()
        }
    }
    pub fn StartAnimationGroup<'a, P0, E0>(&self, value: P0) -> ::windows::core::Result<()>
    where
        P0: ::std::convert::TryInto<
            ::windows::core::InParam<'a, ICompositionAnimationBase>,
            Error = E0,
        >,
        E0: ::std::convert::Into<::windows::core::Error>,
    {
        let this = &::windows::core::Interface::cast::<ICompositionObject2>(self)?;
        unsafe {
            (::windows::core::Vtable::vtable(this).StartAnimationGroup)(
                ::windows::core::Vtable::as_raw(this),
                value.try_into().map_err(|e| e.into())?.abi(),
            )
            .ok()
        }
    }
    pub fn StopAnimationGroup<'a, P0, E0>(&self, value: P0) -> ::windows::core::Result<()>
    where
        P0: ::std::convert::TryInto<
            ::windows::core::InParam<'a, ICompositionAnimationBase>,
            Error = E0,
        >,
        E0: ::std::convert::Into<::windows::core::Error>,
    {
        let this = &::windows::core::Interface::cast::<ICompositionObject2>(self)?;
        unsafe {
            (::windows::core::Vtable::vtable(this).StopAnimationGroup)(
                ::windows::core::Vtable::as_raw(this),
                value.try_into().map_err(|e| e.into())?.abi(),
            )
            .ok()
        }
    }
    #[doc = "*Required features: `\"UI_Dispatching\"`*"]
    #[cfg(feature = "UI_Dispatching")]
    pub fn DispatcherQueue(&self) -> ::windows::core::Result<super::Dispatching::DispatcherQueue> {
        let this = &::windows::core::Interface::cast::<ICompositionObject3>(self)?;
        unsafe {
            let mut result__ = ::core::mem::MaybeUninit::zeroed();
            (::windows::core::Vtable::vtable(this).DispatcherQueue)(
                ::windows::core::Vtable::as_raw(this),
                result__.as_mut_ptr(),
            )
            .from_abi::<super::Dispatching::DispatcherQueue>(result__)
        }
    }
    pub fn TryGetAnimationController(
        &self,
        propertyname: &::windows::core::HSTRING,
    ) -> ::windows::core::Result<AnimationController> {
        let this = &::windows::core::Interface::cast::<ICompositionObject4>(self)?;
        unsafe {
            let mut result__ = ::core::mem::MaybeUninit::zeroed();
            (::windows::core::Vtable::vtable(this).TryGetAnimationController)(
                ::windows::core::Vtable::as_raw(this),
                ::core::mem::transmute_copy(propertyname),
                result__.as_mut_ptr(),
            )
            .from_abi::<AnimationController>(result__)
        }
    }
    pub fn StartAnimationWithController<'a, P0>(
        &self,
        propertyname: &::windows::core::HSTRING,
        animation: P0,
        animationcontroller: &AnimationController,
    ) -> ::windows::core::Result<()>
    where
        P0: ::std::convert::Into<::windows::core::InParam<'a, CompositionAnimation>>,
    {
        let this = &::windows::core::Interface::cast::<ICompositionObject5>(self)?;
        unsafe {
            (::windows::core::Vtable::vtable(this).StartAnimationWithController)(
                ::windows::core::Vtable::as_raw(this),
                ::core::mem::transmute_copy(propertyname),
                animation.into().abi(),
                ::core::mem::transmute_copy(animationcontroller),
            )
            .ok()
        }
    }
    pub fn Children(&self) -> ::windows::core::Result<VisualCollection> {
        let this = &::windows::core::Interface::cast::<IContainerVisual>(self)?;
        unsafe {
            let mut result__ = ::core::mem::MaybeUninit::zeroed();
            (::windows::core::Vtable::vtable(this).Children)(
                ::windows::core::Vtable::as_raw(this),
                result__.as_mut_ptr(),
            )
            .from_abi::<VisualCollection>(result__)
        }
    }
    pub fn Source(&self) -> ::windows::core::Result<Visual> {
        let this = self;
        unsafe {
            let mut result__ = ::core::mem::MaybeUninit::zeroed();
            (::windows::core::Vtable::vtable(this).Source)(
                ::windows::core::Vtable::as_raw(this),
                result__.as_mut_ptr(),
            )
            .from_abi::<Visual>(result__)
        }
    }
    pub fn SetSource<'a, P0>(&self, value: P0) -> ::windows::core::Result<()>
    where
        P0: ::std::convert::Into<::windows::core::InParam<'a, Visual>>,
    {
        let this = self;
        unsafe {
            (::windows::core::Vtable::vtable(this).SetSource)(
                ::windows::core::Vtable::as_raw(this),
                value.into().abi(),
            )
            .ok()
        }
    }
    pub fn AnchorPoint(&self) -> ::windows::core::Result<::windows::Foundation::Numerics::Vector2> {
        let this = &::windows::core::Interface::cast::<IVisual>(self)?;
        unsafe {
            let mut result__ = ::core::mem::MaybeUninit::zeroed();
            (::windows::core::Vtable::vtable(this).AnchorPoint)(
                ::windows::core::Vtable::as_raw(this),
                result__.as_mut_ptr(),
            )
            .from_abi::<::windows::Foundation::Numerics::Vector2>(result__)
        }
    }
    pub fn SetAnchorPoint(
        &self,
        value: ::windows::Foundation::Numerics::Vector2,
    ) -> ::windows::core::Result<()> {
        let this = &::windows::core::Interface::cast::<IVisual>(self)?;
        unsafe {
            (::windows::core::Vtable::vtable(this).SetAnchorPoint)(
                ::windows::core::Vtable::as_raw(this),
                value,
            )
            .ok()
        }
    }
    pub fn BackfaceVisibility(&self) -> ::windows::core::Result<CompositionBackfaceVisibility> {
        let this = &::windows::core::Interface::cast::<IVisual>(self)?;
        unsafe {
            let mut result__ = ::core::mem::MaybeUninit::zeroed();
            (::windows::core::Vtable::vtable(this).BackfaceVisibility)(
                ::windows::core::Vtable::as_raw(this),
                result__.as_mut_ptr(),
            )
            .from_abi::<CompositionBackfaceVisibility>(result__)
        }
    }
    pub fn SetBackfaceVisibility(
        &self,
        value: CompositionBackfaceVisibility,
    ) -> ::windows::core::Result<()> {
        let this = &::windows::core::Interface::cast::<IVisual>(self)?;
        unsafe {
            (::windows::core::Vtable::vtable(this).SetBackfaceVisibility)(
                ::windows::core::Vtable::as_raw(this),
                value,
            )
            .ok()
        }
    }
    pub fn BorderMode(&self) -> ::windows::core::Result<CompositionBorderMode> {
        let this = &::windows::core::Interface::cast::<IVisual>(self)?;
        unsafe {
            let mut result__ = ::core::mem::MaybeUninit::zeroed();
            (::windows::core::Vtable::vtable(this).BorderMode)(
                ::windows::core::Vtable::as_raw(this),
                result__.as_mut_ptr(),
            )
            .from_abi::<CompositionBorderMode>(result__)
        }
    }
    pub fn SetBorderMode(&self, value: CompositionBorderMode) -> ::windows::core::Result<()> {
        let this = &::windows::core::Interface::cast::<IVisual>(self)?;
        unsafe {
            (::windows::core::Vtable::vtable(this).SetBorderMode)(
                ::windows::core::Vtable::as_raw(this),
                value,
            )
            .ok()
        }
    }
    pub fn CenterPoint(&self) -> ::windows::core::Result<::windows::Foundation::Numerics::Vector3> {
        let this = &::windows::core::Interface::cast::<IVisual>(self)?;
        unsafe {
            let mut result__ = ::core::mem::MaybeUninit::zeroed();
            (::windows::core::Vtable::vtable(this).CenterPoint)(
                ::windows::core::Vtable::as_raw(this),
                result__.as_mut_ptr(),
            )
            .from_abi::<::windows::Foundation::Numerics::Vector3>(result__)
        }
    }
    pub fn SetCenterPoint(
        &self,
        value: ::windows::Foundation::Numerics::Vector3,
    ) -> ::windows::core::Result<()> {
        let this = &::windows::core::Interface::cast::<IVisual>(self)?;
        unsafe {
            (::windows::core::Vtable::vtable(this).SetCenterPoint)(
                ::windows::core::Vtable::as_raw(this),
                value,
            )
            .ok()
        }
    }
    pub fn Clip(&self) -> ::windows::core::Result<CompositionClip> {
        let this = &::windows::core::Interface::cast::<IVisual>(self)?;
        unsafe {
            let mut result__ = ::core::mem::MaybeUninit::zeroed();
            (::windows::core::Vtable::vtable(this).Clip)(
                ::windows::core::Vtable::as_raw(this),
                result__.as_mut_ptr(),
            )
            .from_abi::<CompositionClip>(result__)
        }
    }
    pub fn SetClip<'a, P0>(&self, value: P0) -> ::windows::core::Result<()>
    where
        P0: ::std::convert::Into<::windows::core::InParam<'a, CompositionClip>>,
    {
        let this = &::windows::core::Interface::cast::<IVisual>(self)?;
        unsafe {
            (::windows::core::Vtable::vtable(this).SetClip)(
                ::windows::core::Vtable::as_raw(this),
                value.into().abi(),
            )
            .ok()
        }
    }
    pub fn CompositeMode(&self) -> ::windows::core::Result<CompositionCompositeMode> {
        let this = &::windows::core::Interface::cast::<IVisual>(self)?;
        unsafe {
            let mut result__ = ::core::mem::MaybeUninit::zeroed();
            (::windows::core::Vtable::vtable(this).CompositeMode)(
                ::windows::core::Vtable::as_raw(this),
                result__.as_mut_ptr(),
            )
            .from_abi::<CompositionCompositeMode>(result__)
        }
    }
    pub fn SetCompositeMode(&self, value: CompositionCompositeMode) -> ::windows::core::Result<()> {
        let this = &::windows::core::Interface::cast::<IVisual>(self)?;
        unsafe {
            (::windows::core::Vtable::vtable(this).SetCompositeMode)(
                ::windows::core::Vtable::as_raw(this),
                value,
            )
            .ok()
        }
    }
    pub fn IsVisible(&self) -> ::windows::core::Result<bool> {
        let this = &::windows::core::Interface::cast::<IVisual>(self)?;
        unsafe {
            let mut result__ = ::core::mem::MaybeUninit::zeroed();
            (::windows::core::Vtable::vtable(this).IsVisible)(
                ::windows::core::Vtable::as_raw(this),
                result__.as_mut_ptr(),
            )
            .from_abi::<bool>(result__)
        }
    }
    pub fn SetIsVisible(&self, value: bool) -> ::windows::core::Result<()> {
        let this = &::windows::core::Interface::cast::<IVisual>(self)?;
        unsafe {
            (::windows::core::Vtable::vtable(this).SetIsVisible)(
                ::windows::core::Vtable::as_raw(this),
                value,
            )
            .ok()
        }
    }
    pub fn Offset(&self) -> ::windows::core::Result<::windows::Foundation::Numerics::Vector3> {
        let this = &::windows::core::Interface::cast::<IVisual>(self)?;
        unsafe {
            let mut result__ = ::core::mem::MaybeUninit::zeroed();
            (::windows::core::Vtable::vtable(this).Offset)(
                ::windows::core::Vtable::as_raw(this),
                result__.as_mut_ptr(),
            )
            .from_abi::<::windows::Foundation::Numerics::Vector3>(result__)
        }
    }
    pub fn SetOffset(
        &self,
        value: ::windows::Foundation::Numerics::Vector3,
    ) -> ::windows::core::Result<()> {
        let this = &::windows::core::Interface::cast::<IVisual>(self)?;
        unsafe {
            (::windows::core::Vtable::vtable(this).SetOffset)(
                ::windows::core::Vtable::as_raw(this),
                value,
            )
            .ok()
        }
    }
    pub fn Opacity(&self) -> ::windows::core::Result<f32> {
        let this = &::windows::core::Interface::cast::<IVisual>(self)?;
        unsafe {
            let mut result__ = ::core::mem::MaybeUninit::zeroed();
            (::windows::core::Vtable::vtable(this).Opacity)(
                ::windows::core::Vtable::as_raw(this),
                result__.as_mut_ptr(),
            )
            .from_abi::<f32>(result__)
        }
    }
    pub fn SetOpacity(&self, value: f32) -> ::windows::core::Result<()> {
        let this = &::windows::core::Interface::cast::<IVisual>(self)?;
        unsafe {
            (::windows::core::Vtable::vtable(this).SetOpacity)(
                ::windows::core::Vtable::as_raw(this),
                value,
            )
            .ok()
        }
    }
    pub fn Orientation(
        &self,
    ) -> ::windows::core::Result<::windows::Foundation::Numerics::Quaternion> {
        let this = &::windows::core::Interface::cast::<IVisual>(self)?;
        unsafe {
            let mut result__ = ::core::mem::MaybeUninit::zeroed();
            (::windows::core::Vtable::vtable(this).Orientation)(
                ::windows::core::Vtable::as_raw(this),
                result__.as_mut_ptr(),
            )
            .from_abi::<::windows::Foundation::Numerics::Quaternion>(result__)
        }
    }
    pub fn SetOrientation(
        &self,
        value: ::windows::Foundation::Numerics::Quaternion,
    ) -> ::windows::core::Result<()> {
        let this = &::windows::core::Interface::cast::<IVisual>(self)?;
        unsafe {
            (::windows::core::Vtable::vtable(this).SetOrientation)(
                ::windows::core::Vtable::as_raw(this),
                value,
            )
            .ok()
        }
    }
    pub fn Parent(&self) -> ::windows::core::Result<ContainerVisual> {
        let this = &::windows::core::Interface::cast::<IVisual>(self)?;
        unsafe {
            let mut result__ = ::core::mem::MaybeUninit::zeroed();
            (::windows::core::Vtable::vtable(this).Parent)(
                ::windows::core::Vtable::as_raw(this),
                result__.as_mut_ptr(),
            )
            .from_abi::<ContainerVisual>(result__)
        }
    }
    pub fn RotationAngle(&self) -> ::windows::core::Result<f32> {
        let this = &::windows::core::Interface::cast::<IVisual>(self)?;
        unsafe {
            let mut result__ = ::core::mem::MaybeUninit::zeroed();
            (::windows::core::Vtable::vtable(this).RotationAngle)(
                ::windows::core::Vtable::as_raw(this),
                result__.as_mut_ptr(),
            )
            .from_abi::<f32>(result__)
        }
    }
    pub fn SetRotationAngle(&self, value: f32) -> ::windows::core::Result<()> {
        let this = &::windows::core::Interface::cast::<IVisual>(self)?;
        unsafe {
            (::windows::core::Vtable::vtable(this).SetRotationAngle)(
                ::windows::core::Vtable::as_raw(this),
                value,
            )
            .ok()
        }
    }
    pub fn RotationAngleInDegrees(&self) -> ::windows::core::Result<f32> {
        let this = &::windows::core::Interface::cast::<IVisual>(self)?;
        unsafe {
            let mut result__ = ::core::mem::MaybeUninit::zeroed();
            (::windows::core::Vtable::vtable(this).RotationAngleInDegrees)(
                ::windows::core::Vtable::as_raw(this),
                result__.as_mut_ptr(),
            )
            .from_abi::<f32>(result__)
        }
    }
    pub fn SetRotationAngleInDegrees(&self, value: f32) -> ::windows::core::Result<()> {
        let this = &::windows::core::Interface::cast::<IVisual>(self)?;
        unsafe {
            (::windows::core::Vtable::vtable(this).SetRotationAngleInDegrees)(
                ::windows::core::Vtable::as_raw(this),
                value,
            )
            .ok()
        }
    }
    pub fn RotationAxis(
        &self,
    ) -> ::windows::core::Result<::windows::Foundation::Numerics::Vector3> {
        let this = &::windows::core::Interface::cast::<IVisual>(self)?;
        unsafe {
            let mut result__ = ::core::mem::MaybeUninit::zeroed();
            (::windows::core::Vtable::vtable(this).RotationAxis)(
                ::windows::core::Vtable::as_raw(this),
                result__.as_mut_ptr(),
            )
            .from_abi::<::windows::Foundation::Numerics::Vector3>(result__)
        }
    }
    pub fn SetRotationAxis(
        &self,
        value: ::windows::Foundation::Numerics::Vector3,
    ) -> ::windows::core::Result<()> {
        let this = &::windows::core::Interface::cast::<IVisual>(self)?;
        unsafe {
            (::windows::core::Vtable::vtable(this).SetRotationAxis)(
                ::windows::core::Vtable::as_raw(this),
                value,
            )
            .ok()
        }
    }
    pub fn Scale(&self) -> ::windows::core::Result<::windows::Foundation::Numerics::Vector3> {
        let this = &::windows::core::Interface::cast::<IVisual>(self)?;
        unsafe {
            let mut result__ = ::core::mem::MaybeUninit::zeroed();
            (::windows::core::Vtable::vtable(this).Scale)(
                ::windows::core::Vtable::as_raw(this),
                result__.as_mut_ptr(),
            )
            .from_abi::<::windows::Foundation::Numerics::Vector3>(result__)
        }
    }
    pub fn SetScale(
        &self,
        value: ::windows::Foundation::Numerics::Vector3,
    ) -> ::windows::core::Result<()> {
        let this = &::windows::core::Interface::cast::<IVisual>(self)?;
        unsafe {
            (::windows::core::Vtable::vtable(this).SetScale)(
                ::windows::core::Vtable::as_raw(this),
                value,
            )
            .ok()
        }
    }
    pub fn Size(&self) -> ::windows::core::Result<::windows::Foundation::Numerics::Vector2> {
        let this = &::windows::core::Interface::cast::<IVisual>(self)?;
        unsafe {
            let mut result__ = ::core::mem::MaybeUninit::zeroed();
            (::windows::core::Vtable::vtable(this).Size)(
                ::windows::core::Vtable::as_raw(this),
                result__.as_mut_ptr(),
            )
            .from_abi::<::windows::Foundation::Numerics::Vector2>(result__)
        }
    }
    pub fn SetSize(
        &self,
        value: ::windows::Foundation::Numerics::Vector2,
    ) -> ::windows::core::Result<()> {
        let this = &::windows::core::Interface::cast::<IVisual>(self)?;
        unsafe {
            (::windows::core::Vtable::vtable(this).SetSize)(
                ::windows::core::Vtable::as_raw(this),
                value,
            )
            .ok()
        }
    }
    pub fn TransformMatrix(
        &self,
    ) -> ::windows::core::Result<::windows::Foundation::Numerics::Matrix4x4> {
        let this = &::windows::core::Interface::cast::<IVisual>(self)?;
        unsafe {
            let mut result__ = ::core::mem::MaybeUninit::zeroed();
            (::windows::core::Vtable::vtable(this).TransformMatrix)(
                ::windows::core::Vtable::as_raw(this),
                result__.as_mut_ptr(),
            )
            .from_abi::<::windows::Foundation::Numerics::Matrix4x4>(result__)
        }
    }
    pub fn SetTransformMatrix(
        &self,
        value: ::windows::Foundation::Numerics::Matrix4x4,
    ) -> ::windows::core::Result<()> {
        let this = &::windows::core::Interface::cast::<IVisual>(self)?;
        unsafe {
            (::windows::core::Vtable::vtable(this).SetTransformMatrix)(
                ::windows::core::Vtable::as_raw(this),
                value,
            )
            .ok()
        }
    }
    pub fn ParentForTransform(&self) -> ::windows::core::Result<Visual> {
        let this = &::windows::core::Interface::cast::<IVisual2>(self)?;
        unsafe {
            let mut result__ = ::core::mem::MaybeUninit::zeroed();
            (::windows::core::Vtable::vtable(this).ParentForTransform)(
                ::windows::core::Vtable::as_raw(this),
                result__.as_mut_ptr(),
            )
            .from_abi::<Visual>(result__)
        }
    }
    pub fn SetParentForTransform<'a, P0>(&self, value: P0) -> ::windows::core::Result<()>
    where
        P0: ::std::convert::Into<::windows::core::InParam<'a, Visual>>,
    {
        let this = &::windows::core::Interface::cast::<IVisual2>(self)?;
        unsafe {
            (::windows::core::Vtable::vtable(this).SetParentForTransform)(
                ::windows::core::Vtable::as_raw(this),
                value.into().abi(),
            )
            .ok()
        }
    }
    pub fn RelativeOffsetAdjustment(
        &self,
    ) -> ::windows::core::Result<::windows::Foundation::Numerics::Vector3> {
        let this = &::windows::core::Interface::cast::<IVisual2>(self)?;
        unsafe {
            let mut result__ = ::core::mem::MaybeUninit::zeroed();
            (::windows::core::Vtable::vtable(this).RelativeOffsetAdjustment)(
                ::windows::core::Vtable::as_raw(this),
                result__.as_mut_ptr(),
            )
            .from_abi::<::windows::Foundation::Numerics::Vector3>(result__)
        }
    }
    pub fn SetRelativeOffsetAdjustment(
        &self,
        value: ::windows::Foundation::Numerics::Vector3,
    ) -> ::windows::core::Result<()> {
        let this = &::windows::core::Interface::cast::<IVisual2>(self)?;
        unsafe {
            (::windows::core::Vtable::vtable(this).SetRelativeOffsetAdjustment)(
                ::windows::core::Vtable::as_raw(this),
                value,
            )
            .ok()
        }
    }
    pub fn RelativeSizeAdjustment(
        &self,
    ) -> ::windows::core::Result<::windows::Foundation::Numerics::Vector2> {
        let this = &::windows::core::Interface::cast::<IVisual2>(self)?;
        unsafe {
            let mut result__ = ::core::mem::MaybeUninit::zeroed();
            (::windows::core::Vtable::vtable(this).RelativeSizeAdjustment)(
                ::windows::core::Vtable::as_raw(this),
                result__.as_mut_ptr(),
            )
            .from_abi::<::windows::Foundation::Numerics::Vector2>(result__)
        }
    }
    pub fn SetRelativeSizeAdjustment(
        &self,
        value: ::windows::Foundation::Numerics::Vector2,
    ) -> ::windows::core::Result<()> {
        let this = &::windows::core::Interface::cast::<IVisual2>(self)?;
        unsafe {
            (::windows::core::Vtable::vtable(this).SetRelativeSizeAdjustment)(
                ::windows::core::Vtable::as_raw(this),
                value,
            )
            .ok()
        }
    }
    pub fn IsHitTestVisible(&self) -> ::windows::core::Result<bool> {
        let this = &::windows::core::Interface::cast::<IVisual3>(self)?;
        unsafe {
            let mut result__ = ::core::mem::MaybeUninit::zeroed();
            (::windows::core::Vtable::vtable(this).IsHitTestVisible)(
                ::windows::core::Vtable::as_raw(this),
                result__.as_mut_ptr(),
            )
            .from_abi::<bool>(result__)
        }
    }
    pub fn SetIsHitTestVisible(&self, value: bool) -> ::windows::core::Result<()> {
        let this = &::windows::core::Interface::cast::<IVisual3>(self)?;
        unsafe {
            (::windows::core::Vtable::vtable(this).SetIsHitTestVisible)(
                ::windows::core::Vtable::as_raw(this),
                value,
            )
            .ok()
        }
    }
    pub fn IsPixelSnappingEnabled(&self) -> ::windows::core::Result<bool> {
        let this = &::windows::core::Interface::cast::<IVisual4>(self)?;
        unsafe {
            let mut result__ = ::core::mem::MaybeUninit::zeroed();
            (::windows::core::Vtable::vtable(this).IsPixelSnappingEnabled)(
                ::windows::core::Vtable::as_raw(this),
                result__.as_mut_ptr(),
            )
            .from_abi::<bool>(result__)
        }
    }
    pub fn SetIsPixelSnappingEnabled(&self, value: bool) -> ::windows::core::Result<()> {
        let this = &::windows::core::Interface::cast::<IVisual4>(self)?;
        unsafe {
            (::windows::core::Vtable::vtable(this).SetIsPixelSnappingEnabled)(
                ::windows::core::Vtable::as_raw(this),
                value,
            )
            .ok()
        }
    }
}
impl ::core::clone::Clone for RedirectVisual {
    fn clone(&self) -> Self {
        Self(self.0.clone())
    }
}
impl ::core::cmp::PartialEq for RedirectVisual {
    fn eq(&self, other: &Self) -> bool {
        self.0 == other.0
    }
}
impl ::core::cmp::Eq for RedirectVisual {}
impl ::core::fmt::Debug for RedirectVisual {
    fn fmt(&self, f: &mut ::core::fmt::Formatter<'_>) -> ::core::fmt::Result {
        f.debug_tuple("RedirectVisual").field(&self.0).finish()
    }
}
unsafe impl ::windows::core::RuntimeType for RedirectVisual {
    const SIGNATURE: ::windows::core::ConstBuffer = ::windows::core::ConstBuffer::from_slice(
        b"rc(Microsoft.UI.Composition.RedirectVisual;{6c10081a-cde1-50d9-ac05-78d6845b656f})",
    );
    type DefaultType = ::core::option::Option<Self>;
    fn from_default(from: &Self::DefaultType) -> ::windows::core::Result<Self> {
        from.as_ref().cloned().ok_or(::windows::core::Error::OK)
    }
}
unsafe impl ::windows::core::Vtable for RedirectVisual {
    type Vtable = IRedirectVisual_Vtbl;
}
unsafe impl ::windows::core::Interface for RedirectVisual {
    const IID: ::windows::core::GUID = <IRedirectVisual as ::windows::core::Interface>::IID;
}
impl ::windows::core::RuntimeName for RedirectVisual {
    const NAME: &'static str = "Microsoft.UI.Composition.RedirectVisual";
}
::windows::core::interface_hierarchy!(
    RedirectVisual,
    ::windows::core::IUnknown,
    ::windows::core::IInspectable
);
impl ::core::convert::TryFrom<RedirectVisual> for IAnimationObject {
    type Error = ::windows::core::Error;
    fn try_from(value: RedirectVisual) -> ::windows::core::Result<Self> {
        ::core::convert::TryFrom::try_from(&value)
    }
}
impl ::core::convert::TryFrom<&RedirectVisual> for IAnimationObject {
    type Error = ::windows::core::Error;
    fn try_from(value: &RedirectVisual) -> ::windows::core::Result<Self> {
        ::windows::core::Interface::cast(value)
    }
}
impl<'a> ::core::convert::TryFrom<&RedirectVisual>
    for ::windows::core::InParam<'a, IAnimationObject>
{
    type Error = ::windows::core::Error;
    fn try_from(value: &RedirectVisual) -> ::windows::core::Result<Self> {
        let item = ::std::convert::TryInto::try_into(value)?;
        Ok(::windows::core::InParam::owned(item))
    }
}
impl ::core::convert::TryFrom<RedirectVisual> for ::windows::Foundation::IClosable {
    type Error = ::windows::core::Error;
    fn try_from(value: RedirectVisual) -> ::windows::core::Result<Self> {
        ::core::convert::TryFrom::try_from(&value)
    }
}
impl ::core::convert::TryFrom<&RedirectVisual> for ::windows::Foundation::IClosable {
    type Error = ::windows::core::Error;
    fn try_from(value: &RedirectVisual) -> ::windows::core::Result<Self> {
        ::windows::core::Interface::cast(value)
    }
}
impl<'a> ::core::convert::TryFrom<&RedirectVisual>
    for ::windows::core::InParam<'a, ::windows::Foundation::IClosable>
{
    type Error = ::windows::core::Error;
    fn try_from(value: &RedirectVisual) -> ::windows::core::Result<Self> {
        let item = ::std::convert::TryInto::try_into(value)?;
        Ok(::windows::core::InParam::owned(item))
    }
}
impl ::core::convert::From<RedirectVisual> for ContainerVisual {
    fn from(value: RedirectVisual) -> Self {
        ::core::convert::From::from(&value)
    }
}
impl ::core::convert::From<&RedirectVisual> for ContainerVisual {
    fn from(value: &RedirectVisual) -> Self {
        ::windows::core::Interface::cast(value).unwrap()
    }
}
impl<'a> ::core::convert::From<&RedirectVisual> for ::windows::core::InParam<'a, ContainerVisual> {
    fn from(value: &RedirectVisual) -> Self {
        ::windows::core::InParam::owned(value.into())
    }
}
impl ::core::convert::From<RedirectVisual> for Visual {
    fn from(value: RedirectVisual) -> Self {
        ::core::convert::From::from(&value)
    }
}
impl ::core::convert::From<&RedirectVisual> for Visual {
    fn from(value: &RedirectVisual) -> Self {
        ::windows::core::Interface::cast(value).unwrap()
    }
}
impl<'a> ::core::convert::From<&RedirectVisual> for ::windows::core::InParam<'a, Visual> {
    fn from(value: &RedirectVisual) -> Self {
        ::windows::core::InParam::owned(value.into())
    }
}
impl ::core::convert::From<RedirectVisual> for CompositionObject {
    fn from(value: RedirectVisual) -> Self {
        ::core::convert::From::from(&value)
    }
}
impl ::core::convert::From<&RedirectVisual> for CompositionObject {
    fn from(value: &RedirectVisual) -> Self {
        ::windows::core::Interface::cast(value).unwrap()
    }
}
impl<'a> ::core::convert::From<&RedirectVisual>
    for ::windows::core::InParam<'a, CompositionObject>
{
    fn from(value: &RedirectVisual) -> Self {
        ::windows::core::InParam::owned(value.into())
    }
}
unsafe impl ::core::marker::Send for RedirectVisual {}
unsafe impl ::core::marker::Sync for RedirectVisual {}
#[doc = "*Required features: `\"UI_Composition\"`*"]
#[repr(transparent)]
pub struct RenderingDeviceReplacedEventArgs(::windows::core::IUnknown);
impl RenderingDeviceReplacedEventArgs {
    pub fn PopulatePropertyInfo(
        &self,
        propertyname: &::windows::core::HSTRING,
        propertyinfo: &AnimationPropertyInfo,
    ) -> ::windows::core::Result<()> {
        let this = &::windows::core::Interface::cast::<IAnimationObject>(self)?;
        unsafe {
            (::windows::core::Vtable::vtable(this).PopulatePropertyInfo)(
                ::windows::core::Vtable::as_raw(this),
                ::core::mem::transmute_copy(propertyname),
                ::core::mem::transmute_copy(propertyinfo),
            )
            .ok()
        }
    }
    pub fn Close(&self) -> ::windows::core::Result<()> {
        let this = &::windows::core::Interface::cast::<::windows::Foundation::IClosable>(self)?;
        unsafe {
            (::windows::core::Vtable::vtable(this).Close)(::windows::core::Vtable::as_raw(this))
                .ok()
        }
    }
    pub fn Compositor(&self) -> ::windows::core::Result<Compositor> {
        let this = &::windows::core::Interface::cast::<ICompositionObject>(self)?;
        unsafe {
            let mut result__ = ::core::mem::MaybeUninit::zeroed();
            (::windows::core::Vtable::vtable(this).Compositor)(
                ::windows::core::Vtable::as_raw(this),
                result__.as_mut_ptr(),
            )
            .from_abi::<Compositor>(result__)
        }
    }
    pub fn Properties(&self) -> ::windows::core::Result<CompositionPropertySet> {
        let this = &::windows::core::Interface::cast::<ICompositionObject>(self)?;
        unsafe {
            let mut result__ = ::core::mem::MaybeUninit::zeroed();
            (::windows::core::Vtable::vtable(this).Properties)(
                ::windows::core::Vtable::as_raw(this),
                result__.as_mut_ptr(),
            )
            .from_abi::<CompositionPropertySet>(result__)
        }
    }
    pub fn StartAnimation<'a, P0>(
        &self,
        propertyname: &::windows::core::HSTRING,
        animation: P0,
    ) -> ::windows::core::Result<()>
    where
        P0: ::std::convert::Into<::windows::core::InParam<'a, CompositionAnimation>>,
    {
        let this = &::windows::core::Interface::cast::<ICompositionObject>(self)?;
        unsafe {
            (::windows::core::Vtable::vtable(this).StartAnimation)(
                ::windows::core::Vtable::as_raw(this),
                ::core::mem::transmute_copy(propertyname),
                animation.into().abi(),
            )
            .ok()
        }
    }
    pub fn StopAnimation(
        &self,
        propertyname: &::windows::core::HSTRING,
    ) -> ::windows::core::Result<()> {
        let this = &::windows::core::Interface::cast::<ICompositionObject>(self)?;
        unsafe {
            (::windows::core::Vtable::vtable(this).StopAnimation)(
                ::windows::core::Vtable::as_raw(this),
                ::core::mem::transmute_copy(propertyname),
            )
            .ok()
        }
    }
    pub fn Comment(&self) -> ::windows::core::Result<::windows::core::HSTRING> {
        let this = &::windows::core::Interface::cast::<ICompositionObject2>(self)?;
        unsafe {
            let mut result__ = ::core::mem::MaybeUninit::zeroed();
            (::windows::core::Vtable::vtable(this).Comment)(
                ::windows::core::Vtable::as_raw(this),
                result__.as_mut_ptr(),
            )
            .from_abi::<::windows::core::HSTRING>(result__)
        }
    }
    pub fn SetComment(&self, value: &::windows::core::HSTRING) -> ::windows::core::Result<()> {
        let this = &::windows::core::Interface::cast::<ICompositionObject2>(self)?;
        unsafe {
            (::windows::core::Vtable::vtable(this).SetComment)(
                ::windows::core::Vtable::as_raw(this),
                ::core::mem::transmute_copy(value),
            )
            .ok()
        }
    }
    pub fn ImplicitAnimations(&self) -> ::windows::core::Result<ImplicitAnimationCollection> {
        let this = &::windows::core::Interface::cast::<ICompositionObject2>(self)?;
        unsafe {
            let mut result__ = ::core::mem::MaybeUninit::zeroed();
            (::windows::core::Vtable::vtable(this).ImplicitAnimations)(
                ::windows::core::Vtable::as_raw(this),
                result__.as_mut_ptr(),
            )
            .from_abi::<ImplicitAnimationCollection>(result__)
        }
    }
    pub fn SetImplicitAnimations(
        &self,
        value: &ImplicitAnimationCollection,
    ) -> ::windows::core::Result<()> {
        let this = &::windows::core::Interface::cast::<ICompositionObject2>(self)?;
        unsafe {
            (::windows::core::Vtable::vtable(this).SetImplicitAnimations)(
                ::windows::core::Vtable::as_raw(this),
                ::core::mem::transmute_copy(value),
            )
            .ok()
        }
    }
    pub fn StartAnimationGroup<'a, P0, E0>(&self, value: P0) -> ::windows::core::Result<()>
    where
        P0: ::std::convert::TryInto<
            ::windows::core::InParam<'a, ICompositionAnimationBase>,
            Error = E0,
        >,
        E0: ::std::convert::Into<::windows::core::Error>,
    {
        let this = &::windows::core::Interface::cast::<ICompositionObject2>(self)?;
        unsafe {
            (::windows::core::Vtable::vtable(this).StartAnimationGroup)(
                ::windows::core::Vtable::as_raw(this),
                value.try_into().map_err(|e| e.into())?.abi(),
            )
            .ok()
        }
    }
    pub fn StopAnimationGroup<'a, P0, E0>(&self, value: P0) -> ::windows::core::Result<()>
    where
        P0: ::std::convert::TryInto<
            ::windows::core::InParam<'a, ICompositionAnimationBase>,
            Error = E0,
        >,
        E0: ::std::convert::Into<::windows::core::Error>,
    {
        let this = &::windows::core::Interface::cast::<ICompositionObject2>(self)?;
        unsafe {
            (::windows::core::Vtable::vtable(this).StopAnimationGroup)(
                ::windows::core::Vtable::as_raw(this),
                value.try_into().map_err(|e| e.into())?.abi(),
            )
            .ok()
        }
    }
    #[doc = "*Required features: `\"UI_Dispatching\"`*"]
    #[cfg(feature = "UI_Dispatching")]
    pub fn DispatcherQueue(&self) -> ::windows::core::Result<super::Dispatching::DispatcherQueue> {
        let this = &::windows::core::Interface::cast::<ICompositionObject3>(self)?;
        unsafe {
            let mut result__ = ::core::mem::MaybeUninit::zeroed();
            (::windows::core::Vtable::vtable(this).DispatcherQueue)(
                ::windows::core::Vtable::as_raw(this),
                result__.as_mut_ptr(),
            )
            .from_abi::<super::Dispatching::DispatcherQueue>(result__)
        }
    }
    pub fn TryGetAnimationController(
        &self,
        propertyname: &::windows::core::HSTRING,
    ) -> ::windows::core::Result<AnimationController> {
        let this = &::windows::core::Interface::cast::<ICompositionObject4>(self)?;
        unsafe {
            let mut result__ = ::core::mem::MaybeUninit::zeroed();
            (::windows::core::Vtable::vtable(this).TryGetAnimationController)(
                ::windows::core::Vtable::as_raw(this),
                ::core::mem::transmute_copy(propertyname),
                result__.as_mut_ptr(),
            )
            .from_abi::<AnimationController>(result__)
        }
    }
    pub fn StartAnimationWithController<'a, P0>(
        &self,
        propertyname: &::windows::core::HSTRING,
        animation: P0,
        animationcontroller: &AnimationController,
    ) -> ::windows::core::Result<()>
    where
        P0: ::std::convert::Into<::windows::core::InParam<'a, CompositionAnimation>>,
    {
        let this = &::windows::core::Interface::cast::<ICompositionObject5>(self)?;
        unsafe {
            (::windows::core::Vtable::vtable(this).StartAnimationWithController)(
                ::windows::core::Vtable::as_raw(this),
                ::core::mem::transmute_copy(propertyname),
                animation.into().abi(),
                ::core::mem::transmute_copy(animationcontroller),
            )
            .ok()
        }
    }
    pub fn GraphicsDevice(&self) -> ::windows::core::Result<CompositionGraphicsDevice> {
        let this = self;
        unsafe {
            let mut result__ = ::core::mem::MaybeUninit::zeroed();
            (::windows::core::Vtable::vtable(this).GraphicsDevice)(
                ::windows::core::Vtable::as_raw(this),
                result__.as_mut_ptr(),
            )
            .from_abi::<CompositionGraphicsDevice>(result__)
        }
    }
}
impl ::core::clone::Clone for RenderingDeviceReplacedEventArgs {
    fn clone(&self) -> Self {
        Self(self.0.clone())
    }
}
impl ::core::cmp::PartialEq for RenderingDeviceReplacedEventArgs {
    fn eq(&self, other: &Self) -> bool {
        self.0 == other.0
    }
}
impl ::core::cmp::Eq for RenderingDeviceReplacedEventArgs {}
impl ::core::fmt::Debug for RenderingDeviceReplacedEventArgs {
    fn fmt(&self, f: &mut ::core::fmt::Formatter<'_>) -> ::core::fmt::Result {
        f.debug_tuple("RenderingDeviceReplacedEventArgs").field(&self.0).finish()
    }
}
unsafe impl ::windows::core::RuntimeType for RenderingDeviceReplacedEventArgs {
    const SIGNATURE : ::windows::core::ConstBuffer = ::windows::core::ConstBuffer::from_slice ( b"rc(Microsoft.UI.Composition.RenderingDeviceReplacedEventArgs;{fe5b97c7-f656-56d6-a0cd-3e1227e4dd44})" ) ;
    type DefaultType = ::core::option::Option<Self>;
    fn from_default(from: &Self::DefaultType) -> ::windows::core::Result<Self> {
        from.as_ref().cloned().ok_or(::windows::core::Error::OK)
    }
}
unsafe impl ::windows::core::Vtable for RenderingDeviceReplacedEventArgs {
    type Vtable = IRenderingDeviceReplacedEventArgs_Vtbl;
}
unsafe impl ::windows::core::Interface for RenderingDeviceReplacedEventArgs {
    const IID: ::windows::core::GUID =
        <IRenderingDeviceReplacedEventArgs as ::windows::core::Interface>::IID;
}
impl ::windows::core::RuntimeName for RenderingDeviceReplacedEventArgs {
    const NAME: &'static str = "Microsoft.UI.Composition.RenderingDeviceReplacedEventArgs";
}
::windows::core::interface_hierarchy!(
    RenderingDeviceReplacedEventArgs,
    ::windows::core::IUnknown,
    ::windows::core::IInspectable
);
impl ::core::convert::TryFrom<RenderingDeviceReplacedEventArgs> for IAnimationObject {
    type Error = ::windows::core::Error;
    fn try_from(value: RenderingDeviceReplacedEventArgs) -> ::windows::core::Result<Self> {
        ::core::convert::TryFrom::try_from(&value)
    }
}
impl ::core::convert::TryFrom<&RenderingDeviceReplacedEventArgs> for IAnimationObject {
    type Error = ::windows::core::Error;
    fn try_from(value: &RenderingDeviceReplacedEventArgs) -> ::windows::core::Result<Self> {
        ::windows::core::Interface::cast(value)
    }
}
impl<'a> ::core::convert::TryFrom<&RenderingDeviceReplacedEventArgs>
    for ::windows::core::InParam<'a, IAnimationObject>
{
    type Error = ::windows::core::Error;
    fn try_from(value: &RenderingDeviceReplacedEventArgs) -> ::windows::core::Result<Self> {
        let item = ::std::convert::TryInto::try_into(value)?;
        Ok(::windows::core::InParam::owned(item))
    }
}
impl ::core::convert::TryFrom<RenderingDeviceReplacedEventArgs>
    for ::windows::Foundation::IClosable
{
    type Error = ::windows::core::Error;
    fn try_from(value: RenderingDeviceReplacedEventArgs) -> ::windows::core::Result<Self> {
        ::core::convert::TryFrom::try_from(&value)
    }
}
impl ::core::convert::TryFrom<&RenderingDeviceReplacedEventArgs>
    for ::windows::Foundation::IClosable
{
    type Error = ::windows::core::Error;
    fn try_from(value: &RenderingDeviceReplacedEventArgs) -> ::windows::core::Result<Self> {
        ::windows::core::Interface::cast(value)
    }
}
impl<'a> ::core::convert::TryFrom<&RenderingDeviceReplacedEventArgs>
    for ::windows::core::InParam<'a, ::windows::Foundation::IClosable>
{
    type Error = ::windows::core::Error;
    fn try_from(value: &RenderingDeviceReplacedEventArgs) -> ::windows::core::Result<Self> {
        let item = ::std::convert::TryInto::try_into(value)?;
        Ok(::windows::core::InParam::owned(item))
    }
}
impl ::core::convert::From<RenderingDeviceReplacedEventArgs> for CompositionObject {
    fn from(value: RenderingDeviceReplacedEventArgs) -> Self {
        ::core::convert::From::from(&value)
    }
}
impl ::core::convert::From<&RenderingDeviceReplacedEventArgs> for CompositionObject {
    fn from(value: &RenderingDeviceReplacedEventArgs) -> Self {
        ::windows::core::Interface::cast(value).unwrap()
    }
}
impl<'a> ::core::convert::From<&RenderingDeviceReplacedEventArgs>
    for ::windows::core::InParam<'a, CompositionObject>
{
    fn from(value: &RenderingDeviceReplacedEventArgs) -> Self {
        ::windows::core::InParam::owned(value.into())
    }
}
unsafe impl ::core::marker::Send for RenderingDeviceReplacedEventArgs {}
unsafe impl ::core::marker::Sync for RenderingDeviceReplacedEventArgs {}
#[doc = "*Required features: `\"UI_Composition\"`*"]
#[repr(transparent)]
pub struct ScalarKeyFrameAnimation(::windows::core::IUnknown);
impl ScalarKeyFrameAnimation {
    pub fn PopulatePropertyInfo(
        &self,
        propertyname: &::windows::core::HSTRING,
        propertyinfo: &AnimationPropertyInfo,
    ) -> ::windows::core::Result<()> {
        let this = &::windows::core::Interface::cast::<IAnimationObject>(self)?;
        unsafe {
            (::windows::core::Vtable::vtable(this).PopulatePropertyInfo)(
                ::windows::core::Vtable::as_raw(this),
                ::core::mem::transmute_copy(propertyname),
                ::core::mem::transmute_copy(propertyinfo),
            )
            .ok()
        }
    }
    pub fn Close(&self) -> ::windows::core::Result<()> {
        let this = &::windows::core::Interface::cast::<::windows::Foundation::IClosable>(self)?;
        unsafe {
            (::windows::core::Vtable::vtable(this).Close)(::windows::core::Vtable::as_raw(this))
                .ok()
        }
    }
    pub fn ClearAllParameters(&self) -> ::windows::core::Result<()> {
        let this = &::windows::core::Interface::cast::<ICompositionAnimation>(self)?;
        unsafe {
            (::windows::core::Vtable::vtable(this).ClearAllParameters)(
                ::windows::core::Vtable::as_raw(this),
            )
            .ok()
        }
    }
    pub fn ClearParameter(&self, key: &::windows::core::HSTRING) -> ::windows::core::Result<()> {
        let this = &::windows::core::Interface::cast::<ICompositionAnimation>(self)?;
        unsafe {
            (::windows::core::Vtable::vtable(this).ClearParameter)(
                ::windows::core::Vtable::as_raw(this),
                ::core::mem::transmute_copy(key),
            )
            .ok()
        }
    }
    pub fn SetColorParameter(
        &self,
        key: &::windows::core::HSTRING,
        value: ::windows::UI::Color,
    ) -> ::windows::core::Result<()> {
        let this = &::windows::core::Interface::cast::<ICompositionAnimation>(self)?;
        unsafe {
            (::windows::core::Vtable::vtable(this).SetColorParameter)(
                ::windows::core::Vtable::as_raw(this),
                ::core::mem::transmute_copy(key),
                value,
            )
            .ok()
        }
    }
    pub fn SetMatrix3x2Parameter(
        &self,
        key: &::windows::core::HSTRING,
        value: ::windows::Foundation::Numerics::Matrix3x2,
    ) -> ::windows::core::Result<()> {
        let this = &::windows::core::Interface::cast::<ICompositionAnimation>(self)?;
        unsafe {
            (::windows::core::Vtable::vtable(this).SetMatrix3x2Parameter)(
                ::windows::core::Vtable::as_raw(this),
                ::core::mem::transmute_copy(key),
                value,
            )
            .ok()
        }
    }
    pub fn SetMatrix4x4Parameter(
        &self,
        key: &::windows::core::HSTRING,
        value: ::windows::Foundation::Numerics::Matrix4x4,
    ) -> ::windows::core::Result<()> {
        let this = &::windows::core::Interface::cast::<ICompositionAnimation>(self)?;
        unsafe {
            (::windows::core::Vtable::vtable(this).SetMatrix4x4Parameter)(
                ::windows::core::Vtable::as_raw(this),
                ::core::mem::transmute_copy(key),
                value,
            )
            .ok()
        }
    }
    pub fn SetQuaternionParameter(
        &self,
        key: &::windows::core::HSTRING,
        value: ::windows::Foundation::Numerics::Quaternion,
    ) -> ::windows::core::Result<()> {
        let this = &::windows::core::Interface::cast::<ICompositionAnimation>(self)?;
        unsafe {
            (::windows::core::Vtable::vtable(this).SetQuaternionParameter)(
                ::windows::core::Vtable::as_raw(this),
                ::core::mem::transmute_copy(key),
                value,
            )
            .ok()
        }
    }
    pub fn SetReferenceParameter<'a, P0>(
        &self,
        key: &::windows::core::HSTRING,
        compositionobject: P0,
    ) -> ::windows::core::Result<()>
    where
        P0: ::std::convert::Into<::windows::core::InParam<'a, CompositionObject>>,
    {
        let this = &::windows::core::Interface::cast::<ICompositionAnimation>(self)?;
        unsafe {
            (::windows::core::Vtable::vtable(this).SetReferenceParameter)(
                ::windows::core::Vtable::as_raw(this),
                ::core::mem::transmute_copy(key),
                compositionobject.into().abi(),
            )
            .ok()
        }
    }
    pub fn SetScalarParameter(
        &self,
        key: &::windows::core::HSTRING,
        value: f32,
    ) -> ::windows::core::Result<()> {
        let this = &::windows::core::Interface::cast::<ICompositionAnimation>(self)?;
        unsafe {
            (::windows::core::Vtable::vtable(this).SetScalarParameter)(
                ::windows::core::Vtable::as_raw(this),
                ::core::mem::transmute_copy(key),
                value,
            )
            .ok()
        }
    }
    pub fn SetVector2Parameter(
        &self,
        key: &::windows::core::HSTRING,
        value: ::windows::Foundation::Numerics::Vector2,
    ) -> ::windows::core::Result<()> {
        let this = &::windows::core::Interface::cast::<ICompositionAnimation>(self)?;
        unsafe {
            (::windows::core::Vtable::vtable(this).SetVector2Parameter)(
                ::windows::core::Vtable::as_raw(this),
                ::core::mem::transmute_copy(key),
                value,
            )
            .ok()
        }
    }
    pub fn SetVector3Parameter(
        &self,
        key: &::windows::core::HSTRING,
        value: ::windows::Foundation::Numerics::Vector3,
    ) -> ::windows::core::Result<()> {
        let this = &::windows::core::Interface::cast::<ICompositionAnimation>(self)?;
        unsafe {
            (::windows::core::Vtable::vtable(this).SetVector3Parameter)(
                ::windows::core::Vtable::as_raw(this),
                ::core::mem::transmute_copy(key),
                value,
            )
            .ok()
        }
    }
    pub fn SetVector4Parameter(
        &self,
        key: &::windows::core::HSTRING,
        value: ::windows::Foundation::Numerics::Vector4,
    ) -> ::windows::core::Result<()> {
        let this = &::windows::core::Interface::cast::<ICompositionAnimation>(self)?;
        unsafe {
            (::windows::core::Vtable::vtable(this).SetVector4Parameter)(
                ::windows::core::Vtable::as_raw(this),
                ::core::mem::transmute_copy(key),
                value,
            )
            .ok()
        }
    }
    pub fn SetBooleanParameter(
        &self,
        key: &::windows::core::HSTRING,
        value: bool,
    ) -> ::windows::core::Result<()> {
        let this = &::windows::core::Interface::cast::<ICompositionAnimation2>(self)?;
        unsafe {
            (::windows::core::Vtable::vtable(this).SetBooleanParameter)(
                ::windows::core::Vtable::as_raw(this),
                ::core::mem::transmute_copy(key),
                value,
            )
            .ok()
        }
    }
    pub fn Target(&self) -> ::windows::core::Result<::windows::core::HSTRING> {
        let this = &::windows::core::Interface::cast::<ICompositionAnimation2>(self)?;
        unsafe {
            let mut result__ = ::core::mem::MaybeUninit::zeroed();
            (::windows::core::Vtable::vtable(this).Target)(
                ::windows::core::Vtable::as_raw(this),
                result__.as_mut_ptr(),
            )
            .from_abi::<::windows::core::HSTRING>(result__)
        }
    }
    pub fn SetTarget(&self, value: &::windows::core::HSTRING) -> ::windows::core::Result<()> {
        let this = &::windows::core::Interface::cast::<ICompositionAnimation2>(self)?;
        unsafe {
            (::windows::core::Vtable::vtable(this).SetTarget)(
                ::windows::core::Vtable::as_raw(this),
                ::core::mem::transmute_copy(value),
            )
            .ok()
        }
    }
    pub fn InitialValueExpressions(
        &self,
    ) -> ::windows::core::Result<InitialValueExpressionCollection> {
        let this = &::windows::core::Interface::cast::<ICompositionAnimation3>(self)?;
        unsafe {
            let mut result__ = ::core::mem::MaybeUninit::zeroed();
            (::windows::core::Vtable::vtable(this).InitialValueExpressions)(
                ::windows::core::Vtable::as_raw(this),
                result__.as_mut_ptr(),
            )
            .from_abi::<InitialValueExpressionCollection>(result__)
        }
    }
    pub fn SetExpressionReferenceParameter<'a, P0, E0>(
        &self,
        parametername: &::windows::core::HSTRING,
        source: P0,
    ) -> ::windows::core::Result<()>
    where
        P0: ::std::convert::TryInto<::windows::core::InParam<'a, IAnimationObject>, Error = E0>,
        E0: ::std::convert::Into<::windows::core::Error>,
    {
        let this = &::windows::core::Interface::cast::<ICompositionAnimation4>(self)?;
        unsafe {
            (::windows::core::Vtable::vtable(this).SetExpressionReferenceParameter)(
                ::windows::core::Vtable::as_raw(this),
                ::core::mem::transmute_copy(parametername),
                source.try_into().map_err(|e| e.into())?.abi(),
            )
            .ok()
        }
    }
    pub fn Compositor(&self) -> ::windows::core::Result<Compositor> {
        let this = &::windows::core::Interface::cast::<ICompositionObject>(self)?;
        unsafe {
            let mut result__ = ::core::mem::MaybeUninit::zeroed();
            (::windows::core::Vtable::vtable(this).Compositor)(
                ::windows::core::Vtable::as_raw(this),
                result__.as_mut_ptr(),
            )
            .from_abi::<Compositor>(result__)
        }
    }
    pub fn Properties(&self) -> ::windows::core::Result<CompositionPropertySet> {
        let this = &::windows::core::Interface::cast::<ICompositionObject>(self)?;
        unsafe {
            let mut result__ = ::core::mem::MaybeUninit::zeroed();
            (::windows::core::Vtable::vtable(this).Properties)(
                ::windows::core::Vtable::as_raw(this),
                result__.as_mut_ptr(),
            )
            .from_abi::<CompositionPropertySet>(result__)
        }
    }
    pub fn StartAnimation<'a, P0>(
        &self,
        propertyname: &::windows::core::HSTRING,
        animation: P0,
    ) -> ::windows::core::Result<()>
    where
        P0: ::std::convert::Into<::windows::core::InParam<'a, CompositionAnimation>>,
    {
        let this = &::windows::core::Interface::cast::<ICompositionObject>(self)?;
        unsafe {
            (::windows::core::Vtable::vtable(this).StartAnimation)(
                ::windows::core::Vtable::as_raw(this),
                ::core::mem::transmute_copy(propertyname),
                animation.into().abi(),
            )
            .ok()
        }
    }
    pub fn StopAnimation(
        &self,
        propertyname: &::windows::core::HSTRING,
    ) -> ::windows::core::Result<()> {
        let this = &::windows::core::Interface::cast::<ICompositionObject>(self)?;
        unsafe {
            (::windows::core::Vtable::vtable(this).StopAnimation)(
                ::windows::core::Vtable::as_raw(this),
                ::core::mem::transmute_copy(propertyname),
            )
            .ok()
        }
    }
    pub fn Comment(&self) -> ::windows::core::Result<::windows::core::HSTRING> {
        let this = &::windows::core::Interface::cast::<ICompositionObject2>(self)?;
        unsafe {
            let mut result__ = ::core::mem::MaybeUninit::zeroed();
            (::windows::core::Vtable::vtable(this).Comment)(
                ::windows::core::Vtable::as_raw(this),
                result__.as_mut_ptr(),
            )
            .from_abi::<::windows::core::HSTRING>(result__)
        }
    }
    pub fn SetComment(&self, value: &::windows::core::HSTRING) -> ::windows::core::Result<()> {
        let this = &::windows::core::Interface::cast::<ICompositionObject2>(self)?;
        unsafe {
            (::windows::core::Vtable::vtable(this).SetComment)(
                ::windows::core::Vtable::as_raw(this),
                ::core::mem::transmute_copy(value),
            )
            .ok()
        }
    }
    pub fn ImplicitAnimations(&self) -> ::windows::core::Result<ImplicitAnimationCollection> {
        let this = &::windows::core::Interface::cast::<ICompositionObject2>(self)?;
        unsafe {
            let mut result__ = ::core::mem::MaybeUninit::zeroed();
            (::windows::core::Vtable::vtable(this).ImplicitAnimations)(
                ::windows::core::Vtable::as_raw(this),
                result__.as_mut_ptr(),
            )
            .from_abi::<ImplicitAnimationCollection>(result__)
        }
    }
    pub fn SetImplicitAnimations(
        &self,
        value: &ImplicitAnimationCollection,
    ) -> ::windows::core::Result<()> {
        let this = &::windows::core::Interface::cast::<ICompositionObject2>(self)?;
        unsafe {
            (::windows::core::Vtable::vtable(this).SetImplicitAnimations)(
                ::windows::core::Vtable::as_raw(this),
                ::core::mem::transmute_copy(value),
            )
            .ok()
        }
    }
    pub fn StartAnimationGroup<'a, P0, E0>(&self, value: P0) -> ::windows::core::Result<()>
    where
        P0: ::std::convert::TryInto<
            ::windows::core::InParam<'a, ICompositionAnimationBase>,
            Error = E0,
        >,
        E0: ::std::convert::Into<::windows::core::Error>,
    {
        let this = &::windows::core::Interface::cast::<ICompositionObject2>(self)?;
        unsafe {
            (::windows::core::Vtable::vtable(this).StartAnimationGroup)(
                ::windows::core::Vtable::as_raw(this),
                value.try_into().map_err(|e| e.into())?.abi(),
            )
            .ok()
        }
    }
    pub fn StopAnimationGroup<'a, P0, E0>(&self, value: P0) -> ::windows::core::Result<()>
    where
        P0: ::std::convert::TryInto<
            ::windows::core::InParam<'a, ICompositionAnimationBase>,
            Error = E0,
        >,
        E0: ::std::convert::Into<::windows::core::Error>,
    {
        let this = &::windows::core::Interface::cast::<ICompositionObject2>(self)?;
        unsafe {
            (::windows::core::Vtable::vtable(this).StopAnimationGroup)(
                ::windows::core::Vtable::as_raw(this),
                value.try_into().map_err(|e| e.into())?.abi(),
            )
            .ok()
        }
    }
    #[doc = "*Required features: `\"UI_Dispatching\"`*"]
    #[cfg(feature = "UI_Dispatching")]
    pub fn DispatcherQueue(&self) -> ::windows::core::Result<super::Dispatching::DispatcherQueue> {
        let this = &::windows::core::Interface::cast::<ICompositionObject3>(self)?;
        unsafe {
            let mut result__ = ::core::mem::MaybeUninit::zeroed();
            (::windows::core::Vtable::vtable(this).DispatcherQueue)(
                ::windows::core::Vtable::as_raw(this),
                result__.as_mut_ptr(),
            )
            .from_abi::<super::Dispatching::DispatcherQueue>(result__)
        }
    }
    pub fn TryGetAnimationController(
        &self,
        propertyname: &::windows::core::HSTRING,
    ) -> ::windows::core::Result<AnimationController> {
        let this = &::windows::core::Interface::cast::<ICompositionObject4>(self)?;
        unsafe {
            let mut result__ = ::core::mem::MaybeUninit::zeroed();
            (::windows::core::Vtable::vtable(this).TryGetAnimationController)(
                ::windows::core::Vtable::as_raw(this),
                ::core::mem::transmute_copy(propertyname),
                result__.as_mut_ptr(),
            )
            .from_abi::<AnimationController>(result__)
        }
    }
    pub fn StartAnimationWithController<'a, P0>(
        &self,
        propertyname: &::windows::core::HSTRING,
        animation: P0,
        animationcontroller: &AnimationController,
    ) -> ::windows::core::Result<()>
    where
        P0: ::std::convert::Into<::windows::core::InParam<'a, CompositionAnimation>>,
    {
        let this = &::windows::core::Interface::cast::<ICompositionObject5>(self)?;
        unsafe {
            (::windows::core::Vtable::vtable(this).StartAnimationWithController)(
                ::windows::core::Vtable::as_raw(this),
                ::core::mem::transmute_copy(propertyname),
                animation.into().abi(),
                ::core::mem::transmute_copy(animationcontroller),
            )
            .ok()
        }
    }
    pub fn DelayTime(&self) -> ::windows::core::Result<::windows::Foundation::TimeSpan> {
        let this = &::windows::core::Interface::cast::<IKeyFrameAnimation>(self)?;
        unsafe {
            let mut result__ = ::core::mem::MaybeUninit::zeroed();
            (::windows::core::Vtable::vtable(this).DelayTime)(
                ::windows::core::Vtable::as_raw(this),
                result__.as_mut_ptr(),
            )
            .from_abi::<::windows::Foundation::TimeSpan>(result__)
        }
    }
    pub fn SetDelayTime(
        &self,
        value: ::windows::Foundation::TimeSpan,
    ) -> ::windows::core::Result<()> {
        let this = &::windows::core::Interface::cast::<IKeyFrameAnimation>(self)?;
        unsafe {
            (::windows::core::Vtable::vtable(this).SetDelayTime)(
                ::windows::core::Vtable::as_raw(this),
                value,
            )
            .ok()
        }
    }
    pub fn Duration(&self) -> ::windows::core::Result<::windows::Foundation::TimeSpan> {
        let this = &::windows::core::Interface::cast::<IKeyFrameAnimation>(self)?;
        unsafe {
            let mut result__ = ::core::mem::MaybeUninit::zeroed();
            (::windows::core::Vtable::vtable(this).Duration)(
                ::windows::core::Vtable::as_raw(this),
                result__.as_mut_ptr(),
            )
            .from_abi::<::windows::Foundation::TimeSpan>(result__)
        }
    }
    pub fn SetDuration(
        &self,
        value: ::windows::Foundation::TimeSpan,
    ) -> ::windows::core::Result<()> {
        let this = &::windows::core::Interface::cast::<IKeyFrameAnimation>(self)?;
        unsafe {
            (::windows::core::Vtable::vtable(this).SetDuration)(
                ::windows::core::Vtable::as_raw(this),
                value,
            )
            .ok()
        }
    }
    pub fn IterationBehavior(&self) -> ::windows::core::Result<AnimationIterationBehavior> {
        let this = &::windows::core::Interface::cast::<IKeyFrameAnimation>(self)?;
        unsafe {
            let mut result__ = ::core::mem::MaybeUninit::zeroed();
            (::windows::core::Vtable::vtable(this).IterationBehavior)(
                ::windows::core::Vtable::as_raw(this),
                result__.as_mut_ptr(),
            )
            .from_abi::<AnimationIterationBehavior>(result__)
        }
    }
    pub fn SetIterationBehavior(
        &self,
        value: AnimationIterationBehavior,
    ) -> ::windows::core::Result<()> {
        let this = &::windows::core::Interface::cast::<IKeyFrameAnimation>(self)?;
        unsafe {
            (::windows::core::Vtable::vtable(this).SetIterationBehavior)(
                ::windows::core::Vtable::as_raw(this),
                value,
            )
            .ok()
        }
    }
    pub fn IterationCount(&self) -> ::windows::core::Result<i32> {
        let this = &::windows::core::Interface::cast::<IKeyFrameAnimation>(self)?;
        unsafe {
            let mut result__ = ::core::mem::MaybeUninit::zeroed();
            (::windows::core::Vtable::vtable(this).IterationCount)(
                ::windows::core::Vtable::as_raw(this),
                result__.as_mut_ptr(),
            )
            .from_abi::<i32>(result__)
        }
    }
    pub fn SetIterationCount(&self, value: i32) -> ::windows::core::Result<()> {
        let this = &::windows::core::Interface::cast::<IKeyFrameAnimation>(self)?;
        unsafe {
            (::windows::core::Vtable::vtable(this).SetIterationCount)(
                ::windows::core::Vtable::as_raw(this),
                value,
            )
            .ok()
        }
    }
    pub fn KeyFrameCount(&self) -> ::windows::core::Result<i32> {
        let this = &::windows::core::Interface::cast::<IKeyFrameAnimation>(self)?;
        unsafe {
            let mut result__ = ::core::mem::MaybeUninit::zeroed();
            (::windows::core::Vtable::vtable(this).KeyFrameCount)(
                ::windows::core::Vtable::as_raw(this),
                result__.as_mut_ptr(),
            )
            .from_abi::<i32>(result__)
        }
    }
    pub fn StopBehavior(&self) -> ::windows::core::Result<AnimationStopBehavior> {
        let this = &::windows::core::Interface::cast::<IKeyFrameAnimation>(self)?;
        unsafe {
            let mut result__ = ::core::mem::MaybeUninit::zeroed();
            (::windows::core::Vtable::vtable(this).StopBehavior)(
                ::windows::core::Vtable::as_raw(this),
                result__.as_mut_ptr(),
            )
            .from_abi::<AnimationStopBehavior>(result__)
        }
    }
    pub fn SetStopBehavior(&self, value: AnimationStopBehavior) -> ::windows::core::Result<()> {
        let this = &::windows::core::Interface::cast::<IKeyFrameAnimation>(self)?;
        unsafe {
            (::windows::core::Vtable::vtable(this).SetStopBehavior)(
                ::windows::core::Vtable::as_raw(this),
                value,
            )
            .ok()
        }
    }
    pub fn InsertExpressionKeyFrame(
        &self,
        normalizedprogresskey: f32,
        value: &::windows::core::HSTRING,
    ) -> ::windows::core::Result<()> {
        let this = &::windows::core::Interface::cast::<IKeyFrameAnimation>(self)?;
        unsafe {
            (::windows::core::Vtable::vtable(this).InsertExpressionKeyFrame)(
                ::windows::core::Vtable::as_raw(this),
                normalizedprogresskey,
                ::core::mem::transmute_copy(value),
            )
            .ok()
        }
    }
    pub fn InsertExpressionKeyFrameWithEasingFunction<'a, P0>(
        &self,
        normalizedprogresskey: f32,
        value: &::windows::core::HSTRING,
        easingfunction: P0,
    ) -> ::windows::core::Result<()>
    where
        P0: ::std::convert::Into<::windows::core::InParam<'a, CompositionEasingFunction>>,
    {
        let this = &::windows::core::Interface::cast::<IKeyFrameAnimation>(self)?;
        unsafe {
            (::windows::core::Vtable::vtable(this).InsertExpressionKeyFrameWithEasingFunction)(
                ::windows::core::Vtable::as_raw(this),
                normalizedprogresskey,
                ::core::mem::transmute_copy(value),
                easingfunction.into().abi(),
            )
            .ok()
        }
    }
    pub fn Direction(&self) -> ::windows::core::Result<AnimationDirection> {
        let this = &::windows::core::Interface::cast::<IKeyFrameAnimation2>(self)?;
        unsafe {
            let mut result__ = ::core::mem::MaybeUninit::zeroed();
            (::windows::core::Vtable::vtable(this).Direction)(
                ::windows::core::Vtable::as_raw(this),
                result__.as_mut_ptr(),
            )
            .from_abi::<AnimationDirection>(result__)
        }
    }
    pub fn SetDirection(&self, value: AnimationDirection) -> ::windows::core::Result<()> {
        let this = &::windows::core::Interface::cast::<IKeyFrameAnimation2>(self)?;
        unsafe {
            (::windows::core::Vtable::vtable(this).SetDirection)(
                ::windows::core::Vtable::as_raw(this),
                value,
            )
            .ok()
        }
    }
    pub fn DelayBehavior(&self) -> ::windows::core::Result<AnimationDelayBehavior> {
        let this = &::windows::core::Interface::cast::<IKeyFrameAnimation3>(self)?;
        unsafe {
            let mut result__ = ::core::mem::MaybeUninit::zeroed();
            (::windows::core::Vtable::vtable(this).DelayBehavior)(
                ::windows::core::Vtable::as_raw(this),
                result__.as_mut_ptr(),
            )
            .from_abi::<AnimationDelayBehavior>(result__)
        }
    }
    pub fn SetDelayBehavior(&self, value: AnimationDelayBehavior) -> ::windows::core::Result<()> {
        let this = &::windows::core::Interface::cast::<IKeyFrameAnimation3>(self)?;
        unsafe {
            (::windows::core::Vtable::vtable(this).SetDelayBehavior)(
                ::windows::core::Vtable::as_raw(this),
                value,
            )
            .ok()
        }
    }
    pub fn InsertKeyFrame(
        &self,
        normalizedprogresskey: f32,
        value: f32,
    ) -> ::windows::core::Result<()> {
        let this = self;
        unsafe {
            (::windows::core::Vtable::vtable(this).InsertKeyFrame)(
                ::windows::core::Vtable::as_raw(this),
                normalizedprogresskey,
                value,
            )
            .ok()
        }
    }
    pub fn InsertKeyFrameWithEasingFunction<'a, P0>(
        &self,
        normalizedprogresskey: f32,
        value: f32,
        easingfunction: P0,
    ) -> ::windows::core::Result<()>
    where
        P0: ::std::convert::Into<::windows::core::InParam<'a, CompositionEasingFunction>>,
    {
        let this = self;
        unsafe {
            (::windows::core::Vtable::vtable(this).InsertKeyFrameWithEasingFunction)(
                ::windows::core::Vtable::as_raw(this),
                normalizedprogresskey,
                value,
                easingfunction.into().abi(),
            )
            .ok()
        }
    }
}
impl ::core::clone::Clone for ScalarKeyFrameAnimation {
    fn clone(&self) -> Self {
        Self(self.0.clone())
    }
}
impl ::core::cmp::PartialEq for ScalarKeyFrameAnimation {
    fn eq(&self, other: &Self) -> bool {
        self.0 == other.0
    }
}
impl ::core::cmp::Eq for ScalarKeyFrameAnimation {}
impl ::core::fmt::Debug for ScalarKeyFrameAnimation {
    fn fmt(&self, f: &mut ::core::fmt::Formatter<'_>) -> ::core::fmt::Result {
        f.debug_tuple("ScalarKeyFrameAnimation").field(&self.0).finish()
    }
}
unsafe impl ::windows::core::RuntimeType for ScalarKeyFrameAnimation {
    const SIGNATURE : ::windows::core::ConstBuffer = ::windows::core::ConstBuffer::from_slice ( b"rc(Microsoft.UI.Composition.ScalarKeyFrameAnimation;{5a5f8abe-d129-5b25-8aff-8180fd9bfb22})" ) ;
    type DefaultType = ::core::option::Option<Self>;
    fn from_default(from: &Self::DefaultType) -> ::windows::core::Result<Self> {
        from.as_ref().cloned().ok_or(::windows::core::Error::OK)
    }
}
unsafe impl ::windows::core::Vtable for ScalarKeyFrameAnimation {
    type Vtable = IScalarKeyFrameAnimation_Vtbl;
}
unsafe impl ::windows::core::Interface for ScalarKeyFrameAnimation {
    const IID: ::windows::core::GUID =
        <IScalarKeyFrameAnimation as ::windows::core::Interface>::IID;
}
impl ::windows::core::RuntimeName for ScalarKeyFrameAnimation {
    const NAME: &'static str = "Microsoft.UI.Composition.ScalarKeyFrameAnimation";
}
::windows::core::interface_hierarchy!(
    ScalarKeyFrameAnimation,
    ::windows::core::IUnknown,
    ::windows::core::IInspectable
);
impl ::core::convert::TryFrom<ScalarKeyFrameAnimation> for IAnimationObject {
    type Error = ::windows::core::Error;
    fn try_from(value: ScalarKeyFrameAnimation) -> ::windows::core::Result<Self> {
        ::core::convert::TryFrom::try_from(&value)
    }
}
impl ::core::convert::TryFrom<&ScalarKeyFrameAnimation> for IAnimationObject {
    type Error = ::windows::core::Error;
    fn try_from(value: &ScalarKeyFrameAnimation) -> ::windows::core::Result<Self> {
        ::windows::core::Interface::cast(value)
    }
}
impl<'a> ::core::convert::TryFrom<&ScalarKeyFrameAnimation>
    for ::windows::core::InParam<'a, IAnimationObject>
{
    type Error = ::windows::core::Error;
    fn try_from(value: &ScalarKeyFrameAnimation) -> ::windows::core::Result<Self> {
        let item = ::std::convert::TryInto::try_into(value)?;
        Ok(::windows::core::InParam::owned(item))
    }
}
impl ::core::convert::TryFrom<ScalarKeyFrameAnimation> for ::windows::Foundation::IClosable {
    type Error = ::windows::core::Error;
    fn try_from(value: ScalarKeyFrameAnimation) -> ::windows::core::Result<Self> {
        ::core::convert::TryFrom::try_from(&value)
    }
}
impl ::core::convert::TryFrom<&ScalarKeyFrameAnimation> for ::windows::Foundation::IClosable {
    type Error = ::windows::core::Error;
    fn try_from(value: &ScalarKeyFrameAnimation) -> ::windows::core::Result<Self> {
        ::windows::core::Interface::cast(value)
    }
}
impl<'a> ::core::convert::TryFrom<&ScalarKeyFrameAnimation>
    for ::windows::core::InParam<'a, ::windows::Foundation::IClosable>
{
    type Error = ::windows::core::Error;
    fn try_from(value: &ScalarKeyFrameAnimation) -> ::windows::core::Result<Self> {
        let item = ::std::convert::TryInto::try_into(value)?;
        Ok(::windows::core::InParam::owned(item))
    }
}
impl ::core::convert::TryFrom<ScalarKeyFrameAnimation> for ICompositionAnimationBase {
    type Error = ::windows::core::Error;
    fn try_from(value: ScalarKeyFrameAnimation) -> ::windows::core::Result<Self> {
        ::core::convert::TryFrom::try_from(&value)
    }
}
impl ::core::convert::TryFrom<&ScalarKeyFrameAnimation> for ICompositionAnimationBase {
    type Error = ::windows::core::Error;
    fn try_from(value: &ScalarKeyFrameAnimation) -> ::windows::core::Result<Self> {
        ::windows::core::Interface::cast(value)
    }
}
impl<'a> ::core::convert::TryFrom<&ScalarKeyFrameAnimation>
    for ::windows::core::InParam<'a, ICompositionAnimationBase>
{
    type Error = ::windows::core::Error;
    fn try_from(value: &ScalarKeyFrameAnimation) -> ::windows::core::Result<Self> {
        let item = ::std::convert::TryInto::try_into(value)?;
        Ok(::windows::core::InParam::owned(item))
    }
}
impl ::core::convert::From<ScalarKeyFrameAnimation> for KeyFrameAnimation {
    fn from(value: ScalarKeyFrameAnimation) -> Self {
        ::core::convert::From::from(&value)
    }
}
impl ::core::convert::From<&ScalarKeyFrameAnimation> for KeyFrameAnimation {
    fn from(value: &ScalarKeyFrameAnimation) -> Self {
        ::windows::core::Interface::cast(value).unwrap()
    }
}
impl<'a> ::core::convert::From<&ScalarKeyFrameAnimation>
    for ::windows::core::InParam<'a, KeyFrameAnimation>
{
    fn from(value: &ScalarKeyFrameAnimation) -> Self {
        ::windows::core::InParam::owned(value.into())
    }
}
impl ::core::convert::From<ScalarKeyFrameAnimation> for CompositionAnimation {
    fn from(value: ScalarKeyFrameAnimation) -> Self {
        ::core::convert::From::from(&value)
    }
}
impl ::core::convert::From<&ScalarKeyFrameAnimation> for CompositionAnimation {
    fn from(value: &ScalarKeyFrameAnimation) -> Self {
        ::windows::core::Interface::cast(value).unwrap()
    }
}
impl<'a> ::core::convert::From<&ScalarKeyFrameAnimation>
    for ::windows::core::InParam<'a, CompositionAnimation>
{
    fn from(value: &ScalarKeyFrameAnimation) -> Self {
        ::windows::core::InParam::owned(value.into())
    }
}
impl ::core::convert::From<ScalarKeyFrameAnimation> for CompositionObject {
    fn from(value: ScalarKeyFrameAnimation) -> Self {
        ::core::convert::From::from(&value)
    }
}
impl ::core::convert::From<&ScalarKeyFrameAnimation> for CompositionObject {
    fn from(value: &ScalarKeyFrameAnimation) -> Self {
        ::windows::core::Interface::cast(value).unwrap()
    }
}
impl<'a> ::core::convert::From<&ScalarKeyFrameAnimation>
    for ::windows::core::InParam<'a, CompositionObject>
{
    fn from(value: &ScalarKeyFrameAnimation) -> Self {
        ::windows::core::InParam::owned(value.into())
    }
}
unsafe impl ::core::marker::Send for ScalarKeyFrameAnimation {}
unsafe impl ::core::marker::Sync for ScalarKeyFrameAnimation {}
#[doc = "*Required features: `\"UI_Composition\"`*"]
#[repr(transparent)]
pub struct ScalarNaturalMotionAnimation(::windows::core::IUnknown);
impl ScalarNaturalMotionAnimation {
    pub fn PopulatePropertyInfo(
        &self,
        propertyname: &::windows::core::HSTRING,
        propertyinfo: &AnimationPropertyInfo,
    ) -> ::windows::core::Result<()> {
        let this = &::windows::core::Interface::cast::<IAnimationObject>(self)?;
        unsafe {
            (::windows::core::Vtable::vtable(this).PopulatePropertyInfo)(
                ::windows::core::Vtable::as_raw(this),
                ::core::mem::transmute_copy(propertyname),
                ::core::mem::transmute_copy(propertyinfo),
            )
            .ok()
        }
    }
    pub fn Close(&self) -> ::windows::core::Result<()> {
        let this = &::windows::core::Interface::cast::<::windows::Foundation::IClosable>(self)?;
        unsafe {
            (::windows::core::Vtable::vtable(this).Close)(::windows::core::Vtable::as_raw(this))
                .ok()
        }
    }
    pub fn ClearAllParameters(&self) -> ::windows::core::Result<()> {
        let this = &::windows::core::Interface::cast::<ICompositionAnimation>(self)?;
        unsafe {
            (::windows::core::Vtable::vtable(this).ClearAllParameters)(
                ::windows::core::Vtable::as_raw(this),
            )
            .ok()
        }
    }
    pub fn ClearParameter(&self, key: &::windows::core::HSTRING) -> ::windows::core::Result<()> {
        let this = &::windows::core::Interface::cast::<ICompositionAnimation>(self)?;
        unsafe {
            (::windows::core::Vtable::vtable(this).ClearParameter)(
                ::windows::core::Vtable::as_raw(this),
                ::core::mem::transmute_copy(key),
            )
            .ok()
        }
    }
    pub fn SetColorParameter(
        &self,
        key: &::windows::core::HSTRING,
        value: ::windows::UI::Color,
    ) -> ::windows::core::Result<()> {
        let this = &::windows::core::Interface::cast::<ICompositionAnimation>(self)?;
        unsafe {
            (::windows::core::Vtable::vtable(this).SetColorParameter)(
                ::windows::core::Vtable::as_raw(this),
                ::core::mem::transmute_copy(key),
                value,
            )
            .ok()
        }
    }
    pub fn SetMatrix3x2Parameter(
        &self,
        key: &::windows::core::HSTRING,
        value: ::windows::Foundation::Numerics::Matrix3x2,
    ) -> ::windows::core::Result<()> {
        let this = &::windows::core::Interface::cast::<ICompositionAnimation>(self)?;
        unsafe {
            (::windows::core::Vtable::vtable(this).SetMatrix3x2Parameter)(
                ::windows::core::Vtable::as_raw(this),
                ::core::mem::transmute_copy(key),
                value,
            )
            .ok()
        }
    }
    pub fn SetMatrix4x4Parameter(
        &self,
        key: &::windows::core::HSTRING,
        value: ::windows::Foundation::Numerics::Matrix4x4,
    ) -> ::windows::core::Result<()> {
        let this = &::windows::core::Interface::cast::<ICompositionAnimation>(self)?;
        unsafe {
            (::windows::core::Vtable::vtable(this).SetMatrix4x4Parameter)(
                ::windows::core::Vtable::as_raw(this),
                ::core::mem::transmute_copy(key),
                value,
            )
            .ok()
        }
    }
    pub fn SetQuaternionParameter(
        &self,
        key: &::windows::core::HSTRING,
        value: ::windows::Foundation::Numerics::Quaternion,
    ) -> ::windows::core::Result<()> {
        let this = &::windows::core::Interface::cast::<ICompositionAnimation>(self)?;
        unsafe {
            (::windows::core::Vtable::vtable(this).SetQuaternionParameter)(
                ::windows::core::Vtable::as_raw(this),
                ::core::mem::transmute_copy(key),
                value,
            )
            .ok()
        }
    }
    pub fn SetReferenceParameter<'a, P0>(
        &self,
        key: &::windows::core::HSTRING,
        compositionobject: P0,
    ) -> ::windows::core::Result<()>
    where
        P0: ::std::convert::Into<::windows::core::InParam<'a, CompositionObject>>,
    {
        let this = &::windows::core::Interface::cast::<ICompositionAnimation>(self)?;
        unsafe {
            (::windows::core::Vtable::vtable(this).SetReferenceParameter)(
                ::windows::core::Vtable::as_raw(this),
                ::core::mem::transmute_copy(key),
                compositionobject.into().abi(),
            )
            .ok()
        }
    }
    pub fn SetScalarParameter(
        &self,
        key: &::windows::core::HSTRING,
        value: f32,
    ) -> ::windows::core::Result<()> {
        let this = &::windows::core::Interface::cast::<ICompositionAnimation>(self)?;
        unsafe {
            (::windows::core::Vtable::vtable(this).SetScalarParameter)(
                ::windows::core::Vtable::as_raw(this),
                ::core::mem::transmute_copy(key),
                value,
            )
            .ok()
        }
    }
    pub fn SetVector2Parameter(
        &self,
        key: &::windows::core::HSTRING,
        value: ::windows::Foundation::Numerics::Vector2,
    ) -> ::windows::core::Result<()> {
        let this = &::windows::core::Interface::cast::<ICompositionAnimation>(self)?;
        unsafe {
            (::windows::core::Vtable::vtable(this).SetVector2Parameter)(
                ::windows::core::Vtable::as_raw(this),
                ::core::mem::transmute_copy(key),
                value,
            )
            .ok()
        }
    }
    pub fn SetVector3Parameter(
        &self,
        key: &::windows::core::HSTRING,
        value: ::windows::Foundation::Numerics::Vector3,
    ) -> ::windows::core::Result<()> {
        let this = &::windows::core::Interface::cast::<ICompositionAnimation>(self)?;
        unsafe {
            (::windows::core::Vtable::vtable(this).SetVector3Parameter)(
                ::windows::core::Vtable::as_raw(this),
                ::core::mem::transmute_copy(key),
                value,
            )
            .ok()
        }
    }
    pub fn SetVector4Parameter(
        &self,
        key: &::windows::core::HSTRING,
        value: ::windows::Foundation::Numerics::Vector4,
    ) -> ::windows::core::Result<()> {
        let this = &::windows::core::Interface::cast::<ICompositionAnimation>(self)?;
        unsafe {
            (::windows::core::Vtable::vtable(this).SetVector4Parameter)(
                ::windows::core::Vtable::as_raw(this),
                ::core::mem::transmute_copy(key),
                value,
            )
            .ok()
        }
    }
    pub fn SetBooleanParameter(
        &self,
        key: &::windows::core::HSTRING,
        value: bool,
    ) -> ::windows::core::Result<()> {
        let this = &::windows::core::Interface::cast::<ICompositionAnimation2>(self)?;
        unsafe {
            (::windows::core::Vtable::vtable(this).SetBooleanParameter)(
                ::windows::core::Vtable::as_raw(this),
                ::core::mem::transmute_copy(key),
                value,
            )
            .ok()
        }
    }
    pub fn Target(&self) -> ::windows::core::Result<::windows::core::HSTRING> {
        let this = &::windows::core::Interface::cast::<ICompositionAnimation2>(self)?;
        unsafe {
            let mut result__ = ::core::mem::MaybeUninit::zeroed();
            (::windows::core::Vtable::vtable(this).Target)(
                ::windows::core::Vtable::as_raw(this),
                result__.as_mut_ptr(),
            )
            .from_abi::<::windows::core::HSTRING>(result__)
        }
    }
    pub fn SetTarget(&self, value: &::windows::core::HSTRING) -> ::windows::core::Result<()> {
        let this = &::windows::core::Interface::cast::<ICompositionAnimation2>(self)?;
        unsafe {
            (::windows::core::Vtable::vtable(this).SetTarget)(
                ::windows::core::Vtable::as_raw(this),
                ::core::mem::transmute_copy(value),
            )
            .ok()
        }
    }
    pub fn InitialValueExpressions(
        &self,
    ) -> ::windows::core::Result<InitialValueExpressionCollection> {
        let this = &::windows::core::Interface::cast::<ICompositionAnimation3>(self)?;
        unsafe {
            let mut result__ = ::core::mem::MaybeUninit::zeroed();
            (::windows::core::Vtable::vtable(this).InitialValueExpressions)(
                ::windows::core::Vtable::as_raw(this),
                result__.as_mut_ptr(),
            )
            .from_abi::<InitialValueExpressionCollection>(result__)
        }
    }
    pub fn SetExpressionReferenceParameter<'a, P0, E0>(
        &self,
        parametername: &::windows::core::HSTRING,
        source: P0,
    ) -> ::windows::core::Result<()>
    where
        P0: ::std::convert::TryInto<::windows::core::InParam<'a, IAnimationObject>, Error = E0>,
        E0: ::std::convert::Into<::windows::core::Error>,
    {
        let this = &::windows::core::Interface::cast::<ICompositionAnimation4>(self)?;
        unsafe {
            (::windows::core::Vtable::vtable(this).SetExpressionReferenceParameter)(
                ::windows::core::Vtable::as_raw(this),
                ::core::mem::transmute_copy(parametername),
                source.try_into().map_err(|e| e.into())?.abi(),
            )
            .ok()
        }
    }
    pub fn Compositor(&self) -> ::windows::core::Result<Compositor> {
        let this = &::windows::core::Interface::cast::<ICompositionObject>(self)?;
        unsafe {
            let mut result__ = ::core::mem::MaybeUninit::zeroed();
            (::windows::core::Vtable::vtable(this).Compositor)(
                ::windows::core::Vtable::as_raw(this),
                result__.as_mut_ptr(),
            )
            .from_abi::<Compositor>(result__)
        }
    }
    pub fn Properties(&self) -> ::windows::core::Result<CompositionPropertySet> {
        let this = &::windows::core::Interface::cast::<ICompositionObject>(self)?;
        unsafe {
            let mut result__ = ::core::mem::MaybeUninit::zeroed();
            (::windows::core::Vtable::vtable(this).Properties)(
                ::windows::core::Vtable::as_raw(this),
                result__.as_mut_ptr(),
            )
            .from_abi::<CompositionPropertySet>(result__)
        }
    }
    pub fn StartAnimation<'a, P0>(
        &self,
        propertyname: &::windows::core::HSTRING,
        animation: P0,
    ) -> ::windows::core::Result<()>
    where
        P0: ::std::convert::Into<::windows::core::InParam<'a, CompositionAnimation>>,
    {
        let this = &::windows::core::Interface::cast::<ICompositionObject>(self)?;
        unsafe {
            (::windows::core::Vtable::vtable(this).StartAnimation)(
                ::windows::core::Vtable::as_raw(this),
                ::core::mem::transmute_copy(propertyname),
                animation.into().abi(),
            )
            .ok()
        }
    }
    pub fn StopAnimation(
        &self,
        propertyname: &::windows::core::HSTRING,
    ) -> ::windows::core::Result<()> {
        let this = &::windows::core::Interface::cast::<ICompositionObject>(self)?;
        unsafe {
            (::windows::core::Vtable::vtable(this).StopAnimation)(
                ::windows::core::Vtable::as_raw(this),
                ::core::mem::transmute_copy(propertyname),
            )
            .ok()
        }
    }
    pub fn Comment(&self) -> ::windows::core::Result<::windows::core::HSTRING> {
        let this = &::windows::core::Interface::cast::<ICompositionObject2>(self)?;
        unsafe {
            let mut result__ = ::core::mem::MaybeUninit::zeroed();
            (::windows::core::Vtable::vtable(this).Comment)(
                ::windows::core::Vtable::as_raw(this),
                result__.as_mut_ptr(),
            )
            .from_abi::<::windows::core::HSTRING>(result__)
        }
    }
    pub fn SetComment(&self, value: &::windows::core::HSTRING) -> ::windows::core::Result<()> {
        let this = &::windows::core::Interface::cast::<ICompositionObject2>(self)?;
        unsafe {
            (::windows::core::Vtable::vtable(this).SetComment)(
                ::windows::core::Vtable::as_raw(this),
                ::core::mem::transmute_copy(value),
            )
            .ok()
        }
    }
    pub fn ImplicitAnimations(&self) -> ::windows::core::Result<ImplicitAnimationCollection> {
        let this = &::windows::core::Interface::cast::<ICompositionObject2>(self)?;
        unsafe {
            let mut result__ = ::core::mem::MaybeUninit::zeroed();
            (::windows::core::Vtable::vtable(this).ImplicitAnimations)(
                ::windows::core::Vtable::as_raw(this),
                result__.as_mut_ptr(),
            )
            .from_abi::<ImplicitAnimationCollection>(result__)
        }
    }
    pub fn SetImplicitAnimations(
        &self,
        value: &ImplicitAnimationCollection,
    ) -> ::windows::core::Result<()> {
        let this = &::windows::core::Interface::cast::<ICompositionObject2>(self)?;
        unsafe {
            (::windows::core::Vtable::vtable(this).SetImplicitAnimations)(
                ::windows::core::Vtable::as_raw(this),
                ::core::mem::transmute_copy(value),
            )
            .ok()
        }
    }
    pub fn StartAnimationGroup<'a, P0, E0>(&self, value: P0) -> ::windows::core::Result<()>
    where
        P0: ::std::convert::TryInto<
            ::windows::core::InParam<'a, ICompositionAnimationBase>,
            Error = E0,
        >,
        E0: ::std::convert::Into<::windows::core::Error>,
    {
        let this = &::windows::core::Interface::cast::<ICompositionObject2>(self)?;
        unsafe {
            (::windows::core::Vtable::vtable(this).StartAnimationGroup)(
                ::windows::core::Vtable::as_raw(this),
                value.try_into().map_err(|e| e.into())?.abi(),
            )
            .ok()
        }
    }
    pub fn StopAnimationGroup<'a, P0, E0>(&self, value: P0) -> ::windows::core::Result<()>
    where
        P0: ::std::convert::TryInto<
            ::windows::core::InParam<'a, ICompositionAnimationBase>,
            Error = E0,
        >,
        E0: ::std::convert::Into<::windows::core::Error>,
    {
        let this = &::windows::core::Interface::cast::<ICompositionObject2>(self)?;
        unsafe {
            (::windows::core::Vtable::vtable(this).StopAnimationGroup)(
                ::windows::core::Vtable::as_raw(this),
                value.try_into().map_err(|e| e.into())?.abi(),
            )
            .ok()
        }
    }
    #[doc = "*Required features: `\"UI_Dispatching\"`*"]
    #[cfg(feature = "UI_Dispatching")]
    pub fn DispatcherQueue(&self) -> ::windows::core::Result<super::Dispatching::DispatcherQueue> {
        let this = &::windows::core::Interface::cast::<ICompositionObject3>(self)?;
        unsafe {
            let mut result__ = ::core::mem::MaybeUninit::zeroed();
            (::windows::core::Vtable::vtable(this).DispatcherQueue)(
                ::windows::core::Vtable::as_raw(this),
                result__.as_mut_ptr(),
            )
            .from_abi::<super::Dispatching::DispatcherQueue>(result__)
        }
    }
    pub fn TryGetAnimationController(
        &self,
        propertyname: &::windows::core::HSTRING,
    ) -> ::windows::core::Result<AnimationController> {
        let this = &::windows::core::Interface::cast::<ICompositionObject4>(self)?;
        unsafe {
            let mut result__ = ::core::mem::MaybeUninit::zeroed();
            (::windows::core::Vtable::vtable(this).TryGetAnimationController)(
                ::windows::core::Vtable::as_raw(this),
                ::core::mem::transmute_copy(propertyname),
                result__.as_mut_ptr(),
            )
            .from_abi::<AnimationController>(result__)
        }
    }
    pub fn StartAnimationWithController<'a, P0>(
        &self,
        propertyname: &::windows::core::HSTRING,
        animation: P0,
        animationcontroller: &AnimationController,
    ) -> ::windows::core::Result<()>
    where
        P0: ::std::convert::Into<::windows::core::InParam<'a, CompositionAnimation>>,
    {
        let this = &::windows::core::Interface::cast::<ICompositionObject5>(self)?;
        unsafe {
            (::windows::core::Vtable::vtable(this).StartAnimationWithController)(
                ::windows::core::Vtable::as_raw(this),
                ::core::mem::transmute_copy(propertyname),
                animation.into().abi(),
                ::core::mem::transmute_copy(animationcontroller),
            )
            .ok()
        }
    }
    pub fn DelayBehavior(&self) -> ::windows::core::Result<AnimationDelayBehavior> {
        let this = &::windows::core::Interface::cast::<INaturalMotionAnimation>(self)?;
        unsafe {
            let mut result__ = ::core::mem::MaybeUninit::zeroed();
            (::windows::core::Vtable::vtable(this).DelayBehavior)(
                ::windows::core::Vtable::as_raw(this),
                result__.as_mut_ptr(),
            )
            .from_abi::<AnimationDelayBehavior>(result__)
        }
    }
    pub fn SetDelayBehavior(&self, value: AnimationDelayBehavior) -> ::windows::core::Result<()> {
        let this = &::windows::core::Interface::cast::<INaturalMotionAnimation>(self)?;
        unsafe {
            (::windows::core::Vtable::vtable(this).SetDelayBehavior)(
                ::windows::core::Vtable::as_raw(this),
                value,
            )
            .ok()
        }
    }
    pub fn DelayTime(&self) -> ::windows::core::Result<::windows::Foundation::TimeSpan> {
        let this = &::windows::core::Interface::cast::<INaturalMotionAnimation>(self)?;
        unsafe {
            let mut result__ = ::core::mem::MaybeUninit::zeroed();
            (::windows::core::Vtable::vtable(this).DelayTime)(
                ::windows::core::Vtable::as_raw(this),
                result__.as_mut_ptr(),
            )
            .from_abi::<::windows::Foundation::TimeSpan>(result__)
        }
    }
    pub fn SetDelayTime(
        &self,
        value: ::windows::Foundation::TimeSpan,
    ) -> ::windows::core::Result<()> {
        let this = &::windows::core::Interface::cast::<INaturalMotionAnimation>(self)?;
        unsafe {
            (::windows::core::Vtable::vtable(this).SetDelayTime)(
                ::windows::core::Vtable::as_raw(this),
                value,
            )
            .ok()
        }
    }
    pub fn StopBehavior(&self) -> ::windows::core::Result<AnimationStopBehavior> {
        let this = &::windows::core::Interface::cast::<INaturalMotionAnimation>(self)?;
        unsafe {
            let mut result__ = ::core::mem::MaybeUninit::zeroed();
            (::windows::core::Vtable::vtable(this).StopBehavior)(
                ::windows::core::Vtable::as_raw(this),
                result__.as_mut_ptr(),
            )
            .from_abi::<AnimationStopBehavior>(result__)
        }
    }
    pub fn SetStopBehavior(&self, value: AnimationStopBehavior) -> ::windows::core::Result<()> {
        let this = &::windows::core::Interface::cast::<INaturalMotionAnimation>(self)?;
        unsafe {
            (::windows::core::Vtable::vtable(this).SetStopBehavior)(
                ::windows::core::Vtable::as_raw(this),
                value,
            )
            .ok()
        }
    }
    pub fn FinalValue(&self) -> ::windows::core::Result<::windows::Foundation::IReference<f32>> {
        let this = self;
        unsafe {
            let mut result__ = ::core::mem::MaybeUninit::zeroed();
            (::windows::core::Vtable::vtable(this).FinalValue)(
                ::windows::core::Vtable::as_raw(this),
                result__.as_mut_ptr(),
            )
            .from_abi::<::windows::Foundation::IReference<f32>>(result__)
        }
    }
    pub fn SetFinalValue<'a, P0, E0>(&self, value: P0) -> ::windows::core::Result<()>
    where
        P0: ::std::convert::TryInto<
            ::windows::core::InParam<'a, ::windows::Foundation::IReference<f32>>,
            Error = E0,
        >,
        E0: ::std::convert::Into<::windows::core::Error>,
    {
        let this = self;
        unsafe {
            (::windows::core::Vtable::vtable(this).SetFinalValue)(
                ::windows::core::Vtable::as_raw(this),
                value.try_into().map_err(|e| e.into())?.abi(),
            )
            .ok()
        }
    }
    pub fn InitialValue(&self) -> ::windows::core::Result<::windows::Foundation::IReference<f32>> {
        let this = self;
        unsafe {
            let mut result__ = ::core::mem::MaybeUninit::zeroed();
            (::windows::core::Vtable::vtable(this).InitialValue)(
                ::windows::core::Vtable::as_raw(this),
                result__.as_mut_ptr(),
            )
            .from_abi::<::windows::Foundation::IReference<f32>>(result__)
        }
    }
    pub fn SetInitialValue<'a, P0, E0>(&self, value: P0) -> ::windows::core::Result<()>
    where
        P0: ::std::convert::TryInto<
            ::windows::core::InParam<'a, ::windows::Foundation::IReference<f32>>,
            Error = E0,
        >,
        E0: ::std::convert::Into<::windows::core::Error>,
    {
        let this = self;
        unsafe {
            (::windows::core::Vtable::vtable(this).SetInitialValue)(
                ::windows::core::Vtable::as_raw(this),
                value.try_into().map_err(|e| e.into())?.abi(),
            )
            .ok()
        }
    }
    pub fn InitialVelocity(&self) -> ::windows::core::Result<f32> {
        let this = self;
        unsafe {
            let mut result__ = ::core::mem::MaybeUninit::zeroed();
            (::windows::core::Vtable::vtable(this).InitialVelocity)(
                ::windows::core::Vtable::as_raw(this),
                result__.as_mut_ptr(),
            )
            .from_abi::<f32>(result__)
        }
    }
    pub fn SetInitialVelocity(&self, value: f32) -> ::windows::core::Result<()> {
        let this = self;
        unsafe {
            (::windows::core::Vtable::vtable(this).SetInitialVelocity)(
                ::windows::core::Vtable::as_raw(this),
                value,
            )
            .ok()
        }
    }
}
impl ::core::clone::Clone for ScalarNaturalMotionAnimation {
    fn clone(&self) -> Self {
        Self(self.0.clone())
    }
}
impl ::core::cmp::PartialEq for ScalarNaturalMotionAnimation {
    fn eq(&self, other: &Self) -> bool {
        self.0 == other.0
    }
}
impl ::core::cmp::Eq for ScalarNaturalMotionAnimation {}
impl ::core::fmt::Debug for ScalarNaturalMotionAnimation {
    fn fmt(&self, f: &mut ::core::fmt::Formatter<'_>) -> ::core::fmt::Result {
        f.debug_tuple("ScalarNaturalMotionAnimation").field(&self.0).finish()
    }
}
unsafe impl ::windows::core::RuntimeType for ScalarNaturalMotionAnimation {
    const SIGNATURE : ::windows::core::ConstBuffer = ::windows::core::ConstBuffer::from_slice ( b"rc(Microsoft.UI.Composition.ScalarNaturalMotionAnimation;{903224b0-2dbe-56eb-b9ea-33d2e3113181})" ) ;
    type DefaultType = ::core::option::Option<Self>;
    fn from_default(from: &Self::DefaultType) -> ::windows::core::Result<Self> {
        from.as_ref().cloned().ok_or(::windows::core::Error::OK)
    }
}
unsafe impl ::windows::core::Vtable for ScalarNaturalMotionAnimation {
    type Vtable = IScalarNaturalMotionAnimation_Vtbl;
}
unsafe impl ::windows::core::Interface for ScalarNaturalMotionAnimation {
    const IID: ::windows::core::GUID =
        <IScalarNaturalMotionAnimation as ::windows::core::Interface>::IID;
}
impl ::windows::core::RuntimeName for ScalarNaturalMotionAnimation {
    const NAME: &'static str = "Microsoft.UI.Composition.ScalarNaturalMotionAnimation";
}
::windows::core::interface_hierarchy!(
    ScalarNaturalMotionAnimation,
    ::windows::core::IUnknown,
    ::windows::core::IInspectable
);
impl ::core::convert::TryFrom<ScalarNaturalMotionAnimation> for IAnimationObject {
    type Error = ::windows::core::Error;
    fn try_from(value: ScalarNaturalMotionAnimation) -> ::windows::core::Result<Self> {
        ::core::convert::TryFrom::try_from(&value)
    }
}
impl ::core::convert::TryFrom<&ScalarNaturalMotionAnimation> for IAnimationObject {
    type Error = ::windows::core::Error;
    fn try_from(value: &ScalarNaturalMotionAnimation) -> ::windows::core::Result<Self> {
        ::windows::core::Interface::cast(value)
    }
}
impl<'a> ::core::convert::TryFrom<&ScalarNaturalMotionAnimation>
    for ::windows::core::InParam<'a, IAnimationObject>
{
    type Error = ::windows::core::Error;
    fn try_from(value: &ScalarNaturalMotionAnimation) -> ::windows::core::Result<Self> {
        let item = ::std::convert::TryInto::try_into(value)?;
        Ok(::windows::core::InParam::owned(item))
    }
}
impl ::core::convert::TryFrom<ScalarNaturalMotionAnimation> for ::windows::Foundation::IClosable {
    type Error = ::windows::core::Error;
    fn try_from(value: ScalarNaturalMotionAnimation) -> ::windows::core::Result<Self> {
        ::core::convert::TryFrom::try_from(&value)
    }
}
impl ::core::convert::TryFrom<&ScalarNaturalMotionAnimation> for ::windows::Foundation::IClosable {
    type Error = ::windows::core::Error;
    fn try_from(value: &ScalarNaturalMotionAnimation) -> ::windows::core::Result<Self> {
        ::windows::core::Interface::cast(value)
    }
}
impl<'a> ::core::convert::TryFrom<&ScalarNaturalMotionAnimation>
    for ::windows::core::InParam<'a, ::windows::Foundation::IClosable>
{
    type Error = ::windows::core::Error;
    fn try_from(value: &ScalarNaturalMotionAnimation) -> ::windows::core::Result<Self> {
        let item = ::std::convert::TryInto::try_into(value)?;
        Ok(::windows::core::InParam::owned(item))
    }
}
impl ::core::convert::TryFrom<ScalarNaturalMotionAnimation> for ICompositionAnimationBase {
    type Error = ::windows::core::Error;
    fn try_from(value: ScalarNaturalMotionAnimation) -> ::windows::core::Result<Self> {
        ::core::convert::TryFrom::try_from(&value)
    }
}
impl ::core::convert::TryFrom<&ScalarNaturalMotionAnimation> for ICompositionAnimationBase {
    type Error = ::windows::core::Error;
    fn try_from(value: &ScalarNaturalMotionAnimation) -> ::windows::core::Result<Self> {
        ::windows::core::Interface::cast(value)
    }
}
impl<'a> ::core::convert::TryFrom<&ScalarNaturalMotionAnimation>
    for ::windows::core::InParam<'a, ICompositionAnimationBase>
{
    type Error = ::windows::core::Error;
    fn try_from(value: &ScalarNaturalMotionAnimation) -> ::windows::core::Result<Self> {
        let item = ::std::convert::TryInto::try_into(value)?;
        Ok(::windows::core::InParam::owned(item))
    }
}
impl ::core::convert::From<ScalarNaturalMotionAnimation> for NaturalMotionAnimation {
    fn from(value: ScalarNaturalMotionAnimation) -> Self {
        ::core::convert::From::from(&value)
    }
}
impl ::core::convert::From<&ScalarNaturalMotionAnimation> for NaturalMotionAnimation {
    fn from(value: &ScalarNaturalMotionAnimation) -> Self {
        ::windows::core::Interface::cast(value).unwrap()
    }
}
impl<'a> ::core::convert::From<&ScalarNaturalMotionAnimation>
    for ::windows::core::InParam<'a, NaturalMotionAnimation>
{
    fn from(value: &ScalarNaturalMotionAnimation) -> Self {
        ::windows::core::InParam::owned(value.into())
    }
}
impl ::core::convert::From<ScalarNaturalMotionAnimation> for CompositionAnimation {
    fn from(value: ScalarNaturalMotionAnimation) -> Self {
        ::core::convert::From::from(&value)
    }
}
impl ::core::convert::From<&ScalarNaturalMotionAnimation> for CompositionAnimation {
    fn from(value: &ScalarNaturalMotionAnimation) -> Self {
        ::windows::core::Interface::cast(value).unwrap()
    }
}
impl<'a> ::core::convert::From<&ScalarNaturalMotionAnimation>
    for ::windows::core::InParam<'a, CompositionAnimation>
{
    fn from(value: &ScalarNaturalMotionAnimation) -> Self {
        ::windows::core::InParam::owned(value.into())
    }
}
impl ::core::convert::From<ScalarNaturalMotionAnimation> for CompositionObject {
    fn from(value: ScalarNaturalMotionAnimation) -> Self {
        ::core::convert::From::from(&value)
    }
}
impl ::core::convert::From<&ScalarNaturalMotionAnimation> for CompositionObject {
    fn from(value: &ScalarNaturalMotionAnimation) -> Self {
        ::windows::core::Interface::cast(value).unwrap()
    }
}
impl<'a> ::core::convert::From<&ScalarNaturalMotionAnimation>
    for ::windows::core::InParam<'a, CompositionObject>
{
    fn from(value: &ScalarNaturalMotionAnimation) -> Self {
        ::windows::core::InParam::owned(value.into())
    }
}
unsafe impl ::core::marker::Send for ScalarNaturalMotionAnimation {}
unsafe impl ::core::marker::Sync for ScalarNaturalMotionAnimation {}
#[doc = "*Required features: `\"UI_Composition\"`*"]
#[repr(transparent)]
pub struct ShapeVisual(::windows::core::IUnknown);
impl ShapeVisual {
    pub fn PopulatePropertyInfo(
        &self,
        propertyname: &::windows::core::HSTRING,
        propertyinfo: &AnimationPropertyInfo,
    ) -> ::windows::core::Result<()> {
        let this = &::windows::core::Interface::cast::<IAnimationObject>(self)?;
        unsafe {
            (::windows::core::Vtable::vtable(this).PopulatePropertyInfo)(
                ::windows::core::Vtable::as_raw(this),
                ::core::mem::transmute_copy(propertyname),
                ::core::mem::transmute_copy(propertyinfo),
            )
            .ok()
        }
    }
    pub fn Close(&self) -> ::windows::core::Result<()> {
        let this = &::windows::core::Interface::cast::<::windows::Foundation::IClosable>(self)?;
        unsafe {
            (::windows::core::Vtable::vtable(this).Close)(::windows::core::Vtable::as_raw(this))
                .ok()
        }
    }
    pub fn Compositor(&self) -> ::windows::core::Result<Compositor> {
        let this = &::windows::core::Interface::cast::<ICompositionObject>(self)?;
        unsafe {
            let mut result__ = ::core::mem::MaybeUninit::zeroed();
            (::windows::core::Vtable::vtable(this).Compositor)(
                ::windows::core::Vtable::as_raw(this),
                result__.as_mut_ptr(),
            )
            .from_abi::<Compositor>(result__)
        }
    }
    pub fn Properties(&self) -> ::windows::core::Result<CompositionPropertySet> {
        let this = &::windows::core::Interface::cast::<ICompositionObject>(self)?;
        unsafe {
            let mut result__ = ::core::mem::MaybeUninit::zeroed();
            (::windows::core::Vtable::vtable(this).Properties)(
                ::windows::core::Vtable::as_raw(this),
                result__.as_mut_ptr(),
            )
            .from_abi::<CompositionPropertySet>(result__)
        }
    }
    pub fn StartAnimation<'a, P0>(
        &self,
        propertyname: &::windows::core::HSTRING,
        animation: P0,
    ) -> ::windows::core::Result<()>
    where
        P0: ::std::convert::Into<::windows::core::InParam<'a, CompositionAnimation>>,
    {
        let this = &::windows::core::Interface::cast::<ICompositionObject>(self)?;
        unsafe {
            (::windows::core::Vtable::vtable(this).StartAnimation)(
                ::windows::core::Vtable::as_raw(this),
                ::core::mem::transmute_copy(propertyname),
                animation.into().abi(),
            )
            .ok()
        }
    }
    pub fn StopAnimation(
        &self,
        propertyname: &::windows::core::HSTRING,
    ) -> ::windows::core::Result<()> {
        let this = &::windows::core::Interface::cast::<ICompositionObject>(self)?;
        unsafe {
            (::windows::core::Vtable::vtable(this).StopAnimation)(
                ::windows::core::Vtable::as_raw(this),
                ::core::mem::transmute_copy(propertyname),
            )
            .ok()
        }
    }
    pub fn Comment(&self) -> ::windows::core::Result<::windows::core::HSTRING> {
        let this = &::windows::core::Interface::cast::<ICompositionObject2>(self)?;
        unsafe {
            let mut result__ = ::core::mem::MaybeUninit::zeroed();
            (::windows::core::Vtable::vtable(this).Comment)(
                ::windows::core::Vtable::as_raw(this),
                result__.as_mut_ptr(),
            )
            .from_abi::<::windows::core::HSTRING>(result__)
        }
    }
    pub fn SetComment(&self, value: &::windows::core::HSTRING) -> ::windows::core::Result<()> {
        let this = &::windows::core::Interface::cast::<ICompositionObject2>(self)?;
        unsafe {
            (::windows::core::Vtable::vtable(this).SetComment)(
                ::windows::core::Vtable::as_raw(this),
                ::core::mem::transmute_copy(value),
            )
            .ok()
        }
    }
    pub fn ImplicitAnimations(&self) -> ::windows::core::Result<ImplicitAnimationCollection> {
        let this = &::windows::core::Interface::cast::<ICompositionObject2>(self)?;
        unsafe {
            let mut result__ = ::core::mem::MaybeUninit::zeroed();
            (::windows::core::Vtable::vtable(this).ImplicitAnimations)(
                ::windows::core::Vtable::as_raw(this),
                result__.as_mut_ptr(),
            )
            .from_abi::<ImplicitAnimationCollection>(result__)
        }
    }
    pub fn SetImplicitAnimations(
        &self,
        value: &ImplicitAnimationCollection,
    ) -> ::windows::core::Result<()> {
        let this = &::windows::core::Interface::cast::<ICompositionObject2>(self)?;
        unsafe {
            (::windows::core::Vtable::vtable(this).SetImplicitAnimations)(
                ::windows::core::Vtable::as_raw(this),
                ::core::mem::transmute_copy(value),
            )
            .ok()
        }
    }
    pub fn StartAnimationGroup<'a, P0, E0>(&self, value: P0) -> ::windows::core::Result<()>
    where
        P0: ::std::convert::TryInto<
            ::windows::core::InParam<'a, ICompositionAnimationBase>,
            Error = E0,
        >,
        E0: ::std::convert::Into<::windows::core::Error>,
    {
        let this = &::windows::core::Interface::cast::<ICompositionObject2>(self)?;
        unsafe {
            (::windows::core::Vtable::vtable(this).StartAnimationGroup)(
                ::windows::core::Vtable::as_raw(this),
                value.try_into().map_err(|e| e.into())?.abi(),
            )
            .ok()
        }
    }
    pub fn StopAnimationGroup<'a, P0, E0>(&self, value: P0) -> ::windows::core::Result<()>
    where
        P0: ::std::convert::TryInto<
            ::windows::core::InParam<'a, ICompositionAnimationBase>,
            Error = E0,
        >,
        E0: ::std::convert::Into<::windows::core::Error>,
    {
        let this = &::windows::core::Interface::cast::<ICompositionObject2>(self)?;
        unsafe {
            (::windows::core::Vtable::vtable(this).StopAnimationGroup)(
                ::windows::core::Vtable::as_raw(this),
                value.try_into().map_err(|e| e.into())?.abi(),
            )
            .ok()
        }
    }
    #[doc = "*Required features: `\"UI_Dispatching\"`*"]
    #[cfg(feature = "UI_Dispatching")]
    pub fn DispatcherQueue(&self) -> ::windows::core::Result<super::Dispatching::DispatcherQueue> {
        let this = &::windows::core::Interface::cast::<ICompositionObject3>(self)?;
        unsafe {
            let mut result__ = ::core::mem::MaybeUninit::zeroed();
            (::windows::core::Vtable::vtable(this).DispatcherQueue)(
                ::windows::core::Vtable::as_raw(this),
                result__.as_mut_ptr(),
            )
            .from_abi::<super::Dispatching::DispatcherQueue>(result__)
        }
    }
    pub fn TryGetAnimationController(
        &self,
        propertyname: &::windows::core::HSTRING,
    ) -> ::windows::core::Result<AnimationController> {
        let this = &::windows::core::Interface::cast::<ICompositionObject4>(self)?;
        unsafe {
            let mut result__ = ::core::mem::MaybeUninit::zeroed();
            (::windows::core::Vtable::vtable(this).TryGetAnimationController)(
                ::windows::core::Vtable::as_raw(this),
                ::core::mem::transmute_copy(propertyname),
                result__.as_mut_ptr(),
            )
            .from_abi::<AnimationController>(result__)
        }
    }
    pub fn StartAnimationWithController<'a, P0>(
        &self,
        propertyname: &::windows::core::HSTRING,
        animation: P0,
        animationcontroller: &AnimationController,
    ) -> ::windows::core::Result<()>
    where
        P0: ::std::convert::Into<::windows::core::InParam<'a, CompositionAnimation>>,
    {
        let this = &::windows::core::Interface::cast::<ICompositionObject5>(self)?;
        unsafe {
            (::windows::core::Vtable::vtable(this).StartAnimationWithController)(
                ::windows::core::Vtable::as_raw(this),
                ::core::mem::transmute_copy(propertyname),
                animation.into().abi(),
                ::core::mem::transmute_copy(animationcontroller),
            )
            .ok()
        }
    }
    pub fn Children(&self) -> ::windows::core::Result<VisualCollection> {
        let this = &::windows::core::Interface::cast::<IContainerVisual>(self)?;
        unsafe {
            let mut result__ = ::core::mem::MaybeUninit::zeroed();
            (::windows::core::Vtable::vtable(this).Children)(
                ::windows::core::Vtable::as_raw(this),
                result__.as_mut_ptr(),
            )
            .from_abi::<VisualCollection>(result__)
        }
    }
    pub fn Shapes(&self) -> ::windows::core::Result<CompositionShapeCollection> {
        let this = self;
        unsafe {
            let mut result__ = ::core::mem::MaybeUninit::zeroed();
            (::windows::core::Vtable::vtable(this).Shapes)(
                ::windows::core::Vtable::as_raw(this),
                result__.as_mut_ptr(),
            )
            .from_abi::<CompositionShapeCollection>(result__)
        }
    }
    pub fn ViewBox(&self) -> ::windows::core::Result<CompositionViewBox> {
        let this = self;
        unsafe {
            let mut result__ = ::core::mem::MaybeUninit::zeroed();
            (::windows::core::Vtable::vtable(this).ViewBox)(
                ::windows::core::Vtable::as_raw(this),
                result__.as_mut_ptr(),
            )
            .from_abi::<CompositionViewBox>(result__)
        }
    }
    pub fn SetViewBox(&self, value: &CompositionViewBox) -> ::windows::core::Result<()> {
        let this = self;
        unsafe {
            (::windows::core::Vtable::vtable(this).SetViewBox)(
                ::windows::core::Vtable::as_raw(this),
                ::core::mem::transmute_copy(value),
            )
            .ok()
        }
    }
    pub fn AnchorPoint(&self) -> ::windows::core::Result<::windows::Foundation::Numerics::Vector2> {
        let this = &::windows::core::Interface::cast::<IVisual>(self)?;
        unsafe {
            let mut result__ = ::core::mem::MaybeUninit::zeroed();
            (::windows::core::Vtable::vtable(this).AnchorPoint)(
                ::windows::core::Vtable::as_raw(this),
                result__.as_mut_ptr(),
            )
            .from_abi::<::windows::Foundation::Numerics::Vector2>(result__)
        }
    }
    pub fn SetAnchorPoint(
        &self,
        value: ::windows::Foundation::Numerics::Vector2,
    ) -> ::windows::core::Result<()> {
        let this = &::windows::core::Interface::cast::<IVisual>(self)?;
        unsafe {
            (::windows::core::Vtable::vtable(this).SetAnchorPoint)(
                ::windows::core::Vtable::as_raw(this),
                value,
            )
            .ok()
        }
    }
    pub fn BackfaceVisibility(&self) -> ::windows::core::Result<CompositionBackfaceVisibility> {
        let this = &::windows::core::Interface::cast::<IVisual>(self)?;
        unsafe {
            let mut result__ = ::core::mem::MaybeUninit::zeroed();
            (::windows::core::Vtable::vtable(this).BackfaceVisibility)(
                ::windows::core::Vtable::as_raw(this),
                result__.as_mut_ptr(),
            )
            .from_abi::<CompositionBackfaceVisibility>(result__)
        }
    }
    pub fn SetBackfaceVisibility(
        &self,
        value: CompositionBackfaceVisibility,
    ) -> ::windows::core::Result<()> {
        let this = &::windows::core::Interface::cast::<IVisual>(self)?;
        unsafe {
            (::windows::core::Vtable::vtable(this).SetBackfaceVisibility)(
                ::windows::core::Vtable::as_raw(this),
                value,
            )
            .ok()
        }
    }
    pub fn BorderMode(&self) -> ::windows::core::Result<CompositionBorderMode> {
        let this = &::windows::core::Interface::cast::<IVisual>(self)?;
        unsafe {
            let mut result__ = ::core::mem::MaybeUninit::zeroed();
            (::windows::core::Vtable::vtable(this).BorderMode)(
                ::windows::core::Vtable::as_raw(this),
                result__.as_mut_ptr(),
            )
            .from_abi::<CompositionBorderMode>(result__)
        }
    }
    pub fn SetBorderMode(&self, value: CompositionBorderMode) -> ::windows::core::Result<()> {
        let this = &::windows::core::Interface::cast::<IVisual>(self)?;
        unsafe {
            (::windows::core::Vtable::vtable(this).SetBorderMode)(
                ::windows::core::Vtable::as_raw(this),
                value,
            )
            .ok()
        }
    }
    pub fn CenterPoint(&self) -> ::windows::core::Result<::windows::Foundation::Numerics::Vector3> {
        let this = &::windows::core::Interface::cast::<IVisual>(self)?;
        unsafe {
            let mut result__ = ::core::mem::MaybeUninit::zeroed();
            (::windows::core::Vtable::vtable(this).CenterPoint)(
                ::windows::core::Vtable::as_raw(this),
                result__.as_mut_ptr(),
            )
            .from_abi::<::windows::Foundation::Numerics::Vector3>(result__)
        }
    }
    pub fn SetCenterPoint(
        &self,
        value: ::windows::Foundation::Numerics::Vector3,
    ) -> ::windows::core::Result<()> {
        let this = &::windows::core::Interface::cast::<IVisual>(self)?;
        unsafe {
            (::windows::core::Vtable::vtable(this).SetCenterPoint)(
                ::windows::core::Vtable::as_raw(this),
                value,
            )
            .ok()
        }
    }
    pub fn Clip(&self) -> ::windows::core::Result<CompositionClip> {
        let this = &::windows::core::Interface::cast::<IVisual>(self)?;
        unsafe {
            let mut result__ = ::core::mem::MaybeUninit::zeroed();
            (::windows::core::Vtable::vtable(this).Clip)(
                ::windows::core::Vtable::as_raw(this),
                result__.as_mut_ptr(),
            )
            .from_abi::<CompositionClip>(result__)
        }
    }
    pub fn SetClip<'a, P0>(&self, value: P0) -> ::windows::core::Result<()>
    where
        P0: ::std::convert::Into<::windows::core::InParam<'a, CompositionClip>>,
    {
        let this = &::windows::core::Interface::cast::<IVisual>(self)?;
        unsafe {
            (::windows::core::Vtable::vtable(this).SetClip)(
                ::windows::core::Vtable::as_raw(this),
                value.into().abi(),
            )
            .ok()
        }
    }
    pub fn CompositeMode(&self) -> ::windows::core::Result<CompositionCompositeMode> {
        let this = &::windows::core::Interface::cast::<IVisual>(self)?;
        unsafe {
            let mut result__ = ::core::mem::MaybeUninit::zeroed();
            (::windows::core::Vtable::vtable(this).CompositeMode)(
                ::windows::core::Vtable::as_raw(this),
                result__.as_mut_ptr(),
            )
            .from_abi::<CompositionCompositeMode>(result__)
        }
    }
    pub fn SetCompositeMode(&self, value: CompositionCompositeMode) -> ::windows::core::Result<()> {
        let this = &::windows::core::Interface::cast::<IVisual>(self)?;
        unsafe {
            (::windows::core::Vtable::vtable(this).SetCompositeMode)(
                ::windows::core::Vtable::as_raw(this),
                value,
            )
            .ok()
        }
    }
    pub fn IsVisible(&self) -> ::windows::core::Result<bool> {
        let this = &::windows::core::Interface::cast::<IVisual>(self)?;
        unsafe {
            let mut result__ = ::core::mem::MaybeUninit::zeroed();
            (::windows::core::Vtable::vtable(this).IsVisible)(
                ::windows::core::Vtable::as_raw(this),
                result__.as_mut_ptr(),
            )
            .from_abi::<bool>(result__)
        }
    }
    pub fn SetIsVisible(&self, value: bool) -> ::windows::core::Result<()> {
        let this = &::windows::core::Interface::cast::<IVisual>(self)?;
        unsafe {
            (::windows::core::Vtable::vtable(this).SetIsVisible)(
                ::windows::core::Vtable::as_raw(this),
                value,
            )
            .ok()
        }
    }
    pub fn Offset(&self) -> ::windows::core::Result<::windows::Foundation::Numerics::Vector3> {
        let this = &::windows::core::Interface::cast::<IVisual>(self)?;
        unsafe {
            let mut result__ = ::core::mem::MaybeUninit::zeroed();
            (::windows::core::Vtable::vtable(this).Offset)(
                ::windows::core::Vtable::as_raw(this),
                result__.as_mut_ptr(),
            )
            .from_abi::<::windows::Foundation::Numerics::Vector3>(result__)
        }
    }
    pub fn SetOffset(
        &self,
        value: ::windows::Foundation::Numerics::Vector3,
    ) -> ::windows::core::Result<()> {
        let this = &::windows::core::Interface::cast::<IVisual>(self)?;
        unsafe {
            (::windows::core::Vtable::vtable(this).SetOffset)(
                ::windows::core::Vtable::as_raw(this),
                value,
            )
            .ok()
        }
    }
    pub fn Opacity(&self) -> ::windows::core::Result<f32> {
        let this = &::windows::core::Interface::cast::<IVisual>(self)?;
        unsafe {
            let mut result__ = ::core::mem::MaybeUninit::zeroed();
            (::windows::core::Vtable::vtable(this).Opacity)(
                ::windows::core::Vtable::as_raw(this),
                result__.as_mut_ptr(),
            )
            .from_abi::<f32>(result__)
        }
    }
    pub fn SetOpacity(&self, value: f32) -> ::windows::core::Result<()> {
        let this = &::windows::core::Interface::cast::<IVisual>(self)?;
        unsafe {
            (::windows::core::Vtable::vtable(this).SetOpacity)(
                ::windows::core::Vtable::as_raw(this),
                value,
            )
            .ok()
        }
    }
    pub fn Orientation(
        &self,
    ) -> ::windows::core::Result<::windows::Foundation::Numerics::Quaternion> {
        let this = &::windows::core::Interface::cast::<IVisual>(self)?;
        unsafe {
            let mut result__ = ::core::mem::MaybeUninit::zeroed();
            (::windows::core::Vtable::vtable(this).Orientation)(
                ::windows::core::Vtable::as_raw(this),
                result__.as_mut_ptr(),
            )
            .from_abi::<::windows::Foundation::Numerics::Quaternion>(result__)
        }
    }
    pub fn SetOrientation(
        &self,
        value: ::windows::Foundation::Numerics::Quaternion,
    ) -> ::windows::core::Result<()> {
        let this = &::windows::core::Interface::cast::<IVisual>(self)?;
        unsafe {
            (::windows::core::Vtable::vtable(this).SetOrientation)(
                ::windows::core::Vtable::as_raw(this),
                value,
            )
            .ok()
        }
    }
    pub fn Parent(&self) -> ::windows::core::Result<ContainerVisual> {
        let this = &::windows::core::Interface::cast::<IVisual>(self)?;
        unsafe {
            let mut result__ = ::core::mem::MaybeUninit::zeroed();
            (::windows::core::Vtable::vtable(this).Parent)(
                ::windows::core::Vtable::as_raw(this),
                result__.as_mut_ptr(),
            )
            .from_abi::<ContainerVisual>(result__)
        }
    }
    pub fn RotationAngle(&self) -> ::windows::core::Result<f32> {
        let this = &::windows::core::Interface::cast::<IVisual>(self)?;
        unsafe {
            let mut result__ = ::core::mem::MaybeUninit::zeroed();
            (::windows::core::Vtable::vtable(this).RotationAngle)(
                ::windows::core::Vtable::as_raw(this),
                result__.as_mut_ptr(),
            )
            .from_abi::<f32>(result__)
        }
    }
    pub fn SetRotationAngle(&self, value: f32) -> ::windows::core::Result<()> {
        let this = &::windows::core::Interface::cast::<IVisual>(self)?;
        unsafe {
            (::windows::core::Vtable::vtable(this).SetRotationAngle)(
                ::windows::core::Vtable::as_raw(this),
                value,
            )
            .ok()
        }
    }
    pub fn RotationAngleInDegrees(&self) -> ::windows::core::Result<f32> {
        let this = &::windows::core::Interface::cast::<IVisual>(self)?;
        unsafe {
            let mut result__ = ::core::mem::MaybeUninit::zeroed();
            (::windows::core::Vtable::vtable(this).RotationAngleInDegrees)(
                ::windows::core::Vtable::as_raw(this),
                result__.as_mut_ptr(),
            )
            .from_abi::<f32>(result__)
        }
    }
    pub fn SetRotationAngleInDegrees(&self, value: f32) -> ::windows::core::Result<()> {
        let this = &::windows::core::Interface::cast::<IVisual>(self)?;
        unsafe {
            (::windows::core::Vtable::vtable(this).SetRotationAngleInDegrees)(
                ::windows::core::Vtable::as_raw(this),
                value,
            )
            .ok()
        }
    }
    pub fn RotationAxis(
        &self,
    ) -> ::windows::core::Result<::windows::Foundation::Numerics::Vector3> {
        let this = &::windows::core::Interface::cast::<IVisual>(self)?;
        unsafe {
            let mut result__ = ::core::mem::MaybeUninit::zeroed();
            (::windows::core::Vtable::vtable(this).RotationAxis)(
                ::windows::core::Vtable::as_raw(this),
                result__.as_mut_ptr(),
            )
            .from_abi::<::windows::Foundation::Numerics::Vector3>(result__)
        }
    }
    pub fn SetRotationAxis(
        &self,
        value: ::windows::Foundation::Numerics::Vector3,
    ) -> ::windows::core::Result<()> {
        let this = &::windows::core::Interface::cast::<IVisual>(self)?;
        unsafe {
            (::windows::core::Vtable::vtable(this).SetRotationAxis)(
                ::windows::core::Vtable::as_raw(this),
                value,
            )
            .ok()
        }
    }
    pub fn Scale(&self) -> ::windows::core::Result<::windows::Foundation::Numerics::Vector3> {
        let this = &::windows::core::Interface::cast::<IVisual>(self)?;
        unsafe {
            let mut result__ = ::core::mem::MaybeUninit::zeroed();
            (::windows::core::Vtable::vtable(this).Scale)(
                ::windows::core::Vtable::as_raw(this),
                result__.as_mut_ptr(),
            )
            .from_abi::<::windows::Foundation::Numerics::Vector3>(result__)
        }
    }
    pub fn SetScale(
        &self,
        value: ::windows::Foundation::Numerics::Vector3,
    ) -> ::windows::core::Result<()> {
        let this = &::windows::core::Interface::cast::<IVisual>(self)?;
        unsafe {
            (::windows::core::Vtable::vtable(this).SetScale)(
                ::windows::core::Vtable::as_raw(this),
                value,
            )
            .ok()
        }
    }
    pub fn Size(&self) -> ::windows::core::Result<::windows::Foundation::Numerics::Vector2> {
        let this = &::windows::core::Interface::cast::<IVisual>(self)?;
        unsafe {
            let mut result__ = ::core::mem::MaybeUninit::zeroed();
            (::windows::core::Vtable::vtable(this).Size)(
                ::windows::core::Vtable::as_raw(this),
                result__.as_mut_ptr(),
            )
            .from_abi::<::windows::Foundation::Numerics::Vector2>(result__)
        }
    }
    pub fn SetSize(
        &self,
        value: ::windows::Foundation::Numerics::Vector2,
    ) -> ::windows::core::Result<()> {
        let this = &::windows::core::Interface::cast::<IVisual>(self)?;
        unsafe {
            (::windows::core::Vtable::vtable(this).SetSize)(
                ::windows::core::Vtable::as_raw(this),
                value,
            )
            .ok()
        }
    }
    pub fn TransformMatrix(
        &self,
    ) -> ::windows::core::Result<::windows::Foundation::Numerics::Matrix4x4> {
        let this = &::windows::core::Interface::cast::<IVisual>(self)?;
        unsafe {
            let mut result__ = ::core::mem::MaybeUninit::zeroed();
            (::windows::core::Vtable::vtable(this).TransformMatrix)(
                ::windows::core::Vtable::as_raw(this),
                result__.as_mut_ptr(),
            )
            .from_abi::<::windows::Foundation::Numerics::Matrix4x4>(result__)
        }
    }
    pub fn SetTransformMatrix(
        &self,
        value: ::windows::Foundation::Numerics::Matrix4x4,
    ) -> ::windows::core::Result<()> {
        let this = &::windows::core::Interface::cast::<IVisual>(self)?;
        unsafe {
            (::windows::core::Vtable::vtable(this).SetTransformMatrix)(
                ::windows::core::Vtable::as_raw(this),
                value,
            )
            .ok()
        }
    }
    pub fn ParentForTransform(&self) -> ::windows::core::Result<Visual> {
        let this = &::windows::core::Interface::cast::<IVisual2>(self)?;
        unsafe {
            let mut result__ = ::core::mem::MaybeUninit::zeroed();
            (::windows::core::Vtable::vtable(this).ParentForTransform)(
                ::windows::core::Vtable::as_raw(this),
                result__.as_mut_ptr(),
            )
            .from_abi::<Visual>(result__)
        }
    }
    pub fn SetParentForTransform<'a, P0>(&self, value: P0) -> ::windows::core::Result<()>
    where
        P0: ::std::convert::Into<::windows::core::InParam<'a, Visual>>,
    {
        let this = &::windows::core::Interface::cast::<IVisual2>(self)?;
        unsafe {
            (::windows::core::Vtable::vtable(this).SetParentForTransform)(
                ::windows::core::Vtable::as_raw(this),
                value.into().abi(),
            )
            .ok()
        }
    }
    pub fn RelativeOffsetAdjustment(
        &self,
    ) -> ::windows::core::Result<::windows::Foundation::Numerics::Vector3> {
        let this = &::windows::core::Interface::cast::<IVisual2>(self)?;
        unsafe {
            let mut result__ = ::core::mem::MaybeUninit::zeroed();
            (::windows::core::Vtable::vtable(this).RelativeOffsetAdjustment)(
                ::windows::core::Vtable::as_raw(this),
                result__.as_mut_ptr(),
            )
            .from_abi::<::windows::Foundation::Numerics::Vector3>(result__)
        }
    }
    pub fn SetRelativeOffsetAdjustment(
        &self,
        value: ::windows::Foundation::Numerics::Vector3,
    ) -> ::windows::core::Result<()> {
        let this = &::windows::core::Interface::cast::<IVisual2>(self)?;
        unsafe {
            (::windows::core::Vtable::vtable(this).SetRelativeOffsetAdjustment)(
                ::windows::core::Vtable::as_raw(this),
                value,
            )
            .ok()
        }
    }
    pub fn RelativeSizeAdjustment(
        &self,
    ) -> ::windows::core::Result<::windows::Foundation::Numerics::Vector2> {
        let this = &::windows::core::Interface::cast::<IVisual2>(self)?;
        unsafe {
            let mut result__ = ::core::mem::MaybeUninit::zeroed();
            (::windows::core::Vtable::vtable(this).RelativeSizeAdjustment)(
                ::windows::core::Vtable::as_raw(this),
                result__.as_mut_ptr(),
            )
            .from_abi::<::windows::Foundation::Numerics::Vector2>(result__)
        }
    }
    pub fn SetRelativeSizeAdjustment(
        &self,
        value: ::windows::Foundation::Numerics::Vector2,
    ) -> ::windows::core::Result<()> {
        let this = &::windows::core::Interface::cast::<IVisual2>(self)?;
        unsafe {
            (::windows::core::Vtable::vtable(this).SetRelativeSizeAdjustment)(
                ::windows::core::Vtable::as_raw(this),
                value,
            )
            .ok()
        }
    }
    pub fn IsHitTestVisible(&self) -> ::windows::core::Result<bool> {
        let this = &::windows::core::Interface::cast::<IVisual3>(self)?;
        unsafe {
            let mut result__ = ::core::mem::MaybeUninit::zeroed();
            (::windows::core::Vtable::vtable(this).IsHitTestVisible)(
                ::windows::core::Vtable::as_raw(this),
                result__.as_mut_ptr(),
            )
            .from_abi::<bool>(result__)
        }
    }
    pub fn SetIsHitTestVisible(&self, value: bool) -> ::windows::core::Result<()> {
        let this = &::windows::core::Interface::cast::<IVisual3>(self)?;
        unsafe {
            (::windows::core::Vtable::vtable(this).SetIsHitTestVisible)(
                ::windows::core::Vtable::as_raw(this),
                value,
            )
            .ok()
        }
    }
    pub fn IsPixelSnappingEnabled(&self) -> ::windows::core::Result<bool> {
        let this = &::windows::core::Interface::cast::<IVisual4>(self)?;
        unsafe {
            let mut result__ = ::core::mem::MaybeUninit::zeroed();
            (::windows::core::Vtable::vtable(this).IsPixelSnappingEnabled)(
                ::windows::core::Vtable::as_raw(this),
                result__.as_mut_ptr(),
            )
            .from_abi::<bool>(result__)
        }
    }
    pub fn SetIsPixelSnappingEnabled(&self, value: bool) -> ::windows::core::Result<()> {
        let this = &::windows::core::Interface::cast::<IVisual4>(self)?;
        unsafe {
            (::windows::core::Vtable::vtable(this).SetIsPixelSnappingEnabled)(
                ::windows::core::Vtable::as_raw(this),
                value,
            )
            .ok()
        }
    }
}
impl ::core::clone::Clone for ShapeVisual {
    fn clone(&self) -> Self {
        Self(self.0.clone())
    }
}
impl ::core::cmp::PartialEq for ShapeVisual {
    fn eq(&self, other: &Self) -> bool {
        self.0 == other.0
    }
}
impl ::core::cmp::Eq for ShapeVisual {}
impl ::core::fmt::Debug for ShapeVisual {
    fn fmt(&self, f: &mut ::core::fmt::Formatter<'_>) -> ::core::fmt::Result {
        f.debug_tuple("ShapeVisual").field(&self.0).finish()
    }
}
unsafe impl ::windows::core::RuntimeType for ShapeVisual {
    const SIGNATURE: ::windows::core::ConstBuffer = ::windows::core::ConstBuffer::from_slice(
        b"rc(Microsoft.UI.Composition.ShapeVisual;{a911c80b-a5a5-5aca-b8ff-c43f08f06143})",
    );
    type DefaultType = ::core::option::Option<Self>;
    fn from_default(from: &Self::DefaultType) -> ::windows::core::Result<Self> {
        from.as_ref().cloned().ok_or(::windows::core::Error::OK)
    }
}
unsafe impl ::windows::core::Vtable for ShapeVisual {
    type Vtable = IShapeVisual_Vtbl;
}
unsafe impl ::windows::core::Interface for ShapeVisual {
    const IID: ::windows::core::GUID = <IShapeVisual as ::windows::core::Interface>::IID;
}
impl ::windows::core::RuntimeName for ShapeVisual {
    const NAME: &'static str = "Microsoft.UI.Composition.ShapeVisual";
}
::windows::core::interface_hierarchy!(
    ShapeVisual,
    ::windows::core::IUnknown,
    ::windows::core::IInspectable
);
impl ::core::convert::TryFrom<ShapeVisual> for IAnimationObject {
    type Error = ::windows::core::Error;
    fn try_from(value: ShapeVisual) -> ::windows::core::Result<Self> {
        ::core::convert::TryFrom::try_from(&value)
    }
}
impl ::core::convert::TryFrom<&ShapeVisual> for IAnimationObject {
    type Error = ::windows::core::Error;
    fn try_from(value: &ShapeVisual) -> ::windows::core::Result<Self> {
        ::windows::core::Interface::cast(value)
    }
}
impl<'a> ::core::convert::TryFrom<&ShapeVisual> for ::windows::core::InParam<'a, IAnimationObject> {
    type Error = ::windows::core::Error;
    fn try_from(value: &ShapeVisual) -> ::windows::core::Result<Self> {
        let item = ::std::convert::TryInto::try_into(value)?;
        Ok(::windows::core::InParam::owned(item))
    }
}
impl ::core::convert::TryFrom<ShapeVisual> for ::windows::Foundation::IClosable {
    type Error = ::windows::core::Error;
    fn try_from(value: ShapeVisual) -> ::windows::core::Result<Self> {
        ::core::convert::TryFrom::try_from(&value)
    }
}
impl ::core::convert::TryFrom<&ShapeVisual> for ::windows::Foundation::IClosable {
    type Error = ::windows::core::Error;
    fn try_from(value: &ShapeVisual) -> ::windows::core::Result<Self> {
        ::windows::core::Interface::cast(value)
    }
}
impl<'a> ::core::convert::TryFrom<&ShapeVisual>
    for ::windows::core::InParam<'a, ::windows::Foundation::IClosable>
{
    type Error = ::windows::core::Error;
    fn try_from(value: &ShapeVisual) -> ::windows::core::Result<Self> {
        let item = ::std::convert::TryInto::try_into(value)?;
        Ok(::windows::core::InParam::owned(item))
    }
}
impl ::core::convert::From<ShapeVisual> for ContainerVisual {
    fn from(value: ShapeVisual) -> Self {
        ::core::convert::From::from(&value)
    }
}
impl ::core::convert::From<&ShapeVisual> for ContainerVisual {
    fn from(value: &ShapeVisual) -> Self {
        ::windows::core::Interface::cast(value).unwrap()
    }
}
impl<'a> ::core::convert::From<&ShapeVisual> for ::windows::core::InParam<'a, ContainerVisual> {
    fn from(value: &ShapeVisual) -> Self {
        ::windows::core::InParam::owned(value.into())
    }
}
impl ::core::convert::From<ShapeVisual> for Visual {
    fn from(value: ShapeVisual) -> Self {
        ::core::convert::From::from(&value)
    }
}
impl ::core::convert::From<&ShapeVisual> for Visual {
    fn from(value: &ShapeVisual) -> Self {
        ::windows::core::Interface::cast(value).unwrap()
    }
}
impl<'a> ::core::convert::From<&ShapeVisual> for ::windows::core::InParam<'a, Visual> {
    fn from(value: &ShapeVisual) -> Self {
        ::windows::core::InParam::owned(value.into())
    }
}
impl ::core::convert::From<ShapeVisual> for CompositionObject {
    fn from(value: ShapeVisual) -> Self {
        ::core::convert::From::from(&value)
    }
}
impl ::core::convert::From<&ShapeVisual> for CompositionObject {
    fn from(value: &ShapeVisual) -> Self {
        ::windows::core::Interface::cast(value).unwrap()
    }
}
impl<'a> ::core::convert::From<&ShapeVisual> for ::windows::core::InParam<'a, CompositionObject> {
    fn from(value: &ShapeVisual) -> Self {
        ::windows::core::InParam::owned(value.into())
    }
}
unsafe impl ::core::marker::Send for ShapeVisual {}
unsafe impl ::core::marker::Sync for ShapeVisual {}
#[doc = "*Required features: `\"UI_Composition\"`*"]
#[repr(transparent)]
pub struct SineEasingFunction(::windows::core::IUnknown);
impl SineEasingFunction {
    pub fn PopulatePropertyInfo(
        &self,
        propertyname: &::windows::core::HSTRING,
        propertyinfo: &AnimationPropertyInfo,
    ) -> ::windows::core::Result<()> {
        let this = &::windows::core::Interface::cast::<IAnimationObject>(self)?;
        unsafe {
            (::windows::core::Vtable::vtable(this).PopulatePropertyInfo)(
                ::windows::core::Vtable::as_raw(this),
                ::core::mem::transmute_copy(propertyname),
                ::core::mem::transmute_copy(propertyinfo),
            )
            .ok()
        }
    }
    pub fn Close(&self) -> ::windows::core::Result<()> {
        let this = &::windows::core::Interface::cast::<::windows::Foundation::IClosable>(self)?;
        unsafe {
            (::windows::core::Vtable::vtable(this).Close)(::windows::core::Vtable::as_raw(this))
                .ok()
        }
    }
    pub fn Compositor(&self) -> ::windows::core::Result<Compositor> {
        let this = &::windows::core::Interface::cast::<ICompositionObject>(self)?;
        unsafe {
            let mut result__ = ::core::mem::MaybeUninit::zeroed();
            (::windows::core::Vtable::vtable(this).Compositor)(
                ::windows::core::Vtable::as_raw(this),
                result__.as_mut_ptr(),
            )
            .from_abi::<Compositor>(result__)
        }
    }
    pub fn Properties(&self) -> ::windows::core::Result<CompositionPropertySet> {
        let this = &::windows::core::Interface::cast::<ICompositionObject>(self)?;
        unsafe {
            let mut result__ = ::core::mem::MaybeUninit::zeroed();
            (::windows::core::Vtable::vtable(this).Properties)(
                ::windows::core::Vtable::as_raw(this),
                result__.as_mut_ptr(),
            )
            .from_abi::<CompositionPropertySet>(result__)
        }
    }
    pub fn StartAnimation<'a, P0>(
        &self,
        propertyname: &::windows::core::HSTRING,
        animation: P0,
    ) -> ::windows::core::Result<()>
    where
        P0: ::std::convert::Into<::windows::core::InParam<'a, CompositionAnimation>>,
    {
        let this = &::windows::core::Interface::cast::<ICompositionObject>(self)?;
        unsafe {
            (::windows::core::Vtable::vtable(this).StartAnimation)(
                ::windows::core::Vtable::as_raw(this),
                ::core::mem::transmute_copy(propertyname),
                animation.into().abi(),
            )
            .ok()
        }
    }
    pub fn StopAnimation(
        &self,
        propertyname: &::windows::core::HSTRING,
    ) -> ::windows::core::Result<()> {
        let this = &::windows::core::Interface::cast::<ICompositionObject>(self)?;
        unsafe {
            (::windows::core::Vtable::vtable(this).StopAnimation)(
                ::windows::core::Vtable::as_raw(this),
                ::core::mem::transmute_copy(propertyname),
            )
            .ok()
        }
    }
    pub fn Comment(&self) -> ::windows::core::Result<::windows::core::HSTRING> {
        let this = &::windows::core::Interface::cast::<ICompositionObject2>(self)?;
        unsafe {
            let mut result__ = ::core::mem::MaybeUninit::zeroed();
            (::windows::core::Vtable::vtable(this).Comment)(
                ::windows::core::Vtable::as_raw(this),
                result__.as_mut_ptr(),
            )
            .from_abi::<::windows::core::HSTRING>(result__)
        }
    }
    pub fn SetComment(&self, value: &::windows::core::HSTRING) -> ::windows::core::Result<()> {
        let this = &::windows::core::Interface::cast::<ICompositionObject2>(self)?;
        unsafe {
            (::windows::core::Vtable::vtable(this).SetComment)(
                ::windows::core::Vtable::as_raw(this),
                ::core::mem::transmute_copy(value),
            )
            .ok()
        }
    }
    pub fn ImplicitAnimations(&self) -> ::windows::core::Result<ImplicitAnimationCollection> {
        let this = &::windows::core::Interface::cast::<ICompositionObject2>(self)?;
        unsafe {
            let mut result__ = ::core::mem::MaybeUninit::zeroed();
            (::windows::core::Vtable::vtable(this).ImplicitAnimations)(
                ::windows::core::Vtable::as_raw(this),
                result__.as_mut_ptr(),
            )
            .from_abi::<ImplicitAnimationCollection>(result__)
        }
    }
    pub fn SetImplicitAnimations(
        &self,
        value: &ImplicitAnimationCollection,
    ) -> ::windows::core::Result<()> {
        let this = &::windows::core::Interface::cast::<ICompositionObject2>(self)?;
        unsafe {
            (::windows::core::Vtable::vtable(this).SetImplicitAnimations)(
                ::windows::core::Vtable::as_raw(this),
                ::core::mem::transmute_copy(value),
            )
            .ok()
        }
    }
    pub fn StartAnimationGroup<'a, P0, E0>(&self, value: P0) -> ::windows::core::Result<()>
    where
        P0: ::std::convert::TryInto<
            ::windows::core::InParam<'a, ICompositionAnimationBase>,
            Error = E0,
        >,
        E0: ::std::convert::Into<::windows::core::Error>,
    {
        let this = &::windows::core::Interface::cast::<ICompositionObject2>(self)?;
        unsafe {
            (::windows::core::Vtable::vtable(this).StartAnimationGroup)(
                ::windows::core::Vtable::as_raw(this),
                value.try_into().map_err(|e| e.into())?.abi(),
            )
            .ok()
        }
    }
    pub fn StopAnimationGroup<'a, P0, E0>(&self, value: P0) -> ::windows::core::Result<()>
    where
        P0: ::std::convert::TryInto<
            ::windows::core::InParam<'a, ICompositionAnimationBase>,
            Error = E0,
        >,
        E0: ::std::convert::Into<::windows::core::Error>,
    {
        let this = &::windows::core::Interface::cast::<ICompositionObject2>(self)?;
        unsafe {
            (::windows::core::Vtable::vtable(this).StopAnimationGroup)(
                ::windows::core::Vtable::as_raw(this),
                value.try_into().map_err(|e| e.into())?.abi(),
            )
            .ok()
        }
    }
    #[doc = "*Required features: `\"UI_Dispatching\"`*"]
    #[cfg(feature = "UI_Dispatching")]
    pub fn DispatcherQueue(&self) -> ::windows::core::Result<super::Dispatching::DispatcherQueue> {
        let this = &::windows::core::Interface::cast::<ICompositionObject3>(self)?;
        unsafe {
            let mut result__ = ::core::mem::MaybeUninit::zeroed();
            (::windows::core::Vtable::vtable(this).DispatcherQueue)(
                ::windows::core::Vtable::as_raw(this),
                result__.as_mut_ptr(),
            )
            .from_abi::<super::Dispatching::DispatcherQueue>(result__)
        }
    }
    pub fn TryGetAnimationController(
        &self,
        propertyname: &::windows::core::HSTRING,
    ) -> ::windows::core::Result<AnimationController> {
        let this = &::windows::core::Interface::cast::<ICompositionObject4>(self)?;
        unsafe {
            let mut result__ = ::core::mem::MaybeUninit::zeroed();
            (::windows::core::Vtable::vtable(this).TryGetAnimationController)(
                ::windows::core::Vtable::as_raw(this),
                ::core::mem::transmute_copy(propertyname),
                result__.as_mut_ptr(),
            )
            .from_abi::<AnimationController>(result__)
        }
    }
    pub fn StartAnimationWithController<'a, P0>(
        &self,
        propertyname: &::windows::core::HSTRING,
        animation: P0,
        animationcontroller: &AnimationController,
    ) -> ::windows::core::Result<()>
    where
        P0: ::std::convert::Into<::windows::core::InParam<'a, CompositionAnimation>>,
    {
        let this = &::windows::core::Interface::cast::<ICompositionObject5>(self)?;
        unsafe {
            (::windows::core::Vtable::vtable(this).StartAnimationWithController)(
                ::windows::core::Vtable::as_raw(this),
                ::core::mem::transmute_copy(propertyname),
                animation.into().abi(),
                ::core::mem::transmute_copy(animationcontroller),
            )
            .ok()
        }
    }
    pub fn Mode(&self) -> ::windows::core::Result<CompositionEasingFunctionMode> {
        let this = self;
        unsafe {
            let mut result__ = ::core::mem::MaybeUninit::zeroed();
            (::windows::core::Vtable::vtable(this).Mode)(
                ::windows::core::Vtable::as_raw(this),
                result__.as_mut_ptr(),
            )
            .from_abi::<CompositionEasingFunctionMode>(result__)
        }
    }
}
impl ::core::clone::Clone for SineEasingFunction {
    fn clone(&self) -> Self {
        Self(self.0.clone())
    }
}
impl ::core::cmp::PartialEq for SineEasingFunction {
    fn eq(&self, other: &Self) -> bool {
        self.0 == other.0
    }
}
impl ::core::cmp::Eq for SineEasingFunction {}
impl ::core::fmt::Debug for SineEasingFunction {
    fn fmt(&self, f: &mut ::core::fmt::Formatter<'_>) -> ::core::fmt::Result {
        f.debug_tuple("SineEasingFunction").field(&self.0).finish()
    }
}
unsafe impl ::windows::core::RuntimeType for SineEasingFunction {
    const SIGNATURE: ::windows::core::ConstBuffer = ::windows::core::ConstBuffer::from_slice(
        b"rc(Microsoft.UI.Composition.SineEasingFunction;{7fccb5f8-cb0e-5a01-a26b-98880ff49dc6})",
    );
    type DefaultType = ::core::option::Option<Self>;
    fn from_default(from: &Self::DefaultType) -> ::windows::core::Result<Self> {
        from.as_ref().cloned().ok_or(::windows::core::Error::OK)
    }
}
unsafe impl ::windows::core::Vtable for SineEasingFunction {
    type Vtable = ISineEasingFunction_Vtbl;
}
unsafe impl ::windows::core::Interface for SineEasingFunction {
    const IID: ::windows::core::GUID = <ISineEasingFunction as ::windows::core::Interface>::IID;
}
impl ::windows::core::RuntimeName for SineEasingFunction {
    const NAME: &'static str = "Microsoft.UI.Composition.SineEasingFunction";
}
::windows::core::interface_hierarchy!(
    SineEasingFunction,
    ::windows::core::IUnknown,
    ::windows::core::IInspectable
);
impl ::core::convert::TryFrom<SineEasingFunction> for IAnimationObject {
    type Error = ::windows::core::Error;
    fn try_from(value: SineEasingFunction) -> ::windows::core::Result<Self> {
        ::core::convert::TryFrom::try_from(&value)
    }
}
impl ::core::convert::TryFrom<&SineEasingFunction> for IAnimationObject {
    type Error = ::windows::core::Error;
    fn try_from(value: &SineEasingFunction) -> ::windows::core::Result<Self> {
        ::windows::core::Interface::cast(value)
    }
}
impl<'a> ::core::convert::TryFrom<&SineEasingFunction>
    for ::windows::core::InParam<'a, IAnimationObject>
{
    type Error = ::windows::core::Error;
    fn try_from(value: &SineEasingFunction) -> ::windows::core::Result<Self> {
        let item = ::std::convert::TryInto::try_into(value)?;
        Ok(::windows::core::InParam::owned(item))
    }
}
impl ::core::convert::TryFrom<SineEasingFunction> for ::windows::Foundation::IClosable {
    type Error = ::windows::core::Error;
    fn try_from(value: SineEasingFunction) -> ::windows::core::Result<Self> {
        ::core::convert::TryFrom::try_from(&value)
    }
}
impl ::core::convert::TryFrom<&SineEasingFunction> for ::windows::Foundation::IClosable {
    type Error = ::windows::core::Error;
    fn try_from(value: &SineEasingFunction) -> ::windows::core::Result<Self> {
        ::windows::core::Interface::cast(value)
    }
}
impl<'a> ::core::convert::TryFrom<&SineEasingFunction>
    for ::windows::core::InParam<'a, ::windows::Foundation::IClosable>
{
    type Error = ::windows::core::Error;
    fn try_from(value: &SineEasingFunction) -> ::windows::core::Result<Self> {
        let item = ::std::convert::TryInto::try_into(value)?;
        Ok(::windows::core::InParam::owned(item))
    }
}
impl ::core::convert::From<SineEasingFunction> for CompositionEasingFunction {
    fn from(value: SineEasingFunction) -> Self {
        ::core::convert::From::from(&value)
    }
}
impl ::core::convert::From<&SineEasingFunction> for CompositionEasingFunction {
    fn from(value: &SineEasingFunction) -> Self {
        ::windows::core::Interface::cast(value).unwrap()
    }
}
impl<'a> ::core::convert::From<&SineEasingFunction>
    for ::windows::core::InParam<'a, CompositionEasingFunction>
{
    fn from(value: &SineEasingFunction) -> Self {
        ::windows::core::InParam::owned(value.into())
    }
}
impl ::core::convert::From<SineEasingFunction> for CompositionObject {
    fn from(value: SineEasingFunction) -> Self {
        ::core::convert::From::from(&value)
    }
}
impl ::core::convert::From<&SineEasingFunction> for CompositionObject {
    fn from(value: &SineEasingFunction) -> Self {
        ::windows::core::Interface::cast(value).unwrap()
    }
}
impl<'a> ::core::convert::From<&SineEasingFunction>
    for ::windows::core::InParam<'a, CompositionObject>
{
    fn from(value: &SineEasingFunction) -> Self {
        ::windows::core::InParam::owned(value.into())
    }
}
unsafe impl ::core::marker::Send for SineEasingFunction {}
unsafe impl ::core::marker::Sync for SineEasingFunction {}
#[doc = "*Required features: `\"UI_Composition\"`*"]
#[repr(transparent)]
pub struct SpotLight(::windows::core::IUnknown);
impl SpotLight {
    pub fn PopulatePropertyInfo(
        &self,
        propertyname: &::windows::core::HSTRING,
        propertyinfo: &AnimationPropertyInfo,
    ) -> ::windows::core::Result<()> {
        let this = &::windows::core::Interface::cast::<IAnimationObject>(self)?;
        unsafe {
            (::windows::core::Vtable::vtable(this).PopulatePropertyInfo)(
                ::windows::core::Vtable::as_raw(this),
                ::core::mem::transmute_copy(propertyname),
                ::core::mem::transmute_copy(propertyinfo),
            )
            .ok()
        }
    }
    pub fn Close(&self) -> ::windows::core::Result<()> {
        let this = &::windows::core::Interface::cast::<::windows::Foundation::IClosable>(self)?;
        unsafe {
            (::windows::core::Vtable::vtable(this).Close)(::windows::core::Vtable::as_raw(this))
                .ok()
        }
    }
    pub fn Targets(&self) -> ::windows::core::Result<VisualUnorderedCollection> {
        let this = &::windows::core::Interface::cast::<ICompositionLight>(self)?;
        unsafe {
            let mut result__ = ::core::mem::MaybeUninit::zeroed();
            (::windows::core::Vtable::vtable(this).Targets)(
                ::windows::core::Vtable::as_raw(this),
                result__.as_mut_ptr(),
            )
            .from_abi::<VisualUnorderedCollection>(result__)
        }
    }
    pub fn ExclusionsFromTargets(&self) -> ::windows::core::Result<VisualUnorderedCollection> {
        let this = &::windows::core::Interface::cast::<ICompositionLight2>(self)?;
        unsafe {
            let mut result__ = ::core::mem::MaybeUninit::zeroed();
            (::windows::core::Vtable::vtable(this).ExclusionsFromTargets)(
                ::windows::core::Vtable::as_raw(this),
                result__.as_mut_ptr(),
            )
            .from_abi::<VisualUnorderedCollection>(result__)
        }
    }
    pub fn IsEnabled(&self) -> ::windows::core::Result<bool> {
        let this = &::windows::core::Interface::cast::<ICompositionLight3>(self)?;
        unsafe {
            let mut result__ = ::core::mem::MaybeUninit::zeroed();
            (::windows::core::Vtable::vtable(this).IsEnabled)(
                ::windows::core::Vtable::as_raw(this),
                result__.as_mut_ptr(),
            )
            .from_abi::<bool>(result__)
        }
    }
    pub fn SetIsEnabled(&self, value: bool) -> ::windows::core::Result<()> {
        let this = &::windows::core::Interface::cast::<ICompositionLight3>(self)?;
        unsafe {
            (::windows::core::Vtable::vtable(this).SetIsEnabled)(
                ::windows::core::Vtable::as_raw(this),
                value,
            )
            .ok()
        }
    }
    pub fn Compositor(&self) -> ::windows::core::Result<Compositor> {
        let this = &::windows::core::Interface::cast::<ICompositionObject>(self)?;
        unsafe {
            let mut result__ = ::core::mem::MaybeUninit::zeroed();
            (::windows::core::Vtable::vtable(this).Compositor)(
                ::windows::core::Vtable::as_raw(this),
                result__.as_mut_ptr(),
            )
            .from_abi::<Compositor>(result__)
        }
    }
    pub fn Properties(&self) -> ::windows::core::Result<CompositionPropertySet> {
        let this = &::windows::core::Interface::cast::<ICompositionObject>(self)?;
        unsafe {
            let mut result__ = ::core::mem::MaybeUninit::zeroed();
            (::windows::core::Vtable::vtable(this).Properties)(
                ::windows::core::Vtable::as_raw(this),
                result__.as_mut_ptr(),
            )
            .from_abi::<CompositionPropertySet>(result__)
        }
    }
    pub fn StartAnimation<'a, P0>(
        &self,
        propertyname: &::windows::core::HSTRING,
        animation: P0,
    ) -> ::windows::core::Result<()>
    where
        P0: ::std::convert::Into<::windows::core::InParam<'a, CompositionAnimation>>,
    {
        let this = &::windows::core::Interface::cast::<ICompositionObject>(self)?;
        unsafe {
            (::windows::core::Vtable::vtable(this).StartAnimation)(
                ::windows::core::Vtable::as_raw(this),
                ::core::mem::transmute_copy(propertyname),
                animation.into().abi(),
            )
            .ok()
        }
    }
    pub fn StopAnimation(
        &self,
        propertyname: &::windows::core::HSTRING,
    ) -> ::windows::core::Result<()> {
        let this = &::windows::core::Interface::cast::<ICompositionObject>(self)?;
        unsafe {
            (::windows::core::Vtable::vtable(this).StopAnimation)(
                ::windows::core::Vtable::as_raw(this),
                ::core::mem::transmute_copy(propertyname),
            )
            .ok()
        }
    }
    pub fn Comment(&self) -> ::windows::core::Result<::windows::core::HSTRING> {
        let this = &::windows::core::Interface::cast::<ICompositionObject2>(self)?;
        unsafe {
            let mut result__ = ::core::mem::MaybeUninit::zeroed();
            (::windows::core::Vtable::vtable(this).Comment)(
                ::windows::core::Vtable::as_raw(this),
                result__.as_mut_ptr(),
            )
            .from_abi::<::windows::core::HSTRING>(result__)
        }
    }
    pub fn SetComment(&self, value: &::windows::core::HSTRING) -> ::windows::core::Result<()> {
        let this = &::windows::core::Interface::cast::<ICompositionObject2>(self)?;
        unsafe {
            (::windows::core::Vtable::vtable(this).SetComment)(
                ::windows::core::Vtable::as_raw(this),
                ::core::mem::transmute_copy(value),
            )
            .ok()
        }
    }
    pub fn ImplicitAnimations(&self) -> ::windows::core::Result<ImplicitAnimationCollection> {
        let this = &::windows::core::Interface::cast::<ICompositionObject2>(self)?;
        unsafe {
            let mut result__ = ::core::mem::MaybeUninit::zeroed();
            (::windows::core::Vtable::vtable(this).ImplicitAnimations)(
                ::windows::core::Vtable::as_raw(this),
                result__.as_mut_ptr(),
            )
            .from_abi::<ImplicitAnimationCollection>(result__)
        }
    }
    pub fn SetImplicitAnimations(
        &self,
        value: &ImplicitAnimationCollection,
    ) -> ::windows::core::Result<()> {
        let this = &::windows::core::Interface::cast::<ICompositionObject2>(self)?;
        unsafe {
            (::windows::core::Vtable::vtable(this).SetImplicitAnimations)(
                ::windows::core::Vtable::as_raw(this),
                ::core::mem::transmute_copy(value),
            )
            .ok()
        }
    }
    pub fn StartAnimationGroup<'a, P0, E0>(&self, value: P0) -> ::windows::core::Result<()>
    where
        P0: ::std::convert::TryInto<
            ::windows::core::InParam<'a, ICompositionAnimationBase>,
            Error = E0,
        >,
        E0: ::std::convert::Into<::windows::core::Error>,
    {
        let this = &::windows::core::Interface::cast::<ICompositionObject2>(self)?;
        unsafe {
            (::windows::core::Vtable::vtable(this).StartAnimationGroup)(
                ::windows::core::Vtable::as_raw(this),
                value.try_into().map_err(|e| e.into())?.abi(),
            )
            .ok()
        }
    }
    pub fn StopAnimationGroup<'a, P0, E0>(&self, value: P0) -> ::windows::core::Result<()>
    where
        P0: ::std::convert::TryInto<
            ::windows::core::InParam<'a, ICompositionAnimationBase>,
            Error = E0,
        >,
        E0: ::std::convert::Into<::windows::core::Error>,
    {
        let this = &::windows::core::Interface::cast::<ICompositionObject2>(self)?;
        unsafe {
            (::windows::core::Vtable::vtable(this).StopAnimationGroup)(
                ::windows::core::Vtable::as_raw(this),
                value.try_into().map_err(|e| e.into())?.abi(),
            )
            .ok()
        }
    }
    #[doc = "*Required features: `\"UI_Dispatching\"`*"]
    #[cfg(feature = "UI_Dispatching")]
    pub fn DispatcherQueue(&self) -> ::windows::core::Result<super::Dispatching::DispatcherQueue> {
        let this = &::windows::core::Interface::cast::<ICompositionObject3>(self)?;
        unsafe {
            let mut result__ = ::core::mem::MaybeUninit::zeroed();
            (::windows::core::Vtable::vtable(this).DispatcherQueue)(
                ::windows::core::Vtable::as_raw(this),
                result__.as_mut_ptr(),
            )
            .from_abi::<super::Dispatching::DispatcherQueue>(result__)
        }
    }
    pub fn TryGetAnimationController(
        &self,
        propertyname: &::windows::core::HSTRING,
    ) -> ::windows::core::Result<AnimationController> {
        let this = &::windows::core::Interface::cast::<ICompositionObject4>(self)?;
        unsafe {
            let mut result__ = ::core::mem::MaybeUninit::zeroed();
            (::windows::core::Vtable::vtable(this).TryGetAnimationController)(
                ::windows::core::Vtable::as_raw(this),
                ::core::mem::transmute_copy(propertyname),
                result__.as_mut_ptr(),
            )
            .from_abi::<AnimationController>(result__)
        }
    }
    pub fn StartAnimationWithController<'a, P0>(
        &self,
        propertyname: &::windows::core::HSTRING,
        animation: P0,
        animationcontroller: &AnimationController,
    ) -> ::windows::core::Result<()>
    where
        P0: ::std::convert::Into<::windows::core::InParam<'a, CompositionAnimation>>,
    {
        let this = &::windows::core::Interface::cast::<ICompositionObject5>(self)?;
        unsafe {
            (::windows::core::Vtable::vtable(this).StartAnimationWithController)(
                ::windows::core::Vtable::as_raw(this),
                ::core::mem::transmute_copy(propertyname),
                animation.into().abi(),
                ::core::mem::transmute_copy(animationcontroller),
            )
            .ok()
        }
    }
    pub fn ConstantAttenuation(&self) -> ::windows::core::Result<f32> {
        let this = self;
        unsafe {
            let mut result__ = ::core::mem::MaybeUninit::zeroed();
            (::windows::core::Vtable::vtable(this).ConstantAttenuation)(
                ::windows::core::Vtable::as_raw(this),
                result__.as_mut_ptr(),
            )
            .from_abi::<f32>(result__)
        }
    }
    pub fn SetConstantAttenuation(&self, value: f32) -> ::windows::core::Result<()> {
        let this = self;
        unsafe {
            (::windows::core::Vtable::vtable(this).SetConstantAttenuation)(
                ::windows::core::Vtable::as_raw(this),
                value,
            )
            .ok()
        }
    }
    pub fn CoordinateSpace(&self) -> ::windows::core::Result<Visual> {
        let this = self;
        unsafe {
            let mut result__ = ::core::mem::MaybeUninit::zeroed();
            (::windows::core::Vtable::vtable(this).CoordinateSpace)(
                ::windows::core::Vtable::as_raw(this),
                result__.as_mut_ptr(),
            )
            .from_abi::<Visual>(result__)
        }
    }
    pub fn SetCoordinateSpace<'a, P0>(&self, value: P0) -> ::windows::core::Result<()>
    where
        P0: ::std::convert::Into<::windows::core::InParam<'a, Visual>>,
    {
        let this = self;
        unsafe {
            (::windows::core::Vtable::vtable(this).SetCoordinateSpace)(
                ::windows::core::Vtable::as_raw(this),
                value.into().abi(),
            )
            .ok()
        }
    }
    pub fn Direction(&self) -> ::windows::core::Result<::windows::Foundation::Numerics::Vector3> {
        let this = self;
        unsafe {
            let mut result__ = ::core::mem::MaybeUninit::zeroed();
            (::windows::core::Vtable::vtable(this).Direction)(
                ::windows::core::Vtable::as_raw(this),
                result__.as_mut_ptr(),
            )
            .from_abi::<::windows::Foundation::Numerics::Vector3>(result__)
        }
    }
    pub fn SetDirection(
        &self,
        value: ::windows::Foundation::Numerics::Vector3,
    ) -> ::windows::core::Result<()> {
        let this = self;
        unsafe {
            (::windows::core::Vtable::vtable(this).SetDirection)(
                ::windows::core::Vtable::as_raw(this),
                value,
            )
            .ok()
        }
    }
    pub fn InnerConeAngle(&self) -> ::windows::core::Result<f32> {
        let this = self;
        unsafe {
            let mut result__ = ::core::mem::MaybeUninit::zeroed();
            (::windows::core::Vtable::vtable(this).InnerConeAngle)(
                ::windows::core::Vtable::as_raw(this),
                result__.as_mut_ptr(),
            )
            .from_abi::<f32>(result__)
        }
    }
    pub fn SetInnerConeAngle(&self, value: f32) -> ::windows::core::Result<()> {
        let this = self;
        unsafe {
            (::windows::core::Vtable::vtable(this).SetInnerConeAngle)(
                ::windows::core::Vtable::as_raw(this),
                value,
            )
            .ok()
        }
    }
    pub fn InnerConeAngleInDegrees(&self) -> ::windows::core::Result<f32> {
        let this = self;
        unsafe {
            let mut result__ = ::core::mem::MaybeUninit::zeroed();
            (::windows::core::Vtable::vtable(this).InnerConeAngleInDegrees)(
                ::windows::core::Vtable::as_raw(this),
                result__.as_mut_ptr(),
            )
            .from_abi::<f32>(result__)
        }
    }
    pub fn SetInnerConeAngleInDegrees(&self, value: f32) -> ::windows::core::Result<()> {
        let this = self;
        unsafe {
            (::windows::core::Vtable::vtable(this).SetInnerConeAngleInDegrees)(
                ::windows::core::Vtable::as_raw(this),
                value,
            )
            .ok()
        }
    }
    pub fn InnerConeColor(&self) -> ::windows::core::Result<::windows::UI::Color> {
        let this = self;
        unsafe {
            let mut result__ = ::core::mem::MaybeUninit::zeroed();
            (::windows::core::Vtable::vtable(this).InnerConeColor)(
                ::windows::core::Vtable::as_raw(this),
                result__.as_mut_ptr(),
            )
            .from_abi::<::windows::UI::Color>(result__)
        }
    }
    pub fn SetInnerConeColor(&self, value: ::windows::UI::Color) -> ::windows::core::Result<()> {
        let this = self;
        unsafe {
            (::windows::core::Vtable::vtable(this).SetInnerConeColor)(
                ::windows::core::Vtable::as_raw(this),
                value,
            )
            .ok()
        }
    }
    pub fn LinearAttenuation(&self) -> ::windows::core::Result<f32> {
        let this = self;
        unsafe {
            let mut result__ = ::core::mem::MaybeUninit::zeroed();
            (::windows::core::Vtable::vtable(this).LinearAttenuation)(
                ::windows::core::Vtable::as_raw(this),
                result__.as_mut_ptr(),
            )
            .from_abi::<f32>(result__)
        }
    }
    pub fn SetLinearAttenuation(&self, value: f32) -> ::windows::core::Result<()> {
        let this = self;
        unsafe {
            (::windows::core::Vtable::vtable(this).SetLinearAttenuation)(
                ::windows::core::Vtable::as_raw(this),
                value,
            )
            .ok()
        }
    }
    pub fn Offset(&self) -> ::windows::core::Result<::windows::Foundation::Numerics::Vector3> {
        let this = self;
        unsafe {
            let mut result__ = ::core::mem::MaybeUninit::zeroed();
            (::windows::core::Vtable::vtable(this).Offset)(
                ::windows::core::Vtable::as_raw(this),
                result__.as_mut_ptr(),
            )
            .from_abi::<::windows::Foundation::Numerics::Vector3>(result__)
        }
    }
    pub fn SetOffset(
        &self,
        value: ::windows::Foundation::Numerics::Vector3,
    ) -> ::windows::core::Result<()> {
        let this = self;
        unsafe {
            (::windows::core::Vtable::vtable(this).SetOffset)(
                ::windows::core::Vtable::as_raw(this),
                value,
            )
            .ok()
        }
    }
    pub fn OuterConeAngle(&self) -> ::windows::core::Result<f32> {
        let this = self;
        unsafe {
            let mut result__ = ::core::mem::MaybeUninit::zeroed();
            (::windows::core::Vtable::vtable(this).OuterConeAngle)(
                ::windows::core::Vtable::as_raw(this),
                result__.as_mut_ptr(),
            )
            .from_abi::<f32>(result__)
        }
    }
    pub fn SetOuterConeAngle(&self, value: f32) -> ::windows::core::Result<()> {
        let this = self;
        unsafe {
            (::windows::core::Vtable::vtable(this).SetOuterConeAngle)(
                ::windows::core::Vtable::as_raw(this),
                value,
            )
            .ok()
        }
    }
    pub fn OuterConeAngleInDegrees(&self) -> ::windows::core::Result<f32> {
        let this = self;
        unsafe {
            let mut result__ = ::core::mem::MaybeUninit::zeroed();
            (::windows::core::Vtable::vtable(this).OuterConeAngleInDegrees)(
                ::windows::core::Vtable::as_raw(this),
                result__.as_mut_ptr(),
            )
            .from_abi::<f32>(result__)
        }
    }
    pub fn SetOuterConeAngleInDegrees(&self, value: f32) -> ::windows::core::Result<()> {
        let this = self;
        unsafe {
            (::windows::core::Vtable::vtable(this).SetOuterConeAngleInDegrees)(
                ::windows::core::Vtable::as_raw(this),
                value,
            )
            .ok()
        }
    }
    pub fn OuterConeColor(&self) -> ::windows::core::Result<::windows::UI::Color> {
        let this = self;
        unsafe {
            let mut result__ = ::core::mem::MaybeUninit::zeroed();
            (::windows::core::Vtable::vtable(this).OuterConeColor)(
                ::windows::core::Vtable::as_raw(this),
                result__.as_mut_ptr(),
            )
            .from_abi::<::windows::UI::Color>(result__)
        }
    }
    pub fn SetOuterConeColor(&self, value: ::windows::UI::Color) -> ::windows::core::Result<()> {
        let this = self;
        unsafe {
            (::windows::core::Vtable::vtable(this).SetOuterConeColor)(
                ::windows::core::Vtable::as_raw(this),
                value,
            )
            .ok()
        }
    }
    pub fn QuadraticAttenuation(&self) -> ::windows::core::Result<f32> {
        let this = self;
        unsafe {
            let mut result__ = ::core::mem::MaybeUninit::zeroed();
            (::windows::core::Vtable::vtable(this).QuadraticAttenuation)(
                ::windows::core::Vtable::as_raw(this),
                result__.as_mut_ptr(),
            )
            .from_abi::<f32>(result__)
        }
    }
    pub fn SetQuadraticAttenuation(&self, value: f32) -> ::windows::core::Result<()> {
        let this = self;
        unsafe {
            (::windows::core::Vtable::vtable(this).SetQuadraticAttenuation)(
                ::windows::core::Vtable::as_raw(this),
                value,
            )
            .ok()
        }
    }
    pub fn InnerConeIntensity(&self) -> ::windows::core::Result<f32> {
        let this = &::windows::core::Interface::cast::<ISpotLight2>(self)?;
        unsafe {
            let mut result__ = ::core::mem::MaybeUninit::zeroed();
            (::windows::core::Vtable::vtable(this).InnerConeIntensity)(
                ::windows::core::Vtable::as_raw(this),
                result__.as_mut_ptr(),
            )
            .from_abi::<f32>(result__)
        }
    }
    pub fn SetInnerConeIntensity(&self, value: f32) -> ::windows::core::Result<()> {
        let this = &::windows::core::Interface::cast::<ISpotLight2>(self)?;
        unsafe {
            (::windows::core::Vtable::vtable(this).SetInnerConeIntensity)(
                ::windows::core::Vtable::as_raw(this),
                value,
            )
            .ok()
        }
    }
    pub fn OuterConeIntensity(&self) -> ::windows::core::Result<f32> {
        let this = &::windows::core::Interface::cast::<ISpotLight2>(self)?;
        unsafe {
            let mut result__ = ::core::mem::MaybeUninit::zeroed();
            (::windows::core::Vtable::vtable(this).OuterConeIntensity)(
                ::windows::core::Vtable::as_raw(this),
                result__.as_mut_ptr(),
            )
            .from_abi::<f32>(result__)
        }
    }
    pub fn SetOuterConeIntensity(&self, value: f32) -> ::windows::core::Result<()> {
        let this = &::windows::core::Interface::cast::<ISpotLight2>(self)?;
        unsafe {
            (::windows::core::Vtable::vtable(this).SetOuterConeIntensity)(
                ::windows::core::Vtable::as_raw(this),
                value,
            )
            .ok()
        }
    }
    pub fn MinAttenuationCutoff(&self) -> ::windows::core::Result<f32> {
        let this = &::windows::core::Interface::cast::<ISpotLight3>(self)?;
        unsafe {
            let mut result__ = ::core::mem::MaybeUninit::zeroed();
            (::windows::core::Vtable::vtable(this).MinAttenuationCutoff)(
                ::windows::core::Vtable::as_raw(this),
                result__.as_mut_ptr(),
            )
            .from_abi::<f32>(result__)
        }
    }
    pub fn SetMinAttenuationCutoff(&self, value: f32) -> ::windows::core::Result<()> {
        let this = &::windows::core::Interface::cast::<ISpotLight3>(self)?;
        unsafe {
            (::windows::core::Vtable::vtable(this).SetMinAttenuationCutoff)(
                ::windows::core::Vtable::as_raw(this),
                value,
            )
            .ok()
        }
    }
    pub fn MaxAttenuationCutoff(&self) -> ::windows::core::Result<f32> {
        let this = &::windows::core::Interface::cast::<ISpotLight3>(self)?;
        unsafe {
            let mut result__ = ::core::mem::MaybeUninit::zeroed();
            (::windows::core::Vtable::vtable(this).MaxAttenuationCutoff)(
                ::windows::core::Vtable::as_raw(this),
                result__.as_mut_ptr(),
            )
            .from_abi::<f32>(result__)
        }
    }
    pub fn SetMaxAttenuationCutoff(&self, value: f32) -> ::windows::core::Result<()> {
        let this = &::windows::core::Interface::cast::<ISpotLight3>(self)?;
        unsafe {
            (::windows::core::Vtable::vtable(this).SetMaxAttenuationCutoff)(
                ::windows::core::Vtable::as_raw(this),
                value,
            )
            .ok()
        }
    }
}
impl ::core::clone::Clone for SpotLight {
    fn clone(&self) -> Self {
        Self(self.0.clone())
    }
}
impl ::core::cmp::PartialEq for SpotLight {
    fn eq(&self, other: &Self) -> bool {
        self.0 == other.0
    }
}
impl ::core::cmp::Eq for SpotLight {}
impl ::core::fmt::Debug for SpotLight {
    fn fmt(&self, f: &mut ::core::fmt::Formatter<'_>) -> ::core::fmt::Result {
        f.debug_tuple("SpotLight").field(&self.0).finish()
    }
}
unsafe impl ::windows::core::RuntimeType for SpotLight {
    const SIGNATURE: ::windows::core::ConstBuffer = ::windows::core::ConstBuffer::from_slice(
        b"rc(Microsoft.UI.Composition.SpotLight;{5935496a-0586-5f77-bd03-d5a6bb9e8fa0})",
    );
    type DefaultType = ::core::option::Option<Self>;
    fn from_default(from: &Self::DefaultType) -> ::windows::core::Result<Self> {
        from.as_ref().cloned().ok_or(::windows::core::Error::OK)
    }
}
unsafe impl ::windows::core::Vtable for SpotLight {
    type Vtable = ISpotLight_Vtbl;
}
unsafe impl ::windows::core::Interface for SpotLight {
    const IID: ::windows::core::GUID = <ISpotLight as ::windows::core::Interface>::IID;
}
impl ::windows::core::RuntimeName for SpotLight {
    const NAME: &'static str = "Microsoft.UI.Composition.SpotLight";
}
::windows::core::interface_hierarchy!(
    SpotLight,
    ::windows::core::IUnknown,
    ::windows::core::IInspectable
);
impl ::core::convert::TryFrom<SpotLight> for IAnimationObject {
    type Error = ::windows::core::Error;
    fn try_from(value: SpotLight) -> ::windows::core::Result<Self> {
        ::core::convert::TryFrom::try_from(&value)
    }
}
impl ::core::convert::TryFrom<&SpotLight> for IAnimationObject {
    type Error = ::windows::core::Error;
    fn try_from(value: &SpotLight) -> ::windows::core::Result<Self> {
        ::windows::core::Interface::cast(value)
    }
}
impl<'a> ::core::convert::TryFrom<&SpotLight> for ::windows::core::InParam<'a, IAnimationObject> {
    type Error = ::windows::core::Error;
    fn try_from(value: &SpotLight) -> ::windows::core::Result<Self> {
        let item = ::std::convert::TryInto::try_into(value)?;
        Ok(::windows::core::InParam::owned(item))
    }
}
impl ::core::convert::TryFrom<SpotLight> for ::windows::Foundation::IClosable {
    type Error = ::windows::core::Error;
    fn try_from(value: SpotLight) -> ::windows::core::Result<Self> {
        ::core::convert::TryFrom::try_from(&value)
    }
}
impl ::core::convert::TryFrom<&SpotLight> for ::windows::Foundation::IClosable {
    type Error = ::windows::core::Error;
    fn try_from(value: &SpotLight) -> ::windows::core::Result<Self> {
        ::windows::core::Interface::cast(value)
    }
}
impl<'a> ::core::convert::TryFrom<&SpotLight>
    for ::windows::core::InParam<'a, ::windows::Foundation::IClosable>
{
    type Error = ::windows::core::Error;
    fn try_from(value: &SpotLight) -> ::windows::core::Result<Self> {
        let item = ::std::convert::TryInto::try_into(value)?;
        Ok(::windows::core::InParam::owned(item))
    }
}
impl ::core::convert::From<SpotLight> for CompositionLight {
    fn from(value: SpotLight) -> Self {
        ::core::convert::From::from(&value)
    }
}
impl ::core::convert::From<&SpotLight> for CompositionLight {
    fn from(value: &SpotLight) -> Self {
        ::windows::core::Interface::cast(value).unwrap()
    }
}
impl<'a> ::core::convert::From<&SpotLight> for ::windows::core::InParam<'a, CompositionLight> {
    fn from(value: &SpotLight) -> Self {
        ::windows::core::InParam::owned(value.into())
    }
}
impl ::core::convert::From<SpotLight> for CompositionObject {
    fn from(value: SpotLight) -> Self {
        ::core::convert::From::from(&value)
    }
}
impl ::core::convert::From<&SpotLight> for CompositionObject {
    fn from(value: &SpotLight) -> Self {
        ::windows::core::Interface::cast(value).unwrap()
    }
}
impl<'a> ::core::convert::From<&SpotLight> for ::windows::core::InParam<'a, CompositionObject> {
    fn from(value: &SpotLight) -> Self {
        ::windows::core::InParam::owned(value.into())
    }
}
unsafe impl ::core::marker::Send for SpotLight {}
unsafe impl ::core::marker::Sync for SpotLight {}
#[doc = "*Required features: `\"UI_Composition\"`*"]
#[repr(transparent)]
pub struct SpringScalarNaturalMotionAnimation(::windows::core::IUnknown);
impl SpringScalarNaturalMotionAnimation {
    pub fn PopulatePropertyInfo(
        &self,
        propertyname: &::windows::core::HSTRING,
        propertyinfo: &AnimationPropertyInfo,
    ) -> ::windows::core::Result<()> {
        let this = &::windows::core::Interface::cast::<IAnimationObject>(self)?;
        unsafe {
            (::windows::core::Vtable::vtable(this).PopulatePropertyInfo)(
                ::windows::core::Vtable::as_raw(this),
                ::core::mem::transmute_copy(propertyname),
                ::core::mem::transmute_copy(propertyinfo),
            )
            .ok()
        }
    }
    pub fn Close(&self) -> ::windows::core::Result<()> {
        let this = &::windows::core::Interface::cast::<::windows::Foundation::IClosable>(self)?;
        unsafe {
            (::windows::core::Vtable::vtable(this).Close)(::windows::core::Vtable::as_raw(this))
                .ok()
        }
    }
    pub fn ClearAllParameters(&self) -> ::windows::core::Result<()> {
        let this = &::windows::core::Interface::cast::<ICompositionAnimation>(self)?;
        unsafe {
            (::windows::core::Vtable::vtable(this).ClearAllParameters)(
                ::windows::core::Vtable::as_raw(this),
            )
            .ok()
        }
    }
    pub fn ClearParameter(&self, key: &::windows::core::HSTRING) -> ::windows::core::Result<()> {
        let this = &::windows::core::Interface::cast::<ICompositionAnimation>(self)?;
        unsafe {
            (::windows::core::Vtable::vtable(this).ClearParameter)(
                ::windows::core::Vtable::as_raw(this),
                ::core::mem::transmute_copy(key),
            )
            .ok()
        }
    }
    pub fn SetColorParameter(
        &self,
        key: &::windows::core::HSTRING,
        value: ::windows::UI::Color,
    ) -> ::windows::core::Result<()> {
        let this = &::windows::core::Interface::cast::<ICompositionAnimation>(self)?;
        unsafe {
            (::windows::core::Vtable::vtable(this).SetColorParameter)(
                ::windows::core::Vtable::as_raw(this),
                ::core::mem::transmute_copy(key),
                value,
            )
            .ok()
        }
    }
    pub fn SetMatrix3x2Parameter(
        &self,
        key: &::windows::core::HSTRING,
        value: ::windows::Foundation::Numerics::Matrix3x2,
    ) -> ::windows::core::Result<()> {
        let this = &::windows::core::Interface::cast::<ICompositionAnimation>(self)?;
        unsafe {
            (::windows::core::Vtable::vtable(this).SetMatrix3x2Parameter)(
                ::windows::core::Vtable::as_raw(this),
                ::core::mem::transmute_copy(key),
                value,
            )
            .ok()
        }
    }
    pub fn SetMatrix4x4Parameter(
        &self,
        key: &::windows::core::HSTRING,
        value: ::windows::Foundation::Numerics::Matrix4x4,
    ) -> ::windows::core::Result<()> {
        let this = &::windows::core::Interface::cast::<ICompositionAnimation>(self)?;
        unsafe {
            (::windows::core::Vtable::vtable(this).SetMatrix4x4Parameter)(
                ::windows::core::Vtable::as_raw(this),
                ::core::mem::transmute_copy(key),
                value,
            )
            .ok()
        }
    }
    pub fn SetQuaternionParameter(
        &self,
        key: &::windows::core::HSTRING,
        value: ::windows::Foundation::Numerics::Quaternion,
    ) -> ::windows::core::Result<()> {
        let this = &::windows::core::Interface::cast::<ICompositionAnimation>(self)?;
        unsafe {
            (::windows::core::Vtable::vtable(this).SetQuaternionParameter)(
                ::windows::core::Vtable::as_raw(this),
                ::core::mem::transmute_copy(key),
                value,
            )
            .ok()
        }
    }
    pub fn SetReferenceParameter<'a, P0>(
        &self,
        key: &::windows::core::HSTRING,
        compositionobject: P0,
    ) -> ::windows::core::Result<()>
    where
        P0: ::std::convert::Into<::windows::core::InParam<'a, CompositionObject>>,
    {
        let this = &::windows::core::Interface::cast::<ICompositionAnimation>(self)?;
        unsafe {
            (::windows::core::Vtable::vtable(this).SetReferenceParameter)(
                ::windows::core::Vtable::as_raw(this),
                ::core::mem::transmute_copy(key),
                compositionobject.into().abi(),
            )
            .ok()
        }
    }
    pub fn SetScalarParameter(
        &self,
        key: &::windows::core::HSTRING,
        value: f32,
    ) -> ::windows::core::Result<()> {
        let this = &::windows::core::Interface::cast::<ICompositionAnimation>(self)?;
        unsafe {
            (::windows::core::Vtable::vtable(this).SetScalarParameter)(
                ::windows::core::Vtable::as_raw(this),
                ::core::mem::transmute_copy(key),
                value,
            )
            .ok()
        }
    }
    pub fn SetVector2Parameter(
        &self,
        key: &::windows::core::HSTRING,
        value: ::windows::Foundation::Numerics::Vector2,
    ) -> ::windows::core::Result<()> {
        let this = &::windows::core::Interface::cast::<ICompositionAnimation>(self)?;
        unsafe {
            (::windows::core::Vtable::vtable(this).SetVector2Parameter)(
                ::windows::core::Vtable::as_raw(this),
                ::core::mem::transmute_copy(key),
                value,
            )
            .ok()
        }
    }
    pub fn SetVector3Parameter(
        &self,
        key: &::windows::core::HSTRING,
        value: ::windows::Foundation::Numerics::Vector3,
    ) -> ::windows::core::Result<()> {
        let this = &::windows::core::Interface::cast::<ICompositionAnimation>(self)?;
        unsafe {
            (::windows::core::Vtable::vtable(this).SetVector3Parameter)(
                ::windows::core::Vtable::as_raw(this),
                ::core::mem::transmute_copy(key),
                value,
            )
            .ok()
        }
    }
    pub fn SetVector4Parameter(
        &self,
        key: &::windows::core::HSTRING,
        value: ::windows::Foundation::Numerics::Vector4,
    ) -> ::windows::core::Result<()> {
        let this = &::windows::core::Interface::cast::<ICompositionAnimation>(self)?;
        unsafe {
            (::windows::core::Vtable::vtable(this).SetVector4Parameter)(
                ::windows::core::Vtable::as_raw(this),
                ::core::mem::transmute_copy(key),
                value,
            )
            .ok()
        }
    }
    pub fn SetBooleanParameter(
        &self,
        key: &::windows::core::HSTRING,
        value: bool,
    ) -> ::windows::core::Result<()> {
        let this = &::windows::core::Interface::cast::<ICompositionAnimation2>(self)?;
        unsafe {
            (::windows::core::Vtable::vtable(this).SetBooleanParameter)(
                ::windows::core::Vtable::as_raw(this),
                ::core::mem::transmute_copy(key),
                value,
            )
            .ok()
        }
    }
    pub fn Target(&self) -> ::windows::core::Result<::windows::core::HSTRING> {
        let this = &::windows::core::Interface::cast::<ICompositionAnimation2>(self)?;
        unsafe {
            let mut result__ = ::core::mem::MaybeUninit::zeroed();
            (::windows::core::Vtable::vtable(this).Target)(
                ::windows::core::Vtable::as_raw(this),
                result__.as_mut_ptr(),
            )
            .from_abi::<::windows::core::HSTRING>(result__)
        }
    }
    pub fn SetTarget(&self, value: &::windows::core::HSTRING) -> ::windows::core::Result<()> {
        let this = &::windows::core::Interface::cast::<ICompositionAnimation2>(self)?;
        unsafe {
            (::windows::core::Vtable::vtable(this).SetTarget)(
                ::windows::core::Vtable::as_raw(this),
                ::core::mem::transmute_copy(value),
            )
            .ok()
        }
    }
    pub fn InitialValueExpressions(
        &self,
    ) -> ::windows::core::Result<InitialValueExpressionCollection> {
        let this = &::windows::core::Interface::cast::<ICompositionAnimation3>(self)?;
        unsafe {
            let mut result__ = ::core::mem::MaybeUninit::zeroed();
            (::windows::core::Vtable::vtable(this).InitialValueExpressions)(
                ::windows::core::Vtable::as_raw(this),
                result__.as_mut_ptr(),
            )
            .from_abi::<InitialValueExpressionCollection>(result__)
        }
    }
    pub fn SetExpressionReferenceParameter<'a, P0, E0>(
        &self,
        parametername: &::windows::core::HSTRING,
        source: P0,
    ) -> ::windows::core::Result<()>
    where
        P0: ::std::convert::TryInto<::windows::core::InParam<'a, IAnimationObject>, Error = E0>,
        E0: ::std::convert::Into<::windows::core::Error>,
    {
        let this = &::windows::core::Interface::cast::<ICompositionAnimation4>(self)?;
        unsafe {
            (::windows::core::Vtable::vtable(this).SetExpressionReferenceParameter)(
                ::windows::core::Vtable::as_raw(this),
                ::core::mem::transmute_copy(parametername),
                source.try_into().map_err(|e| e.into())?.abi(),
            )
            .ok()
        }
    }
    pub fn Compositor(&self) -> ::windows::core::Result<Compositor> {
        let this = &::windows::core::Interface::cast::<ICompositionObject>(self)?;
        unsafe {
            let mut result__ = ::core::mem::MaybeUninit::zeroed();
            (::windows::core::Vtable::vtable(this).Compositor)(
                ::windows::core::Vtable::as_raw(this),
                result__.as_mut_ptr(),
            )
            .from_abi::<Compositor>(result__)
        }
    }
    pub fn Properties(&self) -> ::windows::core::Result<CompositionPropertySet> {
        let this = &::windows::core::Interface::cast::<ICompositionObject>(self)?;
        unsafe {
            let mut result__ = ::core::mem::MaybeUninit::zeroed();
            (::windows::core::Vtable::vtable(this).Properties)(
                ::windows::core::Vtable::as_raw(this),
                result__.as_mut_ptr(),
            )
            .from_abi::<CompositionPropertySet>(result__)
        }
    }
    pub fn StartAnimation<'a, P0>(
        &self,
        propertyname: &::windows::core::HSTRING,
        animation: P0,
    ) -> ::windows::core::Result<()>
    where
        P0: ::std::convert::Into<::windows::core::InParam<'a, CompositionAnimation>>,
    {
        let this = &::windows::core::Interface::cast::<ICompositionObject>(self)?;
        unsafe {
            (::windows::core::Vtable::vtable(this).StartAnimation)(
                ::windows::core::Vtable::as_raw(this),
                ::core::mem::transmute_copy(propertyname),
                animation.into().abi(),
            )
            .ok()
        }
    }
    pub fn StopAnimation(
        &self,
        propertyname: &::windows::core::HSTRING,
    ) -> ::windows::core::Result<()> {
        let this = &::windows::core::Interface::cast::<ICompositionObject>(self)?;
        unsafe {
            (::windows::core::Vtable::vtable(this).StopAnimation)(
                ::windows::core::Vtable::as_raw(this),
                ::core::mem::transmute_copy(propertyname),
            )
            .ok()
        }
    }
    pub fn Comment(&self) -> ::windows::core::Result<::windows::core::HSTRING> {
        let this = &::windows::core::Interface::cast::<ICompositionObject2>(self)?;
        unsafe {
            let mut result__ = ::core::mem::MaybeUninit::zeroed();
            (::windows::core::Vtable::vtable(this).Comment)(
                ::windows::core::Vtable::as_raw(this),
                result__.as_mut_ptr(),
            )
            .from_abi::<::windows::core::HSTRING>(result__)
        }
    }
    pub fn SetComment(&self, value: &::windows::core::HSTRING) -> ::windows::core::Result<()> {
        let this = &::windows::core::Interface::cast::<ICompositionObject2>(self)?;
        unsafe {
            (::windows::core::Vtable::vtable(this).SetComment)(
                ::windows::core::Vtable::as_raw(this),
                ::core::mem::transmute_copy(value),
            )
            .ok()
        }
    }
    pub fn ImplicitAnimations(&self) -> ::windows::core::Result<ImplicitAnimationCollection> {
        let this = &::windows::core::Interface::cast::<ICompositionObject2>(self)?;
        unsafe {
            let mut result__ = ::core::mem::MaybeUninit::zeroed();
            (::windows::core::Vtable::vtable(this).ImplicitAnimations)(
                ::windows::core::Vtable::as_raw(this),
                result__.as_mut_ptr(),
            )
            .from_abi::<ImplicitAnimationCollection>(result__)
        }
    }
    pub fn SetImplicitAnimations(
        &self,
        value: &ImplicitAnimationCollection,
    ) -> ::windows::core::Result<()> {
        let this = &::windows::core::Interface::cast::<ICompositionObject2>(self)?;
        unsafe {
            (::windows::core::Vtable::vtable(this).SetImplicitAnimations)(
                ::windows::core::Vtable::as_raw(this),
                ::core::mem::transmute_copy(value),
            )
            .ok()
        }
    }
    pub fn StartAnimationGroup<'a, P0, E0>(&self, value: P0) -> ::windows::core::Result<()>
    where
        P0: ::std::convert::TryInto<
            ::windows::core::InParam<'a, ICompositionAnimationBase>,
            Error = E0,
        >,
        E0: ::std::convert::Into<::windows::core::Error>,
    {
        let this = &::windows::core::Interface::cast::<ICompositionObject2>(self)?;
        unsafe {
            (::windows::core::Vtable::vtable(this).StartAnimationGroup)(
                ::windows::core::Vtable::as_raw(this),
                value.try_into().map_err(|e| e.into())?.abi(),
            )
            .ok()
        }
    }
    pub fn StopAnimationGroup<'a, P0, E0>(&self, value: P0) -> ::windows::core::Result<()>
    where
        P0: ::std::convert::TryInto<
            ::windows::core::InParam<'a, ICompositionAnimationBase>,
            Error = E0,
        >,
        E0: ::std::convert::Into<::windows::core::Error>,
    {
        let this = &::windows::core::Interface::cast::<ICompositionObject2>(self)?;
        unsafe {
            (::windows::core::Vtable::vtable(this).StopAnimationGroup)(
                ::windows::core::Vtable::as_raw(this),
                value.try_into().map_err(|e| e.into())?.abi(),
            )
            .ok()
        }
    }
    #[doc = "*Required features: `\"UI_Dispatching\"`*"]
    #[cfg(feature = "UI_Dispatching")]
    pub fn DispatcherQueue(&self) -> ::windows::core::Result<super::Dispatching::DispatcherQueue> {
        let this = &::windows::core::Interface::cast::<ICompositionObject3>(self)?;
        unsafe {
            let mut result__ = ::core::mem::MaybeUninit::zeroed();
            (::windows::core::Vtable::vtable(this).DispatcherQueue)(
                ::windows::core::Vtable::as_raw(this),
                result__.as_mut_ptr(),
            )
            .from_abi::<super::Dispatching::DispatcherQueue>(result__)
        }
    }
    pub fn TryGetAnimationController(
        &self,
        propertyname: &::windows::core::HSTRING,
    ) -> ::windows::core::Result<AnimationController> {
        let this = &::windows::core::Interface::cast::<ICompositionObject4>(self)?;
        unsafe {
            let mut result__ = ::core::mem::MaybeUninit::zeroed();
            (::windows::core::Vtable::vtable(this).TryGetAnimationController)(
                ::windows::core::Vtable::as_raw(this),
                ::core::mem::transmute_copy(propertyname),
                result__.as_mut_ptr(),
            )
            .from_abi::<AnimationController>(result__)
        }
    }
    pub fn StartAnimationWithController<'a, P0>(
        &self,
        propertyname: &::windows::core::HSTRING,
        animation: P0,
        animationcontroller: &AnimationController,
    ) -> ::windows::core::Result<()>
    where
        P0: ::std::convert::Into<::windows::core::InParam<'a, CompositionAnimation>>,
    {
        let this = &::windows::core::Interface::cast::<ICompositionObject5>(self)?;
        unsafe {
            (::windows::core::Vtable::vtable(this).StartAnimationWithController)(
                ::windows::core::Vtable::as_raw(this),
                ::core::mem::transmute_copy(propertyname),
                animation.into().abi(),
                ::core::mem::transmute_copy(animationcontroller),
            )
            .ok()
        }
    }
    pub fn DelayBehavior(&self) -> ::windows::core::Result<AnimationDelayBehavior> {
        let this = &::windows::core::Interface::cast::<INaturalMotionAnimation>(self)?;
        unsafe {
            let mut result__ = ::core::mem::MaybeUninit::zeroed();
            (::windows::core::Vtable::vtable(this).DelayBehavior)(
                ::windows::core::Vtable::as_raw(this),
                result__.as_mut_ptr(),
            )
            .from_abi::<AnimationDelayBehavior>(result__)
        }
    }
    pub fn SetDelayBehavior(&self, value: AnimationDelayBehavior) -> ::windows::core::Result<()> {
        let this = &::windows::core::Interface::cast::<INaturalMotionAnimation>(self)?;
        unsafe {
            (::windows::core::Vtable::vtable(this).SetDelayBehavior)(
                ::windows::core::Vtable::as_raw(this),
                value,
            )
            .ok()
        }
    }
    pub fn DelayTime(&self) -> ::windows::core::Result<::windows::Foundation::TimeSpan> {
        let this = &::windows::core::Interface::cast::<INaturalMotionAnimation>(self)?;
        unsafe {
            let mut result__ = ::core::mem::MaybeUninit::zeroed();
            (::windows::core::Vtable::vtable(this).DelayTime)(
                ::windows::core::Vtable::as_raw(this),
                result__.as_mut_ptr(),
            )
            .from_abi::<::windows::Foundation::TimeSpan>(result__)
        }
    }
    pub fn SetDelayTime(
        &self,
        value: ::windows::Foundation::TimeSpan,
    ) -> ::windows::core::Result<()> {
        let this = &::windows::core::Interface::cast::<INaturalMotionAnimation>(self)?;
        unsafe {
            (::windows::core::Vtable::vtable(this).SetDelayTime)(
                ::windows::core::Vtable::as_raw(this),
                value,
            )
            .ok()
        }
    }
    pub fn StopBehavior(&self) -> ::windows::core::Result<AnimationStopBehavior> {
        let this = &::windows::core::Interface::cast::<INaturalMotionAnimation>(self)?;
        unsafe {
            let mut result__ = ::core::mem::MaybeUninit::zeroed();
            (::windows::core::Vtable::vtable(this).StopBehavior)(
                ::windows::core::Vtable::as_raw(this),
                result__.as_mut_ptr(),
            )
            .from_abi::<AnimationStopBehavior>(result__)
        }
    }
    pub fn SetStopBehavior(&self, value: AnimationStopBehavior) -> ::windows::core::Result<()> {
        let this = &::windows::core::Interface::cast::<INaturalMotionAnimation>(self)?;
        unsafe {
            (::windows::core::Vtable::vtable(this).SetStopBehavior)(
                ::windows::core::Vtable::as_raw(this),
                value,
            )
            .ok()
        }
    }
    pub fn FinalValue(&self) -> ::windows::core::Result<::windows::Foundation::IReference<f32>> {
        let this = &::windows::core::Interface::cast::<IScalarNaturalMotionAnimation>(self)?;
        unsafe {
            let mut result__ = ::core::mem::MaybeUninit::zeroed();
            (::windows::core::Vtable::vtable(this).FinalValue)(
                ::windows::core::Vtable::as_raw(this),
                result__.as_mut_ptr(),
            )
            .from_abi::<::windows::Foundation::IReference<f32>>(result__)
        }
    }
    pub fn SetFinalValue<'a, P0, E0>(&self, value: P0) -> ::windows::core::Result<()>
    where
        P0: ::std::convert::TryInto<
            ::windows::core::InParam<'a, ::windows::Foundation::IReference<f32>>,
            Error = E0,
        >,
        E0: ::std::convert::Into<::windows::core::Error>,
    {
        let this = &::windows::core::Interface::cast::<IScalarNaturalMotionAnimation>(self)?;
        unsafe {
            (::windows::core::Vtable::vtable(this).SetFinalValue)(
                ::windows::core::Vtable::as_raw(this),
                value.try_into().map_err(|e| e.into())?.abi(),
            )
            .ok()
        }
    }
    pub fn InitialValue(&self) -> ::windows::core::Result<::windows::Foundation::IReference<f32>> {
        let this = &::windows::core::Interface::cast::<IScalarNaturalMotionAnimation>(self)?;
        unsafe {
            let mut result__ = ::core::mem::MaybeUninit::zeroed();
            (::windows::core::Vtable::vtable(this).InitialValue)(
                ::windows::core::Vtable::as_raw(this),
                result__.as_mut_ptr(),
            )
            .from_abi::<::windows::Foundation::IReference<f32>>(result__)
        }
    }
    pub fn SetInitialValue<'a, P0, E0>(&self, value: P0) -> ::windows::core::Result<()>
    where
        P0: ::std::convert::TryInto<
            ::windows::core::InParam<'a, ::windows::Foundation::IReference<f32>>,
            Error = E0,
        >,
        E0: ::std::convert::Into<::windows::core::Error>,
    {
        let this = &::windows::core::Interface::cast::<IScalarNaturalMotionAnimation>(self)?;
        unsafe {
            (::windows::core::Vtable::vtable(this).SetInitialValue)(
                ::windows::core::Vtable::as_raw(this),
                value.try_into().map_err(|e| e.into())?.abi(),
            )
            .ok()
        }
    }
    pub fn InitialVelocity(&self) -> ::windows::core::Result<f32> {
        let this = &::windows::core::Interface::cast::<IScalarNaturalMotionAnimation>(self)?;
        unsafe {
            let mut result__ = ::core::mem::MaybeUninit::zeroed();
            (::windows::core::Vtable::vtable(this).InitialVelocity)(
                ::windows::core::Vtable::as_raw(this),
                result__.as_mut_ptr(),
            )
            .from_abi::<f32>(result__)
        }
    }
    pub fn SetInitialVelocity(&self, value: f32) -> ::windows::core::Result<()> {
        let this = &::windows::core::Interface::cast::<IScalarNaturalMotionAnimation>(self)?;
        unsafe {
            (::windows::core::Vtable::vtable(this).SetInitialVelocity)(
                ::windows::core::Vtable::as_raw(this),
                value,
            )
            .ok()
        }
    }
    pub fn DampingRatio(&self) -> ::windows::core::Result<f32> {
        let this = self;
        unsafe {
            let mut result__ = ::core::mem::MaybeUninit::zeroed();
            (::windows::core::Vtable::vtable(this).DampingRatio)(
                ::windows::core::Vtable::as_raw(this),
                result__.as_mut_ptr(),
            )
            .from_abi::<f32>(result__)
        }
    }
    pub fn SetDampingRatio(&self, value: f32) -> ::windows::core::Result<()> {
        let this = self;
        unsafe {
            (::windows::core::Vtable::vtable(this).SetDampingRatio)(
                ::windows::core::Vtable::as_raw(this),
                value,
            )
            .ok()
        }
    }
    pub fn Period(&self) -> ::windows::core::Result<::windows::Foundation::TimeSpan> {
        let this = self;
        unsafe {
            let mut result__ = ::core::mem::MaybeUninit::zeroed();
            (::windows::core::Vtable::vtable(this).Period)(
                ::windows::core::Vtable::as_raw(this),
                result__.as_mut_ptr(),
            )
            .from_abi::<::windows::Foundation::TimeSpan>(result__)
        }
    }
    pub fn SetPeriod(&self, value: ::windows::Foundation::TimeSpan) -> ::windows::core::Result<()> {
        let this = self;
        unsafe {
            (::windows::core::Vtable::vtable(this).SetPeriod)(
                ::windows::core::Vtable::as_raw(this),
                value,
            )
            .ok()
        }
    }
}
impl ::core::clone::Clone for SpringScalarNaturalMotionAnimation {
    fn clone(&self) -> Self {
        Self(self.0.clone())
    }
}
impl ::core::cmp::PartialEq for SpringScalarNaturalMotionAnimation {
    fn eq(&self, other: &Self) -> bool {
        self.0 == other.0
    }
}
impl ::core::cmp::Eq for SpringScalarNaturalMotionAnimation {}
impl ::core::fmt::Debug for SpringScalarNaturalMotionAnimation {
    fn fmt(&self, f: &mut ::core::fmt::Formatter<'_>) -> ::core::fmt::Result {
        f.debug_tuple("SpringScalarNaturalMotionAnimation").field(&self.0).finish()
    }
}
unsafe impl ::windows::core::RuntimeType for SpringScalarNaturalMotionAnimation {
    const SIGNATURE : ::windows::core::ConstBuffer = ::windows::core::ConstBuffer::from_slice ( b"rc(Microsoft.UI.Composition.SpringScalarNaturalMotionAnimation;{6f720afd-d3d0-5e78-9c2e-83092f6ea45e})" ) ;
    type DefaultType = ::core::option::Option<Self>;
    fn from_default(from: &Self::DefaultType) -> ::windows::core::Result<Self> {
        from.as_ref().cloned().ok_or(::windows::core::Error::OK)
    }
}
unsafe impl ::windows::core::Vtable for SpringScalarNaturalMotionAnimation {
    type Vtable = ISpringScalarNaturalMotionAnimation_Vtbl;
}
unsafe impl ::windows::core::Interface for SpringScalarNaturalMotionAnimation {
    const IID: ::windows::core::GUID =
        <ISpringScalarNaturalMotionAnimation as ::windows::core::Interface>::IID;
}
impl ::windows::core::RuntimeName for SpringScalarNaturalMotionAnimation {
    const NAME: &'static str = "Microsoft.UI.Composition.SpringScalarNaturalMotionAnimation";
}
::windows::core::interface_hierarchy!(
    SpringScalarNaturalMotionAnimation,
    ::windows::core::IUnknown,
    ::windows::core::IInspectable
);
impl ::core::convert::TryFrom<SpringScalarNaturalMotionAnimation> for IAnimationObject {
    type Error = ::windows::core::Error;
    fn try_from(value: SpringScalarNaturalMotionAnimation) -> ::windows::core::Result<Self> {
        ::core::convert::TryFrom::try_from(&value)
    }
}
impl ::core::convert::TryFrom<&SpringScalarNaturalMotionAnimation> for IAnimationObject {
    type Error = ::windows::core::Error;
    fn try_from(value: &SpringScalarNaturalMotionAnimation) -> ::windows::core::Result<Self> {
        ::windows::core::Interface::cast(value)
    }
}
impl<'a> ::core::convert::TryFrom<&SpringScalarNaturalMotionAnimation>
    for ::windows::core::InParam<'a, IAnimationObject>
{
    type Error = ::windows::core::Error;
    fn try_from(value: &SpringScalarNaturalMotionAnimation) -> ::windows::core::Result<Self> {
        let item = ::std::convert::TryInto::try_into(value)?;
        Ok(::windows::core::InParam::owned(item))
    }
}
impl ::core::convert::TryFrom<SpringScalarNaturalMotionAnimation>
    for ::windows::Foundation::IClosable
{
    type Error = ::windows::core::Error;
    fn try_from(value: SpringScalarNaturalMotionAnimation) -> ::windows::core::Result<Self> {
        ::core::convert::TryFrom::try_from(&value)
    }
}
impl ::core::convert::TryFrom<&SpringScalarNaturalMotionAnimation>
    for ::windows::Foundation::IClosable
{
    type Error = ::windows::core::Error;
    fn try_from(value: &SpringScalarNaturalMotionAnimation) -> ::windows::core::Result<Self> {
        ::windows::core::Interface::cast(value)
    }
}
impl<'a> ::core::convert::TryFrom<&SpringScalarNaturalMotionAnimation>
    for ::windows::core::InParam<'a, ::windows::Foundation::IClosable>
{
    type Error = ::windows::core::Error;
    fn try_from(value: &SpringScalarNaturalMotionAnimation) -> ::windows::core::Result<Self> {
        let item = ::std::convert::TryInto::try_into(value)?;
        Ok(::windows::core::InParam::owned(item))
    }
}
impl ::core::convert::TryFrom<SpringScalarNaturalMotionAnimation> for ICompositionAnimationBase {
    type Error = ::windows::core::Error;
    fn try_from(value: SpringScalarNaturalMotionAnimation) -> ::windows::core::Result<Self> {
        ::core::convert::TryFrom::try_from(&value)
    }
}
impl ::core::convert::TryFrom<&SpringScalarNaturalMotionAnimation> for ICompositionAnimationBase {
    type Error = ::windows::core::Error;
    fn try_from(value: &SpringScalarNaturalMotionAnimation) -> ::windows::core::Result<Self> {
        ::windows::core::Interface::cast(value)
    }
}
impl<'a> ::core::convert::TryFrom<&SpringScalarNaturalMotionAnimation>
    for ::windows::core::InParam<'a, ICompositionAnimationBase>
{
    type Error = ::windows::core::Error;
    fn try_from(value: &SpringScalarNaturalMotionAnimation) -> ::windows::core::Result<Self> {
        let item = ::std::convert::TryInto::try_into(value)?;
        Ok(::windows::core::InParam::owned(item))
    }
}
impl ::core::convert::From<SpringScalarNaturalMotionAnimation> for ScalarNaturalMotionAnimation {
    fn from(value: SpringScalarNaturalMotionAnimation) -> Self {
        ::core::convert::From::from(&value)
    }
}
impl ::core::convert::From<&SpringScalarNaturalMotionAnimation> for ScalarNaturalMotionAnimation {
    fn from(value: &SpringScalarNaturalMotionAnimation) -> Self {
        ::windows::core::Interface::cast(value).unwrap()
    }
}
impl<'a> ::core::convert::From<&SpringScalarNaturalMotionAnimation>
    for ::windows::core::InParam<'a, ScalarNaturalMotionAnimation>
{
    fn from(value: &SpringScalarNaturalMotionAnimation) -> Self {
        ::windows::core::InParam::owned(value.into())
    }
}
impl ::core::convert::From<SpringScalarNaturalMotionAnimation> for NaturalMotionAnimation {
    fn from(value: SpringScalarNaturalMotionAnimation) -> Self {
        ::core::convert::From::from(&value)
    }
}
impl ::core::convert::From<&SpringScalarNaturalMotionAnimation> for NaturalMotionAnimation {
    fn from(value: &SpringScalarNaturalMotionAnimation) -> Self {
        ::windows::core::Interface::cast(value).unwrap()
    }
}
impl<'a> ::core::convert::From<&SpringScalarNaturalMotionAnimation>
    for ::windows::core::InParam<'a, NaturalMotionAnimation>
{
    fn from(value: &SpringScalarNaturalMotionAnimation) -> Self {
        ::windows::core::InParam::owned(value.into())
    }
}
impl ::core::convert::From<SpringScalarNaturalMotionAnimation> for CompositionAnimation {
    fn from(value: SpringScalarNaturalMotionAnimation) -> Self {
        ::core::convert::From::from(&value)
    }
}
impl ::core::convert::From<&SpringScalarNaturalMotionAnimation> for CompositionAnimation {
    fn from(value: &SpringScalarNaturalMotionAnimation) -> Self {
        ::windows::core::Interface::cast(value).unwrap()
    }
}
impl<'a> ::core::convert::From<&SpringScalarNaturalMotionAnimation>
    for ::windows::core::InParam<'a, CompositionAnimation>
{
    fn from(value: &SpringScalarNaturalMotionAnimation) -> Self {
        ::windows::core::InParam::owned(value.into())
    }
}
impl ::core::convert::From<SpringScalarNaturalMotionAnimation> for CompositionObject {
    fn from(value: SpringScalarNaturalMotionAnimation) -> Self {
        ::core::convert::From::from(&value)
    }
}
impl ::core::convert::From<&SpringScalarNaturalMotionAnimation> for CompositionObject {
    fn from(value: &SpringScalarNaturalMotionAnimation) -> Self {
        ::windows::core::Interface::cast(value).unwrap()
    }
}
impl<'a> ::core::convert::From<&SpringScalarNaturalMotionAnimation>
    for ::windows::core::InParam<'a, CompositionObject>
{
    fn from(value: &SpringScalarNaturalMotionAnimation) -> Self {
        ::windows::core::InParam::owned(value.into())
    }
}
unsafe impl ::core::marker::Send for SpringScalarNaturalMotionAnimation {}
unsafe impl ::core::marker::Sync for SpringScalarNaturalMotionAnimation {}
#[doc = "*Required features: `\"UI_Composition\"`*"]
#[repr(transparent)]
pub struct SpringVector2NaturalMotionAnimation(::windows::core::IUnknown);
impl SpringVector2NaturalMotionAnimation {
    pub fn PopulatePropertyInfo(
        &self,
        propertyname: &::windows::core::HSTRING,
        propertyinfo: &AnimationPropertyInfo,
    ) -> ::windows::core::Result<()> {
        let this = &::windows::core::Interface::cast::<IAnimationObject>(self)?;
        unsafe {
            (::windows::core::Vtable::vtable(this).PopulatePropertyInfo)(
                ::windows::core::Vtable::as_raw(this),
                ::core::mem::transmute_copy(propertyname),
                ::core::mem::transmute_copy(propertyinfo),
            )
            .ok()
        }
    }
    pub fn Close(&self) -> ::windows::core::Result<()> {
        let this = &::windows::core::Interface::cast::<::windows::Foundation::IClosable>(self)?;
        unsafe {
            (::windows::core::Vtable::vtable(this).Close)(::windows::core::Vtable::as_raw(this))
                .ok()
        }
    }
    pub fn ClearAllParameters(&self) -> ::windows::core::Result<()> {
        let this = &::windows::core::Interface::cast::<ICompositionAnimation>(self)?;
        unsafe {
            (::windows::core::Vtable::vtable(this).ClearAllParameters)(
                ::windows::core::Vtable::as_raw(this),
            )
            .ok()
        }
    }
    pub fn ClearParameter(&self, key: &::windows::core::HSTRING) -> ::windows::core::Result<()> {
        let this = &::windows::core::Interface::cast::<ICompositionAnimation>(self)?;
        unsafe {
            (::windows::core::Vtable::vtable(this).ClearParameter)(
                ::windows::core::Vtable::as_raw(this),
                ::core::mem::transmute_copy(key),
            )
            .ok()
        }
    }
    pub fn SetColorParameter(
        &self,
        key: &::windows::core::HSTRING,
        value: ::windows::UI::Color,
    ) -> ::windows::core::Result<()> {
        let this = &::windows::core::Interface::cast::<ICompositionAnimation>(self)?;
        unsafe {
            (::windows::core::Vtable::vtable(this).SetColorParameter)(
                ::windows::core::Vtable::as_raw(this),
                ::core::mem::transmute_copy(key),
                value,
            )
            .ok()
        }
    }
    pub fn SetMatrix3x2Parameter(
        &self,
        key: &::windows::core::HSTRING,
        value: ::windows::Foundation::Numerics::Matrix3x2,
    ) -> ::windows::core::Result<()> {
        let this = &::windows::core::Interface::cast::<ICompositionAnimation>(self)?;
        unsafe {
            (::windows::core::Vtable::vtable(this).SetMatrix3x2Parameter)(
                ::windows::core::Vtable::as_raw(this),
                ::core::mem::transmute_copy(key),
                value,
            )
            .ok()
        }
    }
    pub fn SetMatrix4x4Parameter(
        &self,
        key: &::windows::core::HSTRING,
        value: ::windows::Foundation::Numerics::Matrix4x4,
    ) -> ::windows::core::Result<()> {
        let this = &::windows::core::Interface::cast::<ICompositionAnimation>(self)?;
        unsafe {
            (::windows::core::Vtable::vtable(this).SetMatrix4x4Parameter)(
                ::windows::core::Vtable::as_raw(this),
                ::core::mem::transmute_copy(key),
                value,
            )
            .ok()
        }
    }
    pub fn SetQuaternionParameter(
        &self,
        key: &::windows::core::HSTRING,
        value: ::windows::Foundation::Numerics::Quaternion,
    ) -> ::windows::core::Result<()> {
        let this = &::windows::core::Interface::cast::<ICompositionAnimation>(self)?;
        unsafe {
            (::windows::core::Vtable::vtable(this).SetQuaternionParameter)(
                ::windows::core::Vtable::as_raw(this),
                ::core::mem::transmute_copy(key),
                value,
            )
            .ok()
        }
    }
    pub fn SetReferenceParameter<'a, P0>(
        &self,
        key: &::windows::core::HSTRING,
        compositionobject: P0,
    ) -> ::windows::core::Result<()>
    where
        P0: ::std::convert::Into<::windows::core::InParam<'a, CompositionObject>>,
    {
        let this = &::windows::core::Interface::cast::<ICompositionAnimation>(self)?;
        unsafe {
            (::windows::core::Vtable::vtable(this).SetReferenceParameter)(
                ::windows::core::Vtable::as_raw(this),
                ::core::mem::transmute_copy(key),
                compositionobject.into().abi(),
            )
            .ok()
        }
    }
    pub fn SetScalarParameter(
        &self,
        key: &::windows::core::HSTRING,
        value: f32,
    ) -> ::windows::core::Result<()> {
        let this = &::windows::core::Interface::cast::<ICompositionAnimation>(self)?;
        unsafe {
            (::windows::core::Vtable::vtable(this).SetScalarParameter)(
                ::windows::core::Vtable::as_raw(this),
                ::core::mem::transmute_copy(key),
                value,
            )
            .ok()
        }
    }
    pub fn SetVector2Parameter(
        &self,
        key: &::windows::core::HSTRING,
        value: ::windows::Foundation::Numerics::Vector2,
    ) -> ::windows::core::Result<()> {
        let this = &::windows::core::Interface::cast::<ICompositionAnimation>(self)?;
        unsafe {
            (::windows::core::Vtable::vtable(this).SetVector2Parameter)(
                ::windows::core::Vtable::as_raw(this),
                ::core::mem::transmute_copy(key),
                value,
            )
            .ok()
        }
    }
    pub fn SetVector3Parameter(
        &self,
        key: &::windows::core::HSTRING,
        value: ::windows::Foundation::Numerics::Vector3,
    ) -> ::windows::core::Result<()> {
        let this = &::windows::core::Interface::cast::<ICompositionAnimation>(self)?;
        unsafe {
            (::windows::core::Vtable::vtable(this).SetVector3Parameter)(
                ::windows::core::Vtable::as_raw(this),
                ::core::mem::transmute_copy(key),
                value,
            )
            .ok()
        }
    }
    pub fn SetVector4Parameter(
        &self,
        key: &::windows::core::HSTRING,
        value: ::windows::Foundation::Numerics::Vector4,
    ) -> ::windows::core::Result<()> {
        let this = &::windows::core::Interface::cast::<ICompositionAnimation>(self)?;
        unsafe {
            (::windows::core::Vtable::vtable(this).SetVector4Parameter)(
                ::windows::core::Vtable::as_raw(this),
                ::core::mem::transmute_copy(key),
                value,
            )
            .ok()
        }
    }
    pub fn SetBooleanParameter(
        &self,
        key: &::windows::core::HSTRING,
        value: bool,
    ) -> ::windows::core::Result<()> {
        let this = &::windows::core::Interface::cast::<ICompositionAnimation2>(self)?;
        unsafe {
            (::windows::core::Vtable::vtable(this).SetBooleanParameter)(
                ::windows::core::Vtable::as_raw(this),
                ::core::mem::transmute_copy(key),
                value,
            )
            .ok()
        }
    }
    pub fn Target(&self) -> ::windows::core::Result<::windows::core::HSTRING> {
        let this = &::windows::core::Interface::cast::<ICompositionAnimation2>(self)?;
        unsafe {
            let mut result__ = ::core::mem::MaybeUninit::zeroed();
            (::windows::core::Vtable::vtable(this).Target)(
                ::windows::core::Vtable::as_raw(this),
                result__.as_mut_ptr(),
            )
            .from_abi::<::windows::core::HSTRING>(result__)
        }
    }
    pub fn SetTarget(&self, value: &::windows::core::HSTRING) -> ::windows::core::Result<()> {
        let this = &::windows::core::Interface::cast::<ICompositionAnimation2>(self)?;
        unsafe {
            (::windows::core::Vtable::vtable(this).SetTarget)(
                ::windows::core::Vtable::as_raw(this),
                ::core::mem::transmute_copy(value),
            )
            .ok()
        }
    }
    pub fn InitialValueExpressions(
        &self,
    ) -> ::windows::core::Result<InitialValueExpressionCollection> {
        let this = &::windows::core::Interface::cast::<ICompositionAnimation3>(self)?;
        unsafe {
            let mut result__ = ::core::mem::MaybeUninit::zeroed();
            (::windows::core::Vtable::vtable(this).InitialValueExpressions)(
                ::windows::core::Vtable::as_raw(this),
                result__.as_mut_ptr(),
            )
            .from_abi::<InitialValueExpressionCollection>(result__)
        }
    }
    pub fn SetExpressionReferenceParameter<'a, P0, E0>(
        &self,
        parametername: &::windows::core::HSTRING,
        source: P0,
    ) -> ::windows::core::Result<()>
    where
        P0: ::std::convert::TryInto<::windows::core::InParam<'a, IAnimationObject>, Error = E0>,
        E0: ::std::convert::Into<::windows::core::Error>,
    {
        let this = &::windows::core::Interface::cast::<ICompositionAnimation4>(self)?;
        unsafe {
            (::windows::core::Vtable::vtable(this).SetExpressionReferenceParameter)(
                ::windows::core::Vtable::as_raw(this),
                ::core::mem::transmute_copy(parametername),
                source.try_into().map_err(|e| e.into())?.abi(),
            )
            .ok()
        }
    }
    pub fn Compositor(&self) -> ::windows::core::Result<Compositor> {
        let this = &::windows::core::Interface::cast::<ICompositionObject>(self)?;
        unsafe {
            let mut result__ = ::core::mem::MaybeUninit::zeroed();
            (::windows::core::Vtable::vtable(this).Compositor)(
                ::windows::core::Vtable::as_raw(this),
                result__.as_mut_ptr(),
            )
            .from_abi::<Compositor>(result__)
        }
    }
    pub fn Properties(&self) -> ::windows::core::Result<CompositionPropertySet> {
        let this = &::windows::core::Interface::cast::<ICompositionObject>(self)?;
        unsafe {
            let mut result__ = ::core::mem::MaybeUninit::zeroed();
            (::windows::core::Vtable::vtable(this).Properties)(
                ::windows::core::Vtable::as_raw(this),
                result__.as_mut_ptr(),
            )
            .from_abi::<CompositionPropertySet>(result__)
        }
    }
    pub fn StartAnimation<'a, P0>(
        &self,
        propertyname: &::windows::core::HSTRING,
        animation: P0,
    ) -> ::windows::core::Result<()>
    where
        P0: ::std::convert::Into<::windows::core::InParam<'a, CompositionAnimation>>,
    {
        let this = &::windows::core::Interface::cast::<ICompositionObject>(self)?;
        unsafe {
            (::windows::core::Vtable::vtable(this).StartAnimation)(
                ::windows::core::Vtable::as_raw(this),
                ::core::mem::transmute_copy(propertyname),
                animation.into().abi(),
            )
            .ok()
        }
    }
    pub fn StopAnimation(
        &self,
        propertyname: &::windows::core::HSTRING,
    ) -> ::windows::core::Result<()> {
        let this = &::windows::core::Interface::cast::<ICompositionObject>(self)?;
        unsafe {
            (::windows::core::Vtable::vtable(this).StopAnimation)(
                ::windows::core::Vtable::as_raw(this),
                ::core::mem::transmute_copy(propertyname),
            )
            .ok()
        }
    }
    pub fn Comment(&self) -> ::windows::core::Result<::windows::core::HSTRING> {
        let this = &::windows::core::Interface::cast::<ICompositionObject2>(self)?;
        unsafe {
            let mut result__ = ::core::mem::MaybeUninit::zeroed();
            (::windows::core::Vtable::vtable(this).Comment)(
                ::windows::core::Vtable::as_raw(this),
                result__.as_mut_ptr(),
            )
            .from_abi::<::windows::core::HSTRING>(result__)
        }
    }
    pub fn SetComment(&self, value: &::windows::core::HSTRING) -> ::windows::core::Result<()> {
        let this = &::windows::core::Interface::cast::<ICompositionObject2>(self)?;
        unsafe {
            (::windows::core::Vtable::vtable(this).SetComment)(
                ::windows::core::Vtable::as_raw(this),
                ::core::mem::transmute_copy(value),
            )
            .ok()
        }
    }
    pub fn ImplicitAnimations(&self) -> ::windows::core::Result<ImplicitAnimationCollection> {
        let this = &::windows::core::Interface::cast::<ICompositionObject2>(self)?;
        unsafe {
            let mut result__ = ::core::mem::MaybeUninit::zeroed();
            (::windows::core::Vtable::vtable(this).ImplicitAnimations)(
                ::windows::core::Vtable::as_raw(this),
                result__.as_mut_ptr(),
            )
            .from_abi::<ImplicitAnimationCollection>(result__)
        }
    }
    pub fn SetImplicitAnimations(
        &self,
        value: &ImplicitAnimationCollection,
    ) -> ::windows::core::Result<()> {
        let this = &::windows::core::Interface::cast::<ICompositionObject2>(self)?;
        unsafe {
            (::windows::core::Vtable::vtable(this).SetImplicitAnimations)(
                ::windows::core::Vtable::as_raw(this),
                ::core::mem::transmute_copy(value),
            )
            .ok()
        }
    }
    pub fn StartAnimationGroup<'a, P0, E0>(&self, value: P0) -> ::windows::core::Result<()>
    where
        P0: ::std::convert::TryInto<
            ::windows::core::InParam<'a, ICompositionAnimationBase>,
            Error = E0,
        >,
        E0: ::std::convert::Into<::windows::core::Error>,
    {
        let this = &::windows::core::Interface::cast::<ICompositionObject2>(self)?;
        unsafe {
            (::windows::core::Vtable::vtable(this).StartAnimationGroup)(
                ::windows::core::Vtable::as_raw(this),
                value.try_into().map_err(|e| e.into())?.abi(),
            )
            .ok()
        }
    }
    pub fn StopAnimationGroup<'a, P0, E0>(&self, value: P0) -> ::windows::core::Result<()>
    where
        P0: ::std::convert::TryInto<
            ::windows::core::InParam<'a, ICompositionAnimationBase>,
            Error = E0,
        >,
        E0: ::std::convert::Into<::windows::core::Error>,
    {
        let this = &::windows::core::Interface::cast::<ICompositionObject2>(self)?;
        unsafe {
            (::windows::core::Vtable::vtable(this).StopAnimationGroup)(
                ::windows::core::Vtable::as_raw(this),
                value.try_into().map_err(|e| e.into())?.abi(),
            )
            .ok()
        }
    }
    #[doc = "*Required features: `\"UI_Dispatching\"`*"]
    #[cfg(feature = "UI_Dispatching")]
    pub fn DispatcherQueue(&self) -> ::windows::core::Result<super::Dispatching::DispatcherQueue> {
        let this = &::windows::core::Interface::cast::<ICompositionObject3>(self)?;
        unsafe {
            let mut result__ = ::core::mem::MaybeUninit::zeroed();
            (::windows::core::Vtable::vtable(this).DispatcherQueue)(
                ::windows::core::Vtable::as_raw(this),
                result__.as_mut_ptr(),
            )
            .from_abi::<super::Dispatching::DispatcherQueue>(result__)
        }
    }
    pub fn TryGetAnimationController(
        &self,
        propertyname: &::windows::core::HSTRING,
    ) -> ::windows::core::Result<AnimationController> {
        let this = &::windows::core::Interface::cast::<ICompositionObject4>(self)?;
        unsafe {
            let mut result__ = ::core::mem::MaybeUninit::zeroed();
            (::windows::core::Vtable::vtable(this).TryGetAnimationController)(
                ::windows::core::Vtable::as_raw(this),
                ::core::mem::transmute_copy(propertyname),
                result__.as_mut_ptr(),
            )
            .from_abi::<AnimationController>(result__)
        }
    }
    pub fn StartAnimationWithController<'a, P0>(
        &self,
        propertyname: &::windows::core::HSTRING,
        animation: P0,
        animationcontroller: &AnimationController,
    ) -> ::windows::core::Result<()>
    where
        P0: ::std::convert::Into<::windows::core::InParam<'a, CompositionAnimation>>,
    {
        let this = &::windows::core::Interface::cast::<ICompositionObject5>(self)?;
        unsafe {
            (::windows::core::Vtable::vtable(this).StartAnimationWithController)(
                ::windows::core::Vtable::as_raw(this),
                ::core::mem::transmute_copy(propertyname),
                animation.into().abi(),
                ::core::mem::transmute_copy(animationcontroller),
            )
            .ok()
        }
    }
    pub fn DelayBehavior(&self) -> ::windows::core::Result<AnimationDelayBehavior> {
        let this = &::windows::core::Interface::cast::<INaturalMotionAnimation>(self)?;
        unsafe {
            let mut result__ = ::core::mem::MaybeUninit::zeroed();
            (::windows::core::Vtable::vtable(this).DelayBehavior)(
                ::windows::core::Vtable::as_raw(this),
                result__.as_mut_ptr(),
            )
            .from_abi::<AnimationDelayBehavior>(result__)
        }
    }
    pub fn SetDelayBehavior(&self, value: AnimationDelayBehavior) -> ::windows::core::Result<()> {
        let this = &::windows::core::Interface::cast::<INaturalMotionAnimation>(self)?;
        unsafe {
            (::windows::core::Vtable::vtable(this).SetDelayBehavior)(
                ::windows::core::Vtable::as_raw(this),
                value,
            )
            .ok()
        }
    }
    pub fn DelayTime(&self) -> ::windows::core::Result<::windows::Foundation::TimeSpan> {
        let this = &::windows::core::Interface::cast::<INaturalMotionAnimation>(self)?;
        unsafe {
            let mut result__ = ::core::mem::MaybeUninit::zeroed();
            (::windows::core::Vtable::vtable(this).DelayTime)(
                ::windows::core::Vtable::as_raw(this),
                result__.as_mut_ptr(),
            )
            .from_abi::<::windows::Foundation::TimeSpan>(result__)
        }
    }
    pub fn SetDelayTime(
        &self,
        value: ::windows::Foundation::TimeSpan,
    ) -> ::windows::core::Result<()> {
        let this = &::windows::core::Interface::cast::<INaturalMotionAnimation>(self)?;
        unsafe {
            (::windows::core::Vtable::vtable(this).SetDelayTime)(
                ::windows::core::Vtable::as_raw(this),
                value,
            )
            .ok()
        }
    }
    pub fn StopBehavior(&self) -> ::windows::core::Result<AnimationStopBehavior> {
        let this = &::windows::core::Interface::cast::<INaturalMotionAnimation>(self)?;
        unsafe {
            let mut result__ = ::core::mem::MaybeUninit::zeroed();
            (::windows::core::Vtable::vtable(this).StopBehavior)(
                ::windows::core::Vtable::as_raw(this),
                result__.as_mut_ptr(),
            )
            .from_abi::<AnimationStopBehavior>(result__)
        }
    }
    pub fn SetStopBehavior(&self, value: AnimationStopBehavior) -> ::windows::core::Result<()> {
        let this = &::windows::core::Interface::cast::<INaturalMotionAnimation>(self)?;
        unsafe {
            (::windows::core::Vtable::vtable(this).SetStopBehavior)(
                ::windows::core::Vtable::as_raw(this),
                value,
            )
            .ok()
        }
    }
    pub fn DampingRatio(&self) -> ::windows::core::Result<f32> {
        let this = self;
        unsafe {
            let mut result__ = ::core::mem::MaybeUninit::zeroed();
            (::windows::core::Vtable::vtable(this).DampingRatio)(
                ::windows::core::Vtable::as_raw(this),
                result__.as_mut_ptr(),
            )
            .from_abi::<f32>(result__)
        }
    }
    pub fn SetDampingRatio(&self, value: f32) -> ::windows::core::Result<()> {
        let this = self;
        unsafe {
            (::windows::core::Vtable::vtable(this).SetDampingRatio)(
                ::windows::core::Vtable::as_raw(this),
                value,
            )
            .ok()
        }
    }
    pub fn Period(&self) -> ::windows::core::Result<::windows::Foundation::TimeSpan> {
        let this = self;
        unsafe {
            let mut result__ = ::core::mem::MaybeUninit::zeroed();
            (::windows::core::Vtable::vtable(this).Period)(
                ::windows::core::Vtable::as_raw(this),
                result__.as_mut_ptr(),
            )
            .from_abi::<::windows::Foundation::TimeSpan>(result__)
        }
    }
    pub fn SetPeriod(&self, value: ::windows::Foundation::TimeSpan) -> ::windows::core::Result<()> {
        let this = self;
        unsafe {
            (::windows::core::Vtable::vtable(this).SetPeriod)(
                ::windows::core::Vtable::as_raw(this),
                value,
            )
            .ok()
        }
    }
    pub fn FinalValue(
        &self,
    ) -> ::windows::core::Result<
        ::windows::Foundation::IReference<::windows::Foundation::Numerics::Vector2>,
    > {
        let this = &::windows::core::Interface::cast::<IVector2NaturalMotionAnimation>(self)?;
        unsafe {
            let mut result__ = ::core::mem::MaybeUninit::zeroed();
            ( ::windows::core::Vtable::vtable ( this ) . FinalValue ) ( ::windows::core::Vtable::as_raw ( this ) , result__ . as_mut_ptr ( ) ) . from_abi:: < ::windows::Foundation:: IReference :: < ::windows::Foundation::Numerics:: Vector2 > > ( result__ )
        }
    }
    pub fn SetFinalValue<'a, P0, E0>(&self, value: P0) -> ::windows::core::Result<()>
    where
        P0: ::std::convert::TryInto<
            ::windows::core::InParam<
                'a,
                ::windows::Foundation::IReference<::windows::Foundation::Numerics::Vector2>,
            >,
            Error = E0,
        >,
        E0: ::std::convert::Into<::windows::core::Error>,
    {
        let this = &::windows::core::Interface::cast::<IVector2NaturalMotionAnimation>(self)?;
        unsafe {
            (::windows::core::Vtable::vtable(this).SetFinalValue)(
                ::windows::core::Vtable::as_raw(this),
                value.try_into().map_err(|e| e.into())?.abi(),
            )
            .ok()
        }
    }
    pub fn InitialValue(
        &self,
    ) -> ::windows::core::Result<
        ::windows::Foundation::IReference<::windows::Foundation::Numerics::Vector2>,
    > {
        let this = &::windows::core::Interface::cast::<IVector2NaturalMotionAnimation>(self)?;
        unsafe {
            let mut result__ = ::core::mem::MaybeUninit::zeroed();
            ( ::windows::core::Vtable::vtable ( this ) . InitialValue ) ( ::windows::core::Vtable::as_raw ( this ) , result__ . as_mut_ptr ( ) ) . from_abi:: < ::windows::Foundation:: IReference :: < ::windows::Foundation::Numerics:: Vector2 > > ( result__ )
        }
    }
    pub fn SetInitialValue<'a, P0, E0>(&self, value: P0) -> ::windows::core::Result<()>
    where
        P0: ::std::convert::TryInto<
            ::windows::core::InParam<
                'a,
                ::windows::Foundation::IReference<::windows::Foundation::Numerics::Vector2>,
            >,
            Error = E0,
        >,
        E0: ::std::convert::Into<::windows::core::Error>,
    {
        let this = &::windows::core::Interface::cast::<IVector2NaturalMotionAnimation>(self)?;
        unsafe {
            (::windows::core::Vtable::vtable(this).SetInitialValue)(
                ::windows::core::Vtable::as_raw(this),
                value.try_into().map_err(|e| e.into())?.abi(),
            )
            .ok()
        }
    }
    pub fn InitialVelocity(
        &self,
    ) -> ::windows::core::Result<::windows::Foundation::Numerics::Vector2> {
        let this = &::windows::core::Interface::cast::<IVector2NaturalMotionAnimation>(self)?;
        unsafe {
            let mut result__ = ::core::mem::MaybeUninit::zeroed();
            (::windows::core::Vtable::vtable(this).InitialVelocity)(
                ::windows::core::Vtable::as_raw(this),
                result__.as_mut_ptr(),
            )
            .from_abi::<::windows::Foundation::Numerics::Vector2>(result__)
        }
    }
    pub fn SetInitialVelocity(
        &self,
        value: ::windows::Foundation::Numerics::Vector2,
    ) -> ::windows::core::Result<()> {
        let this = &::windows::core::Interface::cast::<IVector2NaturalMotionAnimation>(self)?;
        unsafe {
            (::windows::core::Vtable::vtable(this).SetInitialVelocity)(
                ::windows::core::Vtable::as_raw(this),
                value,
            )
            .ok()
        }
    }
}
impl ::core::clone::Clone for SpringVector2NaturalMotionAnimation {
    fn clone(&self) -> Self {
        Self(self.0.clone())
    }
}
impl ::core::cmp::PartialEq for SpringVector2NaturalMotionAnimation {
    fn eq(&self, other: &Self) -> bool {
        self.0 == other.0
    }
}
impl ::core::cmp::Eq for SpringVector2NaturalMotionAnimation {}
impl ::core::fmt::Debug for SpringVector2NaturalMotionAnimation {
    fn fmt(&self, f: &mut ::core::fmt::Formatter<'_>) -> ::core::fmt::Result {
        f.debug_tuple("SpringVector2NaturalMotionAnimation").field(&self.0).finish()
    }
}
unsafe impl ::windows::core::RuntimeType for SpringVector2NaturalMotionAnimation {
    const SIGNATURE : ::windows::core::ConstBuffer = ::windows::core::ConstBuffer::from_slice ( b"rc(Microsoft.UI.Composition.SpringVector2NaturalMotionAnimation;{5b4580a4-2594-521e-b288-eaf2c2a16a66})" ) ;
    type DefaultType = ::core::option::Option<Self>;
    fn from_default(from: &Self::DefaultType) -> ::windows::core::Result<Self> {
        from.as_ref().cloned().ok_or(::windows::core::Error::OK)
    }
}
unsafe impl ::windows::core::Vtable for SpringVector2NaturalMotionAnimation {
    type Vtable = ISpringVector2NaturalMotionAnimation_Vtbl;
}
unsafe impl ::windows::core::Interface for SpringVector2NaturalMotionAnimation {
    const IID: ::windows::core::GUID =
        <ISpringVector2NaturalMotionAnimation as ::windows::core::Interface>::IID;
}
impl ::windows::core::RuntimeName for SpringVector2NaturalMotionAnimation {
    const NAME: &'static str = "Microsoft.UI.Composition.SpringVector2NaturalMotionAnimation";
}
::windows::core::interface_hierarchy!(
    SpringVector2NaturalMotionAnimation,
    ::windows::core::IUnknown,
    ::windows::core::IInspectable
);
impl ::core::convert::TryFrom<SpringVector2NaturalMotionAnimation> for IAnimationObject {
    type Error = ::windows::core::Error;
    fn try_from(value: SpringVector2NaturalMotionAnimation) -> ::windows::core::Result<Self> {
        ::core::convert::TryFrom::try_from(&value)
    }
}
impl ::core::convert::TryFrom<&SpringVector2NaturalMotionAnimation> for IAnimationObject {
    type Error = ::windows::core::Error;
    fn try_from(value: &SpringVector2NaturalMotionAnimation) -> ::windows::core::Result<Self> {
        ::windows::core::Interface::cast(value)
    }
}
impl<'a> ::core::convert::TryFrom<&SpringVector2NaturalMotionAnimation>
    for ::windows::core::InParam<'a, IAnimationObject>
{
    type Error = ::windows::core::Error;
    fn try_from(value: &SpringVector2NaturalMotionAnimation) -> ::windows::core::Result<Self> {
        let item = ::std::convert::TryInto::try_into(value)?;
        Ok(::windows::core::InParam::owned(item))
    }
}
impl ::core::convert::TryFrom<SpringVector2NaturalMotionAnimation>
    for ::windows::Foundation::IClosable
{
    type Error = ::windows::core::Error;
    fn try_from(value: SpringVector2NaturalMotionAnimation) -> ::windows::core::Result<Self> {
        ::core::convert::TryFrom::try_from(&value)
    }
}
impl ::core::convert::TryFrom<&SpringVector2NaturalMotionAnimation>
    for ::windows::Foundation::IClosable
{
    type Error = ::windows::core::Error;
    fn try_from(value: &SpringVector2NaturalMotionAnimation) -> ::windows::core::Result<Self> {
        ::windows::core::Interface::cast(value)
    }
}
impl<'a> ::core::convert::TryFrom<&SpringVector2NaturalMotionAnimation>
    for ::windows::core::InParam<'a, ::windows::Foundation::IClosable>
{
    type Error = ::windows::core::Error;
    fn try_from(value: &SpringVector2NaturalMotionAnimation) -> ::windows::core::Result<Self> {
        let item = ::std::convert::TryInto::try_into(value)?;
        Ok(::windows::core::InParam::owned(item))
    }
}
impl ::core::convert::TryFrom<SpringVector2NaturalMotionAnimation> for ICompositionAnimationBase {
    type Error = ::windows::core::Error;
    fn try_from(value: SpringVector2NaturalMotionAnimation) -> ::windows::core::Result<Self> {
        ::core::convert::TryFrom::try_from(&value)
    }
}
impl ::core::convert::TryFrom<&SpringVector2NaturalMotionAnimation> for ICompositionAnimationBase {
    type Error = ::windows::core::Error;
    fn try_from(value: &SpringVector2NaturalMotionAnimation) -> ::windows::core::Result<Self> {
        ::windows::core::Interface::cast(value)
    }
}
impl<'a> ::core::convert::TryFrom<&SpringVector2NaturalMotionAnimation>
    for ::windows::core::InParam<'a, ICompositionAnimationBase>
{
    type Error = ::windows::core::Error;
    fn try_from(value: &SpringVector2NaturalMotionAnimation) -> ::windows::core::Result<Self> {
        let item = ::std::convert::TryInto::try_into(value)?;
        Ok(::windows::core::InParam::owned(item))
    }
}
impl ::core::convert::From<SpringVector2NaturalMotionAnimation> for Vector2NaturalMotionAnimation {
    fn from(value: SpringVector2NaturalMotionAnimation) -> Self {
        ::core::convert::From::from(&value)
    }
}
impl ::core::convert::From<&SpringVector2NaturalMotionAnimation> for Vector2NaturalMotionAnimation {
    fn from(value: &SpringVector2NaturalMotionAnimation) -> Self {
        ::windows::core::Interface::cast(value).unwrap()
    }
}
impl<'a> ::core::convert::From<&SpringVector2NaturalMotionAnimation>
    for ::windows::core::InParam<'a, Vector2NaturalMotionAnimation>
{
    fn from(value: &SpringVector2NaturalMotionAnimation) -> Self {
        ::windows::core::InParam::owned(value.into())
    }
}
impl ::core::convert::From<SpringVector2NaturalMotionAnimation> for NaturalMotionAnimation {
    fn from(value: SpringVector2NaturalMotionAnimation) -> Self {
        ::core::convert::From::from(&value)
    }
}
impl ::core::convert::From<&SpringVector2NaturalMotionAnimation> for NaturalMotionAnimation {
    fn from(value: &SpringVector2NaturalMotionAnimation) -> Self {
        ::windows::core::Interface::cast(value).unwrap()
    }
}
impl<'a> ::core::convert::From<&SpringVector2NaturalMotionAnimation>
    for ::windows::core::InParam<'a, NaturalMotionAnimation>
{
    fn from(value: &SpringVector2NaturalMotionAnimation) -> Self {
        ::windows::core::InParam::owned(value.into())
    }
}
impl ::core::convert::From<SpringVector2NaturalMotionAnimation> for CompositionAnimation {
    fn from(value: SpringVector2NaturalMotionAnimation) -> Self {
        ::core::convert::From::from(&value)
    }
}
impl ::core::convert::From<&SpringVector2NaturalMotionAnimation> for CompositionAnimation {
    fn from(value: &SpringVector2NaturalMotionAnimation) -> Self {
        ::windows::core::Interface::cast(value).unwrap()
    }
}
impl<'a> ::core::convert::From<&SpringVector2NaturalMotionAnimation>
    for ::windows::core::InParam<'a, CompositionAnimation>
{
    fn from(value: &SpringVector2NaturalMotionAnimation) -> Self {
        ::windows::core::InParam::owned(value.into())
    }
}
impl ::core::convert::From<SpringVector2NaturalMotionAnimation> for CompositionObject {
    fn from(value: SpringVector2NaturalMotionAnimation) -> Self {
        ::core::convert::From::from(&value)
    }
}
impl ::core::convert::From<&SpringVector2NaturalMotionAnimation> for CompositionObject {
    fn from(value: &SpringVector2NaturalMotionAnimation) -> Self {
        ::windows::core::Interface::cast(value).unwrap()
    }
}
impl<'a> ::core::convert::From<&SpringVector2NaturalMotionAnimation>
    for ::windows::core::InParam<'a, CompositionObject>
{
    fn from(value: &SpringVector2NaturalMotionAnimation) -> Self {
        ::windows::core::InParam::owned(value.into())
    }
}
unsafe impl ::core::marker::Send for SpringVector2NaturalMotionAnimation {}
unsafe impl ::core::marker::Sync for SpringVector2NaturalMotionAnimation {}
#[doc = "*Required features: `\"UI_Composition\"`*"]
#[repr(transparent)]
pub struct SpringVector3NaturalMotionAnimation(::windows::core::IUnknown);
impl SpringVector3NaturalMotionAnimation {
    pub fn PopulatePropertyInfo(
        &self,
        propertyname: &::windows::core::HSTRING,
        propertyinfo: &AnimationPropertyInfo,
    ) -> ::windows::core::Result<()> {
        let this = &::windows::core::Interface::cast::<IAnimationObject>(self)?;
        unsafe {
            (::windows::core::Vtable::vtable(this).PopulatePropertyInfo)(
                ::windows::core::Vtable::as_raw(this),
                ::core::mem::transmute_copy(propertyname),
                ::core::mem::transmute_copy(propertyinfo),
            )
            .ok()
        }
    }
    pub fn Close(&self) -> ::windows::core::Result<()> {
        let this = &::windows::core::Interface::cast::<::windows::Foundation::IClosable>(self)?;
        unsafe {
            (::windows::core::Vtable::vtable(this).Close)(::windows::core::Vtable::as_raw(this))
                .ok()
        }
    }
    pub fn ClearAllParameters(&self) -> ::windows::core::Result<()> {
        let this = &::windows::core::Interface::cast::<ICompositionAnimation>(self)?;
        unsafe {
            (::windows::core::Vtable::vtable(this).ClearAllParameters)(
                ::windows::core::Vtable::as_raw(this),
            )
            .ok()
        }
    }
    pub fn ClearParameter(&self, key: &::windows::core::HSTRING) -> ::windows::core::Result<()> {
        let this = &::windows::core::Interface::cast::<ICompositionAnimation>(self)?;
        unsafe {
            (::windows::core::Vtable::vtable(this).ClearParameter)(
                ::windows::core::Vtable::as_raw(this),
                ::core::mem::transmute_copy(key),
            )
            .ok()
        }
    }
    pub fn SetColorParameter(
        &self,
        key: &::windows::core::HSTRING,
        value: ::windows::UI::Color,
    ) -> ::windows::core::Result<()> {
        let this = &::windows::core::Interface::cast::<ICompositionAnimation>(self)?;
        unsafe {
            (::windows::core::Vtable::vtable(this).SetColorParameter)(
                ::windows::core::Vtable::as_raw(this),
                ::core::mem::transmute_copy(key),
                value,
            )
            .ok()
        }
    }
    pub fn SetMatrix3x2Parameter(
        &self,
        key: &::windows::core::HSTRING,
        value: ::windows::Foundation::Numerics::Matrix3x2,
    ) -> ::windows::core::Result<()> {
        let this = &::windows::core::Interface::cast::<ICompositionAnimation>(self)?;
        unsafe {
            (::windows::core::Vtable::vtable(this).SetMatrix3x2Parameter)(
                ::windows::core::Vtable::as_raw(this),
                ::core::mem::transmute_copy(key),
                value,
            )
            .ok()
        }
    }
    pub fn SetMatrix4x4Parameter(
        &self,
        key: &::windows::core::HSTRING,
        value: ::windows::Foundation::Numerics::Matrix4x4,
    ) -> ::windows::core::Result<()> {
        let this = &::windows::core::Interface::cast::<ICompositionAnimation>(self)?;
        unsafe {
            (::windows::core::Vtable::vtable(this).SetMatrix4x4Parameter)(
                ::windows::core::Vtable::as_raw(this),
                ::core::mem::transmute_copy(key),
                value,
            )
            .ok()
        }
    }
    pub fn SetQuaternionParameter(
        &self,
        key: &::windows::core::HSTRING,
        value: ::windows::Foundation::Numerics::Quaternion,
    ) -> ::windows::core::Result<()> {
        let this = &::windows::core::Interface::cast::<ICompositionAnimation>(self)?;
        unsafe {
            (::windows::core::Vtable::vtable(this).SetQuaternionParameter)(
                ::windows::core::Vtable::as_raw(this),
                ::core::mem::transmute_copy(key),
                value,
            )
            .ok()
        }
    }
    pub fn SetReferenceParameter<'a, P0>(
        &self,
        key: &::windows::core::HSTRING,
        compositionobject: P0,
    ) -> ::windows::core::Result<()>
    where
        P0: ::std::convert::Into<::windows::core::InParam<'a, CompositionObject>>,
    {
        let this = &::windows::core::Interface::cast::<ICompositionAnimation>(self)?;
        unsafe {
            (::windows::core::Vtable::vtable(this).SetReferenceParameter)(
                ::windows::core::Vtable::as_raw(this),
                ::core::mem::transmute_copy(key),
                compositionobject.into().abi(),
            )
            .ok()
        }
    }
    pub fn SetScalarParameter(
        &self,
        key: &::windows::core::HSTRING,
        value: f32,
    ) -> ::windows::core::Result<()> {
        let this = &::windows::core::Interface::cast::<ICompositionAnimation>(self)?;
        unsafe {
            (::windows::core::Vtable::vtable(this).SetScalarParameter)(
                ::windows::core::Vtable::as_raw(this),
                ::core::mem::transmute_copy(key),
                value,
            )
            .ok()
        }
    }
    pub fn SetVector2Parameter(
        &self,
        key: &::windows::core::HSTRING,
        value: ::windows::Foundation::Numerics::Vector2,
    ) -> ::windows::core::Result<()> {
        let this = &::windows::core::Interface::cast::<ICompositionAnimation>(self)?;
        unsafe {
            (::windows::core::Vtable::vtable(this).SetVector2Parameter)(
                ::windows::core::Vtable::as_raw(this),
                ::core::mem::transmute_copy(key),
                value,
            )
            .ok()
        }
    }
    pub fn SetVector3Parameter(
        &self,
        key: &::windows::core::HSTRING,
        value: ::windows::Foundation::Numerics::Vector3,
    ) -> ::windows::core::Result<()> {
        let this = &::windows::core::Interface::cast::<ICompositionAnimation>(self)?;
        unsafe {
            (::windows::core::Vtable::vtable(this).SetVector3Parameter)(
                ::windows::core::Vtable::as_raw(this),
                ::core::mem::transmute_copy(key),
                value,
            )
            .ok()
        }
    }
    pub fn SetVector4Parameter(
        &self,
        key: &::windows::core::HSTRING,
        value: ::windows::Foundation::Numerics::Vector4,
    ) -> ::windows::core::Result<()> {
        let this = &::windows::core::Interface::cast::<ICompositionAnimation>(self)?;
        unsafe {
            (::windows::core::Vtable::vtable(this).SetVector4Parameter)(
                ::windows::core::Vtable::as_raw(this),
                ::core::mem::transmute_copy(key),
                value,
            )
            .ok()
        }
    }
    pub fn SetBooleanParameter(
        &self,
        key: &::windows::core::HSTRING,
        value: bool,
    ) -> ::windows::core::Result<()> {
        let this = &::windows::core::Interface::cast::<ICompositionAnimation2>(self)?;
        unsafe {
            (::windows::core::Vtable::vtable(this).SetBooleanParameter)(
                ::windows::core::Vtable::as_raw(this),
                ::core::mem::transmute_copy(key),
                value,
            )
            .ok()
        }
    }
    pub fn Target(&self) -> ::windows::core::Result<::windows::core::HSTRING> {
        let this = &::windows::core::Interface::cast::<ICompositionAnimation2>(self)?;
        unsafe {
            let mut result__ = ::core::mem::MaybeUninit::zeroed();
            (::windows::core::Vtable::vtable(this).Target)(
                ::windows::core::Vtable::as_raw(this),
                result__.as_mut_ptr(),
            )
            .from_abi::<::windows::core::HSTRING>(result__)
        }
    }
    pub fn SetTarget(&self, value: &::windows::core::HSTRING) -> ::windows::core::Result<()> {
        let this = &::windows::core::Interface::cast::<ICompositionAnimation2>(self)?;
        unsafe {
            (::windows::core::Vtable::vtable(this).SetTarget)(
                ::windows::core::Vtable::as_raw(this),
                ::core::mem::transmute_copy(value),
            )
            .ok()
        }
    }
    pub fn InitialValueExpressions(
        &self,
    ) -> ::windows::core::Result<InitialValueExpressionCollection> {
        let this = &::windows::core::Interface::cast::<ICompositionAnimation3>(self)?;
        unsafe {
            let mut result__ = ::core::mem::MaybeUninit::zeroed();
            (::windows::core::Vtable::vtable(this).InitialValueExpressions)(
                ::windows::core::Vtable::as_raw(this),
                result__.as_mut_ptr(),
            )
            .from_abi::<InitialValueExpressionCollection>(result__)
        }
    }
    pub fn SetExpressionReferenceParameter<'a, P0, E0>(
        &self,
        parametername: &::windows::core::HSTRING,
        source: P0,
    ) -> ::windows::core::Result<()>
    where
        P0: ::std::convert::TryInto<::windows::core::InParam<'a, IAnimationObject>, Error = E0>,
        E0: ::std::convert::Into<::windows::core::Error>,
    {
        let this = &::windows::core::Interface::cast::<ICompositionAnimation4>(self)?;
        unsafe {
            (::windows::core::Vtable::vtable(this).SetExpressionReferenceParameter)(
                ::windows::core::Vtable::as_raw(this),
                ::core::mem::transmute_copy(parametername),
                source.try_into().map_err(|e| e.into())?.abi(),
            )
            .ok()
        }
    }
    pub fn Compositor(&self) -> ::windows::core::Result<Compositor> {
        let this = &::windows::core::Interface::cast::<ICompositionObject>(self)?;
        unsafe {
            let mut result__ = ::core::mem::MaybeUninit::zeroed();
            (::windows::core::Vtable::vtable(this).Compositor)(
                ::windows::core::Vtable::as_raw(this),
                result__.as_mut_ptr(),
            )
            .from_abi::<Compositor>(result__)
        }
    }
    pub fn Properties(&self) -> ::windows::core::Result<CompositionPropertySet> {
        let this = &::windows::core::Interface::cast::<ICompositionObject>(self)?;
        unsafe {
            let mut result__ = ::core::mem::MaybeUninit::zeroed();
            (::windows::core::Vtable::vtable(this).Properties)(
                ::windows::core::Vtable::as_raw(this),
                result__.as_mut_ptr(),
            )
            .from_abi::<CompositionPropertySet>(result__)
        }
    }
    pub fn StartAnimation<'a, P0>(
        &self,
        propertyname: &::windows::core::HSTRING,
        animation: P0,
    ) -> ::windows::core::Result<()>
    where
        P0: ::std::convert::Into<::windows::core::InParam<'a, CompositionAnimation>>,
    {
        let this = &::windows::core::Interface::cast::<ICompositionObject>(self)?;
        unsafe {
            (::windows::core::Vtable::vtable(this).StartAnimation)(
                ::windows::core::Vtable::as_raw(this),
                ::core::mem::transmute_copy(propertyname),
                animation.into().abi(),
            )
            .ok()
        }
    }
    pub fn StopAnimation(
        &self,
        propertyname: &::windows::core::HSTRING,
    ) -> ::windows::core::Result<()> {
        let this = &::windows::core::Interface::cast::<ICompositionObject>(self)?;
        unsafe {
            (::windows::core::Vtable::vtable(this).StopAnimation)(
                ::windows::core::Vtable::as_raw(this),
                ::core::mem::transmute_copy(propertyname),
            )
            .ok()
        }
    }
    pub fn Comment(&self) -> ::windows::core::Result<::windows::core::HSTRING> {
        let this = &::windows::core::Interface::cast::<ICompositionObject2>(self)?;
        unsafe {
            let mut result__ = ::core::mem::MaybeUninit::zeroed();
            (::windows::core::Vtable::vtable(this).Comment)(
                ::windows::core::Vtable::as_raw(this),
                result__.as_mut_ptr(),
            )
            .from_abi::<::windows::core::HSTRING>(result__)
        }
    }
    pub fn SetComment(&self, value: &::windows::core::HSTRING) -> ::windows::core::Result<()> {
        let this = &::windows::core::Interface::cast::<ICompositionObject2>(self)?;
        unsafe {
            (::windows::core::Vtable::vtable(this).SetComment)(
                ::windows::core::Vtable::as_raw(this),
                ::core::mem::transmute_copy(value),
            )
            .ok()
        }
    }
    pub fn ImplicitAnimations(&self) -> ::windows::core::Result<ImplicitAnimationCollection> {
        let this = &::windows::core::Interface::cast::<ICompositionObject2>(self)?;
        unsafe {
            let mut result__ = ::core::mem::MaybeUninit::zeroed();
            (::windows::core::Vtable::vtable(this).ImplicitAnimations)(
                ::windows::core::Vtable::as_raw(this),
                result__.as_mut_ptr(),
            )
            .from_abi::<ImplicitAnimationCollection>(result__)
        }
    }
    pub fn SetImplicitAnimations(
        &self,
        value: &ImplicitAnimationCollection,
    ) -> ::windows::core::Result<()> {
        let this = &::windows::core::Interface::cast::<ICompositionObject2>(self)?;
        unsafe {
            (::windows::core::Vtable::vtable(this).SetImplicitAnimations)(
                ::windows::core::Vtable::as_raw(this),
                ::core::mem::transmute_copy(value),
            )
            .ok()
        }
    }
    pub fn StartAnimationGroup<'a, P0, E0>(&self, value: P0) -> ::windows::core::Result<()>
    where
        P0: ::std::convert::TryInto<
            ::windows::core::InParam<'a, ICompositionAnimationBase>,
            Error = E0,
        >,
        E0: ::std::convert::Into<::windows::core::Error>,
    {
        let this = &::windows::core::Interface::cast::<ICompositionObject2>(self)?;
        unsafe {
            (::windows::core::Vtable::vtable(this).StartAnimationGroup)(
                ::windows::core::Vtable::as_raw(this),
                value.try_into().map_err(|e| e.into())?.abi(),
            )
            .ok()
        }
    }
    pub fn StopAnimationGroup<'a, P0, E0>(&self, value: P0) -> ::windows::core::Result<()>
    where
        P0: ::std::convert::TryInto<
            ::windows::core::InParam<'a, ICompositionAnimationBase>,
            Error = E0,
        >,
        E0: ::std::convert::Into<::windows::core::Error>,
    {
        let this = &::windows::core::Interface::cast::<ICompositionObject2>(self)?;
        unsafe {
            (::windows::core::Vtable::vtable(this).StopAnimationGroup)(
                ::windows::core::Vtable::as_raw(this),
                value.try_into().map_err(|e| e.into())?.abi(),
            )
            .ok()
        }
    }
    #[doc = "*Required features: `\"UI_Dispatching\"`*"]
    #[cfg(feature = "UI_Dispatching")]
    pub fn DispatcherQueue(&self) -> ::windows::core::Result<super::Dispatching::DispatcherQueue> {
        let this = &::windows::core::Interface::cast::<ICompositionObject3>(self)?;
        unsafe {
            let mut result__ = ::core::mem::MaybeUninit::zeroed();
            (::windows::core::Vtable::vtable(this).DispatcherQueue)(
                ::windows::core::Vtable::as_raw(this),
                result__.as_mut_ptr(),
            )
            .from_abi::<super::Dispatching::DispatcherQueue>(result__)
        }
    }
    pub fn TryGetAnimationController(
        &self,
        propertyname: &::windows::core::HSTRING,
    ) -> ::windows::core::Result<AnimationController> {
        let this = &::windows::core::Interface::cast::<ICompositionObject4>(self)?;
        unsafe {
            let mut result__ = ::core::mem::MaybeUninit::zeroed();
            (::windows::core::Vtable::vtable(this).TryGetAnimationController)(
                ::windows::core::Vtable::as_raw(this),
                ::core::mem::transmute_copy(propertyname),
                result__.as_mut_ptr(),
            )
            .from_abi::<AnimationController>(result__)
        }
    }
    pub fn StartAnimationWithController<'a, P0>(
        &self,
        propertyname: &::windows::core::HSTRING,
        animation: P0,
        animationcontroller: &AnimationController,
    ) -> ::windows::core::Result<()>
    where
        P0: ::std::convert::Into<::windows::core::InParam<'a, CompositionAnimation>>,
    {
        let this = &::windows::core::Interface::cast::<ICompositionObject5>(self)?;
        unsafe {
            (::windows::core::Vtable::vtable(this).StartAnimationWithController)(
                ::windows::core::Vtable::as_raw(this),
                ::core::mem::transmute_copy(propertyname),
                animation.into().abi(),
                ::core::mem::transmute_copy(animationcontroller),
            )
            .ok()
        }
    }
    pub fn DelayBehavior(&self) -> ::windows::core::Result<AnimationDelayBehavior> {
        let this = &::windows::core::Interface::cast::<INaturalMotionAnimation>(self)?;
        unsafe {
            let mut result__ = ::core::mem::MaybeUninit::zeroed();
            (::windows::core::Vtable::vtable(this).DelayBehavior)(
                ::windows::core::Vtable::as_raw(this),
                result__.as_mut_ptr(),
            )
            .from_abi::<AnimationDelayBehavior>(result__)
        }
    }
    pub fn SetDelayBehavior(&self, value: AnimationDelayBehavior) -> ::windows::core::Result<()> {
        let this = &::windows::core::Interface::cast::<INaturalMotionAnimation>(self)?;
        unsafe {
            (::windows::core::Vtable::vtable(this).SetDelayBehavior)(
                ::windows::core::Vtable::as_raw(this),
                value,
            )
            .ok()
        }
    }
    pub fn DelayTime(&self) -> ::windows::core::Result<::windows::Foundation::TimeSpan> {
        let this = &::windows::core::Interface::cast::<INaturalMotionAnimation>(self)?;
        unsafe {
            let mut result__ = ::core::mem::MaybeUninit::zeroed();
            (::windows::core::Vtable::vtable(this).DelayTime)(
                ::windows::core::Vtable::as_raw(this),
                result__.as_mut_ptr(),
            )
            .from_abi::<::windows::Foundation::TimeSpan>(result__)
        }
    }
    pub fn SetDelayTime(
        &self,
        value: ::windows::Foundation::TimeSpan,
    ) -> ::windows::core::Result<()> {
        let this = &::windows::core::Interface::cast::<INaturalMotionAnimation>(self)?;
        unsafe {
            (::windows::core::Vtable::vtable(this).SetDelayTime)(
                ::windows::core::Vtable::as_raw(this),
                value,
            )
            .ok()
        }
    }
    pub fn StopBehavior(&self) -> ::windows::core::Result<AnimationStopBehavior> {
        let this = &::windows::core::Interface::cast::<INaturalMotionAnimation>(self)?;
        unsafe {
            let mut result__ = ::core::mem::MaybeUninit::zeroed();
            (::windows::core::Vtable::vtable(this).StopBehavior)(
                ::windows::core::Vtable::as_raw(this),
                result__.as_mut_ptr(),
            )
            .from_abi::<AnimationStopBehavior>(result__)
        }
    }
    pub fn SetStopBehavior(&self, value: AnimationStopBehavior) -> ::windows::core::Result<()> {
        let this = &::windows::core::Interface::cast::<INaturalMotionAnimation>(self)?;
        unsafe {
            (::windows::core::Vtable::vtable(this).SetStopBehavior)(
                ::windows::core::Vtable::as_raw(this),
                value,
            )
            .ok()
        }
    }
    pub fn DampingRatio(&self) -> ::windows::core::Result<f32> {
        let this = self;
        unsafe {
            let mut result__ = ::core::mem::MaybeUninit::zeroed();
            (::windows::core::Vtable::vtable(this).DampingRatio)(
                ::windows::core::Vtable::as_raw(this),
                result__.as_mut_ptr(),
            )
            .from_abi::<f32>(result__)
        }
    }
    pub fn SetDampingRatio(&self, value: f32) -> ::windows::core::Result<()> {
        let this = self;
        unsafe {
            (::windows::core::Vtable::vtable(this).SetDampingRatio)(
                ::windows::core::Vtable::as_raw(this),
                value,
            )
            .ok()
        }
    }
    pub fn Period(&self) -> ::windows::core::Result<::windows::Foundation::TimeSpan> {
        let this = self;
        unsafe {
            let mut result__ = ::core::mem::MaybeUninit::zeroed();
            (::windows::core::Vtable::vtable(this).Period)(
                ::windows::core::Vtable::as_raw(this),
                result__.as_mut_ptr(),
            )
            .from_abi::<::windows::Foundation::TimeSpan>(result__)
        }
    }
    pub fn SetPeriod(&self, value: ::windows::Foundation::TimeSpan) -> ::windows::core::Result<()> {
        let this = self;
        unsafe {
            (::windows::core::Vtable::vtable(this).SetPeriod)(
                ::windows::core::Vtable::as_raw(this),
                value,
            )
            .ok()
        }
    }
    pub fn FinalValue(
        &self,
    ) -> ::windows::core::Result<
        ::windows::Foundation::IReference<::windows::Foundation::Numerics::Vector3>,
    > {
        let this = &::windows::core::Interface::cast::<IVector3NaturalMotionAnimation>(self)?;
        unsafe {
            let mut result__ = ::core::mem::MaybeUninit::zeroed();
            ( ::windows::core::Vtable::vtable ( this ) . FinalValue ) ( ::windows::core::Vtable::as_raw ( this ) , result__ . as_mut_ptr ( ) ) . from_abi:: < ::windows::Foundation:: IReference :: < ::windows::Foundation::Numerics:: Vector3 > > ( result__ )
        }
    }
    pub fn SetFinalValue<'a, P0, E0>(&self, value: P0) -> ::windows::core::Result<()>
    where
        P0: ::std::convert::TryInto<
            ::windows::core::InParam<
                'a,
                ::windows::Foundation::IReference<::windows::Foundation::Numerics::Vector3>,
            >,
            Error = E0,
        >,
        E0: ::std::convert::Into<::windows::core::Error>,
    {
        let this = &::windows::core::Interface::cast::<IVector3NaturalMotionAnimation>(self)?;
        unsafe {
            (::windows::core::Vtable::vtable(this).SetFinalValue)(
                ::windows::core::Vtable::as_raw(this),
                value.try_into().map_err(|e| e.into())?.abi(),
            )
            .ok()
        }
    }
    pub fn InitialValue(
        &self,
    ) -> ::windows::core::Result<
        ::windows::Foundation::IReference<::windows::Foundation::Numerics::Vector3>,
    > {
        let this = &::windows::core::Interface::cast::<IVector3NaturalMotionAnimation>(self)?;
        unsafe {
            let mut result__ = ::core::mem::MaybeUninit::zeroed();
            ( ::windows::core::Vtable::vtable ( this ) . InitialValue ) ( ::windows::core::Vtable::as_raw ( this ) , result__ . as_mut_ptr ( ) ) . from_abi:: < ::windows::Foundation:: IReference :: < ::windows::Foundation::Numerics:: Vector3 > > ( result__ )
        }
    }
    pub fn SetInitialValue<'a, P0, E0>(&self, value: P0) -> ::windows::core::Result<()>
    where
        P0: ::std::convert::TryInto<
            ::windows::core::InParam<
                'a,
                ::windows::Foundation::IReference<::windows::Foundation::Numerics::Vector3>,
            >,
            Error = E0,
        >,
        E0: ::std::convert::Into<::windows::core::Error>,
    {
        let this = &::windows::core::Interface::cast::<IVector3NaturalMotionAnimation>(self)?;
        unsafe {
            (::windows::core::Vtable::vtable(this).SetInitialValue)(
                ::windows::core::Vtable::as_raw(this),
                value.try_into().map_err(|e| e.into())?.abi(),
            )
            .ok()
        }
    }
    pub fn InitialVelocity(
        &self,
    ) -> ::windows::core::Result<::windows::Foundation::Numerics::Vector3> {
        let this = &::windows::core::Interface::cast::<IVector3NaturalMotionAnimation>(self)?;
        unsafe {
            let mut result__ = ::core::mem::MaybeUninit::zeroed();
            (::windows::core::Vtable::vtable(this).InitialVelocity)(
                ::windows::core::Vtable::as_raw(this),
                result__.as_mut_ptr(),
            )
            .from_abi::<::windows::Foundation::Numerics::Vector3>(result__)
        }
    }
    pub fn SetInitialVelocity(
        &self,
        value: ::windows::Foundation::Numerics::Vector3,
    ) -> ::windows::core::Result<()> {
        let this = &::windows::core::Interface::cast::<IVector3NaturalMotionAnimation>(self)?;
        unsafe {
            (::windows::core::Vtable::vtable(this).SetInitialVelocity)(
                ::windows::core::Vtable::as_raw(this),
                value,
            )
            .ok()
        }
    }
}
impl ::core::clone::Clone for SpringVector3NaturalMotionAnimation {
    fn clone(&self) -> Self {
        Self(self.0.clone())
    }
}
impl ::core::cmp::PartialEq for SpringVector3NaturalMotionAnimation {
    fn eq(&self, other: &Self) -> bool {
        self.0 == other.0
    }
}
impl ::core::cmp::Eq for SpringVector3NaturalMotionAnimation {}
impl ::core::fmt::Debug for SpringVector3NaturalMotionAnimation {
    fn fmt(&self, f: &mut ::core::fmt::Formatter<'_>) -> ::core::fmt::Result {
        f.debug_tuple("SpringVector3NaturalMotionAnimation").field(&self.0).finish()
    }
}
unsafe impl ::windows::core::RuntimeType for SpringVector3NaturalMotionAnimation {
    const SIGNATURE : ::windows::core::ConstBuffer = ::windows::core::ConstBuffer::from_slice ( b"rc(Microsoft.UI.Composition.SpringVector3NaturalMotionAnimation;{02d9e1c6-7434-5464-a1f6-d644ce1fc9a6})" ) ;
    type DefaultType = ::core::option::Option<Self>;
    fn from_default(from: &Self::DefaultType) -> ::windows::core::Result<Self> {
        from.as_ref().cloned().ok_or(::windows::core::Error::OK)
    }
}
unsafe impl ::windows::core::Vtable for SpringVector3NaturalMotionAnimation {
    type Vtable = ISpringVector3NaturalMotionAnimation_Vtbl;
}
unsafe impl ::windows::core::Interface for SpringVector3NaturalMotionAnimation {
    const IID: ::windows::core::GUID =
        <ISpringVector3NaturalMotionAnimation as ::windows::core::Interface>::IID;
}
impl ::windows::core::RuntimeName for SpringVector3NaturalMotionAnimation {
    const NAME: &'static str = "Microsoft.UI.Composition.SpringVector3NaturalMotionAnimation";
}
::windows::core::interface_hierarchy!(
    SpringVector3NaturalMotionAnimation,
    ::windows::core::IUnknown,
    ::windows::core::IInspectable
);
impl ::core::convert::TryFrom<SpringVector3NaturalMotionAnimation> for IAnimationObject {
    type Error = ::windows::core::Error;
    fn try_from(value: SpringVector3NaturalMotionAnimation) -> ::windows::core::Result<Self> {
        ::core::convert::TryFrom::try_from(&value)
    }
}
impl ::core::convert::TryFrom<&SpringVector3NaturalMotionAnimation> for IAnimationObject {
    type Error = ::windows::core::Error;
    fn try_from(value: &SpringVector3NaturalMotionAnimation) -> ::windows::core::Result<Self> {
        ::windows::core::Interface::cast(value)
    }
}
impl<'a> ::core::convert::TryFrom<&SpringVector3NaturalMotionAnimation>
    for ::windows::core::InParam<'a, IAnimationObject>
{
    type Error = ::windows::core::Error;
    fn try_from(value: &SpringVector3NaturalMotionAnimation) -> ::windows::core::Result<Self> {
        let item = ::std::convert::TryInto::try_into(value)?;
        Ok(::windows::core::InParam::owned(item))
    }
}
impl ::core::convert::TryFrom<SpringVector3NaturalMotionAnimation>
    for ::windows::Foundation::IClosable
{
    type Error = ::windows::core::Error;
    fn try_from(value: SpringVector3NaturalMotionAnimation) -> ::windows::core::Result<Self> {
        ::core::convert::TryFrom::try_from(&value)
    }
}
impl ::core::convert::TryFrom<&SpringVector3NaturalMotionAnimation>
    for ::windows::Foundation::IClosable
{
    type Error = ::windows::core::Error;
    fn try_from(value: &SpringVector3NaturalMotionAnimation) -> ::windows::core::Result<Self> {
        ::windows::core::Interface::cast(value)
    }
}
impl<'a> ::core::convert::TryFrom<&SpringVector3NaturalMotionAnimation>
    for ::windows::core::InParam<'a, ::windows::Foundation::IClosable>
{
    type Error = ::windows::core::Error;
    fn try_from(value: &SpringVector3NaturalMotionAnimation) -> ::windows::core::Result<Self> {
        let item = ::std::convert::TryInto::try_into(value)?;
        Ok(::windows::core::InParam::owned(item))
    }
}
impl ::core::convert::TryFrom<SpringVector3NaturalMotionAnimation> for ICompositionAnimationBase {
    type Error = ::windows::core::Error;
    fn try_from(value: SpringVector3NaturalMotionAnimation) -> ::windows::core::Result<Self> {
        ::core::convert::TryFrom::try_from(&value)
    }
}
impl ::core::convert::TryFrom<&SpringVector3NaturalMotionAnimation> for ICompositionAnimationBase {
    type Error = ::windows::core::Error;
    fn try_from(value: &SpringVector3NaturalMotionAnimation) -> ::windows::core::Result<Self> {
        ::windows::core::Interface::cast(value)
    }
}
impl<'a> ::core::convert::TryFrom<&SpringVector3NaturalMotionAnimation>
    for ::windows::core::InParam<'a, ICompositionAnimationBase>
{
    type Error = ::windows::core::Error;
    fn try_from(value: &SpringVector3NaturalMotionAnimation) -> ::windows::core::Result<Self> {
        let item = ::std::convert::TryInto::try_into(value)?;
        Ok(::windows::core::InParam::owned(item))
    }
}
impl ::core::convert::From<SpringVector3NaturalMotionAnimation> for Vector3NaturalMotionAnimation {
    fn from(value: SpringVector3NaturalMotionAnimation) -> Self {
        ::core::convert::From::from(&value)
    }
}
impl ::core::convert::From<&SpringVector3NaturalMotionAnimation> for Vector3NaturalMotionAnimation {
    fn from(value: &SpringVector3NaturalMotionAnimation) -> Self {
        ::windows::core::Interface::cast(value).unwrap()
    }
}
impl<'a> ::core::convert::From<&SpringVector3NaturalMotionAnimation>
    for ::windows::core::InParam<'a, Vector3NaturalMotionAnimation>
{
    fn from(value: &SpringVector3NaturalMotionAnimation) -> Self {
        ::windows::core::InParam::owned(value.into())
    }
}
impl ::core::convert::From<SpringVector3NaturalMotionAnimation> for NaturalMotionAnimation {
    fn from(value: SpringVector3NaturalMotionAnimation) -> Self {
        ::core::convert::From::from(&value)
    }
}
impl ::core::convert::From<&SpringVector3NaturalMotionAnimation> for NaturalMotionAnimation {
    fn from(value: &SpringVector3NaturalMotionAnimation) -> Self {
        ::windows::core::Interface::cast(value).unwrap()
    }
}
impl<'a> ::core::convert::From<&SpringVector3NaturalMotionAnimation>
    for ::windows::core::InParam<'a, NaturalMotionAnimation>
{
    fn from(value: &SpringVector3NaturalMotionAnimation) -> Self {
        ::windows::core::InParam::owned(value.into())
    }
}
impl ::core::convert::From<SpringVector3NaturalMotionAnimation> for CompositionAnimation {
    fn from(value: SpringVector3NaturalMotionAnimation) -> Self {
        ::core::convert::From::from(&value)
    }
}
impl ::core::convert::From<&SpringVector3NaturalMotionAnimation> for CompositionAnimation {
    fn from(value: &SpringVector3NaturalMotionAnimation) -> Self {
        ::windows::core::Interface::cast(value).unwrap()
    }
}
impl<'a> ::core::convert::From<&SpringVector3NaturalMotionAnimation>
    for ::windows::core::InParam<'a, CompositionAnimation>
{
    fn from(value: &SpringVector3NaturalMotionAnimation) -> Self {
        ::windows::core::InParam::owned(value.into())
    }
}
impl ::core::convert::From<SpringVector3NaturalMotionAnimation> for CompositionObject {
    fn from(value: SpringVector3NaturalMotionAnimation) -> Self {
        ::core::convert::From::from(&value)
    }
}
impl ::core::convert::From<&SpringVector3NaturalMotionAnimation> for CompositionObject {
    fn from(value: &SpringVector3NaturalMotionAnimation) -> Self {
        ::windows::core::Interface::cast(value).unwrap()
    }
}
impl<'a> ::core::convert::From<&SpringVector3NaturalMotionAnimation>
    for ::windows::core::InParam<'a, CompositionObject>
{
    fn from(value: &SpringVector3NaturalMotionAnimation) -> Self {
        ::windows::core::InParam::owned(value.into())
    }
}
unsafe impl ::core::marker::Send for SpringVector3NaturalMotionAnimation {}
unsafe impl ::core::marker::Sync for SpringVector3NaturalMotionAnimation {}
#[doc = "*Required features: `\"UI_Composition\"`*"]
#[repr(transparent)]
pub struct SpriteVisual(::windows::core::IUnknown);
impl SpriteVisual {
    pub fn PopulatePropertyInfo(
        &self,
        propertyname: &::windows::core::HSTRING,
        propertyinfo: &AnimationPropertyInfo,
    ) -> ::windows::core::Result<()> {
        let this = &::windows::core::Interface::cast::<IAnimationObject>(self)?;
        unsafe {
            (::windows::core::Vtable::vtable(this).PopulatePropertyInfo)(
                ::windows::core::Vtable::as_raw(this),
                ::core::mem::transmute_copy(propertyname),
                ::core::mem::transmute_copy(propertyinfo),
            )
            .ok()
        }
    }
    pub fn Close(&self) -> ::windows::core::Result<()> {
        let this = &::windows::core::Interface::cast::<::windows::Foundation::IClosable>(self)?;
        unsafe {
            (::windows::core::Vtable::vtable(this).Close)(::windows::core::Vtable::as_raw(this))
                .ok()
        }
    }
    pub fn Compositor(&self) -> ::windows::core::Result<Compositor> {
        let this = &::windows::core::Interface::cast::<ICompositionObject>(self)?;
        unsafe {
            let mut result__ = ::core::mem::MaybeUninit::zeroed();
            (::windows::core::Vtable::vtable(this).Compositor)(
                ::windows::core::Vtable::as_raw(this),
                result__.as_mut_ptr(),
            )
            .from_abi::<Compositor>(result__)
        }
    }
    pub fn Properties(&self) -> ::windows::core::Result<CompositionPropertySet> {
        let this = &::windows::core::Interface::cast::<ICompositionObject>(self)?;
        unsafe {
            let mut result__ = ::core::mem::MaybeUninit::zeroed();
            (::windows::core::Vtable::vtable(this).Properties)(
                ::windows::core::Vtable::as_raw(this),
                result__.as_mut_ptr(),
            )
            .from_abi::<CompositionPropertySet>(result__)
        }
    }
    pub fn StartAnimation<'a, P0>(
        &self,
        propertyname: &::windows::core::HSTRING,
        animation: P0,
    ) -> ::windows::core::Result<()>
    where
        P0: ::std::convert::Into<::windows::core::InParam<'a, CompositionAnimation>>,
    {
        let this = &::windows::core::Interface::cast::<ICompositionObject>(self)?;
        unsafe {
            (::windows::core::Vtable::vtable(this).StartAnimation)(
                ::windows::core::Vtable::as_raw(this),
                ::core::mem::transmute_copy(propertyname),
                animation.into().abi(),
            )
            .ok()
        }
    }
    pub fn StopAnimation(
        &self,
        propertyname: &::windows::core::HSTRING,
    ) -> ::windows::core::Result<()> {
        let this = &::windows::core::Interface::cast::<ICompositionObject>(self)?;
        unsafe {
            (::windows::core::Vtable::vtable(this).StopAnimation)(
                ::windows::core::Vtable::as_raw(this),
                ::core::mem::transmute_copy(propertyname),
            )
            .ok()
        }
    }
    pub fn Comment(&self) -> ::windows::core::Result<::windows::core::HSTRING> {
        let this = &::windows::core::Interface::cast::<ICompositionObject2>(self)?;
        unsafe {
            let mut result__ = ::core::mem::MaybeUninit::zeroed();
            (::windows::core::Vtable::vtable(this).Comment)(
                ::windows::core::Vtable::as_raw(this),
                result__.as_mut_ptr(),
            )
            .from_abi::<::windows::core::HSTRING>(result__)
        }
    }
    pub fn SetComment(&self, value: &::windows::core::HSTRING) -> ::windows::core::Result<()> {
        let this = &::windows::core::Interface::cast::<ICompositionObject2>(self)?;
        unsafe {
            (::windows::core::Vtable::vtable(this).SetComment)(
                ::windows::core::Vtable::as_raw(this),
                ::core::mem::transmute_copy(value),
            )
            .ok()
        }
    }
    pub fn ImplicitAnimations(&self) -> ::windows::core::Result<ImplicitAnimationCollection> {
        let this = &::windows::core::Interface::cast::<ICompositionObject2>(self)?;
        unsafe {
            let mut result__ = ::core::mem::MaybeUninit::zeroed();
            (::windows::core::Vtable::vtable(this).ImplicitAnimations)(
                ::windows::core::Vtable::as_raw(this),
                result__.as_mut_ptr(),
            )
            .from_abi::<ImplicitAnimationCollection>(result__)
        }
    }
    pub fn SetImplicitAnimations(
        &self,
        value: &ImplicitAnimationCollection,
    ) -> ::windows::core::Result<()> {
        let this = &::windows::core::Interface::cast::<ICompositionObject2>(self)?;
        unsafe {
            (::windows::core::Vtable::vtable(this).SetImplicitAnimations)(
                ::windows::core::Vtable::as_raw(this),
                ::core::mem::transmute_copy(value),
            )
            .ok()
        }
    }
    pub fn StartAnimationGroup<'a, P0, E0>(&self, value: P0) -> ::windows::core::Result<()>
    where
        P0: ::std::convert::TryInto<
            ::windows::core::InParam<'a, ICompositionAnimationBase>,
            Error = E0,
        >,
        E0: ::std::convert::Into<::windows::core::Error>,
    {
        let this = &::windows::core::Interface::cast::<ICompositionObject2>(self)?;
        unsafe {
            (::windows::core::Vtable::vtable(this).StartAnimationGroup)(
                ::windows::core::Vtable::as_raw(this),
                value.try_into().map_err(|e| e.into())?.abi(),
            )
            .ok()
        }
    }
    pub fn StopAnimationGroup<'a, P0, E0>(&self, value: P0) -> ::windows::core::Result<()>
    where
        P0: ::std::convert::TryInto<
            ::windows::core::InParam<'a, ICompositionAnimationBase>,
            Error = E0,
        >,
        E0: ::std::convert::Into<::windows::core::Error>,
    {
        let this = &::windows::core::Interface::cast::<ICompositionObject2>(self)?;
        unsafe {
            (::windows::core::Vtable::vtable(this).StopAnimationGroup)(
                ::windows::core::Vtable::as_raw(this),
                value.try_into().map_err(|e| e.into())?.abi(),
            )
            .ok()
        }
    }
    #[doc = "*Required features: `\"UI_Dispatching\"`*"]
    #[cfg(feature = "UI_Dispatching")]
    pub fn DispatcherQueue(&self) -> ::windows::core::Result<super::Dispatching::DispatcherQueue> {
        let this = &::windows::core::Interface::cast::<ICompositionObject3>(self)?;
        unsafe {
            let mut result__ = ::core::mem::MaybeUninit::zeroed();
            (::windows::core::Vtable::vtable(this).DispatcherQueue)(
                ::windows::core::Vtable::as_raw(this),
                result__.as_mut_ptr(),
            )
            .from_abi::<super::Dispatching::DispatcherQueue>(result__)
        }
    }
    pub fn TryGetAnimationController(
        &self,
        propertyname: &::windows::core::HSTRING,
    ) -> ::windows::core::Result<AnimationController> {
        let this = &::windows::core::Interface::cast::<ICompositionObject4>(self)?;
        unsafe {
            let mut result__ = ::core::mem::MaybeUninit::zeroed();
            (::windows::core::Vtable::vtable(this).TryGetAnimationController)(
                ::windows::core::Vtable::as_raw(this),
                ::core::mem::transmute_copy(propertyname),
                result__.as_mut_ptr(),
            )
            .from_abi::<AnimationController>(result__)
        }
    }
    pub fn StartAnimationWithController<'a, P0>(
        &self,
        propertyname: &::windows::core::HSTRING,
        animation: P0,
        animationcontroller: &AnimationController,
    ) -> ::windows::core::Result<()>
    where
        P0: ::std::convert::Into<::windows::core::InParam<'a, CompositionAnimation>>,
    {
        let this = &::windows::core::Interface::cast::<ICompositionObject5>(self)?;
        unsafe {
            (::windows::core::Vtable::vtable(this).StartAnimationWithController)(
                ::windows::core::Vtable::as_raw(this),
                ::core::mem::transmute_copy(propertyname),
                animation.into().abi(),
                ::core::mem::transmute_copy(animationcontroller),
            )
            .ok()
        }
    }
    pub fn Children(&self) -> ::windows::core::Result<VisualCollection> {
        let this = &::windows::core::Interface::cast::<IContainerVisual>(self)?;
        unsafe {
            let mut result__ = ::core::mem::MaybeUninit::zeroed();
            (::windows::core::Vtable::vtable(this).Children)(
                ::windows::core::Vtable::as_raw(this),
                result__.as_mut_ptr(),
            )
            .from_abi::<VisualCollection>(result__)
        }
    }
    pub fn Brush(&self) -> ::windows::core::Result<CompositionBrush> {
        let this = self;
        unsafe {
            let mut result__ = ::core::mem::MaybeUninit::zeroed();
            (::windows::core::Vtable::vtable(this).Brush)(
                ::windows::core::Vtable::as_raw(this),
                result__.as_mut_ptr(),
            )
            .from_abi::<CompositionBrush>(result__)
        }
    }
    pub fn SetBrush<'a, P0>(&self, value: P0) -> ::windows::core::Result<()>
    where
        P0: ::std::convert::Into<::windows::core::InParam<'a, CompositionBrush>>,
    {
        let this = self;
        unsafe {
            (::windows::core::Vtable::vtable(this).SetBrush)(
                ::windows::core::Vtable::as_raw(this),
                value.into().abi(),
            )
            .ok()
        }
    }
    pub fn Shadow(&self) -> ::windows::core::Result<CompositionShadow> {
        let this = &::windows::core::Interface::cast::<ISpriteVisual2>(self)?;
        unsafe {
            let mut result__ = ::core::mem::MaybeUninit::zeroed();
            (::windows::core::Vtable::vtable(this).Shadow)(
                ::windows::core::Vtable::as_raw(this),
                result__.as_mut_ptr(),
            )
            .from_abi::<CompositionShadow>(result__)
        }
    }
    pub fn SetShadow<'a, P0>(&self, value: P0) -> ::windows::core::Result<()>
    where
        P0: ::std::convert::Into<::windows::core::InParam<'a, CompositionShadow>>,
    {
        let this = &::windows::core::Interface::cast::<ISpriteVisual2>(self)?;
        unsafe {
            (::windows::core::Vtable::vtable(this).SetShadow)(
                ::windows::core::Vtable::as_raw(this),
                value.into().abi(),
            )
            .ok()
        }
    }
    pub fn AnchorPoint(&self) -> ::windows::core::Result<::windows::Foundation::Numerics::Vector2> {
        let this = &::windows::core::Interface::cast::<IVisual>(self)?;
        unsafe {
            let mut result__ = ::core::mem::MaybeUninit::zeroed();
            (::windows::core::Vtable::vtable(this).AnchorPoint)(
                ::windows::core::Vtable::as_raw(this),
                result__.as_mut_ptr(),
            )
            .from_abi::<::windows::Foundation::Numerics::Vector2>(result__)
        }
    }
    pub fn SetAnchorPoint(
        &self,
        value: ::windows::Foundation::Numerics::Vector2,
    ) -> ::windows::core::Result<()> {
        let this = &::windows::core::Interface::cast::<IVisual>(self)?;
        unsafe {
            (::windows::core::Vtable::vtable(this).SetAnchorPoint)(
                ::windows::core::Vtable::as_raw(this),
                value,
            )
            .ok()
        }
    }
    pub fn BackfaceVisibility(&self) -> ::windows::core::Result<CompositionBackfaceVisibility> {
        let this = &::windows::core::Interface::cast::<IVisual>(self)?;
        unsafe {
            let mut result__ = ::core::mem::MaybeUninit::zeroed();
            (::windows::core::Vtable::vtable(this).BackfaceVisibility)(
                ::windows::core::Vtable::as_raw(this),
                result__.as_mut_ptr(),
            )
            .from_abi::<CompositionBackfaceVisibility>(result__)
        }
    }
    pub fn SetBackfaceVisibility(
        &self,
        value: CompositionBackfaceVisibility,
    ) -> ::windows::core::Result<()> {
        let this = &::windows::core::Interface::cast::<IVisual>(self)?;
        unsafe {
            (::windows::core::Vtable::vtable(this).SetBackfaceVisibility)(
                ::windows::core::Vtable::as_raw(this),
                value,
            )
            .ok()
        }
    }
    pub fn BorderMode(&self) -> ::windows::core::Result<CompositionBorderMode> {
        let this = &::windows::core::Interface::cast::<IVisual>(self)?;
        unsafe {
            let mut result__ = ::core::mem::MaybeUninit::zeroed();
            (::windows::core::Vtable::vtable(this).BorderMode)(
                ::windows::core::Vtable::as_raw(this),
                result__.as_mut_ptr(),
            )
            .from_abi::<CompositionBorderMode>(result__)
        }
    }
    pub fn SetBorderMode(&self, value: CompositionBorderMode) -> ::windows::core::Result<()> {
        let this = &::windows::core::Interface::cast::<IVisual>(self)?;
        unsafe {
            (::windows::core::Vtable::vtable(this).SetBorderMode)(
                ::windows::core::Vtable::as_raw(this),
                value,
            )
            .ok()
        }
    }
    pub fn CenterPoint(&self) -> ::windows::core::Result<::windows::Foundation::Numerics::Vector3> {
        let this = &::windows::core::Interface::cast::<IVisual>(self)?;
        unsafe {
            let mut result__ = ::core::mem::MaybeUninit::zeroed();
            (::windows::core::Vtable::vtable(this).CenterPoint)(
                ::windows::core::Vtable::as_raw(this),
                result__.as_mut_ptr(),
            )
            .from_abi::<::windows::Foundation::Numerics::Vector3>(result__)
        }
    }
    pub fn SetCenterPoint(
        &self,
        value: ::windows::Foundation::Numerics::Vector3,
    ) -> ::windows::core::Result<()> {
        let this = &::windows::core::Interface::cast::<IVisual>(self)?;
        unsafe {
            (::windows::core::Vtable::vtable(this).SetCenterPoint)(
                ::windows::core::Vtable::as_raw(this),
                value,
            )
            .ok()
        }
    }
    pub fn Clip(&self) -> ::windows::core::Result<CompositionClip> {
        let this = &::windows::core::Interface::cast::<IVisual>(self)?;
        unsafe {
            let mut result__ = ::core::mem::MaybeUninit::zeroed();
            (::windows::core::Vtable::vtable(this).Clip)(
                ::windows::core::Vtable::as_raw(this),
                result__.as_mut_ptr(),
            )
            .from_abi::<CompositionClip>(result__)
        }
    }
    pub fn SetClip<'a, P0>(&self, value: P0) -> ::windows::core::Result<()>
    where
        P0: ::std::convert::Into<::windows::core::InParam<'a, CompositionClip>>,
    {
        let this = &::windows::core::Interface::cast::<IVisual>(self)?;
        unsafe {
            (::windows::core::Vtable::vtable(this).SetClip)(
                ::windows::core::Vtable::as_raw(this),
                value.into().abi(),
            )
            .ok()
        }
    }
    pub fn CompositeMode(&self) -> ::windows::core::Result<CompositionCompositeMode> {
        let this = &::windows::core::Interface::cast::<IVisual>(self)?;
        unsafe {
            let mut result__ = ::core::mem::MaybeUninit::zeroed();
            (::windows::core::Vtable::vtable(this).CompositeMode)(
                ::windows::core::Vtable::as_raw(this),
                result__.as_mut_ptr(),
            )
            .from_abi::<CompositionCompositeMode>(result__)
        }
    }
    pub fn SetCompositeMode(&self, value: CompositionCompositeMode) -> ::windows::core::Result<()> {
        let this = &::windows::core::Interface::cast::<IVisual>(self)?;
        unsafe {
            (::windows::core::Vtable::vtable(this).SetCompositeMode)(
                ::windows::core::Vtable::as_raw(this),
                value,
            )
            .ok()
        }
    }
    pub fn IsVisible(&self) -> ::windows::core::Result<bool> {
        let this = &::windows::core::Interface::cast::<IVisual>(self)?;
        unsafe {
            let mut result__ = ::core::mem::MaybeUninit::zeroed();
            (::windows::core::Vtable::vtable(this).IsVisible)(
                ::windows::core::Vtable::as_raw(this),
                result__.as_mut_ptr(),
            )
            .from_abi::<bool>(result__)
        }
    }
    pub fn SetIsVisible(&self, value: bool) -> ::windows::core::Result<()> {
        let this = &::windows::core::Interface::cast::<IVisual>(self)?;
        unsafe {
            (::windows::core::Vtable::vtable(this).SetIsVisible)(
                ::windows::core::Vtable::as_raw(this),
                value,
            )
            .ok()
        }
    }
    pub fn Offset(&self) -> ::windows::core::Result<::windows::Foundation::Numerics::Vector3> {
        let this = &::windows::core::Interface::cast::<IVisual>(self)?;
        unsafe {
            let mut result__ = ::core::mem::MaybeUninit::zeroed();
            (::windows::core::Vtable::vtable(this).Offset)(
                ::windows::core::Vtable::as_raw(this),
                result__.as_mut_ptr(),
            )
            .from_abi::<::windows::Foundation::Numerics::Vector3>(result__)
        }
    }
    pub fn SetOffset(
        &self,
        value: ::windows::Foundation::Numerics::Vector3,
    ) -> ::windows::core::Result<()> {
        let this = &::windows::core::Interface::cast::<IVisual>(self)?;
        unsafe {
            (::windows::core::Vtable::vtable(this).SetOffset)(
                ::windows::core::Vtable::as_raw(this),
                value,
            )
            .ok()
        }
    }
    pub fn Opacity(&self) -> ::windows::core::Result<f32> {
        let this = &::windows::core::Interface::cast::<IVisual>(self)?;
        unsafe {
            let mut result__ = ::core::mem::MaybeUninit::zeroed();
            (::windows::core::Vtable::vtable(this).Opacity)(
                ::windows::core::Vtable::as_raw(this),
                result__.as_mut_ptr(),
            )
            .from_abi::<f32>(result__)
        }
    }
    pub fn SetOpacity(&self, value: f32) -> ::windows::core::Result<()> {
        let this = &::windows::core::Interface::cast::<IVisual>(self)?;
        unsafe {
            (::windows::core::Vtable::vtable(this).SetOpacity)(
                ::windows::core::Vtable::as_raw(this),
                value,
            )
            .ok()
        }
    }
    pub fn Orientation(
        &self,
    ) -> ::windows::core::Result<::windows::Foundation::Numerics::Quaternion> {
        let this = &::windows::core::Interface::cast::<IVisual>(self)?;
        unsafe {
            let mut result__ = ::core::mem::MaybeUninit::zeroed();
            (::windows::core::Vtable::vtable(this).Orientation)(
                ::windows::core::Vtable::as_raw(this),
                result__.as_mut_ptr(),
            )
            .from_abi::<::windows::Foundation::Numerics::Quaternion>(result__)
        }
    }
    pub fn SetOrientation(
        &self,
        value: ::windows::Foundation::Numerics::Quaternion,
    ) -> ::windows::core::Result<()> {
        let this = &::windows::core::Interface::cast::<IVisual>(self)?;
        unsafe {
            (::windows::core::Vtable::vtable(this).SetOrientation)(
                ::windows::core::Vtable::as_raw(this),
                value,
            )
            .ok()
        }
    }
    pub fn Parent(&self) -> ::windows::core::Result<ContainerVisual> {
        let this = &::windows::core::Interface::cast::<IVisual>(self)?;
        unsafe {
            let mut result__ = ::core::mem::MaybeUninit::zeroed();
            (::windows::core::Vtable::vtable(this).Parent)(
                ::windows::core::Vtable::as_raw(this),
                result__.as_mut_ptr(),
            )
            .from_abi::<ContainerVisual>(result__)
        }
    }
    pub fn RotationAngle(&self) -> ::windows::core::Result<f32> {
        let this = &::windows::core::Interface::cast::<IVisual>(self)?;
        unsafe {
            let mut result__ = ::core::mem::MaybeUninit::zeroed();
            (::windows::core::Vtable::vtable(this).RotationAngle)(
                ::windows::core::Vtable::as_raw(this),
                result__.as_mut_ptr(),
            )
            .from_abi::<f32>(result__)
        }
    }
    pub fn SetRotationAngle(&self, value: f32) -> ::windows::core::Result<()> {
        let this = &::windows::core::Interface::cast::<IVisual>(self)?;
        unsafe {
            (::windows::core::Vtable::vtable(this).SetRotationAngle)(
                ::windows::core::Vtable::as_raw(this),
                value,
            )
            .ok()
        }
    }
    pub fn RotationAngleInDegrees(&self) -> ::windows::core::Result<f32> {
        let this = &::windows::core::Interface::cast::<IVisual>(self)?;
        unsafe {
            let mut result__ = ::core::mem::MaybeUninit::zeroed();
            (::windows::core::Vtable::vtable(this).RotationAngleInDegrees)(
                ::windows::core::Vtable::as_raw(this),
                result__.as_mut_ptr(),
            )
            .from_abi::<f32>(result__)
        }
    }
    pub fn SetRotationAngleInDegrees(&self, value: f32) -> ::windows::core::Result<()> {
        let this = &::windows::core::Interface::cast::<IVisual>(self)?;
        unsafe {
            (::windows::core::Vtable::vtable(this).SetRotationAngleInDegrees)(
                ::windows::core::Vtable::as_raw(this),
                value,
            )
            .ok()
        }
    }
    pub fn RotationAxis(
        &self,
    ) -> ::windows::core::Result<::windows::Foundation::Numerics::Vector3> {
        let this = &::windows::core::Interface::cast::<IVisual>(self)?;
        unsafe {
            let mut result__ = ::core::mem::MaybeUninit::zeroed();
            (::windows::core::Vtable::vtable(this).RotationAxis)(
                ::windows::core::Vtable::as_raw(this),
                result__.as_mut_ptr(),
            )
            .from_abi::<::windows::Foundation::Numerics::Vector3>(result__)
        }
    }
    pub fn SetRotationAxis(
        &self,
        value: ::windows::Foundation::Numerics::Vector3,
    ) -> ::windows::core::Result<()> {
        let this = &::windows::core::Interface::cast::<IVisual>(self)?;
        unsafe {
            (::windows::core::Vtable::vtable(this).SetRotationAxis)(
                ::windows::core::Vtable::as_raw(this),
                value,
            )
            .ok()
        }
    }
    pub fn Scale(&self) -> ::windows::core::Result<::windows::Foundation::Numerics::Vector3> {
        let this = &::windows::core::Interface::cast::<IVisual>(self)?;
        unsafe {
            let mut result__ = ::core::mem::MaybeUninit::zeroed();
            (::windows::core::Vtable::vtable(this).Scale)(
                ::windows::core::Vtable::as_raw(this),
                result__.as_mut_ptr(),
            )
            .from_abi::<::windows::Foundation::Numerics::Vector3>(result__)
        }
    }
    pub fn SetScale(
        &self,
        value: ::windows::Foundation::Numerics::Vector3,
    ) -> ::windows::core::Result<()> {
        let this = &::windows::core::Interface::cast::<IVisual>(self)?;
        unsafe {
            (::windows::core::Vtable::vtable(this).SetScale)(
                ::windows::core::Vtable::as_raw(this),
                value,
            )
            .ok()
        }
    }
    pub fn Size(&self) -> ::windows::core::Result<::windows::Foundation::Numerics::Vector2> {
        let this = &::windows::core::Interface::cast::<IVisual>(self)?;
        unsafe {
            let mut result__ = ::core::mem::MaybeUninit::zeroed();
            (::windows::core::Vtable::vtable(this).Size)(
                ::windows::core::Vtable::as_raw(this),
                result__.as_mut_ptr(),
            )
            .from_abi::<::windows::Foundation::Numerics::Vector2>(result__)
        }
    }
    pub fn SetSize(
        &self,
        value: ::windows::Foundation::Numerics::Vector2,
    ) -> ::windows::core::Result<()> {
        let this = &::windows::core::Interface::cast::<IVisual>(self)?;
        unsafe {
            (::windows::core::Vtable::vtable(this).SetSize)(
                ::windows::core::Vtable::as_raw(this),
                value,
            )
            .ok()
        }
    }
    pub fn TransformMatrix(
        &self,
    ) -> ::windows::core::Result<::windows::Foundation::Numerics::Matrix4x4> {
        let this = &::windows::core::Interface::cast::<IVisual>(self)?;
        unsafe {
            let mut result__ = ::core::mem::MaybeUninit::zeroed();
            (::windows::core::Vtable::vtable(this).TransformMatrix)(
                ::windows::core::Vtable::as_raw(this),
                result__.as_mut_ptr(),
            )
            .from_abi::<::windows::Foundation::Numerics::Matrix4x4>(result__)
        }
    }
    pub fn SetTransformMatrix(
        &self,
        value: ::windows::Foundation::Numerics::Matrix4x4,
    ) -> ::windows::core::Result<()> {
        let this = &::windows::core::Interface::cast::<IVisual>(self)?;
        unsafe {
            (::windows::core::Vtable::vtable(this).SetTransformMatrix)(
                ::windows::core::Vtable::as_raw(this),
                value,
            )
            .ok()
        }
    }
    pub fn ParentForTransform(&self) -> ::windows::core::Result<Visual> {
        let this = &::windows::core::Interface::cast::<IVisual2>(self)?;
        unsafe {
            let mut result__ = ::core::mem::MaybeUninit::zeroed();
            (::windows::core::Vtable::vtable(this).ParentForTransform)(
                ::windows::core::Vtable::as_raw(this),
                result__.as_mut_ptr(),
            )
            .from_abi::<Visual>(result__)
        }
    }
    pub fn SetParentForTransform<'a, P0>(&self, value: P0) -> ::windows::core::Result<()>
    where
        P0: ::std::convert::Into<::windows::core::InParam<'a, Visual>>,
    {
        let this = &::windows::core::Interface::cast::<IVisual2>(self)?;
        unsafe {
            (::windows::core::Vtable::vtable(this).SetParentForTransform)(
                ::windows::core::Vtable::as_raw(this),
                value.into().abi(),
            )
            .ok()
        }
    }
    pub fn RelativeOffsetAdjustment(
        &self,
    ) -> ::windows::core::Result<::windows::Foundation::Numerics::Vector3> {
        let this = &::windows::core::Interface::cast::<IVisual2>(self)?;
        unsafe {
            let mut result__ = ::core::mem::MaybeUninit::zeroed();
            (::windows::core::Vtable::vtable(this).RelativeOffsetAdjustment)(
                ::windows::core::Vtable::as_raw(this),
                result__.as_mut_ptr(),
            )
            .from_abi::<::windows::Foundation::Numerics::Vector3>(result__)
        }
    }
    pub fn SetRelativeOffsetAdjustment(
        &self,
        value: ::windows::Foundation::Numerics::Vector3,
    ) -> ::windows::core::Result<()> {
        let this = &::windows::core::Interface::cast::<IVisual2>(self)?;
        unsafe {
            (::windows::core::Vtable::vtable(this).SetRelativeOffsetAdjustment)(
                ::windows::core::Vtable::as_raw(this),
                value,
            )
            .ok()
        }
    }
    pub fn RelativeSizeAdjustment(
        &self,
    ) -> ::windows::core::Result<::windows::Foundation::Numerics::Vector2> {
        let this = &::windows::core::Interface::cast::<IVisual2>(self)?;
        unsafe {
            let mut result__ = ::core::mem::MaybeUninit::zeroed();
            (::windows::core::Vtable::vtable(this).RelativeSizeAdjustment)(
                ::windows::core::Vtable::as_raw(this),
                result__.as_mut_ptr(),
            )
            .from_abi::<::windows::Foundation::Numerics::Vector2>(result__)
        }
    }
    pub fn SetRelativeSizeAdjustment(
        &self,
        value: ::windows::Foundation::Numerics::Vector2,
    ) -> ::windows::core::Result<()> {
        let this = &::windows::core::Interface::cast::<IVisual2>(self)?;
        unsafe {
            (::windows::core::Vtable::vtable(this).SetRelativeSizeAdjustment)(
                ::windows::core::Vtable::as_raw(this),
                value,
            )
            .ok()
        }
    }
    pub fn IsHitTestVisible(&self) -> ::windows::core::Result<bool> {
        let this = &::windows::core::Interface::cast::<IVisual3>(self)?;
        unsafe {
            let mut result__ = ::core::mem::MaybeUninit::zeroed();
            (::windows::core::Vtable::vtable(this).IsHitTestVisible)(
                ::windows::core::Vtable::as_raw(this),
                result__.as_mut_ptr(),
            )
            .from_abi::<bool>(result__)
        }
    }
    pub fn SetIsHitTestVisible(&self, value: bool) -> ::windows::core::Result<()> {
        let this = &::windows::core::Interface::cast::<IVisual3>(self)?;
        unsafe {
            (::windows::core::Vtable::vtable(this).SetIsHitTestVisible)(
                ::windows::core::Vtable::as_raw(this),
                value,
            )
            .ok()
        }
    }
    pub fn IsPixelSnappingEnabled(&self) -> ::windows::core::Result<bool> {
        let this = &::windows::core::Interface::cast::<IVisual4>(self)?;
        unsafe {
            let mut result__ = ::core::mem::MaybeUninit::zeroed();
            (::windows::core::Vtable::vtable(this).IsPixelSnappingEnabled)(
                ::windows::core::Vtable::as_raw(this),
                result__.as_mut_ptr(),
            )
            .from_abi::<bool>(result__)
        }
    }
    pub fn SetIsPixelSnappingEnabled(&self, value: bool) -> ::windows::core::Result<()> {
        let this = &::windows::core::Interface::cast::<IVisual4>(self)?;
        unsafe {
            (::windows::core::Vtable::vtable(this).SetIsPixelSnappingEnabled)(
                ::windows::core::Vtable::as_raw(this),
                value,
            )
            .ok()
        }
    }
}
impl ::core::clone::Clone for SpriteVisual {
    fn clone(&self) -> Self {
        Self(self.0.clone())
    }
}
impl ::core::cmp::PartialEq for SpriteVisual {
    fn eq(&self, other: &Self) -> bool {
        self.0 == other.0
    }
}
impl ::core::cmp::Eq for SpriteVisual {}
impl ::core::fmt::Debug for SpriteVisual {
    fn fmt(&self, f: &mut ::core::fmt::Formatter<'_>) -> ::core::fmt::Result {
        f.debug_tuple("SpriteVisual").field(&self.0).finish()
    }
}
unsafe impl ::windows::core::RuntimeType for SpriteVisual {
    const SIGNATURE: ::windows::core::ConstBuffer = ::windows::core::ConstBuffer::from_slice(
        b"rc(Microsoft.UI.Composition.SpriteVisual;{7e964632-45e4-5761-806d-5b4022c14f26})",
    );
    type DefaultType = ::core::option::Option<Self>;
    fn from_default(from: &Self::DefaultType) -> ::windows::core::Result<Self> {
        from.as_ref().cloned().ok_or(::windows::core::Error::OK)
    }
}
unsafe impl ::windows::core::Vtable for SpriteVisual {
    type Vtable = ISpriteVisual_Vtbl;
}
unsafe impl ::windows::core::Interface for SpriteVisual {
    const IID: ::windows::core::GUID = <ISpriteVisual as ::windows::core::Interface>::IID;
}
impl ::windows::core::RuntimeName for SpriteVisual {
    const NAME: &'static str = "Microsoft.UI.Composition.SpriteVisual";
}
::windows::core::interface_hierarchy!(
    SpriteVisual,
    ::windows::core::IUnknown,
    ::windows::core::IInspectable
);
impl ::core::convert::TryFrom<SpriteVisual> for IAnimationObject {
    type Error = ::windows::core::Error;
    fn try_from(value: SpriteVisual) -> ::windows::core::Result<Self> {
        ::core::convert::TryFrom::try_from(&value)
    }
}
impl ::core::convert::TryFrom<&SpriteVisual> for IAnimationObject {
    type Error = ::windows::core::Error;
    fn try_from(value: &SpriteVisual) -> ::windows::core::Result<Self> {
        ::windows::core::Interface::cast(value)
    }
}
impl<'a> ::core::convert::TryFrom<&SpriteVisual>
    for ::windows::core::InParam<'a, IAnimationObject>
{
    type Error = ::windows::core::Error;
    fn try_from(value: &SpriteVisual) -> ::windows::core::Result<Self> {
        let item = ::std::convert::TryInto::try_into(value)?;
        Ok(::windows::core::InParam::owned(item))
    }
}
impl ::core::convert::TryFrom<SpriteVisual> for ::windows::Foundation::IClosable {
    type Error = ::windows::core::Error;
    fn try_from(value: SpriteVisual) -> ::windows::core::Result<Self> {
        ::core::convert::TryFrom::try_from(&value)
    }
}
impl ::core::convert::TryFrom<&SpriteVisual> for ::windows::Foundation::IClosable {
    type Error = ::windows::core::Error;
    fn try_from(value: &SpriteVisual) -> ::windows::core::Result<Self> {
        ::windows::core::Interface::cast(value)
    }
}
impl<'a> ::core::convert::TryFrom<&SpriteVisual>
    for ::windows::core::InParam<'a, ::windows::Foundation::IClosable>
{
    type Error = ::windows::core::Error;
    fn try_from(value: &SpriteVisual) -> ::windows::core::Result<Self> {
        let item = ::std::convert::TryInto::try_into(value)?;
        Ok(::windows::core::InParam::owned(item))
    }
}
impl ::core::convert::From<SpriteVisual> for ContainerVisual {
    fn from(value: SpriteVisual) -> Self {
        ::core::convert::From::from(&value)
    }
}
impl ::core::convert::From<&SpriteVisual> for ContainerVisual {
    fn from(value: &SpriteVisual) -> Self {
        ::windows::core::Interface::cast(value).unwrap()
    }
}
impl<'a> ::core::convert::From<&SpriteVisual> for ::windows::core::InParam<'a, ContainerVisual> {
    fn from(value: &SpriteVisual) -> Self {
        ::windows::core::InParam::owned(value.into())
    }
}
impl ::core::convert::From<SpriteVisual> for Visual {
    fn from(value: SpriteVisual) -> Self {
        ::core::convert::From::from(&value)
    }
}
impl ::core::convert::From<&SpriteVisual> for Visual {
    fn from(value: &SpriteVisual) -> Self {
        ::windows::core::Interface::cast(value).unwrap()
    }
}
impl<'a> ::core::convert::From<&SpriteVisual> for ::windows::core::InParam<'a, Visual> {
    fn from(value: &SpriteVisual) -> Self {
        ::windows::core::InParam::owned(value.into())
    }
}
impl ::core::convert::From<SpriteVisual> for CompositionObject {
    fn from(value: SpriteVisual) -> Self {
        ::core::convert::From::from(&value)
    }
}
impl ::core::convert::From<&SpriteVisual> for CompositionObject {
    fn from(value: &SpriteVisual) -> Self {
        ::windows::core::Interface::cast(value).unwrap()
    }
}
impl<'a> ::core::convert::From<&SpriteVisual> for ::windows::core::InParam<'a, CompositionObject> {
    fn from(value: &SpriteVisual) -> Self {
        ::windows::core::InParam::owned(value.into())
    }
}
unsafe impl ::core::marker::Send for SpriteVisual {}
unsafe impl ::core::marker::Sync for SpriteVisual {}
#[doc = "*Required features: `\"UI_Composition\"`*"]
#[repr(transparent)]
pub struct StepEasingFunction(::windows::core::IUnknown);
impl StepEasingFunction {
    pub fn PopulatePropertyInfo(
        &self,
        propertyname: &::windows::core::HSTRING,
        propertyinfo: &AnimationPropertyInfo,
    ) -> ::windows::core::Result<()> {
        let this = &::windows::core::Interface::cast::<IAnimationObject>(self)?;
        unsafe {
            (::windows::core::Vtable::vtable(this).PopulatePropertyInfo)(
                ::windows::core::Vtable::as_raw(this),
                ::core::mem::transmute_copy(propertyname),
                ::core::mem::transmute_copy(propertyinfo),
            )
            .ok()
        }
    }
    pub fn Close(&self) -> ::windows::core::Result<()> {
        let this = &::windows::core::Interface::cast::<::windows::Foundation::IClosable>(self)?;
        unsafe {
            (::windows::core::Vtable::vtable(this).Close)(::windows::core::Vtable::as_raw(this))
                .ok()
        }
    }
    pub fn Compositor(&self) -> ::windows::core::Result<Compositor> {
        let this = &::windows::core::Interface::cast::<ICompositionObject>(self)?;
        unsafe {
            let mut result__ = ::core::mem::MaybeUninit::zeroed();
            (::windows::core::Vtable::vtable(this).Compositor)(
                ::windows::core::Vtable::as_raw(this),
                result__.as_mut_ptr(),
            )
            .from_abi::<Compositor>(result__)
        }
    }
    pub fn Properties(&self) -> ::windows::core::Result<CompositionPropertySet> {
        let this = &::windows::core::Interface::cast::<ICompositionObject>(self)?;
        unsafe {
            let mut result__ = ::core::mem::MaybeUninit::zeroed();
            (::windows::core::Vtable::vtable(this).Properties)(
                ::windows::core::Vtable::as_raw(this),
                result__.as_mut_ptr(),
            )
            .from_abi::<CompositionPropertySet>(result__)
        }
    }
    pub fn StartAnimation<'a, P0>(
        &self,
        propertyname: &::windows::core::HSTRING,
        animation: P0,
    ) -> ::windows::core::Result<()>
    where
        P0: ::std::convert::Into<::windows::core::InParam<'a, CompositionAnimation>>,
    {
        let this = &::windows::core::Interface::cast::<ICompositionObject>(self)?;
        unsafe {
            (::windows::core::Vtable::vtable(this).StartAnimation)(
                ::windows::core::Vtable::as_raw(this),
                ::core::mem::transmute_copy(propertyname),
                animation.into().abi(),
            )
            .ok()
        }
    }
    pub fn StopAnimation(
        &self,
        propertyname: &::windows::core::HSTRING,
    ) -> ::windows::core::Result<()> {
        let this = &::windows::core::Interface::cast::<ICompositionObject>(self)?;
        unsafe {
            (::windows::core::Vtable::vtable(this).StopAnimation)(
                ::windows::core::Vtable::as_raw(this),
                ::core::mem::transmute_copy(propertyname),
            )
            .ok()
        }
    }
    pub fn Comment(&self) -> ::windows::core::Result<::windows::core::HSTRING> {
        let this = &::windows::core::Interface::cast::<ICompositionObject2>(self)?;
        unsafe {
            let mut result__ = ::core::mem::MaybeUninit::zeroed();
            (::windows::core::Vtable::vtable(this).Comment)(
                ::windows::core::Vtable::as_raw(this),
                result__.as_mut_ptr(),
            )
            .from_abi::<::windows::core::HSTRING>(result__)
        }
    }
    pub fn SetComment(&self, value: &::windows::core::HSTRING) -> ::windows::core::Result<()> {
        let this = &::windows::core::Interface::cast::<ICompositionObject2>(self)?;
        unsafe {
            (::windows::core::Vtable::vtable(this).SetComment)(
                ::windows::core::Vtable::as_raw(this),
                ::core::mem::transmute_copy(value),
            )
            .ok()
        }
    }
    pub fn ImplicitAnimations(&self) -> ::windows::core::Result<ImplicitAnimationCollection> {
        let this = &::windows::core::Interface::cast::<ICompositionObject2>(self)?;
        unsafe {
            let mut result__ = ::core::mem::MaybeUninit::zeroed();
            (::windows::core::Vtable::vtable(this).ImplicitAnimations)(
                ::windows::core::Vtable::as_raw(this),
                result__.as_mut_ptr(),
            )
            .from_abi::<ImplicitAnimationCollection>(result__)
        }
    }
    pub fn SetImplicitAnimations(
        &self,
        value: &ImplicitAnimationCollection,
    ) -> ::windows::core::Result<()> {
        let this = &::windows::core::Interface::cast::<ICompositionObject2>(self)?;
        unsafe {
            (::windows::core::Vtable::vtable(this).SetImplicitAnimations)(
                ::windows::core::Vtable::as_raw(this),
                ::core::mem::transmute_copy(value),
            )
            .ok()
        }
    }
    pub fn StartAnimationGroup<'a, P0, E0>(&self, value: P0) -> ::windows::core::Result<()>
    where
        P0: ::std::convert::TryInto<
            ::windows::core::InParam<'a, ICompositionAnimationBase>,
            Error = E0,
        >,
        E0: ::std::convert::Into<::windows::core::Error>,
    {
        let this = &::windows::core::Interface::cast::<ICompositionObject2>(self)?;
        unsafe {
            (::windows::core::Vtable::vtable(this).StartAnimationGroup)(
                ::windows::core::Vtable::as_raw(this),
                value.try_into().map_err(|e| e.into())?.abi(),
            )
            .ok()
        }
    }
    pub fn StopAnimationGroup<'a, P0, E0>(&self, value: P0) -> ::windows::core::Result<()>
    where
        P0: ::std::convert::TryInto<
            ::windows::core::InParam<'a, ICompositionAnimationBase>,
            Error = E0,
        >,
        E0: ::std::convert::Into<::windows::core::Error>,
    {
        let this = &::windows::core::Interface::cast::<ICompositionObject2>(self)?;
        unsafe {
            (::windows::core::Vtable::vtable(this).StopAnimationGroup)(
                ::windows::core::Vtable::as_raw(this),
                value.try_into().map_err(|e| e.into())?.abi(),
            )
            .ok()
        }
    }
    #[doc = "*Required features: `\"UI_Dispatching\"`*"]
    #[cfg(feature = "UI_Dispatching")]
    pub fn DispatcherQueue(&self) -> ::windows::core::Result<super::Dispatching::DispatcherQueue> {
        let this = &::windows::core::Interface::cast::<ICompositionObject3>(self)?;
        unsafe {
            let mut result__ = ::core::mem::MaybeUninit::zeroed();
            (::windows::core::Vtable::vtable(this).DispatcherQueue)(
                ::windows::core::Vtable::as_raw(this),
                result__.as_mut_ptr(),
            )
            .from_abi::<super::Dispatching::DispatcherQueue>(result__)
        }
    }
    pub fn TryGetAnimationController(
        &self,
        propertyname: &::windows::core::HSTRING,
    ) -> ::windows::core::Result<AnimationController> {
        let this = &::windows::core::Interface::cast::<ICompositionObject4>(self)?;
        unsafe {
            let mut result__ = ::core::mem::MaybeUninit::zeroed();
            (::windows::core::Vtable::vtable(this).TryGetAnimationController)(
                ::windows::core::Vtable::as_raw(this),
                ::core::mem::transmute_copy(propertyname),
                result__.as_mut_ptr(),
            )
            .from_abi::<AnimationController>(result__)
        }
    }
    pub fn StartAnimationWithController<'a, P0>(
        &self,
        propertyname: &::windows::core::HSTRING,
        animation: P0,
        animationcontroller: &AnimationController,
    ) -> ::windows::core::Result<()>
    where
        P0: ::std::convert::Into<::windows::core::InParam<'a, CompositionAnimation>>,
    {
        let this = &::windows::core::Interface::cast::<ICompositionObject5>(self)?;
        unsafe {
            (::windows::core::Vtable::vtable(this).StartAnimationWithController)(
                ::windows::core::Vtable::as_raw(this),
                ::core::mem::transmute_copy(propertyname),
                animation.into().abi(),
                ::core::mem::transmute_copy(animationcontroller),
            )
            .ok()
        }
    }
    pub fn FinalStep(&self) -> ::windows::core::Result<i32> {
        let this = self;
        unsafe {
            let mut result__ = ::core::mem::MaybeUninit::zeroed();
            (::windows::core::Vtable::vtable(this).FinalStep)(
                ::windows::core::Vtable::as_raw(this),
                result__.as_mut_ptr(),
            )
            .from_abi::<i32>(result__)
        }
    }
    pub fn SetFinalStep(&self, value: i32) -> ::windows::core::Result<()> {
        let this = self;
        unsafe {
            (::windows::core::Vtable::vtable(this).SetFinalStep)(
                ::windows::core::Vtable::as_raw(this),
                value,
            )
            .ok()
        }
    }
    pub fn InitialStep(&self) -> ::windows::core::Result<i32> {
        let this = self;
        unsafe {
            let mut result__ = ::core::mem::MaybeUninit::zeroed();
            (::windows::core::Vtable::vtable(this).InitialStep)(
                ::windows::core::Vtable::as_raw(this),
                result__.as_mut_ptr(),
            )
            .from_abi::<i32>(result__)
        }
    }
    pub fn SetInitialStep(&self, value: i32) -> ::windows::core::Result<()> {
        let this = self;
        unsafe {
            (::windows::core::Vtable::vtable(this).SetInitialStep)(
                ::windows::core::Vtable::as_raw(this),
                value,
            )
            .ok()
        }
    }
    pub fn IsFinalStepSingleFrame(&self) -> ::windows::core::Result<bool> {
        let this = self;
        unsafe {
            let mut result__ = ::core::mem::MaybeUninit::zeroed();
            (::windows::core::Vtable::vtable(this).IsFinalStepSingleFrame)(
                ::windows::core::Vtable::as_raw(this),
                result__.as_mut_ptr(),
            )
            .from_abi::<bool>(result__)
        }
    }
    pub fn SetIsFinalStepSingleFrame(&self, value: bool) -> ::windows::core::Result<()> {
        let this = self;
        unsafe {
            (::windows::core::Vtable::vtable(this).SetIsFinalStepSingleFrame)(
                ::windows::core::Vtable::as_raw(this),
                value,
            )
            .ok()
        }
    }
    pub fn IsInitialStepSingleFrame(&self) -> ::windows::core::Result<bool> {
        let this = self;
        unsafe {
            let mut result__ = ::core::mem::MaybeUninit::zeroed();
            (::windows::core::Vtable::vtable(this).IsInitialStepSingleFrame)(
                ::windows::core::Vtable::as_raw(this),
                result__.as_mut_ptr(),
            )
            .from_abi::<bool>(result__)
        }
    }
    pub fn SetIsInitialStepSingleFrame(&self, value: bool) -> ::windows::core::Result<()> {
        let this = self;
        unsafe {
            (::windows::core::Vtable::vtable(this).SetIsInitialStepSingleFrame)(
                ::windows::core::Vtable::as_raw(this),
                value,
            )
            .ok()
        }
    }
    pub fn StepCount(&self) -> ::windows::core::Result<i32> {
        let this = self;
        unsafe {
            let mut result__ = ::core::mem::MaybeUninit::zeroed();
            (::windows::core::Vtable::vtable(this).StepCount)(
                ::windows::core::Vtable::as_raw(this),
                result__.as_mut_ptr(),
            )
            .from_abi::<i32>(result__)
        }
    }
    pub fn SetStepCount(&self, value: i32) -> ::windows::core::Result<()> {
        let this = self;
        unsafe {
            (::windows::core::Vtable::vtable(this).SetStepCount)(
                ::windows::core::Vtable::as_raw(this),
                value,
            )
            .ok()
        }
    }
}
impl ::core::clone::Clone for StepEasingFunction {
    fn clone(&self) -> Self {
        Self(self.0.clone())
    }
}
impl ::core::cmp::PartialEq for StepEasingFunction {
    fn eq(&self, other: &Self) -> bool {
        self.0 == other.0
    }
}
impl ::core::cmp::Eq for StepEasingFunction {}
impl ::core::fmt::Debug for StepEasingFunction {
    fn fmt(&self, f: &mut ::core::fmt::Formatter<'_>) -> ::core::fmt::Result {
        f.debug_tuple("StepEasingFunction").field(&self.0).finish()
    }
}
unsafe impl ::windows::core::RuntimeType for StepEasingFunction {
    const SIGNATURE: ::windows::core::ConstBuffer = ::windows::core::ConstBuffer::from_slice(
        b"rc(Microsoft.UI.Composition.StepEasingFunction;{c7b1d4cf-c562-56b3-b4e6-b21326165f71})",
    );
    type DefaultType = ::core::option::Option<Self>;
    fn from_default(from: &Self::DefaultType) -> ::windows::core::Result<Self> {
        from.as_ref().cloned().ok_or(::windows::core::Error::OK)
    }
}
unsafe impl ::windows::core::Vtable for StepEasingFunction {
    type Vtable = IStepEasingFunction_Vtbl;
}
unsafe impl ::windows::core::Interface for StepEasingFunction {
    const IID: ::windows::core::GUID = <IStepEasingFunction as ::windows::core::Interface>::IID;
}
impl ::windows::core::RuntimeName for StepEasingFunction {
    const NAME: &'static str = "Microsoft.UI.Composition.StepEasingFunction";
}
::windows::core::interface_hierarchy!(
    StepEasingFunction,
    ::windows::core::IUnknown,
    ::windows::core::IInspectable
);
impl ::core::convert::TryFrom<StepEasingFunction> for IAnimationObject {
    type Error = ::windows::core::Error;
    fn try_from(value: StepEasingFunction) -> ::windows::core::Result<Self> {
        ::core::convert::TryFrom::try_from(&value)
    }
}
impl ::core::convert::TryFrom<&StepEasingFunction> for IAnimationObject {
    type Error = ::windows::core::Error;
    fn try_from(value: &StepEasingFunction) -> ::windows::core::Result<Self> {
        ::windows::core::Interface::cast(value)
    }
}
impl<'a> ::core::convert::TryFrom<&StepEasingFunction>
    for ::windows::core::InParam<'a, IAnimationObject>
{
    type Error = ::windows::core::Error;
    fn try_from(value: &StepEasingFunction) -> ::windows::core::Result<Self> {
        let item = ::std::convert::TryInto::try_into(value)?;
        Ok(::windows::core::InParam::owned(item))
    }
}
impl ::core::convert::TryFrom<StepEasingFunction> for ::windows::Foundation::IClosable {
    type Error = ::windows::core::Error;
    fn try_from(value: StepEasingFunction) -> ::windows::core::Result<Self> {
        ::core::convert::TryFrom::try_from(&value)
    }
}
impl ::core::convert::TryFrom<&StepEasingFunction> for ::windows::Foundation::IClosable {
    type Error = ::windows::core::Error;
    fn try_from(value: &StepEasingFunction) -> ::windows::core::Result<Self> {
        ::windows::core::Interface::cast(value)
    }
}
impl<'a> ::core::convert::TryFrom<&StepEasingFunction>
    for ::windows::core::InParam<'a, ::windows::Foundation::IClosable>
{
    type Error = ::windows::core::Error;
    fn try_from(value: &StepEasingFunction) -> ::windows::core::Result<Self> {
        let item = ::std::convert::TryInto::try_into(value)?;
        Ok(::windows::core::InParam::owned(item))
    }
}
impl ::core::convert::From<StepEasingFunction> for CompositionEasingFunction {
    fn from(value: StepEasingFunction) -> Self {
        ::core::convert::From::from(&value)
    }
}
impl ::core::convert::From<&StepEasingFunction> for CompositionEasingFunction {
    fn from(value: &StepEasingFunction) -> Self {
        ::windows::core::Interface::cast(value).unwrap()
    }
}
impl<'a> ::core::convert::From<&StepEasingFunction>
    for ::windows::core::InParam<'a, CompositionEasingFunction>
{
    fn from(value: &StepEasingFunction) -> Self {
        ::windows::core::InParam::owned(value.into())
    }
}
impl ::core::convert::From<StepEasingFunction> for CompositionObject {
    fn from(value: StepEasingFunction) -> Self {
        ::core::convert::From::from(&value)
    }
}
impl ::core::convert::From<&StepEasingFunction> for CompositionObject {
    fn from(value: &StepEasingFunction) -> Self {
        ::windows::core::Interface::cast(value).unwrap()
    }
}
impl<'a> ::core::convert::From<&StepEasingFunction>
    for ::windows::core::InParam<'a, CompositionObject>
{
    fn from(value: &StepEasingFunction) -> Self {
        ::windows::core::InParam::owned(value.into())
    }
}
unsafe impl ::core::marker::Send for StepEasingFunction {}
unsafe impl ::core::marker::Sync for StepEasingFunction {}
#[doc = "*Required features: `\"UI_Composition\"`*"]
#[repr(transparent)]
pub struct Vector2KeyFrameAnimation(::windows::core::IUnknown);
impl Vector2KeyFrameAnimation {
    pub fn PopulatePropertyInfo(
        &self,
        propertyname: &::windows::core::HSTRING,
        propertyinfo: &AnimationPropertyInfo,
    ) -> ::windows::core::Result<()> {
        let this = &::windows::core::Interface::cast::<IAnimationObject>(self)?;
        unsafe {
            (::windows::core::Vtable::vtable(this).PopulatePropertyInfo)(
                ::windows::core::Vtable::as_raw(this),
                ::core::mem::transmute_copy(propertyname),
                ::core::mem::transmute_copy(propertyinfo),
            )
            .ok()
        }
    }
    pub fn Close(&self) -> ::windows::core::Result<()> {
        let this = &::windows::core::Interface::cast::<::windows::Foundation::IClosable>(self)?;
        unsafe {
            (::windows::core::Vtable::vtable(this).Close)(::windows::core::Vtable::as_raw(this))
                .ok()
        }
    }
    pub fn ClearAllParameters(&self) -> ::windows::core::Result<()> {
        let this = &::windows::core::Interface::cast::<ICompositionAnimation>(self)?;
        unsafe {
            (::windows::core::Vtable::vtable(this).ClearAllParameters)(
                ::windows::core::Vtable::as_raw(this),
            )
            .ok()
        }
    }
    pub fn ClearParameter(&self, key: &::windows::core::HSTRING) -> ::windows::core::Result<()> {
        let this = &::windows::core::Interface::cast::<ICompositionAnimation>(self)?;
        unsafe {
            (::windows::core::Vtable::vtable(this).ClearParameter)(
                ::windows::core::Vtable::as_raw(this),
                ::core::mem::transmute_copy(key),
            )
            .ok()
        }
    }
    pub fn SetColorParameter(
        &self,
        key: &::windows::core::HSTRING,
        value: ::windows::UI::Color,
    ) -> ::windows::core::Result<()> {
        let this = &::windows::core::Interface::cast::<ICompositionAnimation>(self)?;
        unsafe {
            (::windows::core::Vtable::vtable(this).SetColorParameter)(
                ::windows::core::Vtable::as_raw(this),
                ::core::mem::transmute_copy(key),
                value,
            )
            .ok()
        }
    }
    pub fn SetMatrix3x2Parameter(
        &self,
        key: &::windows::core::HSTRING,
        value: ::windows::Foundation::Numerics::Matrix3x2,
    ) -> ::windows::core::Result<()> {
        let this = &::windows::core::Interface::cast::<ICompositionAnimation>(self)?;
        unsafe {
            (::windows::core::Vtable::vtable(this).SetMatrix3x2Parameter)(
                ::windows::core::Vtable::as_raw(this),
                ::core::mem::transmute_copy(key),
                value,
            )
            .ok()
        }
    }
    pub fn SetMatrix4x4Parameter(
        &self,
        key: &::windows::core::HSTRING,
        value: ::windows::Foundation::Numerics::Matrix4x4,
    ) -> ::windows::core::Result<()> {
        let this = &::windows::core::Interface::cast::<ICompositionAnimation>(self)?;
        unsafe {
            (::windows::core::Vtable::vtable(this).SetMatrix4x4Parameter)(
                ::windows::core::Vtable::as_raw(this),
                ::core::mem::transmute_copy(key),
                value,
            )
            .ok()
        }
    }
    pub fn SetQuaternionParameter(
        &self,
        key: &::windows::core::HSTRING,
        value: ::windows::Foundation::Numerics::Quaternion,
    ) -> ::windows::core::Result<()> {
        let this = &::windows::core::Interface::cast::<ICompositionAnimation>(self)?;
        unsafe {
            (::windows::core::Vtable::vtable(this).SetQuaternionParameter)(
                ::windows::core::Vtable::as_raw(this),
                ::core::mem::transmute_copy(key),
                value,
            )
            .ok()
        }
    }
    pub fn SetReferenceParameter<'a, P0>(
        &self,
        key: &::windows::core::HSTRING,
        compositionobject: P0,
    ) -> ::windows::core::Result<()>
    where
        P0: ::std::convert::Into<::windows::core::InParam<'a, CompositionObject>>,
    {
        let this = &::windows::core::Interface::cast::<ICompositionAnimation>(self)?;
        unsafe {
            (::windows::core::Vtable::vtable(this).SetReferenceParameter)(
                ::windows::core::Vtable::as_raw(this),
                ::core::mem::transmute_copy(key),
                compositionobject.into().abi(),
            )
            .ok()
        }
    }
    pub fn SetScalarParameter(
        &self,
        key: &::windows::core::HSTRING,
        value: f32,
    ) -> ::windows::core::Result<()> {
        let this = &::windows::core::Interface::cast::<ICompositionAnimation>(self)?;
        unsafe {
            (::windows::core::Vtable::vtable(this).SetScalarParameter)(
                ::windows::core::Vtable::as_raw(this),
                ::core::mem::transmute_copy(key),
                value,
            )
            .ok()
        }
    }
    pub fn SetVector2Parameter(
        &self,
        key: &::windows::core::HSTRING,
        value: ::windows::Foundation::Numerics::Vector2,
    ) -> ::windows::core::Result<()> {
        let this = &::windows::core::Interface::cast::<ICompositionAnimation>(self)?;
        unsafe {
            (::windows::core::Vtable::vtable(this).SetVector2Parameter)(
                ::windows::core::Vtable::as_raw(this),
                ::core::mem::transmute_copy(key),
                value,
            )
            .ok()
        }
    }
    pub fn SetVector3Parameter(
        &self,
        key: &::windows::core::HSTRING,
        value: ::windows::Foundation::Numerics::Vector3,
    ) -> ::windows::core::Result<()> {
        let this = &::windows::core::Interface::cast::<ICompositionAnimation>(self)?;
        unsafe {
            (::windows::core::Vtable::vtable(this).SetVector3Parameter)(
                ::windows::core::Vtable::as_raw(this),
                ::core::mem::transmute_copy(key),
                value,
            )
            .ok()
        }
    }
    pub fn SetVector4Parameter(
        &self,
        key: &::windows::core::HSTRING,
        value: ::windows::Foundation::Numerics::Vector4,
    ) -> ::windows::core::Result<()> {
        let this = &::windows::core::Interface::cast::<ICompositionAnimation>(self)?;
        unsafe {
            (::windows::core::Vtable::vtable(this).SetVector4Parameter)(
                ::windows::core::Vtable::as_raw(this),
                ::core::mem::transmute_copy(key),
                value,
            )
            .ok()
        }
    }
    pub fn SetBooleanParameter(
        &self,
        key: &::windows::core::HSTRING,
        value: bool,
    ) -> ::windows::core::Result<()> {
        let this = &::windows::core::Interface::cast::<ICompositionAnimation2>(self)?;
        unsafe {
            (::windows::core::Vtable::vtable(this).SetBooleanParameter)(
                ::windows::core::Vtable::as_raw(this),
                ::core::mem::transmute_copy(key),
                value,
            )
            .ok()
        }
    }
    pub fn Target(&self) -> ::windows::core::Result<::windows::core::HSTRING> {
        let this = &::windows::core::Interface::cast::<ICompositionAnimation2>(self)?;
        unsafe {
            let mut result__ = ::core::mem::MaybeUninit::zeroed();
            (::windows::core::Vtable::vtable(this).Target)(
                ::windows::core::Vtable::as_raw(this),
                result__.as_mut_ptr(),
            )
            .from_abi::<::windows::core::HSTRING>(result__)
        }
    }
    pub fn SetTarget(&self, value: &::windows::core::HSTRING) -> ::windows::core::Result<()> {
        let this = &::windows::core::Interface::cast::<ICompositionAnimation2>(self)?;
        unsafe {
            (::windows::core::Vtable::vtable(this).SetTarget)(
                ::windows::core::Vtable::as_raw(this),
                ::core::mem::transmute_copy(value),
            )
            .ok()
        }
    }
    pub fn InitialValueExpressions(
        &self,
    ) -> ::windows::core::Result<InitialValueExpressionCollection> {
        let this = &::windows::core::Interface::cast::<ICompositionAnimation3>(self)?;
        unsafe {
            let mut result__ = ::core::mem::MaybeUninit::zeroed();
            (::windows::core::Vtable::vtable(this).InitialValueExpressions)(
                ::windows::core::Vtable::as_raw(this),
                result__.as_mut_ptr(),
            )
            .from_abi::<InitialValueExpressionCollection>(result__)
        }
    }
    pub fn SetExpressionReferenceParameter<'a, P0, E0>(
        &self,
        parametername: &::windows::core::HSTRING,
        source: P0,
    ) -> ::windows::core::Result<()>
    where
        P0: ::std::convert::TryInto<::windows::core::InParam<'a, IAnimationObject>, Error = E0>,
        E0: ::std::convert::Into<::windows::core::Error>,
    {
        let this = &::windows::core::Interface::cast::<ICompositionAnimation4>(self)?;
        unsafe {
            (::windows::core::Vtable::vtable(this).SetExpressionReferenceParameter)(
                ::windows::core::Vtable::as_raw(this),
                ::core::mem::transmute_copy(parametername),
                source.try_into().map_err(|e| e.into())?.abi(),
            )
            .ok()
        }
    }
    pub fn Compositor(&self) -> ::windows::core::Result<Compositor> {
        let this = &::windows::core::Interface::cast::<ICompositionObject>(self)?;
        unsafe {
            let mut result__ = ::core::mem::MaybeUninit::zeroed();
            (::windows::core::Vtable::vtable(this).Compositor)(
                ::windows::core::Vtable::as_raw(this),
                result__.as_mut_ptr(),
            )
            .from_abi::<Compositor>(result__)
        }
    }
    pub fn Properties(&self) -> ::windows::core::Result<CompositionPropertySet> {
        let this = &::windows::core::Interface::cast::<ICompositionObject>(self)?;
        unsafe {
            let mut result__ = ::core::mem::MaybeUninit::zeroed();
            (::windows::core::Vtable::vtable(this).Properties)(
                ::windows::core::Vtable::as_raw(this),
                result__.as_mut_ptr(),
            )
            .from_abi::<CompositionPropertySet>(result__)
        }
    }
    pub fn StartAnimation<'a, P0>(
        &self,
        propertyname: &::windows::core::HSTRING,
        animation: P0,
    ) -> ::windows::core::Result<()>
    where
        P0: ::std::convert::Into<::windows::core::InParam<'a, CompositionAnimation>>,
    {
        let this = &::windows::core::Interface::cast::<ICompositionObject>(self)?;
        unsafe {
            (::windows::core::Vtable::vtable(this).StartAnimation)(
                ::windows::core::Vtable::as_raw(this),
                ::core::mem::transmute_copy(propertyname),
                animation.into().abi(),
            )
            .ok()
        }
    }
    pub fn StopAnimation(
        &self,
        propertyname: &::windows::core::HSTRING,
    ) -> ::windows::core::Result<()> {
        let this = &::windows::core::Interface::cast::<ICompositionObject>(self)?;
        unsafe {
            (::windows::core::Vtable::vtable(this).StopAnimation)(
                ::windows::core::Vtable::as_raw(this),
                ::core::mem::transmute_copy(propertyname),
            )
            .ok()
        }
    }
    pub fn Comment(&self) -> ::windows::core::Result<::windows::core::HSTRING> {
        let this = &::windows::core::Interface::cast::<ICompositionObject2>(self)?;
        unsafe {
            let mut result__ = ::core::mem::MaybeUninit::zeroed();
            (::windows::core::Vtable::vtable(this).Comment)(
                ::windows::core::Vtable::as_raw(this),
                result__.as_mut_ptr(),
            )
            .from_abi::<::windows::core::HSTRING>(result__)
        }
    }
    pub fn SetComment(&self, value: &::windows::core::HSTRING) -> ::windows::core::Result<()> {
        let this = &::windows::core::Interface::cast::<ICompositionObject2>(self)?;
        unsafe {
            (::windows::core::Vtable::vtable(this).SetComment)(
                ::windows::core::Vtable::as_raw(this),
                ::core::mem::transmute_copy(value),
            )
            .ok()
        }
    }
    pub fn ImplicitAnimations(&self) -> ::windows::core::Result<ImplicitAnimationCollection> {
        let this = &::windows::core::Interface::cast::<ICompositionObject2>(self)?;
        unsafe {
            let mut result__ = ::core::mem::MaybeUninit::zeroed();
            (::windows::core::Vtable::vtable(this).ImplicitAnimations)(
                ::windows::core::Vtable::as_raw(this),
                result__.as_mut_ptr(),
            )
            .from_abi::<ImplicitAnimationCollection>(result__)
        }
    }
    pub fn SetImplicitAnimations(
        &self,
        value: &ImplicitAnimationCollection,
    ) -> ::windows::core::Result<()> {
        let this = &::windows::core::Interface::cast::<ICompositionObject2>(self)?;
        unsafe {
            (::windows::core::Vtable::vtable(this).SetImplicitAnimations)(
                ::windows::core::Vtable::as_raw(this),
                ::core::mem::transmute_copy(value),
            )
            .ok()
        }
    }
    pub fn StartAnimationGroup<'a, P0, E0>(&self, value: P0) -> ::windows::core::Result<()>
    where
        P0: ::std::convert::TryInto<
            ::windows::core::InParam<'a, ICompositionAnimationBase>,
            Error = E0,
        >,
        E0: ::std::convert::Into<::windows::core::Error>,
    {
        let this = &::windows::core::Interface::cast::<ICompositionObject2>(self)?;
        unsafe {
            (::windows::core::Vtable::vtable(this).StartAnimationGroup)(
                ::windows::core::Vtable::as_raw(this),
                value.try_into().map_err(|e| e.into())?.abi(),
            )
            .ok()
        }
    }
    pub fn StopAnimationGroup<'a, P0, E0>(&self, value: P0) -> ::windows::core::Result<()>
    where
        P0: ::std::convert::TryInto<
            ::windows::core::InParam<'a, ICompositionAnimationBase>,
            Error = E0,
        >,
        E0: ::std::convert::Into<::windows::core::Error>,
    {
        let this = &::windows::core::Interface::cast::<ICompositionObject2>(self)?;
        unsafe {
            (::windows::core::Vtable::vtable(this).StopAnimationGroup)(
                ::windows::core::Vtable::as_raw(this),
                value.try_into().map_err(|e| e.into())?.abi(),
            )
            .ok()
        }
    }
    #[doc = "*Required features: `\"UI_Dispatching\"`*"]
    #[cfg(feature = "UI_Dispatching")]
    pub fn DispatcherQueue(&self) -> ::windows::core::Result<super::Dispatching::DispatcherQueue> {
        let this = &::windows::core::Interface::cast::<ICompositionObject3>(self)?;
        unsafe {
            let mut result__ = ::core::mem::MaybeUninit::zeroed();
            (::windows::core::Vtable::vtable(this).DispatcherQueue)(
                ::windows::core::Vtable::as_raw(this),
                result__.as_mut_ptr(),
            )
            .from_abi::<super::Dispatching::DispatcherQueue>(result__)
        }
    }
    pub fn TryGetAnimationController(
        &self,
        propertyname: &::windows::core::HSTRING,
    ) -> ::windows::core::Result<AnimationController> {
        let this = &::windows::core::Interface::cast::<ICompositionObject4>(self)?;
        unsafe {
            let mut result__ = ::core::mem::MaybeUninit::zeroed();
            (::windows::core::Vtable::vtable(this).TryGetAnimationController)(
                ::windows::core::Vtable::as_raw(this),
                ::core::mem::transmute_copy(propertyname),
                result__.as_mut_ptr(),
            )
            .from_abi::<AnimationController>(result__)
        }
    }
    pub fn StartAnimationWithController<'a, P0>(
        &self,
        propertyname: &::windows::core::HSTRING,
        animation: P0,
        animationcontroller: &AnimationController,
    ) -> ::windows::core::Result<()>
    where
        P0: ::std::convert::Into<::windows::core::InParam<'a, CompositionAnimation>>,
    {
        let this = &::windows::core::Interface::cast::<ICompositionObject5>(self)?;
        unsafe {
            (::windows::core::Vtable::vtable(this).StartAnimationWithController)(
                ::windows::core::Vtable::as_raw(this),
                ::core::mem::transmute_copy(propertyname),
                animation.into().abi(),
                ::core::mem::transmute_copy(animationcontroller),
            )
            .ok()
        }
    }
    pub fn DelayTime(&self) -> ::windows::core::Result<::windows::Foundation::TimeSpan> {
        let this = &::windows::core::Interface::cast::<IKeyFrameAnimation>(self)?;
        unsafe {
            let mut result__ = ::core::mem::MaybeUninit::zeroed();
            (::windows::core::Vtable::vtable(this).DelayTime)(
                ::windows::core::Vtable::as_raw(this),
                result__.as_mut_ptr(),
            )
            .from_abi::<::windows::Foundation::TimeSpan>(result__)
        }
    }
    pub fn SetDelayTime(
        &self,
        value: ::windows::Foundation::TimeSpan,
    ) -> ::windows::core::Result<()> {
        let this = &::windows::core::Interface::cast::<IKeyFrameAnimation>(self)?;
        unsafe {
            (::windows::core::Vtable::vtable(this).SetDelayTime)(
                ::windows::core::Vtable::as_raw(this),
                value,
            )
            .ok()
        }
    }
    pub fn Duration(&self) -> ::windows::core::Result<::windows::Foundation::TimeSpan> {
        let this = &::windows::core::Interface::cast::<IKeyFrameAnimation>(self)?;
        unsafe {
            let mut result__ = ::core::mem::MaybeUninit::zeroed();
            (::windows::core::Vtable::vtable(this).Duration)(
                ::windows::core::Vtable::as_raw(this),
                result__.as_mut_ptr(),
            )
            .from_abi::<::windows::Foundation::TimeSpan>(result__)
        }
    }
    pub fn SetDuration(
        &self,
        value: ::windows::Foundation::TimeSpan,
    ) -> ::windows::core::Result<()> {
        let this = &::windows::core::Interface::cast::<IKeyFrameAnimation>(self)?;
        unsafe {
            (::windows::core::Vtable::vtable(this).SetDuration)(
                ::windows::core::Vtable::as_raw(this),
                value,
            )
            .ok()
        }
    }
    pub fn IterationBehavior(&self) -> ::windows::core::Result<AnimationIterationBehavior> {
        let this = &::windows::core::Interface::cast::<IKeyFrameAnimation>(self)?;
        unsafe {
            let mut result__ = ::core::mem::MaybeUninit::zeroed();
            (::windows::core::Vtable::vtable(this).IterationBehavior)(
                ::windows::core::Vtable::as_raw(this),
                result__.as_mut_ptr(),
            )
            .from_abi::<AnimationIterationBehavior>(result__)
        }
    }
    pub fn SetIterationBehavior(
        &self,
        value: AnimationIterationBehavior,
    ) -> ::windows::core::Result<()> {
        let this = &::windows::core::Interface::cast::<IKeyFrameAnimation>(self)?;
        unsafe {
            (::windows::core::Vtable::vtable(this).SetIterationBehavior)(
                ::windows::core::Vtable::as_raw(this),
                value,
            )
            .ok()
        }
    }
    pub fn IterationCount(&self) -> ::windows::core::Result<i32> {
        let this = &::windows::core::Interface::cast::<IKeyFrameAnimation>(self)?;
        unsafe {
            let mut result__ = ::core::mem::MaybeUninit::zeroed();
            (::windows::core::Vtable::vtable(this).IterationCount)(
                ::windows::core::Vtable::as_raw(this),
                result__.as_mut_ptr(),
            )
            .from_abi::<i32>(result__)
        }
    }
    pub fn SetIterationCount(&self, value: i32) -> ::windows::core::Result<()> {
        let this = &::windows::core::Interface::cast::<IKeyFrameAnimation>(self)?;
        unsafe {
            (::windows::core::Vtable::vtable(this).SetIterationCount)(
                ::windows::core::Vtable::as_raw(this),
                value,
            )
            .ok()
        }
    }
    pub fn KeyFrameCount(&self) -> ::windows::core::Result<i32> {
        let this = &::windows::core::Interface::cast::<IKeyFrameAnimation>(self)?;
        unsafe {
            let mut result__ = ::core::mem::MaybeUninit::zeroed();
            (::windows::core::Vtable::vtable(this).KeyFrameCount)(
                ::windows::core::Vtable::as_raw(this),
                result__.as_mut_ptr(),
            )
            .from_abi::<i32>(result__)
        }
    }
    pub fn StopBehavior(&self) -> ::windows::core::Result<AnimationStopBehavior> {
        let this = &::windows::core::Interface::cast::<IKeyFrameAnimation>(self)?;
        unsafe {
            let mut result__ = ::core::mem::MaybeUninit::zeroed();
            (::windows::core::Vtable::vtable(this).StopBehavior)(
                ::windows::core::Vtable::as_raw(this),
                result__.as_mut_ptr(),
            )
            .from_abi::<AnimationStopBehavior>(result__)
        }
    }
    pub fn SetStopBehavior(&self, value: AnimationStopBehavior) -> ::windows::core::Result<()> {
        let this = &::windows::core::Interface::cast::<IKeyFrameAnimation>(self)?;
        unsafe {
            (::windows::core::Vtable::vtable(this).SetStopBehavior)(
                ::windows::core::Vtable::as_raw(this),
                value,
            )
            .ok()
        }
    }
    pub fn InsertExpressionKeyFrame(
        &self,
        normalizedprogresskey: f32,
        value: &::windows::core::HSTRING,
    ) -> ::windows::core::Result<()> {
        let this = &::windows::core::Interface::cast::<IKeyFrameAnimation>(self)?;
        unsafe {
            (::windows::core::Vtable::vtable(this).InsertExpressionKeyFrame)(
                ::windows::core::Vtable::as_raw(this),
                normalizedprogresskey,
                ::core::mem::transmute_copy(value),
            )
            .ok()
        }
    }
    pub fn InsertExpressionKeyFrameWithEasingFunction<'a, P0>(
        &self,
        normalizedprogresskey: f32,
        value: &::windows::core::HSTRING,
        easingfunction: P0,
    ) -> ::windows::core::Result<()>
    where
        P0: ::std::convert::Into<::windows::core::InParam<'a, CompositionEasingFunction>>,
    {
        let this = &::windows::core::Interface::cast::<IKeyFrameAnimation>(self)?;
        unsafe {
            (::windows::core::Vtable::vtable(this).InsertExpressionKeyFrameWithEasingFunction)(
                ::windows::core::Vtable::as_raw(this),
                normalizedprogresskey,
                ::core::mem::transmute_copy(value),
                easingfunction.into().abi(),
            )
            .ok()
        }
    }
    pub fn Direction(&self) -> ::windows::core::Result<AnimationDirection> {
        let this = &::windows::core::Interface::cast::<IKeyFrameAnimation2>(self)?;
        unsafe {
            let mut result__ = ::core::mem::MaybeUninit::zeroed();
            (::windows::core::Vtable::vtable(this).Direction)(
                ::windows::core::Vtable::as_raw(this),
                result__.as_mut_ptr(),
            )
            .from_abi::<AnimationDirection>(result__)
        }
    }
    pub fn SetDirection(&self, value: AnimationDirection) -> ::windows::core::Result<()> {
        let this = &::windows::core::Interface::cast::<IKeyFrameAnimation2>(self)?;
        unsafe {
            (::windows::core::Vtable::vtable(this).SetDirection)(
                ::windows::core::Vtable::as_raw(this),
                value,
            )
            .ok()
        }
    }
    pub fn DelayBehavior(&self) -> ::windows::core::Result<AnimationDelayBehavior> {
        let this = &::windows::core::Interface::cast::<IKeyFrameAnimation3>(self)?;
        unsafe {
            let mut result__ = ::core::mem::MaybeUninit::zeroed();
            (::windows::core::Vtable::vtable(this).DelayBehavior)(
                ::windows::core::Vtable::as_raw(this),
                result__.as_mut_ptr(),
            )
            .from_abi::<AnimationDelayBehavior>(result__)
        }
    }
    pub fn SetDelayBehavior(&self, value: AnimationDelayBehavior) -> ::windows::core::Result<()> {
        let this = &::windows::core::Interface::cast::<IKeyFrameAnimation3>(self)?;
        unsafe {
            (::windows::core::Vtable::vtable(this).SetDelayBehavior)(
                ::windows::core::Vtable::as_raw(this),
                value,
            )
            .ok()
        }
    }
    pub fn InsertKeyFrame(
        &self,
        normalizedprogresskey: f32,
        value: ::windows::Foundation::Numerics::Vector2,
    ) -> ::windows::core::Result<()> {
        let this = self;
        unsafe {
            (::windows::core::Vtable::vtable(this).InsertKeyFrame)(
                ::windows::core::Vtable::as_raw(this),
                normalizedprogresskey,
                value,
            )
            .ok()
        }
    }
    pub fn InsertKeyFrameWithEasingFunction<'a, P0>(
        &self,
        normalizedprogresskey: f32,
        value: ::windows::Foundation::Numerics::Vector2,
        easingfunction: P0,
    ) -> ::windows::core::Result<()>
    where
        P0: ::std::convert::Into<::windows::core::InParam<'a, CompositionEasingFunction>>,
    {
        let this = self;
        unsafe {
            (::windows::core::Vtable::vtable(this).InsertKeyFrameWithEasingFunction)(
                ::windows::core::Vtable::as_raw(this),
                normalizedprogresskey,
                value,
                easingfunction.into().abi(),
            )
            .ok()
        }
    }
}
impl ::core::clone::Clone for Vector2KeyFrameAnimation {
    fn clone(&self) -> Self {
        Self(self.0.clone())
    }
}
impl ::core::cmp::PartialEq for Vector2KeyFrameAnimation {
    fn eq(&self, other: &Self) -> bool {
        self.0 == other.0
    }
}
impl ::core::cmp::Eq for Vector2KeyFrameAnimation {}
impl ::core::fmt::Debug for Vector2KeyFrameAnimation {
    fn fmt(&self, f: &mut ::core::fmt::Formatter<'_>) -> ::core::fmt::Result {
        f.debug_tuple("Vector2KeyFrameAnimation").field(&self.0).finish()
    }
}
unsafe impl ::windows::core::RuntimeType for Vector2KeyFrameAnimation {
    const SIGNATURE : ::windows::core::ConstBuffer = ::windows::core::ConstBuffer::from_slice ( b"rc(Microsoft.UI.Composition.Vector2KeyFrameAnimation;{e9c5e3fd-43b7-526e-9da0-4c3ea96db27d})" ) ;
    type DefaultType = ::core::option::Option<Self>;
    fn from_default(from: &Self::DefaultType) -> ::windows::core::Result<Self> {
        from.as_ref().cloned().ok_or(::windows::core::Error::OK)
    }
}
unsafe impl ::windows::core::Vtable for Vector2KeyFrameAnimation {
    type Vtable = IVector2KeyFrameAnimation_Vtbl;
}
unsafe impl ::windows::core::Interface for Vector2KeyFrameAnimation {
    const IID: ::windows::core::GUID =
        <IVector2KeyFrameAnimation as ::windows::core::Interface>::IID;
}
impl ::windows::core::RuntimeName for Vector2KeyFrameAnimation {
    const NAME: &'static str = "Microsoft.UI.Composition.Vector2KeyFrameAnimation";
}
::windows::core::interface_hierarchy!(
    Vector2KeyFrameAnimation,
    ::windows::core::IUnknown,
    ::windows::core::IInspectable
);
impl ::core::convert::TryFrom<Vector2KeyFrameAnimation> for IAnimationObject {
    type Error = ::windows::core::Error;
    fn try_from(value: Vector2KeyFrameAnimation) -> ::windows::core::Result<Self> {
        ::core::convert::TryFrom::try_from(&value)
    }
}
impl ::core::convert::TryFrom<&Vector2KeyFrameAnimation> for IAnimationObject {
    type Error = ::windows::core::Error;
    fn try_from(value: &Vector2KeyFrameAnimation) -> ::windows::core::Result<Self> {
        ::windows::core::Interface::cast(value)
    }
}
impl<'a> ::core::convert::TryFrom<&Vector2KeyFrameAnimation>
    for ::windows::core::InParam<'a, IAnimationObject>
{
    type Error = ::windows::core::Error;
    fn try_from(value: &Vector2KeyFrameAnimation) -> ::windows::core::Result<Self> {
        let item = ::std::convert::TryInto::try_into(value)?;
        Ok(::windows::core::InParam::owned(item))
    }
}
impl ::core::convert::TryFrom<Vector2KeyFrameAnimation> for ::windows::Foundation::IClosable {
    type Error = ::windows::core::Error;
    fn try_from(value: Vector2KeyFrameAnimation) -> ::windows::core::Result<Self> {
        ::core::convert::TryFrom::try_from(&value)
    }
}
impl ::core::convert::TryFrom<&Vector2KeyFrameAnimation> for ::windows::Foundation::IClosable {
    type Error = ::windows::core::Error;
    fn try_from(value: &Vector2KeyFrameAnimation) -> ::windows::core::Result<Self> {
        ::windows::core::Interface::cast(value)
    }
}
impl<'a> ::core::convert::TryFrom<&Vector2KeyFrameAnimation>
    for ::windows::core::InParam<'a, ::windows::Foundation::IClosable>
{
    type Error = ::windows::core::Error;
    fn try_from(value: &Vector2KeyFrameAnimation) -> ::windows::core::Result<Self> {
        let item = ::std::convert::TryInto::try_into(value)?;
        Ok(::windows::core::InParam::owned(item))
    }
}
impl ::core::convert::TryFrom<Vector2KeyFrameAnimation> for ICompositionAnimationBase {
    type Error = ::windows::core::Error;
    fn try_from(value: Vector2KeyFrameAnimation) -> ::windows::core::Result<Self> {
        ::core::convert::TryFrom::try_from(&value)
    }
}
impl ::core::convert::TryFrom<&Vector2KeyFrameAnimation> for ICompositionAnimationBase {
    type Error = ::windows::core::Error;
    fn try_from(value: &Vector2KeyFrameAnimation) -> ::windows::core::Result<Self> {
        ::windows::core::Interface::cast(value)
    }
}
impl<'a> ::core::convert::TryFrom<&Vector2KeyFrameAnimation>
    for ::windows::core::InParam<'a, ICompositionAnimationBase>
{
    type Error = ::windows::core::Error;
    fn try_from(value: &Vector2KeyFrameAnimation) -> ::windows::core::Result<Self> {
        let item = ::std::convert::TryInto::try_into(value)?;
        Ok(::windows::core::InParam::owned(item))
    }
}
impl ::core::convert::From<Vector2KeyFrameAnimation> for KeyFrameAnimation {
    fn from(value: Vector2KeyFrameAnimation) -> Self {
        ::core::convert::From::from(&value)
    }
}
impl ::core::convert::From<&Vector2KeyFrameAnimation> for KeyFrameAnimation {
    fn from(value: &Vector2KeyFrameAnimation) -> Self {
        ::windows::core::Interface::cast(value).unwrap()
    }
}
impl<'a> ::core::convert::From<&Vector2KeyFrameAnimation>
    for ::windows::core::InParam<'a, KeyFrameAnimation>
{
    fn from(value: &Vector2KeyFrameAnimation) -> Self {
        ::windows::core::InParam::owned(value.into())
    }
}
impl ::core::convert::From<Vector2KeyFrameAnimation> for CompositionAnimation {
    fn from(value: Vector2KeyFrameAnimation) -> Self {
        ::core::convert::From::from(&value)
    }
}
impl ::core::convert::From<&Vector2KeyFrameAnimation> for CompositionAnimation {
    fn from(value: &Vector2KeyFrameAnimation) -> Self {
        ::windows::core::Interface::cast(value).unwrap()
    }
}
impl<'a> ::core::convert::From<&Vector2KeyFrameAnimation>
    for ::windows::core::InParam<'a, CompositionAnimation>
{
    fn from(value: &Vector2KeyFrameAnimation) -> Self {
        ::windows::core::InParam::owned(value.into())
    }
}
impl ::core::convert::From<Vector2KeyFrameAnimation> for CompositionObject {
    fn from(value: Vector2KeyFrameAnimation) -> Self {
        ::core::convert::From::from(&value)
    }
}
impl ::core::convert::From<&Vector2KeyFrameAnimation> for CompositionObject {
    fn from(value: &Vector2KeyFrameAnimation) -> Self {
        ::windows::core::Interface::cast(value).unwrap()
    }
}
impl<'a> ::core::convert::From<&Vector2KeyFrameAnimation>
    for ::windows::core::InParam<'a, CompositionObject>
{
    fn from(value: &Vector2KeyFrameAnimation) -> Self {
        ::windows::core::InParam::owned(value.into())
    }
}
unsafe impl ::core::marker::Send for Vector2KeyFrameAnimation {}
unsafe impl ::core::marker::Sync for Vector2KeyFrameAnimation {}
#[doc = "*Required features: `\"UI_Composition\"`*"]
#[repr(transparent)]
pub struct Vector2NaturalMotionAnimation(::windows::core::IUnknown);
impl Vector2NaturalMotionAnimation {
    pub fn PopulatePropertyInfo(
        &self,
        propertyname: &::windows::core::HSTRING,
        propertyinfo: &AnimationPropertyInfo,
    ) -> ::windows::core::Result<()> {
        let this = &::windows::core::Interface::cast::<IAnimationObject>(self)?;
        unsafe {
            (::windows::core::Vtable::vtable(this).PopulatePropertyInfo)(
                ::windows::core::Vtable::as_raw(this),
                ::core::mem::transmute_copy(propertyname),
                ::core::mem::transmute_copy(propertyinfo),
            )
            .ok()
        }
    }
    pub fn Close(&self) -> ::windows::core::Result<()> {
        let this = &::windows::core::Interface::cast::<::windows::Foundation::IClosable>(self)?;
        unsafe {
            (::windows::core::Vtable::vtable(this).Close)(::windows::core::Vtable::as_raw(this))
                .ok()
        }
    }
    pub fn ClearAllParameters(&self) -> ::windows::core::Result<()> {
        let this = &::windows::core::Interface::cast::<ICompositionAnimation>(self)?;
        unsafe {
            (::windows::core::Vtable::vtable(this).ClearAllParameters)(
                ::windows::core::Vtable::as_raw(this),
            )
            .ok()
        }
    }
    pub fn ClearParameter(&self, key: &::windows::core::HSTRING) -> ::windows::core::Result<()> {
        let this = &::windows::core::Interface::cast::<ICompositionAnimation>(self)?;
        unsafe {
            (::windows::core::Vtable::vtable(this).ClearParameter)(
                ::windows::core::Vtable::as_raw(this),
                ::core::mem::transmute_copy(key),
            )
            .ok()
        }
    }
    pub fn SetColorParameter(
        &self,
        key: &::windows::core::HSTRING,
        value: ::windows::UI::Color,
    ) -> ::windows::core::Result<()> {
        let this = &::windows::core::Interface::cast::<ICompositionAnimation>(self)?;
        unsafe {
            (::windows::core::Vtable::vtable(this).SetColorParameter)(
                ::windows::core::Vtable::as_raw(this),
                ::core::mem::transmute_copy(key),
                value,
            )
            .ok()
        }
    }
    pub fn SetMatrix3x2Parameter(
        &self,
        key: &::windows::core::HSTRING,
        value: ::windows::Foundation::Numerics::Matrix3x2,
    ) -> ::windows::core::Result<()> {
        let this = &::windows::core::Interface::cast::<ICompositionAnimation>(self)?;
        unsafe {
            (::windows::core::Vtable::vtable(this).SetMatrix3x2Parameter)(
                ::windows::core::Vtable::as_raw(this),
                ::core::mem::transmute_copy(key),
                value,
            )
            .ok()
        }
    }
    pub fn SetMatrix4x4Parameter(
        &self,
        key: &::windows::core::HSTRING,
        value: ::windows::Foundation::Numerics::Matrix4x4,
    ) -> ::windows::core::Result<()> {
        let this = &::windows::core::Interface::cast::<ICompositionAnimation>(self)?;
        unsafe {
            (::windows::core::Vtable::vtable(this).SetMatrix4x4Parameter)(
                ::windows::core::Vtable::as_raw(this),
                ::core::mem::transmute_copy(key),
                value,
            )
            .ok()
        }
    }
    pub fn SetQuaternionParameter(
        &self,
        key: &::windows::core::HSTRING,
        value: ::windows::Foundation::Numerics::Quaternion,
    ) -> ::windows::core::Result<()> {
        let this = &::windows::core::Interface::cast::<ICompositionAnimation>(self)?;
        unsafe {
            (::windows::core::Vtable::vtable(this).SetQuaternionParameter)(
                ::windows::core::Vtable::as_raw(this),
                ::core::mem::transmute_copy(key),
                value,
            )
            .ok()
        }
    }
    pub fn SetReferenceParameter<'a, P0>(
        &self,
        key: &::windows::core::HSTRING,
        compositionobject: P0,
    ) -> ::windows::core::Result<()>
    where
        P0: ::std::convert::Into<::windows::core::InParam<'a, CompositionObject>>,
    {
        let this = &::windows::core::Interface::cast::<ICompositionAnimation>(self)?;
        unsafe {
            (::windows::core::Vtable::vtable(this).SetReferenceParameter)(
                ::windows::core::Vtable::as_raw(this),
                ::core::mem::transmute_copy(key),
                compositionobject.into().abi(),
            )
            .ok()
        }
    }
    pub fn SetScalarParameter(
        &self,
        key: &::windows::core::HSTRING,
        value: f32,
    ) -> ::windows::core::Result<()> {
        let this = &::windows::core::Interface::cast::<ICompositionAnimation>(self)?;
        unsafe {
            (::windows::core::Vtable::vtable(this).SetScalarParameter)(
                ::windows::core::Vtable::as_raw(this),
                ::core::mem::transmute_copy(key),
                value,
            )
            .ok()
        }
    }
    pub fn SetVector2Parameter(
        &self,
        key: &::windows::core::HSTRING,
        value: ::windows::Foundation::Numerics::Vector2,
    ) -> ::windows::core::Result<()> {
        let this = &::windows::core::Interface::cast::<ICompositionAnimation>(self)?;
        unsafe {
            (::windows::core::Vtable::vtable(this).SetVector2Parameter)(
                ::windows::core::Vtable::as_raw(this),
                ::core::mem::transmute_copy(key),
                value,
            )
            .ok()
        }
    }
    pub fn SetVector3Parameter(
        &self,
        key: &::windows::core::HSTRING,
        value: ::windows::Foundation::Numerics::Vector3,
    ) -> ::windows::core::Result<()> {
        let this = &::windows::core::Interface::cast::<ICompositionAnimation>(self)?;
        unsafe {
            (::windows::core::Vtable::vtable(this).SetVector3Parameter)(
                ::windows::core::Vtable::as_raw(this),
                ::core::mem::transmute_copy(key),
                value,
            )
            .ok()
        }
    }
    pub fn SetVector4Parameter(
        &self,
        key: &::windows::core::HSTRING,
        value: ::windows::Foundation::Numerics::Vector4,
    ) -> ::windows::core::Result<()> {
        let this = &::windows::core::Interface::cast::<ICompositionAnimation>(self)?;
        unsafe {
            (::windows::core::Vtable::vtable(this).SetVector4Parameter)(
                ::windows::core::Vtable::as_raw(this),
                ::core::mem::transmute_copy(key),
                value,
            )
            .ok()
        }
    }
    pub fn SetBooleanParameter(
        &self,
        key: &::windows::core::HSTRING,
        value: bool,
    ) -> ::windows::core::Result<()> {
        let this = &::windows::core::Interface::cast::<ICompositionAnimation2>(self)?;
        unsafe {
            (::windows::core::Vtable::vtable(this).SetBooleanParameter)(
                ::windows::core::Vtable::as_raw(this),
                ::core::mem::transmute_copy(key),
                value,
            )
            .ok()
        }
    }
    pub fn Target(&self) -> ::windows::core::Result<::windows::core::HSTRING> {
        let this = &::windows::core::Interface::cast::<ICompositionAnimation2>(self)?;
        unsafe {
            let mut result__ = ::core::mem::MaybeUninit::zeroed();
            (::windows::core::Vtable::vtable(this).Target)(
                ::windows::core::Vtable::as_raw(this),
                result__.as_mut_ptr(),
            )
            .from_abi::<::windows::core::HSTRING>(result__)
        }
    }
    pub fn SetTarget(&self, value: &::windows::core::HSTRING) -> ::windows::core::Result<()> {
        let this = &::windows::core::Interface::cast::<ICompositionAnimation2>(self)?;
        unsafe {
            (::windows::core::Vtable::vtable(this).SetTarget)(
                ::windows::core::Vtable::as_raw(this),
                ::core::mem::transmute_copy(value),
            )
            .ok()
        }
    }
    pub fn InitialValueExpressions(
        &self,
    ) -> ::windows::core::Result<InitialValueExpressionCollection> {
        let this = &::windows::core::Interface::cast::<ICompositionAnimation3>(self)?;
        unsafe {
            let mut result__ = ::core::mem::MaybeUninit::zeroed();
            (::windows::core::Vtable::vtable(this).InitialValueExpressions)(
                ::windows::core::Vtable::as_raw(this),
                result__.as_mut_ptr(),
            )
            .from_abi::<InitialValueExpressionCollection>(result__)
        }
    }
    pub fn SetExpressionReferenceParameter<'a, P0, E0>(
        &self,
        parametername: &::windows::core::HSTRING,
        source: P0,
    ) -> ::windows::core::Result<()>
    where
        P0: ::std::convert::TryInto<::windows::core::InParam<'a, IAnimationObject>, Error = E0>,
        E0: ::std::convert::Into<::windows::core::Error>,
    {
        let this = &::windows::core::Interface::cast::<ICompositionAnimation4>(self)?;
        unsafe {
            (::windows::core::Vtable::vtable(this).SetExpressionReferenceParameter)(
                ::windows::core::Vtable::as_raw(this),
                ::core::mem::transmute_copy(parametername),
                source.try_into().map_err(|e| e.into())?.abi(),
            )
            .ok()
        }
    }
    pub fn Compositor(&self) -> ::windows::core::Result<Compositor> {
        let this = &::windows::core::Interface::cast::<ICompositionObject>(self)?;
        unsafe {
            let mut result__ = ::core::mem::MaybeUninit::zeroed();
            (::windows::core::Vtable::vtable(this).Compositor)(
                ::windows::core::Vtable::as_raw(this),
                result__.as_mut_ptr(),
            )
            .from_abi::<Compositor>(result__)
        }
    }
    pub fn Properties(&self) -> ::windows::core::Result<CompositionPropertySet> {
        let this = &::windows::core::Interface::cast::<ICompositionObject>(self)?;
        unsafe {
            let mut result__ = ::core::mem::MaybeUninit::zeroed();
            (::windows::core::Vtable::vtable(this).Properties)(
                ::windows::core::Vtable::as_raw(this),
                result__.as_mut_ptr(),
            )
            .from_abi::<CompositionPropertySet>(result__)
        }
    }
    pub fn StartAnimation<'a, P0>(
        &self,
        propertyname: &::windows::core::HSTRING,
        animation: P0,
    ) -> ::windows::core::Result<()>
    where
        P0: ::std::convert::Into<::windows::core::InParam<'a, CompositionAnimation>>,
    {
        let this = &::windows::core::Interface::cast::<ICompositionObject>(self)?;
        unsafe {
            (::windows::core::Vtable::vtable(this).StartAnimation)(
                ::windows::core::Vtable::as_raw(this),
                ::core::mem::transmute_copy(propertyname),
                animation.into().abi(),
            )
            .ok()
        }
    }
    pub fn StopAnimation(
        &self,
        propertyname: &::windows::core::HSTRING,
    ) -> ::windows::core::Result<()> {
        let this = &::windows::core::Interface::cast::<ICompositionObject>(self)?;
        unsafe {
            (::windows::core::Vtable::vtable(this).StopAnimation)(
                ::windows::core::Vtable::as_raw(this),
                ::core::mem::transmute_copy(propertyname),
            )
            .ok()
        }
    }
    pub fn Comment(&self) -> ::windows::core::Result<::windows::core::HSTRING> {
        let this = &::windows::core::Interface::cast::<ICompositionObject2>(self)?;
        unsafe {
            let mut result__ = ::core::mem::MaybeUninit::zeroed();
            (::windows::core::Vtable::vtable(this).Comment)(
                ::windows::core::Vtable::as_raw(this),
                result__.as_mut_ptr(),
            )
            .from_abi::<::windows::core::HSTRING>(result__)
        }
    }
    pub fn SetComment(&self, value: &::windows::core::HSTRING) -> ::windows::core::Result<()> {
        let this = &::windows::core::Interface::cast::<ICompositionObject2>(self)?;
        unsafe {
            (::windows::core::Vtable::vtable(this).SetComment)(
                ::windows::core::Vtable::as_raw(this),
                ::core::mem::transmute_copy(value),
            )
            .ok()
        }
    }
    pub fn ImplicitAnimations(&self) -> ::windows::core::Result<ImplicitAnimationCollection> {
        let this = &::windows::core::Interface::cast::<ICompositionObject2>(self)?;
        unsafe {
            let mut result__ = ::core::mem::MaybeUninit::zeroed();
            (::windows::core::Vtable::vtable(this).ImplicitAnimations)(
                ::windows::core::Vtable::as_raw(this),
                result__.as_mut_ptr(),
            )
            .from_abi::<ImplicitAnimationCollection>(result__)
        }
    }
    pub fn SetImplicitAnimations(
        &self,
        value: &ImplicitAnimationCollection,
    ) -> ::windows::core::Result<()> {
        let this = &::windows::core::Interface::cast::<ICompositionObject2>(self)?;
        unsafe {
            (::windows::core::Vtable::vtable(this).SetImplicitAnimations)(
                ::windows::core::Vtable::as_raw(this),
                ::core::mem::transmute_copy(value),
            )
            .ok()
        }
    }
    pub fn StartAnimationGroup<'a, P0, E0>(&self, value: P0) -> ::windows::core::Result<()>
    where
        P0: ::std::convert::TryInto<
            ::windows::core::InParam<'a, ICompositionAnimationBase>,
            Error = E0,
        >,
        E0: ::std::convert::Into<::windows::core::Error>,
    {
        let this = &::windows::core::Interface::cast::<ICompositionObject2>(self)?;
        unsafe {
            (::windows::core::Vtable::vtable(this).StartAnimationGroup)(
                ::windows::core::Vtable::as_raw(this),
                value.try_into().map_err(|e| e.into())?.abi(),
            )
            .ok()
        }
    }
    pub fn StopAnimationGroup<'a, P0, E0>(&self, value: P0) -> ::windows::core::Result<()>
    where
        P0: ::std::convert::TryInto<
            ::windows::core::InParam<'a, ICompositionAnimationBase>,
            Error = E0,
        >,
        E0: ::std::convert::Into<::windows::core::Error>,
    {
        let this = &::windows::core::Interface::cast::<ICompositionObject2>(self)?;
        unsafe {
            (::windows::core::Vtable::vtable(this).StopAnimationGroup)(
                ::windows::core::Vtable::as_raw(this),
                value.try_into().map_err(|e| e.into())?.abi(),
            )
            .ok()
        }
    }
    #[doc = "*Required features: `\"UI_Dispatching\"`*"]
    #[cfg(feature = "UI_Dispatching")]
    pub fn DispatcherQueue(&self) -> ::windows::core::Result<super::Dispatching::DispatcherQueue> {
        let this = &::windows::core::Interface::cast::<ICompositionObject3>(self)?;
        unsafe {
            let mut result__ = ::core::mem::MaybeUninit::zeroed();
            (::windows::core::Vtable::vtable(this).DispatcherQueue)(
                ::windows::core::Vtable::as_raw(this),
                result__.as_mut_ptr(),
            )
            .from_abi::<super::Dispatching::DispatcherQueue>(result__)
        }
    }
    pub fn TryGetAnimationController(
        &self,
        propertyname: &::windows::core::HSTRING,
    ) -> ::windows::core::Result<AnimationController> {
        let this = &::windows::core::Interface::cast::<ICompositionObject4>(self)?;
        unsafe {
            let mut result__ = ::core::mem::MaybeUninit::zeroed();
            (::windows::core::Vtable::vtable(this).TryGetAnimationController)(
                ::windows::core::Vtable::as_raw(this),
                ::core::mem::transmute_copy(propertyname),
                result__.as_mut_ptr(),
            )
            .from_abi::<AnimationController>(result__)
        }
    }
    pub fn StartAnimationWithController<'a, P0>(
        &self,
        propertyname: &::windows::core::HSTRING,
        animation: P0,
        animationcontroller: &AnimationController,
    ) -> ::windows::core::Result<()>
    where
        P0: ::std::convert::Into<::windows::core::InParam<'a, CompositionAnimation>>,
    {
        let this = &::windows::core::Interface::cast::<ICompositionObject5>(self)?;
        unsafe {
            (::windows::core::Vtable::vtable(this).StartAnimationWithController)(
                ::windows::core::Vtable::as_raw(this),
                ::core::mem::transmute_copy(propertyname),
                animation.into().abi(),
                ::core::mem::transmute_copy(animationcontroller),
            )
            .ok()
        }
    }
    pub fn DelayBehavior(&self) -> ::windows::core::Result<AnimationDelayBehavior> {
        let this = &::windows::core::Interface::cast::<INaturalMotionAnimation>(self)?;
        unsafe {
            let mut result__ = ::core::mem::MaybeUninit::zeroed();
            (::windows::core::Vtable::vtable(this).DelayBehavior)(
                ::windows::core::Vtable::as_raw(this),
                result__.as_mut_ptr(),
            )
            .from_abi::<AnimationDelayBehavior>(result__)
        }
    }
    pub fn SetDelayBehavior(&self, value: AnimationDelayBehavior) -> ::windows::core::Result<()> {
        let this = &::windows::core::Interface::cast::<INaturalMotionAnimation>(self)?;
        unsafe {
            (::windows::core::Vtable::vtable(this).SetDelayBehavior)(
                ::windows::core::Vtable::as_raw(this),
                value,
            )
            .ok()
        }
    }
    pub fn DelayTime(&self) -> ::windows::core::Result<::windows::Foundation::TimeSpan> {
        let this = &::windows::core::Interface::cast::<INaturalMotionAnimation>(self)?;
        unsafe {
            let mut result__ = ::core::mem::MaybeUninit::zeroed();
            (::windows::core::Vtable::vtable(this).DelayTime)(
                ::windows::core::Vtable::as_raw(this),
                result__.as_mut_ptr(),
            )
            .from_abi::<::windows::Foundation::TimeSpan>(result__)
        }
    }
    pub fn SetDelayTime(
        &self,
        value: ::windows::Foundation::TimeSpan,
    ) -> ::windows::core::Result<()> {
        let this = &::windows::core::Interface::cast::<INaturalMotionAnimation>(self)?;
        unsafe {
            (::windows::core::Vtable::vtable(this).SetDelayTime)(
                ::windows::core::Vtable::as_raw(this),
                value,
            )
            .ok()
        }
    }
    pub fn StopBehavior(&self) -> ::windows::core::Result<AnimationStopBehavior> {
        let this = &::windows::core::Interface::cast::<INaturalMotionAnimation>(self)?;
        unsafe {
            let mut result__ = ::core::mem::MaybeUninit::zeroed();
            (::windows::core::Vtable::vtable(this).StopBehavior)(
                ::windows::core::Vtable::as_raw(this),
                result__.as_mut_ptr(),
            )
            .from_abi::<AnimationStopBehavior>(result__)
        }
    }
    pub fn SetStopBehavior(&self, value: AnimationStopBehavior) -> ::windows::core::Result<()> {
        let this = &::windows::core::Interface::cast::<INaturalMotionAnimation>(self)?;
        unsafe {
            (::windows::core::Vtable::vtable(this).SetStopBehavior)(
                ::windows::core::Vtable::as_raw(this),
                value,
            )
            .ok()
        }
    }
    pub fn FinalValue(
        &self,
    ) -> ::windows::core::Result<
        ::windows::Foundation::IReference<::windows::Foundation::Numerics::Vector2>,
    > {
        let this = self;
        unsafe {
            let mut result__ = ::core::mem::MaybeUninit::zeroed();
            ( ::windows::core::Vtable::vtable ( this ) . FinalValue ) ( ::windows::core::Vtable::as_raw ( this ) , result__ . as_mut_ptr ( ) ) . from_abi:: < ::windows::Foundation:: IReference :: < ::windows::Foundation::Numerics:: Vector2 > > ( result__ )
        }
    }
    pub fn SetFinalValue<'a, P0, E0>(&self, value: P0) -> ::windows::core::Result<()>
    where
        P0: ::std::convert::TryInto<
            ::windows::core::InParam<
                'a,
                ::windows::Foundation::IReference<::windows::Foundation::Numerics::Vector2>,
            >,
            Error = E0,
        >,
        E0: ::std::convert::Into<::windows::core::Error>,
    {
        let this = self;
        unsafe {
            (::windows::core::Vtable::vtable(this).SetFinalValue)(
                ::windows::core::Vtable::as_raw(this),
                value.try_into().map_err(|e| e.into())?.abi(),
            )
            .ok()
        }
    }
    pub fn InitialValue(
        &self,
    ) -> ::windows::core::Result<
        ::windows::Foundation::IReference<::windows::Foundation::Numerics::Vector2>,
    > {
        let this = self;
        unsafe {
            let mut result__ = ::core::mem::MaybeUninit::zeroed();
            ( ::windows::core::Vtable::vtable ( this ) . InitialValue ) ( ::windows::core::Vtable::as_raw ( this ) , result__ . as_mut_ptr ( ) ) . from_abi:: < ::windows::Foundation:: IReference :: < ::windows::Foundation::Numerics:: Vector2 > > ( result__ )
        }
    }
    pub fn SetInitialValue<'a, P0, E0>(&self, value: P0) -> ::windows::core::Result<()>
    where
        P0: ::std::convert::TryInto<
            ::windows::core::InParam<
                'a,
                ::windows::Foundation::IReference<::windows::Foundation::Numerics::Vector2>,
            >,
            Error = E0,
        >,
        E0: ::std::convert::Into<::windows::core::Error>,
    {
        let this = self;
        unsafe {
            (::windows::core::Vtable::vtable(this).SetInitialValue)(
                ::windows::core::Vtable::as_raw(this),
                value.try_into().map_err(|e| e.into())?.abi(),
            )
            .ok()
        }
    }
    pub fn InitialVelocity(
        &self,
    ) -> ::windows::core::Result<::windows::Foundation::Numerics::Vector2> {
        let this = self;
        unsafe {
            let mut result__ = ::core::mem::MaybeUninit::zeroed();
            (::windows::core::Vtable::vtable(this).InitialVelocity)(
                ::windows::core::Vtable::as_raw(this),
                result__.as_mut_ptr(),
            )
            .from_abi::<::windows::Foundation::Numerics::Vector2>(result__)
        }
    }
    pub fn SetInitialVelocity(
        &self,
        value: ::windows::Foundation::Numerics::Vector2,
    ) -> ::windows::core::Result<()> {
        let this = self;
        unsafe {
            (::windows::core::Vtable::vtable(this).SetInitialVelocity)(
                ::windows::core::Vtable::as_raw(this),
                value,
            )
            .ok()
        }
    }
}
impl ::core::clone::Clone for Vector2NaturalMotionAnimation {
    fn clone(&self) -> Self {
        Self(self.0.clone())
    }
}
impl ::core::cmp::PartialEq for Vector2NaturalMotionAnimation {
    fn eq(&self, other: &Self) -> bool {
        self.0 == other.0
    }
}
impl ::core::cmp::Eq for Vector2NaturalMotionAnimation {}
impl ::core::fmt::Debug for Vector2NaturalMotionAnimation {
    fn fmt(&self, f: &mut ::core::fmt::Formatter<'_>) -> ::core::fmt::Result {
        f.debug_tuple("Vector2NaturalMotionAnimation").field(&self.0).finish()
    }
}
unsafe impl ::windows::core::RuntimeType for Vector2NaturalMotionAnimation {
    const SIGNATURE : ::windows::core::ConstBuffer = ::windows::core::ConstBuffer::from_slice ( b"rc(Microsoft.UI.Composition.Vector2NaturalMotionAnimation;{e00e60ce-d1be-5c24-885d-c1d0a749d109})" ) ;
    type DefaultType = ::core::option::Option<Self>;
    fn from_default(from: &Self::DefaultType) -> ::windows::core::Result<Self> {
        from.as_ref().cloned().ok_or(::windows::core::Error::OK)
    }
}
unsafe impl ::windows::core::Vtable for Vector2NaturalMotionAnimation {
    type Vtable = IVector2NaturalMotionAnimation_Vtbl;
}
unsafe impl ::windows::core::Interface for Vector2NaturalMotionAnimation {
    const IID: ::windows::core::GUID =
        <IVector2NaturalMotionAnimation as ::windows::core::Interface>::IID;
}
impl ::windows::core::RuntimeName for Vector2NaturalMotionAnimation {
    const NAME: &'static str = "Microsoft.UI.Composition.Vector2NaturalMotionAnimation";
}
::windows::core::interface_hierarchy!(
    Vector2NaturalMotionAnimation,
    ::windows::core::IUnknown,
    ::windows::core::IInspectable
);
impl ::core::convert::TryFrom<Vector2NaturalMotionAnimation> for IAnimationObject {
    type Error = ::windows::core::Error;
    fn try_from(value: Vector2NaturalMotionAnimation) -> ::windows::core::Result<Self> {
        ::core::convert::TryFrom::try_from(&value)
    }
}
impl ::core::convert::TryFrom<&Vector2NaturalMotionAnimation> for IAnimationObject {
    type Error = ::windows::core::Error;
    fn try_from(value: &Vector2NaturalMotionAnimation) -> ::windows::core::Result<Self> {
        ::windows::core::Interface::cast(value)
    }
}
impl<'a> ::core::convert::TryFrom<&Vector2NaturalMotionAnimation>
    for ::windows::core::InParam<'a, IAnimationObject>
{
    type Error = ::windows::core::Error;
    fn try_from(value: &Vector2NaturalMotionAnimation) -> ::windows::core::Result<Self> {
        let item = ::std::convert::TryInto::try_into(value)?;
        Ok(::windows::core::InParam::owned(item))
    }
}
impl ::core::convert::TryFrom<Vector2NaturalMotionAnimation> for ::windows::Foundation::IClosable {
    type Error = ::windows::core::Error;
    fn try_from(value: Vector2NaturalMotionAnimation) -> ::windows::core::Result<Self> {
        ::core::convert::TryFrom::try_from(&value)
    }
}
impl ::core::convert::TryFrom<&Vector2NaturalMotionAnimation> for ::windows::Foundation::IClosable {
    type Error = ::windows::core::Error;
    fn try_from(value: &Vector2NaturalMotionAnimation) -> ::windows::core::Result<Self> {
        ::windows::core::Interface::cast(value)
    }
}
impl<'a> ::core::convert::TryFrom<&Vector2NaturalMotionAnimation>
    for ::windows::core::InParam<'a, ::windows::Foundation::IClosable>
{
    type Error = ::windows::core::Error;
    fn try_from(value: &Vector2NaturalMotionAnimation) -> ::windows::core::Result<Self> {
        let item = ::std::convert::TryInto::try_into(value)?;
        Ok(::windows::core::InParam::owned(item))
    }
}
impl ::core::convert::TryFrom<Vector2NaturalMotionAnimation> for ICompositionAnimationBase {
    type Error = ::windows::core::Error;
    fn try_from(value: Vector2NaturalMotionAnimation) -> ::windows::core::Result<Self> {
        ::core::convert::TryFrom::try_from(&value)
    }
}
impl ::core::convert::TryFrom<&Vector2NaturalMotionAnimation> for ICompositionAnimationBase {
    type Error = ::windows::core::Error;
    fn try_from(value: &Vector2NaturalMotionAnimation) -> ::windows::core::Result<Self> {
        ::windows::core::Interface::cast(value)
    }
}
impl<'a> ::core::convert::TryFrom<&Vector2NaturalMotionAnimation>
    for ::windows::core::InParam<'a, ICompositionAnimationBase>
{
    type Error = ::windows::core::Error;
    fn try_from(value: &Vector2NaturalMotionAnimation) -> ::windows::core::Result<Self> {
        let item = ::std::convert::TryInto::try_into(value)?;
        Ok(::windows::core::InParam::owned(item))
    }
}
impl ::core::convert::From<Vector2NaturalMotionAnimation> for NaturalMotionAnimation {
    fn from(value: Vector2NaturalMotionAnimation) -> Self {
        ::core::convert::From::from(&value)
    }
}
impl ::core::convert::From<&Vector2NaturalMotionAnimation> for NaturalMotionAnimation {
    fn from(value: &Vector2NaturalMotionAnimation) -> Self {
        ::windows::core::Interface::cast(value).unwrap()
    }
}
impl<'a> ::core::convert::From<&Vector2NaturalMotionAnimation>
    for ::windows::core::InParam<'a, NaturalMotionAnimation>
{
    fn from(value: &Vector2NaturalMotionAnimation) -> Self {
        ::windows::core::InParam::owned(value.into())
    }
}
impl ::core::convert::From<Vector2NaturalMotionAnimation> for CompositionAnimation {
    fn from(value: Vector2NaturalMotionAnimation) -> Self {
        ::core::convert::From::from(&value)
    }
}
impl ::core::convert::From<&Vector2NaturalMotionAnimation> for CompositionAnimation {
    fn from(value: &Vector2NaturalMotionAnimation) -> Self {
        ::windows::core::Interface::cast(value).unwrap()
    }
}
impl<'a> ::core::convert::From<&Vector2NaturalMotionAnimation>
    for ::windows::core::InParam<'a, CompositionAnimation>
{
    fn from(value: &Vector2NaturalMotionAnimation) -> Self {
        ::windows::core::InParam::owned(value.into())
    }
}
impl ::core::convert::From<Vector2NaturalMotionAnimation> for CompositionObject {
    fn from(value: Vector2NaturalMotionAnimation) -> Self {
        ::core::convert::From::from(&value)
    }
}
impl ::core::convert::From<&Vector2NaturalMotionAnimation> for CompositionObject {
    fn from(value: &Vector2NaturalMotionAnimation) -> Self {
        ::windows::core::Interface::cast(value).unwrap()
    }
}
impl<'a> ::core::convert::From<&Vector2NaturalMotionAnimation>
    for ::windows::core::InParam<'a, CompositionObject>
{
    fn from(value: &Vector2NaturalMotionAnimation) -> Self {
        ::windows::core::InParam::owned(value.into())
    }
}
unsafe impl ::core::marker::Send for Vector2NaturalMotionAnimation {}
unsafe impl ::core::marker::Sync for Vector2NaturalMotionAnimation {}
#[doc = "*Required features: `\"UI_Composition\"`*"]
#[repr(transparent)]
pub struct Vector3KeyFrameAnimation(::windows::core::IUnknown);
impl Vector3KeyFrameAnimation {
    pub fn PopulatePropertyInfo(
        &self,
        propertyname: &::windows::core::HSTRING,
        propertyinfo: &AnimationPropertyInfo,
    ) -> ::windows::core::Result<()> {
        let this = &::windows::core::Interface::cast::<IAnimationObject>(self)?;
        unsafe {
            (::windows::core::Vtable::vtable(this).PopulatePropertyInfo)(
                ::windows::core::Vtable::as_raw(this),
                ::core::mem::transmute_copy(propertyname),
                ::core::mem::transmute_copy(propertyinfo),
            )
            .ok()
        }
    }
    pub fn Close(&self) -> ::windows::core::Result<()> {
        let this = &::windows::core::Interface::cast::<::windows::Foundation::IClosable>(self)?;
        unsafe {
            (::windows::core::Vtable::vtable(this).Close)(::windows::core::Vtable::as_raw(this))
                .ok()
        }
    }
    pub fn ClearAllParameters(&self) -> ::windows::core::Result<()> {
        let this = &::windows::core::Interface::cast::<ICompositionAnimation>(self)?;
        unsafe {
            (::windows::core::Vtable::vtable(this).ClearAllParameters)(
                ::windows::core::Vtable::as_raw(this),
            )
            .ok()
        }
    }
    pub fn ClearParameter(&self, key: &::windows::core::HSTRING) -> ::windows::core::Result<()> {
        let this = &::windows::core::Interface::cast::<ICompositionAnimation>(self)?;
        unsafe {
            (::windows::core::Vtable::vtable(this).ClearParameter)(
                ::windows::core::Vtable::as_raw(this),
                ::core::mem::transmute_copy(key),
            )
            .ok()
        }
    }
    pub fn SetColorParameter(
        &self,
        key: &::windows::core::HSTRING,
        value: ::windows::UI::Color,
    ) -> ::windows::core::Result<()> {
        let this = &::windows::core::Interface::cast::<ICompositionAnimation>(self)?;
        unsafe {
            (::windows::core::Vtable::vtable(this).SetColorParameter)(
                ::windows::core::Vtable::as_raw(this),
                ::core::mem::transmute_copy(key),
                value,
            )
            .ok()
        }
    }
    pub fn SetMatrix3x2Parameter(
        &self,
        key: &::windows::core::HSTRING,
        value: ::windows::Foundation::Numerics::Matrix3x2,
    ) -> ::windows::core::Result<()> {
        let this = &::windows::core::Interface::cast::<ICompositionAnimation>(self)?;
        unsafe {
            (::windows::core::Vtable::vtable(this).SetMatrix3x2Parameter)(
                ::windows::core::Vtable::as_raw(this),
                ::core::mem::transmute_copy(key),
                value,
            )
            .ok()
        }
    }
    pub fn SetMatrix4x4Parameter(
        &self,
        key: &::windows::core::HSTRING,
        value: ::windows::Foundation::Numerics::Matrix4x4,
    ) -> ::windows::core::Result<()> {
        let this = &::windows::core::Interface::cast::<ICompositionAnimation>(self)?;
        unsafe {
            (::windows::core::Vtable::vtable(this).SetMatrix4x4Parameter)(
                ::windows::core::Vtable::as_raw(this),
                ::core::mem::transmute_copy(key),
                value,
            )
            .ok()
        }
    }
    pub fn SetQuaternionParameter(
        &self,
        key: &::windows::core::HSTRING,
        value: ::windows::Foundation::Numerics::Quaternion,
    ) -> ::windows::core::Result<()> {
        let this = &::windows::core::Interface::cast::<ICompositionAnimation>(self)?;
        unsafe {
            (::windows::core::Vtable::vtable(this).SetQuaternionParameter)(
                ::windows::core::Vtable::as_raw(this),
                ::core::mem::transmute_copy(key),
                value,
            )
            .ok()
        }
    }
    pub fn SetReferenceParameter<'a, P0>(
        &self,
        key: &::windows::core::HSTRING,
        compositionobject: P0,
    ) -> ::windows::core::Result<()>
    where
        P0: ::std::convert::Into<::windows::core::InParam<'a, CompositionObject>>,
    {
        let this = &::windows::core::Interface::cast::<ICompositionAnimation>(self)?;
        unsafe {
            (::windows::core::Vtable::vtable(this).SetReferenceParameter)(
                ::windows::core::Vtable::as_raw(this),
                ::core::mem::transmute_copy(key),
                compositionobject.into().abi(),
            )
            .ok()
        }
    }
    pub fn SetScalarParameter(
        &self,
        key: &::windows::core::HSTRING,
        value: f32,
    ) -> ::windows::core::Result<()> {
        let this = &::windows::core::Interface::cast::<ICompositionAnimation>(self)?;
        unsafe {
            (::windows::core::Vtable::vtable(this).SetScalarParameter)(
                ::windows::core::Vtable::as_raw(this),
                ::core::mem::transmute_copy(key),
                value,
            )
            .ok()
        }
    }
    pub fn SetVector2Parameter(
        &self,
        key: &::windows::core::HSTRING,
        value: ::windows::Foundation::Numerics::Vector2,
    ) -> ::windows::core::Result<()> {
        let this = &::windows::core::Interface::cast::<ICompositionAnimation>(self)?;
        unsafe {
            (::windows::core::Vtable::vtable(this).SetVector2Parameter)(
                ::windows::core::Vtable::as_raw(this),
                ::core::mem::transmute_copy(key),
                value,
            )
            .ok()
        }
    }
    pub fn SetVector3Parameter(
        &self,
        key: &::windows::core::HSTRING,
        value: ::windows::Foundation::Numerics::Vector3,
    ) -> ::windows::core::Result<()> {
        let this = &::windows::core::Interface::cast::<ICompositionAnimation>(self)?;
        unsafe {
            (::windows::core::Vtable::vtable(this).SetVector3Parameter)(
                ::windows::core::Vtable::as_raw(this),
                ::core::mem::transmute_copy(key),
                value,
            )
            .ok()
        }
    }
    pub fn SetVector4Parameter(
        &self,
        key: &::windows::core::HSTRING,
        value: ::windows::Foundation::Numerics::Vector4,
    ) -> ::windows::core::Result<()> {
        let this = &::windows::core::Interface::cast::<ICompositionAnimation>(self)?;
        unsafe {
            (::windows::core::Vtable::vtable(this).SetVector4Parameter)(
                ::windows::core::Vtable::as_raw(this),
                ::core::mem::transmute_copy(key),
                value,
            )
            .ok()
        }
    }
    pub fn SetBooleanParameter(
        &self,
        key: &::windows::core::HSTRING,
        value: bool,
    ) -> ::windows::core::Result<()> {
        let this = &::windows::core::Interface::cast::<ICompositionAnimation2>(self)?;
        unsafe {
            (::windows::core::Vtable::vtable(this).SetBooleanParameter)(
                ::windows::core::Vtable::as_raw(this),
                ::core::mem::transmute_copy(key),
                value,
            )
            .ok()
        }
    }
    pub fn Target(&self) -> ::windows::core::Result<::windows::core::HSTRING> {
        let this = &::windows::core::Interface::cast::<ICompositionAnimation2>(self)?;
        unsafe {
            let mut result__ = ::core::mem::MaybeUninit::zeroed();
            (::windows::core::Vtable::vtable(this).Target)(
                ::windows::core::Vtable::as_raw(this),
                result__.as_mut_ptr(),
            )
            .from_abi::<::windows::core::HSTRING>(result__)
        }
    }
    pub fn SetTarget(&self, value: &::windows::core::HSTRING) -> ::windows::core::Result<()> {
        let this = &::windows::core::Interface::cast::<ICompositionAnimation2>(self)?;
        unsafe {
            (::windows::core::Vtable::vtable(this).SetTarget)(
                ::windows::core::Vtable::as_raw(this),
                ::core::mem::transmute_copy(value),
            )
            .ok()
        }
    }
    pub fn InitialValueExpressions(
        &self,
    ) -> ::windows::core::Result<InitialValueExpressionCollection> {
        let this = &::windows::core::Interface::cast::<ICompositionAnimation3>(self)?;
        unsafe {
            let mut result__ = ::core::mem::MaybeUninit::zeroed();
            (::windows::core::Vtable::vtable(this).InitialValueExpressions)(
                ::windows::core::Vtable::as_raw(this),
                result__.as_mut_ptr(),
            )
            .from_abi::<InitialValueExpressionCollection>(result__)
        }
    }
    pub fn SetExpressionReferenceParameter<'a, P0, E0>(
        &self,
        parametername: &::windows::core::HSTRING,
        source: P0,
    ) -> ::windows::core::Result<()>
    where
        P0: ::std::convert::TryInto<::windows::core::InParam<'a, IAnimationObject>, Error = E0>,
        E0: ::std::convert::Into<::windows::core::Error>,
    {
        let this = &::windows::core::Interface::cast::<ICompositionAnimation4>(self)?;
        unsafe {
            (::windows::core::Vtable::vtable(this).SetExpressionReferenceParameter)(
                ::windows::core::Vtable::as_raw(this),
                ::core::mem::transmute_copy(parametername),
                source.try_into().map_err(|e| e.into())?.abi(),
            )
            .ok()
        }
    }
    pub fn Compositor(&self) -> ::windows::core::Result<Compositor> {
        let this = &::windows::core::Interface::cast::<ICompositionObject>(self)?;
        unsafe {
            let mut result__ = ::core::mem::MaybeUninit::zeroed();
            (::windows::core::Vtable::vtable(this).Compositor)(
                ::windows::core::Vtable::as_raw(this),
                result__.as_mut_ptr(),
            )
            .from_abi::<Compositor>(result__)
        }
    }
    pub fn Properties(&self) -> ::windows::core::Result<CompositionPropertySet> {
        let this = &::windows::core::Interface::cast::<ICompositionObject>(self)?;
        unsafe {
            let mut result__ = ::core::mem::MaybeUninit::zeroed();
            (::windows::core::Vtable::vtable(this).Properties)(
                ::windows::core::Vtable::as_raw(this),
                result__.as_mut_ptr(),
            )
            .from_abi::<CompositionPropertySet>(result__)
        }
    }
    pub fn StartAnimation<'a, P0>(
        &self,
        propertyname: &::windows::core::HSTRING,
        animation: P0,
    ) -> ::windows::core::Result<()>
    where
        P0: ::std::convert::Into<::windows::core::InParam<'a, CompositionAnimation>>,
    {
        let this = &::windows::core::Interface::cast::<ICompositionObject>(self)?;
        unsafe {
            (::windows::core::Vtable::vtable(this).StartAnimation)(
                ::windows::core::Vtable::as_raw(this),
                ::core::mem::transmute_copy(propertyname),
                animation.into().abi(),
            )
            .ok()
        }
    }
    pub fn StopAnimation(
        &self,
        propertyname: &::windows::core::HSTRING,
    ) -> ::windows::core::Result<()> {
        let this = &::windows::core::Interface::cast::<ICompositionObject>(self)?;
        unsafe {
            (::windows::core::Vtable::vtable(this).StopAnimation)(
                ::windows::core::Vtable::as_raw(this),
                ::core::mem::transmute_copy(propertyname),
            )
            .ok()
        }
    }
    pub fn Comment(&self) -> ::windows::core::Result<::windows::core::HSTRING> {
        let this = &::windows::core::Interface::cast::<ICompositionObject2>(self)?;
        unsafe {
            let mut result__ = ::core::mem::MaybeUninit::zeroed();
            (::windows::core::Vtable::vtable(this).Comment)(
                ::windows::core::Vtable::as_raw(this),
                result__.as_mut_ptr(),
            )
            .from_abi::<::windows::core::HSTRING>(result__)
        }
    }
    pub fn SetComment(&self, value: &::windows::core::HSTRING) -> ::windows::core::Result<()> {
        let this = &::windows::core::Interface::cast::<ICompositionObject2>(self)?;
        unsafe {
            (::windows::core::Vtable::vtable(this).SetComment)(
                ::windows::core::Vtable::as_raw(this),
                ::core::mem::transmute_copy(value),
            )
            .ok()
        }
    }
    pub fn ImplicitAnimations(&self) -> ::windows::core::Result<ImplicitAnimationCollection> {
        let this = &::windows::core::Interface::cast::<ICompositionObject2>(self)?;
        unsafe {
            let mut result__ = ::core::mem::MaybeUninit::zeroed();
            (::windows::core::Vtable::vtable(this).ImplicitAnimations)(
                ::windows::core::Vtable::as_raw(this),
                result__.as_mut_ptr(),
            )
            .from_abi::<ImplicitAnimationCollection>(result__)
        }
    }
    pub fn SetImplicitAnimations(
        &self,
        value: &ImplicitAnimationCollection,
    ) -> ::windows::core::Result<()> {
        let this = &::windows::core::Interface::cast::<ICompositionObject2>(self)?;
        unsafe {
            (::windows::core::Vtable::vtable(this).SetImplicitAnimations)(
                ::windows::core::Vtable::as_raw(this),
                ::core::mem::transmute_copy(value),
            )
            .ok()
        }
    }
    pub fn StartAnimationGroup<'a, P0, E0>(&self, value: P0) -> ::windows::core::Result<()>
    where
        P0: ::std::convert::TryInto<
            ::windows::core::InParam<'a, ICompositionAnimationBase>,
            Error = E0,
        >,
        E0: ::std::convert::Into<::windows::core::Error>,
    {
        let this = &::windows::core::Interface::cast::<ICompositionObject2>(self)?;
        unsafe {
            (::windows::core::Vtable::vtable(this).StartAnimationGroup)(
                ::windows::core::Vtable::as_raw(this),
                value.try_into().map_err(|e| e.into())?.abi(),
            )
            .ok()
        }
    }
    pub fn StopAnimationGroup<'a, P0, E0>(&self, value: P0) -> ::windows::core::Result<()>
    where
        P0: ::std::convert::TryInto<
            ::windows::core::InParam<'a, ICompositionAnimationBase>,
            Error = E0,
        >,
        E0: ::std::convert::Into<::windows::core::Error>,
    {
        let this = &::windows::core::Interface::cast::<ICompositionObject2>(self)?;
        unsafe {
            (::windows::core::Vtable::vtable(this).StopAnimationGroup)(
                ::windows::core::Vtable::as_raw(this),
                value.try_into().map_err(|e| e.into())?.abi(),
            )
            .ok()
        }
    }
    #[doc = "*Required features: `\"UI_Dispatching\"`*"]
    #[cfg(feature = "UI_Dispatching")]
    pub fn DispatcherQueue(&self) -> ::windows::core::Result<super::Dispatching::DispatcherQueue> {
        let this = &::windows::core::Interface::cast::<ICompositionObject3>(self)?;
        unsafe {
            let mut result__ = ::core::mem::MaybeUninit::zeroed();
            (::windows::core::Vtable::vtable(this).DispatcherQueue)(
                ::windows::core::Vtable::as_raw(this),
                result__.as_mut_ptr(),
            )
            .from_abi::<super::Dispatching::DispatcherQueue>(result__)
        }
    }
    pub fn TryGetAnimationController(
        &self,
        propertyname: &::windows::core::HSTRING,
    ) -> ::windows::core::Result<AnimationController> {
        let this = &::windows::core::Interface::cast::<ICompositionObject4>(self)?;
        unsafe {
            let mut result__ = ::core::mem::MaybeUninit::zeroed();
            (::windows::core::Vtable::vtable(this).TryGetAnimationController)(
                ::windows::core::Vtable::as_raw(this),
                ::core::mem::transmute_copy(propertyname),
                result__.as_mut_ptr(),
            )
            .from_abi::<AnimationController>(result__)
        }
    }
    pub fn StartAnimationWithController<'a, P0>(
        &self,
        propertyname: &::windows::core::HSTRING,
        animation: P0,
        animationcontroller: &AnimationController,
    ) -> ::windows::core::Result<()>
    where
        P0: ::std::convert::Into<::windows::core::InParam<'a, CompositionAnimation>>,
    {
        let this = &::windows::core::Interface::cast::<ICompositionObject5>(self)?;
        unsafe {
            (::windows::core::Vtable::vtable(this).StartAnimationWithController)(
                ::windows::core::Vtable::as_raw(this),
                ::core::mem::transmute_copy(propertyname),
                animation.into().abi(),
                ::core::mem::transmute_copy(animationcontroller),
            )
            .ok()
        }
    }
    pub fn DelayTime(&self) -> ::windows::core::Result<::windows::Foundation::TimeSpan> {
        let this = &::windows::core::Interface::cast::<IKeyFrameAnimation>(self)?;
        unsafe {
            let mut result__ = ::core::mem::MaybeUninit::zeroed();
            (::windows::core::Vtable::vtable(this).DelayTime)(
                ::windows::core::Vtable::as_raw(this),
                result__.as_mut_ptr(),
            )
            .from_abi::<::windows::Foundation::TimeSpan>(result__)
        }
    }
    pub fn SetDelayTime(
        &self,
        value: ::windows::Foundation::TimeSpan,
    ) -> ::windows::core::Result<()> {
        let this = &::windows::core::Interface::cast::<IKeyFrameAnimation>(self)?;
        unsafe {
            (::windows::core::Vtable::vtable(this).SetDelayTime)(
                ::windows::core::Vtable::as_raw(this),
                value,
            )
            .ok()
        }
    }
    pub fn Duration(&self) -> ::windows::core::Result<::windows::Foundation::TimeSpan> {
        let this = &::windows::core::Interface::cast::<IKeyFrameAnimation>(self)?;
        unsafe {
            let mut result__ = ::core::mem::MaybeUninit::zeroed();
            (::windows::core::Vtable::vtable(this).Duration)(
                ::windows::core::Vtable::as_raw(this),
                result__.as_mut_ptr(),
            )
            .from_abi::<::windows::Foundation::TimeSpan>(result__)
        }
    }
    pub fn SetDuration(
        &self,
        value: ::windows::Foundation::TimeSpan,
    ) -> ::windows::core::Result<()> {
        let this = &::windows::core::Interface::cast::<IKeyFrameAnimation>(self)?;
        unsafe {
            (::windows::core::Vtable::vtable(this).SetDuration)(
                ::windows::core::Vtable::as_raw(this),
                value,
            )
            .ok()
        }
    }
    pub fn IterationBehavior(&self) -> ::windows::core::Result<AnimationIterationBehavior> {
        let this = &::windows::core::Interface::cast::<IKeyFrameAnimation>(self)?;
        unsafe {
            let mut result__ = ::core::mem::MaybeUninit::zeroed();
            (::windows::core::Vtable::vtable(this).IterationBehavior)(
                ::windows::core::Vtable::as_raw(this),
                result__.as_mut_ptr(),
            )
            .from_abi::<AnimationIterationBehavior>(result__)
        }
    }
    pub fn SetIterationBehavior(
        &self,
        value: AnimationIterationBehavior,
    ) -> ::windows::core::Result<()> {
        let this = &::windows::core::Interface::cast::<IKeyFrameAnimation>(self)?;
        unsafe {
            (::windows::core::Vtable::vtable(this).SetIterationBehavior)(
                ::windows::core::Vtable::as_raw(this),
                value,
            )
            .ok()
        }
    }
    pub fn IterationCount(&self) -> ::windows::core::Result<i32> {
        let this = &::windows::core::Interface::cast::<IKeyFrameAnimation>(self)?;
        unsafe {
            let mut result__ = ::core::mem::MaybeUninit::zeroed();
            (::windows::core::Vtable::vtable(this).IterationCount)(
                ::windows::core::Vtable::as_raw(this),
                result__.as_mut_ptr(),
            )
            .from_abi::<i32>(result__)
        }
    }
    pub fn SetIterationCount(&self, value: i32) -> ::windows::core::Result<()> {
        let this = &::windows::core::Interface::cast::<IKeyFrameAnimation>(self)?;
        unsafe {
            (::windows::core::Vtable::vtable(this).SetIterationCount)(
                ::windows::core::Vtable::as_raw(this),
                value,
            )
            .ok()
        }
    }
    pub fn KeyFrameCount(&self) -> ::windows::core::Result<i32> {
        let this = &::windows::core::Interface::cast::<IKeyFrameAnimation>(self)?;
        unsafe {
            let mut result__ = ::core::mem::MaybeUninit::zeroed();
            (::windows::core::Vtable::vtable(this).KeyFrameCount)(
                ::windows::core::Vtable::as_raw(this),
                result__.as_mut_ptr(),
            )
            .from_abi::<i32>(result__)
        }
    }
    pub fn StopBehavior(&self) -> ::windows::core::Result<AnimationStopBehavior> {
        let this = &::windows::core::Interface::cast::<IKeyFrameAnimation>(self)?;
        unsafe {
            let mut result__ = ::core::mem::MaybeUninit::zeroed();
            (::windows::core::Vtable::vtable(this).StopBehavior)(
                ::windows::core::Vtable::as_raw(this),
                result__.as_mut_ptr(),
            )
            .from_abi::<AnimationStopBehavior>(result__)
        }
    }
    pub fn SetStopBehavior(&self, value: AnimationStopBehavior) -> ::windows::core::Result<()> {
        let this = &::windows::core::Interface::cast::<IKeyFrameAnimation>(self)?;
        unsafe {
            (::windows::core::Vtable::vtable(this).SetStopBehavior)(
                ::windows::core::Vtable::as_raw(this),
                value,
            )
            .ok()
        }
    }
    pub fn InsertExpressionKeyFrame(
        &self,
        normalizedprogresskey: f32,
        value: &::windows::core::HSTRING,
    ) -> ::windows::core::Result<()> {
        let this = &::windows::core::Interface::cast::<IKeyFrameAnimation>(self)?;
        unsafe {
            (::windows::core::Vtable::vtable(this).InsertExpressionKeyFrame)(
                ::windows::core::Vtable::as_raw(this),
                normalizedprogresskey,
                ::core::mem::transmute_copy(value),
            )
            .ok()
        }
    }
    pub fn InsertExpressionKeyFrameWithEasingFunction<'a, P0>(
        &self,
        normalizedprogresskey: f32,
        value: &::windows::core::HSTRING,
        easingfunction: P0,
    ) -> ::windows::core::Result<()>
    where
        P0: ::std::convert::Into<::windows::core::InParam<'a, CompositionEasingFunction>>,
    {
        let this = &::windows::core::Interface::cast::<IKeyFrameAnimation>(self)?;
        unsafe {
            (::windows::core::Vtable::vtable(this).InsertExpressionKeyFrameWithEasingFunction)(
                ::windows::core::Vtable::as_raw(this),
                normalizedprogresskey,
                ::core::mem::transmute_copy(value),
                easingfunction.into().abi(),
            )
            .ok()
        }
    }
    pub fn Direction(&self) -> ::windows::core::Result<AnimationDirection> {
        let this = &::windows::core::Interface::cast::<IKeyFrameAnimation2>(self)?;
        unsafe {
            let mut result__ = ::core::mem::MaybeUninit::zeroed();
            (::windows::core::Vtable::vtable(this).Direction)(
                ::windows::core::Vtable::as_raw(this),
                result__.as_mut_ptr(),
            )
            .from_abi::<AnimationDirection>(result__)
        }
    }
    pub fn SetDirection(&self, value: AnimationDirection) -> ::windows::core::Result<()> {
        let this = &::windows::core::Interface::cast::<IKeyFrameAnimation2>(self)?;
        unsafe {
            (::windows::core::Vtable::vtable(this).SetDirection)(
                ::windows::core::Vtable::as_raw(this),
                value,
            )
            .ok()
        }
    }
    pub fn DelayBehavior(&self) -> ::windows::core::Result<AnimationDelayBehavior> {
        let this = &::windows::core::Interface::cast::<IKeyFrameAnimation3>(self)?;
        unsafe {
            let mut result__ = ::core::mem::MaybeUninit::zeroed();
            (::windows::core::Vtable::vtable(this).DelayBehavior)(
                ::windows::core::Vtable::as_raw(this),
                result__.as_mut_ptr(),
            )
            .from_abi::<AnimationDelayBehavior>(result__)
        }
    }
    pub fn SetDelayBehavior(&self, value: AnimationDelayBehavior) -> ::windows::core::Result<()> {
        let this = &::windows::core::Interface::cast::<IKeyFrameAnimation3>(self)?;
        unsafe {
            (::windows::core::Vtable::vtable(this).SetDelayBehavior)(
                ::windows::core::Vtable::as_raw(this),
                value,
            )
            .ok()
        }
    }
    pub fn InsertKeyFrame(
        &self,
        normalizedprogresskey: f32,
        value: ::windows::Foundation::Numerics::Vector3,
    ) -> ::windows::core::Result<()> {
        let this = self;
        unsafe {
            (::windows::core::Vtable::vtable(this).InsertKeyFrame)(
                ::windows::core::Vtable::as_raw(this),
                normalizedprogresskey,
                value,
            )
            .ok()
        }
    }
    pub fn InsertKeyFrameWithEasingFunction<'a, P0>(
        &self,
        normalizedprogresskey: f32,
        value: ::windows::Foundation::Numerics::Vector3,
        easingfunction: P0,
    ) -> ::windows::core::Result<()>
    where
        P0: ::std::convert::Into<::windows::core::InParam<'a, CompositionEasingFunction>>,
    {
        let this = self;
        unsafe {
            (::windows::core::Vtable::vtable(this).InsertKeyFrameWithEasingFunction)(
                ::windows::core::Vtable::as_raw(this),
                normalizedprogresskey,
                value,
                easingfunction.into().abi(),
            )
            .ok()
        }
    }
}
impl ::core::clone::Clone for Vector3KeyFrameAnimation {
    fn clone(&self) -> Self {
        Self(self.0.clone())
    }
}
impl ::core::cmp::PartialEq for Vector3KeyFrameAnimation {
    fn eq(&self, other: &Self) -> bool {
        self.0 == other.0
    }
}
impl ::core::cmp::Eq for Vector3KeyFrameAnimation {}
impl ::core::fmt::Debug for Vector3KeyFrameAnimation {
    fn fmt(&self, f: &mut ::core::fmt::Formatter<'_>) -> ::core::fmt::Result {
        f.debug_tuple("Vector3KeyFrameAnimation").field(&self.0).finish()
    }
}
unsafe impl ::windows::core::RuntimeType for Vector3KeyFrameAnimation {
    const SIGNATURE : ::windows::core::ConstBuffer = ::windows::core::ConstBuffer::from_slice ( b"rc(Microsoft.UI.Composition.Vector3KeyFrameAnimation;{d7da980e-2dde-5dd1-a40c-d6868dd2449e})" ) ;
    type DefaultType = ::core::option::Option<Self>;
    fn from_default(from: &Self::DefaultType) -> ::windows::core::Result<Self> {
        from.as_ref().cloned().ok_or(::windows::core::Error::OK)
    }
}
unsafe impl ::windows::core::Vtable for Vector3KeyFrameAnimation {
    type Vtable = IVector3KeyFrameAnimation_Vtbl;
}
unsafe impl ::windows::core::Interface for Vector3KeyFrameAnimation {
    const IID: ::windows::core::GUID =
        <IVector3KeyFrameAnimation as ::windows::core::Interface>::IID;
}
impl ::windows::core::RuntimeName for Vector3KeyFrameAnimation {
    const NAME: &'static str = "Microsoft.UI.Composition.Vector3KeyFrameAnimation";
}
::windows::core::interface_hierarchy!(
    Vector3KeyFrameAnimation,
    ::windows::core::IUnknown,
    ::windows::core::IInspectable
);
impl ::core::convert::TryFrom<Vector3KeyFrameAnimation> for IAnimationObject {
    type Error = ::windows::core::Error;
    fn try_from(value: Vector3KeyFrameAnimation) -> ::windows::core::Result<Self> {
        ::core::convert::TryFrom::try_from(&value)
    }
}
impl ::core::convert::TryFrom<&Vector3KeyFrameAnimation> for IAnimationObject {
    type Error = ::windows::core::Error;
    fn try_from(value: &Vector3KeyFrameAnimation) -> ::windows::core::Result<Self> {
        ::windows::core::Interface::cast(value)
    }
}
impl<'a> ::core::convert::TryFrom<&Vector3KeyFrameAnimation>
    for ::windows::core::InParam<'a, IAnimationObject>
{
    type Error = ::windows::core::Error;
    fn try_from(value: &Vector3KeyFrameAnimation) -> ::windows::core::Result<Self> {
        let item = ::std::convert::TryInto::try_into(value)?;
        Ok(::windows::core::InParam::owned(item))
    }
}
impl ::core::convert::TryFrom<Vector3KeyFrameAnimation> for ::windows::Foundation::IClosable {
    type Error = ::windows::core::Error;
    fn try_from(value: Vector3KeyFrameAnimation) -> ::windows::core::Result<Self> {
        ::core::convert::TryFrom::try_from(&value)
    }
}
impl ::core::convert::TryFrom<&Vector3KeyFrameAnimation> for ::windows::Foundation::IClosable {
    type Error = ::windows::core::Error;
    fn try_from(value: &Vector3KeyFrameAnimation) -> ::windows::core::Result<Self> {
        ::windows::core::Interface::cast(value)
    }
}
impl<'a> ::core::convert::TryFrom<&Vector3KeyFrameAnimation>
    for ::windows::core::InParam<'a, ::windows::Foundation::IClosable>
{
    type Error = ::windows::core::Error;
    fn try_from(value: &Vector3KeyFrameAnimation) -> ::windows::core::Result<Self> {
        let item = ::std::convert::TryInto::try_into(value)?;
        Ok(::windows::core::InParam::owned(item))
    }
}
impl ::core::convert::TryFrom<Vector3KeyFrameAnimation> for ICompositionAnimationBase {
    type Error = ::windows::core::Error;
    fn try_from(value: Vector3KeyFrameAnimation) -> ::windows::core::Result<Self> {
        ::core::convert::TryFrom::try_from(&value)
    }
}
impl ::core::convert::TryFrom<&Vector3KeyFrameAnimation> for ICompositionAnimationBase {
    type Error = ::windows::core::Error;
    fn try_from(value: &Vector3KeyFrameAnimation) -> ::windows::core::Result<Self> {
        ::windows::core::Interface::cast(value)
    }
}
impl<'a> ::core::convert::TryFrom<&Vector3KeyFrameAnimation>
    for ::windows::core::InParam<'a, ICompositionAnimationBase>
{
    type Error = ::windows::core::Error;
    fn try_from(value: &Vector3KeyFrameAnimation) -> ::windows::core::Result<Self> {
        let item = ::std::convert::TryInto::try_into(value)?;
        Ok(::windows::core::InParam::owned(item))
    }
}
impl ::core::convert::From<Vector3KeyFrameAnimation> for KeyFrameAnimation {
    fn from(value: Vector3KeyFrameAnimation) -> Self {
        ::core::convert::From::from(&value)
    }
}
impl ::core::convert::From<&Vector3KeyFrameAnimation> for KeyFrameAnimation {
    fn from(value: &Vector3KeyFrameAnimation) -> Self {
        ::windows::core::Interface::cast(value).unwrap()
    }
}
impl<'a> ::core::convert::From<&Vector3KeyFrameAnimation>
    for ::windows::core::InParam<'a, KeyFrameAnimation>
{
    fn from(value: &Vector3KeyFrameAnimation) -> Self {
        ::windows::core::InParam::owned(value.into())
    }
}
impl ::core::convert::From<Vector3KeyFrameAnimation> for CompositionAnimation {
    fn from(value: Vector3KeyFrameAnimation) -> Self {
        ::core::convert::From::from(&value)
    }
}
impl ::core::convert::From<&Vector3KeyFrameAnimation> for CompositionAnimation {
    fn from(value: &Vector3KeyFrameAnimation) -> Self {
        ::windows::core::Interface::cast(value).unwrap()
    }
}
impl<'a> ::core::convert::From<&Vector3KeyFrameAnimation>
    for ::windows::core::InParam<'a, CompositionAnimation>
{
    fn from(value: &Vector3KeyFrameAnimation) -> Self {
        ::windows::core::InParam::owned(value.into())
    }
}
impl ::core::convert::From<Vector3KeyFrameAnimation> for CompositionObject {
    fn from(value: Vector3KeyFrameAnimation) -> Self {
        ::core::convert::From::from(&value)
    }
}
impl ::core::convert::From<&Vector3KeyFrameAnimation> for CompositionObject {
    fn from(value: &Vector3KeyFrameAnimation) -> Self {
        ::windows::core::Interface::cast(value).unwrap()
    }
}
impl<'a> ::core::convert::From<&Vector3KeyFrameAnimation>
    for ::windows::core::InParam<'a, CompositionObject>
{
    fn from(value: &Vector3KeyFrameAnimation) -> Self {
        ::windows::core::InParam::owned(value.into())
    }
}
unsafe impl ::core::marker::Send for Vector3KeyFrameAnimation {}
unsafe impl ::core::marker::Sync for Vector3KeyFrameAnimation {}
#[doc = "*Required features: `\"UI_Composition\"`*"]
#[repr(transparent)]
pub struct Vector3NaturalMotionAnimation(::windows::core::IUnknown);
impl Vector3NaturalMotionAnimation {
    pub fn PopulatePropertyInfo(
        &self,
        propertyname: &::windows::core::HSTRING,
        propertyinfo: &AnimationPropertyInfo,
    ) -> ::windows::core::Result<()> {
        let this = &::windows::core::Interface::cast::<IAnimationObject>(self)?;
        unsafe {
            (::windows::core::Vtable::vtable(this).PopulatePropertyInfo)(
                ::windows::core::Vtable::as_raw(this),
                ::core::mem::transmute_copy(propertyname),
                ::core::mem::transmute_copy(propertyinfo),
            )
            .ok()
        }
    }
    pub fn Close(&self) -> ::windows::core::Result<()> {
        let this = &::windows::core::Interface::cast::<::windows::Foundation::IClosable>(self)?;
        unsafe {
            (::windows::core::Vtable::vtable(this).Close)(::windows::core::Vtable::as_raw(this))
                .ok()
        }
    }
    pub fn ClearAllParameters(&self) -> ::windows::core::Result<()> {
        let this = &::windows::core::Interface::cast::<ICompositionAnimation>(self)?;
        unsafe {
            (::windows::core::Vtable::vtable(this).ClearAllParameters)(
                ::windows::core::Vtable::as_raw(this),
            )
            .ok()
        }
    }
    pub fn ClearParameter(&self, key: &::windows::core::HSTRING) -> ::windows::core::Result<()> {
        let this = &::windows::core::Interface::cast::<ICompositionAnimation>(self)?;
        unsafe {
            (::windows::core::Vtable::vtable(this).ClearParameter)(
                ::windows::core::Vtable::as_raw(this),
                ::core::mem::transmute_copy(key),
            )
            .ok()
        }
    }
    pub fn SetColorParameter(
        &self,
        key: &::windows::core::HSTRING,
        value: ::windows::UI::Color,
    ) -> ::windows::core::Result<()> {
        let this = &::windows::core::Interface::cast::<ICompositionAnimation>(self)?;
        unsafe {
            (::windows::core::Vtable::vtable(this).SetColorParameter)(
                ::windows::core::Vtable::as_raw(this),
                ::core::mem::transmute_copy(key),
                value,
            )
            .ok()
        }
    }
    pub fn SetMatrix3x2Parameter(
        &self,
        key: &::windows::core::HSTRING,
        value: ::windows::Foundation::Numerics::Matrix3x2,
    ) -> ::windows::core::Result<()> {
        let this = &::windows::core::Interface::cast::<ICompositionAnimation>(self)?;
        unsafe {
            (::windows::core::Vtable::vtable(this).SetMatrix3x2Parameter)(
                ::windows::core::Vtable::as_raw(this),
                ::core::mem::transmute_copy(key),
                value,
            )
            .ok()
        }
    }
    pub fn SetMatrix4x4Parameter(
        &self,
        key: &::windows::core::HSTRING,
        value: ::windows::Foundation::Numerics::Matrix4x4,
    ) -> ::windows::core::Result<()> {
        let this = &::windows::core::Interface::cast::<ICompositionAnimation>(self)?;
        unsafe {
            (::windows::core::Vtable::vtable(this).SetMatrix4x4Parameter)(
                ::windows::core::Vtable::as_raw(this),
                ::core::mem::transmute_copy(key),
                value,
            )
            .ok()
        }
    }
    pub fn SetQuaternionParameter(
        &self,
        key: &::windows::core::HSTRING,
        value: ::windows::Foundation::Numerics::Quaternion,
    ) -> ::windows::core::Result<()> {
        let this = &::windows::core::Interface::cast::<ICompositionAnimation>(self)?;
        unsafe {
            (::windows::core::Vtable::vtable(this).SetQuaternionParameter)(
                ::windows::core::Vtable::as_raw(this),
                ::core::mem::transmute_copy(key),
                value,
            )
            .ok()
        }
    }
    pub fn SetReferenceParameter<'a, P0>(
        &self,
        key: &::windows::core::HSTRING,
        compositionobject: P0,
    ) -> ::windows::core::Result<()>
    where
        P0: ::std::convert::Into<::windows::core::InParam<'a, CompositionObject>>,
    {
        let this = &::windows::core::Interface::cast::<ICompositionAnimation>(self)?;
        unsafe {
            (::windows::core::Vtable::vtable(this).SetReferenceParameter)(
                ::windows::core::Vtable::as_raw(this),
                ::core::mem::transmute_copy(key),
                compositionobject.into().abi(),
            )
            .ok()
        }
    }
    pub fn SetScalarParameter(
        &self,
        key: &::windows::core::HSTRING,
        value: f32,
    ) -> ::windows::core::Result<()> {
        let this = &::windows::core::Interface::cast::<ICompositionAnimation>(self)?;
        unsafe {
            (::windows::core::Vtable::vtable(this).SetScalarParameter)(
                ::windows::core::Vtable::as_raw(this),
                ::core::mem::transmute_copy(key),
                value,
            )
            .ok()
        }
    }
    pub fn SetVector2Parameter(
        &self,
        key: &::windows::core::HSTRING,
        value: ::windows::Foundation::Numerics::Vector2,
    ) -> ::windows::core::Result<()> {
        let this = &::windows::core::Interface::cast::<ICompositionAnimation>(self)?;
        unsafe {
            (::windows::core::Vtable::vtable(this).SetVector2Parameter)(
                ::windows::core::Vtable::as_raw(this),
                ::core::mem::transmute_copy(key),
                value,
            )
            .ok()
        }
    }
    pub fn SetVector3Parameter(
        &self,
        key: &::windows::core::HSTRING,
        value: ::windows::Foundation::Numerics::Vector3,
    ) -> ::windows::core::Result<()> {
        let this = &::windows::core::Interface::cast::<ICompositionAnimation>(self)?;
        unsafe {
            (::windows::core::Vtable::vtable(this).SetVector3Parameter)(
                ::windows::core::Vtable::as_raw(this),
                ::core::mem::transmute_copy(key),
                value,
            )
            .ok()
        }
    }
    pub fn SetVector4Parameter(
        &self,
        key: &::windows::core::HSTRING,
        value: ::windows::Foundation::Numerics::Vector4,
    ) -> ::windows::core::Result<()> {
        let this = &::windows::core::Interface::cast::<ICompositionAnimation>(self)?;
        unsafe {
            (::windows::core::Vtable::vtable(this).SetVector4Parameter)(
                ::windows::core::Vtable::as_raw(this),
                ::core::mem::transmute_copy(key),
                value,
            )
            .ok()
        }
    }
    pub fn SetBooleanParameter(
        &self,
        key: &::windows::core::HSTRING,
        value: bool,
    ) -> ::windows::core::Result<()> {
        let this = &::windows::core::Interface::cast::<ICompositionAnimation2>(self)?;
        unsafe {
            (::windows::core::Vtable::vtable(this).SetBooleanParameter)(
                ::windows::core::Vtable::as_raw(this),
                ::core::mem::transmute_copy(key),
                value,
            )
            .ok()
        }
    }
    pub fn Target(&self) -> ::windows::core::Result<::windows::core::HSTRING> {
        let this = &::windows::core::Interface::cast::<ICompositionAnimation2>(self)?;
        unsafe {
            let mut result__ = ::core::mem::MaybeUninit::zeroed();
            (::windows::core::Vtable::vtable(this).Target)(
                ::windows::core::Vtable::as_raw(this),
                result__.as_mut_ptr(),
            )
            .from_abi::<::windows::core::HSTRING>(result__)
        }
    }
    pub fn SetTarget(&self, value: &::windows::core::HSTRING) -> ::windows::core::Result<()> {
        let this = &::windows::core::Interface::cast::<ICompositionAnimation2>(self)?;
        unsafe {
            (::windows::core::Vtable::vtable(this).SetTarget)(
                ::windows::core::Vtable::as_raw(this),
                ::core::mem::transmute_copy(value),
            )
            .ok()
        }
    }
    pub fn InitialValueExpressions(
        &self,
    ) -> ::windows::core::Result<InitialValueExpressionCollection> {
        let this = &::windows::core::Interface::cast::<ICompositionAnimation3>(self)?;
        unsafe {
            let mut result__ = ::core::mem::MaybeUninit::zeroed();
            (::windows::core::Vtable::vtable(this).InitialValueExpressions)(
                ::windows::core::Vtable::as_raw(this),
                result__.as_mut_ptr(),
            )
            .from_abi::<InitialValueExpressionCollection>(result__)
        }
    }
    pub fn SetExpressionReferenceParameter<'a, P0, E0>(
        &self,
        parametername: &::windows::core::HSTRING,
        source: P0,
    ) -> ::windows::core::Result<()>
    where
        P0: ::std::convert::TryInto<::windows::core::InParam<'a, IAnimationObject>, Error = E0>,
        E0: ::std::convert::Into<::windows::core::Error>,
    {
        let this = &::windows::core::Interface::cast::<ICompositionAnimation4>(self)?;
        unsafe {
            (::windows::core::Vtable::vtable(this).SetExpressionReferenceParameter)(
                ::windows::core::Vtable::as_raw(this),
                ::core::mem::transmute_copy(parametername),
                source.try_into().map_err(|e| e.into())?.abi(),
            )
            .ok()
        }
    }
    pub fn Compositor(&self) -> ::windows::core::Result<Compositor> {
        let this = &::windows::core::Interface::cast::<ICompositionObject>(self)?;
        unsafe {
            let mut result__ = ::core::mem::MaybeUninit::zeroed();
            (::windows::core::Vtable::vtable(this).Compositor)(
                ::windows::core::Vtable::as_raw(this),
                result__.as_mut_ptr(),
            )
            .from_abi::<Compositor>(result__)
        }
    }
    pub fn Properties(&self) -> ::windows::core::Result<CompositionPropertySet> {
        let this = &::windows::core::Interface::cast::<ICompositionObject>(self)?;
        unsafe {
            let mut result__ = ::core::mem::MaybeUninit::zeroed();
            (::windows::core::Vtable::vtable(this).Properties)(
                ::windows::core::Vtable::as_raw(this),
                result__.as_mut_ptr(),
            )
            .from_abi::<CompositionPropertySet>(result__)
        }
    }
    pub fn StartAnimation<'a, P0>(
        &self,
        propertyname: &::windows::core::HSTRING,
        animation: P0,
    ) -> ::windows::core::Result<()>
    where
        P0: ::std::convert::Into<::windows::core::InParam<'a, CompositionAnimation>>,
    {
        let this = &::windows::core::Interface::cast::<ICompositionObject>(self)?;
        unsafe {
            (::windows::core::Vtable::vtable(this).StartAnimation)(
                ::windows::core::Vtable::as_raw(this),
                ::core::mem::transmute_copy(propertyname),
                animation.into().abi(),
            )
            .ok()
        }
    }
    pub fn StopAnimation(
        &self,
        propertyname: &::windows::core::HSTRING,
    ) -> ::windows::core::Result<()> {
        let this = &::windows::core::Interface::cast::<ICompositionObject>(self)?;
        unsafe {
            (::windows::core::Vtable::vtable(this).StopAnimation)(
                ::windows::core::Vtable::as_raw(this),
                ::core::mem::transmute_copy(propertyname),
            )
            .ok()
        }
    }
    pub fn Comment(&self) -> ::windows::core::Result<::windows::core::HSTRING> {
        let this = &::windows::core::Interface::cast::<ICompositionObject2>(self)?;
        unsafe {
            let mut result__ = ::core::mem::MaybeUninit::zeroed();
            (::windows::core::Vtable::vtable(this).Comment)(
                ::windows::core::Vtable::as_raw(this),
                result__.as_mut_ptr(),
            )
            .from_abi::<::windows::core::HSTRING>(result__)
        }
    }
    pub fn SetComment(&self, value: &::windows::core::HSTRING) -> ::windows::core::Result<()> {
        let this = &::windows::core::Interface::cast::<ICompositionObject2>(self)?;
        unsafe {
            (::windows::core::Vtable::vtable(this).SetComment)(
                ::windows::core::Vtable::as_raw(this),
                ::core::mem::transmute_copy(value),
            )
            .ok()
        }
    }
    pub fn ImplicitAnimations(&self) -> ::windows::core::Result<ImplicitAnimationCollection> {
        let this = &::windows::core::Interface::cast::<ICompositionObject2>(self)?;
        unsafe {
            let mut result__ = ::core::mem::MaybeUninit::zeroed();
            (::windows::core::Vtable::vtable(this).ImplicitAnimations)(
                ::windows::core::Vtable::as_raw(this),
                result__.as_mut_ptr(),
            )
            .from_abi::<ImplicitAnimationCollection>(result__)
        }
    }
    pub fn SetImplicitAnimations(
        &self,
        value: &ImplicitAnimationCollection,
    ) -> ::windows::core::Result<()> {
        let this = &::windows::core::Interface::cast::<ICompositionObject2>(self)?;
        unsafe {
            (::windows::core::Vtable::vtable(this).SetImplicitAnimations)(
                ::windows::core::Vtable::as_raw(this),
                ::core::mem::transmute_copy(value),
            )
            .ok()
        }
    }
    pub fn StartAnimationGroup<'a, P0, E0>(&self, value: P0) -> ::windows::core::Result<()>
    where
        P0: ::std::convert::TryInto<
            ::windows::core::InParam<'a, ICompositionAnimationBase>,
            Error = E0,
        >,
        E0: ::std::convert::Into<::windows::core::Error>,
    {
        let this = &::windows::core::Interface::cast::<ICompositionObject2>(self)?;
        unsafe {
            (::windows::core::Vtable::vtable(this).StartAnimationGroup)(
                ::windows::core::Vtable::as_raw(this),
                value.try_into().map_err(|e| e.into())?.abi(),
            )
            .ok()
        }
    }
    pub fn StopAnimationGroup<'a, P0, E0>(&self, value: P0) -> ::windows::core::Result<()>
    where
        P0: ::std::convert::TryInto<
            ::windows::core::InParam<'a, ICompositionAnimationBase>,
            Error = E0,
        >,
        E0: ::std::convert::Into<::windows::core::Error>,
    {
        let this = &::windows::core::Interface::cast::<ICompositionObject2>(self)?;
        unsafe {
            (::windows::core::Vtable::vtable(this).StopAnimationGroup)(
                ::windows::core::Vtable::as_raw(this),
                value.try_into().map_err(|e| e.into())?.abi(),
            )
            .ok()
        }
    }
    #[doc = "*Required features: `\"UI_Dispatching\"`*"]
    #[cfg(feature = "UI_Dispatching")]
    pub fn DispatcherQueue(&self) -> ::windows::core::Result<super::Dispatching::DispatcherQueue> {
        let this = &::windows::core::Interface::cast::<ICompositionObject3>(self)?;
        unsafe {
            let mut result__ = ::core::mem::MaybeUninit::zeroed();
            (::windows::core::Vtable::vtable(this).DispatcherQueue)(
                ::windows::core::Vtable::as_raw(this),
                result__.as_mut_ptr(),
            )
            .from_abi::<super::Dispatching::DispatcherQueue>(result__)
        }
    }
    pub fn TryGetAnimationController(
        &self,
        propertyname: &::windows::core::HSTRING,
    ) -> ::windows::core::Result<AnimationController> {
        let this = &::windows::core::Interface::cast::<ICompositionObject4>(self)?;
        unsafe {
            let mut result__ = ::core::mem::MaybeUninit::zeroed();
            (::windows::core::Vtable::vtable(this).TryGetAnimationController)(
                ::windows::core::Vtable::as_raw(this),
                ::core::mem::transmute_copy(propertyname),
                result__.as_mut_ptr(),
            )
            .from_abi::<AnimationController>(result__)
        }
    }
    pub fn StartAnimationWithController<'a, P0>(
        &self,
        propertyname: &::windows::core::HSTRING,
        animation: P0,
        animationcontroller: &AnimationController,
    ) -> ::windows::core::Result<()>
    where
        P0: ::std::convert::Into<::windows::core::InParam<'a, CompositionAnimation>>,
    {
        let this = &::windows::core::Interface::cast::<ICompositionObject5>(self)?;
        unsafe {
            (::windows::core::Vtable::vtable(this).StartAnimationWithController)(
                ::windows::core::Vtable::as_raw(this),
                ::core::mem::transmute_copy(propertyname),
                animation.into().abi(),
                ::core::mem::transmute_copy(animationcontroller),
            )
            .ok()
        }
    }
    pub fn DelayBehavior(&self) -> ::windows::core::Result<AnimationDelayBehavior> {
        let this = &::windows::core::Interface::cast::<INaturalMotionAnimation>(self)?;
        unsafe {
            let mut result__ = ::core::mem::MaybeUninit::zeroed();
            (::windows::core::Vtable::vtable(this).DelayBehavior)(
                ::windows::core::Vtable::as_raw(this),
                result__.as_mut_ptr(),
            )
            .from_abi::<AnimationDelayBehavior>(result__)
        }
    }
    pub fn SetDelayBehavior(&self, value: AnimationDelayBehavior) -> ::windows::core::Result<()> {
        let this = &::windows::core::Interface::cast::<INaturalMotionAnimation>(self)?;
        unsafe {
            (::windows::core::Vtable::vtable(this).SetDelayBehavior)(
                ::windows::core::Vtable::as_raw(this),
                value,
            )
            .ok()
        }
    }
    pub fn DelayTime(&self) -> ::windows::core::Result<::windows::Foundation::TimeSpan> {
        let this = &::windows::core::Interface::cast::<INaturalMotionAnimation>(self)?;
        unsafe {
            let mut result__ = ::core::mem::MaybeUninit::zeroed();
            (::windows::core::Vtable::vtable(this).DelayTime)(
                ::windows::core::Vtable::as_raw(this),
                result__.as_mut_ptr(),
            )
            .from_abi::<::windows::Foundation::TimeSpan>(result__)
        }
    }
    pub fn SetDelayTime(
        &self,
        value: ::windows::Foundation::TimeSpan,
    ) -> ::windows::core::Result<()> {
        let this = &::windows::core::Interface::cast::<INaturalMotionAnimation>(self)?;
        unsafe {
            (::windows::core::Vtable::vtable(this).SetDelayTime)(
                ::windows::core::Vtable::as_raw(this),
                value,
            )
            .ok()
        }
    }
    pub fn StopBehavior(&self) -> ::windows::core::Result<AnimationStopBehavior> {
        let this = &::windows::core::Interface::cast::<INaturalMotionAnimation>(self)?;
        unsafe {
            let mut result__ = ::core::mem::MaybeUninit::zeroed();
            (::windows::core::Vtable::vtable(this).StopBehavior)(
                ::windows::core::Vtable::as_raw(this),
                result__.as_mut_ptr(),
            )
            .from_abi::<AnimationStopBehavior>(result__)
        }
    }
    pub fn SetStopBehavior(&self, value: AnimationStopBehavior) -> ::windows::core::Result<()> {
        let this = &::windows::core::Interface::cast::<INaturalMotionAnimation>(self)?;
        unsafe {
            (::windows::core::Vtable::vtable(this).SetStopBehavior)(
                ::windows::core::Vtable::as_raw(this),
                value,
            )
            .ok()
        }
    }
    pub fn FinalValue(
        &self,
    ) -> ::windows::core::Result<
        ::windows::Foundation::IReference<::windows::Foundation::Numerics::Vector3>,
    > {
        let this = self;
        unsafe {
            let mut result__ = ::core::mem::MaybeUninit::zeroed();
            ( ::windows::core::Vtable::vtable ( this ) . FinalValue ) ( ::windows::core::Vtable::as_raw ( this ) , result__ . as_mut_ptr ( ) ) . from_abi:: < ::windows::Foundation:: IReference :: < ::windows::Foundation::Numerics:: Vector3 > > ( result__ )
        }
    }
    pub fn SetFinalValue<'a, P0, E0>(&self, value: P0) -> ::windows::core::Result<()>
    where
        P0: ::std::convert::TryInto<
            ::windows::core::InParam<
                'a,
                ::windows::Foundation::IReference<::windows::Foundation::Numerics::Vector3>,
            >,
            Error = E0,
        >,
        E0: ::std::convert::Into<::windows::core::Error>,
    {
        let this = self;
        unsafe {
            (::windows::core::Vtable::vtable(this).SetFinalValue)(
                ::windows::core::Vtable::as_raw(this),
                value.try_into().map_err(|e| e.into())?.abi(),
            )
            .ok()
        }
    }
    pub fn InitialValue(
        &self,
    ) -> ::windows::core::Result<
        ::windows::Foundation::IReference<::windows::Foundation::Numerics::Vector3>,
    > {
        let this = self;
        unsafe {
            let mut result__ = ::core::mem::MaybeUninit::zeroed();
            ( ::windows::core::Vtable::vtable ( this ) . InitialValue ) ( ::windows::core::Vtable::as_raw ( this ) , result__ . as_mut_ptr ( ) ) . from_abi:: < ::windows::Foundation:: IReference :: < ::windows::Foundation::Numerics:: Vector3 > > ( result__ )
        }
    }
    pub fn SetInitialValue<'a, P0, E0>(&self, value: P0) -> ::windows::core::Result<()>
    where
        P0: ::std::convert::TryInto<
            ::windows::core::InParam<
                'a,
                ::windows::Foundation::IReference<::windows::Foundation::Numerics::Vector3>,
            >,
            Error = E0,
        >,
        E0: ::std::convert::Into<::windows::core::Error>,
    {
        let this = self;
        unsafe {
            (::windows::core::Vtable::vtable(this).SetInitialValue)(
                ::windows::core::Vtable::as_raw(this),
                value.try_into().map_err(|e| e.into())?.abi(),
            )
            .ok()
        }
    }
    pub fn InitialVelocity(
        &self,
    ) -> ::windows::core::Result<::windows::Foundation::Numerics::Vector3> {
        let this = self;
        unsafe {
            let mut result__ = ::core::mem::MaybeUninit::zeroed();
            (::windows::core::Vtable::vtable(this).InitialVelocity)(
                ::windows::core::Vtable::as_raw(this),
                result__.as_mut_ptr(),
            )
            .from_abi::<::windows::Foundation::Numerics::Vector3>(result__)
        }
    }
    pub fn SetInitialVelocity(
        &self,
        value: ::windows::Foundation::Numerics::Vector3,
    ) -> ::windows::core::Result<()> {
        let this = self;
        unsafe {
            (::windows::core::Vtable::vtable(this).SetInitialVelocity)(
                ::windows::core::Vtable::as_raw(this),
                value,
            )
            .ok()
        }
    }
}
impl ::core::clone::Clone for Vector3NaturalMotionAnimation {
    fn clone(&self) -> Self {
        Self(self.0.clone())
    }
}
impl ::core::cmp::PartialEq for Vector3NaturalMotionAnimation {
    fn eq(&self, other: &Self) -> bool {
        self.0 == other.0
    }
}
impl ::core::cmp::Eq for Vector3NaturalMotionAnimation {}
impl ::core::fmt::Debug for Vector3NaturalMotionAnimation {
    fn fmt(&self, f: &mut ::core::fmt::Formatter<'_>) -> ::core::fmt::Result {
        f.debug_tuple("Vector3NaturalMotionAnimation").field(&self.0).finish()
    }
}
unsafe impl ::windows::core::RuntimeType for Vector3NaturalMotionAnimation {
    const SIGNATURE : ::windows::core::ConstBuffer = ::windows::core::ConstBuffer::from_slice ( b"rc(Microsoft.UI.Composition.Vector3NaturalMotionAnimation;{13feeef2-d2c0-5b72-ad67-983a19b9b783})" ) ;
    type DefaultType = ::core::option::Option<Self>;
    fn from_default(from: &Self::DefaultType) -> ::windows::core::Result<Self> {
        from.as_ref().cloned().ok_or(::windows::core::Error::OK)
    }
}
unsafe impl ::windows::core::Vtable for Vector3NaturalMotionAnimation {
    type Vtable = IVector3NaturalMotionAnimation_Vtbl;
}
unsafe impl ::windows::core::Interface for Vector3NaturalMotionAnimation {
    const IID: ::windows::core::GUID =
        <IVector3NaturalMotionAnimation as ::windows::core::Interface>::IID;
}
impl ::windows::core::RuntimeName for Vector3NaturalMotionAnimation {
    const NAME: &'static str = "Microsoft.UI.Composition.Vector3NaturalMotionAnimation";
}
::windows::core::interface_hierarchy!(
    Vector3NaturalMotionAnimation,
    ::windows::core::IUnknown,
    ::windows::core::IInspectable
);
impl ::core::convert::TryFrom<Vector3NaturalMotionAnimation> for IAnimationObject {
    type Error = ::windows::core::Error;
    fn try_from(value: Vector3NaturalMotionAnimation) -> ::windows::core::Result<Self> {
        ::core::convert::TryFrom::try_from(&value)
    }
}
impl ::core::convert::TryFrom<&Vector3NaturalMotionAnimation> for IAnimationObject {
    type Error = ::windows::core::Error;
    fn try_from(value: &Vector3NaturalMotionAnimation) -> ::windows::core::Result<Self> {
        ::windows::core::Interface::cast(value)
    }
}
impl<'a> ::core::convert::TryFrom<&Vector3NaturalMotionAnimation>
    for ::windows::core::InParam<'a, IAnimationObject>
{
    type Error = ::windows::core::Error;
    fn try_from(value: &Vector3NaturalMotionAnimation) -> ::windows::core::Result<Self> {
        let item = ::std::convert::TryInto::try_into(value)?;
        Ok(::windows::core::InParam::owned(item))
    }
}
impl ::core::convert::TryFrom<Vector3NaturalMotionAnimation> for ::windows::Foundation::IClosable {
    type Error = ::windows::core::Error;
    fn try_from(value: Vector3NaturalMotionAnimation) -> ::windows::core::Result<Self> {
        ::core::convert::TryFrom::try_from(&value)
    }
}
impl ::core::convert::TryFrom<&Vector3NaturalMotionAnimation> for ::windows::Foundation::IClosable {
    type Error = ::windows::core::Error;
    fn try_from(value: &Vector3NaturalMotionAnimation) -> ::windows::core::Result<Self> {
        ::windows::core::Interface::cast(value)
    }
}
impl<'a> ::core::convert::TryFrom<&Vector3NaturalMotionAnimation>
    for ::windows::core::InParam<'a, ::windows::Foundation::IClosable>
{
    type Error = ::windows::core::Error;
    fn try_from(value: &Vector3NaturalMotionAnimation) -> ::windows::core::Result<Self> {
        let item = ::std::convert::TryInto::try_into(value)?;
        Ok(::windows::core::InParam::owned(item))
    }
}
impl ::core::convert::TryFrom<Vector3NaturalMotionAnimation> for ICompositionAnimationBase {
    type Error = ::windows::core::Error;
    fn try_from(value: Vector3NaturalMotionAnimation) -> ::windows::core::Result<Self> {
        ::core::convert::TryFrom::try_from(&value)
    }
}
impl ::core::convert::TryFrom<&Vector3NaturalMotionAnimation> for ICompositionAnimationBase {
    type Error = ::windows::core::Error;
    fn try_from(value: &Vector3NaturalMotionAnimation) -> ::windows::core::Result<Self> {
        ::windows::core::Interface::cast(value)
    }
}
impl<'a> ::core::convert::TryFrom<&Vector3NaturalMotionAnimation>
    for ::windows::core::InParam<'a, ICompositionAnimationBase>
{
    type Error = ::windows::core::Error;
    fn try_from(value: &Vector3NaturalMotionAnimation) -> ::windows::core::Result<Self> {
        let item = ::std::convert::TryInto::try_into(value)?;
        Ok(::windows::core::InParam::owned(item))
    }
}
impl ::core::convert::From<Vector3NaturalMotionAnimation> for NaturalMotionAnimation {
    fn from(value: Vector3NaturalMotionAnimation) -> Self {
        ::core::convert::From::from(&value)
    }
}
impl ::core::convert::From<&Vector3NaturalMotionAnimation> for NaturalMotionAnimation {
    fn from(value: &Vector3NaturalMotionAnimation) -> Self {
        ::windows::core::Interface::cast(value).unwrap()
    }
}
impl<'a> ::core::convert::From<&Vector3NaturalMotionAnimation>
    for ::windows::core::InParam<'a, NaturalMotionAnimation>
{
    fn from(value: &Vector3NaturalMotionAnimation) -> Self {
        ::windows::core::InParam::owned(value.into())
    }
}
impl ::core::convert::From<Vector3NaturalMotionAnimation> for CompositionAnimation {
    fn from(value: Vector3NaturalMotionAnimation) -> Self {
        ::core::convert::From::from(&value)
    }
}
impl ::core::convert::From<&Vector3NaturalMotionAnimation> for CompositionAnimation {
    fn from(value: &Vector3NaturalMotionAnimation) -> Self {
        ::windows::core::Interface::cast(value).unwrap()
    }
}
impl<'a> ::core::convert::From<&Vector3NaturalMotionAnimation>
    for ::windows::core::InParam<'a, CompositionAnimation>
{
    fn from(value: &Vector3NaturalMotionAnimation) -> Self {
        ::windows::core::InParam::owned(value.into())
    }
}
impl ::core::convert::From<Vector3NaturalMotionAnimation> for CompositionObject {
    fn from(value: Vector3NaturalMotionAnimation) -> Self {
        ::core::convert::From::from(&value)
    }
}
impl ::core::convert::From<&Vector3NaturalMotionAnimation> for CompositionObject {
    fn from(value: &Vector3NaturalMotionAnimation) -> Self {
        ::windows::core::Interface::cast(value).unwrap()
    }
}
impl<'a> ::core::convert::From<&Vector3NaturalMotionAnimation>
    for ::windows::core::InParam<'a, CompositionObject>
{
    fn from(value: &Vector3NaturalMotionAnimation) -> Self {
        ::windows::core::InParam::owned(value.into())
    }
}
unsafe impl ::core::marker::Send for Vector3NaturalMotionAnimation {}
unsafe impl ::core::marker::Sync for Vector3NaturalMotionAnimation {}
#[doc = "*Required features: `\"UI_Composition\"`*"]
#[repr(transparent)]
pub struct Vector4KeyFrameAnimation(::windows::core::IUnknown);
impl Vector4KeyFrameAnimation {
    pub fn PopulatePropertyInfo(
        &self,
        propertyname: &::windows::core::HSTRING,
        propertyinfo: &AnimationPropertyInfo,
    ) -> ::windows::core::Result<()> {
        let this = &::windows::core::Interface::cast::<IAnimationObject>(self)?;
        unsafe {
            (::windows::core::Vtable::vtable(this).PopulatePropertyInfo)(
                ::windows::core::Vtable::as_raw(this),
                ::core::mem::transmute_copy(propertyname),
                ::core::mem::transmute_copy(propertyinfo),
            )
            .ok()
        }
    }
    pub fn Close(&self) -> ::windows::core::Result<()> {
        let this = &::windows::core::Interface::cast::<::windows::Foundation::IClosable>(self)?;
        unsafe {
            (::windows::core::Vtable::vtable(this).Close)(::windows::core::Vtable::as_raw(this))
                .ok()
        }
    }
    pub fn ClearAllParameters(&self) -> ::windows::core::Result<()> {
        let this = &::windows::core::Interface::cast::<ICompositionAnimation>(self)?;
        unsafe {
            (::windows::core::Vtable::vtable(this).ClearAllParameters)(
                ::windows::core::Vtable::as_raw(this),
            )
            .ok()
        }
    }
    pub fn ClearParameter(&self, key: &::windows::core::HSTRING) -> ::windows::core::Result<()> {
        let this = &::windows::core::Interface::cast::<ICompositionAnimation>(self)?;
        unsafe {
            (::windows::core::Vtable::vtable(this).ClearParameter)(
                ::windows::core::Vtable::as_raw(this),
                ::core::mem::transmute_copy(key),
            )
            .ok()
        }
    }
    pub fn SetColorParameter(
        &self,
        key: &::windows::core::HSTRING,
        value: ::windows::UI::Color,
    ) -> ::windows::core::Result<()> {
        let this = &::windows::core::Interface::cast::<ICompositionAnimation>(self)?;
        unsafe {
            (::windows::core::Vtable::vtable(this).SetColorParameter)(
                ::windows::core::Vtable::as_raw(this),
                ::core::mem::transmute_copy(key),
                value,
            )
            .ok()
        }
    }
    pub fn SetMatrix3x2Parameter(
        &self,
        key: &::windows::core::HSTRING,
        value: ::windows::Foundation::Numerics::Matrix3x2,
    ) -> ::windows::core::Result<()> {
        let this = &::windows::core::Interface::cast::<ICompositionAnimation>(self)?;
        unsafe {
            (::windows::core::Vtable::vtable(this).SetMatrix3x2Parameter)(
                ::windows::core::Vtable::as_raw(this),
                ::core::mem::transmute_copy(key),
                value,
            )
            .ok()
        }
    }
    pub fn SetMatrix4x4Parameter(
        &self,
        key: &::windows::core::HSTRING,
        value: ::windows::Foundation::Numerics::Matrix4x4,
    ) -> ::windows::core::Result<()> {
        let this = &::windows::core::Interface::cast::<ICompositionAnimation>(self)?;
        unsafe {
            (::windows::core::Vtable::vtable(this).SetMatrix4x4Parameter)(
                ::windows::core::Vtable::as_raw(this),
                ::core::mem::transmute_copy(key),
                value,
            )
            .ok()
        }
    }
    pub fn SetQuaternionParameter(
        &self,
        key: &::windows::core::HSTRING,
        value: ::windows::Foundation::Numerics::Quaternion,
    ) -> ::windows::core::Result<()> {
        let this = &::windows::core::Interface::cast::<ICompositionAnimation>(self)?;
        unsafe {
            (::windows::core::Vtable::vtable(this).SetQuaternionParameter)(
                ::windows::core::Vtable::as_raw(this),
                ::core::mem::transmute_copy(key),
                value,
            )
            .ok()
        }
    }
    pub fn SetReferenceParameter<'a, P0>(
        &self,
        key: &::windows::core::HSTRING,
        compositionobject: P0,
    ) -> ::windows::core::Result<()>
    where
        P0: ::std::convert::Into<::windows::core::InParam<'a, CompositionObject>>,
    {
        let this = &::windows::core::Interface::cast::<ICompositionAnimation>(self)?;
        unsafe {
            (::windows::core::Vtable::vtable(this).SetReferenceParameter)(
                ::windows::core::Vtable::as_raw(this),
                ::core::mem::transmute_copy(key),
                compositionobject.into().abi(),
            )
            .ok()
        }
    }
    pub fn SetScalarParameter(
        &self,
        key: &::windows::core::HSTRING,
        value: f32,
    ) -> ::windows::core::Result<()> {
        let this = &::windows::core::Interface::cast::<ICompositionAnimation>(self)?;
        unsafe {
            (::windows::core::Vtable::vtable(this).SetScalarParameter)(
                ::windows::core::Vtable::as_raw(this),
                ::core::mem::transmute_copy(key),
                value,
            )
            .ok()
        }
    }
    pub fn SetVector2Parameter(
        &self,
        key: &::windows::core::HSTRING,
        value: ::windows::Foundation::Numerics::Vector2,
    ) -> ::windows::core::Result<()> {
        let this = &::windows::core::Interface::cast::<ICompositionAnimation>(self)?;
        unsafe {
            (::windows::core::Vtable::vtable(this).SetVector2Parameter)(
                ::windows::core::Vtable::as_raw(this),
                ::core::mem::transmute_copy(key),
                value,
            )
            .ok()
        }
    }
    pub fn SetVector3Parameter(
        &self,
        key: &::windows::core::HSTRING,
        value: ::windows::Foundation::Numerics::Vector3,
    ) -> ::windows::core::Result<()> {
        let this = &::windows::core::Interface::cast::<ICompositionAnimation>(self)?;
        unsafe {
            (::windows::core::Vtable::vtable(this).SetVector3Parameter)(
                ::windows::core::Vtable::as_raw(this),
                ::core::mem::transmute_copy(key),
                value,
            )
            .ok()
        }
    }
    pub fn SetVector4Parameter(
        &self,
        key: &::windows::core::HSTRING,
        value: ::windows::Foundation::Numerics::Vector4,
    ) -> ::windows::core::Result<()> {
        let this = &::windows::core::Interface::cast::<ICompositionAnimation>(self)?;
        unsafe {
            (::windows::core::Vtable::vtable(this).SetVector4Parameter)(
                ::windows::core::Vtable::as_raw(this),
                ::core::mem::transmute_copy(key),
                value,
            )
            .ok()
        }
    }
    pub fn SetBooleanParameter(
        &self,
        key: &::windows::core::HSTRING,
        value: bool,
    ) -> ::windows::core::Result<()> {
        let this = &::windows::core::Interface::cast::<ICompositionAnimation2>(self)?;
        unsafe {
            (::windows::core::Vtable::vtable(this).SetBooleanParameter)(
                ::windows::core::Vtable::as_raw(this),
                ::core::mem::transmute_copy(key),
                value,
            )
            .ok()
        }
    }
    pub fn Target(&self) -> ::windows::core::Result<::windows::core::HSTRING> {
        let this = &::windows::core::Interface::cast::<ICompositionAnimation2>(self)?;
        unsafe {
            let mut result__ = ::core::mem::MaybeUninit::zeroed();
            (::windows::core::Vtable::vtable(this).Target)(
                ::windows::core::Vtable::as_raw(this),
                result__.as_mut_ptr(),
            )
            .from_abi::<::windows::core::HSTRING>(result__)
        }
    }
    pub fn SetTarget(&self, value: &::windows::core::HSTRING) -> ::windows::core::Result<()> {
        let this = &::windows::core::Interface::cast::<ICompositionAnimation2>(self)?;
        unsafe {
            (::windows::core::Vtable::vtable(this).SetTarget)(
                ::windows::core::Vtable::as_raw(this),
                ::core::mem::transmute_copy(value),
            )
            .ok()
        }
    }
    pub fn InitialValueExpressions(
        &self,
    ) -> ::windows::core::Result<InitialValueExpressionCollection> {
        let this = &::windows::core::Interface::cast::<ICompositionAnimation3>(self)?;
        unsafe {
            let mut result__ = ::core::mem::MaybeUninit::zeroed();
            (::windows::core::Vtable::vtable(this).InitialValueExpressions)(
                ::windows::core::Vtable::as_raw(this),
                result__.as_mut_ptr(),
            )
            .from_abi::<InitialValueExpressionCollection>(result__)
        }
    }
    pub fn SetExpressionReferenceParameter<'a, P0, E0>(
        &self,
        parametername: &::windows::core::HSTRING,
        source: P0,
    ) -> ::windows::core::Result<()>
    where
        P0: ::std::convert::TryInto<::windows::core::InParam<'a, IAnimationObject>, Error = E0>,
        E0: ::std::convert::Into<::windows::core::Error>,
    {
        let this = &::windows::core::Interface::cast::<ICompositionAnimation4>(self)?;
        unsafe {
            (::windows::core::Vtable::vtable(this).SetExpressionReferenceParameter)(
                ::windows::core::Vtable::as_raw(this),
                ::core::mem::transmute_copy(parametername),
                source.try_into().map_err(|e| e.into())?.abi(),
            )
            .ok()
        }
    }
    pub fn Compositor(&self) -> ::windows::core::Result<Compositor> {
        let this = &::windows::core::Interface::cast::<ICompositionObject>(self)?;
        unsafe {
            let mut result__ = ::core::mem::MaybeUninit::zeroed();
            (::windows::core::Vtable::vtable(this).Compositor)(
                ::windows::core::Vtable::as_raw(this),
                result__.as_mut_ptr(),
            )
            .from_abi::<Compositor>(result__)
        }
    }
    pub fn Properties(&self) -> ::windows::core::Result<CompositionPropertySet> {
        let this = &::windows::core::Interface::cast::<ICompositionObject>(self)?;
        unsafe {
            let mut result__ = ::core::mem::MaybeUninit::zeroed();
            (::windows::core::Vtable::vtable(this).Properties)(
                ::windows::core::Vtable::as_raw(this),
                result__.as_mut_ptr(),
            )
            .from_abi::<CompositionPropertySet>(result__)
        }
    }
    pub fn StartAnimation<'a, P0>(
        &self,
        propertyname: &::windows::core::HSTRING,
        animation: P0,
    ) -> ::windows::core::Result<()>
    where
        P0: ::std::convert::Into<::windows::core::InParam<'a, CompositionAnimation>>,
    {
        let this = &::windows::core::Interface::cast::<ICompositionObject>(self)?;
        unsafe {
            (::windows::core::Vtable::vtable(this).StartAnimation)(
                ::windows::core::Vtable::as_raw(this),
                ::core::mem::transmute_copy(propertyname),
                animation.into().abi(),
            )
            .ok()
        }
    }
    pub fn StopAnimation(
        &self,
        propertyname: &::windows::core::HSTRING,
    ) -> ::windows::core::Result<()> {
        let this = &::windows::core::Interface::cast::<ICompositionObject>(self)?;
        unsafe {
            (::windows::core::Vtable::vtable(this).StopAnimation)(
                ::windows::core::Vtable::as_raw(this),
                ::core::mem::transmute_copy(propertyname),
            )
            .ok()
        }
    }
    pub fn Comment(&self) -> ::windows::core::Result<::windows::core::HSTRING> {
        let this = &::windows::core::Interface::cast::<ICompositionObject2>(self)?;
        unsafe {
            let mut result__ = ::core::mem::MaybeUninit::zeroed();
            (::windows::core::Vtable::vtable(this).Comment)(
                ::windows::core::Vtable::as_raw(this),
                result__.as_mut_ptr(),
            )
            .from_abi::<::windows::core::HSTRING>(result__)
        }
    }
    pub fn SetComment(&self, value: &::windows::core::HSTRING) -> ::windows::core::Result<()> {
        let this = &::windows::core::Interface::cast::<ICompositionObject2>(self)?;
        unsafe {
            (::windows::core::Vtable::vtable(this).SetComment)(
                ::windows::core::Vtable::as_raw(this),
                ::core::mem::transmute_copy(value),
            )
            .ok()
        }
    }
    pub fn ImplicitAnimations(&self) -> ::windows::core::Result<ImplicitAnimationCollection> {
        let this = &::windows::core::Interface::cast::<ICompositionObject2>(self)?;
        unsafe {
            let mut result__ = ::core::mem::MaybeUninit::zeroed();
            (::windows::core::Vtable::vtable(this).ImplicitAnimations)(
                ::windows::core::Vtable::as_raw(this),
                result__.as_mut_ptr(),
            )
            .from_abi::<ImplicitAnimationCollection>(result__)
        }
    }
    pub fn SetImplicitAnimations(
        &self,
        value: &ImplicitAnimationCollection,
    ) -> ::windows::core::Result<()> {
        let this = &::windows::core::Interface::cast::<ICompositionObject2>(self)?;
        unsafe {
            (::windows::core::Vtable::vtable(this).SetImplicitAnimations)(
                ::windows::core::Vtable::as_raw(this),
                ::core::mem::transmute_copy(value),
            )
            .ok()
        }
    }
    pub fn StartAnimationGroup<'a, P0, E0>(&self, value: P0) -> ::windows::core::Result<()>
    where
        P0: ::std::convert::TryInto<
            ::windows::core::InParam<'a, ICompositionAnimationBase>,
            Error = E0,
        >,
        E0: ::std::convert::Into<::windows::core::Error>,
    {
        let this = &::windows::core::Interface::cast::<ICompositionObject2>(self)?;
        unsafe {
            (::windows::core::Vtable::vtable(this).StartAnimationGroup)(
                ::windows::core::Vtable::as_raw(this),
                value.try_into().map_err(|e| e.into())?.abi(),
            )
            .ok()
        }
    }
    pub fn StopAnimationGroup<'a, P0, E0>(&self, value: P0) -> ::windows::core::Result<()>
    where
        P0: ::std::convert::TryInto<
            ::windows::core::InParam<'a, ICompositionAnimationBase>,
            Error = E0,
        >,
        E0: ::std::convert::Into<::windows::core::Error>,
    {
        let this = &::windows::core::Interface::cast::<ICompositionObject2>(self)?;
        unsafe {
            (::windows::core::Vtable::vtable(this).StopAnimationGroup)(
                ::windows::core::Vtable::as_raw(this),
                value.try_into().map_err(|e| e.into())?.abi(),
            )
            .ok()
        }
    }
    #[doc = "*Required features: `\"UI_Dispatching\"`*"]
    #[cfg(feature = "UI_Dispatching")]
    pub fn DispatcherQueue(&self) -> ::windows::core::Result<super::Dispatching::DispatcherQueue> {
        let this = &::windows::core::Interface::cast::<ICompositionObject3>(self)?;
        unsafe {
            let mut result__ = ::core::mem::MaybeUninit::zeroed();
            (::windows::core::Vtable::vtable(this).DispatcherQueue)(
                ::windows::core::Vtable::as_raw(this),
                result__.as_mut_ptr(),
            )
            .from_abi::<super::Dispatching::DispatcherQueue>(result__)
        }
    }
    pub fn TryGetAnimationController(
        &self,
        propertyname: &::windows::core::HSTRING,
    ) -> ::windows::core::Result<AnimationController> {
        let this = &::windows::core::Interface::cast::<ICompositionObject4>(self)?;
        unsafe {
            let mut result__ = ::core::mem::MaybeUninit::zeroed();
            (::windows::core::Vtable::vtable(this).TryGetAnimationController)(
                ::windows::core::Vtable::as_raw(this),
                ::core::mem::transmute_copy(propertyname),
                result__.as_mut_ptr(),
            )
            .from_abi::<AnimationController>(result__)
        }
    }
    pub fn StartAnimationWithController<'a, P0>(
        &self,
        propertyname: &::windows::core::HSTRING,
        animation: P0,
        animationcontroller: &AnimationController,
    ) -> ::windows::core::Result<()>
    where
        P0: ::std::convert::Into<::windows::core::InParam<'a, CompositionAnimation>>,
    {
        let this = &::windows::core::Interface::cast::<ICompositionObject5>(self)?;
        unsafe {
            (::windows::core::Vtable::vtable(this).StartAnimationWithController)(
                ::windows::core::Vtable::as_raw(this),
                ::core::mem::transmute_copy(propertyname),
                animation.into().abi(),
                ::core::mem::transmute_copy(animationcontroller),
            )
            .ok()
        }
    }
    pub fn DelayTime(&self) -> ::windows::core::Result<::windows::Foundation::TimeSpan> {
        let this = &::windows::core::Interface::cast::<IKeyFrameAnimation>(self)?;
        unsafe {
            let mut result__ = ::core::mem::MaybeUninit::zeroed();
            (::windows::core::Vtable::vtable(this).DelayTime)(
                ::windows::core::Vtable::as_raw(this),
                result__.as_mut_ptr(),
            )
            .from_abi::<::windows::Foundation::TimeSpan>(result__)
        }
    }
    pub fn SetDelayTime(
        &self,
        value: ::windows::Foundation::TimeSpan,
    ) -> ::windows::core::Result<()> {
        let this = &::windows::core::Interface::cast::<IKeyFrameAnimation>(self)?;
        unsafe {
            (::windows::core::Vtable::vtable(this).SetDelayTime)(
                ::windows::core::Vtable::as_raw(this),
                value,
            )
            .ok()
        }
    }
    pub fn Duration(&self) -> ::windows::core::Result<::windows::Foundation::TimeSpan> {
        let this = &::windows::core::Interface::cast::<IKeyFrameAnimation>(self)?;
        unsafe {
            let mut result__ = ::core::mem::MaybeUninit::zeroed();
            (::windows::core::Vtable::vtable(this).Duration)(
                ::windows::core::Vtable::as_raw(this),
                result__.as_mut_ptr(),
            )
            .from_abi::<::windows::Foundation::TimeSpan>(result__)
        }
    }
    pub fn SetDuration(
        &self,
        value: ::windows::Foundation::TimeSpan,
    ) -> ::windows::core::Result<()> {
        let this = &::windows::core::Interface::cast::<IKeyFrameAnimation>(self)?;
        unsafe {
            (::windows::core::Vtable::vtable(this).SetDuration)(
                ::windows::core::Vtable::as_raw(this),
                value,
            )
            .ok()
        }
    }
    pub fn IterationBehavior(&self) -> ::windows::core::Result<AnimationIterationBehavior> {
        let this = &::windows::core::Interface::cast::<IKeyFrameAnimation>(self)?;
        unsafe {
            let mut result__ = ::core::mem::MaybeUninit::zeroed();
            (::windows::core::Vtable::vtable(this).IterationBehavior)(
                ::windows::core::Vtable::as_raw(this),
                result__.as_mut_ptr(),
            )
            .from_abi::<AnimationIterationBehavior>(result__)
        }
    }
    pub fn SetIterationBehavior(
        &self,
        value: AnimationIterationBehavior,
    ) -> ::windows::core::Result<()> {
        let this = &::windows::core::Interface::cast::<IKeyFrameAnimation>(self)?;
        unsafe {
            (::windows::core::Vtable::vtable(this).SetIterationBehavior)(
                ::windows::core::Vtable::as_raw(this),
                value,
            )
            .ok()
        }
    }
    pub fn IterationCount(&self) -> ::windows::core::Result<i32> {
        let this = &::windows::core::Interface::cast::<IKeyFrameAnimation>(self)?;
        unsafe {
            let mut result__ = ::core::mem::MaybeUninit::zeroed();
            (::windows::core::Vtable::vtable(this).IterationCount)(
                ::windows::core::Vtable::as_raw(this),
                result__.as_mut_ptr(),
            )
            .from_abi::<i32>(result__)
        }
    }
    pub fn SetIterationCount(&self, value: i32) -> ::windows::core::Result<()> {
        let this = &::windows::core::Interface::cast::<IKeyFrameAnimation>(self)?;
        unsafe {
            (::windows::core::Vtable::vtable(this).SetIterationCount)(
                ::windows::core::Vtable::as_raw(this),
                value,
            )
            .ok()
        }
    }
    pub fn KeyFrameCount(&self) -> ::windows::core::Result<i32> {
        let this = &::windows::core::Interface::cast::<IKeyFrameAnimation>(self)?;
        unsafe {
            let mut result__ = ::core::mem::MaybeUninit::zeroed();
            (::windows::core::Vtable::vtable(this).KeyFrameCount)(
                ::windows::core::Vtable::as_raw(this),
                result__.as_mut_ptr(),
            )
            .from_abi::<i32>(result__)
        }
    }
    pub fn StopBehavior(&self) -> ::windows::core::Result<AnimationStopBehavior> {
        let this = &::windows::core::Interface::cast::<IKeyFrameAnimation>(self)?;
        unsafe {
            let mut result__ = ::core::mem::MaybeUninit::zeroed();
            (::windows::core::Vtable::vtable(this).StopBehavior)(
                ::windows::core::Vtable::as_raw(this),
                result__.as_mut_ptr(),
            )
            .from_abi::<AnimationStopBehavior>(result__)
        }
    }
    pub fn SetStopBehavior(&self, value: AnimationStopBehavior) -> ::windows::core::Result<()> {
        let this = &::windows::core::Interface::cast::<IKeyFrameAnimation>(self)?;
        unsafe {
            (::windows::core::Vtable::vtable(this).SetStopBehavior)(
                ::windows::core::Vtable::as_raw(this),
                value,
            )
            .ok()
        }
    }
    pub fn InsertExpressionKeyFrame(
        &self,
        normalizedprogresskey: f32,
        value: &::windows::core::HSTRING,
    ) -> ::windows::core::Result<()> {
        let this = &::windows::core::Interface::cast::<IKeyFrameAnimation>(self)?;
        unsafe {
            (::windows::core::Vtable::vtable(this).InsertExpressionKeyFrame)(
                ::windows::core::Vtable::as_raw(this),
                normalizedprogresskey,
                ::core::mem::transmute_copy(value),
            )
            .ok()
        }
    }
    pub fn InsertExpressionKeyFrameWithEasingFunction<'a, P0>(
        &self,
        normalizedprogresskey: f32,
        value: &::windows::core::HSTRING,
        easingfunction: P0,
    ) -> ::windows::core::Result<()>
    where
        P0: ::std::convert::Into<::windows::core::InParam<'a, CompositionEasingFunction>>,
    {
        let this = &::windows::core::Interface::cast::<IKeyFrameAnimation>(self)?;
        unsafe {
            (::windows::core::Vtable::vtable(this).InsertExpressionKeyFrameWithEasingFunction)(
                ::windows::core::Vtable::as_raw(this),
                normalizedprogresskey,
                ::core::mem::transmute_copy(value),
                easingfunction.into().abi(),
            )
            .ok()
        }
    }
    pub fn Direction(&self) -> ::windows::core::Result<AnimationDirection> {
        let this = &::windows::core::Interface::cast::<IKeyFrameAnimation2>(self)?;
        unsafe {
            let mut result__ = ::core::mem::MaybeUninit::zeroed();
            (::windows::core::Vtable::vtable(this).Direction)(
                ::windows::core::Vtable::as_raw(this),
                result__.as_mut_ptr(),
            )
            .from_abi::<AnimationDirection>(result__)
        }
    }
    pub fn SetDirection(&self, value: AnimationDirection) -> ::windows::core::Result<()> {
        let this = &::windows::core::Interface::cast::<IKeyFrameAnimation2>(self)?;
        unsafe {
            (::windows::core::Vtable::vtable(this).SetDirection)(
                ::windows::core::Vtable::as_raw(this),
                value,
            )
            .ok()
        }
    }
    pub fn DelayBehavior(&self) -> ::windows::core::Result<AnimationDelayBehavior> {
        let this = &::windows::core::Interface::cast::<IKeyFrameAnimation3>(self)?;
        unsafe {
            let mut result__ = ::core::mem::MaybeUninit::zeroed();
            (::windows::core::Vtable::vtable(this).DelayBehavior)(
                ::windows::core::Vtable::as_raw(this),
                result__.as_mut_ptr(),
            )
            .from_abi::<AnimationDelayBehavior>(result__)
        }
    }
    pub fn SetDelayBehavior(&self, value: AnimationDelayBehavior) -> ::windows::core::Result<()> {
        let this = &::windows::core::Interface::cast::<IKeyFrameAnimation3>(self)?;
        unsafe {
            (::windows::core::Vtable::vtable(this).SetDelayBehavior)(
                ::windows::core::Vtable::as_raw(this),
                value,
            )
            .ok()
        }
    }
    pub fn InsertKeyFrame(
        &self,
        normalizedprogresskey: f32,
        value: ::windows::Foundation::Numerics::Vector4,
    ) -> ::windows::core::Result<()> {
        let this = self;
        unsafe {
            (::windows::core::Vtable::vtable(this).InsertKeyFrame)(
                ::windows::core::Vtable::as_raw(this),
                normalizedprogresskey,
                value,
            )
            .ok()
        }
    }
    pub fn InsertKeyFrameWithEasingFunction<'a, P0>(
        &self,
        normalizedprogresskey: f32,
        value: ::windows::Foundation::Numerics::Vector4,
        easingfunction: P0,
    ) -> ::windows::core::Result<()>
    where
        P0: ::std::convert::Into<::windows::core::InParam<'a, CompositionEasingFunction>>,
    {
        let this = self;
        unsafe {
            (::windows::core::Vtable::vtable(this).InsertKeyFrameWithEasingFunction)(
                ::windows::core::Vtable::as_raw(this),
                normalizedprogresskey,
                value,
                easingfunction.into().abi(),
            )
            .ok()
        }
    }
}
impl ::core::clone::Clone for Vector4KeyFrameAnimation {
    fn clone(&self) -> Self {
        Self(self.0.clone())
    }
}
impl ::core::cmp::PartialEq for Vector4KeyFrameAnimation {
    fn eq(&self, other: &Self) -> bool {
        self.0 == other.0
    }
}
impl ::core::cmp::Eq for Vector4KeyFrameAnimation {}
impl ::core::fmt::Debug for Vector4KeyFrameAnimation {
    fn fmt(&self, f: &mut ::core::fmt::Formatter<'_>) -> ::core::fmt::Result {
        f.debug_tuple("Vector4KeyFrameAnimation").field(&self.0).finish()
    }
}
unsafe impl ::windows::core::RuntimeType for Vector4KeyFrameAnimation {
    const SIGNATURE : ::windows::core::ConstBuffer = ::windows::core::ConstBuffer::from_slice ( b"rc(Microsoft.UI.Composition.Vector4KeyFrameAnimation;{16cea3b9-c5e3-5f6f-b5c7-da29a31ccfc7})" ) ;
    type DefaultType = ::core::option::Option<Self>;
    fn from_default(from: &Self::DefaultType) -> ::windows::core::Result<Self> {
        from.as_ref().cloned().ok_or(::windows::core::Error::OK)
    }
}
unsafe impl ::windows::core::Vtable for Vector4KeyFrameAnimation {
    type Vtable = IVector4KeyFrameAnimation_Vtbl;
}
unsafe impl ::windows::core::Interface for Vector4KeyFrameAnimation {
    const IID: ::windows::core::GUID =
        <IVector4KeyFrameAnimation as ::windows::core::Interface>::IID;
}
impl ::windows::core::RuntimeName for Vector4KeyFrameAnimation {
    const NAME: &'static str = "Microsoft.UI.Composition.Vector4KeyFrameAnimation";
}
::windows::core::interface_hierarchy!(
    Vector4KeyFrameAnimation,
    ::windows::core::IUnknown,
    ::windows::core::IInspectable
);
impl ::core::convert::TryFrom<Vector4KeyFrameAnimation> for IAnimationObject {
    type Error = ::windows::core::Error;
    fn try_from(value: Vector4KeyFrameAnimation) -> ::windows::core::Result<Self> {
        ::core::convert::TryFrom::try_from(&value)
    }
}
impl ::core::convert::TryFrom<&Vector4KeyFrameAnimation> for IAnimationObject {
    type Error = ::windows::core::Error;
    fn try_from(value: &Vector4KeyFrameAnimation) -> ::windows::core::Result<Self> {
        ::windows::core::Interface::cast(value)
    }
}
impl<'a> ::core::convert::TryFrom<&Vector4KeyFrameAnimation>
    for ::windows::core::InParam<'a, IAnimationObject>
{
    type Error = ::windows::core::Error;
    fn try_from(value: &Vector4KeyFrameAnimation) -> ::windows::core::Result<Self> {
        let item = ::std::convert::TryInto::try_into(value)?;
        Ok(::windows::core::InParam::owned(item))
    }
}
impl ::core::convert::TryFrom<Vector4KeyFrameAnimation> for ::windows::Foundation::IClosable {
    type Error = ::windows::core::Error;
    fn try_from(value: Vector4KeyFrameAnimation) -> ::windows::core::Result<Self> {
        ::core::convert::TryFrom::try_from(&value)
    }
}
impl ::core::convert::TryFrom<&Vector4KeyFrameAnimation> for ::windows::Foundation::IClosable {
    type Error = ::windows::core::Error;
    fn try_from(value: &Vector4KeyFrameAnimation) -> ::windows::core::Result<Self> {
        ::windows::core::Interface::cast(value)
    }
}
impl<'a> ::core::convert::TryFrom<&Vector4KeyFrameAnimation>
    for ::windows::core::InParam<'a, ::windows::Foundation::IClosable>
{
    type Error = ::windows::core::Error;
    fn try_from(value: &Vector4KeyFrameAnimation) -> ::windows::core::Result<Self> {
        let item = ::std::convert::TryInto::try_into(value)?;
        Ok(::windows::core::InParam::owned(item))
    }
}
impl ::core::convert::TryFrom<Vector4KeyFrameAnimation> for ICompositionAnimationBase {
    type Error = ::windows::core::Error;
    fn try_from(value: Vector4KeyFrameAnimation) -> ::windows::core::Result<Self> {
        ::core::convert::TryFrom::try_from(&value)
    }
}
impl ::core::convert::TryFrom<&Vector4KeyFrameAnimation> for ICompositionAnimationBase {
    type Error = ::windows::core::Error;
    fn try_from(value: &Vector4KeyFrameAnimation) -> ::windows::core::Result<Self> {
        ::windows::core::Interface::cast(value)
    }
}
impl<'a> ::core::convert::TryFrom<&Vector4KeyFrameAnimation>
    for ::windows::core::InParam<'a, ICompositionAnimationBase>
{
    type Error = ::windows::core::Error;
    fn try_from(value: &Vector4KeyFrameAnimation) -> ::windows::core::Result<Self> {
        let item = ::std::convert::TryInto::try_into(value)?;
        Ok(::windows::core::InParam::owned(item))
    }
}
impl ::core::convert::From<Vector4KeyFrameAnimation> for KeyFrameAnimation {
    fn from(value: Vector4KeyFrameAnimation) -> Self {
        ::core::convert::From::from(&value)
    }
}
impl ::core::convert::From<&Vector4KeyFrameAnimation> for KeyFrameAnimation {
    fn from(value: &Vector4KeyFrameAnimation) -> Self {
        ::windows::core::Interface::cast(value).unwrap()
    }
}
impl<'a> ::core::convert::From<&Vector4KeyFrameAnimation>
    for ::windows::core::InParam<'a, KeyFrameAnimation>
{
    fn from(value: &Vector4KeyFrameAnimation) -> Self {
        ::windows::core::InParam::owned(value.into())
    }
}
impl ::core::convert::From<Vector4KeyFrameAnimation> for CompositionAnimation {
    fn from(value: Vector4KeyFrameAnimation) -> Self {
        ::core::convert::From::from(&value)
    }
}
impl ::core::convert::From<&Vector4KeyFrameAnimation> for CompositionAnimation {
    fn from(value: &Vector4KeyFrameAnimation) -> Self {
        ::windows::core::Interface::cast(value).unwrap()
    }
}
impl<'a> ::core::convert::From<&Vector4KeyFrameAnimation>
    for ::windows::core::InParam<'a, CompositionAnimation>
{
    fn from(value: &Vector4KeyFrameAnimation) -> Self {
        ::windows::core::InParam::owned(value.into())
    }
}
impl ::core::convert::From<Vector4KeyFrameAnimation> for CompositionObject {
    fn from(value: Vector4KeyFrameAnimation) -> Self {
        ::core::convert::From::from(&value)
    }
}
impl ::core::convert::From<&Vector4KeyFrameAnimation> for CompositionObject {
    fn from(value: &Vector4KeyFrameAnimation) -> Self {
        ::windows::core::Interface::cast(value).unwrap()
    }
}
impl<'a> ::core::convert::From<&Vector4KeyFrameAnimation>
    for ::windows::core::InParam<'a, CompositionObject>
{
    fn from(value: &Vector4KeyFrameAnimation) -> Self {
        ::windows::core::InParam::owned(value.into())
    }
}
unsafe impl ::core::marker::Send for Vector4KeyFrameAnimation {}
unsafe impl ::core::marker::Sync for Vector4KeyFrameAnimation {}
#[doc = "*Required features: `\"UI_Composition\"`*"]
#[repr(transparent)]
pub struct Visual(::windows::core::IUnknown);
impl Visual {
    pub fn PopulatePropertyInfo(
        &self,
        propertyname: &::windows::core::HSTRING,
        propertyinfo: &AnimationPropertyInfo,
    ) -> ::windows::core::Result<()> {
        let this = &::windows::core::Interface::cast::<IAnimationObject>(self)?;
        unsafe {
            (::windows::core::Vtable::vtable(this).PopulatePropertyInfo)(
                ::windows::core::Vtable::as_raw(this),
                ::core::mem::transmute_copy(propertyname),
                ::core::mem::transmute_copy(propertyinfo),
            )
            .ok()
        }
    }
    pub fn Close(&self) -> ::windows::core::Result<()> {
        let this = &::windows::core::Interface::cast::<::windows::Foundation::IClosable>(self)?;
        unsafe {
            (::windows::core::Vtable::vtable(this).Close)(::windows::core::Vtable::as_raw(this))
                .ok()
        }
    }
    pub fn Compositor(&self) -> ::windows::core::Result<Compositor> {
        let this = &::windows::core::Interface::cast::<ICompositionObject>(self)?;
        unsafe {
            let mut result__ = ::core::mem::MaybeUninit::zeroed();
            (::windows::core::Vtable::vtable(this).Compositor)(
                ::windows::core::Vtable::as_raw(this),
                result__.as_mut_ptr(),
            )
            .from_abi::<Compositor>(result__)
        }
    }
    pub fn Properties(&self) -> ::windows::core::Result<CompositionPropertySet> {
        let this = &::windows::core::Interface::cast::<ICompositionObject>(self)?;
        unsafe {
            let mut result__ = ::core::mem::MaybeUninit::zeroed();
            (::windows::core::Vtable::vtable(this).Properties)(
                ::windows::core::Vtable::as_raw(this),
                result__.as_mut_ptr(),
            )
            .from_abi::<CompositionPropertySet>(result__)
        }
    }
    pub fn StartAnimation<'a, P0>(
        &self,
        propertyname: &::windows::core::HSTRING,
        animation: P0,
    ) -> ::windows::core::Result<()>
    where
        P0: ::std::convert::Into<::windows::core::InParam<'a, CompositionAnimation>>,
    {
        let this = &::windows::core::Interface::cast::<ICompositionObject>(self)?;
        unsafe {
            (::windows::core::Vtable::vtable(this).StartAnimation)(
                ::windows::core::Vtable::as_raw(this),
                ::core::mem::transmute_copy(propertyname),
                animation.into().abi(),
            )
            .ok()
        }
    }
    pub fn StopAnimation(
        &self,
        propertyname: &::windows::core::HSTRING,
    ) -> ::windows::core::Result<()> {
        let this = &::windows::core::Interface::cast::<ICompositionObject>(self)?;
        unsafe {
            (::windows::core::Vtable::vtable(this).StopAnimation)(
                ::windows::core::Vtable::as_raw(this),
                ::core::mem::transmute_copy(propertyname),
            )
            .ok()
        }
    }
    pub fn Comment(&self) -> ::windows::core::Result<::windows::core::HSTRING> {
        let this = &::windows::core::Interface::cast::<ICompositionObject2>(self)?;
        unsafe {
            let mut result__ = ::core::mem::MaybeUninit::zeroed();
            (::windows::core::Vtable::vtable(this).Comment)(
                ::windows::core::Vtable::as_raw(this),
                result__.as_mut_ptr(),
            )
            .from_abi::<::windows::core::HSTRING>(result__)
        }
    }
    pub fn SetComment(&self, value: &::windows::core::HSTRING) -> ::windows::core::Result<()> {
        let this = &::windows::core::Interface::cast::<ICompositionObject2>(self)?;
        unsafe {
            (::windows::core::Vtable::vtable(this).SetComment)(
                ::windows::core::Vtable::as_raw(this),
                ::core::mem::transmute_copy(value),
            )
            .ok()
        }
    }
    pub fn ImplicitAnimations(&self) -> ::windows::core::Result<ImplicitAnimationCollection> {
        let this = &::windows::core::Interface::cast::<ICompositionObject2>(self)?;
        unsafe {
            let mut result__ = ::core::mem::MaybeUninit::zeroed();
            (::windows::core::Vtable::vtable(this).ImplicitAnimations)(
                ::windows::core::Vtable::as_raw(this),
                result__.as_mut_ptr(),
            )
            .from_abi::<ImplicitAnimationCollection>(result__)
        }
    }
    pub fn SetImplicitAnimations(
        &self,
        value: &ImplicitAnimationCollection,
    ) -> ::windows::core::Result<()> {
        let this = &::windows::core::Interface::cast::<ICompositionObject2>(self)?;
        unsafe {
            (::windows::core::Vtable::vtable(this).SetImplicitAnimations)(
                ::windows::core::Vtable::as_raw(this),
                ::core::mem::transmute_copy(value),
            )
            .ok()
        }
    }
    pub fn StartAnimationGroup<'a, P0, E0>(&self, value: P0) -> ::windows::core::Result<()>
    where
        P0: ::std::convert::TryInto<
            ::windows::core::InParam<'a, ICompositionAnimationBase>,
            Error = E0,
        >,
        E0: ::std::convert::Into<::windows::core::Error>,
    {
        let this = &::windows::core::Interface::cast::<ICompositionObject2>(self)?;
        unsafe {
            (::windows::core::Vtable::vtable(this).StartAnimationGroup)(
                ::windows::core::Vtable::as_raw(this),
                value.try_into().map_err(|e| e.into())?.abi(),
            )
            .ok()
        }
    }
    pub fn StopAnimationGroup<'a, P0, E0>(&self, value: P0) -> ::windows::core::Result<()>
    where
        P0: ::std::convert::TryInto<
            ::windows::core::InParam<'a, ICompositionAnimationBase>,
            Error = E0,
        >,
        E0: ::std::convert::Into<::windows::core::Error>,
    {
        let this = &::windows::core::Interface::cast::<ICompositionObject2>(self)?;
        unsafe {
            (::windows::core::Vtable::vtable(this).StopAnimationGroup)(
                ::windows::core::Vtable::as_raw(this),
                value.try_into().map_err(|e| e.into())?.abi(),
            )
            .ok()
        }
    }
    #[doc = "*Required features: `\"UI_Dispatching\"`*"]
    #[cfg(feature = "UI_Dispatching")]
    pub fn DispatcherQueue(&self) -> ::windows::core::Result<super::Dispatching::DispatcherQueue> {
        let this = &::windows::core::Interface::cast::<ICompositionObject3>(self)?;
        unsafe {
            let mut result__ = ::core::mem::MaybeUninit::zeroed();
            (::windows::core::Vtable::vtable(this).DispatcherQueue)(
                ::windows::core::Vtable::as_raw(this),
                result__.as_mut_ptr(),
            )
            .from_abi::<super::Dispatching::DispatcherQueue>(result__)
        }
    }
    pub fn TryGetAnimationController(
        &self,
        propertyname: &::windows::core::HSTRING,
    ) -> ::windows::core::Result<AnimationController> {
        let this = &::windows::core::Interface::cast::<ICompositionObject4>(self)?;
        unsafe {
            let mut result__ = ::core::mem::MaybeUninit::zeroed();
            (::windows::core::Vtable::vtable(this).TryGetAnimationController)(
                ::windows::core::Vtable::as_raw(this),
                ::core::mem::transmute_copy(propertyname),
                result__.as_mut_ptr(),
            )
            .from_abi::<AnimationController>(result__)
        }
    }
    pub fn StartAnimationWithController<'a, P0>(
        &self,
        propertyname: &::windows::core::HSTRING,
        animation: P0,
        animationcontroller: &AnimationController,
    ) -> ::windows::core::Result<()>
    where
        P0: ::std::convert::Into<::windows::core::InParam<'a, CompositionAnimation>>,
    {
        let this = &::windows::core::Interface::cast::<ICompositionObject5>(self)?;
        unsafe {
            (::windows::core::Vtable::vtable(this).StartAnimationWithController)(
                ::windows::core::Vtable::as_raw(this),
                ::core::mem::transmute_copy(propertyname),
                animation.into().abi(),
                ::core::mem::transmute_copy(animationcontroller),
            )
            .ok()
        }
    }
    pub fn AnchorPoint(&self) -> ::windows::core::Result<::windows::Foundation::Numerics::Vector2> {
        let this = self;
        unsafe {
            let mut result__ = ::core::mem::MaybeUninit::zeroed();
            (::windows::core::Vtable::vtable(this).AnchorPoint)(
                ::windows::core::Vtable::as_raw(this),
                result__.as_mut_ptr(),
            )
            .from_abi::<::windows::Foundation::Numerics::Vector2>(result__)
        }
    }
    pub fn SetAnchorPoint(
        &self,
        value: ::windows::Foundation::Numerics::Vector2,
    ) -> ::windows::core::Result<()> {
        let this = self;
        unsafe {
            (::windows::core::Vtable::vtable(this).SetAnchorPoint)(
                ::windows::core::Vtable::as_raw(this),
                value,
            )
            .ok()
        }
    }
    pub fn BackfaceVisibility(&self) -> ::windows::core::Result<CompositionBackfaceVisibility> {
        let this = self;
        unsafe {
            let mut result__ = ::core::mem::MaybeUninit::zeroed();
            (::windows::core::Vtable::vtable(this).BackfaceVisibility)(
                ::windows::core::Vtable::as_raw(this),
                result__.as_mut_ptr(),
            )
            .from_abi::<CompositionBackfaceVisibility>(result__)
        }
    }
    pub fn SetBackfaceVisibility(
        &self,
        value: CompositionBackfaceVisibility,
    ) -> ::windows::core::Result<()> {
        let this = self;
        unsafe {
            (::windows::core::Vtable::vtable(this).SetBackfaceVisibility)(
                ::windows::core::Vtable::as_raw(this),
                value,
            )
            .ok()
        }
    }
    pub fn BorderMode(&self) -> ::windows::core::Result<CompositionBorderMode> {
        let this = self;
        unsafe {
            let mut result__ = ::core::mem::MaybeUninit::zeroed();
            (::windows::core::Vtable::vtable(this).BorderMode)(
                ::windows::core::Vtable::as_raw(this),
                result__.as_mut_ptr(),
            )
            .from_abi::<CompositionBorderMode>(result__)
        }
    }
    pub fn SetBorderMode(&self, value: CompositionBorderMode) -> ::windows::core::Result<()> {
        let this = self;
        unsafe {
            (::windows::core::Vtable::vtable(this).SetBorderMode)(
                ::windows::core::Vtable::as_raw(this),
                value,
            )
            .ok()
        }
    }
    pub fn CenterPoint(&self) -> ::windows::core::Result<::windows::Foundation::Numerics::Vector3> {
        let this = self;
        unsafe {
            let mut result__ = ::core::mem::MaybeUninit::zeroed();
            (::windows::core::Vtable::vtable(this).CenterPoint)(
                ::windows::core::Vtable::as_raw(this),
                result__.as_mut_ptr(),
            )
            .from_abi::<::windows::Foundation::Numerics::Vector3>(result__)
        }
    }
    pub fn SetCenterPoint(
        &self,
        value: ::windows::Foundation::Numerics::Vector3,
    ) -> ::windows::core::Result<()> {
        let this = self;
        unsafe {
            (::windows::core::Vtable::vtable(this).SetCenterPoint)(
                ::windows::core::Vtable::as_raw(this),
                value,
            )
            .ok()
        }
    }
    pub fn Clip(&self) -> ::windows::core::Result<CompositionClip> {
        let this = self;
        unsafe {
            let mut result__ = ::core::mem::MaybeUninit::zeroed();
            (::windows::core::Vtable::vtable(this).Clip)(
                ::windows::core::Vtable::as_raw(this),
                result__.as_mut_ptr(),
            )
            .from_abi::<CompositionClip>(result__)
        }
    }
    pub fn SetClip<'a, P0>(&self, value: P0) -> ::windows::core::Result<()>
    where
        P0: ::std::convert::Into<::windows::core::InParam<'a, CompositionClip>>,
    {
        let this = self;
        unsafe {
            (::windows::core::Vtable::vtable(this).SetClip)(
                ::windows::core::Vtable::as_raw(this),
                value.into().abi(),
            )
            .ok()
        }
    }
    pub fn CompositeMode(&self) -> ::windows::core::Result<CompositionCompositeMode> {
        let this = self;
        unsafe {
            let mut result__ = ::core::mem::MaybeUninit::zeroed();
            (::windows::core::Vtable::vtable(this).CompositeMode)(
                ::windows::core::Vtable::as_raw(this),
                result__.as_mut_ptr(),
            )
            .from_abi::<CompositionCompositeMode>(result__)
        }
    }
    pub fn SetCompositeMode(&self, value: CompositionCompositeMode) -> ::windows::core::Result<()> {
        let this = self;
        unsafe {
            (::windows::core::Vtable::vtable(this).SetCompositeMode)(
                ::windows::core::Vtable::as_raw(this),
                value,
            )
            .ok()
        }
    }
    pub fn IsVisible(&self) -> ::windows::core::Result<bool> {
        let this = self;
        unsafe {
            let mut result__ = ::core::mem::MaybeUninit::zeroed();
            (::windows::core::Vtable::vtable(this).IsVisible)(
                ::windows::core::Vtable::as_raw(this),
                result__.as_mut_ptr(),
            )
            .from_abi::<bool>(result__)
        }
    }
    pub fn SetIsVisible(&self, value: bool) -> ::windows::core::Result<()> {
        let this = self;
        unsafe {
            (::windows::core::Vtable::vtable(this).SetIsVisible)(
                ::windows::core::Vtable::as_raw(this),
                value,
            )
            .ok()
        }
    }
    pub fn Offset(&self) -> ::windows::core::Result<::windows::Foundation::Numerics::Vector3> {
        let this = self;
        unsafe {
            let mut result__ = ::core::mem::MaybeUninit::zeroed();
            (::windows::core::Vtable::vtable(this).Offset)(
                ::windows::core::Vtable::as_raw(this),
                result__.as_mut_ptr(),
            )
            .from_abi::<::windows::Foundation::Numerics::Vector3>(result__)
        }
    }
    pub fn SetOffset(
        &self,
        value: ::windows::Foundation::Numerics::Vector3,
    ) -> ::windows::core::Result<()> {
        let this = self;
        unsafe {
            (::windows::core::Vtable::vtable(this).SetOffset)(
                ::windows::core::Vtable::as_raw(this),
                value,
            )
            .ok()
        }
    }
    pub fn Opacity(&self) -> ::windows::core::Result<f32> {
        let this = self;
        unsafe {
            let mut result__ = ::core::mem::MaybeUninit::zeroed();
            (::windows::core::Vtable::vtable(this).Opacity)(
                ::windows::core::Vtable::as_raw(this),
                result__.as_mut_ptr(),
            )
            .from_abi::<f32>(result__)
        }
    }
    pub fn SetOpacity(&self, value: f32) -> ::windows::core::Result<()> {
        let this = self;
        unsafe {
            (::windows::core::Vtable::vtable(this).SetOpacity)(
                ::windows::core::Vtable::as_raw(this),
                value,
            )
            .ok()
        }
    }
    pub fn Orientation(
        &self,
    ) -> ::windows::core::Result<::windows::Foundation::Numerics::Quaternion> {
        let this = self;
        unsafe {
            let mut result__ = ::core::mem::MaybeUninit::zeroed();
            (::windows::core::Vtable::vtable(this).Orientation)(
                ::windows::core::Vtable::as_raw(this),
                result__.as_mut_ptr(),
            )
            .from_abi::<::windows::Foundation::Numerics::Quaternion>(result__)
        }
    }
    pub fn SetOrientation(
        &self,
        value: ::windows::Foundation::Numerics::Quaternion,
    ) -> ::windows::core::Result<()> {
        let this = self;
        unsafe {
            (::windows::core::Vtable::vtable(this).SetOrientation)(
                ::windows::core::Vtable::as_raw(this),
                value,
            )
            .ok()
        }
    }
    pub fn Parent(&self) -> ::windows::core::Result<ContainerVisual> {
        let this = self;
        unsafe {
            let mut result__ = ::core::mem::MaybeUninit::zeroed();
            (::windows::core::Vtable::vtable(this).Parent)(
                ::windows::core::Vtable::as_raw(this),
                result__.as_mut_ptr(),
            )
            .from_abi::<ContainerVisual>(result__)
        }
    }
    pub fn RotationAngle(&self) -> ::windows::core::Result<f32> {
        let this = self;
        unsafe {
            let mut result__ = ::core::mem::MaybeUninit::zeroed();
            (::windows::core::Vtable::vtable(this).RotationAngle)(
                ::windows::core::Vtable::as_raw(this),
                result__.as_mut_ptr(),
            )
            .from_abi::<f32>(result__)
        }
    }
    pub fn SetRotationAngle(&self, value: f32) -> ::windows::core::Result<()> {
        let this = self;
        unsafe {
            (::windows::core::Vtable::vtable(this).SetRotationAngle)(
                ::windows::core::Vtable::as_raw(this),
                value,
            )
            .ok()
        }
    }
    pub fn RotationAngleInDegrees(&self) -> ::windows::core::Result<f32> {
        let this = self;
        unsafe {
            let mut result__ = ::core::mem::MaybeUninit::zeroed();
            (::windows::core::Vtable::vtable(this).RotationAngleInDegrees)(
                ::windows::core::Vtable::as_raw(this),
                result__.as_mut_ptr(),
            )
            .from_abi::<f32>(result__)
        }
    }
    pub fn SetRotationAngleInDegrees(&self, value: f32) -> ::windows::core::Result<()> {
        let this = self;
        unsafe {
            (::windows::core::Vtable::vtable(this).SetRotationAngleInDegrees)(
                ::windows::core::Vtable::as_raw(this),
                value,
            )
            .ok()
        }
    }
    pub fn RotationAxis(
        &self,
    ) -> ::windows::core::Result<::windows::Foundation::Numerics::Vector3> {
        let this = self;
        unsafe {
            let mut result__ = ::core::mem::MaybeUninit::zeroed();
            (::windows::core::Vtable::vtable(this).RotationAxis)(
                ::windows::core::Vtable::as_raw(this),
                result__.as_mut_ptr(),
            )
            .from_abi::<::windows::Foundation::Numerics::Vector3>(result__)
        }
    }
    pub fn SetRotationAxis(
        &self,
        value: ::windows::Foundation::Numerics::Vector3,
    ) -> ::windows::core::Result<()> {
        let this = self;
        unsafe {
            (::windows::core::Vtable::vtable(this).SetRotationAxis)(
                ::windows::core::Vtable::as_raw(this),
                value,
            )
            .ok()
        }
    }
    pub fn Scale(&self) -> ::windows::core::Result<::windows::Foundation::Numerics::Vector3> {
        let this = self;
        unsafe {
            let mut result__ = ::core::mem::MaybeUninit::zeroed();
            (::windows::core::Vtable::vtable(this).Scale)(
                ::windows::core::Vtable::as_raw(this),
                result__.as_mut_ptr(),
            )
            .from_abi::<::windows::Foundation::Numerics::Vector3>(result__)
        }
    }
    pub fn SetScale(
        &self,
        value: ::windows::Foundation::Numerics::Vector3,
    ) -> ::windows::core::Result<()> {
        let this = self;
        unsafe {
            (::windows::core::Vtable::vtable(this).SetScale)(
                ::windows::core::Vtable::as_raw(this),
                value,
            )
            .ok()
        }
    }
    pub fn Size(&self) -> ::windows::core::Result<::windows::Foundation::Numerics::Vector2> {
        let this = self;
        unsafe {
            let mut result__ = ::core::mem::MaybeUninit::zeroed();
            (::windows::core::Vtable::vtable(this).Size)(
                ::windows::core::Vtable::as_raw(this),
                result__.as_mut_ptr(),
            )
            .from_abi::<::windows::Foundation::Numerics::Vector2>(result__)
        }
    }
    pub fn SetSize(
        &self,
        value: ::windows::Foundation::Numerics::Vector2,
    ) -> ::windows::core::Result<()> {
        let this = self;
        unsafe {
            (::windows::core::Vtable::vtable(this).SetSize)(
                ::windows::core::Vtable::as_raw(this),
                value,
            )
            .ok()
        }
    }
    pub fn TransformMatrix(
        &self,
    ) -> ::windows::core::Result<::windows::Foundation::Numerics::Matrix4x4> {
        let this = self;
        unsafe {
            let mut result__ = ::core::mem::MaybeUninit::zeroed();
            (::windows::core::Vtable::vtable(this).TransformMatrix)(
                ::windows::core::Vtable::as_raw(this),
                result__.as_mut_ptr(),
            )
            .from_abi::<::windows::Foundation::Numerics::Matrix4x4>(result__)
        }
    }
    pub fn SetTransformMatrix(
        &self,
        value: ::windows::Foundation::Numerics::Matrix4x4,
    ) -> ::windows::core::Result<()> {
        let this = self;
        unsafe {
            (::windows::core::Vtable::vtable(this).SetTransformMatrix)(
                ::windows::core::Vtable::as_raw(this),
                value,
            )
            .ok()
        }
    }
    pub fn ParentForTransform(&self) -> ::windows::core::Result<Visual> {
        let this = &::windows::core::Interface::cast::<IVisual2>(self)?;
        unsafe {
            let mut result__ = ::core::mem::MaybeUninit::zeroed();
            (::windows::core::Vtable::vtable(this).ParentForTransform)(
                ::windows::core::Vtable::as_raw(this),
                result__.as_mut_ptr(),
            )
            .from_abi::<Visual>(result__)
        }
    }
    pub fn SetParentForTransform<'a, P0>(&self, value: P0) -> ::windows::core::Result<()>
    where
        P0: ::std::convert::Into<::windows::core::InParam<'a, Visual>>,
    {
        let this = &::windows::core::Interface::cast::<IVisual2>(self)?;
        unsafe {
            (::windows::core::Vtable::vtable(this).SetParentForTransform)(
                ::windows::core::Vtable::as_raw(this),
                value.into().abi(),
            )
            .ok()
        }
    }
    pub fn RelativeOffsetAdjustment(
        &self,
    ) -> ::windows::core::Result<::windows::Foundation::Numerics::Vector3> {
        let this = &::windows::core::Interface::cast::<IVisual2>(self)?;
        unsafe {
            let mut result__ = ::core::mem::MaybeUninit::zeroed();
            (::windows::core::Vtable::vtable(this).RelativeOffsetAdjustment)(
                ::windows::core::Vtable::as_raw(this),
                result__.as_mut_ptr(),
            )
            .from_abi::<::windows::Foundation::Numerics::Vector3>(result__)
        }
    }
    pub fn SetRelativeOffsetAdjustment(
        &self,
        value: ::windows::Foundation::Numerics::Vector3,
    ) -> ::windows::core::Result<()> {
        let this = &::windows::core::Interface::cast::<IVisual2>(self)?;
        unsafe {
            (::windows::core::Vtable::vtable(this).SetRelativeOffsetAdjustment)(
                ::windows::core::Vtable::as_raw(this),
                value,
            )
            .ok()
        }
    }
    pub fn RelativeSizeAdjustment(
        &self,
    ) -> ::windows::core::Result<::windows::Foundation::Numerics::Vector2> {
        let this = &::windows::core::Interface::cast::<IVisual2>(self)?;
        unsafe {
            let mut result__ = ::core::mem::MaybeUninit::zeroed();
            (::windows::core::Vtable::vtable(this).RelativeSizeAdjustment)(
                ::windows::core::Vtable::as_raw(this),
                result__.as_mut_ptr(),
            )
            .from_abi::<::windows::Foundation::Numerics::Vector2>(result__)
        }
    }
    pub fn SetRelativeSizeAdjustment(
        &self,
        value: ::windows::Foundation::Numerics::Vector2,
    ) -> ::windows::core::Result<()> {
        let this = &::windows::core::Interface::cast::<IVisual2>(self)?;
        unsafe {
            (::windows::core::Vtable::vtable(this).SetRelativeSizeAdjustment)(
                ::windows::core::Vtable::as_raw(this),
                value,
            )
            .ok()
        }
    }
    pub fn IsHitTestVisible(&self) -> ::windows::core::Result<bool> {
        let this = &::windows::core::Interface::cast::<IVisual3>(self)?;
        unsafe {
            let mut result__ = ::core::mem::MaybeUninit::zeroed();
            (::windows::core::Vtable::vtable(this).IsHitTestVisible)(
                ::windows::core::Vtable::as_raw(this),
                result__.as_mut_ptr(),
            )
            .from_abi::<bool>(result__)
        }
    }
    pub fn SetIsHitTestVisible(&self, value: bool) -> ::windows::core::Result<()> {
        let this = &::windows::core::Interface::cast::<IVisual3>(self)?;
        unsafe {
            (::windows::core::Vtable::vtable(this).SetIsHitTestVisible)(
                ::windows::core::Vtable::as_raw(this),
                value,
            )
            .ok()
        }
    }
    pub fn IsPixelSnappingEnabled(&self) -> ::windows::core::Result<bool> {
        let this = &::windows::core::Interface::cast::<IVisual4>(self)?;
        unsafe {
            let mut result__ = ::core::mem::MaybeUninit::zeroed();
            (::windows::core::Vtable::vtable(this).IsPixelSnappingEnabled)(
                ::windows::core::Vtable::as_raw(this),
                result__.as_mut_ptr(),
            )
            .from_abi::<bool>(result__)
        }
    }
    pub fn SetIsPixelSnappingEnabled(&self, value: bool) -> ::windows::core::Result<()> {
        let this = &::windows::core::Interface::cast::<IVisual4>(self)?;
        unsafe {
            (::windows::core::Vtable::vtable(this).SetIsPixelSnappingEnabled)(
                ::windows::core::Vtable::as_raw(this),
                value,
            )
            .ok()
        }
    }
}
impl ::core::clone::Clone for Visual {
    fn clone(&self) -> Self {
        Self(self.0.clone())
    }
}
impl ::core::cmp::PartialEq for Visual {
    fn eq(&self, other: &Self) -> bool {
        self.0 == other.0
    }
}
impl ::core::cmp::Eq for Visual {}
impl ::core::fmt::Debug for Visual {
    fn fmt(&self, f: &mut ::core::fmt::Formatter<'_>) -> ::core::fmt::Result {
        f.debug_tuple("Visual").field(&self.0).finish()
    }
}
unsafe impl ::windows::core::RuntimeType for Visual {
    const SIGNATURE: ::windows::core::ConstBuffer = ::windows::core::ConstBuffer::from_slice(
        b"rc(Microsoft.UI.Composition.Visual;{c0eeab6c-c897-5ac6-a1c9-63abd5055b9b})",
    );
    type DefaultType = ::core::option::Option<Self>;
    fn from_default(from: &Self::DefaultType) -> ::windows::core::Result<Self> {
        from.as_ref().cloned().ok_or(::windows::core::Error::OK)
    }
}
unsafe impl ::windows::core::Vtable for Visual {
    type Vtable = IVisual_Vtbl;
}
unsafe impl ::windows::core::Interface for Visual {
    const IID: ::windows::core::GUID = <IVisual as ::windows::core::Interface>::IID;
}
impl ::windows::core::RuntimeName for Visual {
    const NAME: &'static str = "Microsoft.UI.Composition.Visual";
}
::windows::core::interface_hierarchy!(
    Visual,
    ::windows::core::IUnknown,
    ::windows::core::IInspectable
);
impl ::core::convert::TryFrom<Visual> for IAnimationObject {
    type Error = ::windows::core::Error;
    fn try_from(value: Visual) -> ::windows::core::Result<Self> {
        ::core::convert::TryFrom::try_from(&value)
    }
}
impl ::core::convert::TryFrom<&Visual> for IAnimationObject {
    type Error = ::windows::core::Error;
    fn try_from(value: &Visual) -> ::windows::core::Result<Self> {
        ::windows::core::Interface::cast(value)
    }
}
impl<'a> ::core::convert::TryFrom<&Visual> for ::windows::core::InParam<'a, IAnimationObject> {
    type Error = ::windows::core::Error;
    fn try_from(value: &Visual) -> ::windows::core::Result<Self> {
        let item = ::std::convert::TryInto::try_into(value)?;
        Ok(::windows::core::InParam::owned(item))
    }
}
impl ::core::convert::TryFrom<Visual> for ::windows::Foundation::IClosable {
    type Error = ::windows::core::Error;
    fn try_from(value: Visual) -> ::windows::core::Result<Self> {
        ::core::convert::TryFrom::try_from(&value)
    }
}
impl ::core::convert::TryFrom<&Visual> for ::windows::Foundation::IClosable {
    type Error = ::windows::core::Error;
    fn try_from(value: &Visual) -> ::windows::core::Result<Self> {
        ::windows::core::Interface::cast(value)
    }
}
impl<'a> ::core::convert::TryFrom<&Visual>
    for ::windows::core::InParam<'a, ::windows::Foundation::IClosable>
{
    type Error = ::windows::core::Error;
    fn try_from(value: &Visual) -> ::windows::core::Result<Self> {
        let item = ::std::convert::TryInto::try_into(value)?;
        Ok(::windows::core::InParam::owned(item))
    }
}
impl ::core::convert::From<Visual> for CompositionObject {
    fn from(value: Visual) -> Self {
        ::core::convert::From::from(&value)
    }
}
impl ::core::convert::From<&Visual> for CompositionObject {
    fn from(value: &Visual) -> Self {
        ::windows::core::Interface::cast(value).unwrap()
    }
}
impl<'a> ::core::convert::From<&Visual> for ::windows::core::InParam<'a, CompositionObject> {
    fn from(value: &Visual) -> Self {
        ::windows::core::InParam::owned(value.into())
    }
}
unsafe impl ::core::marker::Send for Visual {}
unsafe impl ::core::marker::Sync for Visual {}
#[doc = "*Required features: `\"UI_Composition\"`*"]
#[repr(transparent)]
pub struct VisualCollection(::windows::core::IUnknown);
impl VisualCollection {
    pub fn PopulatePropertyInfo(
        &self,
        propertyname: &::windows::core::HSTRING,
        propertyinfo: &AnimationPropertyInfo,
    ) -> ::windows::core::Result<()> {
        let this = &::windows::core::Interface::cast::<IAnimationObject>(self)?;
        unsafe {
            (::windows::core::Vtable::vtable(this).PopulatePropertyInfo)(
                ::windows::core::Vtable::as_raw(this),
                ::core::mem::transmute_copy(propertyname),
                ::core::mem::transmute_copy(propertyinfo),
            )
            .ok()
        }
    }
    pub fn Close(&self) -> ::windows::core::Result<()> {
        let this = &::windows::core::Interface::cast::<::windows::Foundation::IClosable>(self)?;
        unsafe {
            (::windows::core::Vtable::vtable(this).Close)(::windows::core::Vtable::as_raw(this))
                .ok()
        }
    }
    pub fn Compositor(&self) -> ::windows::core::Result<Compositor> {
        let this = &::windows::core::Interface::cast::<ICompositionObject>(self)?;
        unsafe {
            let mut result__ = ::core::mem::MaybeUninit::zeroed();
            (::windows::core::Vtable::vtable(this).Compositor)(
                ::windows::core::Vtable::as_raw(this),
                result__.as_mut_ptr(),
            )
            .from_abi::<Compositor>(result__)
        }
    }
    pub fn Properties(&self) -> ::windows::core::Result<CompositionPropertySet> {
        let this = &::windows::core::Interface::cast::<ICompositionObject>(self)?;
        unsafe {
            let mut result__ = ::core::mem::MaybeUninit::zeroed();
            (::windows::core::Vtable::vtable(this).Properties)(
                ::windows::core::Vtable::as_raw(this),
                result__.as_mut_ptr(),
            )
            .from_abi::<CompositionPropertySet>(result__)
        }
    }
    pub fn StartAnimation<'a, P0>(
        &self,
        propertyname: &::windows::core::HSTRING,
        animation: P0,
    ) -> ::windows::core::Result<()>
    where
        P0: ::std::convert::Into<::windows::core::InParam<'a, CompositionAnimation>>,
    {
        let this = &::windows::core::Interface::cast::<ICompositionObject>(self)?;
        unsafe {
            (::windows::core::Vtable::vtable(this).StartAnimation)(
                ::windows::core::Vtable::as_raw(this),
                ::core::mem::transmute_copy(propertyname),
                animation.into().abi(),
            )
            .ok()
        }
    }
    pub fn StopAnimation(
        &self,
        propertyname: &::windows::core::HSTRING,
    ) -> ::windows::core::Result<()> {
        let this = &::windows::core::Interface::cast::<ICompositionObject>(self)?;
        unsafe {
            (::windows::core::Vtable::vtable(this).StopAnimation)(
                ::windows::core::Vtable::as_raw(this),
                ::core::mem::transmute_copy(propertyname),
            )
            .ok()
        }
    }
    pub fn Comment(&self) -> ::windows::core::Result<::windows::core::HSTRING> {
        let this = &::windows::core::Interface::cast::<ICompositionObject2>(self)?;
        unsafe {
            let mut result__ = ::core::mem::MaybeUninit::zeroed();
            (::windows::core::Vtable::vtable(this).Comment)(
                ::windows::core::Vtable::as_raw(this),
                result__.as_mut_ptr(),
            )
            .from_abi::<::windows::core::HSTRING>(result__)
        }
    }
    pub fn SetComment(&self, value: &::windows::core::HSTRING) -> ::windows::core::Result<()> {
        let this = &::windows::core::Interface::cast::<ICompositionObject2>(self)?;
        unsafe {
            (::windows::core::Vtable::vtable(this).SetComment)(
                ::windows::core::Vtable::as_raw(this),
                ::core::mem::transmute_copy(value),
            )
            .ok()
        }
    }
    pub fn ImplicitAnimations(&self) -> ::windows::core::Result<ImplicitAnimationCollection> {
        let this = &::windows::core::Interface::cast::<ICompositionObject2>(self)?;
        unsafe {
            let mut result__ = ::core::mem::MaybeUninit::zeroed();
            (::windows::core::Vtable::vtable(this).ImplicitAnimations)(
                ::windows::core::Vtable::as_raw(this),
                result__.as_mut_ptr(),
            )
            .from_abi::<ImplicitAnimationCollection>(result__)
        }
    }
    pub fn SetImplicitAnimations(
        &self,
        value: &ImplicitAnimationCollection,
    ) -> ::windows::core::Result<()> {
        let this = &::windows::core::Interface::cast::<ICompositionObject2>(self)?;
        unsafe {
            (::windows::core::Vtable::vtable(this).SetImplicitAnimations)(
                ::windows::core::Vtable::as_raw(this),
                ::core::mem::transmute_copy(value),
            )
            .ok()
        }
    }
    pub fn StartAnimationGroup<'a, P0, E0>(&self, value: P0) -> ::windows::core::Result<()>
    where
        P0: ::std::convert::TryInto<
            ::windows::core::InParam<'a, ICompositionAnimationBase>,
            Error = E0,
        >,
        E0: ::std::convert::Into<::windows::core::Error>,
    {
        let this = &::windows::core::Interface::cast::<ICompositionObject2>(self)?;
        unsafe {
            (::windows::core::Vtable::vtable(this).StartAnimationGroup)(
                ::windows::core::Vtable::as_raw(this),
                value.try_into().map_err(|e| e.into())?.abi(),
            )
            .ok()
        }
    }
    pub fn StopAnimationGroup<'a, P0, E0>(&self, value: P0) -> ::windows::core::Result<()>
    where
        P0: ::std::convert::TryInto<
            ::windows::core::InParam<'a, ICompositionAnimationBase>,
            Error = E0,
        >,
        E0: ::std::convert::Into<::windows::core::Error>,
    {
        let this = &::windows::core::Interface::cast::<ICompositionObject2>(self)?;
        unsafe {
            (::windows::core::Vtable::vtable(this).StopAnimationGroup)(
                ::windows::core::Vtable::as_raw(this),
                value.try_into().map_err(|e| e.into())?.abi(),
            )
            .ok()
        }
    }
    #[doc = "*Required features: `\"UI_Dispatching\"`*"]
    #[cfg(feature = "UI_Dispatching")]
    pub fn DispatcherQueue(&self) -> ::windows::core::Result<super::Dispatching::DispatcherQueue> {
        let this = &::windows::core::Interface::cast::<ICompositionObject3>(self)?;
        unsafe {
            let mut result__ = ::core::mem::MaybeUninit::zeroed();
            (::windows::core::Vtable::vtable(this).DispatcherQueue)(
                ::windows::core::Vtable::as_raw(this),
                result__.as_mut_ptr(),
            )
            .from_abi::<super::Dispatching::DispatcherQueue>(result__)
        }
    }
    pub fn TryGetAnimationController(
        &self,
        propertyname: &::windows::core::HSTRING,
    ) -> ::windows::core::Result<AnimationController> {
        let this = &::windows::core::Interface::cast::<ICompositionObject4>(self)?;
        unsafe {
            let mut result__ = ::core::mem::MaybeUninit::zeroed();
            (::windows::core::Vtable::vtable(this).TryGetAnimationController)(
                ::windows::core::Vtable::as_raw(this),
                ::core::mem::transmute_copy(propertyname),
                result__.as_mut_ptr(),
            )
            .from_abi::<AnimationController>(result__)
        }
    }
    pub fn StartAnimationWithController<'a, P0>(
        &self,
        propertyname: &::windows::core::HSTRING,
        animation: P0,
        animationcontroller: &AnimationController,
    ) -> ::windows::core::Result<()>
    where
        P0: ::std::convert::Into<::windows::core::InParam<'a, CompositionAnimation>>,
    {
        let this = &::windows::core::Interface::cast::<ICompositionObject5>(self)?;
        unsafe {
            (::windows::core::Vtable::vtable(this).StartAnimationWithController)(
                ::windows::core::Vtable::as_raw(this),
                ::core::mem::transmute_copy(propertyname),
                animation.into().abi(),
                ::core::mem::transmute_copy(animationcontroller),
            )
            .ok()
        }
    }
    pub fn First(
        &self,
    ) -> ::windows::core::Result<::windows::Foundation::Collections::IIterator<Visual>> {
        let this = &::windows::core::Interface::cast::<
            ::windows::Foundation::Collections::IIterable<Visual>,
        >(self)?;
        unsafe {
            let mut result__ = ::core::mem::MaybeUninit::zeroed();
            (::windows::core::Vtable::vtable(this).First)(
                ::windows::core::Vtable::as_raw(this),
                result__.as_mut_ptr(),
            )
            .from_abi::<::windows::Foundation::Collections::IIterator<Visual>>(result__)
        }
    }
    pub fn Count(&self) -> ::windows::core::Result<i32> {
        let this = self;
        unsafe {
            let mut result__ = ::core::mem::MaybeUninit::zeroed();
            (::windows::core::Vtable::vtable(this).Count)(
                ::windows::core::Vtable::as_raw(this),
                result__.as_mut_ptr(),
            )
            .from_abi::<i32>(result__)
        }
    }
    pub fn InsertAbove<'a, P0, P1>(&self, newchild: P0, sibling: P1) -> ::windows::core::Result<()>
    where
        P0: ::std::convert::Into<::windows::core::InParam<'a, Visual>>,
        P1: ::std::convert::Into<::windows::core::InParam<'a, Visual>>,
    {
        let this = self;
        unsafe {
            (::windows::core::Vtable::vtable(this).InsertAbove)(
                ::windows::core::Vtable::as_raw(this),
                newchild.into().abi(),
                sibling.into().abi(),
            )
            .ok()
        }
    }
    pub fn InsertAtBottom<'a, P0>(&self, newchild: P0) -> ::windows::core::Result<()>
    where
        P0: ::std::convert::Into<::windows::core::InParam<'a, Visual>>,
    {
        let this = self;
        unsafe {
            (::windows::core::Vtable::vtable(this).InsertAtBottom)(
                ::windows::core::Vtable::as_raw(this),
                newchild.into().abi(),
            )
            .ok()
        }
    }
    pub fn InsertAtTop<'a, P0>(&self, newchild: P0) -> ::windows::core::Result<()>
    where
        P0: ::std::convert::Into<::windows::core::InParam<'a, Visual>>,
    {
        let this = self;
        unsafe {
            (::windows::core::Vtable::vtable(this).InsertAtTop)(
                ::windows::core::Vtable::as_raw(this),
                newchild.into().abi(),
            )
            .ok()
        }
    }
    pub fn InsertBelow<'a, P0, P1>(&self, newchild: P0, sibling: P1) -> ::windows::core::Result<()>
    where
        P0: ::std::convert::Into<::windows::core::InParam<'a, Visual>>,
        P1: ::std::convert::Into<::windows::core::InParam<'a, Visual>>,
    {
        let this = self;
        unsafe {
            (::windows::core::Vtable::vtable(this).InsertBelow)(
                ::windows::core::Vtable::as_raw(this),
                newchild.into().abi(),
                sibling.into().abi(),
            )
            .ok()
        }
    }
    pub fn Remove<'a, P0>(&self, child: P0) -> ::windows::core::Result<()>
    where
        P0: ::std::convert::Into<::windows::core::InParam<'a, Visual>>,
    {
        let this = self;
        unsafe {
            (::windows::core::Vtable::vtable(this).Remove)(
                ::windows::core::Vtable::as_raw(this),
                child.into().abi(),
            )
            .ok()
        }
    }
    pub fn RemoveAll(&self) -> ::windows::core::Result<()> {
        let this = self;
        unsafe {
            (::windows::core::Vtable::vtable(this).RemoveAll)(::windows::core::Vtable::as_raw(this))
                .ok()
        }
    }
}
impl ::core::clone::Clone for VisualCollection {
    fn clone(&self) -> Self {
        Self(self.0.clone())
    }
}
impl ::core::cmp::PartialEq for VisualCollection {
    fn eq(&self, other: &Self) -> bool {
        self.0 == other.0
    }
}
impl ::core::cmp::Eq for VisualCollection {}
impl ::core::fmt::Debug for VisualCollection {
    fn fmt(&self, f: &mut ::core::fmt::Formatter<'_>) -> ::core::fmt::Result {
        f.debug_tuple("VisualCollection").field(&self.0).finish()
    }
}
unsafe impl ::windows::core::RuntimeType for VisualCollection {
    const SIGNATURE: ::windows::core::ConstBuffer = ::windows::core::ConstBuffer::from_slice(
        b"rc(Microsoft.UI.Composition.VisualCollection;{d002896d-67d8-5f69-ab70-581fa3bf370f})",
    );
    type DefaultType = ::core::option::Option<Self>;
    fn from_default(from: &Self::DefaultType) -> ::windows::core::Result<Self> {
        from.as_ref().cloned().ok_or(::windows::core::Error::OK)
    }
}
unsafe impl ::windows::core::Vtable for VisualCollection {
    type Vtable = IVisualCollection_Vtbl;
}
unsafe impl ::windows::core::Interface for VisualCollection {
    const IID: ::windows::core::GUID = <IVisualCollection as ::windows::core::Interface>::IID;
}
impl ::windows::core::RuntimeName for VisualCollection {
    const NAME: &'static str = "Microsoft.UI.Composition.VisualCollection";
}
impl ::core::iter::IntoIterator for VisualCollection {
    type Item = Visual;
    type IntoIter = ::windows::Foundation::Collections::IIterator<Self::Item>;
    fn into_iter(self) -> Self::IntoIter {
        ::core::iter::IntoIterator::into_iter(&self)
    }
}
impl ::core::iter::IntoIterator for &VisualCollection {
    type Item = Visual;
    type IntoIter = ::windows::Foundation::Collections::IIterator<Self::Item>;
    fn into_iter(self) -> Self::IntoIter {
        self.First().unwrap()
    }
}
::windows::core::interface_hierarchy!(
    VisualCollection,
    ::windows::core::IUnknown,
    ::windows::core::IInspectable
);
impl ::core::convert::TryFrom<VisualCollection> for IAnimationObject {
    type Error = ::windows::core::Error;
    fn try_from(value: VisualCollection) -> ::windows::core::Result<Self> {
        ::core::convert::TryFrom::try_from(&value)
    }
}
impl ::core::convert::TryFrom<&VisualCollection> for IAnimationObject {
    type Error = ::windows::core::Error;
    fn try_from(value: &VisualCollection) -> ::windows::core::Result<Self> {
        ::windows::core::Interface::cast(value)
    }
}
impl<'a> ::core::convert::TryFrom<&VisualCollection>
    for ::windows::core::InParam<'a, IAnimationObject>
{
    type Error = ::windows::core::Error;
    fn try_from(value: &VisualCollection) -> ::windows::core::Result<Self> {
        let item = ::std::convert::TryInto::try_into(value)?;
        Ok(::windows::core::InParam::owned(item))
    }
}
impl ::core::convert::TryFrom<VisualCollection> for ::windows::Foundation::IClosable {
    type Error = ::windows::core::Error;
    fn try_from(value: VisualCollection) -> ::windows::core::Result<Self> {
        ::core::convert::TryFrom::try_from(&value)
    }
}
impl ::core::convert::TryFrom<&VisualCollection> for ::windows::Foundation::IClosable {
    type Error = ::windows::core::Error;
    fn try_from(value: &VisualCollection) -> ::windows::core::Result<Self> {
        ::windows::core::Interface::cast(value)
    }
}
impl<'a> ::core::convert::TryFrom<&VisualCollection>
    for ::windows::core::InParam<'a, ::windows::Foundation::IClosable>
{
    type Error = ::windows::core::Error;
    fn try_from(value: &VisualCollection) -> ::windows::core::Result<Self> {
        let item = ::std::convert::TryInto::try_into(value)?;
        Ok(::windows::core::InParam::owned(item))
    }
}
impl ::core::convert::TryFrom<VisualCollection>
    for ::windows::Foundation::Collections::IIterable<Visual>
{
    type Error = ::windows::core::Error;
    fn try_from(value: VisualCollection) -> ::windows::core::Result<Self> {
        ::core::convert::TryFrom::try_from(&value)
    }
}
impl ::core::convert::TryFrom<&VisualCollection>
    for ::windows::Foundation::Collections::IIterable<Visual>
{
    type Error = ::windows::core::Error;
    fn try_from(value: &VisualCollection) -> ::windows::core::Result<Self> {
        ::windows::core::Interface::cast(value)
    }
}
impl<'a> ::core::convert::TryFrom<&VisualCollection>
    for ::windows::core::InParam<'a, ::windows::Foundation::Collections::IIterable<Visual>>
{
    type Error = ::windows::core::Error;
    fn try_from(value: &VisualCollection) -> ::windows::core::Result<Self> {
        let item = ::std::convert::TryInto::try_into(value)?;
        Ok(::windows::core::InParam::owned(item))
    }
}
impl ::core::convert::From<VisualCollection> for CompositionObject {
    fn from(value: VisualCollection) -> Self {
        ::core::convert::From::from(&value)
    }
}
impl ::core::convert::From<&VisualCollection> for CompositionObject {
    fn from(value: &VisualCollection) -> Self {
        ::windows::core::Interface::cast(value).unwrap()
    }
}
impl<'a> ::core::convert::From<&VisualCollection>
    for ::windows::core::InParam<'a, CompositionObject>
{
    fn from(value: &VisualCollection) -> Self {
        ::windows::core::InParam::owned(value.into())
    }
}
unsafe impl ::core::marker::Send for VisualCollection {}
unsafe impl ::core::marker::Sync for VisualCollection {}
#[doc = "*Required features: `\"UI_Composition\"`*"]
#[repr(transparent)]
pub struct VisualUnorderedCollection(::windows::core::IUnknown);
impl VisualUnorderedCollection {
    pub fn PopulatePropertyInfo(
        &self,
        propertyname: &::windows::core::HSTRING,
        propertyinfo: &AnimationPropertyInfo,
    ) -> ::windows::core::Result<()> {
        let this = &::windows::core::Interface::cast::<IAnimationObject>(self)?;
        unsafe {
            (::windows::core::Vtable::vtable(this).PopulatePropertyInfo)(
                ::windows::core::Vtable::as_raw(this),
                ::core::mem::transmute_copy(propertyname),
                ::core::mem::transmute_copy(propertyinfo),
            )
            .ok()
        }
    }
    pub fn Close(&self) -> ::windows::core::Result<()> {
        let this = &::windows::core::Interface::cast::<::windows::Foundation::IClosable>(self)?;
        unsafe {
            (::windows::core::Vtable::vtable(this).Close)(::windows::core::Vtable::as_raw(this))
                .ok()
        }
    }
    pub fn Compositor(&self) -> ::windows::core::Result<Compositor> {
        let this = &::windows::core::Interface::cast::<ICompositionObject>(self)?;
        unsafe {
            let mut result__ = ::core::mem::MaybeUninit::zeroed();
            (::windows::core::Vtable::vtable(this).Compositor)(
                ::windows::core::Vtable::as_raw(this),
                result__.as_mut_ptr(),
            )
            .from_abi::<Compositor>(result__)
        }
    }
    pub fn Properties(&self) -> ::windows::core::Result<CompositionPropertySet> {
        let this = &::windows::core::Interface::cast::<ICompositionObject>(self)?;
        unsafe {
            let mut result__ = ::core::mem::MaybeUninit::zeroed();
            (::windows::core::Vtable::vtable(this).Properties)(
                ::windows::core::Vtable::as_raw(this),
                result__.as_mut_ptr(),
            )
            .from_abi::<CompositionPropertySet>(result__)
        }
    }
    pub fn StartAnimation<'a, P0>(
        &self,
        propertyname: &::windows::core::HSTRING,
        animation: P0,
    ) -> ::windows::core::Result<()>
    where
        P0: ::std::convert::Into<::windows::core::InParam<'a, CompositionAnimation>>,
    {
        let this = &::windows::core::Interface::cast::<ICompositionObject>(self)?;
        unsafe {
            (::windows::core::Vtable::vtable(this).StartAnimation)(
                ::windows::core::Vtable::as_raw(this),
                ::core::mem::transmute_copy(propertyname),
                animation.into().abi(),
            )
            .ok()
        }
    }
    pub fn StopAnimation(
        &self,
        propertyname: &::windows::core::HSTRING,
    ) -> ::windows::core::Result<()> {
        let this = &::windows::core::Interface::cast::<ICompositionObject>(self)?;
        unsafe {
            (::windows::core::Vtable::vtable(this).StopAnimation)(
                ::windows::core::Vtable::as_raw(this),
                ::core::mem::transmute_copy(propertyname),
            )
            .ok()
        }
    }
    pub fn Comment(&self) -> ::windows::core::Result<::windows::core::HSTRING> {
        let this = &::windows::core::Interface::cast::<ICompositionObject2>(self)?;
        unsafe {
            let mut result__ = ::core::mem::MaybeUninit::zeroed();
            (::windows::core::Vtable::vtable(this).Comment)(
                ::windows::core::Vtable::as_raw(this),
                result__.as_mut_ptr(),
            )
            .from_abi::<::windows::core::HSTRING>(result__)
        }
    }
    pub fn SetComment(&self, value: &::windows::core::HSTRING) -> ::windows::core::Result<()> {
        let this = &::windows::core::Interface::cast::<ICompositionObject2>(self)?;
        unsafe {
            (::windows::core::Vtable::vtable(this).SetComment)(
                ::windows::core::Vtable::as_raw(this),
                ::core::mem::transmute_copy(value),
            )
            .ok()
        }
    }
    pub fn ImplicitAnimations(&self) -> ::windows::core::Result<ImplicitAnimationCollection> {
        let this = &::windows::core::Interface::cast::<ICompositionObject2>(self)?;
        unsafe {
            let mut result__ = ::core::mem::MaybeUninit::zeroed();
            (::windows::core::Vtable::vtable(this).ImplicitAnimations)(
                ::windows::core::Vtable::as_raw(this),
                result__.as_mut_ptr(),
            )
            .from_abi::<ImplicitAnimationCollection>(result__)
        }
    }
    pub fn SetImplicitAnimations(
        &self,
        value: &ImplicitAnimationCollection,
    ) -> ::windows::core::Result<()> {
        let this = &::windows::core::Interface::cast::<ICompositionObject2>(self)?;
        unsafe {
            (::windows::core::Vtable::vtable(this).SetImplicitAnimations)(
                ::windows::core::Vtable::as_raw(this),
                ::core::mem::transmute_copy(value),
            )
            .ok()
        }
    }
    pub fn StartAnimationGroup<'a, P0, E0>(&self, value: P0) -> ::windows::core::Result<()>
    where
        P0: ::std::convert::TryInto<
            ::windows::core::InParam<'a, ICompositionAnimationBase>,
            Error = E0,
        >,
        E0: ::std::convert::Into<::windows::core::Error>,
    {
        let this = &::windows::core::Interface::cast::<ICompositionObject2>(self)?;
        unsafe {
            (::windows::core::Vtable::vtable(this).StartAnimationGroup)(
                ::windows::core::Vtable::as_raw(this),
                value.try_into().map_err(|e| e.into())?.abi(),
            )
            .ok()
        }
    }
    pub fn StopAnimationGroup<'a, P0, E0>(&self, value: P0) -> ::windows::core::Result<()>
    where
        P0: ::std::convert::TryInto<
            ::windows::core::InParam<'a, ICompositionAnimationBase>,
            Error = E0,
        >,
        E0: ::std::convert::Into<::windows::core::Error>,
    {
        let this = &::windows::core::Interface::cast::<ICompositionObject2>(self)?;
        unsafe {
            (::windows::core::Vtable::vtable(this).StopAnimationGroup)(
                ::windows::core::Vtable::as_raw(this),
                value.try_into().map_err(|e| e.into())?.abi(),
            )
            .ok()
        }
    }
    #[doc = "*Required features: `\"UI_Dispatching\"`*"]
    #[cfg(feature = "UI_Dispatching")]
    pub fn DispatcherQueue(&self) -> ::windows::core::Result<super::Dispatching::DispatcherQueue> {
        let this = &::windows::core::Interface::cast::<ICompositionObject3>(self)?;
        unsafe {
            let mut result__ = ::core::mem::MaybeUninit::zeroed();
            (::windows::core::Vtable::vtable(this).DispatcherQueue)(
                ::windows::core::Vtable::as_raw(this),
                result__.as_mut_ptr(),
            )
            .from_abi::<super::Dispatching::DispatcherQueue>(result__)
        }
    }
    pub fn TryGetAnimationController(
        &self,
        propertyname: &::windows::core::HSTRING,
    ) -> ::windows::core::Result<AnimationController> {
        let this = &::windows::core::Interface::cast::<ICompositionObject4>(self)?;
        unsafe {
            let mut result__ = ::core::mem::MaybeUninit::zeroed();
            (::windows::core::Vtable::vtable(this).TryGetAnimationController)(
                ::windows::core::Vtable::as_raw(this),
                ::core::mem::transmute_copy(propertyname),
                result__.as_mut_ptr(),
            )
            .from_abi::<AnimationController>(result__)
        }
    }
    pub fn StartAnimationWithController<'a, P0>(
        &self,
        propertyname: &::windows::core::HSTRING,
        animation: P0,
        animationcontroller: &AnimationController,
    ) -> ::windows::core::Result<()>
    where
        P0: ::std::convert::Into<::windows::core::InParam<'a, CompositionAnimation>>,
    {
        let this = &::windows::core::Interface::cast::<ICompositionObject5>(self)?;
        unsafe {
            (::windows::core::Vtable::vtable(this).StartAnimationWithController)(
                ::windows::core::Vtable::as_raw(this),
                ::core::mem::transmute_copy(propertyname),
                animation.into().abi(),
                ::core::mem::transmute_copy(animationcontroller),
            )
            .ok()
        }
    }
    pub fn First(
        &self,
    ) -> ::windows::core::Result<::windows::Foundation::Collections::IIterator<Visual>> {
        let this = &::windows::core::Interface::cast::<
            ::windows::Foundation::Collections::IIterable<Visual>,
        >(self)?;
        unsafe {
            let mut result__ = ::core::mem::MaybeUninit::zeroed();
            (::windows::core::Vtable::vtable(this).First)(
                ::windows::core::Vtable::as_raw(this),
                result__.as_mut_ptr(),
            )
            .from_abi::<::windows::Foundation::Collections::IIterator<Visual>>(result__)
        }
    }
    pub fn Count(&self) -> ::windows::core::Result<i32> {
        let this = self;
        unsafe {
            let mut result__ = ::core::mem::MaybeUninit::zeroed();
            (::windows::core::Vtable::vtable(this).Count)(
                ::windows::core::Vtable::as_raw(this),
                result__.as_mut_ptr(),
            )
            .from_abi::<i32>(result__)
        }
    }
    pub fn Add<'a, P0>(&self, newvisual: P0) -> ::windows::core::Result<()>
    where
        P0: ::std::convert::Into<::windows::core::InParam<'a, Visual>>,
    {
        let this = self;
        unsafe {
            (::windows::core::Vtable::vtable(this).Add)(
                ::windows::core::Vtable::as_raw(this),
                newvisual.into().abi(),
            )
            .ok()
        }
    }
    pub fn Remove<'a, P0>(&self, visual: P0) -> ::windows::core::Result<()>
    where
        P0: ::std::convert::Into<::windows::core::InParam<'a, Visual>>,
    {
        let this = self;
        unsafe {
            (::windows::core::Vtable::vtable(this).Remove)(
                ::windows::core::Vtable::as_raw(this),
                visual.into().abi(),
            )
            .ok()
        }
    }
    pub fn RemoveAll(&self) -> ::windows::core::Result<()> {
        let this = self;
        unsafe {
            (::windows::core::Vtable::vtable(this).RemoveAll)(::windows::core::Vtable::as_raw(this))
                .ok()
        }
    }
}
impl ::core::clone::Clone for VisualUnorderedCollection {
    fn clone(&self) -> Self {
        Self(self.0.clone())
    }
}
impl ::core::cmp::PartialEq for VisualUnorderedCollection {
    fn eq(&self, other: &Self) -> bool {
        self.0 == other.0
    }
}
impl ::core::cmp::Eq for VisualUnorderedCollection {}
impl ::core::fmt::Debug for VisualUnorderedCollection {
    fn fmt(&self, f: &mut ::core::fmt::Formatter<'_>) -> ::core::fmt::Result {
        f.debug_tuple("VisualUnorderedCollection").field(&self.0).finish()
    }
}
unsafe impl ::windows::core::RuntimeType for VisualUnorderedCollection {
    const SIGNATURE : ::windows::core::ConstBuffer = ::windows::core::ConstBuffer::from_slice ( b"rc(Microsoft.UI.Composition.VisualUnorderedCollection;{4a97216e-793e-54e3-96e8-f9db790119cd})" ) ;
    type DefaultType = ::core::option::Option<Self>;
    fn from_default(from: &Self::DefaultType) -> ::windows::core::Result<Self> {
        from.as_ref().cloned().ok_or(::windows::core::Error::OK)
    }
}
unsafe impl ::windows::core::Vtable for VisualUnorderedCollection {
    type Vtable = IVisualUnorderedCollection_Vtbl;
}
unsafe impl ::windows::core::Interface for VisualUnorderedCollection {
    const IID: ::windows::core::GUID =
        <IVisualUnorderedCollection as ::windows::core::Interface>::IID;
}
impl ::windows::core::RuntimeName for VisualUnorderedCollection {
    const NAME: &'static str = "Microsoft.UI.Composition.VisualUnorderedCollection";
}
impl ::core::iter::IntoIterator for VisualUnorderedCollection {
    type Item = Visual;
    type IntoIter = ::windows::Foundation::Collections::IIterator<Self::Item>;
    fn into_iter(self) -> Self::IntoIter {
        ::core::iter::IntoIterator::into_iter(&self)
    }
}
impl ::core::iter::IntoIterator for &VisualUnorderedCollection {
    type Item = Visual;
    type IntoIter = ::windows::Foundation::Collections::IIterator<Self::Item>;
    fn into_iter(self) -> Self::IntoIter {
        self.First().unwrap()
    }
}
::windows::core::interface_hierarchy!(
    VisualUnorderedCollection,
    ::windows::core::IUnknown,
    ::windows::core::IInspectable
);
impl ::core::convert::TryFrom<VisualUnorderedCollection> for IAnimationObject {
    type Error = ::windows::core::Error;
    fn try_from(value: VisualUnorderedCollection) -> ::windows::core::Result<Self> {
        ::core::convert::TryFrom::try_from(&value)
    }
}
impl ::core::convert::TryFrom<&VisualUnorderedCollection> for IAnimationObject {
    type Error = ::windows::core::Error;
    fn try_from(value: &VisualUnorderedCollection) -> ::windows::core::Result<Self> {
        ::windows::core::Interface::cast(value)
    }
}
impl<'a> ::core::convert::TryFrom<&VisualUnorderedCollection>
    for ::windows::core::InParam<'a, IAnimationObject>
{
    type Error = ::windows::core::Error;
    fn try_from(value: &VisualUnorderedCollection) -> ::windows::core::Result<Self> {
        let item = ::std::convert::TryInto::try_into(value)?;
        Ok(::windows::core::InParam::owned(item))
    }
}
impl ::core::convert::TryFrom<VisualUnorderedCollection> for ::windows::Foundation::IClosable {
    type Error = ::windows::core::Error;
    fn try_from(value: VisualUnorderedCollection) -> ::windows::core::Result<Self> {
        ::core::convert::TryFrom::try_from(&value)
    }
}
impl ::core::convert::TryFrom<&VisualUnorderedCollection> for ::windows::Foundation::IClosable {
    type Error = ::windows::core::Error;
    fn try_from(value: &VisualUnorderedCollection) -> ::windows::core::Result<Self> {
        ::windows::core::Interface::cast(value)
    }
}
impl<'a> ::core::convert::TryFrom<&VisualUnorderedCollection>
    for ::windows::core::InParam<'a, ::windows::Foundation::IClosable>
{
    type Error = ::windows::core::Error;
    fn try_from(value: &VisualUnorderedCollection) -> ::windows::core::Result<Self> {
        let item = ::std::convert::TryInto::try_into(value)?;
        Ok(::windows::core::InParam::owned(item))
    }
}
impl ::core::convert::TryFrom<VisualUnorderedCollection>
    for ::windows::Foundation::Collections::IIterable<Visual>
{
    type Error = ::windows::core::Error;
    fn try_from(value: VisualUnorderedCollection) -> ::windows::core::Result<Self> {
        ::core::convert::TryFrom::try_from(&value)
    }
}
impl ::core::convert::TryFrom<&VisualUnorderedCollection>
    for ::windows::Foundation::Collections::IIterable<Visual>
{
    type Error = ::windows::core::Error;
    fn try_from(value: &VisualUnorderedCollection) -> ::windows::core::Result<Self> {
        ::windows::core::Interface::cast(value)
    }
}
impl<'a> ::core::convert::TryFrom<&VisualUnorderedCollection>
    for ::windows::core::InParam<'a, ::windows::Foundation::Collections::IIterable<Visual>>
{
    type Error = ::windows::core::Error;
    fn try_from(value: &VisualUnorderedCollection) -> ::windows::core::Result<Self> {
        let item = ::std::convert::TryInto::try_into(value)?;
        Ok(::windows::core::InParam::owned(item))
    }
}
impl ::core::convert::From<VisualUnorderedCollection> for CompositionObject {
    fn from(value: VisualUnorderedCollection) -> Self {
        ::core::convert::From::from(&value)
    }
}
impl ::core::convert::From<&VisualUnorderedCollection> for CompositionObject {
    fn from(value: &VisualUnorderedCollection) -> Self {
        ::windows::core::Interface::cast(value).unwrap()
    }
}
impl<'a> ::core::convert::From<&VisualUnorderedCollection>
    for ::windows::core::InParam<'a, CompositionObject>
{
    fn from(value: &VisualUnorderedCollection) -> Self {
        ::windows::core::InParam::owned(value.into())
    }
}
unsafe impl ::core::marker::Send for VisualUnorderedCollection {}
unsafe impl ::core::marker::Sync for VisualUnorderedCollection {}
#[doc = "*Required features: `\"UI_Composition\"`*"]
#[repr(transparent)]
#[derive(::core::cmp::PartialEq, ::core::cmp::Eq)]
pub struct AnimationControllerProgressBehavior(pub i32);
impl AnimationControllerProgressBehavior {
    pub const Default: Self = Self(0i32);
    pub const IncludesDelayTime: Self = Self(1i32);
}
impl ::core::marker::Copy for AnimationControllerProgressBehavior {}
impl ::core::clone::Clone for AnimationControllerProgressBehavior {
    fn clone(&self) -> Self {
        *self
    }
}
impl ::core::default::Default for AnimationControllerProgressBehavior {
    fn default() -> Self {
        Self(0)
    }
}
unsafe impl ::windows::core::Abi for AnimationControllerProgressBehavior {
    type Abi = Self;
}
impl ::core::fmt::Debug for AnimationControllerProgressBehavior {
    fn fmt(&self, f: &mut ::core::fmt::Formatter<'_>) -> ::core::fmt::Result {
        f.debug_tuple("AnimationControllerProgressBehavior").field(&self.0).finish()
    }
}
unsafe impl ::windows::core::RuntimeType for AnimationControllerProgressBehavior {
    const SIGNATURE: ::windows::core::ConstBuffer = ::windows::core::ConstBuffer::from_slice(
        b"enum(Microsoft.UI.Composition.AnimationControllerProgressBehavior;i4)",
    );
    type DefaultType = Self;
    fn from_default(from: &Self::DefaultType) -> ::windows::core::Result<Self> {
        Ok(*from)
    }
}
#[doc = "*Required features: `\"UI_Composition\"`*"]
#[repr(transparent)]
#[derive(::core::cmp::PartialEq, ::core::cmp::Eq)]
pub struct AnimationDelayBehavior(pub i32);
impl AnimationDelayBehavior {
    pub const SetInitialValueAfterDelay: Self = Self(0i32);
    pub const SetInitialValueBeforeDelay: Self = Self(1i32);
}
impl ::core::marker::Copy for AnimationDelayBehavior {}
impl ::core::clone::Clone for AnimationDelayBehavior {
    fn clone(&self) -> Self {
        *self
    }
}
impl ::core::default::Default for AnimationDelayBehavior {
    fn default() -> Self {
        Self(0)
    }
}
unsafe impl ::windows::core::Abi for AnimationDelayBehavior {
    type Abi = Self;
}
impl ::core::fmt::Debug for AnimationDelayBehavior {
    fn fmt(&self, f: &mut ::core::fmt::Formatter<'_>) -> ::core::fmt::Result {
        f.debug_tuple("AnimationDelayBehavior").field(&self.0).finish()
    }
}
unsafe impl ::windows::core::RuntimeType for AnimationDelayBehavior {
    const SIGNATURE: ::windows::core::ConstBuffer = ::windows::core::ConstBuffer::from_slice(
        b"enum(Microsoft.UI.Composition.AnimationDelayBehavior;i4)",
    );
    type DefaultType = Self;
    fn from_default(from: &Self::DefaultType) -> ::windows::core::Result<Self> {
        Ok(*from)
    }
}
#[doc = "*Required features: `\"UI_Composition\"`*"]
#[repr(transparent)]
#[derive(::core::cmp::PartialEq, ::core::cmp::Eq)]
pub struct AnimationDirection(pub i32);
impl AnimationDirection {
    pub const Normal: Self = Self(0i32);
    pub const Reverse: Self = Self(1i32);
    pub const Alternate: Self = Self(2i32);
    pub const AlternateReverse: Self = Self(3i32);
}
impl ::core::marker::Copy for AnimationDirection {}
impl ::core::clone::Clone for AnimationDirection {
    fn clone(&self) -> Self {
        *self
    }
}
impl ::core::default::Default for AnimationDirection {
    fn default() -> Self {
        Self(0)
    }
}
unsafe impl ::windows::core::Abi for AnimationDirection {
    type Abi = Self;
}
impl ::core::fmt::Debug for AnimationDirection {
    fn fmt(&self, f: &mut ::core::fmt::Formatter<'_>) -> ::core::fmt::Result {
        f.debug_tuple("AnimationDirection").field(&self.0).finish()
    }
}
unsafe impl ::windows::core::RuntimeType for AnimationDirection {
    const SIGNATURE: ::windows::core::ConstBuffer = ::windows::core::ConstBuffer::from_slice(
        b"enum(Microsoft.UI.Composition.AnimationDirection;i4)",
    );
    type DefaultType = Self;
    fn from_default(from: &Self::DefaultType) -> ::windows::core::Result<Self> {
        Ok(*from)
    }
}
#[doc = "*Required features: `\"UI_Composition\"`*"]
#[repr(transparent)]
#[derive(::core::cmp::PartialEq, ::core::cmp::Eq)]
pub struct AnimationIterationBehavior(pub i32);
impl AnimationIterationBehavior {
    pub const Count: Self = Self(0i32);
    pub const Forever: Self = Self(1i32);
}
impl ::core::marker::Copy for AnimationIterationBehavior {}
impl ::core::clone::Clone for AnimationIterationBehavior {
    fn clone(&self) -> Self {
        *self
    }
}
impl ::core::default::Default for AnimationIterationBehavior {
    fn default() -> Self {
        Self(0)
    }
}
unsafe impl ::windows::core::Abi for AnimationIterationBehavior {
    type Abi = Self;
}
impl ::core::fmt::Debug for AnimationIterationBehavior {
    fn fmt(&self, f: &mut ::core::fmt::Formatter<'_>) -> ::core::fmt::Result {
        f.debug_tuple("AnimationIterationBehavior").field(&self.0).finish()
    }
}
unsafe impl ::windows::core::RuntimeType for AnimationIterationBehavior {
    const SIGNATURE: ::windows::core::ConstBuffer = ::windows::core::ConstBuffer::from_slice(
        b"enum(Microsoft.UI.Composition.AnimationIterationBehavior;i4)",
    );
    type DefaultType = Self;
    fn from_default(from: &Self::DefaultType) -> ::windows::core::Result<Self> {
        Ok(*from)
    }
}
#[doc = "*Required features: `\"UI_Composition\"`*"]
#[repr(transparent)]
#[derive(::core::cmp::PartialEq, ::core::cmp::Eq)]
pub struct AnimationPropertyAccessMode(pub i32);
impl AnimationPropertyAccessMode {
    pub const None: Self = Self(0i32);
    pub const ReadOnly: Self = Self(1i32);
    pub const WriteOnly: Self = Self(2i32);
    pub const ReadWrite: Self = Self(3i32);
}
impl ::core::marker::Copy for AnimationPropertyAccessMode {}
impl ::core::clone::Clone for AnimationPropertyAccessMode {
    fn clone(&self) -> Self {
        *self
    }
}
impl ::core::default::Default for AnimationPropertyAccessMode {
    fn default() -> Self {
        Self(0)
    }
}
unsafe impl ::windows::core::Abi for AnimationPropertyAccessMode {
    type Abi = Self;
}
impl ::core::fmt::Debug for AnimationPropertyAccessMode {
    fn fmt(&self, f: &mut ::core::fmt::Formatter<'_>) -> ::core::fmt::Result {
        f.debug_tuple("AnimationPropertyAccessMode").field(&self.0).finish()
    }
}
unsafe impl ::windows::core::RuntimeType for AnimationPropertyAccessMode {
    const SIGNATURE: ::windows::core::ConstBuffer = ::windows::core::ConstBuffer::from_slice(
        b"enum(Microsoft.UI.Composition.AnimationPropertyAccessMode;i4)",
    );
    type DefaultType = Self;
    fn from_default(from: &Self::DefaultType) -> ::windows::core::Result<Self> {
        Ok(*from)
    }
}
#[doc = "*Required features: `\"UI_Composition\"`*"]
#[repr(transparent)]
#[derive(::core::cmp::PartialEq, ::core::cmp::Eq)]
pub struct AnimationStopBehavior(pub i32);
impl AnimationStopBehavior {
    pub const LeaveCurrentValue: Self = Self(0i32);
    pub const SetToInitialValue: Self = Self(1i32);
    pub const SetToFinalValue: Self = Self(2i32);
}
impl ::core::marker::Copy for AnimationStopBehavior {}
impl ::core::clone::Clone for AnimationStopBehavior {
    fn clone(&self) -> Self {
        *self
    }
}
impl ::core::default::Default for AnimationStopBehavior {
    fn default() -> Self {
        Self(0)
    }
}
unsafe impl ::windows::core::Abi for AnimationStopBehavior {
    type Abi = Self;
}
impl ::core::fmt::Debug for AnimationStopBehavior {
    fn fmt(&self, f: &mut ::core::fmt::Formatter<'_>) -> ::core::fmt::Result {
        f.debug_tuple("AnimationStopBehavior").field(&self.0).finish()
    }
}
unsafe impl ::windows::core::RuntimeType for AnimationStopBehavior {
    const SIGNATURE: ::windows::core::ConstBuffer = ::windows::core::ConstBuffer::from_slice(
        b"enum(Microsoft.UI.Composition.AnimationStopBehavior;i4)",
    );
    type DefaultType = Self;
    fn from_default(from: &Self::DefaultType) -> ::windows::core::Result<Self> {
        Ok(*from)
    }
}
#[doc = "*Required features: `\"UI_Composition\"`*"]
#[repr(transparent)]
#[derive(::core::cmp::PartialEq, ::core::cmp::Eq)]
pub struct CompositionBackfaceVisibility(pub i32);
impl CompositionBackfaceVisibility {
    pub const Inherit: Self = Self(0i32);
    pub const Visible: Self = Self(1i32);
    pub const Hidden: Self = Self(2i32);
}
impl ::core::marker::Copy for CompositionBackfaceVisibility {}
impl ::core::clone::Clone for CompositionBackfaceVisibility {
    fn clone(&self) -> Self {
        *self
    }
}
impl ::core::default::Default for CompositionBackfaceVisibility {
    fn default() -> Self {
        Self(0)
    }
}
unsafe impl ::windows::core::Abi for CompositionBackfaceVisibility {
    type Abi = Self;
}
impl ::core::fmt::Debug for CompositionBackfaceVisibility {
    fn fmt(&self, f: &mut ::core::fmt::Formatter<'_>) -> ::core::fmt::Result {
        f.debug_tuple("CompositionBackfaceVisibility").field(&self.0).finish()
    }
}
unsafe impl ::windows::core::RuntimeType for CompositionBackfaceVisibility {
    const SIGNATURE: ::windows::core::ConstBuffer = ::windows::core::ConstBuffer::from_slice(
        b"enum(Microsoft.UI.Composition.CompositionBackfaceVisibility;i4)",
    );
    type DefaultType = Self;
    fn from_default(from: &Self::DefaultType) -> ::windows::core::Result<Self> {
        Ok(*from)
    }
}
#[doc = "*Required features: `\"UI_Composition\"`*"]
#[repr(transparent)]
#[derive(::core::cmp::PartialEq, ::core::cmp::Eq)]
pub struct CompositionBatchTypes(pub u32);
impl CompositionBatchTypes {
    pub const None: Self = Self(0u32);
    pub const Animation: Self = Self(1u32);
    pub const Effect: Self = Self(2u32);
    pub const InfiniteAnimation: Self = Self(4u32);
    pub const AllAnimations: Self = Self(5u32);
}
impl ::core::marker::Copy for CompositionBatchTypes {}
impl ::core::clone::Clone for CompositionBatchTypes {
    fn clone(&self) -> Self {
        *self
    }
}
impl ::core::default::Default for CompositionBatchTypes {
    fn default() -> Self {
        Self(0)
    }
}
unsafe impl ::windows::core::Abi for CompositionBatchTypes {
    type Abi = Self;
}
impl ::core::fmt::Debug for CompositionBatchTypes {
    fn fmt(&self, f: &mut ::core::fmt::Formatter<'_>) -> ::core::fmt::Result {
        f.debug_tuple("CompositionBatchTypes").field(&self.0).finish()
    }
}
impl ::core::ops::BitOr for CompositionBatchTypes {
    type Output = Self;
    fn bitor(self, other: Self) -> Self {
        Self(self.0 | other.0)
    }
}
impl ::core::ops::BitAnd for CompositionBatchTypes {
    type Output = Self;
    fn bitand(self, other: Self) -> Self {
        Self(self.0 & other.0)
    }
}
impl ::core::ops::BitOrAssign for CompositionBatchTypes {
    fn bitor_assign(&mut self, other: Self) {
        self.0.bitor_assign(other.0)
    }
}
impl ::core::ops::BitAndAssign for CompositionBatchTypes {
    fn bitand_assign(&mut self, other: Self) {
        self.0.bitand_assign(other.0)
    }
}
impl ::core::ops::Not for CompositionBatchTypes {
    type Output = Self;
    fn not(self) -> Self {
        Self(self.0.not())
    }
}
unsafe impl ::windows::core::RuntimeType for CompositionBatchTypes {
    const SIGNATURE: ::windows::core::ConstBuffer = ::windows::core::ConstBuffer::from_slice(
        b"enum(Microsoft.UI.Composition.CompositionBatchTypes;u4)",
    );
    type DefaultType = Self;
    fn from_default(from: &Self::DefaultType) -> ::windows::core::Result<Self> {
        Ok(*from)
    }
}
#[doc = "*Required features: `\"UI_Composition\"`*"]
#[repr(transparent)]
#[derive(::core::cmp::PartialEq, ::core::cmp::Eq)]
pub struct CompositionBitmapInterpolationMode(pub i32);
impl CompositionBitmapInterpolationMode {
    pub const NearestNeighbor: Self = Self(0i32);
    pub const Linear: Self = Self(1i32);
    pub const MagLinearMinLinearMipLinear: Self = Self(2i32);
    pub const MagLinearMinLinearMipNearest: Self = Self(3i32);
    pub const MagLinearMinNearestMipLinear: Self = Self(4i32);
    pub const MagLinearMinNearestMipNearest: Self = Self(5i32);
    pub const MagNearestMinLinearMipLinear: Self = Self(6i32);
    pub const MagNearestMinLinearMipNearest: Self = Self(7i32);
    pub const MagNearestMinNearestMipLinear: Self = Self(8i32);
    pub const MagNearestMinNearestMipNearest: Self = Self(9i32);
}
impl ::core::marker::Copy for CompositionBitmapInterpolationMode {}
impl ::core::clone::Clone for CompositionBitmapInterpolationMode {
    fn clone(&self) -> Self {
        *self
    }
}
impl ::core::default::Default for CompositionBitmapInterpolationMode {
    fn default() -> Self {
        Self(0)
    }
}
unsafe impl ::windows::core::Abi for CompositionBitmapInterpolationMode {
    type Abi = Self;
}
impl ::core::fmt::Debug for CompositionBitmapInterpolationMode {
    fn fmt(&self, f: &mut ::core::fmt::Formatter<'_>) -> ::core::fmt::Result {
        f.debug_tuple("CompositionBitmapInterpolationMode").field(&self.0).finish()
    }
}
unsafe impl ::windows::core::RuntimeType for CompositionBitmapInterpolationMode {
    const SIGNATURE: ::windows::core::ConstBuffer = ::windows::core::ConstBuffer::from_slice(
        b"enum(Microsoft.UI.Composition.CompositionBitmapInterpolationMode;i4)",
    );
    type DefaultType = Self;
    fn from_default(from: &Self::DefaultType) -> ::windows::core::Result<Self> {
        Ok(*from)
    }
}
#[doc = "*Required features: `\"UI_Composition\"`*"]
#[repr(transparent)]
#[derive(::core::cmp::PartialEq, ::core::cmp::Eq)]
pub struct CompositionBorderMode(pub i32);
impl CompositionBorderMode {
    pub const Inherit: Self = Self(0i32);
    pub const Soft: Self = Self(1i32);
    pub const Hard: Self = Self(2i32);
}
impl ::core::marker::Copy for CompositionBorderMode {}
impl ::core::clone::Clone for CompositionBorderMode {
    fn clone(&self) -> Self {
        *self
    }
}
impl ::core::default::Default for CompositionBorderMode {
    fn default() -> Self {
        Self(0)
    }
}
unsafe impl ::windows::core::Abi for CompositionBorderMode {
    type Abi = Self;
}
impl ::core::fmt::Debug for CompositionBorderMode {
    fn fmt(&self, f: &mut ::core::fmt::Formatter<'_>) -> ::core::fmt::Result {
        f.debug_tuple("CompositionBorderMode").field(&self.0).finish()
    }
}
unsafe impl ::windows::core::RuntimeType for CompositionBorderMode {
    const SIGNATURE: ::windows::core::ConstBuffer = ::windows::core::ConstBuffer::from_slice(
        b"enum(Microsoft.UI.Composition.CompositionBorderMode;i4)",
    );
    type DefaultType = Self;
    fn from_default(from: &Self::DefaultType) -> ::windows::core::Result<Self> {
        Ok(*from)
    }
}
#[doc = "*Required features: `\"UI_Composition\"`*"]
#[repr(transparent)]
#[derive(::core::cmp::PartialEq, ::core::cmp::Eq)]
pub struct CompositionColorSpace(pub i32);
impl CompositionColorSpace {
    pub const Auto: Self = Self(0i32);
    pub const Hsl: Self = Self(1i32);
    pub const Rgb: Self = Self(2i32);
    pub const HslLinear: Self = Self(3i32);
    pub const RgbLinear: Self = Self(4i32);
}
impl ::core::marker::Copy for CompositionColorSpace {}
impl ::core::clone::Clone for CompositionColorSpace {
    fn clone(&self) -> Self {
        *self
    }
}
impl ::core::default::Default for CompositionColorSpace {
    fn default() -> Self {
        Self(0)
    }
}
unsafe impl ::windows::core::Abi for CompositionColorSpace {
    type Abi = Self;
}
impl ::core::fmt::Debug for CompositionColorSpace {
    fn fmt(&self, f: &mut ::core::fmt::Formatter<'_>) -> ::core::fmt::Result {
        f.debug_tuple("CompositionColorSpace").field(&self.0).finish()
    }
}
unsafe impl ::windows::core::RuntimeType for CompositionColorSpace {
    const SIGNATURE: ::windows::core::ConstBuffer = ::windows::core::ConstBuffer::from_slice(
        b"enum(Microsoft.UI.Composition.CompositionColorSpace;i4)",
    );
    type DefaultType = Self;
    fn from_default(from: &Self::DefaultType) -> ::windows::core::Result<Self> {
        Ok(*from)
    }
}
#[doc = "*Required features: `\"UI_Composition\"`*"]
#[repr(transparent)]
#[derive(::core::cmp::PartialEq, ::core::cmp::Eq)]
pub struct CompositionCompositeMode(pub i32);
impl CompositionCompositeMode {
    pub const Inherit: Self = Self(0i32);
    pub const SourceOver: Self = Self(1i32);
    pub const DestinationInvert: Self = Self(2i32);
    pub const MinBlend: Self = Self(3i32);
}
impl ::core::marker::Copy for CompositionCompositeMode {}
impl ::core::clone::Clone for CompositionCompositeMode {
    fn clone(&self) -> Self {
        *self
    }
}
impl ::core::default::Default for CompositionCompositeMode {
    fn default() -> Self {
        Self(0)
    }
}
unsafe impl ::windows::core::Abi for CompositionCompositeMode {
    type Abi = Self;
}
impl ::core::fmt::Debug for CompositionCompositeMode {
    fn fmt(&self, f: &mut ::core::fmt::Formatter<'_>) -> ::core::fmt::Result {
        f.debug_tuple("CompositionCompositeMode").field(&self.0).finish()
    }
}
unsafe impl ::windows::core::RuntimeType for CompositionCompositeMode {
    const SIGNATURE: ::windows::core::ConstBuffer = ::windows::core::ConstBuffer::from_slice(
        b"enum(Microsoft.UI.Composition.CompositionCompositeMode;i4)",
    );
    type DefaultType = Self;
    fn from_default(from: &Self::DefaultType) -> ::windows::core::Result<Self> {
        Ok(*from)
    }
}
#[doc = "*Required features: `\"UI_Composition\"`*"]
#[repr(transparent)]
#[derive(::core::cmp::PartialEq, ::core::cmp::Eq)]
pub struct CompositionDropShadowSourcePolicy(pub i32);
impl CompositionDropShadowSourcePolicy {
    pub const Default: Self = Self(0i32);
    pub const InheritFromVisualContent: Self = Self(1i32);
}
impl ::core::marker::Copy for CompositionDropShadowSourcePolicy {}
impl ::core::clone::Clone for CompositionDropShadowSourcePolicy {
    fn clone(&self) -> Self {
        *self
    }
}
impl ::core::default::Default for CompositionDropShadowSourcePolicy {
    fn default() -> Self {
        Self(0)
    }
}
unsafe impl ::windows::core::Abi for CompositionDropShadowSourcePolicy {
    type Abi = Self;
}
impl ::core::fmt::Debug for CompositionDropShadowSourcePolicy {
    fn fmt(&self, f: &mut ::core::fmt::Formatter<'_>) -> ::core::fmt::Result {
        f.debug_tuple("CompositionDropShadowSourcePolicy").field(&self.0).finish()
    }
}
unsafe impl ::windows::core::RuntimeType for CompositionDropShadowSourcePolicy {
    const SIGNATURE: ::windows::core::ConstBuffer = ::windows::core::ConstBuffer::from_slice(
        b"enum(Microsoft.UI.Composition.CompositionDropShadowSourcePolicy;i4)",
    );
    type DefaultType = Self;
    fn from_default(from: &Self::DefaultType) -> ::windows::core::Result<Self> {
        Ok(*from)
    }
}
#[doc = "*Required features: `\"UI_Composition\"`*"]
#[repr(transparent)]
#[derive(::core::cmp::PartialEq, ::core::cmp::Eq)]
pub struct CompositionEasingFunctionMode(pub i32);
impl CompositionEasingFunctionMode {
    pub const In: Self = Self(0i32);
    pub const Out: Self = Self(1i32);
    pub const InOut: Self = Self(2i32);
}
impl ::core::marker::Copy for CompositionEasingFunctionMode {}
impl ::core::clone::Clone for CompositionEasingFunctionMode {
    fn clone(&self) -> Self {
        *self
    }
}
impl ::core::default::Default for CompositionEasingFunctionMode {
    fn default() -> Self {
        Self(0)
    }
}
unsafe impl ::windows::core::Abi for CompositionEasingFunctionMode {
    type Abi = Self;
}
impl ::core::fmt::Debug for CompositionEasingFunctionMode {
    fn fmt(&self, f: &mut ::core::fmt::Formatter<'_>) -> ::core::fmt::Result {
        f.debug_tuple("CompositionEasingFunctionMode").field(&self.0).finish()
    }
}
unsafe impl ::windows::core::RuntimeType for CompositionEasingFunctionMode {
    const SIGNATURE: ::windows::core::ConstBuffer = ::windows::core::ConstBuffer::from_slice(
        b"enum(Microsoft.UI.Composition.CompositionEasingFunctionMode;i4)",
    );
    type DefaultType = Self;
    fn from_default(from: &Self::DefaultType) -> ::windows::core::Result<Self> {
        Ok(*from)
    }
}
#[doc = "*Required features: `\"UI_Composition\"`*"]
#[repr(transparent)]
#[derive(::core::cmp::PartialEq, ::core::cmp::Eq)]
pub struct CompositionEffectFactoryLoadStatus(pub i32);
impl CompositionEffectFactoryLoadStatus {
    pub const Success: Self = Self(0i32);
    pub const EffectTooComplex: Self = Self(1i32);
    pub const Pending: Self = Self(2i32);
    pub const Other: Self = Self(-1i32);
}
impl ::core::marker::Copy for CompositionEffectFactoryLoadStatus {}
impl ::core::clone::Clone for CompositionEffectFactoryLoadStatus {
    fn clone(&self) -> Self {
        *self
    }
}
impl ::core::default::Default for CompositionEffectFactoryLoadStatus {
    fn default() -> Self {
        Self(0)
    }
}
unsafe impl ::windows::core::Abi for CompositionEffectFactoryLoadStatus {
    type Abi = Self;
}
impl ::core::fmt::Debug for CompositionEffectFactoryLoadStatus {
    fn fmt(&self, f: &mut ::core::fmt::Formatter<'_>) -> ::core::fmt::Result {
        f.debug_tuple("CompositionEffectFactoryLoadStatus").field(&self.0).finish()
    }
}
unsafe impl ::windows::core::RuntimeType for CompositionEffectFactoryLoadStatus {
    const SIGNATURE: ::windows::core::ConstBuffer = ::windows::core::ConstBuffer::from_slice(
        b"enum(Microsoft.UI.Composition.CompositionEffectFactoryLoadStatus;i4)",
    );
    type DefaultType = Self;
    fn from_default(from: &Self::DefaultType) -> ::windows::core::Result<Self> {
        Ok(*from)
    }
}
#[doc = "*Required features: `\"UI_Composition\"`*"]
#[repr(transparent)]
#[derive(::core::cmp::PartialEq, ::core::cmp::Eq)]
pub struct CompositionGetValueStatus(pub i32);
impl CompositionGetValueStatus {
    pub const Succeeded: Self = Self(0i32);
    pub const TypeMismatch: Self = Self(1i32);
    pub const NotFound: Self = Self(2i32);
}
impl ::core::marker::Copy for CompositionGetValueStatus {}
impl ::core::clone::Clone for CompositionGetValueStatus {
    fn clone(&self) -> Self {
        *self
    }
}
impl ::core::default::Default for CompositionGetValueStatus {
    fn default() -> Self {
        Self(0)
    }
}
unsafe impl ::windows::core::Abi for CompositionGetValueStatus {
    type Abi = Self;
}
impl ::core::fmt::Debug for CompositionGetValueStatus {
    fn fmt(&self, f: &mut ::core::fmt::Formatter<'_>) -> ::core::fmt::Result {
        f.debug_tuple("CompositionGetValueStatus").field(&self.0).finish()
    }
}
unsafe impl ::windows::core::RuntimeType for CompositionGetValueStatus {
    const SIGNATURE: ::windows::core::ConstBuffer = ::windows::core::ConstBuffer::from_slice(
        b"enum(Microsoft.UI.Composition.CompositionGetValueStatus;i4)",
    );
    type DefaultType = Self;
    fn from_default(from: &Self::DefaultType) -> ::windows::core::Result<Self> {
        Ok(*from)
    }
}
#[doc = "*Required features: `\"UI_Composition\"`*"]
#[repr(transparent)]
#[derive(::core::cmp::PartialEq, ::core::cmp::Eq)]
pub struct CompositionGradientExtendMode(pub i32);
impl CompositionGradientExtendMode {
    pub const Clamp: Self = Self(0i32);
    pub const Wrap: Self = Self(1i32);
    pub const Mirror: Self = Self(2i32);
}
impl ::core::marker::Copy for CompositionGradientExtendMode {}
impl ::core::clone::Clone for CompositionGradientExtendMode {
    fn clone(&self) -> Self {
        *self
    }
}
impl ::core::default::Default for CompositionGradientExtendMode {
    fn default() -> Self {
        Self(0)
    }
}
unsafe impl ::windows::core::Abi for CompositionGradientExtendMode {
    type Abi = Self;
}
impl ::core::fmt::Debug for CompositionGradientExtendMode {
    fn fmt(&self, f: &mut ::core::fmt::Formatter<'_>) -> ::core::fmt::Result {
        f.debug_tuple("CompositionGradientExtendMode").field(&self.0).finish()
    }
}
unsafe impl ::windows::core::RuntimeType for CompositionGradientExtendMode {
    const SIGNATURE: ::windows::core::ConstBuffer = ::windows::core::ConstBuffer::from_slice(
        b"enum(Microsoft.UI.Composition.CompositionGradientExtendMode;i4)",
    );
    type DefaultType = Self;
    fn from_default(from: &Self::DefaultType) -> ::windows::core::Result<Self> {
        Ok(*from)
    }
}
#[doc = "*Required features: `\"UI_Composition\"`*"]
#[repr(transparent)]
#[derive(::core::cmp::PartialEq, ::core::cmp::Eq)]
pub struct CompositionMappingMode(pub i32);
impl CompositionMappingMode {
    pub const Absolute: Self = Self(0i32);
    pub const Relative: Self = Self(1i32);
}
impl ::core::marker::Copy for CompositionMappingMode {}
impl ::core::clone::Clone for CompositionMappingMode {
    fn clone(&self) -> Self {
        *self
    }
}
impl ::core::default::Default for CompositionMappingMode {
    fn default() -> Self {
        Self(0)
    }
}
unsafe impl ::windows::core::Abi for CompositionMappingMode {
    type Abi = Self;
}
impl ::core::fmt::Debug for CompositionMappingMode {
    fn fmt(&self, f: &mut ::core::fmt::Formatter<'_>) -> ::core::fmt::Result {
        f.debug_tuple("CompositionMappingMode").field(&self.0).finish()
    }
}
unsafe impl ::windows::core::RuntimeType for CompositionMappingMode {
    const SIGNATURE: ::windows::core::ConstBuffer = ::windows::core::ConstBuffer::from_slice(
        b"enum(Microsoft.UI.Composition.CompositionMappingMode;i4)",
    );
    type DefaultType = Self;
    fn from_default(from: &Self::DefaultType) -> ::windows::core::Result<Self> {
        Ok(*from)
    }
}
#[doc = "*Required features: `\"UI_Composition\"`*"]
#[repr(transparent)]
#[derive(::core::cmp::PartialEq, ::core::cmp::Eq)]
pub struct CompositionStretch(pub i32);
impl CompositionStretch {
    pub const None: Self = Self(0i32);
    pub const Fill: Self = Self(1i32);
    pub const Uniform: Self = Self(2i32);
    pub const UniformToFill: Self = Self(3i32);
}
impl ::core::marker::Copy for CompositionStretch {}
impl ::core::clone::Clone for CompositionStretch {
    fn clone(&self) -> Self {
        *self
    }
}
impl ::core::default::Default for CompositionStretch {
    fn default() -> Self {
        Self(0)
    }
}
unsafe impl ::windows::core::Abi for CompositionStretch {
    type Abi = Self;
}
impl ::core::fmt::Debug for CompositionStretch {
    fn fmt(&self, f: &mut ::core::fmt::Formatter<'_>) -> ::core::fmt::Result {
        f.debug_tuple("CompositionStretch").field(&self.0).finish()
    }
}
unsafe impl ::windows::core::RuntimeType for CompositionStretch {
    const SIGNATURE: ::windows::core::ConstBuffer = ::windows::core::ConstBuffer::from_slice(
        b"enum(Microsoft.UI.Composition.CompositionStretch;i4)",
    );
    type DefaultType = Self;
    fn from_default(from: &Self::DefaultType) -> ::windows::core::Result<Self> {
        Ok(*from)
    }
}
#[doc = "*Required features: `\"UI_Composition\"`*"]
#[repr(transparent)]
#[derive(::core::cmp::PartialEq, ::core::cmp::Eq)]
pub struct CompositionStrokeCap(pub i32);
impl CompositionStrokeCap {
    pub const Flat: Self = Self(0i32);
    pub const Square: Self = Self(1i32);
    pub const Round: Self = Self(2i32);
    pub const Triangle: Self = Self(3i32);
}
impl ::core::marker::Copy for CompositionStrokeCap {}
impl ::core::clone::Clone for CompositionStrokeCap {
    fn clone(&self) -> Self {
        *self
    }
}
impl ::core::default::Default for CompositionStrokeCap {
    fn default() -> Self {
        Self(0)
    }
}
unsafe impl ::windows::core::Abi for CompositionStrokeCap {
    type Abi = Self;
}
impl ::core::fmt::Debug for CompositionStrokeCap {
    fn fmt(&self, f: &mut ::core::fmt::Formatter<'_>) -> ::core::fmt::Result {
        f.debug_tuple("CompositionStrokeCap").field(&self.0).finish()
    }
}
unsafe impl ::windows::core::RuntimeType for CompositionStrokeCap {
    const SIGNATURE: ::windows::core::ConstBuffer = ::windows::core::ConstBuffer::from_slice(
        b"enum(Microsoft.UI.Composition.CompositionStrokeCap;i4)",
    );
    type DefaultType = Self;
    fn from_default(from: &Self::DefaultType) -> ::windows::core::Result<Self> {
        Ok(*from)
    }
}
#[doc = "*Required features: `\"UI_Composition\"`*"]
#[repr(transparent)]
#[derive(::core::cmp::PartialEq, ::core::cmp::Eq)]
pub struct CompositionStrokeLineJoin(pub i32);
impl CompositionStrokeLineJoin {
    pub const Miter: Self = Self(0i32);
    pub const Bevel: Self = Self(1i32);
    pub const Round: Self = Self(2i32);
    pub const MiterOrBevel: Self = Self(3i32);
}
impl ::core::marker::Copy for CompositionStrokeLineJoin {}
impl ::core::clone::Clone for CompositionStrokeLineJoin {
    fn clone(&self) -> Self {
        *self
    }
}
impl ::core::default::Default for CompositionStrokeLineJoin {
    fn default() -> Self {
        Self(0)
    }
}
unsafe impl ::windows::core::Abi for CompositionStrokeLineJoin {
    type Abi = Self;
}
impl ::core::fmt::Debug for CompositionStrokeLineJoin {
    fn fmt(&self, f: &mut ::core::fmt::Formatter<'_>) -> ::core::fmt::Result {
        f.debug_tuple("CompositionStrokeLineJoin").field(&self.0).finish()
    }
}
unsafe impl ::windows::core::RuntimeType for CompositionStrokeLineJoin {
    const SIGNATURE: ::windows::core::ConstBuffer = ::windows::core::ConstBuffer::from_slice(
        b"enum(Microsoft.UI.Composition.CompositionStrokeLineJoin;i4)",
    );
    type DefaultType = Self;
    fn from_default(from: &Self::DefaultType) -> ::windows::core::Result<Self> {
        Ok(*from)
    }
}
#[cfg(feature = "implement")]
::core::include!("impl.rs");
