#[doc(hidden)]
#[repr(transparent)]
pub struct IAddDeleteThemeTransition(::windows::core::IUnknown);
unsafe impl ::windows::core::Vtable for IAddDeleteThemeTransition {
    type Vtable = IAddDeleteThemeTransition_Vtbl;
}
unsafe impl ::windows::core::Interface for IAddDeleteThemeTransition {
    const IID: ::windows::core::GUID =
        ::windows::core::GUID::from_u128(0x3728595e_0ea2_524b_9348_86cfb860a0ff);
}
#[repr(C)]
#[doc(hidden)]
pub struct IAddDeleteThemeTransition_Vtbl {
    pub base__: ::windows::core::IInspectable_Vtbl,
}
#[doc(hidden)]
#[repr(transparent)]
pub struct IBackEase(::windows::core::IUnknown);
unsafe impl ::windows::core::Vtable for IBackEase {
    type Vtable = IBackEase_Vtbl;
}
unsafe impl ::windows::core::Interface for IBackEase {
    const IID: ::windows::core::GUID =
        ::windows::core::GUID::from_u128(0x1775bd43_1939_57cb_8c31_cd7590ec9543);
}
#[repr(C)]
#[doc(hidden)]
pub struct IBackEase_Vtbl {
    pub base__: ::windows::core::IInspectable_Vtbl,
    pub Amplitude: unsafe extern "system" fn(
        this: *mut ::core::ffi::c_void,
        result__: *mut f64,
    ) -> ::windows::core::HRESULT,
    pub SetAmplitude: unsafe extern "system" fn(
        this: *mut ::core::ffi::c_void,
        value: f64,
    ) -> ::windows::core::HRESULT,
}
#[doc(hidden)]
#[repr(transparent)]
pub struct IBackEaseStatics(::windows::core::IUnknown);
unsafe impl ::windows::core::Vtable for IBackEaseStatics {
    type Vtable = IBackEaseStatics_Vtbl;
}
unsafe impl ::windows::core::Interface for IBackEaseStatics {
    const IID: ::windows::core::GUID =
        ::windows::core::GUID::from_u128(0x1ead2ef9_7901_542d_ae08_7b5937b32ef0);
}
#[repr(C)]
#[doc(hidden)]
pub struct IBackEaseStatics_Vtbl {
    pub base__: ::windows::core::IInspectable_Vtbl,
    pub AmplitudeProperty: unsafe extern "system" fn(
        this: *mut ::core::ffi::c_void,
        result__: *mut *mut ::core::ffi::c_void,
    ) -> ::windows::core::HRESULT,
}
#[doc(hidden)]
#[repr(transparent)]
pub struct IBasicConnectedAnimationConfiguration(::windows::core::IUnknown);
unsafe impl ::windows::core::Vtable for IBasicConnectedAnimationConfiguration {
    type Vtable = IBasicConnectedAnimationConfiguration_Vtbl;
}
unsafe impl ::windows::core::Interface for IBasicConnectedAnimationConfiguration {
    const IID: ::windows::core::GUID =
        ::windows::core::GUID::from_u128(0x7ff18afe_91e8_52fa_a1c1_7b2c1a140118);
}
#[repr(C)]
#[doc(hidden)]
pub struct IBasicConnectedAnimationConfiguration_Vtbl {
    pub base__: ::windows::core::IInspectable_Vtbl,
}
#[doc(hidden)]
#[repr(transparent)]
pub struct IBasicConnectedAnimationConfigurationFactory(::windows::core::IUnknown);
unsafe impl ::windows::core::Vtable for IBasicConnectedAnimationConfigurationFactory {
    type Vtable = IBasicConnectedAnimationConfigurationFactory_Vtbl;
}
unsafe impl ::windows::core::Interface for IBasicConnectedAnimationConfigurationFactory {
    const IID: ::windows::core::GUID =
        ::windows::core::GUID::from_u128(0x2d156a02_0fb5_5ad1_af9b_bc9c2720fecb);
}
#[repr(C)]
#[doc(hidden)]
pub struct IBasicConnectedAnimationConfigurationFactory_Vtbl {
    pub base__: ::windows::core::IInspectable_Vtbl,
    pub CreateInstance: unsafe extern "system" fn(
        this: *mut ::core::ffi::c_void,
        baseinterface: *mut ::core::ffi::c_void,
        innerinterface: *mut *mut ::core::ffi::c_void,
        result__: *mut *mut ::core::ffi::c_void,
    ) -> ::windows::core::HRESULT,
}
#[doc(hidden)]
#[repr(transparent)]
pub struct IBeginStoryboard(::windows::core::IUnknown);
unsafe impl ::windows::core::Vtable for IBeginStoryboard {
    type Vtable = IBeginStoryboard_Vtbl;
}
unsafe impl ::windows::core::Interface for IBeginStoryboard {
    const IID: ::windows::core::GUID =
        ::windows::core::GUID::from_u128(0xbb364720_ee5a_5b32_91e2_62589729fd3a);
}
#[repr(C)]
#[doc(hidden)]
pub struct IBeginStoryboard_Vtbl {
    pub base__: ::windows::core::IInspectable_Vtbl,
    pub Storyboard: unsafe extern "system" fn(
        this: *mut ::core::ffi::c_void,
        result__: *mut *mut ::core::ffi::c_void,
    ) -> ::windows::core::HRESULT,
    pub SetStoryboard: unsafe extern "system" fn(
        this: *mut ::core::ffi::c_void,
        value: *mut ::core::ffi::c_void,
    ) -> ::windows::core::HRESULT,
}
#[doc(hidden)]
#[repr(transparent)]
pub struct IBeginStoryboardStatics(::windows::core::IUnknown);
unsafe impl ::windows::core::Vtable for IBeginStoryboardStatics {
    type Vtable = IBeginStoryboardStatics_Vtbl;
}
unsafe impl ::windows::core::Interface for IBeginStoryboardStatics {
    const IID: ::windows::core::GUID =
        ::windows::core::GUID::from_u128(0x4d5fdbeb_6b0e_5a8f_a8f0_01f438df8fb2);
}
#[repr(C)]
#[doc(hidden)]
pub struct IBeginStoryboardStatics_Vtbl {
    pub base__: ::windows::core::IInspectable_Vtbl,
    pub StoryboardProperty: unsafe extern "system" fn(
        this: *mut ::core::ffi::c_void,
        result__: *mut *mut ::core::ffi::c_void,
    ) -> ::windows::core::HRESULT,
}
#[doc(hidden)]
#[repr(transparent)]
pub struct IBounceEase(::windows::core::IUnknown);
unsafe impl ::windows::core::Vtable for IBounceEase {
    type Vtable = IBounceEase_Vtbl;
}
unsafe impl ::windows::core::Interface for IBounceEase {
    const IID: ::windows::core::GUID =
        ::windows::core::GUID::from_u128(0xc138bfff_87c8_5c60_b280_682a499c58c3);
}
#[repr(C)]
#[doc(hidden)]
pub struct IBounceEase_Vtbl {
    pub base__: ::windows::core::IInspectable_Vtbl,
    pub Bounces: unsafe extern "system" fn(
        this: *mut ::core::ffi::c_void,
        result__: *mut i32,
    ) -> ::windows::core::HRESULT,
    pub SetBounces: unsafe extern "system" fn(
        this: *mut ::core::ffi::c_void,
        value: i32,
    ) -> ::windows::core::HRESULT,
    pub Bounciness: unsafe extern "system" fn(
        this: *mut ::core::ffi::c_void,
        result__: *mut f64,
    ) -> ::windows::core::HRESULT,
    pub SetBounciness: unsafe extern "system" fn(
        this: *mut ::core::ffi::c_void,
        value: f64,
    ) -> ::windows::core::HRESULT,
}
#[doc(hidden)]
#[repr(transparent)]
pub struct IBounceEaseStatics(::windows::core::IUnknown);
unsafe impl ::windows::core::Vtable for IBounceEaseStatics {
    type Vtable = IBounceEaseStatics_Vtbl;
}
unsafe impl ::windows::core::Interface for IBounceEaseStatics {
    const IID: ::windows::core::GUID =
        ::windows::core::GUID::from_u128(0xd7716b38_c705_5093_96d6_735c13105a30);
}
#[repr(C)]
#[doc(hidden)]
pub struct IBounceEaseStatics_Vtbl {
    pub base__: ::windows::core::IInspectable_Vtbl,
    pub BouncesProperty: unsafe extern "system" fn(
        this: *mut ::core::ffi::c_void,
        result__: *mut *mut ::core::ffi::c_void,
    ) -> ::windows::core::HRESULT,
    pub BouncinessProperty: unsafe extern "system" fn(
        this: *mut ::core::ffi::c_void,
        result__: *mut *mut ::core::ffi::c_void,
    ) -> ::windows::core::HRESULT,
}
#[doc(hidden)]
#[repr(transparent)]
pub struct ICircleEase(::windows::core::IUnknown);
unsafe impl ::windows::core::Vtable for ICircleEase {
    type Vtable = ICircleEase_Vtbl;
}
unsafe impl ::windows::core::Interface for ICircleEase {
    const IID: ::windows::core::GUID =
        ::windows::core::GUID::from_u128(0x88209080_2929_5924_9b52_f95196568713);
}
#[repr(C)]
#[doc(hidden)]
pub struct ICircleEase_Vtbl {
    pub base__: ::windows::core::IInspectable_Vtbl,
}
#[doc(hidden)]
#[repr(transparent)]
pub struct IColorAnimation(::windows::core::IUnknown);
unsafe impl ::windows::core::Vtable for IColorAnimation {
    type Vtable = IColorAnimation_Vtbl;
}
unsafe impl ::windows::core::Interface for IColorAnimation {
    const IID: ::windows::core::GUID =
        ::windows::core::GUID::from_u128(0x6df862d2_65f2_53a8_8b1b_1b6c1763c175);
}
#[repr(C)]
#[doc(hidden)]
pub struct IColorAnimation_Vtbl {
    pub base__: ::windows::core::IInspectable_Vtbl,
    pub From: unsafe extern "system" fn(
        this: *mut ::core::ffi::c_void,
        result__: *mut *mut ::core::ffi::c_void,
    ) -> ::windows::core::HRESULT,
    pub SetFrom: unsafe extern "system" fn(
        this: *mut ::core::ffi::c_void,
        value: *mut ::core::ffi::c_void,
    ) -> ::windows::core::HRESULT,
    pub To: unsafe extern "system" fn(
        this: *mut ::core::ffi::c_void,
        result__: *mut *mut ::core::ffi::c_void,
    ) -> ::windows::core::HRESULT,
    pub SetTo: unsafe extern "system" fn(
        this: *mut ::core::ffi::c_void,
        value: *mut ::core::ffi::c_void,
    ) -> ::windows::core::HRESULT,
    pub By: unsafe extern "system" fn(
        this: *mut ::core::ffi::c_void,
        result__: *mut *mut ::core::ffi::c_void,
    ) -> ::windows::core::HRESULT,
    pub SetBy: unsafe extern "system" fn(
        this: *mut ::core::ffi::c_void,
        value: *mut ::core::ffi::c_void,
    ) -> ::windows::core::HRESULT,
    pub EasingFunction: unsafe extern "system" fn(
        this: *mut ::core::ffi::c_void,
        result__: *mut *mut ::core::ffi::c_void,
    ) -> ::windows::core::HRESULT,
    pub SetEasingFunction: unsafe extern "system" fn(
        this: *mut ::core::ffi::c_void,
        value: *mut ::core::ffi::c_void,
    ) -> ::windows::core::HRESULT,
    pub EnableDependentAnimation: unsafe extern "system" fn(
        this: *mut ::core::ffi::c_void,
        result__: *mut bool,
    ) -> ::windows::core::HRESULT,
    pub SetEnableDependentAnimation: unsafe extern "system" fn(
        this: *mut ::core::ffi::c_void,
        value: bool,
    ) -> ::windows::core::HRESULT,
}
#[doc(hidden)]
#[repr(transparent)]
pub struct IColorAnimationStatics(::windows::core::IUnknown);
unsafe impl ::windows::core::Vtable for IColorAnimationStatics {
    type Vtable = IColorAnimationStatics_Vtbl;
}
unsafe impl ::windows::core::Interface for IColorAnimationStatics {
    const IID: ::windows::core::GUID =
        ::windows::core::GUID::from_u128(0x99aebe0f_928e_52cb_842f_f43fe660ff06);
}
#[repr(C)]
#[doc(hidden)]
pub struct IColorAnimationStatics_Vtbl {
    pub base__: ::windows::core::IInspectable_Vtbl,
    pub FromProperty: unsafe extern "system" fn(
        this: *mut ::core::ffi::c_void,
        result__: *mut *mut ::core::ffi::c_void,
    ) -> ::windows::core::HRESULT,
    pub ToProperty: unsafe extern "system" fn(
        this: *mut ::core::ffi::c_void,
        result__: *mut *mut ::core::ffi::c_void,
    ) -> ::windows::core::HRESULT,
    pub ByProperty: unsafe extern "system" fn(
        this: *mut ::core::ffi::c_void,
        result__: *mut *mut ::core::ffi::c_void,
    ) -> ::windows::core::HRESULT,
    pub EasingFunctionProperty: unsafe extern "system" fn(
        this: *mut ::core::ffi::c_void,
        result__: *mut *mut ::core::ffi::c_void,
    ) -> ::windows::core::HRESULT,
    pub EnableDependentAnimationProperty: unsafe extern "system" fn(
        this: *mut ::core::ffi::c_void,
        result__: *mut *mut ::core::ffi::c_void,
    )
        -> ::windows::core::HRESULT,
}
#[doc(hidden)]
#[repr(transparent)]
pub struct IColorAnimationUsingKeyFrames(::windows::core::IUnknown);
unsafe impl ::windows::core::Vtable for IColorAnimationUsingKeyFrames {
    type Vtable = IColorAnimationUsingKeyFrames_Vtbl;
}
unsafe impl ::windows::core::Interface for IColorAnimationUsingKeyFrames {
    const IID: ::windows::core::GUID =
        ::windows::core::GUID::from_u128(0x96f28c97_67eb_5393_8e37_a81d8fda18b3);
}
#[repr(C)]
#[doc(hidden)]
pub struct IColorAnimationUsingKeyFrames_Vtbl {
    pub base__: ::windows::core::IInspectable_Vtbl,
    pub KeyFrames: unsafe extern "system" fn(
        this: *mut ::core::ffi::c_void,
        result__: *mut *mut ::core::ffi::c_void,
    ) -> ::windows::core::HRESULT,
    pub EnableDependentAnimation: unsafe extern "system" fn(
        this: *mut ::core::ffi::c_void,
        result__: *mut bool,
    ) -> ::windows::core::HRESULT,
    pub SetEnableDependentAnimation: unsafe extern "system" fn(
        this: *mut ::core::ffi::c_void,
        value: bool,
    ) -> ::windows::core::HRESULT,
}
#[doc(hidden)]
#[repr(transparent)]
pub struct IColorAnimationUsingKeyFramesStatics(::windows::core::IUnknown);
unsafe impl ::windows::core::Vtable for IColorAnimationUsingKeyFramesStatics {
    type Vtable = IColorAnimationUsingKeyFramesStatics_Vtbl;
}
unsafe impl ::windows::core::Interface for IColorAnimationUsingKeyFramesStatics {
    const IID: ::windows::core::GUID =
        ::windows::core::GUID::from_u128(0x5b0f4840_0ef7_5ad7_a8f2_d49424ed906f);
}
#[repr(C)]
#[doc(hidden)]
pub struct IColorAnimationUsingKeyFramesStatics_Vtbl {
    pub base__: ::windows::core::IInspectable_Vtbl,
    pub EnableDependentAnimationProperty: unsafe extern "system" fn(
        this: *mut ::core::ffi::c_void,
        result__: *mut *mut ::core::ffi::c_void,
    )
        -> ::windows::core::HRESULT,
}
#[doc(hidden)]
#[repr(transparent)]
pub struct IColorKeyFrame(::windows::core::IUnknown);
unsafe impl ::windows::core::Vtable for IColorKeyFrame {
    type Vtable = IColorKeyFrame_Vtbl;
}
unsafe impl ::windows::core::Interface for IColorKeyFrame {
    const IID: ::windows::core::GUID =
        ::windows::core::GUID::from_u128(0x02848c7e_c772_5f66_842b_fd494d0da669);
}
#[repr(C)]
#[doc(hidden)]
pub struct IColorKeyFrame_Vtbl {
    pub base__: ::windows::core::IInspectable_Vtbl,
    pub Value: unsafe extern "system" fn(
        this: *mut ::core::ffi::c_void,
        result__: *mut ::windows::UI::Color,
    ) -> ::windows::core::HRESULT,
    pub SetValue: unsafe extern "system" fn(
        this: *mut ::core::ffi::c_void,
        value: ::windows::UI::Color,
    ) -> ::windows::core::HRESULT,
    pub KeyTime: unsafe extern "system" fn(
        this: *mut ::core::ffi::c_void,
        result__: *mut KeyTime,
    ) -> ::windows::core::HRESULT,
    pub SetKeyTime: unsafe extern "system" fn(
        this: *mut ::core::ffi::c_void,
        value: KeyTime,
    ) -> ::windows::core::HRESULT,
}
#[doc(hidden)]
#[repr(transparent)]
pub struct IColorKeyFrameFactory(::windows::core::IUnknown);
unsafe impl ::windows::core::Vtable for IColorKeyFrameFactory {
    type Vtable = IColorKeyFrameFactory_Vtbl;
}
unsafe impl ::windows::core::Interface for IColorKeyFrameFactory {
    const IID: ::windows::core::GUID =
        ::windows::core::GUID::from_u128(0xa82cc182_9d80_508c_b962_d74225587200);
}
#[repr(C)]
#[doc(hidden)]
pub struct IColorKeyFrameFactory_Vtbl {
    pub base__: ::windows::core::IInspectable_Vtbl,
    pub CreateInstance: unsafe extern "system" fn(
        this: *mut ::core::ffi::c_void,
        baseinterface: *mut ::core::ffi::c_void,
        innerinterface: *mut *mut ::core::ffi::c_void,
        result__: *mut *mut ::core::ffi::c_void,
    ) -> ::windows::core::HRESULT,
}
#[doc(hidden)]
#[repr(transparent)]
pub struct IColorKeyFrameStatics(::windows::core::IUnknown);
unsafe impl ::windows::core::Vtable for IColorKeyFrameStatics {
    type Vtable = IColorKeyFrameStatics_Vtbl;
}
unsafe impl ::windows::core::Interface for IColorKeyFrameStatics {
    const IID: ::windows::core::GUID =
        ::windows::core::GUID::from_u128(0xb62fdd68_15c7_5c6c_a4fa_0cee10e04556);
}
#[repr(C)]
#[doc(hidden)]
pub struct IColorKeyFrameStatics_Vtbl {
    pub base__: ::windows::core::IInspectable_Vtbl,
    pub ValueProperty: unsafe extern "system" fn(
        this: *mut ::core::ffi::c_void,
        result__: *mut *mut ::core::ffi::c_void,
    ) -> ::windows::core::HRESULT,
    pub KeyTimeProperty: unsafe extern "system" fn(
        this: *mut ::core::ffi::c_void,
        result__: *mut *mut ::core::ffi::c_void,
    ) -> ::windows::core::HRESULT,
}
#[doc(hidden)]
#[repr(transparent)]
pub struct ICommonNavigationTransitionInfo(::windows::core::IUnknown);
unsafe impl ::windows::core::Vtable for ICommonNavigationTransitionInfo {
    type Vtable = ICommonNavigationTransitionInfo_Vtbl;
}
unsafe impl ::windows::core::Interface for ICommonNavigationTransitionInfo {
    const IID: ::windows::core::GUID =
        ::windows::core::GUID::from_u128(0xb21cc95f_9e3d_540a_b35a_17b99dc41b1e);
}
#[repr(C)]
#[doc(hidden)]
pub struct ICommonNavigationTransitionInfo_Vtbl {
    pub base__: ::windows::core::IInspectable_Vtbl,
    pub IsStaggeringEnabled: unsafe extern "system" fn(
        this: *mut ::core::ffi::c_void,
        result__: *mut bool,
    ) -> ::windows::core::HRESULT,
    pub SetIsStaggeringEnabled: unsafe extern "system" fn(
        this: *mut ::core::ffi::c_void,
        value: bool,
    ) -> ::windows::core::HRESULT,
}
#[doc(hidden)]
#[repr(transparent)]
pub struct ICommonNavigationTransitionInfoStatics(::windows::core::IUnknown);
unsafe impl ::windows::core::Vtable for ICommonNavigationTransitionInfoStatics {
    type Vtable = ICommonNavigationTransitionInfoStatics_Vtbl;
}
unsafe impl ::windows::core::Interface for ICommonNavigationTransitionInfoStatics {
    const IID: ::windows::core::GUID =
        ::windows::core::GUID::from_u128(0x20020be1_c1ba_59f5_997a_c04f5e3833b0);
}
#[repr(C)]
#[doc(hidden)]
pub struct ICommonNavigationTransitionInfoStatics_Vtbl {
    pub base__: ::windows::core::IInspectable_Vtbl,
    pub IsStaggeringEnabledProperty: unsafe extern "system" fn(
        this: *mut ::core::ffi::c_void,
        result__: *mut *mut ::core::ffi::c_void,
    ) -> ::windows::core::HRESULT,
    pub IsStaggerElementProperty: unsafe extern "system" fn(
        this: *mut ::core::ffi::c_void,
        result__: *mut *mut ::core::ffi::c_void,
    ) -> ::windows::core::HRESULT,
    pub GetIsStaggerElement: unsafe extern "system" fn(
        this: *mut ::core::ffi::c_void,
        element: *mut ::core::ffi::c_void,
        result__: *mut bool,
    ) -> ::windows::core::HRESULT,
    pub SetIsStaggerElement: unsafe extern "system" fn(
        this: *mut ::core::ffi::c_void,
        element: *mut ::core::ffi::c_void,
        value: bool,
    ) -> ::windows::core::HRESULT,
}
#[doc(hidden)]
#[repr(transparent)]
pub struct IConnectedAnimation(::windows::core::IUnknown);
unsafe impl ::windows::core::Vtable for IConnectedAnimation {
    type Vtable = IConnectedAnimation_Vtbl;
}
unsafe impl ::windows::core::Interface for IConnectedAnimation {
    const IID: ::windows::core::GUID =
        ::windows::core::GUID::from_u128(0xa9c1c6ad_7670_589c_a608_9b5c01cec71f);
}
#[repr(C)]
#[doc(hidden)]
pub struct IConnectedAnimation_Vtbl {
    pub base__: ::windows::core::IInspectable_Vtbl,
    pub IsScaleAnimationEnabled: unsafe extern "system" fn(
        this: *mut ::core::ffi::c_void,
        result__: *mut bool,
    ) -> ::windows::core::HRESULT,
    pub SetIsScaleAnimationEnabled: unsafe extern "system" fn(
        this: *mut ::core::ffi::c_void,
        value: bool,
    ) -> ::windows::core::HRESULT,
    pub Configuration: unsafe extern "system" fn(
        this: *mut ::core::ffi::c_void,
        result__: *mut *mut ::core::ffi::c_void,
    ) -> ::windows::core::HRESULT,
    pub SetConfiguration: unsafe extern "system" fn(
        this: *mut ::core::ffi::c_void,
        value: *mut ::core::ffi::c_void,
    ) -> ::windows::core::HRESULT,
    pub Completed: unsafe extern "system" fn(
        this: *mut ::core::ffi::c_void,
        handler: *mut ::core::ffi::c_void,
        result__: *mut ::windows::Foundation::EventRegistrationToken,
    ) -> ::windows::core::HRESULT,
    pub RemoveCompleted: unsafe extern "system" fn(
        this: *mut ::core::ffi::c_void,
        token: ::windows::Foundation::EventRegistrationToken,
    ) -> ::windows::core::HRESULT,
    pub TryStart: unsafe extern "system" fn(
        this: *mut ::core::ffi::c_void,
        destination: *mut ::core::ffi::c_void,
        result__: *mut bool,
    ) -> ::windows::core::HRESULT,
    pub TryStartWithCoordinatedElements: unsafe extern "system" fn(
        this: *mut ::core::ffi::c_void,
        destination: *mut ::core::ffi::c_void,
        coordinatedelements: *mut ::core::ffi::c_void,
        result__: *mut bool,
    ) -> ::windows::core::HRESULT,
    pub Cancel:
        unsafe extern "system" fn(this: *mut ::core::ffi::c_void) -> ::windows::core::HRESULT,
    #[cfg(feature = "UI_Composition")]
    pub SetAnimationComponent: unsafe extern "system" fn(
        this: *mut ::core::ffi::c_void,
        component: ConnectedAnimationComponent,
        animation: *mut ::core::ffi::c_void,
    ) -> ::windows::core::HRESULT,
    #[cfg(not(feature = "UI_Composition"))]
    SetAnimationComponent: usize,
}
#[doc(hidden)]
#[repr(transparent)]
pub struct IConnectedAnimationConfiguration(::windows::core::IUnknown);
unsafe impl ::windows::core::Vtable for IConnectedAnimationConfiguration {
    type Vtable = IConnectedAnimationConfiguration_Vtbl;
}
unsafe impl ::windows::core::Interface for IConnectedAnimationConfiguration {
    const IID: ::windows::core::GUID =
        ::windows::core::GUID::from_u128(0xe848379d_7e25_5976_bfb3_086bac4e8849);
}
#[repr(C)]
#[doc(hidden)]
pub struct IConnectedAnimationConfiguration_Vtbl {
    pub base__: ::windows::core::IInspectable_Vtbl,
}
#[doc(hidden)]
#[repr(transparent)]
pub struct IConnectedAnimationConfigurationFactory(::windows::core::IUnknown);
unsafe impl ::windows::core::Vtable for IConnectedAnimationConfigurationFactory {
    type Vtable = IConnectedAnimationConfigurationFactory_Vtbl;
}
unsafe impl ::windows::core::Interface for IConnectedAnimationConfigurationFactory {
    const IID: ::windows::core::GUID =
        ::windows::core::GUID::from_u128(0x71008845_4a12_5a1a_969c_4152b5174922);
}
#[repr(C)]
#[doc(hidden)]
pub struct IConnectedAnimationConfigurationFactory_Vtbl {
    pub base__: ::windows::core::IInspectable_Vtbl,
}
#[doc(hidden)]
#[repr(transparent)]
pub struct IConnectedAnimationService(::windows::core::IUnknown);
unsafe impl ::windows::core::Vtable for IConnectedAnimationService {
    type Vtable = IConnectedAnimationService_Vtbl;
}
unsafe impl ::windows::core::Interface for IConnectedAnimationService {
    const IID: ::windows::core::GUID =
        ::windows::core::GUID::from_u128(0x85f72163_c3c8_586a_91fe_3e0315a3a4fc);
}
#[repr(C)]
#[doc(hidden)]
pub struct IConnectedAnimationService_Vtbl {
    pub base__: ::windows::core::IInspectable_Vtbl,
    pub DefaultDuration: unsafe extern "system" fn(
        this: *mut ::core::ffi::c_void,
        result__: *mut ::windows::Foundation::TimeSpan,
    ) -> ::windows::core::HRESULT,
    pub SetDefaultDuration: unsafe extern "system" fn(
        this: *mut ::core::ffi::c_void,
        value: ::windows::Foundation::TimeSpan,
    ) -> ::windows::core::HRESULT,
    #[cfg(feature = "UI_Composition")]
    pub DefaultEasingFunction: unsafe extern "system" fn(
        this: *mut ::core::ffi::c_void,
        result__: *mut *mut ::core::ffi::c_void,
    ) -> ::windows::core::HRESULT,
    #[cfg(not(feature = "UI_Composition"))]
    DefaultEasingFunction: usize,
    #[cfg(feature = "UI_Composition")]
    pub SetDefaultEasingFunction: unsafe extern "system" fn(
        this: *mut ::core::ffi::c_void,
        value: *mut ::core::ffi::c_void,
    ) -> ::windows::core::HRESULT,
    #[cfg(not(feature = "UI_Composition"))]
    SetDefaultEasingFunction: usize,
    pub PrepareToAnimate: unsafe extern "system" fn(
        this: *mut ::core::ffi::c_void,
        key: ::core::mem::ManuallyDrop<::windows::core::HSTRING>,
        source: *mut ::core::ffi::c_void,
        result__: *mut *mut ::core::ffi::c_void,
    ) -> ::windows::core::HRESULT,
    pub GetAnimation: unsafe extern "system" fn(
        this: *mut ::core::ffi::c_void,
        key: ::core::mem::ManuallyDrop<::windows::core::HSTRING>,
        result__: *mut *mut ::core::ffi::c_void,
    ) -> ::windows::core::HRESULT,
}
#[doc(hidden)]
#[repr(transparent)]
pub struct IConnectedAnimationServiceStatics(::windows::core::IUnknown);
unsafe impl ::windows::core::Vtable for IConnectedAnimationServiceStatics {
    type Vtable = IConnectedAnimationServiceStatics_Vtbl;
}
unsafe impl ::windows::core::Interface for IConnectedAnimationServiceStatics {
    const IID: ::windows::core::GUID =
        ::windows::core::GUID::from_u128(0xf30ad68d_3426_5564_92c6_288b819e652a);
}
#[repr(C)]
#[doc(hidden)]
pub struct IConnectedAnimationServiceStatics_Vtbl {
    pub base__: ::windows::core::IInspectable_Vtbl,
    pub GetForCurrentView: unsafe extern "system" fn(
        this: *mut ::core::ffi::c_void,
        result__: *mut *mut ::core::ffi::c_void,
    ) -> ::windows::core::HRESULT,
}
#[doc(hidden)]
#[repr(transparent)]
pub struct IContentThemeTransition(::windows::core::IUnknown);
unsafe impl ::windows::core::Vtable for IContentThemeTransition {
    type Vtable = IContentThemeTransition_Vtbl;
}
unsafe impl ::windows::core::Interface for IContentThemeTransition {
    const IID: ::windows::core::GUID =
        ::windows::core::GUID::from_u128(0xdff47071_cc51_556c_a3fe_8bbb4cba6195);
}
#[repr(C)]
#[doc(hidden)]
pub struct IContentThemeTransition_Vtbl {
    pub base__: ::windows::core::IInspectable_Vtbl,
    pub HorizontalOffset: unsafe extern "system" fn(
        this: *mut ::core::ffi::c_void,
        result__: *mut f64,
    ) -> ::windows::core::HRESULT,
    pub SetHorizontalOffset: unsafe extern "system" fn(
        this: *mut ::core::ffi::c_void,
        value: f64,
    ) -> ::windows::core::HRESULT,
    pub VerticalOffset: unsafe extern "system" fn(
        this: *mut ::core::ffi::c_void,
        result__: *mut f64,
    ) -> ::windows::core::HRESULT,
    pub SetVerticalOffset: unsafe extern "system" fn(
        this: *mut ::core::ffi::c_void,
        value: f64,
    ) -> ::windows::core::HRESULT,
}
#[doc(hidden)]
#[repr(transparent)]
pub struct IContentThemeTransitionStatics(::windows::core::IUnknown);
unsafe impl ::windows::core::Vtable for IContentThemeTransitionStatics {
    type Vtable = IContentThemeTransitionStatics_Vtbl;
}
unsafe impl ::windows::core::Interface for IContentThemeTransitionStatics {
    const IID: ::windows::core::GUID =
        ::windows::core::GUID::from_u128(0x95cda8b1_6667_56e3_be40_866eef53663c);
}
#[repr(C)]
#[doc(hidden)]
pub struct IContentThemeTransitionStatics_Vtbl {
    pub base__: ::windows::core::IInspectable_Vtbl,
    pub HorizontalOffsetProperty: unsafe extern "system" fn(
        this: *mut ::core::ffi::c_void,
        result__: *mut *mut ::core::ffi::c_void,
    ) -> ::windows::core::HRESULT,
    pub VerticalOffsetProperty: unsafe extern "system" fn(
        this: *mut ::core::ffi::c_void,
        result__: *mut *mut ::core::ffi::c_void,
    ) -> ::windows::core::HRESULT,
}
#[doc(hidden)]
#[repr(transparent)]
pub struct IContinuumNavigationTransitionInfo(::windows::core::IUnknown);
unsafe impl ::windows::core::Vtable for IContinuumNavigationTransitionInfo {
    type Vtable = IContinuumNavigationTransitionInfo_Vtbl;
}
unsafe impl ::windows::core::Interface for IContinuumNavigationTransitionInfo {
    const IID: ::windows::core::GUID =
        ::windows::core::GUID::from_u128(0xc55da70f_ff2a_5fc3_81c5_9670f4d78752);
}
#[repr(C)]
#[doc(hidden)]
pub struct IContinuumNavigationTransitionInfo_Vtbl {
    pub base__: ::windows::core::IInspectable_Vtbl,
    pub ExitElement: unsafe extern "system" fn(
        this: *mut ::core::ffi::c_void,
        result__: *mut *mut ::core::ffi::c_void,
    ) -> ::windows::core::HRESULT,
    pub SetExitElement: unsafe extern "system" fn(
        this: *mut ::core::ffi::c_void,
        value: *mut ::core::ffi::c_void,
    ) -> ::windows::core::HRESULT,
}
#[doc(hidden)]
#[repr(transparent)]
pub struct IContinuumNavigationTransitionInfoStatics(::windows::core::IUnknown);
unsafe impl ::windows::core::Vtable for IContinuumNavigationTransitionInfoStatics {
    type Vtable = IContinuumNavigationTransitionInfoStatics_Vtbl;
}
unsafe impl ::windows::core::Interface for IContinuumNavigationTransitionInfoStatics {
    const IID: ::windows::core::GUID =
        ::windows::core::GUID::from_u128(0xca9006fd_f513_5f34_ad7f_49f9d7a99432);
}
#[repr(C)]
#[doc(hidden)]
pub struct IContinuumNavigationTransitionInfoStatics_Vtbl {
    pub base__: ::windows::core::IInspectable_Vtbl,
    pub ExitElementProperty: unsafe extern "system" fn(
        this: *mut ::core::ffi::c_void,
        result__: *mut *mut ::core::ffi::c_void,
    ) -> ::windows::core::HRESULT,
    pub IsEntranceElementProperty: unsafe extern "system" fn(
        this: *mut ::core::ffi::c_void,
        result__: *mut *mut ::core::ffi::c_void,
    ) -> ::windows::core::HRESULT,
    pub GetIsEntranceElement: unsafe extern "system" fn(
        this: *mut ::core::ffi::c_void,
        element: *mut ::core::ffi::c_void,
        result__: *mut bool,
    ) -> ::windows::core::HRESULT,
    pub SetIsEntranceElement: unsafe extern "system" fn(
        this: *mut ::core::ffi::c_void,
        element: *mut ::core::ffi::c_void,
        value: bool,
    ) -> ::windows::core::HRESULT,
    pub IsExitElementProperty: unsafe extern "system" fn(
        this: *mut ::core::ffi::c_void,
        result__: *mut *mut ::core::ffi::c_void,
    ) -> ::windows::core::HRESULT,
    pub GetIsExitElement: unsafe extern "system" fn(
        this: *mut ::core::ffi::c_void,
        element: *mut ::core::ffi::c_void,
        result__: *mut bool,
    ) -> ::windows::core::HRESULT,
    pub SetIsExitElement: unsafe extern "system" fn(
        this: *mut ::core::ffi::c_void,
        element: *mut ::core::ffi::c_void,
        value: bool,
    ) -> ::windows::core::HRESULT,
    pub ExitElementContainerProperty: unsafe extern "system" fn(
        this: *mut ::core::ffi::c_void,
        result__: *mut *mut ::core::ffi::c_void,
    ) -> ::windows::core::HRESULT,
    #[cfg(feature = "UI_Xaml_Controls")]
    pub GetExitElementContainer: unsafe extern "system" fn(
        this: *mut ::core::ffi::c_void,
        element: *mut ::core::ffi::c_void,
        result__: *mut bool,
    ) -> ::windows::core::HRESULT,
    #[cfg(not(feature = "UI_Xaml_Controls"))]
    GetExitElementContainer: usize,
    #[cfg(feature = "UI_Xaml_Controls")]
    pub SetExitElementContainer: unsafe extern "system" fn(
        this: *mut ::core::ffi::c_void,
        element: *mut ::core::ffi::c_void,
        value: bool,
    ) -> ::windows::core::HRESULT,
    #[cfg(not(feature = "UI_Xaml_Controls"))]
    SetExitElementContainer: usize,
}
#[doc(hidden)]
#[repr(transparent)]
pub struct ICubicEase(::windows::core::IUnknown);
unsafe impl ::windows::core::Vtable for ICubicEase {
    type Vtable = ICubicEase_Vtbl;
}
unsafe impl ::windows::core::Interface for ICubicEase {
    const IID: ::windows::core::GUID =
        ::windows::core::GUID::from_u128(0x01a218b4_eb7e_54f9_bfb6_c6ee128013d2);
}
#[repr(C)]
#[doc(hidden)]
pub struct ICubicEase_Vtbl {
    pub base__: ::windows::core::IInspectable_Vtbl,
}
#[doc(hidden)]
#[repr(transparent)]
pub struct IDirectConnectedAnimationConfiguration(::windows::core::IUnknown);
unsafe impl ::windows::core::Vtable for IDirectConnectedAnimationConfiguration {
    type Vtable = IDirectConnectedAnimationConfiguration_Vtbl;
}
unsafe impl ::windows::core::Interface for IDirectConnectedAnimationConfiguration {
    const IID: ::windows::core::GUID =
        ::windows::core::GUID::from_u128(0x44f192eb_cc11_545e_8fa2_1f0ec9c4438a);
}
#[repr(C)]
#[doc(hidden)]
pub struct IDirectConnectedAnimationConfiguration_Vtbl {
    pub base__: ::windows::core::IInspectable_Vtbl,
}
#[doc(hidden)]
#[repr(transparent)]
pub struct IDirectConnectedAnimationConfigurationFactory(::windows::core::IUnknown);
unsafe impl ::windows::core::Vtable for IDirectConnectedAnimationConfigurationFactory {
    type Vtable = IDirectConnectedAnimationConfigurationFactory_Vtbl;
}
unsafe impl ::windows::core::Interface for IDirectConnectedAnimationConfigurationFactory {
    const IID: ::windows::core::GUID =
        ::windows::core::GUID::from_u128(0x604aba9b_4eb8_5310_91dc_30962e25ab00);
}
#[repr(C)]
#[doc(hidden)]
pub struct IDirectConnectedAnimationConfigurationFactory_Vtbl {
    pub base__: ::windows::core::IInspectable_Vtbl,
    pub CreateInstance: unsafe extern "system" fn(
        this: *mut ::core::ffi::c_void,
        baseinterface: *mut ::core::ffi::c_void,
        innerinterface: *mut *mut ::core::ffi::c_void,
        result__: *mut *mut ::core::ffi::c_void,
    ) -> ::windows::core::HRESULT,
}
#[doc(hidden)]
#[repr(transparent)]
pub struct IDiscreteColorKeyFrame(::windows::core::IUnknown);
unsafe impl ::windows::core::Vtable for IDiscreteColorKeyFrame {
    type Vtable = IDiscreteColorKeyFrame_Vtbl;
}
unsafe impl ::windows::core::Interface for IDiscreteColorKeyFrame {
    const IID: ::windows::core::GUID =
        ::windows::core::GUID::from_u128(0x9b3d88a7_31d3_5912_8646_641a8a565ca1);
}
#[repr(C)]
#[doc(hidden)]
pub struct IDiscreteColorKeyFrame_Vtbl {
    pub base__: ::windows::core::IInspectable_Vtbl,
}
#[doc(hidden)]
#[repr(transparent)]
pub struct IDiscreteDoubleKeyFrame(::windows::core::IUnknown);
unsafe impl ::windows::core::Vtable for IDiscreteDoubleKeyFrame {
    type Vtable = IDiscreteDoubleKeyFrame_Vtbl;
}
unsafe impl ::windows::core::Interface for IDiscreteDoubleKeyFrame {
    const IID: ::windows::core::GUID =
        ::windows::core::GUID::from_u128(0xec16a555_c083_5a18_805b_a14b90bc80e2);
}
#[repr(C)]
#[doc(hidden)]
pub struct IDiscreteDoubleKeyFrame_Vtbl {
    pub base__: ::windows::core::IInspectable_Vtbl,
}
#[doc(hidden)]
#[repr(transparent)]
pub struct IDiscreteObjectKeyFrame(::windows::core::IUnknown);
unsafe impl ::windows::core::Vtable for IDiscreteObjectKeyFrame {
    type Vtable = IDiscreteObjectKeyFrame_Vtbl;
}
unsafe impl ::windows::core::Interface for IDiscreteObjectKeyFrame {
    const IID: ::windows::core::GUID =
        ::windows::core::GUID::from_u128(0x542fa813_6892_559d_9f69_1f2ac666af13);
}
#[repr(C)]
#[doc(hidden)]
pub struct IDiscreteObjectKeyFrame_Vtbl {
    pub base__: ::windows::core::IInspectable_Vtbl,
}
#[doc(hidden)]
#[repr(transparent)]
pub struct IDiscretePointKeyFrame(::windows::core::IUnknown);
unsafe impl ::windows::core::Vtable for IDiscretePointKeyFrame {
    type Vtable = IDiscretePointKeyFrame_Vtbl;
}
unsafe impl ::windows::core::Interface for IDiscretePointKeyFrame {
    const IID: ::windows::core::GUID =
        ::windows::core::GUID::from_u128(0x2255a291_007e_57ce_aa53_97d1e4a0d7e2);
}
#[repr(C)]
#[doc(hidden)]
pub struct IDiscretePointKeyFrame_Vtbl {
    pub base__: ::windows::core::IInspectable_Vtbl,
}
#[doc(hidden)]
#[repr(transparent)]
pub struct IDoubleAnimation(::windows::core::IUnknown);
unsafe impl ::windows::core::Vtable for IDoubleAnimation {
    type Vtable = IDoubleAnimation_Vtbl;
}
unsafe impl ::windows::core::Interface for IDoubleAnimation {
    const IID: ::windows::core::GUID =
        ::windows::core::GUID::from_u128(0x651ec97e_e483_5985_aa0b_49cfb07432dd);
}
#[repr(C)]
#[doc(hidden)]
pub struct IDoubleAnimation_Vtbl {
    pub base__: ::windows::core::IInspectable_Vtbl,
    pub From: unsafe extern "system" fn(
        this: *mut ::core::ffi::c_void,
        result__: *mut *mut ::core::ffi::c_void,
    ) -> ::windows::core::HRESULT,
    pub SetFrom: unsafe extern "system" fn(
        this: *mut ::core::ffi::c_void,
        value: *mut ::core::ffi::c_void,
    ) -> ::windows::core::HRESULT,
    pub To: unsafe extern "system" fn(
        this: *mut ::core::ffi::c_void,
        result__: *mut *mut ::core::ffi::c_void,
    ) -> ::windows::core::HRESULT,
    pub SetTo: unsafe extern "system" fn(
        this: *mut ::core::ffi::c_void,
        value: *mut ::core::ffi::c_void,
    ) -> ::windows::core::HRESULT,
    pub By: unsafe extern "system" fn(
        this: *mut ::core::ffi::c_void,
        result__: *mut *mut ::core::ffi::c_void,
    ) -> ::windows::core::HRESULT,
    pub SetBy: unsafe extern "system" fn(
        this: *mut ::core::ffi::c_void,
        value: *mut ::core::ffi::c_void,
    ) -> ::windows::core::HRESULT,
    pub EasingFunction: unsafe extern "system" fn(
        this: *mut ::core::ffi::c_void,
        result__: *mut *mut ::core::ffi::c_void,
    ) -> ::windows::core::HRESULT,
    pub SetEasingFunction: unsafe extern "system" fn(
        this: *mut ::core::ffi::c_void,
        value: *mut ::core::ffi::c_void,
    ) -> ::windows::core::HRESULT,
    pub EnableDependentAnimation: unsafe extern "system" fn(
        this: *mut ::core::ffi::c_void,
        result__: *mut bool,
    ) -> ::windows::core::HRESULT,
    pub SetEnableDependentAnimation: unsafe extern "system" fn(
        this: *mut ::core::ffi::c_void,
        value: bool,
    ) -> ::windows::core::HRESULT,
}
#[doc(hidden)]
#[repr(transparent)]
pub struct IDoubleAnimationStatics(::windows::core::IUnknown);
unsafe impl ::windows::core::Vtable for IDoubleAnimationStatics {
    type Vtable = IDoubleAnimationStatics_Vtbl;
}
unsafe impl ::windows::core::Interface for IDoubleAnimationStatics {
    const IID: ::windows::core::GUID =
        ::windows::core::GUID::from_u128(0x4e098387_adc6_5549_ad21_633e4fa244c2);
}
#[repr(C)]
#[doc(hidden)]
pub struct IDoubleAnimationStatics_Vtbl {
    pub base__: ::windows::core::IInspectable_Vtbl,
    pub FromProperty: unsafe extern "system" fn(
        this: *mut ::core::ffi::c_void,
        result__: *mut *mut ::core::ffi::c_void,
    ) -> ::windows::core::HRESULT,
    pub ToProperty: unsafe extern "system" fn(
        this: *mut ::core::ffi::c_void,
        result__: *mut *mut ::core::ffi::c_void,
    ) -> ::windows::core::HRESULT,
    pub ByProperty: unsafe extern "system" fn(
        this: *mut ::core::ffi::c_void,
        result__: *mut *mut ::core::ffi::c_void,
    ) -> ::windows::core::HRESULT,
    pub EasingFunctionProperty: unsafe extern "system" fn(
        this: *mut ::core::ffi::c_void,
        result__: *mut *mut ::core::ffi::c_void,
    ) -> ::windows::core::HRESULT,
    pub EnableDependentAnimationProperty: unsafe extern "system" fn(
        this: *mut ::core::ffi::c_void,
        result__: *mut *mut ::core::ffi::c_void,
    )
        -> ::windows::core::HRESULT,
}
#[doc(hidden)]
#[repr(transparent)]
pub struct IDoubleAnimationUsingKeyFrames(::windows::core::IUnknown);
unsafe impl ::windows::core::Vtable for IDoubleAnimationUsingKeyFrames {
    type Vtable = IDoubleAnimationUsingKeyFrames_Vtbl;
}
unsafe impl ::windows::core::Interface for IDoubleAnimationUsingKeyFrames {
    const IID: ::windows::core::GUID =
        ::windows::core::GUID::from_u128(0x815437d5_63cf_54a5_aea5_24b84708d12d);
}
#[repr(C)]
#[doc(hidden)]
pub struct IDoubleAnimationUsingKeyFrames_Vtbl {
    pub base__: ::windows::core::IInspectable_Vtbl,
    pub KeyFrames: unsafe extern "system" fn(
        this: *mut ::core::ffi::c_void,
        result__: *mut *mut ::core::ffi::c_void,
    ) -> ::windows::core::HRESULT,
    pub EnableDependentAnimation: unsafe extern "system" fn(
        this: *mut ::core::ffi::c_void,
        result__: *mut bool,
    ) -> ::windows::core::HRESULT,
    pub SetEnableDependentAnimation: unsafe extern "system" fn(
        this: *mut ::core::ffi::c_void,
        value: bool,
    ) -> ::windows::core::HRESULT,
}
#[doc(hidden)]
#[repr(transparent)]
pub struct IDoubleAnimationUsingKeyFramesStatics(::windows::core::IUnknown);
unsafe impl ::windows::core::Vtable for IDoubleAnimationUsingKeyFramesStatics {
    type Vtable = IDoubleAnimationUsingKeyFramesStatics_Vtbl;
}
unsafe impl ::windows::core::Interface for IDoubleAnimationUsingKeyFramesStatics {
    const IID: ::windows::core::GUID =
        ::windows::core::GUID::from_u128(0x4c1c9bf1_3a03_5689_b18f_6c44251e13d9);
}
#[repr(C)]
#[doc(hidden)]
pub struct IDoubleAnimationUsingKeyFramesStatics_Vtbl {
    pub base__: ::windows::core::IInspectable_Vtbl,
    pub EnableDependentAnimationProperty: unsafe extern "system" fn(
        this: *mut ::core::ffi::c_void,
        result__: *mut *mut ::core::ffi::c_void,
    )
        -> ::windows::core::HRESULT,
}
#[doc(hidden)]
#[repr(transparent)]
pub struct IDoubleKeyFrame(::windows::core::IUnknown);
unsafe impl ::windows::core::Vtable for IDoubleKeyFrame {
    type Vtable = IDoubleKeyFrame_Vtbl;
}
unsafe impl ::windows::core::Interface for IDoubleKeyFrame {
    const IID: ::windows::core::GUID =
        ::windows::core::GUID::from_u128(0x94c82ae6_ca62_5f52_934c_3e427e75d69a);
}
#[repr(C)]
#[doc(hidden)]
pub struct IDoubleKeyFrame_Vtbl {
    pub base__: ::windows::core::IInspectable_Vtbl,
    pub Value: unsafe extern "system" fn(
        this: *mut ::core::ffi::c_void,
        result__: *mut f64,
    ) -> ::windows::core::HRESULT,
    pub SetValue: unsafe extern "system" fn(
        this: *mut ::core::ffi::c_void,
        value: f64,
    ) -> ::windows::core::HRESULT,
    pub KeyTime: unsafe extern "system" fn(
        this: *mut ::core::ffi::c_void,
        result__: *mut KeyTime,
    ) -> ::windows::core::HRESULT,
    pub SetKeyTime: unsafe extern "system" fn(
        this: *mut ::core::ffi::c_void,
        value: KeyTime,
    ) -> ::windows::core::HRESULT,
}
#[doc(hidden)]
#[repr(transparent)]
pub struct IDoubleKeyFrameFactory(::windows::core::IUnknown);
unsafe impl ::windows::core::Vtable for IDoubleKeyFrameFactory {
    type Vtable = IDoubleKeyFrameFactory_Vtbl;
}
unsafe impl ::windows::core::Interface for IDoubleKeyFrameFactory {
    const IID: ::windows::core::GUID =
        ::windows::core::GUID::from_u128(0x2d492cb3_f488_5d30_b00c_b6f2547d0efe);
}
#[repr(C)]
#[doc(hidden)]
pub struct IDoubleKeyFrameFactory_Vtbl {
    pub base__: ::windows::core::IInspectable_Vtbl,
    pub CreateInstance: unsafe extern "system" fn(
        this: *mut ::core::ffi::c_void,
        baseinterface: *mut ::core::ffi::c_void,
        innerinterface: *mut *mut ::core::ffi::c_void,
        result__: *mut *mut ::core::ffi::c_void,
    ) -> ::windows::core::HRESULT,
}
#[doc(hidden)]
#[repr(transparent)]
pub struct IDoubleKeyFrameStatics(::windows::core::IUnknown);
unsafe impl ::windows::core::Vtable for IDoubleKeyFrameStatics {
    type Vtable = IDoubleKeyFrameStatics_Vtbl;
}
unsafe impl ::windows::core::Interface for IDoubleKeyFrameStatics {
    const IID: ::windows::core::GUID =
        ::windows::core::GUID::from_u128(0x0e56914c_b430_538f_bb66_0b8e83ab3db6);
}
#[repr(C)]
#[doc(hidden)]
pub struct IDoubleKeyFrameStatics_Vtbl {
    pub base__: ::windows::core::IInspectable_Vtbl,
    pub ValueProperty: unsafe extern "system" fn(
        this: *mut ::core::ffi::c_void,
        result__: *mut *mut ::core::ffi::c_void,
    ) -> ::windows::core::HRESULT,
    pub KeyTimeProperty: unsafe extern "system" fn(
        this: *mut ::core::ffi::c_void,
        result__: *mut *mut ::core::ffi::c_void,
    ) -> ::windows::core::HRESULT,
}
#[doc(hidden)]
#[repr(transparent)]
pub struct IDragItemThemeAnimation(::windows::core::IUnknown);
unsafe impl ::windows::core::Vtable for IDragItemThemeAnimation {
    type Vtable = IDragItemThemeAnimation_Vtbl;
}
unsafe impl ::windows::core::Interface for IDragItemThemeAnimation {
    const IID: ::windows::core::GUID =
        ::windows::core::GUID::from_u128(0x648e690e_a2c0_58ca_b15d_db6fccc663f2);
}
#[repr(C)]
#[doc(hidden)]
pub struct IDragItemThemeAnimation_Vtbl {
    pub base__: ::windows::core::IInspectable_Vtbl,
    pub TargetName: unsafe extern "system" fn(
        this: *mut ::core::ffi::c_void,
        result__: *mut ::core::mem::ManuallyDrop<::windows::core::HSTRING>,
    ) -> ::windows::core::HRESULT,
    pub SetTargetName: unsafe extern "system" fn(
        this: *mut ::core::ffi::c_void,
        value: ::core::mem::ManuallyDrop<::windows::core::HSTRING>,
    ) -> ::windows::core::HRESULT,
}
#[doc(hidden)]
#[repr(transparent)]
pub struct IDragItemThemeAnimationStatics(::windows::core::IUnknown);
unsafe impl ::windows::core::Vtable for IDragItemThemeAnimationStatics {
    type Vtable = IDragItemThemeAnimationStatics_Vtbl;
}
unsafe impl ::windows::core::Interface for IDragItemThemeAnimationStatics {
    const IID: ::windows::core::GUID =
        ::windows::core::GUID::from_u128(0xcdbdb41a_ce84_50a1_8b96_96599cd9619d);
}
#[repr(C)]
#[doc(hidden)]
pub struct IDragItemThemeAnimationStatics_Vtbl {
    pub base__: ::windows::core::IInspectable_Vtbl,
    pub TargetNameProperty: unsafe extern "system" fn(
        this: *mut ::core::ffi::c_void,
        result__: *mut *mut ::core::ffi::c_void,
    ) -> ::windows::core::HRESULT,
}
#[doc(hidden)]
#[repr(transparent)]
pub struct IDragOverThemeAnimation(::windows::core::IUnknown);
unsafe impl ::windows::core::Vtable for IDragOverThemeAnimation {
    type Vtable = IDragOverThemeAnimation_Vtbl;
}
unsafe impl ::windows::core::Interface for IDragOverThemeAnimation {
    const IID: ::windows::core::GUID =
        ::windows::core::GUID::from_u128(0x633cd3c0_71af_52fd_993e_504e3e6f56d4);
}
#[repr(C)]
#[doc(hidden)]
pub struct IDragOverThemeAnimation_Vtbl {
    pub base__: ::windows::core::IInspectable_Vtbl,
    pub TargetName: unsafe extern "system" fn(
        this: *mut ::core::ffi::c_void,
        result__: *mut ::core::mem::ManuallyDrop<::windows::core::HSTRING>,
    ) -> ::windows::core::HRESULT,
    pub SetTargetName: unsafe extern "system" fn(
        this: *mut ::core::ffi::c_void,
        value: ::core::mem::ManuallyDrop<::windows::core::HSTRING>,
    ) -> ::windows::core::HRESULT,
    pub ToOffset: unsafe extern "system" fn(
        this: *mut ::core::ffi::c_void,
        result__: *mut f64,
    ) -> ::windows::core::HRESULT,
    pub SetToOffset: unsafe extern "system" fn(
        this: *mut ::core::ffi::c_void,
        value: f64,
    ) -> ::windows::core::HRESULT,
    #[cfg(feature = "UI_Xaml_Controls_Primitives")]
    pub Direction: unsafe extern "system" fn(
        this: *mut ::core::ffi::c_void,
        result__: *mut super::super::Controls::Primitives::AnimationDirection,
    ) -> ::windows::core::HRESULT,
    #[cfg(not(feature = "UI_Xaml_Controls_Primitives"))]
    Direction: usize,
    #[cfg(feature = "UI_Xaml_Controls_Primitives")]
    pub SetDirection: unsafe extern "system" fn(
        this: *mut ::core::ffi::c_void,
        value: super::super::Controls::Primitives::AnimationDirection,
    ) -> ::windows::core::HRESULT,
    #[cfg(not(feature = "UI_Xaml_Controls_Primitives"))]
    SetDirection: usize,
}
#[doc(hidden)]
#[repr(transparent)]
pub struct IDragOverThemeAnimationStatics(::windows::core::IUnknown);
unsafe impl ::windows::core::Vtable for IDragOverThemeAnimationStatics {
    type Vtable = IDragOverThemeAnimationStatics_Vtbl;
}
unsafe impl ::windows::core::Interface for IDragOverThemeAnimationStatics {
    const IID: ::windows::core::GUID =
        ::windows::core::GUID::from_u128(0x8301afd2_68b2_5c6c_aadf_9a98d620e8d2);
}
#[repr(C)]
#[doc(hidden)]
pub struct IDragOverThemeAnimationStatics_Vtbl {
    pub base__: ::windows::core::IInspectable_Vtbl,
    pub TargetNameProperty: unsafe extern "system" fn(
        this: *mut ::core::ffi::c_void,
        result__: *mut *mut ::core::ffi::c_void,
    ) -> ::windows::core::HRESULT,
    pub ToOffsetProperty: unsafe extern "system" fn(
        this: *mut ::core::ffi::c_void,
        result__: *mut *mut ::core::ffi::c_void,
    ) -> ::windows::core::HRESULT,
    pub DirectionProperty: unsafe extern "system" fn(
        this: *mut ::core::ffi::c_void,
        result__: *mut *mut ::core::ffi::c_void,
    ) -> ::windows::core::HRESULT,
}
#[doc(hidden)]
#[repr(transparent)]
pub struct IDrillInNavigationTransitionInfo(::windows::core::IUnknown);
unsafe impl ::windows::core::Vtable for IDrillInNavigationTransitionInfo {
    type Vtable = IDrillInNavigationTransitionInfo_Vtbl;
}
unsafe impl ::windows::core::Interface for IDrillInNavigationTransitionInfo {
    const IID: ::windows::core::GUID =
        ::windows::core::GUID::from_u128(0x5d5863d6_4bbf_5b30_94fa_034531cfa2aa);
}
#[repr(C)]
#[doc(hidden)]
pub struct IDrillInNavigationTransitionInfo_Vtbl {
    pub base__: ::windows::core::IInspectable_Vtbl,
}
#[doc(hidden)]
#[repr(transparent)]
pub struct IDrillInThemeAnimation(::windows::core::IUnknown);
unsafe impl ::windows::core::Vtable for IDrillInThemeAnimation {
    type Vtable = IDrillInThemeAnimation_Vtbl;
}
unsafe impl ::windows::core::Interface for IDrillInThemeAnimation {
    const IID: ::windows::core::GUID =
        ::windows::core::GUID::from_u128(0x097577e0_3027_5f24_af8c_976d9faed830);
}
#[repr(C)]
#[doc(hidden)]
pub struct IDrillInThemeAnimation_Vtbl {
    pub base__: ::windows::core::IInspectable_Vtbl,
    pub EntranceTargetName: unsafe extern "system" fn(
        this: *mut ::core::ffi::c_void,
        result__: *mut ::core::mem::ManuallyDrop<::windows::core::HSTRING>,
    ) -> ::windows::core::HRESULT,
    pub SetEntranceTargetName: unsafe extern "system" fn(
        this: *mut ::core::ffi::c_void,
        value: ::core::mem::ManuallyDrop<::windows::core::HSTRING>,
    ) -> ::windows::core::HRESULT,
    pub EntranceTarget: unsafe extern "system" fn(
        this: *mut ::core::ffi::c_void,
        result__: *mut *mut ::core::ffi::c_void,
    ) -> ::windows::core::HRESULT,
    pub SetEntranceTarget: unsafe extern "system" fn(
        this: *mut ::core::ffi::c_void,
        value: *mut ::core::ffi::c_void,
    ) -> ::windows::core::HRESULT,
    pub ExitTargetName: unsafe extern "system" fn(
        this: *mut ::core::ffi::c_void,
        result__: *mut ::core::mem::ManuallyDrop<::windows::core::HSTRING>,
    ) -> ::windows::core::HRESULT,
    pub SetExitTargetName: unsafe extern "system" fn(
        this: *mut ::core::ffi::c_void,
        value: ::core::mem::ManuallyDrop<::windows::core::HSTRING>,
    ) -> ::windows::core::HRESULT,
    pub ExitTarget: unsafe extern "system" fn(
        this: *mut ::core::ffi::c_void,
        result__: *mut *mut ::core::ffi::c_void,
    ) -> ::windows::core::HRESULT,
    pub SetExitTarget: unsafe extern "system" fn(
        this: *mut ::core::ffi::c_void,
        value: *mut ::core::ffi::c_void,
    ) -> ::windows::core::HRESULT,
}
#[doc(hidden)]
#[repr(transparent)]
pub struct IDrillInThemeAnimationStatics(::windows::core::IUnknown);
unsafe impl ::windows::core::Vtable for IDrillInThemeAnimationStatics {
    type Vtable = IDrillInThemeAnimationStatics_Vtbl;
}
unsafe impl ::windows::core::Interface for IDrillInThemeAnimationStatics {
    const IID: ::windows::core::GUID =
        ::windows::core::GUID::from_u128(0xba24258e_3a8e_5804_915a_7670893dbea4);
}
#[repr(C)]
#[doc(hidden)]
pub struct IDrillInThemeAnimationStatics_Vtbl {
    pub base__: ::windows::core::IInspectable_Vtbl,
    pub EntranceTargetNameProperty: unsafe extern "system" fn(
        this: *mut ::core::ffi::c_void,
        result__: *mut *mut ::core::ffi::c_void,
    ) -> ::windows::core::HRESULT,
    pub EntranceTargetProperty: unsafe extern "system" fn(
        this: *mut ::core::ffi::c_void,
        result__: *mut *mut ::core::ffi::c_void,
    ) -> ::windows::core::HRESULT,
    pub ExitTargetNameProperty: unsafe extern "system" fn(
        this: *mut ::core::ffi::c_void,
        result__: *mut *mut ::core::ffi::c_void,
    ) -> ::windows::core::HRESULT,
    pub ExitTargetProperty: unsafe extern "system" fn(
        this: *mut ::core::ffi::c_void,
        result__: *mut *mut ::core::ffi::c_void,
    ) -> ::windows::core::HRESULT,
}
#[doc(hidden)]
#[repr(transparent)]
pub struct IDrillOutThemeAnimation(::windows::core::IUnknown);
unsafe impl ::windows::core::Vtable for IDrillOutThemeAnimation {
    type Vtable = IDrillOutThemeAnimation_Vtbl;
}
unsafe impl ::windows::core::Interface for IDrillOutThemeAnimation {
    const IID: ::windows::core::GUID =
        ::windows::core::GUID::from_u128(0x9a93b9cc_925f_525a_9eac_55d39db3d314);
}
#[repr(C)]
#[doc(hidden)]
pub struct IDrillOutThemeAnimation_Vtbl {
    pub base__: ::windows::core::IInspectable_Vtbl,
    pub EntranceTargetName: unsafe extern "system" fn(
        this: *mut ::core::ffi::c_void,
        result__: *mut ::core::mem::ManuallyDrop<::windows::core::HSTRING>,
    ) -> ::windows::core::HRESULT,
    pub SetEntranceTargetName: unsafe extern "system" fn(
        this: *mut ::core::ffi::c_void,
        value: ::core::mem::ManuallyDrop<::windows::core::HSTRING>,
    ) -> ::windows::core::HRESULT,
    pub EntranceTarget: unsafe extern "system" fn(
        this: *mut ::core::ffi::c_void,
        result__: *mut *mut ::core::ffi::c_void,
    ) -> ::windows::core::HRESULT,
    pub SetEntranceTarget: unsafe extern "system" fn(
        this: *mut ::core::ffi::c_void,
        value: *mut ::core::ffi::c_void,
    ) -> ::windows::core::HRESULT,
    pub ExitTargetName: unsafe extern "system" fn(
        this: *mut ::core::ffi::c_void,
        result__: *mut ::core::mem::ManuallyDrop<::windows::core::HSTRING>,
    ) -> ::windows::core::HRESULT,
    pub SetExitTargetName: unsafe extern "system" fn(
        this: *mut ::core::ffi::c_void,
        value: ::core::mem::ManuallyDrop<::windows::core::HSTRING>,
    ) -> ::windows::core::HRESULT,
    pub ExitTarget: unsafe extern "system" fn(
        this: *mut ::core::ffi::c_void,
        result__: *mut *mut ::core::ffi::c_void,
    ) -> ::windows::core::HRESULT,
    pub SetExitTarget: unsafe extern "system" fn(
        this: *mut ::core::ffi::c_void,
        value: *mut ::core::ffi::c_void,
    ) -> ::windows::core::HRESULT,
}
#[doc(hidden)]
#[repr(transparent)]
pub struct IDrillOutThemeAnimationStatics(::windows::core::IUnknown);
unsafe impl ::windows::core::Vtable for IDrillOutThemeAnimationStatics {
    type Vtable = IDrillOutThemeAnimationStatics_Vtbl;
}
unsafe impl ::windows::core::Interface for IDrillOutThemeAnimationStatics {
    const IID: ::windows::core::GUID =
        ::windows::core::GUID::from_u128(0x6eb9693b_c0d0_5bae_9cd2_10d80b8d3867);
}
#[repr(C)]
#[doc(hidden)]
pub struct IDrillOutThemeAnimationStatics_Vtbl {
    pub base__: ::windows::core::IInspectable_Vtbl,
    pub EntranceTargetNameProperty: unsafe extern "system" fn(
        this: *mut ::core::ffi::c_void,
        result__: *mut *mut ::core::ffi::c_void,
    ) -> ::windows::core::HRESULT,
    pub EntranceTargetProperty: unsafe extern "system" fn(
        this: *mut ::core::ffi::c_void,
        result__: *mut *mut ::core::ffi::c_void,
    ) -> ::windows::core::HRESULT,
    pub ExitTargetNameProperty: unsafe extern "system" fn(
        this: *mut ::core::ffi::c_void,
        result__: *mut *mut ::core::ffi::c_void,
    ) -> ::windows::core::HRESULT,
    pub ExitTargetProperty: unsafe extern "system" fn(
        this: *mut ::core::ffi::c_void,
        result__: *mut *mut ::core::ffi::c_void,
    ) -> ::windows::core::HRESULT,
}
#[doc(hidden)]
#[repr(transparent)]
pub struct IDropTargetItemThemeAnimation(::windows::core::IUnknown);
unsafe impl ::windows::core::Vtable for IDropTargetItemThemeAnimation {
    type Vtable = IDropTargetItemThemeAnimation_Vtbl;
}
unsafe impl ::windows::core::Interface for IDropTargetItemThemeAnimation {
    const IID: ::windows::core::GUID =
        ::windows::core::GUID::from_u128(0xb97f19c0_f1e2_5705_a252_2db05d2e5a54);
}
#[repr(C)]
#[doc(hidden)]
pub struct IDropTargetItemThemeAnimation_Vtbl {
    pub base__: ::windows::core::IInspectable_Vtbl,
    pub TargetName: unsafe extern "system" fn(
        this: *mut ::core::ffi::c_void,
        result__: *mut ::core::mem::ManuallyDrop<::windows::core::HSTRING>,
    ) -> ::windows::core::HRESULT,
    pub SetTargetName: unsafe extern "system" fn(
        this: *mut ::core::ffi::c_void,
        value: ::core::mem::ManuallyDrop<::windows::core::HSTRING>,
    ) -> ::windows::core::HRESULT,
}
#[doc(hidden)]
#[repr(transparent)]
pub struct IDropTargetItemThemeAnimationStatics(::windows::core::IUnknown);
unsafe impl ::windows::core::Vtable for IDropTargetItemThemeAnimationStatics {
    type Vtable = IDropTargetItemThemeAnimationStatics_Vtbl;
}
unsafe impl ::windows::core::Interface for IDropTargetItemThemeAnimationStatics {
    const IID: ::windows::core::GUID =
        ::windows::core::GUID::from_u128(0xa0ce9e16_ae12_55fc_a9e5_29dc94a713bd);
}
#[repr(C)]
#[doc(hidden)]
pub struct IDropTargetItemThemeAnimationStatics_Vtbl {
    pub base__: ::windows::core::IInspectable_Vtbl,
    pub TargetNameProperty: unsafe extern "system" fn(
        this: *mut ::core::ffi::c_void,
        result__: *mut *mut ::core::ffi::c_void,
    ) -> ::windows::core::HRESULT,
}
#[doc(hidden)]
#[repr(transparent)]
pub struct IEasingColorKeyFrame(::windows::core::IUnknown);
unsafe impl ::windows::core::Vtable for IEasingColorKeyFrame {
    type Vtable = IEasingColorKeyFrame_Vtbl;
}
unsafe impl ::windows::core::Interface for IEasingColorKeyFrame {
    const IID: ::windows::core::GUID =
        ::windows::core::GUID::from_u128(0xa137a710_da3c_5426_a1a2_3a5a672a4264);
}
#[repr(C)]
#[doc(hidden)]
pub struct IEasingColorKeyFrame_Vtbl {
    pub base__: ::windows::core::IInspectable_Vtbl,
    pub EasingFunction: unsafe extern "system" fn(
        this: *mut ::core::ffi::c_void,
        result__: *mut *mut ::core::ffi::c_void,
    ) -> ::windows::core::HRESULT,
    pub SetEasingFunction: unsafe extern "system" fn(
        this: *mut ::core::ffi::c_void,
        value: *mut ::core::ffi::c_void,
    ) -> ::windows::core::HRESULT,
}
#[doc(hidden)]
#[repr(transparent)]
pub struct IEasingColorKeyFrameStatics(::windows::core::IUnknown);
unsafe impl ::windows::core::Vtable for IEasingColorKeyFrameStatics {
    type Vtable = IEasingColorKeyFrameStatics_Vtbl;
}
unsafe impl ::windows::core::Interface for IEasingColorKeyFrameStatics {
    const IID: ::windows::core::GUID =
        ::windows::core::GUID::from_u128(0xc57818c0_3361_587d_b381_620b69251bcf);
}
#[repr(C)]
#[doc(hidden)]
pub struct IEasingColorKeyFrameStatics_Vtbl {
    pub base__: ::windows::core::IInspectable_Vtbl,
    pub EasingFunctionProperty: unsafe extern "system" fn(
        this: *mut ::core::ffi::c_void,
        result__: *mut *mut ::core::ffi::c_void,
    ) -> ::windows::core::HRESULT,
}
#[doc(hidden)]
#[repr(transparent)]
pub struct IEasingDoubleKeyFrame(::windows::core::IUnknown);
unsafe impl ::windows::core::Vtable for IEasingDoubleKeyFrame {
    type Vtable = IEasingDoubleKeyFrame_Vtbl;
}
unsafe impl ::windows::core::Interface for IEasingDoubleKeyFrame {
    const IID: ::windows::core::GUID =
        ::windows::core::GUID::from_u128(0x935d9b7e_da61_5bb2_a574_7d2e53b60561);
}
#[repr(C)]
#[doc(hidden)]
pub struct IEasingDoubleKeyFrame_Vtbl {
    pub base__: ::windows::core::IInspectable_Vtbl,
    pub EasingFunction: unsafe extern "system" fn(
        this: *mut ::core::ffi::c_void,
        result__: *mut *mut ::core::ffi::c_void,
    ) -> ::windows::core::HRESULT,
    pub SetEasingFunction: unsafe extern "system" fn(
        this: *mut ::core::ffi::c_void,
        value: *mut ::core::ffi::c_void,
    ) -> ::windows::core::HRESULT,
}
#[doc(hidden)]
#[repr(transparent)]
pub struct IEasingDoubleKeyFrameStatics(::windows::core::IUnknown);
unsafe impl ::windows::core::Vtable for IEasingDoubleKeyFrameStatics {
    type Vtable = IEasingDoubleKeyFrameStatics_Vtbl;
}
unsafe impl ::windows::core::Interface for IEasingDoubleKeyFrameStatics {
    const IID: ::windows::core::GUID =
        ::windows::core::GUID::from_u128(0x8cc08735_4221_5127_ab2f_1e7e3df95fb9);
}
#[repr(C)]
#[doc(hidden)]
pub struct IEasingDoubleKeyFrameStatics_Vtbl {
    pub base__: ::windows::core::IInspectable_Vtbl,
    pub EasingFunctionProperty: unsafe extern "system" fn(
        this: *mut ::core::ffi::c_void,
        result__: *mut *mut ::core::ffi::c_void,
    ) -> ::windows::core::HRESULT,
}
#[doc(hidden)]
#[repr(transparent)]
pub struct IEasingFunctionBase(::windows::core::IUnknown);
unsafe impl ::windows::core::Vtable for IEasingFunctionBase {
    type Vtable = IEasingFunctionBase_Vtbl;
}
unsafe impl ::windows::core::Interface for IEasingFunctionBase {
    const IID: ::windows::core::GUID =
        ::windows::core::GUID::from_u128(0x4fab519a_a93d_5d28_af18_84532bd32efe);
}
#[repr(C)]
#[doc(hidden)]
pub struct IEasingFunctionBase_Vtbl {
    pub base__: ::windows::core::IInspectable_Vtbl,
    pub EasingMode: unsafe extern "system" fn(
        this: *mut ::core::ffi::c_void,
        result__: *mut EasingMode,
    ) -> ::windows::core::HRESULT,
    pub SetEasingMode: unsafe extern "system" fn(
        this: *mut ::core::ffi::c_void,
        value: EasingMode,
    ) -> ::windows::core::HRESULT,
    pub Ease: unsafe extern "system" fn(
        this: *mut ::core::ffi::c_void,
        normalizedtime: f64,
        result__: *mut f64,
    ) -> ::windows::core::HRESULT,
}
#[doc(hidden)]
#[repr(transparent)]
pub struct IEasingFunctionBaseFactory(::windows::core::IUnknown);
unsafe impl ::windows::core::Vtable for IEasingFunctionBaseFactory {
    type Vtable = IEasingFunctionBaseFactory_Vtbl;
}
unsafe impl ::windows::core::Interface for IEasingFunctionBaseFactory {
    const IID: ::windows::core::GUID =
        ::windows::core::GUID::from_u128(0xb1b92f4c_5ec7_5cda_b1d4_fd159595ca47);
}
#[repr(C)]
#[doc(hidden)]
pub struct IEasingFunctionBaseFactory_Vtbl {
    pub base__: ::windows::core::IInspectable_Vtbl,
}
#[doc(hidden)]
#[repr(transparent)]
pub struct IEasingFunctionBaseStatics(::windows::core::IUnknown);
unsafe impl ::windows::core::Vtable for IEasingFunctionBaseStatics {
    type Vtable = IEasingFunctionBaseStatics_Vtbl;
}
unsafe impl ::windows::core::Interface for IEasingFunctionBaseStatics {
    const IID: ::windows::core::GUID =
        ::windows::core::GUID::from_u128(0x09032445_967c_52b8_b712_15f066b32821);
}
#[repr(C)]
#[doc(hidden)]
pub struct IEasingFunctionBaseStatics_Vtbl {
    pub base__: ::windows::core::IInspectable_Vtbl,
    pub EasingModeProperty: unsafe extern "system" fn(
        this: *mut ::core::ffi::c_void,
        result__: *mut *mut ::core::ffi::c_void,
    ) -> ::windows::core::HRESULT,
}
#[doc(hidden)]
#[repr(transparent)]
pub struct IEasingPointKeyFrame(::windows::core::IUnknown);
unsafe impl ::windows::core::Vtable for IEasingPointKeyFrame {
    type Vtable = IEasingPointKeyFrame_Vtbl;
}
unsafe impl ::windows::core::Interface for IEasingPointKeyFrame {
    const IID: ::windows::core::GUID =
        ::windows::core::GUID::from_u128(0x9406ee8e_3641_54fe_a424_83420ea45cd3);
}
#[repr(C)]
#[doc(hidden)]
pub struct IEasingPointKeyFrame_Vtbl {
    pub base__: ::windows::core::IInspectable_Vtbl,
    pub EasingFunction: unsafe extern "system" fn(
        this: *mut ::core::ffi::c_void,
        result__: *mut *mut ::core::ffi::c_void,
    ) -> ::windows::core::HRESULT,
    pub SetEasingFunction: unsafe extern "system" fn(
        this: *mut ::core::ffi::c_void,
        value: *mut ::core::ffi::c_void,
    ) -> ::windows::core::HRESULT,
}
#[doc(hidden)]
#[repr(transparent)]
pub struct IEasingPointKeyFrameStatics(::windows::core::IUnknown);
unsafe impl ::windows::core::Vtable for IEasingPointKeyFrameStatics {
    type Vtable = IEasingPointKeyFrameStatics_Vtbl;
}
unsafe impl ::windows::core::Interface for IEasingPointKeyFrameStatics {
    const IID: ::windows::core::GUID =
        ::windows::core::GUID::from_u128(0xac727659_92a3_52ea_8949_b609e48c233d);
}
#[repr(C)]
#[doc(hidden)]
pub struct IEasingPointKeyFrameStatics_Vtbl {
    pub base__: ::windows::core::IInspectable_Vtbl,
    pub EasingFunctionProperty: unsafe extern "system" fn(
        this: *mut ::core::ffi::c_void,
        result__: *mut *mut ::core::ffi::c_void,
    ) -> ::windows::core::HRESULT,
}
#[doc(hidden)]
#[repr(transparent)]
pub struct IEdgeUIThemeTransition(::windows::core::IUnknown);
unsafe impl ::windows::core::Vtable for IEdgeUIThemeTransition {
    type Vtable = IEdgeUIThemeTransition_Vtbl;
}
unsafe impl ::windows::core::Interface for IEdgeUIThemeTransition {
    const IID: ::windows::core::GUID =
        ::windows::core::GUID::from_u128(0x57089964_e358_5fe2_84e7_15e82bba9c06);
}
#[repr(C)]
#[doc(hidden)]
pub struct IEdgeUIThemeTransition_Vtbl {
    pub base__: ::windows::core::IInspectable_Vtbl,
    #[cfg(feature = "UI_Xaml_Controls_Primitives")]
    pub Edge: unsafe extern "system" fn(
        this: *mut ::core::ffi::c_void,
        result__: *mut super::super::Controls::Primitives::EdgeTransitionLocation,
    ) -> ::windows::core::HRESULT,
    #[cfg(not(feature = "UI_Xaml_Controls_Primitives"))]
    Edge: usize,
    #[cfg(feature = "UI_Xaml_Controls_Primitives")]
    pub SetEdge: unsafe extern "system" fn(
        this: *mut ::core::ffi::c_void,
        value: super::super::Controls::Primitives::EdgeTransitionLocation,
    ) -> ::windows::core::HRESULT,
    #[cfg(not(feature = "UI_Xaml_Controls_Primitives"))]
    SetEdge: usize,
}
#[doc(hidden)]
#[repr(transparent)]
pub struct IEdgeUIThemeTransitionStatics(::windows::core::IUnknown);
unsafe impl ::windows::core::Vtable for IEdgeUIThemeTransitionStatics {
    type Vtable = IEdgeUIThemeTransitionStatics_Vtbl;
}
unsafe impl ::windows::core::Interface for IEdgeUIThemeTransitionStatics {
    const IID: ::windows::core::GUID =
        ::windows::core::GUID::from_u128(0x316af8d4_d2a0_5d27_9af6_747797965d46);
}
#[repr(C)]
#[doc(hidden)]
pub struct IEdgeUIThemeTransitionStatics_Vtbl {
    pub base__: ::windows::core::IInspectable_Vtbl,
    pub EdgeProperty: unsafe extern "system" fn(
        this: *mut ::core::ffi::c_void,
        result__: *mut *mut ::core::ffi::c_void,
    ) -> ::windows::core::HRESULT,
}
#[doc(hidden)]
#[repr(transparent)]
pub struct IElasticEase(::windows::core::IUnknown);
unsafe impl ::windows::core::Vtable for IElasticEase {
    type Vtable = IElasticEase_Vtbl;
}
unsafe impl ::windows::core::Interface for IElasticEase {
    const IID: ::windows::core::GUID =
        ::windows::core::GUID::from_u128(0x2b18d50b_4d34_509b_915c_61b1aa6f83d8);
}
#[repr(C)]
#[doc(hidden)]
pub struct IElasticEase_Vtbl {
    pub base__: ::windows::core::IInspectable_Vtbl,
    pub Oscillations: unsafe extern "system" fn(
        this: *mut ::core::ffi::c_void,
        result__: *mut i32,
    ) -> ::windows::core::HRESULT,
    pub SetOscillations: unsafe extern "system" fn(
        this: *mut ::core::ffi::c_void,
        value: i32,
    ) -> ::windows::core::HRESULT,
    pub Springiness: unsafe extern "system" fn(
        this: *mut ::core::ffi::c_void,
        result__: *mut f64,
    ) -> ::windows::core::HRESULT,
    pub SetSpringiness: unsafe extern "system" fn(
        this: *mut ::core::ffi::c_void,
        value: f64,
    ) -> ::windows::core::HRESULT,
}
#[doc(hidden)]
#[repr(transparent)]
pub struct IElasticEaseStatics(::windows::core::IUnknown);
unsafe impl ::windows::core::Vtable for IElasticEaseStatics {
    type Vtable = IElasticEaseStatics_Vtbl;
}
unsafe impl ::windows::core::Interface for IElasticEaseStatics {
    const IID: ::windows::core::GUID =
        ::windows::core::GUID::from_u128(0x95fd9290_d279_5857_9f50_3f299a2d02f4);
}
#[repr(C)]
#[doc(hidden)]
pub struct IElasticEaseStatics_Vtbl {
    pub base__: ::windows::core::IInspectable_Vtbl,
    pub OscillationsProperty: unsafe extern "system" fn(
        this: *mut ::core::ffi::c_void,
        result__: *mut *mut ::core::ffi::c_void,
    ) -> ::windows::core::HRESULT,
    pub SpringinessProperty: unsafe extern "system" fn(
        this: *mut ::core::ffi::c_void,
        result__: *mut *mut ::core::ffi::c_void,
    ) -> ::windows::core::HRESULT,
}
#[doc(hidden)]
#[repr(transparent)]
pub struct IEntranceNavigationTransitionInfo(::windows::core::IUnknown);
unsafe impl ::windows::core::Vtable for IEntranceNavigationTransitionInfo {
    type Vtable = IEntranceNavigationTransitionInfo_Vtbl;
}
unsafe impl ::windows::core::Interface for IEntranceNavigationTransitionInfo {
    const IID: ::windows::core::GUID =
        ::windows::core::GUID::from_u128(0xdec74921_0ed7_54e1_8c1d_30b8cccc4b8d);
}
#[repr(C)]
#[doc(hidden)]
pub struct IEntranceNavigationTransitionInfo_Vtbl {
    pub base__: ::windows::core::IInspectable_Vtbl,
}
#[doc(hidden)]
#[repr(transparent)]
pub struct IEntranceNavigationTransitionInfoStatics(::windows::core::IUnknown);
unsafe impl ::windows::core::Vtable for IEntranceNavigationTransitionInfoStatics {
    type Vtable = IEntranceNavigationTransitionInfoStatics_Vtbl;
}
unsafe impl ::windows::core::Interface for IEntranceNavigationTransitionInfoStatics {
    const IID: ::windows::core::GUID =
        ::windows::core::GUID::from_u128(0xf1096de1_1f79_5d38_a4d6_16f3bdaab7f0);
}
#[repr(C)]
#[doc(hidden)]
pub struct IEntranceNavigationTransitionInfoStatics_Vtbl {
    pub base__: ::windows::core::IInspectable_Vtbl,
    pub IsTargetElementProperty: unsafe extern "system" fn(
        this: *mut ::core::ffi::c_void,
        result__: *mut *mut ::core::ffi::c_void,
    ) -> ::windows::core::HRESULT,
    pub GetIsTargetElement: unsafe extern "system" fn(
        this: *mut ::core::ffi::c_void,
        element: *mut ::core::ffi::c_void,
        result__: *mut bool,
    ) -> ::windows::core::HRESULT,
    pub SetIsTargetElement: unsafe extern "system" fn(
        this: *mut ::core::ffi::c_void,
        element: *mut ::core::ffi::c_void,
        value: bool,
    ) -> ::windows::core::HRESULT,
}
#[doc(hidden)]
#[repr(transparent)]
pub struct IEntranceThemeTransition(::windows::core::IUnknown);
unsafe impl ::windows::core::Vtable for IEntranceThemeTransition {
    type Vtable = IEntranceThemeTransition_Vtbl;
}
unsafe impl ::windows::core::Interface for IEntranceThemeTransition {
    const IID: ::windows::core::GUID =
        ::windows::core::GUID::from_u128(0x8eb681fa_1629_5e29_ac1e_70f3639329f8);
}
#[repr(C)]
#[doc(hidden)]
pub struct IEntranceThemeTransition_Vtbl {
    pub base__: ::windows::core::IInspectable_Vtbl,
    pub FromHorizontalOffset: unsafe extern "system" fn(
        this: *mut ::core::ffi::c_void,
        result__: *mut f64,
    ) -> ::windows::core::HRESULT,
    pub SetFromHorizontalOffset: unsafe extern "system" fn(
        this: *mut ::core::ffi::c_void,
        value: f64,
    ) -> ::windows::core::HRESULT,
    pub FromVerticalOffset: unsafe extern "system" fn(
        this: *mut ::core::ffi::c_void,
        result__: *mut f64,
    ) -> ::windows::core::HRESULT,
    pub SetFromVerticalOffset: unsafe extern "system" fn(
        this: *mut ::core::ffi::c_void,
        value: f64,
    ) -> ::windows::core::HRESULT,
    pub IsStaggeringEnabled: unsafe extern "system" fn(
        this: *mut ::core::ffi::c_void,
        result__: *mut bool,
    ) -> ::windows::core::HRESULT,
    pub SetIsStaggeringEnabled: unsafe extern "system" fn(
        this: *mut ::core::ffi::c_void,
        value: bool,
    ) -> ::windows::core::HRESULT,
}
#[doc(hidden)]
#[repr(transparent)]
pub struct IEntranceThemeTransitionStatics(::windows::core::IUnknown);
unsafe impl ::windows::core::Vtable for IEntranceThemeTransitionStatics {
    type Vtable = IEntranceThemeTransitionStatics_Vtbl;
}
unsafe impl ::windows::core::Interface for IEntranceThemeTransitionStatics {
    const IID: ::windows::core::GUID =
        ::windows::core::GUID::from_u128(0xc99e5435_facc_50af_b96c_63b14fe7156e);
}
#[repr(C)]
#[doc(hidden)]
pub struct IEntranceThemeTransitionStatics_Vtbl {
    pub base__: ::windows::core::IInspectable_Vtbl,
    pub FromHorizontalOffsetProperty: unsafe extern "system" fn(
        this: *mut ::core::ffi::c_void,
        result__: *mut *mut ::core::ffi::c_void,
    ) -> ::windows::core::HRESULT,
    pub FromVerticalOffsetProperty: unsafe extern "system" fn(
        this: *mut ::core::ffi::c_void,
        result__: *mut *mut ::core::ffi::c_void,
    ) -> ::windows::core::HRESULT,
    pub IsStaggeringEnabledProperty: unsafe extern "system" fn(
        this: *mut ::core::ffi::c_void,
        result__: *mut *mut ::core::ffi::c_void,
    ) -> ::windows::core::HRESULT,
}
#[doc(hidden)]
#[repr(transparent)]
pub struct IExponentialEase(::windows::core::IUnknown);
unsafe impl ::windows::core::Vtable for IExponentialEase {
    type Vtable = IExponentialEase_Vtbl;
}
unsafe impl ::windows::core::Interface for IExponentialEase {
    const IID: ::windows::core::GUID =
        ::windows::core::GUID::from_u128(0x4d289262_e832_5fbc_a98b_87a6ecb3b6cc);
}
#[repr(C)]
#[doc(hidden)]
pub struct IExponentialEase_Vtbl {
    pub base__: ::windows::core::IInspectable_Vtbl,
    pub Exponent: unsafe extern "system" fn(
        this: *mut ::core::ffi::c_void,
        result__: *mut f64,
    ) -> ::windows::core::HRESULT,
    pub SetExponent: unsafe extern "system" fn(
        this: *mut ::core::ffi::c_void,
        value: f64,
    ) -> ::windows::core::HRESULT,
}
#[doc(hidden)]
#[repr(transparent)]
pub struct IExponentialEaseStatics(::windows::core::IUnknown);
unsafe impl ::windows::core::Vtable for IExponentialEaseStatics {
    type Vtable = IExponentialEaseStatics_Vtbl;
}
unsafe impl ::windows::core::Interface for IExponentialEaseStatics {
    const IID: ::windows::core::GUID =
        ::windows::core::GUID::from_u128(0x8394ab8f_ddf1_55d0_acf1_07fedd929bb5);
}
#[repr(C)]
#[doc(hidden)]
pub struct IExponentialEaseStatics_Vtbl {
    pub base__: ::windows::core::IInspectable_Vtbl,
    pub ExponentProperty: unsafe extern "system" fn(
        this: *mut ::core::ffi::c_void,
        result__: *mut *mut ::core::ffi::c_void,
    ) -> ::windows::core::HRESULT,
}
#[doc(hidden)]
#[repr(transparent)]
pub struct IFadeInThemeAnimation(::windows::core::IUnknown);
unsafe impl ::windows::core::Vtable for IFadeInThemeAnimation {
    type Vtable = IFadeInThemeAnimation_Vtbl;
}
unsafe impl ::windows::core::Interface for IFadeInThemeAnimation {
    const IID: ::windows::core::GUID =
        ::windows::core::GUID::from_u128(0x0dca074a_31cc_5e70_8b6b_8dbd7fff01f6);
}
#[repr(C)]
#[doc(hidden)]
pub struct IFadeInThemeAnimation_Vtbl {
    pub base__: ::windows::core::IInspectable_Vtbl,
    pub TargetName: unsafe extern "system" fn(
        this: *mut ::core::ffi::c_void,
        result__: *mut ::core::mem::ManuallyDrop<::windows::core::HSTRING>,
    ) -> ::windows::core::HRESULT,
    pub SetTargetName: unsafe extern "system" fn(
        this: *mut ::core::ffi::c_void,
        value: ::core::mem::ManuallyDrop<::windows::core::HSTRING>,
    ) -> ::windows::core::HRESULT,
}
#[doc(hidden)]
#[repr(transparent)]
pub struct IFadeInThemeAnimationStatics(::windows::core::IUnknown);
unsafe impl ::windows::core::Vtable for IFadeInThemeAnimationStatics {
    type Vtable = IFadeInThemeAnimationStatics_Vtbl;
}
unsafe impl ::windows::core::Interface for IFadeInThemeAnimationStatics {
    const IID: ::windows::core::GUID =
        ::windows::core::GUID::from_u128(0x5d74a6a6_92c6_5e49_865f_676087247179);
}
#[repr(C)]
#[doc(hidden)]
pub struct IFadeInThemeAnimationStatics_Vtbl {
    pub base__: ::windows::core::IInspectable_Vtbl,
    pub TargetNameProperty: unsafe extern "system" fn(
        this: *mut ::core::ffi::c_void,
        result__: *mut *mut ::core::ffi::c_void,
    ) -> ::windows::core::HRESULT,
}
#[doc(hidden)]
#[repr(transparent)]
pub struct IFadeOutThemeAnimation(::windows::core::IUnknown);
unsafe impl ::windows::core::Vtable for IFadeOutThemeAnimation {
    type Vtable = IFadeOutThemeAnimation_Vtbl;
}
unsafe impl ::windows::core::Interface for IFadeOutThemeAnimation {
    const IID: ::windows::core::GUID =
        ::windows::core::GUID::from_u128(0x114024d6_5d67_5c9c_83c5_54a8bd7b671a);
}
#[repr(C)]
#[doc(hidden)]
pub struct IFadeOutThemeAnimation_Vtbl {
    pub base__: ::windows::core::IInspectable_Vtbl,
    pub TargetName: unsafe extern "system" fn(
        this: *mut ::core::ffi::c_void,
        result__: *mut ::core::mem::ManuallyDrop<::windows::core::HSTRING>,
    ) -> ::windows::core::HRESULT,
    pub SetTargetName: unsafe extern "system" fn(
        this: *mut ::core::ffi::c_void,
        value: ::core::mem::ManuallyDrop<::windows::core::HSTRING>,
    ) -> ::windows::core::HRESULT,
}
#[doc(hidden)]
#[repr(transparent)]
pub struct IFadeOutThemeAnimationStatics(::windows::core::IUnknown);
unsafe impl ::windows::core::Vtable for IFadeOutThemeAnimationStatics {
    type Vtable = IFadeOutThemeAnimationStatics_Vtbl;
}
unsafe impl ::windows::core::Interface for IFadeOutThemeAnimationStatics {
    const IID: ::windows::core::GUID =
        ::windows::core::GUID::from_u128(0x0277bea1_a0a5_5e26_9b56_6a4208862738);
}
#[repr(C)]
#[doc(hidden)]
pub struct IFadeOutThemeAnimationStatics_Vtbl {
    pub base__: ::windows::core::IInspectable_Vtbl,
    pub TargetNameProperty: unsafe extern "system" fn(
        this: *mut ::core::ffi::c_void,
        result__: *mut *mut ::core::ffi::c_void,
    ) -> ::windows::core::HRESULT,
}
#[doc(hidden)]
#[repr(transparent)]
pub struct IGravityConnectedAnimationConfiguration(::windows::core::IUnknown);
unsafe impl ::windows::core::Vtable for IGravityConnectedAnimationConfiguration {
    type Vtable = IGravityConnectedAnimationConfiguration_Vtbl;
}
unsafe impl ::windows::core::Interface for IGravityConnectedAnimationConfiguration {
    const IID: ::windows::core::GUID =
        ::windows::core::GUID::from_u128(0x04c8b276_cff3_5a55_9229_33dc66c99e20);
}
#[repr(C)]
#[doc(hidden)]
pub struct IGravityConnectedAnimationConfiguration_Vtbl {
    pub base__: ::windows::core::IInspectable_Vtbl,
    pub IsShadowEnabled: unsafe extern "system" fn(
        this: *mut ::core::ffi::c_void,
        result__: *mut bool,
    ) -> ::windows::core::HRESULT,
    pub SetIsShadowEnabled: unsafe extern "system" fn(
        this: *mut ::core::ffi::c_void,
        value: bool,
    ) -> ::windows::core::HRESULT,
}
#[doc(hidden)]
#[repr(transparent)]
pub struct IGravityConnectedAnimationConfigurationFactory(::windows::core::IUnknown);
unsafe impl ::windows::core::Vtable for IGravityConnectedAnimationConfigurationFactory {
    type Vtable = IGravityConnectedAnimationConfigurationFactory_Vtbl;
}
unsafe impl ::windows::core::Interface for IGravityConnectedAnimationConfigurationFactory {
    const IID: ::windows::core::GUID =
        ::windows::core::GUID::from_u128(0xbc7a71b5_7cda_5bb7_967e_d6a031285a9c);
}
#[repr(C)]
#[doc(hidden)]
pub struct IGravityConnectedAnimationConfigurationFactory_Vtbl {
    pub base__: ::windows::core::IInspectable_Vtbl,
    pub CreateInstance: unsafe extern "system" fn(
        this: *mut ::core::ffi::c_void,
        baseinterface: *mut ::core::ffi::c_void,
        innerinterface: *mut *mut ::core::ffi::c_void,
        result__: *mut *mut ::core::ffi::c_void,
    ) -> ::windows::core::HRESULT,
}
#[doc(hidden)]
#[repr(transparent)]
pub struct IKeySpline(::windows::core::IUnknown);
unsafe impl ::windows::core::Vtable for IKeySpline {
    type Vtable = IKeySpline_Vtbl;
}
unsafe impl ::windows::core::Interface for IKeySpline {
    const IID: ::windows::core::GUID =
        ::windows::core::GUID::from_u128(0x130d8b2b_0b52_5253_881b_36ab48592e6b);
}
#[repr(C)]
#[doc(hidden)]
pub struct IKeySpline_Vtbl {
    pub base__: ::windows::core::IInspectable_Vtbl,
    pub ControlPoint1: unsafe extern "system" fn(
        this: *mut ::core::ffi::c_void,
        result__: *mut ::windows::Foundation::Point,
    ) -> ::windows::core::HRESULT,
    pub SetControlPoint1: unsafe extern "system" fn(
        this: *mut ::core::ffi::c_void,
        value: ::windows::Foundation::Point,
    ) -> ::windows::core::HRESULT,
    pub ControlPoint2: unsafe extern "system" fn(
        this: *mut ::core::ffi::c_void,
        result__: *mut ::windows::Foundation::Point,
    ) -> ::windows::core::HRESULT,
    pub SetControlPoint2: unsafe extern "system" fn(
        this: *mut ::core::ffi::c_void,
        value: ::windows::Foundation::Point,
    ) -> ::windows::core::HRESULT,
}
#[doc(hidden)]
#[repr(transparent)]
pub struct IKeyTimeHelper(::windows::core::IUnknown);
unsafe impl ::windows::core::Vtable for IKeyTimeHelper {
    type Vtable = IKeyTimeHelper_Vtbl;
}
unsafe impl ::windows::core::Interface for IKeyTimeHelper {
    const IID: ::windows::core::GUID =
        ::windows::core::GUID::from_u128(0xe354da44_1f24_59c6_bc5b_d6b1ba267e9c);
}
#[repr(C)]
#[doc(hidden)]
pub struct IKeyTimeHelper_Vtbl {
    pub base__: ::windows::core::IInspectable_Vtbl,
}
#[doc(hidden)]
#[repr(transparent)]
pub struct IKeyTimeHelperStatics(::windows::core::IUnknown);
unsafe impl ::windows::core::Vtable for IKeyTimeHelperStatics {
    type Vtable = IKeyTimeHelperStatics_Vtbl;
}
unsafe impl ::windows::core::Interface for IKeyTimeHelperStatics {
    const IID: ::windows::core::GUID =
        ::windows::core::GUID::from_u128(0xae5d22c9_0fdb_5823_8846_8a4d0b9eebfa);
}
#[repr(C)]
#[doc(hidden)]
pub struct IKeyTimeHelperStatics_Vtbl {
    pub base__: ::windows::core::IInspectable_Vtbl,
    pub FromTimeSpan: unsafe extern "system" fn(
        this: *mut ::core::ffi::c_void,
        timespan: ::windows::Foundation::TimeSpan,
        result__: *mut KeyTime,
    ) -> ::windows::core::HRESULT,
}
#[doc(hidden)]
#[repr(transparent)]
pub struct ILinearColorKeyFrame(::windows::core::IUnknown);
unsafe impl ::windows::core::Vtable for ILinearColorKeyFrame {
    type Vtable = ILinearColorKeyFrame_Vtbl;
}
unsafe impl ::windows::core::Interface for ILinearColorKeyFrame {
    const IID: ::windows::core::GUID =
        ::windows::core::GUID::from_u128(0x0bce4cd6_3a80_5f2f_932e_619a8546d0bd);
}
#[repr(C)]
#[doc(hidden)]
pub struct ILinearColorKeyFrame_Vtbl {
    pub base__: ::windows::core::IInspectable_Vtbl,
}
#[doc(hidden)]
#[repr(transparent)]
pub struct ILinearDoubleKeyFrame(::windows::core::IUnknown);
unsafe impl ::windows::core::Vtable for ILinearDoubleKeyFrame {
    type Vtable = ILinearDoubleKeyFrame_Vtbl;
}
unsafe impl ::windows::core::Interface for ILinearDoubleKeyFrame {
    const IID: ::windows::core::GUID =
        ::windows::core::GUID::from_u128(0x38a635b9_f613_55e0_aaec_9d4e097eff91);
}
#[repr(C)]
#[doc(hidden)]
pub struct ILinearDoubleKeyFrame_Vtbl {
    pub base__: ::windows::core::IInspectable_Vtbl,
}
#[doc(hidden)]
#[repr(transparent)]
pub struct ILinearPointKeyFrame(::windows::core::IUnknown);
unsafe impl ::windows::core::Vtable for ILinearPointKeyFrame {
    type Vtable = ILinearPointKeyFrame_Vtbl;
}
unsafe impl ::windows::core::Interface for ILinearPointKeyFrame {
    const IID: ::windows::core::GUID =
        ::windows::core::GUID::from_u128(0x4ec22493_bacb_5105_ac16_8ea5418ab76e);
}
#[repr(C)]
#[doc(hidden)]
pub struct ILinearPointKeyFrame_Vtbl {
    pub base__: ::windows::core::IInspectable_Vtbl,
}
#[doc(hidden)]
#[repr(transparent)]
pub struct INavigationThemeTransition(::windows::core::IUnknown);
unsafe impl ::windows::core::Vtable for INavigationThemeTransition {
    type Vtable = INavigationThemeTransition_Vtbl;
}
unsafe impl ::windows::core::Interface for INavigationThemeTransition {
    const IID: ::windows::core::GUID =
        ::windows::core::GUID::from_u128(0xd7cfbd3b_0d27_5ea1_beb7_f6b847520dc6);
}
#[repr(C)]
#[doc(hidden)]
pub struct INavigationThemeTransition_Vtbl {
    pub base__: ::windows::core::IInspectable_Vtbl,
    pub DefaultNavigationTransitionInfo: unsafe extern "system" fn(
        this: *mut ::core::ffi::c_void,
        result__: *mut *mut ::core::ffi::c_void,
    ) -> ::windows::core::HRESULT,
    pub SetDefaultNavigationTransitionInfo: unsafe extern "system" fn(
        this: *mut ::core::ffi::c_void,
        value: *mut ::core::ffi::c_void,
    )
        -> ::windows::core::HRESULT,
}
#[doc(hidden)]
#[repr(transparent)]
pub struct INavigationThemeTransitionStatics(::windows::core::IUnknown);
unsafe impl ::windows::core::Vtable for INavigationThemeTransitionStatics {
    type Vtable = INavigationThemeTransitionStatics_Vtbl;
}
unsafe impl ::windows::core::Interface for INavigationThemeTransitionStatics {
    const IID: ::windows::core::GUID =
        ::windows::core::GUID::from_u128(0x78323eff_d543_551d_b2c7_94e93a16065b);
}
#[repr(C)]
#[doc(hidden)]
pub struct INavigationThemeTransitionStatics_Vtbl {
    pub base__: ::windows::core::IInspectable_Vtbl,
    pub DefaultNavigationTransitionInfoProperty:
        unsafe extern "system" fn(
            this: *mut ::core::ffi::c_void,
            result__: *mut *mut ::core::ffi::c_void,
        ) -> ::windows::core::HRESULT,
}
#[doc(hidden)]
#[repr(transparent)]
pub struct INavigationTransitionInfo(::windows::core::IUnknown);
unsafe impl ::windows::core::Vtable for INavigationTransitionInfo {
    type Vtable = INavigationTransitionInfo_Vtbl;
}
unsafe impl ::windows::core::Interface for INavigationTransitionInfo {
    const IID: ::windows::core::GUID =
        ::windows::core::GUID::from_u128(0x25bb17fb_6e15_514e_b278_197537a4d990);
}
#[repr(C)]
#[doc(hidden)]
pub struct INavigationTransitionInfo_Vtbl {
    pub base__: ::windows::core::IInspectable_Vtbl,
}
#[doc(hidden)]
#[repr(transparent)]
pub struct INavigationTransitionInfoFactory(::windows::core::IUnknown);
unsafe impl ::windows::core::Vtable for INavigationTransitionInfoFactory {
    type Vtable = INavigationTransitionInfoFactory_Vtbl;
}
unsafe impl ::windows::core::Interface for INavigationTransitionInfoFactory {
    const IID: ::windows::core::GUID =
        ::windows::core::GUID::from_u128(0xc514b6ff_f6ed_572e_8392_3ea17bc7d4c4);
}
#[repr(C)]
#[doc(hidden)]
pub struct INavigationTransitionInfoFactory_Vtbl {
    pub base__: ::windows::core::IInspectable_Vtbl,
    pub CreateInstance: unsafe extern "system" fn(
        this: *mut ::core::ffi::c_void,
        baseinterface: *mut ::core::ffi::c_void,
        innerinterface: *mut *mut ::core::ffi::c_void,
        result__: *mut *mut ::core::ffi::c_void,
    ) -> ::windows::core::HRESULT,
}
#[doc(hidden)]
#[repr(transparent)]
pub struct INavigationTransitionInfoOverrides(::windows::core::IUnknown);
unsafe impl ::windows::core::Vtable for INavigationTransitionInfoOverrides {
    type Vtable = INavigationTransitionInfoOverrides_Vtbl;
}
unsafe impl ::windows::core::Interface for INavigationTransitionInfoOverrides {
    const IID: ::windows::core::GUID =
        ::windows::core::GUID::from_u128(0x3d6af190_5a56_513d_aff9_631925d0fa43);
}
#[repr(C)]
#[doc(hidden)]
pub struct INavigationTransitionInfoOverrides_Vtbl {
    pub base__: ::windows::core::IInspectable_Vtbl,
    pub GetNavigationStateCore: unsafe extern "system" fn(
        this: *mut ::core::ffi::c_void,
        result__: *mut ::core::mem::ManuallyDrop<::windows::core::HSTRING>,
    ) -> ::windows::core::HRESULT,
    pub SetNavigationStateCore: unsafe extern "system" fn(
        this: *mut ::core::ffi::c_void,
        navigationstate: ::core::mem::ManuallyDrop<::windows::core::HSTRING>,
    ) -> ::windows::core::HRESULT,
}
#[doc(hidden)]
#[repr(transparent)]
pub struct IObjectAnimationUsingKeyFrames(::windows::core::IUnknown);
unsafe impl ::windows::core::Vtable for IObjectAnimationUsingKeyFrames {
    type Vtable = IObjectAnimationUsingKeyFrames_Vtbl;
}
unsafe impl ::windows::core::Interface for IObjectAnimationUsingKeyFrames {
    const IID: ::windows::core::GUID =
        ::windows::core::GUID::from_u128(0xaa08dc4c_0b03_5c0a_b084_d95d272b2f0d);
}
#[repr(C)]
#[doc(hidden)]
pub struct IObjectAnimationUsingKeyFrames_Vtbl {
    pub base__: ::windows::core::IInspectable_Vtbl,
    pub KeyFrames: unsafe extern "system" fn(
        this: *mut ::core::ffi::c_void,
        result__: *mut *mut ::core::ffi::c_void,
    ) -> ::windows::core::HRESULT,
    pub EnableDependentAnimation: unsafe extern "system" fn(
        this: *mut ::core::ffi::c_void,
        result__: *mut bool,
    ) -> ::windows::core::HRESULT,
    pub SetEnableDependentAnimation: unsafe extern "system" fn(
        this: *mut ::core::ffi::c_void,
        value: bool,
    ) -> ::windows::core::HRESULT,
}
#[doc(hidden)]
#[repr(transparent)]
pub struct IObjectAnimationUsingKeyFramesStatics(::windows::core::IUnknown);
unsafe impl ::windows::core::Vtable for IObjectAnimationUsingKeyFramesStatics {
    type Vtable = IObjectAnimationUsingKeyFramesStatics_Vtbl;
}
unsafe impl ::windows::core::Interface for IObjectAnimationUsingKeyFramesStatics {
    const IID: ::windows::core::GUID =
        ::windows::core::GUID::from_u128(0x411a09b0_9ab4_54b9_99b9_54f955a6754e);
}
#[repr(C)]
#[doc(hidden)]
pub struct IObjectAnimationUsingKeyFramesStatics_Vtbl {
    pub base__: ::windows::core::IInspectable_Vtbl,
    pub EnableDependentAnimationProperty: unsafe extern "system" fn(
        this: *mut ::core::ffi::c_void,
        result__: *mut *mut ::core::ffi::c_void,
    )
        -> ::windows::core::HRESULT,
}
#[doc(hidden)]
#[repr(transparent)]
pub struct IObjectKeyFrame(::windows::core::IUnknown);
unsafe impl ::windows::core::Vtable for IObjectKeyFrame {
    type Vtable = IObjectKeyFrame_Vtbl;
}
unsafe impl ::windows::core::Interface for IObjectKeyFrame {
    const IID: ::windows::core::GUID =
        ::windows::core::GUID::from_u128(0xc5a9f65b_fc69_5a88_a797_34f46d761381);
}
#[repr(C)]
#[doc(hidden)]
pub struct IObjectKeyFrame_Vtbl {
    pub base__: ::windows::core::IInspectable_Vtbl,
    pub Value: unsafe extern "system" fn(
        this: *mut ::core::ffi::c_void,
        result__: *mut *mut ::core::ffi::c_void,
    ) -> ::windows::core::HRESULT,
    pub SetValue: unsafe extern "system" fn(
        this: *mut ::core::ffi::c_void,
        value: *mut ::core::ffi::c_void,
    ) -> ::windows::core::HRESULT,
    pub KeyTime: unsafe extern "system" fn(
        this: *mut ::core::ffi::c_void,
        result__: *mut KeyTime,
    ) -> ::windows::core::HRESULT,
    pub SetKeyTime: unsafe extern "system" fn(
        this: *mut ::core::ffi::c_void,
        value: KeyTime,
    ) -> ::windows::core::HRESULT,
}
#[doc(hidden)]
#[repr(transparent)]
pub struct IObjectKeyFrameFactory(::windows::core::IUnknown);
unsafe impl ::windows::core::Vtable for IObjectKeyFrameFactory {
    type Vtable = IObjectKeyFrameFactory_Vtbl;
}
unsafe impl ::windows::core::Interface for IObjectKeyFrameFactory {
    const IID: ::windows::core::GUID =
        ::windows::core::GUID::from_u128(0xdc59da6e_82b9_55f7_a358_ba2a07665aa9);
}
#[repr(C)]
#[doc(hidden)]
pub struct IObjectKeyFrameFactory_Vtbl {
    pub base__: ::windows::core::IInspectable_Vtbl,
    pub CreateInstance: unsafe extern "system" fn(
        this: *mut ::core::ffi::c_void,
        baseinterface: *mut ::core::ffi::c_void,
        innerinterface: *mut *mut ::core::ffi::c_void,
        result__: *mut *mut ::core::ffi::c_void,
    ) -> ::windows::core::HRESULT,
}
#[doc(hidden)]
#[repr(transparent)]
pub struct IObjectKeyFrameStatics(::windows::core::IUnknown);
unsafe impl ::windows::core::Vtable for IObjectKeyFrameStatics {
    type Vtable = IObjectKeyFrameStatics_Vtbl;
}
unsafe impl ::windows::core::Interface for IObjectKeyFrameStatics {
    const IID: ::windows::core::GUID =
        ::windows::core::GUID::from_u128(0x39e59ceb_2859_5a5f_acd8_bc491d49c4b6);
}
#[repr(C)]
#[doc(hidden)]
pub struct IObjectKeyFrameStatics_Vtbl {
    pub base__: ::windows::core::IInspectable_Vtbl,
    pub ValueProperty: unsafe extern "system" fn(
        this: *mut ::core::ffi::c_void,
        result__: *mut *mut ::core::ffi::c_void,
    ) -> ::windows::core::HRESULT,
    pub KeyTimeProperty: unsafe extern "system" fn(
        this: *mut ::core::ffi::c_void,
        result__: *mut *mut ::core::ffi::c_void,
    ) -> ::windows::core::HRESULT,
}
#[doc(hidden)]
#[repr(transparent)]
pub struct IPaneThemeTransition(::windows::core::IUnknown);
unsafe impl ::windows::core::Vtable for IPaneThemeTransition {
    type Vtable = IPaneThemeTransition_Vtbl;
}
unsafe impl ::windows::core::Interface for IPaneThemeTransition {
    const IID: ::windows::core::GUID =
        ::windows::core::GUID::from_u128(0x321bcd80_157c_5e10_b0fe_6440bd92529a);
}
#[repr(C)]
#[doc(hidden)]
pub struct IPaneThemeTransition_Vtbl {
    pub base__: ::windows::core::IInspectable_Vtbl,
    #[cfg(feature = "UI_Xaml_Controls_Primitives")]
    pub Edge: unsafe extern "system" fn(
        this: *mut ::core::ffi::c_void,
        result__: *mut super::super::Controls::Primitives::EdgeTransitionLocation,
    ) -> ::windows::core::HRESULT,
    #[cfg(not(feature = "UI_Xaml_Controls_Primitives"))]
    Edge: usize,
    #[cfg(feature = "UI_Xaml_Controls_Primitives")]
    pub SetEdge: unsafe extern "system" fn(
        this: *mut ::core::ffi::c_void,
        value: super::super::Controls::Primitives::EdgeTransitionLocation,
    ) -> ::windows::core::HRESULT,
    #[cfg(not(feature = "UI_Xaml_Controls_Primitives"))]
    SetEdge: usize,
}
#[doc(hidden)]
#[repr(transparent)]
pub struct IPaneThemeTransitionStatics(::windows::core::IUnknown);
unsafe impl ::windows::core::Vtable for IPaneThemeTransitionStatics {
    type Vtable = IPaneThemeTransitionStatics_Vtbl;
}
unsafe impl ::windows::core::Interface for IPaneThemeTransitionStatics {
    const IID: ::windows::core::GUID =
        ::windows::core::GUID::from_u128(0x47e01752_5264_5fb1_8946_ab49fe6af8fd);
}
#[repr(C)]
#[doc(hidden)]
pub struct IPaneThemeTransitionStatics_Vtbl {
    pub base__: ::windows::core::IInspectable_Vtbl,
    pub EdgeProperty: unsafe extern "system" fn(
        this: *mut ::core::ffi::c_void,
        result__: *mut *mut ::core::ffi::c_void,
    ) -> ::windows::core::HRESULT,
}
#[doc(hidden)]
#[repr(transparent)]
pub struct IPointAnimation(::windows::core::IUnknown);
unsafe impl ::windows::core::Vtable for IPointAnimation {
    type Vtable = IPointAnimation_Vtbl;
}
unsafe impl ::windows::core::Interface for IPointAnimation {
    const IID: ::windows::core::GUID =
        ::windows::core::GUID::from_u128(0xa0737cc4_2eab_5c13_a5d7_78361df1000e);
}
#[repr(C)]
#[doc(hidden)]
pub struct IPointAnimation_Vtbl {
    pub base__: ::windows::core::IInspectable_Vtbl,
    pub From: unsafe extern "system" fn(
        this: *mut ::core::ffi::c_void,
        result__: *mut *mut ::core::ffi::c_void,
    ) -> ::windows::core::HRESULT,
    pub SetFrom: unsafe extern "system" fn(
        this: *mut ::core::ffi::c_void,
        value: *mut ::core::ffi::c_void,
    ) -> ::windows::core::HRESULT,
    pub To: unsafe extern "system" fn(
        this: *mut ::core::ffi::c_void,
        result__: *mut *mut ::core::ffi::c_void,
    ) -> ::windows::core::HRESULT,
    pub SetTo: unsafe extern "system" fn(
        this: *mut ::core::ffi::c_void,
        value: *mut ::core::ffi::c_void,
    ) -> ::windows::core::HRESULT,
    pub By: unsafe extern "system" fn(
        this: *mut ::core::ffi::c_void,
        result__: *mut *mut ::core::ffi::c_void,
    ) -> ::windows::core::HRESULT,
    pub SetBy: unsafe extern "system" fn(
        this: *mut ::core::ffi::c_void,
        value: *mut ::core::ffi::c_void,
    ) -> ::windows::core::HRESULT,
    pub EasingFunction: unsafe extern "system" fn(
        this: *mut ::core::ffi::c_void,
        result__: *mut *mut ::core::ffi::c_void,
    ) -> ::windows::core::HRESULT,
    pub SetEasingFunction: unsafe extern "system" fn(
        this: *mut ::core::ffi::c_void,
        value: *mut ::core::ffi::c_void,
    ) -> ::windows::core::HRESULT,
    pub EnableDependentAnimation: unsafe extern "system" fn(
        this: *mut ::core::ffi::c_void,
        result__: *mut bool,
    ) -> ::windows::core::HRESULT,
    pub SetEnableDependentAnimation: unsafe extern "system" fn(
        this: *mut ::core::ffi::c_void,
        value: bool,
    ) -> ::windows::core::HRESULT,
}
#[doc(hidden)]
#[repr(transparent)]
pub struct IPointAnimationStatics(::windows::core::IUnknown);
unsafe impl ::windows::core::Vtable for IPointAnimationStatics {
    type Vtable = IPointAnimationStatics_Vtbl;
}
unsafe impl ::windows::core::Interface for IPointAnimationStatics {
    const IID: ::windows::core::GUID =
        ::windows::core::GUID::from_u128(0x71cfb43b_bada_554b_8fca_b558d623bbc0);
}
#[repr(C)]
#[doc(hidden)]
pub struct IPointAnimationStatics_Vtbl {
    pub base__: ::windows::core::IInspectable_Vtbl,
    pub FromProperty: unsafe extern "system" fn(
        this: *mut ::core::ffi::c_void,
        result__: *mut *mut ::core::ffi::c_void,
    ) -> ::windows::core::HRESULT,
    pub ToProperty: unsafe extern "system" fn(
        this: *mut ::core::ffi::c_void,
        result__: *mut *mut ::core::ffi::c_void,
    ) -> ::windows::core::HRESULT,
    pub ByProperty: unsafe extern "system" fn(
        this: *mut ::core::ffi::c_void,
        result__: *mut *mut ::core::ffi::c_void,
    ) -> ::windows::core::HRESULT,
    pub EasingFunctionProperty: unsafe extern "system" fn(
        this: *mut ::core::ffi::c_void,
        result__: *mut *mut ::core::ffi::c_void,
    ) -> ::windows::core::HRESULT,
    pub EnableDependentAnimationProperty: unsafe extern "system" fn(
        this: *mut ::core::ffi::c_void,
        result__: *mut *mut ::core::ffi::c_void,
    )
        -> ::windows::core::HRESULT,
}
#[doc(hidden)]
#[repr(transparent)]
pub struct IPointAnimationUsingKeyFrames(::windows::core::IUnknown);
unsafe impl ::windows::core::Vtable for IPointAnimationUsingKeyFrames {
    type Vtable = IPointAnimationUsingKeyFrames_Vtbl;
}
unsafe impl ::windows::core::Interface for IPointAnimationUsingKeyFrames {
    const IID: ::windows::core::GUID =
        ::windows::core::GUID::from_u128(0xbdd63992_df13_5514_8611_4952f722f6d0);
}
#[repr(C)]
#[doc(hidden)]
pub struct IPointAnimationUsingKeyFrames_Vtbl {
    pub base__: ::windows::core::IInspectable_Vtbl,
    pub KeyFrames: unsafe extern "system" fn(
        this: *mut ::core::ffi::c_void,
        result__: *mut *mut ::core::ffi::c_void,
    ) -> ::windows::core::HRESULT,
    pub EnableDependentAnimation: unsafe extern "system" fn(
        this: *mut ::core::ffi::c_void,
        result__: *mut bool,
    ) -> ::windows::core::HRESULT,
    pub SetEnableDependentAnimation: unsafe extern "system" fn(
        this: *mut ::core::ffi::c_void,
        value: bool,
    ) -> ::windows::core::HRESULT,
}
#[doc(hidden)]
#[repr(transparent)]
pub struct IPointAnimationUsingKeyFramesStatics(::windows::core::IUnknown);
unsafe impl ::windows::core::Vtable for IPointAnimationUsingKeyFramesStatics {
    type Vtable = IPointAnimationUsingKeyFramesStatics_Vtbl;
}
unsafe impl ::windows::core::Interface for IPointAnimationUsingKeyFramesStatics {
    const IID: ::windows::core::GUID =
        ::windows::core::GUID::from_u128(0x04152b3b_f0da_5b28_877d_9ac96d334a77);
}
#[repr(C)]
#[doc(hidden)]
pub struct IPointAnimationUsingKeyFramesStatics_Vtbl {
    pub base__: ::windows::core::IInspectable_Vtbl,
    pub EnableDependentAnimationProperty: unsafe extern "system" fn(
        this: *mut ::core::ffi::c_void,
        result__: *mut *mut ::core::ffi::c_void,
    )
        -> ::windows::core::HRESULT,
}
#[doc(hidden)]
#[repr(transparent)]
pub struct IPointKeyFrame(::windows::core::IUnknown);
unsafe impl ::windows::core::Vtable for IPointKeyFrame {
    type Vtable = IPointKeyFrame_Vtbl;
}
unsafe impl ::windows::core::Interface for IPointKeyFrame {
    const IID: ::windows::core::GUID =
        ::windows::core::GUID::from_u128(0x59d5c07d_a3a7_5450_9dfb_4b7e77d58f93);
}
#[repr(C)]
#[doc(hidden)]
pub struct IPointKeyFrame_Vtbl {
    pub base__: ::windows::core::IInspectable_Vtbl,
    pub Value: unsafe extern "system" fn(
        this: *mut ::core::ffi::c_void,
        result__: *mut ::windows::Foundation::Point,
    ) -> ::windows::core::HRESULT,
    pub SetValue: unsafe extern "system" fn(
        this: *mut ::core::ffi::c_void,
        value: ::windows::Foundation::Point,
    ) -> ::windows::core::HRESULT,
    pub KeyTime: unsafe extern "system" fn(
        this: *mut ::core::ffi::c_void,
        result__: *mut KeyTime,
    ) -> ::windows::core::HRESULT,
    pub SetKeyTime: unsafe extern "system" fn(
        this: *mut ::core::ffi::c_void,
        value: KeyTime,
    ) -> ::windows::core::HRESULT,
}
#[doc(hidden)]
#[repr(transparent)]
pub struct IPointKeyFrameFactory(::windows::core::IUnknown);
unsafe impl ::windows::core::Vtable for IPointKeyFrameFactory {
    type Vtable = IPointKeyFrameFactory_Vtbl;
}
unsafe impl ::windows::core::Interface for IPointKeyFrameFactory {
    const IID: ::windows::core::GUID =
        ::windows::core::GUID::from_u128(0xc52ee293_f10e_5252_bc08_a28659740f0e);
}
#[repr(C)]
#[doc(hidden)]
pub struct IPointKeyFrameFactory_Vtbl {
    pub base__: ::windows::core::IInspectable_Vtbl,
    pub CreateInstance: unsafe extern "system" fn(
        this: *mut ::core::ffi::c_void,
        baseinterface: *mut ::core::ffi::c_void,
        innerinterface: *mut *mut ::core::ffi::c_void,
        result__: *mut *mut ::core::ffi::c_void,
    ) -> ::windows::core::HRESULT,
}
#[doc(hidden)]
#[repr(transparent)]
pub struct IPointKeyFrameStatics(::windows::core::IUnknown);
unsafe impl ::windows::core::Vtable for IPointKeyFrameStatics {
    type Vtable = IPointKeyFrameStatics_Vtbl;
}
unsafe impl ::windows::core::Interface for IPointKeyFrameStatics {
    const IID: ::windows::core::GUID =
        ::windows::core::GUID::from_u128(0x96cd72fd_d834_5b23_9a17_1548961dc348);
}
#[repr(C)]
#[doc(hidden)]
pub struct IPointKeyFrameStatics_Vtbl {
    pub base__: ::windows::core::IInspectable_Vtbl,
    pub ValueProperty: unsafe extern "system" fn(
        this: *mut ::core::ffi::c_void,
        result__: *mut *mut ::core::ffi::c_void,
    ) -> ::windows::core::HRESULT,
    pub KeyTimeProperty: unsafe extern "system" fn(
        this: *mut ::core::ffi::c_void,
        result__: *mut *mut ::core::ffi::c_void,
    ) -> ::windows::core::HRESULT,
}
#[doc(hidden)]
#[repr(transparent)]
pub struct IPointerDownThemeAnimation(::windows::core::IUnknown);
unsafe impl ::windows::core::Vtable for IPointerDownThemeAnimation {
    type Vtable = IPointerDownThemeAnimation_Vtbl;
}
unsafe impl ::windows::core::Interface for IPointerDownThemeAnimation {
    const IID: ::windows::core::GUID =
        ::windows::core::GUID::from_u128(0xabdd1acc_40df_595d_be68_0362fe681b91);
}
#[repr(C)]
#[doc(hidden)]
pub struct IPointerDownThemeAnimation_Vtbl {
    pub base__: ::windows::core::IInspectable_Vtbl,
    pub TargetName: unsafe extern "system" fn(
        this: *mut ::core::ffi::c_void,
        result__: *mut ::core::mem::ManuallyDrop<::windows::core::HSTRING>,
    ) -> ::windows::core::HRESULT,
    pub SetTargetName: unsafe extern "system" fn(
        this: *mut ::core::ffi::c_void,
        value: ::core::mem::ManuallyDrop<::windows::core::HSTRING>,
    ) -> ::windows::core::HRESULT,
}
#[doc(hidden)]
#[repr(transparent)]
pub struct IPointerDownThemeAnimationStatics(::windows::core::IUnknown);
unsafe impl ::windows::core::Vtable for IPointerDownThemeAnimationStatics {
    type Vtable = IPointerDownThemeAnimationStatics_Vtbl;
}
unsafe impl ::windows::core::Interface for IPointerDownThemeAnimationStatics {
    const IID: ::windows::core::GUID =
        ::windows::core::GUID::from_u128(0x12268b39_fb7d_53da_8ccc_5967dc06bce9);
}
#[repr(C)]
#[doc(hidden)]
pub struct IPointerDownThemeAnimationStatics_Vtbl {
    pub base__: ::windows::core::IInspectable_Vtbl,
    pub TargetNameProperty: unsafe extern "system" fn(
        this: *mut ::core::ffi::c_void,
        result__: *mut *mut ::core::ffi::c_void,
    ) -> ::windows::core::HRESULT,
}
#[doc(hidden)]
#[repr(transparent)]
pub struct IPointerUpThemeAnimation(::windows::core::IUnknown);
unsafe impl ::windows::core::Vtable for IPointerUpThemeAnimation {
    type Vtable = IPointerUpThemeAnimation_Vtbl;
}
unsafe impl ::windows::core::Interface for IPointerUpThemeAnimation {
    const IID: ::windows::core::GUID =
        ::windows::core::GUID::from_u128(0x94896d1c_c938_5d68_84da_552bde815810);
}
#[repr(C)]
#[doc(hidden)]
pub struct IPointerUpThemeAnimation_Vtbl {
    pub base__: ::windows::core::IInspectable_Vtbl,
    pub TargetName: unsafe extern "system" fn(
        this: *mut ::core::ffi::c_void,
        result__: *mut ::core::mem::ManuallyDrop<::windows::core::HSTRING>,
    ) -> ::windows::core::HRESULT,
    pub SetTargetName: unsafe extern "system" fn(
        this: *mut ::core::ffi::c_void,
        value: ::core::mem::ManuallyDrop<::windows::core::HSTRING>,
    ) -> ::windows::core::HRESULT,
}
#[doc(hidden)]
#[repr(transparent)]
pub struct IPointerUpThemeAnimationStatics(::windows::core::IUnknown);
unsafe impl ::windows::core::Vtable for IPointerUpThemeAnimationStatics {
    type Vtable = IPointerUpThemeAnimationStatics_Vtbl;
}
unsafe impl ::windows::core::Interface for IPointerUpThemeAnimationStatics {
    const IID: ::windows::core::GUID =
        ::windows::core::GUID::from_u128(0x51a3117e_c6fa_5dc5_8db8_73f060003ae4);
}
#[repr(C)]
#[doc(hidden)]
pub struct IPointerUpThemeAnimationStatics_Vtbl {
    pub base__: ::windows::core::IInspectable_Vtbl,
    pub TargetNameProperty: unsafe extern "system" fn(
        this: *mut ::core::ffi::c_void,
        result__: *mut *mut ::core::ffi::c_void,
    ) -> ::windows::core::HRESULT,
}
#[doc(hidden)]
#[repr(transparent)]
pub struct IPopInThemeAnimation(::windows::core::IUnknown);
unsafe impl ::windows::core::Vtable for IPopInThemeAnimation {
    type Vtable = IPopInThemeAnimation_Vtbl;
}
unsafe impl ::windows::core::Interface for IPopInThemeAnimation {
    const IID: ::windows::core::GUID =
        ::windows::core::GUID::from_u128(0x20136388_b4e4_5cbb_9cb2_df2ea7e6c44b);
}
#[repr(C)]
#[doc(hidden)]
pub struct IPopInThemeAnimation_Vtbl {
    pub base__: ::windows::core::IInspectable_Vtbl,
    pub TargetName: unsafe extern "system" fn(
        this: *mut ::core::ffi::c_void,
        result__: *mut ::core::mem::ManuallyDrop<::windows::core::HSTRING>,
    ) -> ::windows::core::HRESULT,
    pub SetTargetName: unsafe extern "system" fn(
        this: *mut ::core::ffi::c_void,
        value: ::core::mem::ManuallyDrop<::windows::core::HSTRING>,
    ) -> ::windows::core::HRESULT,
    pub FromHorizontalOffset: unsafe extern "system" fn(
        this: *mut ::core::ffi::c_void,
        result__: *mut f64,
    ) -> ::windows::core::HRESULT,
    pub SetFromHorizontalOffset: unsafe extern "system" fn(
        this: *mut ::core::ffi::c_void,
        value: f64,
    ) -> ::windows::core::HRESULT,
    pub FromVerticalOffset: unsafe extern "system" fn(
        this: *mut ::core::ffi::c_void,
        result__: *mut f64,
    ) -> ::windows::core::HRESULT,
    pub SetFromVerticalOffset: unsafe extern "system" fn(
        this: *mut ::core::ffi::c_void,
        value: f64,
    ) -> ::windows::core::HRESULT,
}
#[doc(hidden)]
#[repr(transparent)]
pub struct IPopInThemeAnimationStatics(::windows::core::IUnknown);
unsafe impl ::windows::core::Vtable for IPopInThemeAnimationStatics {
    type Vtable = IPopInThemeAnimationStatics_Vtbl;
}
unsafe impl ::windows::core::Interface for IPopInThemeAnimationStatics {
    const IID: ::windows::core::GUID =
        ::windows::core::GUID::from_u128(0x8c9378a9_d276_5a1d_8188_f48f07840a16);
}
#[repr(C)]
#[doc(hidden)]
pub struct IPopInThemeAnimationStatics_Vtbl {
    pub base__: ::windows::core::IInspectable_Vtbl,
    pub TargetNameProperty: unsafe extern "system" fn(
        this: *mut ::core::ffi::c_void,
        result__: *mut *mut ::core::ffi::c_void,
    ) -> ::windows::core::HRESULT,
    pub FromHorizontalOffsetProperty: unsafe extern "system" fn(
        this: *mut ::core::ffi::c_void,
        result__: *mut *mut ::core::ffi::c_void,
    ) -> ::windows::core::HRESULT,
    pub FromVerticalOffsetProperty: unsafe extern "system" fn(
        this: *mut ::core::ffi::c_void,
        result__: *mut *mut ::core::ffi::c_void,
    ) -> ::windows::core::HRESULT,
}
#[doc(hidden)]
#[repr(transparent)]
pub struct IPopOutThemeAnimation(::windows::core::IUnknown);
unsafe impl ::windows::core::Vtable for IPopOutThemeAnimation {
    type Vtable = IPopOutThemeAnimation_Vtbl;
}
unsafe impl ::windows::core::Interface for IPopOutThemeAnimation {
    const IID: ::windows::core::GUID =
        ::windows::core::GUID::from_u128(0x1bb20dd3_5648_541a_a0c9_37a955db10a6);
}
#[repr(C)]
#[doc(hidden)]
pub struct IPopOutThemeAnimation_Vtbl {
    pub base__: ::windows::core::IInspectable_Vtbl,
    pub TargetName: unsafe extern "system" fn(
        this: *mut ::core::ffi::c_void,
        result__: *mut ::core::mem::ManuallyDrop<::windows::core::HSTRING>,
    ) -> ::windows::core::HRESULT,
    pub SetTargetName: unsafe extern "system" fn(
        this: *mut ::core::ffi::c_void,
        value: ::core::mem::ManuallyDrop<::windows::core::HSTRING>,
    ) -> ::windows::core::HRESULT,
}
#[doc(hidden)]
#[repr(transparent)]
pub struct IPopOutThemeAnimationStatics(::windows::core::IUnknown);
unsafe impl ::windows::core::Vtable for IPopOutThemeAnimationStatics {
    type Vtable = IPopOutThemeAnimationStatics_Vtbl;
}
unsafe impl ::windows::core::Interface for IPopOutThemeAnimationStatics {
    const IID: ::windows::core::GUID =
        ::windows::core::GUID::from_u128(0x3f569f96_367e_595c_9732_2fb919388d84);
}
#[repr(C)]
#[doc(hidden)]
pub struct IPopOutThemeAnimationStatics_Vtbl {
    pub base__: ::windows::core::IInspectable_Vtbl,
    pub TargetNameProperty: unsafe extern "system" fn(
        this: *mut ::core::ffi::c_void,
        result__: *mut *mut ::core::ffi::c_void,
    ) -> ::windows::core::HRESULT,
}
#[doc(hidden)]
#[repr(transparent)]
pub struct IPopupThemeTransition(::windows::core::IUnknown);
unsafe impl ::windows::core::Vtable for IPopupThemeTransition {
    type Vtable = IPopupThemeTransition_Vtbl;
}
unsafe impl ::windows::core::Interface for IPopupThemeTransition {
    const IID: ::windows::core::GUID =
        ::windows::core::GUID::from_u128(0xe1fa6b8a_add3_5299_a000_121d6dbacc80);
}
#[repr(C)]
#[doc(hidden)]
pub struct IPopupThemeTransition_Vtbl {
    pub base__: ::windows::core::IInspectable_Vtbl,
    pub FromHorizontalOffset: unsafe extern "system" fn(
        this: *mut ::core::ffi::c_void,
        result__: *mut f64,
    ) -> ::windows::core::HRESULT,
    pub SetFromHorizontalOffset: unsafe extern "system" fn(
        this: *mut ::core::ffi::c_void,
        value: f64,
    ) -> ::windows::core::HRESULT,
    pub FromVerticalOffset: unsafe extern "system" fn(
        this: *mut ::core::ffi::c_void,
        result__: *mut f64,
    ) -> ::windows::core::HRESULT,
    pub SetFromVerticalOffset: unsafe extern "system" fn(
        this: *mut ::core::ffi::c_void,
        value: f64,
    ) -> ::windows::core::HRESULT,
}
#[doc(hidden)]
#[repr(transparent)]
pub struct IPopupThemeTransitionStatics(::windows::core::IUnknown);
unsafe impl ::windows::core::Vtable for IPopupThemeTransitionStatics {
    type Vtable = IPopupThemeTransitionStatics_Vtbl;
}
unsafe impl ::windows::core::Interface for IPopupThemeTransitionStatics {
    const IID: ::windows::core::GUID =
        ::windows::core::GUID::from_u128(0x538b2114_415c_5f99_b74d_a85966dacc54);
}
#[repr(C)]
#[doc(hidden)]
pub struct IPopupThemeTransitionStatics_Vtbl {
    pub base__: ::windows::core::IInspectable_Vtbl,
    pub FromHorizontalOffsetProperty: unsafe extern "system" fn(
        this: *mut ::core::ffi::c_void,
        result__: *mut *mut ::core::ffi::c_void,
    ) -> ::windows::core::HRESULT,
    pub FromVerticalOffsetProperty: unsafe extern "system" fn(
        this: *mut ::core::ffi::c_void,
        result__: *mut *mut ::core::ffi::c_void,
    ) -> ::windows::core::HRESULT,
}
#[doc(hidden)]
#[repr(transparent)]
pub struct IPowerEase(::windows::core::IUnknown);
unsafe impl ::windows::core::Vtable for IPowerEase {
    type Vtable = IPowerEase_Vtbl;
}
unsafe impl ::windows::core::Interface for IPowerEase {
    const IID: ::windows::core::GUID =
        ::windows::core::GUID::from_u128(0x372dfad0_5177_5df9_8e1e_920962468714);
}
#[repr(C)]
#[doc(hidden)]
pub struct IPowerEase_Vtbl {
    pub base__: ::windows::core::IInspectable_Vtbl,
    pub Power: unsafe extern "system" fn(
        this: *mut ::core::ffi::c_void,
        result__: *mut f64,
    ) -> ::windows::core::HRESULT,
    pub SetPower: unsafe extern "system" fn(
        this: *mut ::core::ffi::c_void,
        value: f64,
    ) -> ::windows::core::HRESULT,
}
#[doc(hidden)]
#[repr(transparent)]
pub struct IPowerEaseStatics(::windows::core::IUnknown);
unsafe impl ::windows::core::Vtable for IPowerEaseStatics {
    type Vtable = IPowerEaseStatics_Vtbl;
}
unsafe impl ::windows::core::Interface for IPowerEaseStatics {
    const IID: ::windows::core::GUID =
        ::windows::core::GUID::from_u128(0x8eb72edb_3e7e_5d40_928b_4505d57c21ce);
}
#[repr(C)]
#[doc(hidden)]
pub struct IPowerEaseStatics_Vtbl {
    pub base__: ::windows::core::IInspectable_Vtbl,
    pub PowerProperty: unsafe extern "system" fn(
        this: *mut ::core::ffi::c_void,
        result__: *mut *mut ::core::ffi::c_void,
    ) -> ::windows::core::HRESULT,
}
#[doc(hidden)]
#[repr(transparent)]
pub struct IQuadraticEase(::windows::core::IUnknown);
unsafe impl ::windows::core::Vtable for IQuadraticEase {
    type Vtable = IQuadraticEase_Vtbl;
}
unsafe impl ::windows::core::Interface for IQuadraticEase {
    const IID: ::windows::core::GUID =
        ::windows::core::GUID::from_u128(0xdb85fda1_03b7_57cd_a1ef_8855cbf62191);
}
#[repr(C)]
#[doc(hidden)]
pub struct IQuadraticEase_Vtbl {
    pub base__: ::windows::core::IInspectable_Vtbl,
}
#[doc(hidden)]
#[repr(transparent)]
pub struct IQuarticEase(::windows::core::IUnknown);
unsafe impl ::windows::core::Vtable for IQuarticEase {
    type Vtable = IQuarticEase_Vtbl;
}
unsafe impl ::windows::core::Interface for IQuarticEase {
    const IID: ::windows::core::GUID =
        ::windows::core::GUID::from_u128(0x48215273_05f1_58aa_bade_0b71d7bd0484);
}
#[repr(C)]
#[doc(hidden)]
pub struct IQuarticEase_Vtbl {
    pub base__: ::windows::core::IInspectable_Vtbl,
}
#[doc(hidden)]
#[repr(transparent)]
pub struct IQuinticEase(::windows::core::IUnknown);
unsafe impl ::windows::core::Vtable for IQuinticEase {
    type Vtable = IQuinticEase_Vtbl;
}
unsafe impl ::windows::core::Interface for IQuinticEase {
    const IID: ::windows::core::GUID =
        ::windows::core::GUID::from_u128(0xdc2f05d5_a3ac_5dce_9b85_753a0c800fc2);
}
#[repr(C)]
#[doc(hidden)]
pub struct IQuinticEase_Vtbl {
    pub base__: ::windows::core::IInspectable_Vtbl,
}
#[doc(hidden)]
#[repr(transparent)]
pub struct IReorderThemeTransition(::windows::core::IUnknown);
unsafe impl ::windows::core::Vtable for IReorderThemeTransition {
    type Vtable = IReorderThemeTransition_Vtbl;
}
unsafe impl ::windows::core::Interface for IReorderThemeTransition {
    const IID: ::windows::core::GUID =
        ::windows::core::GUID::from_u128(0x0d5a0874_1df5_5379_b626_74721759438a);
}
#[repr(C)]
#[doc(hidden)]
pub struct IReorderThemeTransition_Vtbl {
    pub base__: ::windows::core::IInspectable_Vtbl,
}
#[doc(hidden)]
#[repr(transparent)]
pub struct IRepeatBehaviorHelper(::windows::core::IUnknown);
unsafe impl ::windows::core::Vtable for IRepeatBehaviorHelper {
    type Vtable = IRepeatBehaviorHelper_Vtbl;
}
unsafe impl ::windows::core::Interface for IRepeatBehaviorHelper {
    const IID: ::windows::core::GUID =
        ::windows::core::GUID::from_u128(0x4643f139_ffef_5c6a_8de6_142b41cd51a5);
}
#[repr(C)]
#[doc(hidden)]
pub struct IRepeatBehaviorHelper_Vtbl {
    pub base__: ::windows::core::IInspectable_Vtbl,
}
#[doc(hidden)]
#[repr(transparent)]
pub struct IRepeatBehaviorHelperStatics(::windows::core::IUnknown);
unsafe impl ::windows::core::Vtable for IRepeatBehaviorHelperStatics {
    type Vtable = IRepeatBehaviorHelperStatics_Vtbl;
}
unsafe impl ::windows::core::Interface for IRepeatBehaviorHelperStatics {
    const IID: ::windows::core::GUID =
        ::windows::core::GUID::from_u128(0xc66d4425_6461_5189_b17d_cca0cca34ca0);
}
#[repr(C)]
#[doc(hidden)]
pub struct IRepeatBehaviorHelperStatics_Vtbl {
    pub base__: ::windows::core::IInspectable_Vtbl,
    pub Forever: unsafe extern "system" fn(
        this: *mut ::core::ffi::c_void,
        result__: *mut RepeatBehavior,
    ) -> ::windows::core::HRESULT,
    pub FromCount: unsafe extern "system" fn(
        this: *mut ::core::ffi::c_void,
        count: f64,
        result__: *mut RepeatBehavior,
    ) -> ::windows::core::HRESULT,
    pub FromDuration: unsafe extern "system" fn(
        this: *mut ::core::ffi::c_void,
        duration: ::windows::Foundation::TimeSpan,
        result__: *mut RepeatBehavior,
    ) -> ::windows::core::HRESULT,
    pub GetHasCount: unsafe extern "system" fn(
        this: *mut ::core::ffi::c_void,
        target: RepeatBehavior,
        result__: *mut bool,
    ) -> ::windows::core::HRESULT,
    pub GetHasDuration: unsafe extern "system" fn(
        this: *mut ::core::ffi::c_void,
        target: RepeatBehavior,
        result__: *mut bool,
    ) -> ::windows::core::HRESULT,
    pub Equals: unsafe extern "system" fn(
        this: *mut ::core::ffi::c_void,
        target: RepeatBehavior,
        value: RepeatBehavior,
        result__: *mut bool,
    ) -> ::windows::core::HRESULT,
}
#[doc(hidden)]
#[repr(transparent)]
pub struct IRepositionThemeAnimation(::windows::core::IUnknown);
unsafe impl ::windows::core::Vtable for IRepositionThemeAnimation {
    type Vtable = IRepositionThemeAnimation_Vtbl;
}
unsafe impl ::windows::core::Interface for IRepositionThemeAnimation {
    const IID: ::windows::core::GUID =
        ::windows::core::GUID::from_u128(0x36f7e025_23c1_53de_8df9_7dc1e9c788fd);
}
#[repr(C)]
#[doc(hidden)]
pub struct IRepositionThemeAnimation_Vtbl {
    pub base__: ::windows::core::IInspectable_Vtbl,
    pub TargetName: unsafe extern "system" fn(
        this: *mut ::core::ffi::c_void,
        result__: *mut ::core::mem::ManuallyDrop<::windows::core::HSTRING>,
    ) -> ::windows::core::HRESULT,
    pub SetTargetName: unsafe extern "system" fn(
        this: *mut ::core::ffi::c_void,
        value: ::core::mem::ManuallyDrop<::windows::core::HSTRING>,
    ) -> ::windows::core::HRESULT,
    pub FromHorizontalOffset: unsafe extern "system" fn(
        this: *mut ::core::ffi::c_void,
        result__: *mut f64,
    ) -> ::windows::core::HRESULT,
    pub SetFromHorizontalOffset: unsafe extern "system" fn(
        this: *mut ::core::ffi::c_void,
        value: f64,
    ) -> ::windows::core::HRESULT,
    pub FromVerticalOffset: unsafe extern "system" fn(
        this: *mut ::core::ffi::c_void,
        result__: *mut f64,
    ) -> ::windows::core::HRESULT,
    pub SetFromVerticalOffset: unsafe extern "system" fn(
        this: *mut ::core::ffi::c_void,
        value: f64,
    ) -> ::windows::core::HRESULT,
}
#[doc(hidden)]
#[repr(transparent)]
pub struct IRepositionThemeAnimationStatics(::windows::core::IUnknown);
unsafe impl ::windows::core::Vtable for IRepositionThemeAnimationStatics {
    type Vtable = IRepositionThemeAnimationStatics_Vtbl;
}
unsafe impl ::windows::core::Interface for IRepositionThemeAnimationStatics {
    const IID: ::windows::core::GUID =
        ::windows::core::GUID::from_u128(0xc04118de_aff5_5fa9_aee7_94a621c82618);
}
#[repr(C)]
#[doc(hidden)]
pub struct IRepositionThemeAnimationStatics_Vtbl {
    pub base__: ::windows::core::IInspectable_Vtbl,
    pub TargetNameProperty: unsafe extern "system" fn(
        this: *mut ::core::ffi::c_void,
        result__: *mut *mut ::core::ffi::c_void,
    ) -> ::windows::core::HRESULT,
    pub FromHorizontalOffsetProperty: unsafe extern "system" fn(
        this: *mut ::core::ffi::c_void,
        result__: *mut *mut ::core::ffi::c_void,
    ) -> ::windows::core::HRESULT,
    pub FromVerticalOffsetProperty: unsafe extern "system" fn(
        this: *mut ::core::ffi::c_void,
        result__: *mut *mut ::core::ffi::c_void,
    ) -> ::windows::core::HRESULT,
}
#[doc(hidden)]
#[repr(transparent)]
pub struct IRepositionThemeTransition(::windows::core::IUnknown);
unsafe impl ::windows::core::Vtable for IRepositionThemeTransition {
    type Vtable = IRepositionThemeTransition_Vtbl;
}
unsafe impl ::windows::core::Interface for IRepositionThemeTransition {
    const IID: ::windows::core::GUID =
        ::windows::core::GUID::from_u128(0x7728e3f0_24b1_5484_824a_c0b41c2745d5);
}
#[repr(C)]
#[doc(hidden)]
pub struct IRepositionThemeTransition_Vtbl {
    pub base__: ::windows::core::IInspectable_Vtbl,
    pub IsStaggeringEnabled: unsafe extern "system" fn(
        this: *mut ::core::ffi::c_void,
        result__: *mut bool,
    ) -> ::windows::core::HRESULT,
    pub SetIsStaggeringEnabled: unsafe extern "system" fn(
        this: *mut ::core::ffi::c_void,
        value: bool,
    ) -> ::windows::core::HRESULT,
}
#[doc(hidden)]
#[repr(transparent)]
pub struct IRepositionThemeTransitionStatics(::windows::core::IUnknown);
unsafe impl ::windows::core::Vtable for IRepositionThemeTransitionStatics {
    type Vtable = IRepositionThemeTransitionStatics_Vtbl;
}
unsafe impl ::windows::core::Interface for IRepositionThemeTransitionStatics {
    const IID: ::windows::core::GUID =
        ::windows::core::GUID::from_u128(0xc70a0f9a_485e_53bb_ad3c_8b41b6788bf9);
}
#[repr(C)]
#[doc(hidden)]
pub struct IRepositionThemeTransitionStatics_Vtbl {
    pub base__: ::windows::core::IInspectable_Vtbl,
    pub IsStaggeringEnabledProperty: unsafe extern "system" fn(
        this: *mut ::core::ffi::c_void,
        result__: *mut *mut ::core::ffi::c_void,
    ) -> ::windows::core::HRESULT,
}
#[doc(hidden)]
#[repr(transparent)]
pub struct ISineEase(::windows::core::IUnknown);
unsafe impl ::windows::core::Vtable for ISineEase {
    type Vtable = ISineEase_Vtbl;
}
unsafe impl ::windows::core::Interface for ISineEase {
    const IID: ::windows::core::GUID =
        ::windows::core::GUID::from_u128(0x6115539b_663d_5131_b7c2_74bb5fdc6a1d);
}
#[repr(C)]
#[doc(hidden)]
pub struct ISineEase_Vtbl {
    pub base__: ::windows::core::IInspectable_Vtbl,
}
#[doc(hidden)]
#[repr(transparent)]
pub struct ISlideNavigationTransitionInfo(::windows::core::IUnknown);
unsafe impl ::windows::core::Vtable for ISlideNavigationTransitionInfo {
    type Vtable = ISlideNavigationTransitionInfo_Vtbl;
}
unsafe impl ::windows::core::Interface for ISlideNavigationTransitionInfo {
    const IID: ::windows::core::GUID =
        ::windows::core::GUID::from_u128(0x53eade0e_6b01_511f_a563_6f5724a6c1c1);
}
#[repr(C)]
#[doc(hidden)]
pub struct ISlideNavigationTransitionInfo_Vtbl {
    pub base__: ::windows::core::IInspectable_Vtbl,
    pub Effect: unsafe extern "system" fn(
        this: *mut ::core::ffi::c_void,
        result__: *mut SlideNavigationTransitionEffect,
    ) -> ::windows::core::HRESULT,
    pub SetEffect: unsafe extern "system" fn(
        this: *mut ::core::ffi::c_void,
        value: SlideNavigationTransitionEffect,
    ) -> ::windows::core::HRESULT,
}
#[doc(hidden)]
#[repr(transparent)]
pub struct ISlideNavigationTransitionInfoStatics(::windows::core::IUnknown);
unsafe impl ::windows::core::Vtable for ISlideNavigationTransitionInfoStatics {
    type Vtable = ISlideNavigationTransitionInfoStatics_Vtbl;
}
unsafe impl ::windows::core::Interface for ISlideNavigationTransitionInfoStatics {
    const IID: ::windows::core::GUID =
        ::windows::core::GUID::from_u128(0x90ba0c6c_cd45_5a6c_bbb2_88037d43cd79);
}
#[repr(C)]
#[doc(hidden)]
pub struct ISlideNavigationTransitionInfoStatics_Vtbl {
    pub base__: ::windows::core::IInspectable_Vtbl,
    pub EffectProperty: unsafe extern "system" fn(
        this: *mut ::core::ffi::c_void,
        result__: *mut *mut ::core::ffi::c_void,
    ) -> ::windows::core::HRESULT,
}
#[doc(hidden)]
#[repr(transparent)]
pub struct ISplineColorKeyFrame(::windows::core::IUnknown);
unsafe impl ::windows::core::Vtable for ISplineColorKeyFrame {
    type Vtable = ISplineColorKeyFrame_Vtbl;
}
unsafe impl ::windows::core::Interface for ISplineColorKeyFrame {
    const IID: ::windows::core::GUID =
        ::windows::core::GUID::from_u128(0x60c5905f_4343_504d_a2c6_64b8d924b438);
}
#[repr(C)]
#[doc(hidden)]
pub struct ISplineColorKeyFrame_Vtbl {
    pub base__: ::windows::core::IInspectable_Vtbl,
    pub KeySpline: unsafe extern "system" fn(
        this: *mut ::core::ffi::c_void,
        result__: *mut *mut ::core::ffi::c_void,
    ) -> ::windows::core::HRESULT,
    pub SetKeySpline: unsafe extern "system" fn(
        this: *mut ::core::ffi::c_void,
        value: *mut ::core::ffi::c_void,
    ) -> ::windows::core::HRESULT,
}
#[doc(hidden)]
#[repr(transparent)]
pub struct ISplineColorKeyFrameStatics(::windows::core::IUnknown);
unsafe impl ::windows::core::Vtable for ISplineColorKeyFrameStatics {
    type Vtable = ISplineColorKeyFrameStatics_Vtbl;
}
unsafe impl ::windows::core::Interface for ISplineColorKeyFrameStatics {
    const IID: ::windows::core::GUID =
        ::windows::core::GUID::from_u128(0xd89c7062_753d_5652_b215_c195ae2c7a18);
}
#[repr(C)]
#[doc(hidden)]
pub struct ISplineColorKeyFrameStatics_Vtbl {
    pub base__: ::windows::core::IInspectable_Vtbl,
    pub KeySplineProperty: unsafe extern "system" fn(
        this: *mut ::core::ffi::c_void,
        result__: *mut *mut ::core::ffi::c_void,
    ) -> ::windows::core::HRESULT,
}
#[doc(hidden)]
#[repr(transparent)]
pub struct ISplineDoubleKeyFrame(::windows::core::IUnknown);
unsafe impl ::windows::core::Vtable for ISplineDoubleKeyFrame {
    type Vtable = ISplineDoubleKeyFrame_Vtbl;
}
unsafe impl ::windows::core::Interface for ISplineDoubleKeyFrame {
    const IID: ::windows::core::GUID =
        ::windows::core::GUID::from_u128(0xaea80957_bb56_59b6_bb7a_6295f94bc961);
}
#[repr(C)]
#[doc(hidden)]
pub struct ISplineDoubleKeyFrame_Vtbl {
    pub base__: ::windows::core::IInspectable_Vtbl,
    pub KeySpline: unsafe extern "system" fn(
        this: *mut ::core::ffi::c_void,
        result__: *mut *mut ::core::ffi::c_void,
    ) -> ::windows::core::HRESULT,
    pub SetKeySpline: unsafe extern "system" fn(
        this: *mut ::core::ffi::c_void,
        value: *mut ::core::ffi::c_void,
    ) -> ::windows::core::HRESULT,
}
#[doc(hidden)]
#[repr(transparent)]
pub struct ISplineDoubleKeyFrameStatics(::windows::core::IUnknown);
unsafe impl ::windows::core::Vtable for ISplineDoubleKeyFrameStatics {
    type Vtable = ISplineDoubleKeyFrameStatics_Vtbl;
}
unsafe impl ::windows::core::Interface for ISplineDoubleKeyFrameStatics {
    const IID: ::windows::core::GUID =
        ::windows::core::GUID::from_u128(0xca88552e_7237_51f8_a8ca_79952c77883a);
}
#[repr(C)]
#[doc(hidden)]
pub struct ISplineDoubleKeyFrameStatics_Vtbl {
    pub base__: ::windows::core::IInspectable_Vtbl,
    pub KeySplineProperty: unsafe extern "system" fn(
        this: *mut ::core::ffi::c_void,
        result__: *mut *mut ::core::ffi::c_void,
    ) -> ::windows::core::HRESULT,
}
#[doc(hidden)]
#[repr(transparent)]
pub struct ISplinePointKeyFrame(::windows::core::IUnknown);
unsafe impl ::windows::core::Vtable for ISplinePointKeyFrame {
    type Vtable = ISplinePointKeyFrame_Vtbl;
}
unsafe impl ::windows::core::Interface for ISplinePointKeyFrame {
    const IID: ::windows::core::GUID =
        ::windows::core::GUID::from_u128(0x2b7eb049_708c_5220_a178_a25dbc14ffbe);
}
#[repr(C)]
#[doc(hidden)]
pub struct ISplinePointKeyFrame_Vtbl {
    pub base__: ::windows::core::IInspectable_Vtbl,
    pub KeySpline: unsafe extern "system" fn(
        this: *mut ::core::ffi::c_void,
        result__: *mut *mut ::core::ffi::c_void,
    ) -> ::windows::core::HRESULT,
    pub SetKeySpline: unsafe extern "system" fn(
        this: *mut ::core::ffi::c_void,
        value: *mut ::core::ffi::c_void,
    ) -> ::windows::core::HRESULT,
}
#[doc(hidden)]
#[repr(transparent)]
pub struct ISplinePointKeyFrameStatics(::windows::core::IUnknown);
unsafe impl ::windows::core::Vtable for ISplinePointKeyFrameStatics {
    type Vtable = ISplinePointKeyFrameStatics_Vtbl;
}
unsafe impl ::windows::core::Interface for ISplinePointKeyFrameStatics {
    const IID: ::windows::core::GUID =
        ::windows::core::GUID::from_u128(0x1e100e36_bed1_5060_8dcf_0d5b32575ed1);
}
#[repr(C)]
#[doc(hidden)]
pub struct ISplinePointKeyFrameStatics_Vtbl {
    pub base__: ::windows::core::IInspectable_Vtbl,
    pub KeySplineProperty: unsafe extern "system" fn(
        this: *mut ::core::ffi::c_void,
        result__: *mut *mut ::core::ffi::c_void,
    ) -> ::windows::core::HRESULT,
}
#[doc(hidden)]
#[repr(transparent)]
pub struct ISplitCloseThemeAnimation(::windows::core::IUnknown);
unsafe impl ::windows::core::Vtable for ISplitCloseThemeAnimation {
    type Vtable = ISplitCloseThemeAnimation_Vtbl;
}
unsafe impl ::windows::core::Interface for ISplitCloseThemeAnimation {
    const IID: ::windows::core::GUID =
        ::windows::core::GUID::from_u128(0xb0dd1490_f646_5c18_b3ef_02f9b17f57df);
}
#[repr(C)]
#[doc(hidden)]
pub struct ISplitCloseThemeAnimation_Vtbl {
    pub base__: ::windows::core::IInspectable_Vtbl,
    pub OpenedTargetName: unsafe extern "system" fn(
        this: *mut ::core::ffi::c_void,
        result__: *mut ::core::mem::ManuallyDrop<::windows::core::HSTRING>,
    ) -> ::windows::core::HRESULT,
    pub SetOpenedTargetName: unsafe extern "system" fn(
        this: *mut ::core::ffi::c_void,
        value: ::core::mem::ManuallyDrop<::windows::core::HSTRING>,
    ) -> ::windows::core::HRESULT,
    pub OpenedTarget: unsafe extern "system" fn(
        this: *mut ::core::ffi::c_void,
        result__: *mut *mut ::core::ffi::c_void,
    ) -> ::windows::core::HRESULT,
    pub SetOpenedTarget: unsafe extern "system" fn(
        this: *mut ::core::ffi::c_void,
        value: *mut ::core::ffi::c_void,
    ) -> ::windows::core::HRESULT,
    pub ClosedTargetName: unsafe extern "system" fn(
        this: *mut ::core::ffi::c_void,
        result__: *mut ::core::mem::ManuallyDrop<::windows::core::HSTRING>,
    ) -> ::windows::core::HRESULT,
    pub SetClosedTargetName: unsafe extern "system" fn(
        this: *mut ::core::ffi::c_void,
        value: ::core::mem::ManuallyDrop<::windows::core::HSTRING>,
    ) -> ::windows::core::HRESULT,
    pub ClosedTarget: unsafe extern "system" fn(
        this: *mut ::core::ffi::c_void,
        result__: *mut *mut ::core::ffi::c_void,
    ) -> ::windows::core::HRESULT,
    pub SetClosedTarget: unsafe extern "system" fn(
        this: *mut ::core::ffi::c_void,
        value: *mut ::core::ffi::c_void,
    ) -> ::windows::core::HRESULT,
    pub ContentTargetName: unsafe extern "system" fn(
        this: *mut ::core::ffi::c_void,
        result__: *mut ::core::mem::ManuallyDrop<::windows::core::HSTRING>,
    ) -> ::windows::core::HRESULT,
    pub SetContentTargetName: unsafe extern "system" fn(
        this: *mut ::core::ffi::c_void,
        value: ::core::mem::ManuallyDrop<::windows::core::HSTRING>,
    ) -> ::windows::core::HRESULT,
    pub ContentTarget: unsafe extern "system" fn(
        this: *mut ::core::ffi::c_void,
        result__: *mut *mut ::core::ffi::c_void,
    ) -> ::windows::core::HRESULT,
    pub SetContentTarget: unsafe extern "system" fn(
        this: *mut ::core::ffi::c_void,
        value: *mut ::core::ffi::c_void,
    ) -> ::windows::core::HRESULT,
    pub OpenedLength: unsafe extern "system" fn(
        this: *mut ::core::ffi::c_void,
        result__: *mut f64,
    ) -> ::windows::core::HRESULT,
    pub SetOpenedLength: unsafe extern "system" fn(
        this: *mut ::core::ffi::c_void,
        value: f64,
    ) -> ::windows::core::HRESULT,
    pub ClosedLength: unsafe extern "system" fn(
        this: *mut ::core::ffi::c_void,
        result__: *mut f64,
    ) -> ::windows::core::HRESULT,
    pub SetClosedLength: unsafe extern "system" fn(
        this: *mut ::core::ffi::c_void,
        value: f64,
    ) -> ::windows::core::HRESULT,
    pub OffsetFromCenter: unsafe extern "system" fn(
        this: *mut ::core::ffi::c_void,
        result__: *mut f64,
    ) -> ::windows::core::HRESULT,
    pub SetOffsetFromCenter: unsafe extern "system" fn(
        this: *mut ::core::ffi::c_void,
        value: f64,
    ) -> ::windows::core::HRESULT,
    #[cfg(feature = "UI_Xaml_Controls_Primitives")]
    pub ContentTranslationDirection: unsafe extern "system" fn(
        this: *mut ::core::ffi::c_void,
        result__: *mut super::super::Controls::Primitives::AnimationDirection,
    ) -> ::windows::core::HRESULT,
    #[cfg(not(feature = "UI_Xaml_Controls_Primitives"))]
    ContentTranslationDirection: usize,
    #[cfg(feature = "UI_Xaml_Controls_Primitives")]
    pub SetContentTranslationDirection: unsafe extern "system" fn(
        this: *mut ::core::ffi::c_void,
        value: super::super::Controls::Primitives::AnimationDirection,
    ) -> ::windows::core::HRESULT,
    #[cfg(not(feature = "UI_Xaml_Controls_Primitives"))]
    SetContentTranslationDirection: usize,
    pub ContentTranslationOffset: unsafe extern "system" fn(
        this: *mut ::core::ffi::c_void,
        result__: *mut f64,
    ) -> ::windows::core::HRESULT,
    pub SetContentTranslationOffset: unsafe extern "system" fn(
        this: *mut ::core::ffi::c_void,
        value: f64,
    ) -> ::windows::core::HRESULT,
}
#[doc(hidden)]
#[repr(transparent)]
pub struct ISplitCloseThemeAnimationStatics(::windows::core::IUnknown);
unsafe impl ::windows::core::Vtable for ISplitCloseThemeAnimationStatics {
    type Vtable = ISplitCloseThemeAnimationStatics_Vtbl;
}
unsafe impl ::windows::core::Interface for ISplitCloseThemeAnimationStatics {
    const IID: ::windows::core::GUID =
        ::windows::core::GUID::from_u128(0x32345cdd_2a3c_5571_b2eb_2fcabc2e92c6);
}
#[repr(C)]
#[doc(hidden)]
pub struct ISplitCloseThemeAnimationStatics_Vtbl {
    pub base__: ::windows::core::IInspectable_Vtbl,
    pub OpenedTargetNameProperty: unsafe extern "system" fn(
        this: *mut ::core::ffi::c_void,
        result__: *mut *mut ::core::ffi::c_void,
    ) -> ::windows::core::HRESULT,
    pub OpenedTargetProperty: unsafe extern "system" fn(
        this: *mut ::core::ffi::c_void,
        result__: *mut *mut ::core::ffi::c_void,
    ) -> ::windows::core::HRESULT,
    pub ClosedTargetNameProperty: unsafe extern "system" fn(
        this: *mut ::core::ffi::c_void,
        result__: *mut *mut ::core::ffi::c_void,
    ) -> ::windows::core::HRESULT,
    pub ClosedTargetProperty: unsafe extern "system" fn(
        this: *mut ::core::ffi::c_void,
        result__: *mut *mut ::core::ffi::c_void,
    ) -> ::windows::core::HRESULT,
    pub ContentTargetNameProperty: unsafe extern "system" fn(
        this: *mut ::core::ffi::c_void,
        result__: *mut *mut ::core::ffi::c_void,
    ) -> ::windows::core::HRESULT,
    pub ContentTargetProperty: unsafe extern "system" fn(
        this: *mut ::core::ffi::c_void,
        result__: *mut *mut ::core::ffi::c_void,
    ) -> ::windows::core::HRESULT,
    pub OpenedLengthProperty: unsafe extern "system" fn(
        this: *mut ::core::ffi::c_void,
        result__: *mut *mut ::core::ffi::c_void,
    ) -> ::windows::core::HRESULT,
    pub ClosedLengthProperty: unsafe extern "system" fn(
        this: *mut ::core::ffi::c_void,
        result__: *mut *mut ::core::ffi::c_void,
    ) -> ::windows::core::HRESULT,
    pub OffsetFromCenterProperty: unsafe extern "system" fn(
        this: *mut ::core::ffi::c_void,
        result__: *mut *mut ::core::ffi::c_void,
    ) -> ::windows::core::HRESULT,
    pub ContentTranslationDirectionProperty: unsafe extern "system" fn(
        this: *mut ::core::ffi::c_void,
        result__: *mut *mut ::core::ffi::c_void,
    )
        -> ::windows::core::HRESULT,
    pub ContentTranslationOffsetProperty: unsafe extern "system" fn(
        this: *mut ::core::ffi::c_void,
        result__: *mut *mut ::core::ffi::c_void,
    )
        -> ::windows::core::HRESULT,
}
#[doc(hidden)]
#[repr(transparent)]
pub struct ISplitOpenThemeAnimation(::windows::core::IUnknown);
unsafe impl ::windows::core::Vtable for ISplitOpenThemeAnimation {
    type Vtable = ISplitOpenThemeAnimation_Vtbl;
}
unsafe impl ::windows::core::Interface for ISplitOpenThemeAnimation {
    const IID: ::windows::core::GUID =
        ::windows::core::GUID::from_u128(0x79fdfaca_4245_53f0_b5c7_da1ce2b0b851);
}
#[repr(C)]
#[doc(hidden)]
pub struct ISplitOpenThemeAnimation_Vtbl {
    pub base__: ::windows::core::IInspectable_Vtbl,
    pub OpenedTargetName: unsafe extern "system" fn(
        this: *mut ::core::ffi::c_void,
        result__: *mut ::core::mem::ManuallyDrop<::windows::core::HSTRING>,
    ) -> ::windows::core::HRESULT,
    pub SetOpenedTargetName: unsafe extern "system" fn(
        this: *mut ::core::ffi::c_void,
        value: ::core::mem::ManuallyDrop<::windows::core::HSTRING>,
    ) -> ::windows::core::HRESULT,
    pub OpenedTarget: unsafe extern "system" fn(
        this: *mut ::core::ffi::c_void,
        result__: *mut *mut ::core::ffi::c_void,
    ) -> ::windows::core::HRESULT,
    pub SetOpenedTarget: unsafe extern "system" fn(
        this: *mut ::core::ffi::c_void,
        value: *mut ::core::ffi::c_void,
    ) -> ::windows::core::HRESULT,
    pub ClosedTargetName: unsafe extern "system" fn(
        this: *mut ::core::ffi::c_void,
        result__: *mut ::core::mem::ManuallyDrop<::windows::core::HSTRING>,
    ) -> ::windows::core::HRESULT,
    pub SetClosedTargetName: unsafe extern "system" fn(
        this: *mut ::core::ffi::c_void,
        value: ::core::mem::ManuallyDrop<::windows::core::HSTRING>,
    ) -> ::windows::core::HRESULT,
    pub ClosedTarget: unsafe extern "system" fn(
        this: *mut ::core::ffi::c_void,
        result__: *mut *mut ::core::ffi::c_void,
    ) -> ::windows::core::HRESULT,
    pub SetClosedTarget: unsafe extern "system" fn(
        this: *mut ::core::ffi::c_void,
        value: *mut ::core::ffi::c_void,
    ) -> ::windows::core::HRESULT,
    pub ContentTargetName: unsafe extern "system" fn(
        this: *mut ::core::ffi::c_void,
        result__: *mut ::core::mem::ManuallyDrop<::windows::core::HSTRING>,
    ) -> ::windows::core::HRESULT,
    pub SetContentTargetName: unsafe extern "system" fn(
        this: *mut ::core::ffi::c_void,
        value: ::core::mem::ManuallyDrop<::windows::core::HSTRING>,
    ) -> ::windows::core::HRESULT,
    pub ContentTarget: unsafe extern "system" fn(
        this: *mut ::core::ffi::c_void,
        result__: *mut *mut ::core::ffi::c_void,
    ) -> ::windows::core::HRESULT,
    pub SetContentTarget: unsafe extern "system" fn(
        this: *mut ::core::ffi::c_void,
        value: *mut ::core::ffi::c_void,
    ) -> ::windows::core::HRESULT,
    pub OpenedLength: unsafe extern "system" fn(
        this: *mut ::core::ffi::c_void,
        result__: *mut f64,
    ) -> ::windows::core::HRESULT,
    pub SetOpenedLength: unsafe extern "system" fn(
        this: *mut ::core::ffi::c_void,
        value: f64,
    ) -> ::windows::core::HRESULT,
    pub ClosedLength: unsafe extern "system" fn(
        this: *mut ::core::ffi::c_void,
        result__: *mut f64,
    ) -> ::windows::core::HRESULT,
    pub SetClosedLength: unsafe extern "system" fn(
        this: *mut ::core::ffi::c_void,
        value: f64,
    ) -> ::windows::core::HRESULT,
    pub OffsetFromCenter: unsafe extern "system" fn(
        this: *mut ::core::ffi::c_void,
        result__: *mut f64,
    ) -> ::windows::core::HRESULT,
    pub SetOffsetFromCenter: unsafe extern "system" fn(
        this: *mut ::core::ffi::c_void,
        value: f64,
    ) -> ::windows::core::HRESULT,
    #[cfg(feature = "UI_Xaml_Controls_Primitives")]
    pub ContentTranslationDirection: unsafe extern "system" fn(
        this: *mut ::core::ffi::c_void,
        result__: *mut super::super::Controls::Primitives::AnimationDirection,
    ) -> ::windows::core::HRESULT,
    #[cfg(not(feature = "UI_Xaml_Controls_Primitives"))]
    ContentTranslationDirection: usize,
    #[cfg(feature = "UI_Xaml_Controls_Primitives")]
    pub SetContentTranslationDirection: unsafe extern "system" fn(
        this: *mut ::core::ffi::c_void,
        value: super::super::Controls::Primitives::AnimationDirection,
    ) -> ::windows::core::HRESULT,
    #[cfg(not(feature = "UI_Xaml_Controls_Primitives"))]
    SetContentTranslationDirection: usize,
    pub ContentTranslationOffset: unsafe extern "system" fn(
        this: *mut ::core::ffi::c_void,
        result__: *mut f64,
    ) -> ::windows::core::HRESULT,
    pub SetContentTranslationOffset: unsafe extern "system" fn(
        this: *mut ::core::ffi::c_void,
        value: f64,
    ) -> ::windows::core::HRESULT,
}
#[doc(hidden)]
#[repr(transparent)]
pub struct ISplitOpenThemeAnimationStatics(::windows::core::IUnknown);
unsafe impl ::windows::core::Vtable for ISplitOpenThemeAnimationStatics {
    type Vtable = ISplitOpenThemeAnimationStatics_Vtbl;
}
unsafe impl ::windows::core::Interface for ISplitOpenThemeAnimationStatics {
    const IID: ::windows::core::GUID =
        ::windows::core::GUID::from_u128(0xe5a73b84_a4ae_5c38_84da_f7ed30fc9b6e);
}
#[repr(C)]
#[doc(hidden)]
pub struct ISplitOpenThemeAnimationStatics_Vtbl {
    pub base__: ::windows::core::IInspectable_Vtbl,
    pub OpenedTargetNameProperty: unsafe extern "system" fn(
        this: *mut ::core::ffi::c_void,
        result__: *mut *mut ::core::ffi::c_void,
    ) -> ::windows::core::HRESULT,
    pub OpenedTargetProperty: unsafe extern "system" fn(
        this: *mut ::core::ffi::c_void,
        result__: *mut *mut ::core::ffi::c_void,
    ) -> ::windows::core::HRESULT,
    pub ClosedTargetNameProperty: unsafe extern "system" fn(
        this: *mut ::core::ffi::c_void,
        result__: *mut *mut ::core::ffi::c_void,
    ) -> ::windows::core::HRESULT,
    pub ClosedTargetProperty: unsafe extern "system" fn(
        this: *mut ::core::ffi::c_void,
        result__: *mut *mut ::core::ffi::c_void,
    ) -> ::windows::core::HRESULT,
    pub ContentTargetNameProperty: unsafe extern "system" fn(
        this: *mut ::core::ffi::c_void,
        result__: *mut *mut ::core::ffi::c_void,
    ) -> ::windows::core::HRESULT,
    pub ContentTargetProperty: unsafe extern "system" fn(
        this: *mut ::core::ffi::c_void,
        result__: *mut *mut ::core::ffi::c_void,
    ) -> ::windows::core::HRESULT,
    pub OpenedLengthProperty: unsafe extern "system" fn(
        this: *mut ::core::ffi::c_void,
        result__: *mut *mut ::core::ffi::c_void,
    ) -> ::windows::core::HRESULT,
    pub ClosedLengthProperty: unsafe extern "system" fn(
        this: *mut ::core::ffi::c_void,
        result__: *mut *mut ::core::ffi::c_void,
    ) -> ::windows::core::HRESULT,
    pub OffsetFromCenterProperty: unsafe extern "system" fn(
        this: *mut ::core::ffi::c_void,
        result__: *mut *mut ::core::ffi::c_void,
    ) -> ::windows::core::HRESULT,
    pub ContentTranslationDirectionProperty: unsafe extern "system" fn(
        this: *mut ::core::ffi::c_void,
        result__: *mut *mut ::core::ffi::c_void,
    )
        -> ::windows::core::HRESULT,
    pub ContentTranslationOffsetProperty: unsafe extern "system" fn(
        this: *mut ::core::ffi::c_void,
        result__: *mut *mut ::core::ffi::c_void,
    )
        -> ::windows::core::HRESULT,
}
#[doc(hidden)]
#[repr(transparent)]
pub struct IStoryboard(::windows::core::IUnknown);
unsafe impl ::windows::core::Vtable for IStoryboard {
    type Vtable = IStoryboard_Vtbl;
}
unsafe impl ::windows::core::Interface for IStoryboard {
    const IID: ::windows::core::GUID =
        ::windows::core::GUID::from_u128(0x04d41bb3_8721_519e_8e53_fb8b34920305);
}
#[repr(C)]
#[doc(hidden)]
pub struct IStoryboard_Vtbl {
    pub base__: ::windows::core::IInspectable_Vtbl,
    pub Children: unsafe extern "system" fn(
        this: *mut ::core::ffi::c_void,
        result__: *mut *mut ::core::ffi::c_void,
    ) -> ::windows::core::HRESULT,
    pub Seek: unsafe extern "system" fn(
        this: *mut ::core::ffi::c_void,
        offset: ::windows::Foundation::TimeSpan,
    ) -> ::windows::core::HRESULT,
    pub Stop: unsafe extern "system" fn(this: *mut ::core::ffi::c_void) -> ::windows::core::HRESULT,
    pub Begin:
        unsafe extern "system" fn(this: *mut ::core::ffi::c_void) -> ::windows::core::HRESULT,
    pub Pause:
        unsafe extern "system" fn(this: *mut ::core::ffi::c_void) -> ::windows::core::HRESULT,
    pub Resume:
        unsafe extern "system" fn(this: *mut ::core::ffi::c_void) -> ::windows::core::HRESULT,
    pub GetCurrentState: unsafe extern "system" fn(
        this: *mut ::core::ffi::c_void,
        result__: *mut ClockState,
    ) -> ::windows::core::HRESULT,
    pub GetCurrentTime: unsafe extern "system" fn(
        this: *mut ::core::ffi::c_void,
        result__: *mut ::windows::Foundation::TimeSpan,
    ) -> ::windows::core::HRESULT,
    pub SeekAlignedToLastTick: unsafe extern "system" fn(
        this: *mut ::core::ffi::c_void,
        offset: ::windows::Foundation::TimeSpan,
    ) -> ::windows::core::HRESULT,
    pub SkipToFill:
        unsafe extern "system" fn(this: *mut ::core::ffi::c_void) -> ::windows::core::HRESULT,
}
#[doc(hidden)]
#[repr(transparent)]
pub struct IStoryboardStatics(::windows::core::IUnknown);
unsafe impl ::windows::core::Vtable for IStoryboardStatics {
    type Vtable = IStoryboardStatics_Vtbl;
}
unsafe impl ::windows::core::Interface for IStoryboardStatics {
    const IID: ::windows::core::GUID =
        ::windows::core::GUID::from_u128(0xdd18519b_d4e4_597d_a0b7_655ebdd35efa);
}
#[repr(C)]
#[doc(hidden)]
pub struct IStoryboardStatics_Vtbl {
    pub base__: ::windows::core::IInspectable_Vtbl,
    pub TargetPropertyProperty: unsafe extern "system" fn(
        this: *mut ::core::ffi::c_void,
        result__: *mut *mut ::core::ffi::c_void,
    ) -> ::windows::core::HRESULT,
    pub GetTargetProperty: unsafe extern "system" fn(
        this: *mut ::core::ffi::c_void,
        element: *mut ::core::ffi::c_void,
        result__: *mut ::core::mem::ManuallyDrop<::windows::core::HSTRING>,
    ) -> ::windows::core::HRESULT,
    pub SetTargetProperty: unsafe extern "system" fn(
        this: *mut ::core::ffi::c_void,
        element: *mut ::core::ffi::c_void,
        path: ::core::mem::ManuallyDrop<::windows::core::HSTRING>,
    ) -> ::windows::core::HRESULT,
    pub TargetNameProperty: unsafe extern "system" fn(
        this: *mut ::core::ffi::c_void,
        result__: *mut *mut ::core::ffi::c_void,
    ) -> ::windows::core::HRESULT,
    pub GetTargetName: unsafe extern "system" fn(
        this: *mut ::core::ffi::c_void,
        element: *mut ::core::ffi::c_void,
        result__: *mut ::core::mem::ManuallyDrop<::windows::core::HSTRING>,
    ) -> ::windows::core::HRESULT,
    pub SetTargetName: unsafe extern "system" fn(
        this: *mut ::core::ffi::c_void,
        element: *mut ::core::ffi::c_void,
        name: ::core::mem::ManuallyDrop<::windows::core::HSTRING>,
    ) -> ::windows::core::HRESULT,
    pub SetTarget: unsafe extern "system" fn(
        this: *mut ::core::ffi::c_void,
        timeline: *mut ::core::ffi::c_void,
        target: *mut ::core::ffi::c_void,
    ) -> ::windows::core::HRESULT,
}
#[doc(hidden)]
#[repr(transparent)]
pub struct ISuppressNavigationTransitionInfo(::windows::core::IUnknown);
unsafe impl ::windows::core::Vtable for ISuppressNavigationTransitionInfo {
    type Vtable = ISuppressNavigationTransitionInfo_Vtbl;
}
unsafe impl ::windows::core::Interface for ISuppressNavigationTransitionInfo {
    const IID: ::windows::core::GUID =
        ::windows::core::GUID::from_u128(0x3ecd2bd1_9805_5f51_bb9e_051fea8dc355);
}
#[repr(C)]
#[doc(hidden)]
pub struct ISuppressNavigationTransitionInfo_Vtbl {
    pub base__: ::windows::core::IInspectable_Vtbl,
}
#[doc(hidden)]
#[repr(transparent)]
pub struct ISwipeBackThemeAnimation(::windows::core::IUnknown);
unsafe impl ::windows::core::Vtable for ISwipeBackThemeAnimation {
    type Vtable = ISwipeBackThemeAnimation_Vtbl;
}
unsafe impl ::windows::core::Interface for ISwipeBackThemeAnimation {
    const IID: ::windows::core::GUID =
        ::windows::core::GUID::from_u128(0xf095d058_bc9e_58ee_8877_e084723b4333);
}
#[repr(C)]
#[doc(hidden)]
pub struct ISwipeBackThemeAnimation_Vtbl {
    pub base__: ::windows::core::IInspectable_Vtbl,
    pub TargetName: unsafe extern "system" fn(
        this: *mut ::core::ffi::c_void,
        result__: *mut ::core::mem::ManuallyDrop<::windows::core::HSTRING>,
    ) -> ::windows::core::HRESULT,
    pub SetTargetName: unsafe extern "system" fn(
        this: *mut ::core::ffi::c_void,
        value: ::core::mem::ManuallyDrop<::windows::core::HSTRING>,
    ) -> ::windows::core::HRESULT,
    pub FromHorizontalOffset: unsafe extern "system" fn(
        this: *mut ::core::ffi::c_void,
        result__: *mut f64,
    ) -> ::windows::core::HRESULT,
    pub SetFromHorizontalOffset: unsafe extern "system" fn(
        this: *mut ::core::ffi::c_void,
        value: f64,
    ) -> ::windows::core::HRESULT,
    pub FromVerticalOffset: unsafe extern "system" fn(
        this: *mut ::core::ffi::c_void,
        result__: *mut f64,
    ) -> ::windows::core::HRESULT,
    pub SetFromVerticalOffset: unsafe extern "system" fn(
        this: *mut ::core::ffi::c_void,
        value: f64,
    ) -> ::windows::core::HRESULT,
}
#[doc(hidden)]
#[repr(transparent)]
pub struct ISwipeBackThemeAnimationStatics(::windows::core::IUnknown);
unsafe impl ::windows::core::Vtable for ISwipeBackThemeAnimationStatics {
    type Vtable = ISwipeBackThemeAnimationStatics_Vtbl;
}
unsafe impl ::windows::core::Interface for ISwipeBackThemeAnimationStatics {
    const IID: ::windows::core::GUID =
        ::windows::core::GUID::from_u128(0x18a7a588_b9a2_573b_8e2b_38048c4635a7);
}
#[repr(C)]
#[doc(hidden)]
pub struct ISwipeBackThemeAnimationStatics_Vtbl {
    pub base__: ::windows::core::IInspectable_Vtbl,
    pub TargetNameProperty: unsafe extern "system" fn(
        this: *mut ::core::ffi::c_void,
        result__: *mut *mut ::core::ffi::c_void,
    ) -> ::windows::core::HRESULT,
    pub FromHorizontalOffsetProperty: unsafe extern "system" fn(
        this: *mut ::core::ffi::c_void,
        result__: *mut *mut ::core::ffi::c_void,
    ) -> ::windows::core::HRESULT,
    pub FromVerticalOffsetProperty: unsafe extern "system" fn(
        this: *mut ::core::ffi::c_void,
        result__: *mut *mut ::core::ffi::c_void,
    ) -> ::windows::core::HRESULT,
}
#[doc(hidden)]
#[repr(transparent)]
pub struct ISwipeHintThemeAnimation(::windows::core::IUnknown);
unsafe impl ::windows::core::Vtable for ISwipeHintThemeAnimation {
    type Vtable = ISwipeHintThemeAnimation_Vtbl;
}
unsafe impl ::windows::core::Interface for ISwipeHintThemeAnimation {
    const IID: ::windows::core::GUID =
        ::windows::core::GUID::from_u128(0x09de03d7_4b8a_55e1_afad_5f60598733ea);
}
#[repr(C)]
#[doc(hidden)]
pub struct ISwipeHintThemeAnimation_Vtbl {
    pub base__: ::windows::core::IInspectable_Vtbl,
    pub TargetName: unsafe extern "system" fn(
        this: *mut ::core::ffi::c_void,
        result__: *mut ::core::mem::ManuallyDrop<::windows::core::HSTRING>,
    ) -> ::windows::core::HRESULT,
    pub SetTargetName: unsafe extern "system" fn(
        this: *mut ::core::ffi::c_void,
        value: ::core::mem::ManuallyDrop<::windows::core::HSTRING>,
    ) -> ::windows::core::HRESULT,
    pub ToHorizontalOffset: unsafe extern "system" fn(
        this: *mut ::core::ffi::c_void,
        result__: *mut f64,
    ) -> ::windows::core::HRESULT,
    pub SetToHorizontalOffset: unsafe extern "system" fn(
        this: *mut ::core::ffi::c_void,
        value: f64,
    ) -> ::windows::core::HRESULT,
    pub ToVerticalOffset: unsafe extern "system" fn(
        this: *mut ::core::ffi::c_void,
        result__: *mut f64,
    ) -> ::windows::core::HRESULT,
    pub SetToVerticalOffset: unsafe extern "system" fn(
        this: *mut ::core::ffi::c_void,
        value: f64,
    ) -> ::windows::core::HRESULT,
}
#[doc(hidden)]
#[repr(transparent)]
pub struct ISwipeHintThemeAnimationStatics(::windows::core::IUnknown);
unsafe impl ::windows::core::Vtable for ISwipeHintThemeAnimationStatics {
    type Vtable = ISwipeHintThemeAnimationStatics_Vtbl;
}
unsafe impl ::windows::core::Interface for ISwipeHintThemeAnimationStatics {
    const IID: ::windows::core::GUID =
        ::windows::core::GUID::from_u128(0xf3308304_4f09_54d7_a4d5_ca558bbfe26f);
}
#[repr(C)]
#[doc(hidden)]
pub struct ISwipeHintThemeAnimationStatics_Vtbl {
    pub base__: ::windows::core::IInspectable_Vtbl,
    pub TargetNameProperty: unsafe extern "system" fn(
        this: *mut ::core::ffi::c_void,
        result__: *mut *mut ::core::ffi::c_void,
    ) -> ::windows::core::HRESULT,
    pub ToHorizontalOffsetProperty: unsafe extern "system" fn(
        this: *mut ::core::ffi::c_void,
        result__: *mut *mut ::core::ffi::c_void,
    ) -> ::windows::core::HRESULT,
    pub ToVerticalOffsetProperty: unsafe extern "system" fn(
        this: *mut ::core::ffi::c_void,
        result__: *mut *mut ::core::ffi::c_void,
    ) -> ::windows::core::HRESULT,
}
#[doc(hidden)]
#[repr(transparent)]
pub struct ITimeline(::windows::core::IUnknown);
unsafe impl ::windows::core::Vtable for ITimeline {
    type Vtable = ITimeline_Vtbl;
}
unsafe impl ::windows::core::Interface for ITimeline {
    const IID: ::windows::core::GUID =
        ::windows::core::GUID::from_u128(0xd0f9b330_cc2a_5b05_9786_2da4c6584581);
}
#[repr(C)]
#[doc(hidden)]
pub struct ITimeline_Vtbl {
    pub base__: ::windows::core::IInspectable_Vtbl,
    pub AutoReverse: unsafe extern "system" fn(
        this: *mut ::core::ffi::c_void,
        result__: *mut bool,
    ) -> ::windows::core::HRESULT,
    pub SetAutoReverse: unsafe extern "system" fn(
        this: *mut ::core::ffi::c_void,
        value: bool,
    ) -> ::windows::core::HRESULT,
    pub BeginTime: unsafe extern "system" fn(
        this: *mut ::core::ffi::c_void,
        result__: *mut *mut ::core::ffi::c_void,
    ) -> ::windows::core::HRESULT,
    pub SetBeginTime: unsafe extern "system" fn(
        this: *mut ::core::ffi::c_void,
        value: *mut ::core::ffi::c_void,
    ) -> ::windows::core::HRESULT,
    pub Duration: unsafe extern "system" fn(
        this: *mut ::core::ffi::c_void,
        result__: *mut super::super::Duration,
    ) -> ::windows::core::HRESULT,
    pub SetDuration: unsafe extern "system" fn(
        this: *mut ::core::ffi::c_void,
        value: super::super::Duration,
    ) -> ::windows::core::HRESULT,
    pub SpeedRatio: unsafe extern "system" fn(
        this: *mut ::core::ffi::c_void,
        result__: *mut f64,
    ) -> ::windows::core::HRESULT,
    pub SetSpeedRatio: unsafe extern "system" fn(
        this: *mut ::core::ffi::c_void,
        value: f64,
    ) -> ::windows::core::HRESULT,
    pub FillBehavior: unsafe extern "system" fn(
        this: *mut ::core::ffi::c_void,
        result__: *mut FillBehavior,
    ) -> ::windows::core::HRESULT,
    pub SetFillBehavior: unsafe extern "system" fn(
        this: *mut ::core::ffi::c_void,
        value: FillBehavior,
    ) -> ::windows::core::HRESULT,
    pub RepeatBehavior: unsafe extern "system" fn(
        this: *mut ::core::ffi::c_void,
        result__: *mut RepeatBehavior,
    ) -> ::windows::core::HRESULT,
    pub SetRepeatBehavior: unsafe extern "system" fn(
        this: *mut ::core::ffi::c_void,
        value: RepeatBehavior,
    ) -> ::windows::core::HRESULT,
    pub Completed: unsafe extern "system" fn(
        this: *mut ::core::ffi::c_void,
        handler: *mut ::core::ffi::c_void,
        result__: *mut ::windows::Foundation::EventRegistrationToken,
    ) -> ::windows::core::HRESULT,
    pub RemoveCompleted: unsafe extern "system" fn(
        this: *mut ::core::ffi::c_void,
        token: ::windows::Foundation::EventRegistrationToken,
    ) -> ::windows::core::HRESULT,
}
#[doc(hidden)]
#[repr(transparent)]
pub struct ITimelineFactory(::windows::core::IUnknown);
unsafe impl ::windows::core::Vtable for ITimelineFactory {
    type Vtable = ITimelineFactory_Vtbl;
}
unsafe impl ::windows::core::Interface for ITimelineFactory {
    const IID: ::windows::core::GUID =
        ::windows::core::GUID::from_u128(0x6a635732_a827_5398_9fc8_dfbc3b97e3c1);
}
#[repr(C)]
#[doc(hidden)]
pub struct ITimelineFactory_Vtbl {
    pub base__: ::windows::core::IInspectable_Vtbl,
    pub CreateInstance: unsafe extern "system" fn(
        this: *mut ::core::ffi::c_void,
        baseinterface: *mut ::core::ffi::c_void,
        innerinterface: *mut *mut ::core::ffi::c_void,
        result__: *mut *mut ::core::ffi::c_void,
    ) -> ::windows::core::HRESULT,
}
#[doc(hidden)]
#[repr(transparent)]
pub struct ITimelineStatics(::windows::core::IUnknown);
unsafe impl ::windows::core::Vtable for ITimelineStatics {
    type Vtable = ITimelineStatics_Vtbl;
}
unsafe impl ::windows::core::Interface for ITimelineStatics {
    const IID: ::windows::core::GUID =
        ::windows::core::GUID::from_u128(0x778b8471_c831_503a_8748_fe6bbc7153b7);
}
#[repr(C)]
#[doc(hidden)]
pub struct ITimelineStatics_Vtbl {
    pub base__: ::windows::core::IInspectable_Vtbl,
    pub AllowDependentAnimations: unsafe extern "system" fn(
        this: *mut ::core::ffi::c_void,
        result__: *mut bool,
    ) -> ::windows::core::HRESULT,
    pub SetAllowDependentAnimations: unsafe extern "system" fn(
        this: *mut ::core::ffi::c_void,
        value: bool,
    ) -> ::windows::core::HRESULT,
    pub AutoReverseProperty: unsafe extern "system" fn(
        this: *mut ::core::ffi::c_void,
        result__: *mut *mut ::core::ffi::c_void,
    ) -> ::windows::core::HRESULT,
    pub BeginTimeProperty: unsafe extern "system" fn(
        this: *mut ::core::ffi::c_void,
        result__: *mut *mut ::core::ffi::c_void,
    ) -> ::windows::core::HRESULT,
    pub DurationProperty: unsafe extern "system" fn(
        this: *mut ::core::ffi::c_void,
        result__: *mut *mut ::core::ffi::c_void,
    ) -> ::windows::core::HRESULT,
    pub SpeedRatioProperty: unsafe extern "system" fn(
        this: *mut ::core::ffi::c_void,
        result__: *mut *mut ::core::ffi::c_void,
    ) -> ::windows::core::HRESULT,
    pub FillBehaviorProperty: unsafe extern "system" fn(
        this: *mut ::core::ffi::c_void,
        result__: *mut *mut ::core::ffi::c_void,
    ) -> ::windows::core::HRESULT,
    pub RepeatBehaviorProperty: unsafe extern "system" fn(
        this: *mut ::core::ffi::c_void,
        result__: *mut *mut ::core::ffi::c_void,
    ) -> ::windows::core::HRESULT,
}
#[doc(hidden)]
#[repr(transparent)]
pub struct ITransition(::windows::core::IUnknown);
unsafe impl ::windows::core::Vtable for ITransition {
    type Vtable = ITransition_Vtbl;
}
unsafe impl ::windows::core::Interface for ITransition {
    const IID: ::windows::core::GUID =
        ::windows::core::GUID::from_u128(0xe5b71956_8e44_5a38_b41e_274d706102bf);
}
#[repr(C)]
#[doc(hidden)]
pub struct ITransition_Vtbl {
    pub base__: ::windows::core::IInspectable_Vtbl,
}
#[doc(hidden)]
#[repr(transparent)]
pub struct ITransitionFactory(::windows::core::IUnknown);
unsafe impl ::windows::core::Vtable for ITransitionFactory {
    type Vtable = ITransitionFactory_Vtbl;
}
unsafe impl ::windows::core::Interface for ITransitionFactory {
    const IID: ::windows::core::GUID =
        ::windows::core::GUID::from_u128(0xb7023e3b_bcd3_50ec_aacf_8cfcece25f17);
}
#[repr(C)]
#[doc(hidden)]
pub struct ITransitionFactory_Vtbl {
    pub base__: ::windows::core::IInspectable_Vtbl,
}
#[doc = "*Required features: `\"UI_Xaml_Media_Animation\"`*"]
#[repr(transparent)]
pub struct AddDeleteThemeTransition(::windows::core::IUnknown);
impl AddDeleteThemeTransition {
    pub fn new() -> ::windows::core::Result<Self> {
        Self::IActivationFactory(|f| f.ActivateInstance::<Self>())
    }
    fn IActivationFactory<
        R,
        F: FnOnce(&::windows::core::IGenericFactory) -> ::windows::core::Result<R>,
    >(
        callback: F,
    ) -> ::windows::core::Result<R> {
        static SHARED: ::windows::core::FactoryCache<
            AddDeleteThemeTransition,
            ::windows::core::IGenericFactory,
        > = ::windows::core::FactoryCache::new();
        SHARED.call(callback)
    }
    pub fn GetValue(
        &self,
        dp: &super::super::DependencyProperty,
    ) -> ::windows::core::Result<::windows::core::IInspectable> {
        let this = &::windows::core::Interface::cast::<super::super::IDependencyObject>(self)?;
        unsafe {
            let mut result__ = ::core::mem::MaybeUninit::zeroed();
            (::windows::core::Vtable::vtable(this).GetValue)(
                ::windows::core::Vtable::as_raw(this),
                ::core::mem::transmute_copy(dp),
                result__.as_mut_ptr(),
            )
            .from_abi::<::windows::core::IInspectable>(result__)
        }
    }
    pub fn SetValue<'a, P0>(
        &self,
        dp: &super::super::DependencyProperty,
        value: P0,
    ) -> ::windows::core::Result<()>
    where
        P0: ::std::convert::Into<::windows::core::InParam<'a, ::windows::core::IInspectable>>,
    {
        let this = &::windows::core::Interface::cast::<super::super::IDependencyObject>(self)?;
        unsafe {
            (::windows::core::Vtable::vtable(this).SetValue)(
                ::windows::core::Vtable::as_raw(this),
                ::core::mem::transmute_copy(dp),
                value.into().abi(),
            )
            .ok()
        }
    }
    pub fn ClearValue(&self, dp: &super::super::DependencyProperty) -> ::windows::core::Result<()> {
        let this = &::windows::core::Interface::cast::<super::super::IDependencyObject>(self)?;
        unsafe {
            (::windows::core::Vtable::vtable(this).ClearValue)(
                ::windows::core::Vtable::as_raw(this),
                ::core::mem::transmute_copy(dp),
            )
            .ok()
        }
    }
    pub fn ReadLocalValue(
        &self,
        dp: &super::super::DependencyProperty,
    ) -> ::windows::core::Result<::windows::core::IInspectable> {
        let this = &::windows::core::Interface::cast::<super::super::IDependencyObject>(self)?;
        unsafe {
            let mut result__ = ::core::mem::MaybeUninit::zeroed();
            (::windows::core::Vtable::vtable(this).ReadLocalValue)(
                ::windows::core::Vtable::as_raw(this),
                ::core::mem::transmute_copy(dp),
                result__.as_mut_ptr(),
            )
            .from_abi::<::windows::core::IInspectable>(result__)
        }
    }
    pub fn GetAnimationBaseValue(
        &self,
        dp: &super::super::DependencyProperty,
    ) -> ::windows::core::Result<::windows::core::IInspectable> {
        let this = &::windows::core::Interface::cast::<super::super::IDependencyObject>(self)?;
        unsafe {
            let mut result__ = ::core::mem::MaybeUninit::zeroed();
            (::windows::core::Vtable::vtable(this).GetAnimationBaseValue)(
                ::windows::core::Vtable::as_raw(this),
                ::core::mem::transmute_copy(dp),
                result__.as_mut_ptr(),
            )
            .from_abi::<::windows::core::IInspectable>(result__)
        }
    }
    pub fn RegisterPropertyChangedCallback(
        &self,
        dp: &super::super::DependencyProperty,
        callback: &super::super::DependencyPropertyChangedCallback,
    ) -> ::windows::core::Result<i64> {
        let this = &::windows::core::Interface::cast::<super::super::IDependencyObject>(self)?;
        unsafe {
            let mut result__ = ::core::mem::MaybeUninit::zeroed();
            (::windows::core::Vtable::vtable(this).RegisterPropertyChangedCallback)(
                ::windows::core::Vtable::as_raw(this),
                ::core::mem::transmute_copy(dp),
                ::core::mem::transmute_copy(callback),
                result__.as_mut_ptr(),
            )
            .from_abi::<i64>(result__)
        }
    }
    pub fn UnregisterPropertyChangedCallback(
        &self,
        dp: &super::super::DependencyProperty,
        token: i64,
    ) -> ::windows::core::Result<()> {
        let this = &::windows::core::Interface::cast::<super::super::IDependencyObject>(self)?;
        unsafe {
            (::windows::core::Vtable::vtable(this).UnregisterPropertyChangedCallback)(
                ::windows::core::Vtable::as_raw(this),
                ::core::mem::transmute_copy(dp),
                token,
            )
            .ok()
        }
    }
    pub fn Dispatcher(&self) -> ::windows::core::Result<::windows::UI::Core::CoreDispatcher> {
        let this = &::windows::core::Interface::cast::<super::super::IDependencyObject>(self)?;
        unsafe {
            let mut result__ = ::core::mem::MaybeUninit::zeroed();
            (::windows::core::Vtable::vtable(this).Dispatcher)(
                ::windows::core::Vtable::as_raw(this),
                result__.as_mut_ptr(),
            )
            .from_abi::<::windows::UI::Core::CoreDispatcher>(result__)
        }
    }
    #[doc = "*Required features: `\"UI_Dispatching\"`*"]
    #[cfg(feature = "UI_Dispatching")]
    pub fn DispatcherQueue(
        &self,
    ) -> ::windows::core::Result<super::super::super::Dispatching::DispatcherQueue> {
        let this = &::windows::core::Interface::cast::<super::super::IDependencyObject>(self)?;
        unsafe {
            let mut result__ = ::core::mem::MaybeUninit::zeroed();
            (::windows::core::Vtable::vtable(this).DispatcherQueue)(
                ::windows::core::Vtable::as_raw(this),
                result__.as_mut_ptr(),
            )
            .from_abi::<super::super::super::Dispatching::DispatcherQueue>(result__)
        }
    }
}
impl ::core::clone::Clone for AddDeleteThemeTransition {
    fn clone(&self) -> Self {
        Self(self.0.clone())
    }
}
impl ::core::cmp::PartialEq for AddDeleteThemeTransition {
    fn eq(&self, other: &Self) -> bool {
        self.0 == other.0
    }
}
impl ::core::cmp::Eq for AddDeleteThemeTransition {}
impl ::core::fmt::Debug for AddDeleteThemeTransition {
    fn fmt(&self, f: &mut ::core::fmt::Formatter<'_>) -> ::core::fmt::Result {
        f.debug_tuple("AddDeleteThemeTransition").field(&self.0).finish()
    }
}
unsafe impl ::windows::core::RuntimeType for AddDeleteThemeTransition {
    const SIGNATURE : ::windows::core::ConstBuffer = ::windows::core::ConstBuffer::from_slice ( b"rc(Microsoft.UI.Xaml.Media.Animation.AddDeleteThemeTransition;{3728595e-0ea2-524b-9348-86cfb860a0ff})" ) ;
    type DefaultType = ::core::option::Option<Self>;
    fn from_default(from: &Self::DefaultType) -> ::windows::core::Result<Self> {
        from.as_ref().cloned().ok_or(::windows::core::Error::OK)
    }
}
unsafe impl ::windows::core::Vtable for AddDeleteThemeTransition {
    type Vtable = IAddDeleteThemeTransition_Vtbl;
}
unsafe impl ::windows::core::Interface for AddDeleteThemeTransition {
    const IID: ::windows::core::GUID =
        <IAddDeleteThemeTransition as ::windows::core::Interface>::IID;
}
impl ::windows::core::RuntimeName for AddDeleteThemeTransition {
    const NAME: &'static str = "Microsoft.UI.Xaml.Media.Animation.AddDeleteThemeTransition";
}
::windows::core::interface_hierarchy!(
    AddDeleteThemeTransition,
    ::windows::core::IUnknown,
    ::windows::core::IInspectable
);
impl ::core::convert::From<AddDeleteThemeTransition> for Transition {
    fn from(value: AddDeleteThemeTransition) -> Self {
        ::core::convert::From::from(&value)
    }
}
impl ::core::convert::From<&AddDeleteThemeTransition> for Transition {
    fn from(value: &AddDeleteThemeTransition) -> Self {
        ::windows::core::Interface::cast(value).unwrap()
    }
}
impl<'a> ::core::convert::From<&AddDeleteThemeTransition>
    for ::windows::core::InParam<'a, Transition>
{
    fn from(value: &AddDeleteThemeTransition) -> Self {
        ::windows::core::InParam::owned(value.into())
    }
}
impl ::core::convert::From<AddDeleteThemeTransition> for super::super::DependencyObject {
    fn from(value: AddDeleteThemeTransition) -> Self {
        ::core::convert::From::from(&value)
    }
}
impl ::core::convert::From<&AddDeleteThemeTransition> for super::super::DependencyObject {
    fn from(value: &AddDeleteThemeTransition) -> Self {
        ::windows::core::Interface::cast(value).unwrap()
    }
}
impl<'a> ::core::convert::From<&AddDeleteThemeTransition>
    for ::windows::core::InParam<'a, super::super::DependencyObject>
{
    fn from(value: &AddDeleteThemeTransition) -> Self {
        ::windows::core::InParam::owned(value.into())
    }
}
unsafe impl ::core::marker::Send for AddDeleteThemeTransition {}
unsafe impl ::core::marker::Sync for AddDeleteThemeTransition {}
#[doc = "*Required features: `\"UI_Xaml_Media_Animation\"`*"]
#[repr(transparent)]
pub struct BackEase(::windows::core::IUnknown);
impl BackEase {
    pub fn new() -> ::windows::core::Result<Self> {
        Self::IActivationFactory(|f| f.ActivateInstance::<Self>())
    }
    fn IActivationFactory<
        R,
        F: FnOnce(&::windows::core::IGenericFactory) -> ::windows::core::Result<R>,
    >(
        callback: F,
    ) -> ::windows::core::Result<R> {
        static SHARED: ::windows::core::FactoryCache<BackEase, ::windows::core::IGenericFactory> =
            ::windows::core::FactoryCache::new();
        SHARED.call(callback)
    }
    pub fn Amplitude(&self) -> ::windows::core::Result<f64> {
        let this = self;
        unsafe {
            let mut result__ = ::core::mem::MaybeUninit::zeroed();
            (::windows::core::Vtable::vtable(this).Amplitude)(
                ::windows::core::Vtable::as_raw(this),
                result__.as_mut_ptr(),
            )
            .from_abi::<f64>(result__)
        }
    }
    pub fn SetAmplitude(&self, value: f64) -> ::windows::core::Result<()> {
        let this = self;
        unsafe {
            (::windows::core::Vtable::vtable(this).SetAmplitude)(
                ::windows::core::Vtable::as_raw(this),
                value,
            )
            .ok()
        }
    }
    pub fn AmplitudeProperty() -> ::windows::core::Result<super::super::DependencyProperty> {
        Self::IBackEaseStatics(|this| unsafe {
            let mut result__ = ::core::mem::MaybeUninit::zeroed();
            (::windows::core::Vtable::vtable(this).AmplitudeProperty)(
                ::windows::core::Vtable::as_raw(this),
                result__.as_mut_ptr(),
            )
            .from_abi::<super::super::DependencyProperty>(result__)
        })
    }
    pub fn GetValue(
        &self,
        dp: &super::super::DependencyProperty,
    ) -> ::windows::core::Result<::windows::core::IInspectable> {
        let this = &::windows::core::Interface::cast::<super::super::IDependencyObject>(self)?;
        unsafe {
            let mut result__ = ::core::mem::MaybeUninit::zeroed();
            (::windows::core::Vtable::vtable(this).GetValue)(
                ::windows::core::Vtable::as_raw(this),
                ::core::mem::transmute_copy(dp),
                result__.as_mut_ptr(),
            )
            .from_abi::<::windows::core::IInspectable>(result__)
        }
    }
    pub fn SetValue<'a, P0>(
        &self,
        dp: &super::super::DependencyProperty,
        value: P0,
    ) -> ::windows::core::Result<()>
    where
        P0: ::std::convert::Into<::windows::core::InParam<'a, ::windows::core::IInspectable>>,
    {
        let this = &::windows::core::Interface::cast::<super::super::IDependencyObject>(self)?;
        unsafe {
            (::windows::core::Vtable::vtable(this).SetValue)(
                ::windows::core::Vtable::as_raw(this),
                ::core::mem::transmute_copy(dp),
                value.into().abi(),
            )
            .ok()
        }
    }
    pub fn ClearValue(&self, dp: &super::super::DependencyProperty) -> ::windows::core::Result<()> {
        let this = &::windows::core::Interface::cast::<super::super::IDependencyObject>(self)?;
        unsafe {
            (::windows::core::Vtable::vtable(this).ClearValue)(
                ::windows::core::Vtable::as_raw(this),
                ::core::mem::transmute_copy(dp),
            )
            .ok()
        }
    }
    pub fn ReadLocalValue(
        &self,
        dp: &super::super::DependencyProperty,
    ) -> ::windows::core::Result<::windows::core::IInspectable> {
        let this = &::windows::core::Interface::cast::<super::super::IDependencyObject>(self)?;
        unsafe {
            let mut result__ = ::core::mem::MaybeUninit::zeroed();
            (::windows::core::Vtable::vtable(this).ReadLocalValue)(
                ::windows::core::Vtable::as_raw(this),
                ::core::mem::transmute_copy(dp),
                result__.as_mut_ptr(),
            )
            .from_abi::<::windows::core::IInspectable>(result__)
        }
    }
    pub fn GetAnimationBaseValue(
        &self,
        dp: &super::super::DependencyProperty,
    ) -> ::windows::core::Result<::windows::core::IInspectable> {
        let this = &::windows::core::Interface::cast::<super::super::IDependencyObject>(self)?;
        unsafe {
            let mut result__ = ::core::mem::MaybeUninit::zeroed();
            (::windows::core::Vtable::vtable(this).GetAnimationBaseValue)(
                ::windows::core::Vtable::as_raw(this),
                ::core::mem::transmute_copy(dp),
                result__.as_mut_ptr(),
            )
            .from_abi::<::windows::core::IInspectable>(result__)
        }
    }
    pub fn RegisterPropertyChangedCallback(
        &self,
        dp: &super::super::DependencyProperty,
        callback: &super::super::DependencyPropertyChangedCallback,
    ) -> ::windows::core::Result<i64> {
        let this = &::windows::core::Interface::cast::<super::super::IDependencyObject>(self)?;
        unsafe {
            let mut result__ = ::core::mem::MaybeUninit::zeroed();
            (::windows::core::Vtable::vtable(this).RegisterPropertyChangedCallback)(
                ::windows::core::Vtable::as_raw(this),
                ::core::mem::transmute_copy(dp),
                ::core::mem::transmute_copy(callback),
                result__.as_mut_ptr(),
            )
            .from_abi::<i64>(result__)
        }
    }
    pub fn UnregisterPropertyChangedCallback(
        &self,
        dp: &super::super::DependencyProperty,
        token: i64,
    ) -> ::windows::core::Result<()> {
        let this = &::windows::core::Interface::cast::<super::super::IDependencyObject>(self)?;
        unsafe {
            (::windows::core::Vtable::vtable(this).UnregisterPropertyChangedCallback)(
                ::windows::core::Vtable::as_raw(this),
                ::core::mem::transmute_copy(dp),
                token,
            )
            .ok()
        }
    }
    pub fn Dispatcher(&self) -> ::windows::core::Result<::windows::UI::Core::CoreDispatcher> {
        let this = &::windows::core::Interface::cast::<super::super::IDependencyObject>(self)?;
        unsafe {
            let mut result__ = ::core::mem::MaybeUninit::zeroed();
            (::windows::core::Vtable::vtable(this).Dispatcher)(
                ::windows::core::Vtable::as_raw(this),
                result__.as_mut_ptr(),
            )
            .from_abi::<::windows::UI::Core::CoreDispatcher>(result__)
        }
    }
    #[doc = "*Required features: `\"UI_Dispatching\"`*"]
    #[cfg(feature = "UI_Dispatching")]
    pub fn DispatcherQueue(
        &self,
    ) -> ::windows::core::Result<super::super::super::Dispatching::DispatcherQueue> {
        let this = &::windows::core::Interface::cast::<super::super::IDependencyObject>(self)?;
        unsafe {
            let mut result__ = ::core::mem::MaybeUninit::zeroed();
            (::windows::core::Vtable::vtable(this).DispatcherQueue)(
                ::windows::core::Vtable::as_raw(this),
                result__.as_mut_ptr(),
            )
            .from_abi::<super::super::super::Dispatching::DispatcherQueue>(result__)
        }
    }
    pub fn EasingMode(&self) -> ::windows::core::Result<EasingMode> {
        let this = &::windows::core::Interface::cast::<IEasingFunctionBase>(self)?;
        unsafe {
            let mut result__ = ::core::mem::MaybeUninit::zeroed();
            (::windows::core::Vtable::vtable(this).EasingMode)(
                ::windows::core::Vtable::as_raw(this),
                result__.as_mut_ptr(),
            )
            .from_abi::<EasingMode>(result__)
        }
    }
    pub fn SetEasingMode(&self, value: EasingMode) -> ::windows::core::Result<()> {
        let this = &::windows::core::Interface::cast::<IEasingFunctionBase>(self)?;
        unsafe {
            (::windows::core::Vtable::vtable(this).SetEasingMode)(
                ::windows::core::Vtable::as_raw(this),
                value,
            )
            .ok()
        }
    }
    pub fn Ease(&self, normalizedtime: f64) -> ::windows::core::Result<f64> {
        let this = &::windows::core::Interface::cast::<IEasingFunctionBase>(self)?;
        unsafe {
            let mut result__ = ::core::mem::MaybeUninit::zeroed();
            (::windows::core::Vtable::vtable(this).Ease)(
                ::windows::core::Vtable::as_raw(this),
                normalizedtime,
                result__.as_mut_ptr(),
            )
            .from_abi::<f64>(result__)
        }
    }
    #[doc(hidden)]
    pub fn IBackEaseStatics<R, F: FnOnce(&IBackEaseStatics) -> ::windows::core::Result<R>>(
        callback: F,
    ) -> ::windows::core::Result<R> {
        static SHARED: ::windows::core::FactoryCache<BackEase, IBackEaseStatics> =
            ::windows::core::FactoryCache::new();
        SHARED.call(callback)
    }
}
impl ::core::clone::Clone for BackEase {
    fn clone(&self) -> Self {
        Self(self.0.clone())
    }
}
impl ::core::cmp::PartialEq for BackEase {
    fn eq(&self, other: &Self) -> bool {
        self.0 == other.0
    }
}
impl ::core::cmp::Eq for BackEase {}
impl ::core::fmt::Debug for BackEase {
    fn fmt(&self, f: &mut ::core::fmt::Formatter<'_>) -> ::core::fmt::Result {
        f.debug_tuple("BackEase").field(&self.0).finish()
    }
}
unsafe impl ::windows::core::RuntimeType for BackEase {
    const SIGNATURE: ::windows::core::ConstBuffer = ::windows::core::ConstBuffer::from_slice(
        b"rc(Microsoft.UI.Xaml.Media.Animation.BackEase;{1775bd43-1939-57cb-8c31-cd7590ec9543})",
    );
    type DefaultType = ::core::option::Option<Self>;
    fn from_default(from: &Self::DefaultType) -> ::windows::core::Result<Self> {
        from.as_ref().cloned().ok_or(::windows::core::Error::OK)
    }
}
unsafe impl ::windows::core::Vtable for BackEase {
    type Vtable = IBackEase_Vtbl;
}
unsafe impl ::windows::core::Interface for BackEase {
    const IID: ::windows::core::GUID = <IBackEase as ::windows::core::Interface>::IID;
}
impl ::windows::core::RuntimeName for BackEase {
    const NAME: &'static str = "Microsoft.UI.Xaml.Media.Animation.BackEase";
}
::windows::core::interface_hierarchy!(
    BackEase,
    ::windows::core::IUnknown,
    ::windows::core::IInspectable
);
impl ::core::convert::From<BackEase> for EasingFunctionBase {
    fn from(value: BackEase) -> Self {
        ::core::convert::From::from(&value)
    }
}
impl ::core::convert::From<&BackEase> for EasingFunctionBase {
    fn from(value: &BackEase) -> Self {
        ::windows::core::Interface::cast(value).unwrap()
    }
}
impl<'a> ::core::convert::From<&BackEase> for ::windows::core::InParam<'a, EasingFunctionBase> {
    fn from(value: &BackEase) -> Self {
        ::windows::core::InParam::owned(value.into())
    }
}
impl ::core::convert::From<BackEase> for super::super::DependencyObject {
    fn from(value: BackEase) -> Self {
        ::core::convert::From::from(&value)
    }
}
impl ::core::convert::From<&BackEase> for super::super::DependencyObject {
    fn from(value: &BackEase) -> Self {
        ::windows::core::Interface::cast(value).unwrap()
    }
}
impl<'a> ::core::convert::From<&BackEase>
    for ::windows::core::InParam<'a, super::super::DependencyObject>
{
    fn from(value: &BackEase) -> Self {
        ::windows::core::InParam::owned(value.into())
    }
}
unsafe impl ::core::marker::Send for BackEase {}
unsafe impl ::core::marker::Sync for BackEase {}
#[doc = "*Required features: `\"UI_Xaml_Media_Animation\"`*"]
#[repr(transparent)]
pub struct BasicConnectedAnimationConfiguration(::windows::core::IUnknown);
impl BasicConnectedAnimationConfiguration {
    pub fn new() -> ::windows::core::Result<BasicConnectedAnimationConfiguration> {
        Self::IBasicConnectedAnimationConfigurationFactory(|this| unsafe {
            let mut result__ = ::core::mem::MaybeUninit::zeroed();
            (::windows::core::Vtable::vtable(this).CreateInstance)(
                ::windows::core::Vtable::as_raw(this),
                ::core::ptr::null_mut(),
                &mut ::core::option::Option::<::windows::core::IInspectable>::None as *mut _ as _,
                result__.as_mut_ptr(),
            )
            .from_abi::<BasicConnectedAnimationConfiguration>(result__)
        })
    }
    pub fn compose<T>(compose: T) -> ::windows::core::Result<BasicConnectedAnimationConfiguration>
    where
        T: ::windows::core::Compose,
    {
        Self::IBasicConnectedAnimationConfigurationFactory(|this| unsafe {
            let (derived__, base__) = ::windows::core::Compose::compose(compose);
            let mut result__ = ::core::mem::MaybeUninit::zeroed();
            (::windows::core::Vtable::vtable(this).CreateInstance)(
                ::windows::core::Vtable::as_raw(this),
                ::core::mem::transmute_copy(&derived__),
                base__ as *mut _ as _,
                result__.as_mut_ptr(),
            )
            .from_abi::<BasicConnectedAnimationConfiguration>(result__)
        })
    }
    #[doc(hidden)]
    pub fn IBasicConnectedAnimationConfigurationFactory<
        R,
        F: FnOnce(&IBasicConnectedAnimationConfigurationFactory) -> ::windows::core::Result<R>,
    >(
        callback: F,
    ) -> ::windows::core::Result<R> {
        static SHARED: ::windows::core::FactoryCache<
            BasicConnectedAnimationConfiguration,
            IBasicConnectedAnimationConfigurationFactory,
        > = ::windows::core::FactoryCache::new();
        SHARED.call(callback)
    }
}
impl ::core::clone::Clone for BasicConnectedAnimationConfiguration {
    fn clone(&self) -> Self {
        Self(self.0.clone())
    }
}
impl ::core::cmp::PartialEq for BasicConnectedAnimationConfiguration {
    fn eq(&self, other: &Self) -> bool {
        self.0 == other.0
    }
}
impl ::core::cmp::Eq for BasicConnectedAnimationConfiguration {}
impl ::core::fmt::Debug for BasicConnectedAnimationConfiguration {
    fn fmt(&self, f: &mut ::core::fmt::Formatter<'_>) -> ::core::fmt::Result {
        f.debug_tuple("BasicConnectedAnimationConfiguration").field(&self.0).finish()
    }
}
unsafe impl ::windows::core::RuntimeType for BasicConnectedAnimationConfiguration {
    const SIGNATURE : ::windows::core::ConstBuffer = ::windows::core::ConstBuffer::from_slice ( b"rc(Microsoft.UI.Xaml.Media.Animation.BasicConnectedAnimationConfiguration;{7ff18afe-91e8-52fa-a1c1-7b2c1a140118})" ) ;
    type DefaultType = ::core::option::Option<Self>;
    fn from_default(from: &Self::DefaultType) -> ::windows::core::Result<Self> {
        from.as_ref().cloned().ok_or(::windows::core::Error::OK)
    }
}
unsafe impl ::windows::core::Vtable for BasicConnectedAnimationConfiguration {
    type Vtable = IBasicConnectedAnimationConfiguration_Vtbl;
}
unsafe impl ::windows::core::Interface for BasicConnectedAnimationConfiguration {
    const IID: ::windows::core::GUID =
        <IBasicConnectedAnimationConfiguration as ::windows::core::Interface>::IID;
}
impl ::windows::core::RuntimeName for BasicConnectedAnimationConfiguration {
    const NAME: &'static str =
        "Microsoft.UI.Xaml.Media.Animation.BasicConnectedAnimationConfiguration";
}
::windows::core::interface_hierarchy!(
    BasicConnectedAnimationConfiguration,
    ::windows::core::IUnknown,
    ::windows::core::IInspectable
);
impl ::core::convert::From<BasicConnectedAnimationConfiguration>
    for ConnectedAnimationConfiguration
{
    fn from(value: BasicConnectedAnimationConfiguration) -> Self {
        ::core::convert::From::from(&value)
    }
}
impl ::core::convert::From<&BasicConnectedAnimationConfiguration>
    for ConnectedAnimationConfiguration
{
    fn from(value: &BasicConnectedAnimationConfiguration) -> Self {
        ::windows::core::Interface::cast(value).unwrap()
    }
}
impl<'a> ::core::convert::From<&BasicConnectedAnimationConfiguration>
    for ::windows::core::InParam<'a, ConnectedAnimationConfiguration>
{
    fn from(value: &BasicConnectedAnimationConfiguration) -> Self {
        ::windows::core::InParam::owned(value.into())
    }
}
unsafe impl ::core::marker::Send for BasicConnectedAnimationConfiguration {}
unsafe impl ::core::marker::Sync for BasicConnectedAnimationConfiguration {}
#[doc = "*Required features: `\"UI_Xaml_Media_Animation\"`*"]
#[repr(transparent)]
pub struct BeginStoryboard(::windows::core::IUnknown);
impl BeginStoryboard {
    pub fn new() -> ::windows::core::Result<Self> {
        Self::IActivationFactory(|f| f.ActivateInstance::<Self>())
    }
    fn IActivationFactory<
        R,
        F: FnOnce(&::windows::core::IGenericFactory) -> ::windows::core::Result<R>,
    >(
        callback: F,
    ) -> ::windows::core::Result<R> {
        static SHARED: ::windows::core::FactoryCache<
            BeginStoryboard,
            ::windows::core::IGenericFactory,
        > = ::windows::core::FactoryCache::new();
        SHARED.call(callback)
    }
    pub fn Storyboard(&self) -> ::windows::core::Result<Storyboard> {
        let this = self;
        unsafe {
            let mut result__ = ::core::mem::MaybeUninit::zeroed();
            (::windows::core::Vtable::vtable(this).Storyboard)(
                ::windows::core::Vtable::as_raw(this),
                result__.as_mut_ptr(),
            )
            .from_abi::<Storyboard>(result__)
        }
    }
    pub fn SetStoryboard(&self, value: &Storyboard) -> ::windows::core::Result<()> {
        let this = self;
        unsafe {
            (::windows::core::Vtable::vtable(this).SetStoryboard)(
                ::windows::core::Vtable::as_raw(this),
                ::core::mem::transmute_copy(value),
            )
            .ok()
        }
    }
    pub fn StoryboardProperty() -> ::windows::core::Result<super::super::DependencyProperty> {
        Self::IBeginStoryboardStatics(|this| unsafe {
            let mut result__ = ::core::mem::MaybeUninit::zeroed();
            (::windows::core::Vtable::vtable(this).StoryboardProperty)(
                ::windows::core::Vtable::as_raw(this),
                result__.as_mut_ptr(),
            )
            .from_abi::<super::super::DependencyProperty>(result__)
        })
    }
    pub fn GetValue(
        &self,
        dp: &super::super::DependencyProperty,
    ) -> ::windows::core::Result<::windows::core::IInspectable> {
        let this = &::windows::core::Interface::cast::<super::super::IDependencyObject>(self)?;
        unsafe {
            let mut result__ = ::core::mem::MaybeUninit::zeroed();
            (::windows::core::Vtable::vtable(this).GetValue)(
                ::windows::core::Vtable::as_raw(this),
                ::core::mem::transmute_copy(dp),
                result__.as_mut_ptr(),
            )
            .from_abi::<::windows::core::IInspectable>(result__)
        }
    }
    pub fn SetValue<'a, P0>(
        &self,
        dp: &super::super::DependencyProperty,
        value: P0,
    ) -> ::windows::core::Result<()>
    where
        P0: ::std::convert::Into<::windows::core::InParam<'a, ::windows::core::IInspectable>>,
    {
        let this = &::windows::core::Interface::cast::<super::super::IDependencyObject>(self)?;
        unsafe {
            (::windows::core::Vtable::vtable(this).SetValue)(
                ::windows::core::Vtable::as_raw(this),
                ::core::mem::transmute_copy(dp),
                value.into().abi(),
            )
            .ok()
        }
    }
    pub fn ClearValue(&self, dp: &super::super::DependencyProperty) -> ::windows::core::Result<()> {
        let this = &::windows::core::Interface::cast::<super::super::IDependencyObject>(self)?;
        unsafe {
            (::windows::core::Vtable::vtable(this).ClearValue)(
                ::windows::core::Vtable::as_raw(this),
                ::core::mem::transmute_copy(dp),
            )
            .ok()
        }
    }
    pub fn ReadLocalValue(
        &self,
        dp: &super::super::DependencyProperty,
    ) -> ::windows::core::Result<::windows::core::IInspectable> {
        let this = &::windows::core::Interface::cast::<super::super::IDependencyObject>(self)?;
        unsafe {
            let mut result__ = ::core::mem::MaybeUninit::zeroed();
            (::windows::core::Vtable::vtable(this).ReadLocalValue)(
                ::windows::core::Vtable::as_raw(this),
                ::core::mem::transmute_copy(dp),
                result__.as_mut_ptr(),
            )
            .from_abi::<::windows::core::IInspectable>(result__)
        }
    }
    pub fn GetAnimationBaseValue(
        &self,
        dp: &super::super::DependencyProperty,
    ) -> ::windows::core::Result<::windows::core::IInspectable> {
        let this = &::windows::core::Interface::cast::<super::super::IDependencyObject>(self)?;
        unsafe {
            let mut result__ = ::core::mem::MaybeUninit::zeroed();
            (::windows::core::Vtable::vtable(this).GetAnimationBaseValue)(
                ::windows::core::Vtable::as_raw(this),
                ::core::mem::transmute_copy(dp),
                result__.as_mut_ptr(),
            )
            .from_abi::<::windows::core::IInspectable>(result__)
        }
    }
    pub fn RegisterPropertyChangedCallback(
        &self,
        dp: &super::super::DependencyProperty,
        callback: &super::super::DependencyPropertyChangedCallback,
    ) -> ::windows::core::Result<i64> {
        let this = &::windows::core::Interface::cast::<super::super::IDependencyObject>(self)?;
        unsafe {
            let mut result__ = ::core::mem::MaybeUninit::zeroed();
            (::windows::core::Vtable::vtable(this).RegisterPropertyChangedCallback)(
                ::windows::core::Vtable::as_raw(this),
                ::core::mem::transmute_copy(dp),
                ::core::mem::transmute_copy(callback),
                result__.as_mut_ptr(),
            )
            .from_abi::<i64>(result__)
        }
    }
    pub fn UnregisterPropertyChangedCallback(
        &self,
        dp: &super::super::DependencyProperty,
        token: i64,
    ) -> ::windows::core::Result<()> {
        let this = &::windows::core::Interface::cast::<super::super::IDependencyObject>(self)?;
        unsafe {
            (::windows::core::Vtable::vtable(this).UnregisterPropertyChangedCallback)(
                ::windows::core::Vtable::as_raw(this),
                ::core::mem::transmute_copy(dp),
                token,
            )
            .ok()
        }
    }
    pub fn Dispatcher(&self) -> ::windows::core::Result<::windows::UI::Core::CoreDispatcher> {
        let this = &::windows::core::Interface::cast::<super::super::IDependencyObject>(self)?;
        unsafe {
            let mut result__ = ::core::mem::MaybeUninit::zeroed();
            (::windows::core::Vtable::vtable(this).Dispatcher)(
                ::windows::core::Vtable::as_raw(this),
                result__.as_mut_ptr(),
            )
            .from_abi::<::windows::UI::Core::CoreDispatcher>(result__)
        }
    }
    #[doc = "*Required features: `\"UI_Dispatching\"`*"]
    #[cfg(feature = "UI_Dispatching")]
    pub fn DispatcherQueue(
        &self,
    ) -> ::windows::core::Result<super::super::super::Dispatching::DispatcherQueue> {
        let this = &::windows::core::Interface::cast::<super::super::IDependencyObject>(self)?;
        unsafe {
            let mut result__ = ::core::mem::MaybeUninit::zeroed();
            (::windows::core::Vtable::vtable(this).DispatcherQueue)(
                ::windows::core::Vtable::as_raw(this),
                result__.as_mut_ptr(),
            )
            .from_abi::<super::super::super::Dispatching::DispatcherQueue>(result__)
        }
    }
    #[doc(hidden)]
    pub fn IBeginStoryboardStatics<
        R,
        F: FnOnce(&IBeginStoryboardStatics) -> ::windows::core::Result<R>,
    >(
        callback: F,
    ) -> ::windows::core::Result<R> {
        static SHARED: ::windows::core::FactoryCache<BeginStoryboard, IBeginStoryboardStatics> =
            ::windows::core::FactoryCache::new();
        SHARED.call(callback)
    }
}
impl ::core::clone::Clone for BeginStoryboard {
    fn clone(&self) -> Self {
        Self(self.0.clone())
    }
}
impl ::core::cmp::PartialEq for BeginStoryboard {
    fn eq(&self, other: &Self) -> bool {
        self.0 == other.0
    }
}
impl ::core::cmp::Eq for BeginStoryboard {}
impl ::core::fmt::Debug for BeginStoryboard {
    fn fmt(&self, f: &mut ::core::fmt::Formatter<'_>) -> ::core::fmt::Result {
        f.debug_tuple("BeginStoryboard").field(&self.0).finish()
    }
}
unsafe impl ::windows::core::RuntimeType for BeginStoryboard {
    const SIGNATURE : ::windows::core::ConstBuffer = ::windows::core::ConstBuffer::from_slice ( b"rc(Microsoft.UI.Xaml.Media.Animation.BeginStoryboard;{bb364720-ee5a-5b32-91e2-62589729fd3a})" ) ;
    type DefaultType = ::core::option::Option<Self>;
    fn from_default(from: &Self::DefaultType) -> ::windows::core::Result<Self> {
        from.as_ref().cloned().ok_or(::windows::core::Error::OK)
    }
}
unsafe impl ::windows::core::Vtable for BeginStoryboard {
    type Vtable = IBeginStoryboard_Vtbl;
}
unsafe impl ::windows::core::Interface for BeginStoryboard {
    const IID: ::windows::core::GUID = <IBeginStoryboard as ::windows::core::Interface>::IID;
}
impl ::windows::core::RuntimeName for BeginStoryboard {
    const NAME: &'static str = "Microsoft.UI.Xaml.Media.Animation.BeginStoryboard";
}
::windows::core::interface_hierarchy!(
    BeginStoryboard,
    ::windows::core::IUnknown,
    ::windows::core::IInspectable
);
impl ::core::convert::From<BeginStoryboard> for super::super::TriggerAction {
    fn from(value: BeginStoryboard) -> Self {
        ::core::convert::From::from(&value)
    }
}
impl ::core::convert::From<&BeginStoryboard> for super::super::TriggerAction {
    fn from(value: &BeginStoryboard) -> Self {
        ::windows::core::Interface::cast(value).unwrap()
    }
}
impl<'a> ::core::convert::From<&BeginStoryboard>
    for ::windows::core::InParam<'a, super::super::TriggerAction>
{
    fn from(value: &BeginStoryboard) -> Self {
        ::windows::core::InParam::owned(value.into())
    }
}
impl ::core::convert::From<BeginStoryboard> for super::super::DependencyObject {
    fn from(value: BeginStoryboard) -> Self {
        ::core::convert::From::from(&value)
    }
}
impl ::core::convert::From<&BeginStoryboard> for super::super::DependencyObject {
    fn from(value: &BeginStoryboard) -> Self {
        ::windows::core::Interface::cast(value).unwrap()
    }
}
impl<'a> ::core::convert::From<&BeginStoryboard>
    for ::windows::core::InParam<'a, super::super::DependencyObject>
{
    fn from(value: &BeginStoryboard) -> Self {
        ::windows::core::InParam::owned(value.into())
    }
}
unsafe impl ::core::marker::Send for BeginStoryboard {}
unsafe impl ::core::marker::Sync for BeginStoryboard {}
#[doc = "*Required features: `\"UI_Xaml_Media_Animation\"`*"]
#[repr(transparent)]
pub struct BounceEase(::windows::core::IUnknown);
impl BounceEase {
    pub fn new() -> ::windows::core::Result<Self> {
        Self::IActivationFactory(|f| f.ActivateInstance::<Self>())
    }
    fn IActivationFactory<
        R,
        F: FnOnce(&::windows::core::IGenericFactory) -> ::windows::core::Result<R>,
    >(
        callback: F,
    ) -> ::windows::core::Result<R> {
        static SHARED: ::windows::core::FactoryCache<BounceEase, ::windows::core::IGenericFactory> =
            ::windows::core::FactoryCache::new();
        SHARED.call(callback)
    }
    pub fn Bounces(&self) -> ::windows::core::Result<i32> {
        let this = self;
        unsafe {
            let mut result__ = ::core::mem::MaybeUninit::zeroed();
            (::windows::core::Vtable::vtable(this).Bounces)(
                ::windows::core::Vtable::as_raw(this),
                result__.as_mut_ptr(),
            )
            .from_abi::<i32>(result__)
        }
    }
    pub fn SetBounces(&self, value: i32) -> ::windows::core::Result<()> {
        let this = self;
        unsafe {
            (::windows::core::Vtable::vtable(this).SetBounces)(
                ::windows::core::Vtable::as_raw(this),
                value,
            )
            .ok()
        }
    }
    pub fn Bounciness(&self) -> ::windows::core::Result<f64> {
        let this = self;
        unsafe {
            let mut result__ = ::core::mem::MaybeUninit::zeroed();
            (::windows::core::Vtable::vtable(this).Bounciness)(
                ::windows::core::Vtable::as_raw(this),
                result__.as_mut_ptr(),
            )
            .from_abi::<f64>(result__)
        }
    }
    pub fn SetBounciness(&self, value: f64) -> ::windows::core::Result<()> {
        let this = self;
        unsafe {
            (::windows::core::Vtable::vtable(this).SetBounciness)(
                ::windows::core::Vtable::as_raw(this),
                value,
            )
            .ok()
        }
    }
    pub fn BouncesProperty() -> ::windows::core::Result<super::super::DependencyProperty> {
        Self::IBounceEaseStatics(|this| unsafe {
            let mut result__ = ::core::mem::MaybeUninit::zeroed();
            (::windows::core::Vtable::vtable(this).BouncesProperty)(
                ::windows::core::Vtable::as_raw(this),
                result__.as_mut_ptr(),
            )
            .from_abi::<super::super::DependencyProperty>(result__)
        })
    }
    pub fn BouncinessProperty() -> ::windows::core::Result<super::super::DependencyProperty> {
        Self::IBounceEaseStatics(|this| unsafe {
            let mut result__ = ::core::mem::MaybeUninit::zeroed();
            (::windows::core::Vtable::vtable(this).BouncinessProperty)(
                ::windows::core::Vtable::as_raw(this),
                result__.as_mut_ptr(),
            )
            .from_abi::<super::super::DependencyProperty>(result__)
        })
    }
    pub fn GetValue(
        &self,
        dp: &super::super::DependencyProperty,
    ) -> ::windows::core::Result<::windows::core::IInspectable> {
        let this = &::windows::core::Interface::cast::<super::super::IDependencyObject>(self)?;
        unsafe {
            let mut result__ = ::core::mem::MaybeUninit::zeroed();
            (::windows::core::Vtable::vtable(this).GetValue)(
                ::windows::core::Vtable::as_raw(this),
                ::core::mem::transmute_copy(dp),
                result__.as_mut_ptr(),
            )
            .from_abi::<::windows::core::IInspectable>(result__)
        }
    }
    pub fn SetValue<'a, P0>(
        &self,
        dp: &super::super::DependencyProperty,
        value: P0,
    ) -> ::windows::core::Result<()>
    where
        P0: ::std::convert::Into<::windows::core::InParam<'a, ::windows::core::IInspectable>>,
    {
        let this = &::windows::core::Interface::cast::<super::super::IDependencyObject>(self)?;
        unsafe {
            (::windows::core::Vtable::vtable(this).SetValue)(
                ::windows::core::Vtable::as_raw(this),
                ::core::mem::transmute_copy(dp),
                value.into().abi(),
            )
            .ok()
        }
    }
    pub fn ClearValue(&self, dp: &super::super::DependencyProperty) -> ::windows::core::Result<()> {
        let this = &::windows::core::Interface::cast::<super::super::IDependencyObject>(self)?;
        unsafe {
            (::windows::core::Vtable::vtable(this).ClearValue)(
                ::windows::core::Vtable::as_raw(this),
                ::core::mem::transmute_copy(dp),
            )
            .ok()
        }
    }
    pub fn ReadLocalValue(
        &self,
        dp: &super::super::DependencyProperty,
    ) -> ::windows::core::Result<::windows::core::IInspectable> {
        let this = &::windows::core::Interface::cast::<super::super::IDependencyObject>(self)?;
        unsafe {
            let mut result__ = ::core::mem::MaybeUninit::zeroed();
            (::windows::core::Vtable::vtable(this).ReadLocalValue)(
                ::windows::core::Vtable::as_raw(this),
                ::core::mem::transmute_copy(dp),
                result__.as_mut_ptr(),
            )
            .from_abi::<::windows::core::IInspectable>(result__)
        }
    }
    pub fn GetAnimationBaseValue(
        &self,
        dp: &super::super::DependencyProperty,
    ) -> ::windows::core::Result<::windows::core::IInspectable> {
        let this = &::windows::core::Interface::cast::<super::super::IDependencyObject>(self)?;
        unsafe {
            let mut result__ = ::core::mem::MaybeUninit::zeroed();
            (::windows::core::Vtable::vtable(this).GetAnimationBaseValue)(
                ::windows::core::Vtable::as_raw(this),
                ::core::mem::transmute_copy(dp),
                result__.as_mut_ptr(),
            )
            .from_abi::<::windows::core::IInspectable>(result__)
        }
    }
    pub fn RegisterPropertyChangedCallback(
        &self,
        dp: &super::super::DependencyProperty,
        callback: &super::super::DependencyPropertyChangedCallback,
    ) -> ::windows::core::Result<i64> {
        let this = &::windows::core::Interface::cast::<super::super::IDependencyObject>(self)?;
        unsafe {
            let mut result__ = ::core::mem::MaybeUninit::zeroed();
            (::windows::core::Vtable::vtable(this).RegisterPropertyChangedCallback)(
                ::windows::core::Vtable::as_raw(this),
                ::core::mem::transmute_copy(dp),
                ::core::mem::transmute_copy(callback),
                result__.as_mut_ptr(),
            )
            .from_abi::<i64>(result__)
        }
    }
    pub fn UnregisterPropertyChangedCallback(
        &self,
        dp: &super::super::DependencyProperty,
        token: i64,
    ) -> ::windows::core::Result<()> {
        let this = &::windows::core::Interface::cast::<super::super::IDependencyObject>(self)?;
        unsafe {
            (::windows::core::Vtable::vtable(this).UnregisterPropertyChangedCallback)(
                ::windows::core::Vtable::as_raw(this),
                ::core::mem::transmute_copy(dp),
                token,
            )
            .ok()
        }
    }
    pub fn Dispatcher(&self) -> ::windows::core::Result<::windows::UI::Core::CoreDispatcher> {
        let this = &::windows::core::Interface::cast::<super::super::IDependencyObject>(self)?;
        unsafe {
            let mut result__ = ::core::mem::MaybeUninit::zeroed();
            (::windows::core::Vtable::vtable(this).Dispatcher)(
                ::windows::core::Vtable::as_raw(this),
                result__.as_mut_ptr(),
            )
            .from_abi::<::windows::UI::Core::CoreDispatcher>(result__)
        }
    }
    #[doc = "*Required features: `\"UI_Dispatching\"`*"]
    #[cfg(feature = "UI_Dispatching")]
    pub fn DispatcherQueue(
        &self,
    ) -> ::windows::core::Result<super::super::super::Dispatching::DispatcherQueue> {
        let this = &::windows::core::Interface::cast::<super::super::IDependencyObject>(self)?;
        unsafe {
            let mut result__ = ::core::mem::MaybeUninit::zeroed();
            (::windows::core::Vtable::vtable(this).DispatcherQueue)(
                ::windows::core::Vtable::as_raw(this),
                result__.as_mut_ptr(),
            )
            .from_abi::<super::super::super::Dispatching::DispatcherQueue>(result__)
        }
    }
    pub fn EasingMode(&self) -> ::windows::core::Result<EasingMode> {
        let this = &::windows::core::Interface::cast::<IEasingFunctionBase>(self)?;
        unsafe {
            let mut result__ = ::core::mem::MaybeUninit::zeroed();
            (::windows::core::Vtable::vtable(this).EasingMode)(
                ::windows::core::Vtable::as_raw(this),
                result__.as_mut_ptr(),
            )
            .from_abi::<EasingMode>(result__)
        }
    }
    pub fn SetEasingMode(&self, value: EasingMode) -> ::windows::core::Result<()> {
        let this = &::windows::core::Interface::cast::<IEasingFunctionBase>(self)?;
        unsafe {
            (::windows::core::Vtable::vtable(this).SetEasingMode)(
                ::windows::core::Vtable::as_raw(this),
                value,
            )
            .ok()
        }
    }
    pub fn Ease(&self, normalizedtime: f64) -> ::windows::core::Result<f64> {
        let this = &::windows::core::Interface::cast::<IEasingFunctionBase>(self)?;
        unsafe {
            let mut result__ = ::core::mem::MaybeUninit::zeroed();
            (::windows::core::Vtable::vtable(this).Ease)(
                ::windows::core::Vtable::as_raw(this),
                normalizedtime,
                result__.as_mut_ptr(),
            )
            .from_abi::<f64>(result__)
        }
    }
    #[doc(hidden)]
    pub fn IBounceEaseStatics<R, F: FnOnce(&IBounceEaseStatics) -> ::windows::core::Result<R>>(
        callback: F,
    ) -> ::windows::core::Result<R> {
        static SHARED: ::windows::core::FactoryCache<BounceEase, IBounceEaseStatics> =
            ::windows::core::FactoryCache::new();
        SHARED.call(callback)
    }
}
impl ::core::clone::Clone for BounceEase {
    fn clone(&self) -> Self {
        Self(self.0.clone())
    }
}
impl ::core::cmp::PartialEq for BounceEase {
    fn eq(&self, other: &Self) -> bool {
        self.0 == other.0
    }
}
impl ::core::cmp::Eq for BounceEase {}
impl ::core::fmt::Debug for BounceEase {
    fn fmt(&self, f: &mut ::core::fmt::Formatter<'_>) -> ::core::fmt::Result {
        f.debug_tuple("BounceEase").field(&self.0).finish()
    }
}
unsafe impl ::windows::core::RuntimeType for BounceEase {
    const SIGNATURE: ::windows::core::ConstBuffer = ::windows::core::ConstBuffer::from_slice(
        b"rc(Microsoft.UI.Xaml.Media.Animation.BounceEase;{c138bfff-87c8-5c60-b280-682a499c58c3})",
    );
    type DefaultType = ::core::option::Option<Self>;
    fn from_default(from: &Self::DefaultType) -> ::windows::core::Result<Self> {
        from.as_ref().cloned().ok_or(::windows::core::Error::OK)
    }
}
unsafe impl ::windows::core::Vtable for BounceEase {
    type Vtable = IBounceEase_Vtbl;
}
unsafe impl ::windows::core::Interface for BounceEase {
    const IID: ::windows::core::GUID = <IBounceEase as ::windows::core::Interface>::IID;
}
impl ::windows::core::RuntimeName for BounceEase {
    const NAME: &'static str = "Microsoft.UI.Xaml.Media.Animation.BounceEase";
}
::windows::core::interface_hierarchy!(
    BounceEase,
    ::windows::core::IUnknown,
    ::windows::core::IInspectable
);
impl ::core::convert::From<BounceEase> for EasingFunctionBase {
    fn from(value: BounceEase) -> Self {
        ::core::convert::From::from(&value)
    }
}
impl ::core::convert::From<&BounceEase> for EasingFunctionBase {
    fn from(value: &BounceEase) -> Self {
        ::windows::core::Interface::cast(value).unwrap()
    }
}
impl<'a> ::core::convert::From<&BounceEase> for ::windows::core::InParam<'a, EasingFunctionBase> {
    fn from(value: &BounceEase) -> Self {
        ::windows::core::InParam::owned(value.into())
    }
}
impl ::core::convert::From<BounceEase> for super::super::DependencyObject {
    fn from(value: BounceEase) -> Self {
        ::core::convert::From::from(&value)
    }
}
impl ::core::convert::From<&BounceEase> for super::super::DependencyObject {
    fn from(value: &BounceEase) -> Self {
        ::windows::core::Interface::cast(value).unwrap()
    }
}
impl<'a> ::core::convert::From<&BounceEase>
    for ::windows::core::InParam<'a, super::super::DependencyObject>
{
    fn from(value: &BounceEase) -> Self {
        ::windows::core::InParam::owned(value.into())
    }
}
unsafe impl ::core::marker::Send for BounceEase {}
unsafe impl ::core::marker::Sync for BounceEase {}
#[doc = "*Required features: `\"UI_Xaml_Media_Animation\"`*"]
#[repr(transparent)]
pub struct CircleEase(::windows::core::IUnknown);
impl CircleEase {
    pub fn new() -> ::windows::core::Result<Self> {
        Self::IActivationFactory(|f| f.ActivateInstance::<Self>())
    }
    fn IActivationFactory<
        R,
        F: FnOnce(&::windows::core::IGenericFactory) -> ::windows::core::Result<R>,
    >(
        callback: F,
    ) -> ::windows::core::Result<R> {
        static SHARED: ::windows::core::FactoryCache<CircleEase, ::windows::core::IGenericFactory> =
            ::windows::core::FactoryCache::new();
        SHARED.call(callback)
    }
    pub fn GetValue(
        &self,
        dp: &super::super::DependencyProperty,
    ) -> ::windows::core::Result<::windows::core::IInspectable> {
        let this = &::windows::core::Interface::cast::<super::super::IDependencyObject>(self)?;
        unsafe {
            let mut result__ = ::core::mem::MaybeUninit::zeroed();
            (::windows::core::Vtable::vtable(this).GetValue)(
                ::windows::core::Vtable::as_raw(this),
                ::core::mem::transmute_copy(dp),
                result__.as_mut_ptr(),
            )
            .from_abi::<::windows::core::IInspectable>(result__)
        }
    }
    pub fn SetValue<'a, P0>(
        &self,
        dp: &super::super::DependencyProperty,
        value: P0,
    ) -> ::windows::core::Result<()>
    where
        P0: ::std::convert::Into<::windows::core::InParam<'a, ::windows::core::IInspectable>>,
    {
        let this = &::windows::core::Interface::cast::<super::super::IDependencyObject>(self)?;
        unsafe {
            (::windows::core::Vtable::vtable(this).SetValue)(
                ::windows::core::Vtable::as_raw(this),
                ::core::mem::transmute_copy(dp),
                value.into().abi(),
            )
            .ok()
        }
    }
    pub fn ClearValue(&self, dp: &super::super::DependencyProperty) -> ::windows::core::Result<()> {
        let this = &::windows::core::Interface::cast::<super::super::IDependencyObject>(self)?;
        unsafe {
            (::windows::core::Vtable::vtable(this).ClearValue)(
                ::windows::core::Vtable::as_raw(this),
                ::core::mem::transmute_copy(dp),
            )
            .ok()
        }
    }
    pub fn ReadLocalValue(
        &self,
        dp: &super::super::DependencyProperty,
    ) -> ::windows::core::Result<::windows::core::IInspectable> {
        let this = &::windows::core::Interface::cast::<super::super::IDependencyObject>(self)?;
        unsafe {
            let mut result__ = ::core::mem::MaybeUninit::zeroed();
            (::windows::core::Vtable::vtable(this).ReadLocalValue)(
                ::windows::core::Vtable::as_raw(this),
                ::core::mem::transmute_copy(dp),
                result__.as_mut_ptr(),
            )
            .from_abi::<::windows::core::IInspectable>(result__)
        }
    }
    pub fn GetAnimationBaseValue(
        &self,
        dp: &super::super::DependencyProperty,
    ) -> ::windows::core::Result<::windows::core::IInspectable> {
        let this = &::windows::core::Interface::cast::<super::super::IDependencyObject>(self)?;
        unsafe {
            let mut result__ = ::core::mem::MaybeUninit::zeroed();
            (::windows::core::Vtable::vtable(this).GetAnimationBaseValue)(
                ::windows::core::Vtable::as_raw(this),
                ::core::mem::transmute_copy(dp),
                result__.as_mut_ptr(),
            )
            .from_abi::<::windows::core::IInspectable>(result__)
        }
    }
    pub fn RegisterPropertyChangedCallback(
        &self,
        dp: &super::super::DependencyProperty,
        callback: &super::super::DependencyPropertyChangedCallback,
    ) -> ::windows::core::Result<i64> {
        let this = &::windows::core::Interface::cast::<super::super::IDependencyObject>(self)?;
        unsafe {
            let mut result__ = ::core::mem::MaybeUninit::zeroed();
            (::windows::core::Vtable::vtable(this).RegisterPropertyChangedCallback)(
                ::windows::core::Vtable::as_raw(this),
                ::core::mem::transmute_copy(dp),
                ::core::mem::transmute_copy(callback),
                result__.as_mut_ptr(),
            )
            .from_abi::<i64>(result__)
        }
    }
    pub fn UnregisterPropertyChangedCallback(
        &self,
        dp: &super::super::DependencyProperty,
        token: i64,
    ) -> ::windows::core::Result<()> {
        let this = &::windows::core::Interface::cast::<super::super::IDependencyObject>(self)?;
        unsafe {
            (::windows::core::Vtable::vtable(this).UnregisterPropertyChangedCallback)(
                ::windows::core::Vtable::as_raw(this),
                ::core::mem::transmute_copy(dp),
                token,
            )
            .ok()
        }
    }
    pub fn Dispatcher(&self) -> ::windows::core::Result<::windows::UI::Core::CoreDispatcher> {
        let this = &::windows::core::Interface::cast::<super::super::IDependencyObject>(self)?;
        unsafe {
            let mut result__ = ::core::mem::MaybeUninit::zeroed();
            (::windows::core::Vtable::vtable(this).Dispatcher)(
                ::windows::core::Vtable::as_raw(this),
                result__.as_mut_ptr(),
            )
            .from_abi::<::windows::UI::Core::CoreDispatcher>(result__)
        }
    }
    #[doc = "*Required features: `\"UI_Dispatching\"`*"]
    #[cfg(feature = "UI_Dispatching")]
    pub fn DispatcherQueue(
        &self,
    ) -> ::windows::core::Result<super::super::super::Dispatching::DispatcherQueue> {
        let this = &::windows::core::Interface::cast::<super::super::IDependencyObject>(self)?;
        unsafe {
            let mut result__ = ::core::mem::MaybeUninit::zeroed();
            (::windows::core::Vtable::vtable(this).DispatcherQueue)(
                ::windows::core::Vtable::as_raw(this),
                result__.as_mut_ptr(),
            )
            .from_abi::<super::super::super::Dispatching::DispatcherQueue>(result__)
        }
    }
    pub fn EasingMode(&self) -> ::windows::core::Result<EasingMode> {
        let this = &::windows::core::Interface::cast::<IEasingFunctionBase>(self)?;
        unsafe {
            let mut result__ = ::core::mem::MaybeUninit::zeroed();
            (::windows::core::Vtable::vtable(this).EasingMode)(
                ::windows::core::Vtable::as_raw(this),
                result__.as_mut_ptr(),
            )
            .from_abi::<EasingMode>(result__)
        }
    }
    pub fn SetEasingMode(&self, value: EasingMode) -> ::windows::core::Result<()> {
        let this = &::windows::core::Interface::cast::<IEasingFunctionBase>(self)?;
        unsafe {
            (::windows::core::Vtable::vtable(this).SetEasingMode)(
                ::windows::core::Vtable::as_raw(this),
                value,
            )
            .ok()
        }
    }
    pub fn Ease(&self, normalizedtime: f64) -> ::windows::core::Result<f64> {
        let this = &::windows::core::Interface::cast::<IEasingFunctionBase>(self)?;
        unsafe {
            let mut result__ = ::core::mem::MaybeUninit::zeroed();
            (::windows::core::Vtable::vtable(this).Ease)(
                ::windows::core::Vtable::as_raw(this),
                normalizedtime,
                result__.as_mut_ptr(),
            )
            .from_abi::<f64>(result__)
        }
    }
}
impl ::core::clone::Clone for CircleEase {
    fn clone(&self) -> Self {
        Self(self.0.clone())
    }
}
impl ::core::cmp::PartialEq for CircleEase {
    fn eq(&self, other: &Self) -> bool {
        self.0 == other.0
    }
}
impl ::core::cmp::Eq for CircleEase {}
impl ::core::fmt::Debug for CircleEase {
    fn fmt(&self, f: &mut ::core::fmt::Formatter<'_>) -> ::core::fmt::Result {
        f.debug_tuple("CircleEase").field(&self.0).finish()
    }
}
unsafe impl ::windows::core::RuntimeType for CircleEase {
    const SIGNATURE: ::windows::core::ConstBuffer = ::windows::core::ConstBuffer::from_slice(
        b"rc(Microsoft.UI.Xaml.Media.Animation.CircleEase;{88209080-2929-5924-9b52-f95196568713})",
    );
    type DefaultType = ::core::option::Option<Self>;
    fn from_default(from: &Self::DefaultType) -> ::windows::core::Result<Self> {
        from.as_ref().cloned().ok_or(::windows::core::Error::OK)
    }
}
unsafe impl ::windows::core::Vtable for CircleEase {
    type Vtable = ICircleEase_Vtbl;
}
unsafe impl ::windows::core::Interface for CircleEase {
    const IID: ::windows::core::GUID = <ICircleEase as ::windows::core::Interface>::IID;
}
impl ::windows::core::RuntimeName for CircleEase {
    const NAME: &'static str = "Microsoft.UI.Xaml.Media.Animation.CircleEase";
}
::windows::core::interface_hierarchy!(
    CircleEase,
    ::windows::core::IUnknown,
    ::windows::core::IInspectable
);
impl ::core::convert::From<CircleEase> for EasingFunctionBase {
    fn from(value: CircleEase) -> Self {
        ::core::convert::From::from(&value)
    }
}
impl ::core::convert::From<&CircleEase> for EasingFunctionBase {
    fn from(value: &CircleEase) -> Self {
        ::windows::core::Interface::cast(value).unwrap()
    }
}
impl<'a> ::core::convert::From<&CircleEase> for ::windows::core::InParam<'a, EasingFunctionBase> {
    fn from(value: &CircleEase) -> Self {
        ::windows::core::InParam::owned(value.into())
    }
}
impl ::core::convert::From<CircleEase> for super::super::DependencyObject {
    fn from(value: CircleEase) -> Self {
        ::core::convert::From::from(&value)
    }
}
impl ::core::convert::From<&CircleEase> for super::super::DependencyObject {
    fn from(value: &CircleEase) -> Self {
        ::windows::core::Interface::cast(value).unwrap()
    }
}
impl<'a> ::core::convert::From<&CircleEase>
    for ::windows::core::InParam<'a, super::super::DependencyObject>
{
    fn from(value: &CircleEase) -> Self {
        ::windows::core::InParam::owned(value.into())
    }
}
unsafe impl ::core::marker::Send for CircleEase {}
unsafe impl ::core::marker::Sync for CircleEase {}
#[doc = "*Required features: `\"UI_Xaml_Media_Animation\"`*"]
#[repr(transparent)]
pub struct ColorAnimation(::windows::core::IUnknown);
impl ColorAnimation {
    pub fn new() -> ::windows::core::Result<Self> {
        Self::IActivationFactory(|f| f.ActivateInstance::<Self>())
    }
    fn IActivationFactory<
        R,
        F: FnOnce(&::windows::core::IGenericFactory) -> ::windows::core::Result<R>,
    >(
        callback: F,
    ) -> ::windows::core::Result<R> {
        static SHARED: ::windows::core::FactoryCache<
            ColorAnimation,
            ::windows::core::IGenericFactory,
        > = ::windows::core::FactoryCache::new();
        SHARED.call(callback)
    }
    pub fn From(
        &self,
    ) -> ::windows::core::Result<::windows::Foundation::IReference<::windows::UI::Color>> {
        let this = self;
        unsafe {
            let mut result__ = ::core::mem::MaybeUninit::zeroed();
            (::windows::core::Vtable::vtable(this).From)(
                ::windows::core::Vtable::as_raw(this),
                result__.as_mut_ptr(),
            )
            .from_abi::<::windows::Foundation::IReference<::windows::UI::Color>>(result__)
        }
    }
    pub fn SetFrom<'a, P0, E0>(&self, value: P0) -> ::windows::core::Result<()>
    where
        P0: ::std::convert::TryInto<
            ::windows::core::InParam<'a, ::windows::Foundation::IReference<::windows::UI::Color>>,
            Error = E0,
        >,
        E0: ::std::convert::Into<::windows::core::Error>,
    {
        let this = self;
        unsafe {
            (::windows::core::Vtable::vtable(this).SetFrom)(
                ::windows::core::Vtable::as_raw(this),
                value.try_into().map_err(|e| e.into())?.abi(),
            )
            .ok()
        }
    }
    pub fn To(
        &self,
    ) -> ::windows::core::Result<::windows::Foundation::IReference<::windows::UI::Color>> {
        let this = self;
        unsafe {
            let mut result__ = ::core::mem::MaybeUninit::zeroed();
            (::windows::core::Vtable::vtable(this).To)(
                ::windows::core::Vtable::as_raw(this),
                result__.as_mut_ptr(),
            )
            .from_abi::<::windows::Foundation::IReference<::windows::UI::Color>>(result__)
        }
    }
    pub fn SetTo<'a, P0, E0>(&self, value: P0) -> ::windows::core::Result<()>
    where
        P0: ::std::convert::TryInto<
            ::windows::core::InParam<'a, ::windows::Foundation::IReference<::windows::UI::Color>>,
            Error = E0,
        >,
        E0: ::std::convert::Into<::windows::core::Error>,
    {
        let this = self;
        unsafe {
            (::windows::core::Vtable::vtable(this).SetTo)(
                ::windows::core::Vtable::as_raw(this),
                value.try_into().map_err(|e| e.into())?.abi(),
            )
            .ok()
        }
    }
    pub fn By(
        &self,
    ) -> ::windows::core::Result<::windows::Foundation::IReference<::windows::UI::Color>> {
        let this = self;
        unsafe {
            let mut result__ = ::core::mem::MaybeUninit::zeroed();
            (::windows::core::Vtable::vtable(this).By)(
                ::windows::core::Vtable::as_raw(this),
                result__.as_mut_ptr(),
            )
            .from_abi::<::windows::Foundation::IReference<::windows::UI::Color>>(result__)
        }
    }
    pub fn SetBy<'a, P0, E0>(&self, value: P0) -> ::windows::core::Result<()>
    where
        P0: ::std::convert::TryInto<
            ::windows::core::InParam<'a, ::windows::Foundation::IReference<::windows::UI::Color>>,
            Error = E0,
        >,
        E0: ::std::convert::Into<::windows::core::Error>,
    {
        let this = self;
        unsafe {
            (::windows::core::Vtable::vtable(this).SetBy)(
                ::windows::core::Vtable::as_raw(this),
                value.try_into().map_err(|e| e.into())?.abi(),
            )
            .ok()
        }
    }
    pub fn EasingFunction(&self) -> ::windows::core::Result<EasingFunctionBase> {
        let this = self;
        unsafe {
            let mut result__ = ::core::mem::MaybeUninit::zeroed();
            (::windows::core::Vtable::vtable(this).EasingFunction)(
                ::windows::core::Vtable::as_raw(this),
                result__.as_mut_ptr(),
            )
            .from_abi::<EasingFunctionBase>(result__)
        }
    }
    pub fn SetEasingFunction<'a, P0>(&self, value: P0) -> ::windows::core::Result<()>
    where
        P0: ::std::convert::Into<::windows::core::InParam<'a, EasingFunctionBase>>,
    {
        let this = self;
        unsafe {
            (::windows::core::Vtable::vtable(this).SetEasingFunction)(
                ::windows::core::Vtable::as_raw(this),
                value.into().abi(),
            )
            .ok()
        }
    }
    pub fn EnableDependentAnimation(&self) -> ::windows::core::Result<bool> {
        let this = self;
        unsafe {
            let mut result__ = ::core::mem::MaybeUninit::zeroed();
            (::windows::core::Vtable::vtable(this).EnableDependentAnimation)(
                ::windows::core::Vtable::as_raw(this),
                result__.as_mut_ptr(),
            )
            .from_abi::<bool>(result__)
        }
    }
    pub fn SetEnableDependentAnimation(&self, value: bool) -> ::windows::core::Result<()> {
        let this = self;
        unsafe {
            (::windows::core::Vtable::vtable(this).SetEnableDependentAnimation)(
                ::windows::core::Vtable::as_raw(this),
                value,
            )
            .ok()
        }
    }
    pub fn FromProperty() -> ::windows::core::Result<super::super::DependencyProperty> {
        Self::IColorAnimationStatics(|this| unsafe {
            let mut result__ = ::core::mem::MaybeUninit::zeroed();
            (::windows::core::Vtable::vtable(this).FromProperty)(
                ::windows::core::Vtable::as_raw(this),
                result__.as_mut_ptr(),
            )
            .from_abi::<super::super::DependencyProperty>(result__)
        })
    }
    pub fn ToProperty() -> ::windows::core::Result<super::super::DependencyProperty> {
        Self::IColorAnimationStatics(|this| unsafe {
            let mut result__ = ::core::mem::MaybeUninit::zeroed();
            (::windows::core::Vtable::vtable(this).ToProperty)(
                ::windows::core::Vtable::as_raw(this),
                result__.as_mut_ptr(),
            )
            .from_abi::<super::super::DependencyProperty>(result__)
        })
    }
    pub fn ByProperty() -> ::windows::core::Result<super::super::DependencyProperty> {
        Self::IColorAnimationStatics(|this| unsafe {
            let mut result__ = ::core::mem::MaybeUninit::zeroed();
            (::windows::core::Vtable::vtable(this).ByProperty)(
                ::windows::core::Vtable::as_raw(this),
                result__.as_mut_ptr(),
            )
            .from_abi::<super::super::DependencyProperty>(result__)
        })
    }
    pub fn EasingFunctionProperty() -> ::windows::core::Result<super::super::DependencyProperty> {
        Self::IColorAnimationStatics(|this| unsafe {
            let mut result__ = ::core::mem::MaybeUninit::zeroed();
            (::windows::core::Vtable::vtable(this).EasingFunctionProperty)(
                ::windows::core::Vtable::as_raw(this),
                result__.as_mut_ptr(),
            )
            .from_abi::<super::super::DependencyProperty>(result__)
        })
    }
    pub fn EnableDependentAnimationProperty(
    ) -> ::windows::core::Result<super::super::DependencyProperty> {
        Self::IColorAnimationStatics(|this| unsafe {
            let mut result__ = ::core::mem::MaybeUninit::zeroed();
            (::windows::core::Vtable::vtable(this).EnableDependentAnimationProperty)(
                ::windows::core::Vtable::as_raw(this),
                result__.as_mut_ptr(),
            )
            .from_abi::<super::super::DependencyProperty>(result__)
        })
    }
    pub fn GetValue(
        &self,
        dp: &super::super::DependencyProperty,
    ) -> ::windows::core::Result<::windows::core::IInspectable> {
        let this = &::windows::core::Interface::cast::<super::super::IDependencyObject>(self)?;
        unsafe {
            let mut result__ = ::core::mem::MaybeUninit::zeroed();
            (::windows::core::Vtable::vtable(this).GetValue)(
                ::windows::core::Vtable::as_raw(this),
                ::core::mem::transmute_copy(dp),
                result__.as_mut_ptr(),
            )
            .from_abi::<::windows::core::IInspectable>(result__)
        }
    }
    pub fn SetValue<'a, P0>(
        &self,
        dp: &super::super::DependencyProperty,
        value: P0,
    ) -> ::windows::core::Result<()>
    where
        P0: ::std::convert::Into<::windows::core::InParam<'a, ::windows::core::IInspectable>>,
    {
        let this = &::windows::core::Interface::cast::<super::super::IDependencyObject>(self)?;
        unsafe {
            (::windows::core::Vtable::vtable(this).SetValue)(
                ::windows::core::Vtable::as_raw(this),
                ::core::mem::transmute_copy(dp),
                value.into().abi(),
            )
            .ok()
        }
    }
    pub fn ClearValue(&self, dp: &super::super::DependencyProperty) -> ::windows::core::Result<()> {
        let this = &::windows::core::Interface::cast::<super::super::IDependencyObject>(self)?;
        unsafe {
            (::windows::core::Vtable::vtable(this).ClearValue)(
                ::windows::core::Vtable::as_raw(this),
                ::core::mem::transmute_copy(dp),
            )
            .ok()
        }
    }
    pub fn ReadLocalValue(
        &self,
        dp: &super::super::DependencyProperty,
    ) -> ::windows::core::Result<::windows::core::IInspectable> {
        let this = &::windows::core::Interface::cast::<super::super::IDependencyObject>(self)?;
        unsafe {
            let mut result__ = ::core::mem::MaybeUninit::zeroed();
            (::windows::core::Vtable::vtable(this).ReadLocalValue)(
                ::windows::core::Vtable::as_raw(this),
                ::core::mem::transmute_copy(dp),
                result__.as_mut_ptr(),
            )
            .from_abi::<::windows::core::IInspectable>(result__)
        }
    }
    pub fn GetAnimationBaseValue(
        &self,
        dp: &super::super::DependencyProperty,
    ) -> ::windows::core::Result<::windows::core::IInspectable> {
        let this = &::windows::core::Interface::cast::<super::super::IDependencyObject>(self)?;
        unsafe {
            let mut result__ = ::core::mem::MaybeUninit::zeroed();
            (::windows::core::Vtable::vtable(this).GetAnimationBaseValue)(
                ::windows::core::Vtable::as_raw(this),
                ::core::mem::transmute_copy(dp),
                result__.as_mut_ptr(),
            )
            .from_abi::<::windows::core::IInspectable>(result__)
        }
    }
    pub fn RegisterPropertyChangedCallback(
        &self,
        dp: &super::super::DependencyProperty,
        callback: &super::super::DependencyPropertyChangedCallback,
    ) -> ::windows::core::Result<i64> {
        let this = &::windows::core::Interface::cast::<super::super::IDependencyObject>(self)?;
        unsafe {
            let mut result__ = ::core::mem::MaybeUninit::zeroed();
            (::windows::core::Vtable::vtable(this).RegisterPropertyChangedCallback)(
                ::windows::core::Vtable::as_raw(this),
                ::core::mem::transmute_copy(dp),
                ::core::mem::transmute_copy(callback),
                result__.as_mut_ptr(),
            )
            .from_abi::<i64>(result__)
        }
    }
    pub fn UnregisterPropertyChangedCallback(
        &self,
        dp: &super::super::DependencyProperty,
        token: i64,
    ) -> ::windows::core::Result<()> {
        let this = &::windows::core::Interface::cast::<super::super::IDependencyObject>(self)?;
        unsafe {
            (::windows::core::Vtable::vtable(this).UnregisterPropertyChangedCallback)(
                ::windows::core::Vtable::as_raw(this),
                ::core::mem::transmute_copy(dp),
                token,
            )
            .ok()
        }
    }
    pub fn Dispatcher(&self) -> ::windows::core::Result<::windows::UI::Core::CoreDispatcher> {
        let this = &::windows::core::Interface::cast::<super::super::IDependencyObject>(self)?;
        unsafe {
            let mut result__ = ::core::mem::MaybeUninit::zeroed();
            (::windows::core::Vtable::vtable(this).Dispatcher)(
                ::windows::core::Vtable::as_raw(this),
                result__.as_mut_ptr(),
            )
            .from_abi::<::windows::UI::Core::CoreDispatcher>(result__)
        }
    }
    #[doc = "*Required features: `\"UI_Dispatching\"`*"]
    #[cfg(feature = "UI_Dispatching")]
    pub fn DispatcherQueue(
        &self,
    ) -> ::windows::core::Result<super::super::super::Dispatching::DispatcherQueue> {
        let this = &::windows::core::Interface::cast::<super::super::IDependencyObject>(self)?;
        unsafe {
            let mut result__ = ::core::mem::MaybeUninit::zeroed();
            (::windows::core::Vtable::vtable(this).DispatcherQueue)(
                ::windows::core::Vtable::as_raw(this),
                result__.as_mut_ptr(),
            )
            .from_abi::<super::super::super::Dispatching::DispatcherQueue>(result__)
        }
    }
    pub fn AutoReverse(&self) -> ::windows::core::Result<bool> {
        let this = &::windows::core::Interface::cast::<ITimeline>(self)?;
        unsafe {
            let mut result__ = ::core::mem::MaybeUninit::zeroed();
            (::windows::core::Vtable::vtable(this).AutoReverse)(
                ::windows::core::Vtable::as_raw(this),
                result__.as_mut_ptr(),
            )
            .from_abi::<bool>(result__)
        }
    }
    pub fn SetAutoReverse(&self, value: bool) -> ::windows::core::Result<()> {
        let this = &::windows::core::Interface::cast::<ITimeline>(self)?;
        unsafe {
            (::windows::core::Vtable::vtable(this).SetAutoReverse)(
                ::windows::core::Vtable::as_raw(this),
                value,
            )
            .ok()
        }
    }
    pub fn BeginTime(
        &self,
    ) -> ::windows::core::Result<::windows::Foundation::IReference<::windows::Foundation::TimeSpan>>
    {
        let this = &::windows::core::Interface::cast::<ITimeline>(self)?;
        unsafe {
            let mut result__ = ::core::mem::MaybeUninit::zeroed();
            (::windows::core::Vtable::vtable(this).BeginTime)(
                ::windows::core::Vtable::as_raw(this),
                result__.as_mut_ptr(),
            )
            .from_abi::<::windows::Foundation::IReference<::windows::Foundation::TimeSpan>>(
                result__,
            )
        }
    }
    pub fn SetBeginTime<'a, P0, E0>(&self, value: P0) -> ::windows::core::Result<()>
    where
        P0: ::std::convert::TryInto<
            ::windows::core::InParam<
                'a,
                ::windows::Foundation::IReference<::windows::Foundation::TimeSpan>,
            >,
            Error = E0,
        >,
        E0: ::std::convert::Into<::windows::core::Error>,
    {
        let this = &::windows::core::Interface::cast::<ITimeline>(self)?;
        unsafe {
            (::windows::core::Vtable::vtable(this).SetBeginTime)(
                ::windows::core::Vtable::as_raw(this),
                value.try_into().map_err(|e| e.into())?.abi(),
            )
            .ok()
        }
    }
    pub fn Duration(&self) -> ::windows::core::Result<super::super::Duration> {
        let this = &::windows::core::Interface::cast::<ITimeline>(self)?;
        unsafe {
            let mut result__ = ::core::mem::MaybeUninit::zeroed();
            (::windows::core::Vtable::vtable(this).Duration)(
                ::windows::core::Vtable::as_raw(this),
                result__.as_mut_ptr(),
            )
            .from_abi::<super::super::Duration>(result__)
        }
    }
    pub fn SetDuration(&self, value: super::super::Duration) -> ::windows::core::Result<()> {
        let this = &::windows::core::Interface::cast::<ITimeline>(self)?;
        unsafe {
            (::windows::core::Vtable::vtable(this).SetDuration)(
                ::windows::core::Vtable::as_raw(this),
                value,
            )
            .ok()
        }
    }
    pub fn SpeedRatio(&self) -> ::windows::core::Result<f64> {
        let this = &::windows::core::Interface::cast::<ITimeline>(self)?;
        unsafe {
            let mut result__ = ::core::mem::MaybeUninit::zeroed();
            (::windows::core::Vtable::vtable(this).SpeedRatio)(
                ::windows::core::Vtable::as_raw(this),
                result__.as_mut_ptr(),
            )
            .from_abi::<f64>(result__)
        }
    }
    pub fn SetSpeedRatio(&self, value: f64) -> ::windows::core::Result<()> {
        let this = &::windows::core::Interface::cast::<ITimeline>(self)?;
        unsafe {
            (::windows::core::Vtable::vtable(this).SetSpeedRatio)(
                ::windows::core::Vtable::as_raw(this),
                value,
            )
            .ok()
        }
    }
    pub fn FillBehavior(&self) -> ::windows::core::Result<FillBehavior> {
        let this = &::windows::core::Interface::cast::<ITimeline>(self)?;
        unsafe {
            let mut result__ = ::core::mem::MaybeUninit::zeroed();
            (::windows::core::Vtable::vtable(this).FillBehavior)(
                ::windows::core::Vtable::as_raw(this),
                result__.as_mut_ptr(),
            )
            .from_abi::<FillBehavior>(result__)
        }
    }
    pub fn SetFillBehavior(&self, value: FillBehavior) -> ::windows::core::Result<()> {
        let this = &::windows::core::Interface::cast::<ITimeline>(self)?;
        unsafe {
            (::windows::core::Vtable::vtable(this).SetFillBehavior)(
                ::windows::core::Vtable::as_raw(this),
                value,
            )
            .ok()
        }
    }
    pub fn RepeatBehavior(&self) -> ::windows::core::Result<RepeatBehavior> {
        let this = &::windows::core::Interface::cast::<ITimeline>(self)?;
        unsafe {
            let mut result__ = ::core::mem::MaybeUninit::zeroed();
            (::windows::core::Vtable::vtable(this).RepeatBehavior)(
                ::windows::core::Vtable::as_raw(this),
                result__.as_mut_ptr(),
            )
            .from_abi::<RepeatBehavior>(result__)
        }
    }
    pub fn SetRepeatBehavior(&self, value: RepeatBehavior) -> ::windows::core::Result<()> {
        let this = &::windows::core::Interface::cast::<ITimeline>(self)?;
        unsafe {
            (::windows::core::Vtable::vtable(this).SetRepeatBehavior)(
                ::windows::core::Vtable::as_raw(this),
                value,
            )
            .ok()
        }
    }
    pub fn Completed(
        &self,
        handler: &::windows::Foundation::EventHandler<::windows::core::IInspectable>,
    ) -> ::windows::core::Result<::windows::Foundation::EventRegistrationToken> {
        let this = &::windows::core::Interface::cast::<ITimeline>(self)?;
        unsafe {
            let mut result__ = ::core::mem::MaybeUninit::zeroed();
            (::windows::core::Vtable::vtable(this).Completed)(
                ::windows::core::Vtable::as_raw(this),
                ::core::mem::transmute_copy(handler),
                result__.as_mut_ptr(),
            )
            .from_abi::<::windows::Foundation::EventRegistrationToken>(result__)
        }
    }
    pub fn RemoveCompleted(
        &self,
        token: ::windows::Foundation::EventRegistrationToken,
    ) -> ::windows::core::Result<()> {
        let this = &::windows::core::Interface::cast::<ITimeline>(self)?;
        unsafe {
            (::windows::core::Vtable::vtable(this).RemoveCompleted)(
                ::windows::core::Vtable::as_raw(this),
                token,
            )
            .ok()
        }
    }
    #[doc(hidden)]
    pub fn IColorAnimationStatics<
        R,
        F: FnOnce(&IColorAnimationStatics) -> ::windows::core::Result<R>,
    >(
        callback: F,
    ) -> ::windows::core::Result<R> {
        static SHARED: ::windows::core::FactoryCache<ColorAnimation, IColorAnimationStatics> =
            ::windows::core::FactoryCache::new();
        SHARED.call(callback)
    }
}
impl ::core::clone::Clone for ColorAnimation {
    fn clone(&self) -> Self {
        Self(self.0.clone())
    }
}
impl ::core::cmp::PartialEq for ColorAnimation {
    fn eq(&self, other: &Self) -> bool {
        self.0 == other.0
    }
}
impl ::core::cmp::Eq for ColorAnimation {}
impl ::core::fmt::Debug for ColorAnimation {
    fn fmt(&self, f: &mut ::core::fmt::Formatter<'_>) -> ::core::fmt::Result {
        f.debug_tuple("ColorAnimation").field(&self.0).finish()
    }
}
unsafe impl ::windows::core::RuntimeType for ColorAnimation {
    const SIGNATURE : ::windows::core::ConstBuffer = ::windows::core::ConstBuffer::from_slice ( b"rc(Microsoft.UI.Xaml.Media.Animation.ColorAnimation;{6df862d2-65f2-53a8-8b1b-1b6c1763c175})" ) ;
    type DefaultType = ::core::option::Option<Self>;
    fn from_default(from: &Self::DefaultType) -> ::windows::core::Result<Self> {
        from.as_ref().cloned().ok_or(::windows::core::Error::OK)
    }
}
unsafe impl ::windows::core::Vtable for ColorAnimation {
    type Vtable = IColorAnimation_Vtbl;
}
unsafe impl ::windows::core::Interface for ColorAnimation {
    const IID: ::windows::core::GUID = <IColorAnimation as ::windows::core::Interface>::IID;
}
impl ::windows::core::RuntimeName for ColorAnimation {
    const NAME: &'static str = "Microsoft.UI.Xaml.Media.Animation.ColorAnimation";
}
::windows::core::interface_hierarchy!(
    ColorAnimation,
    ::windows::core::IUnknown,
    ::windows::core::IInspectable
);
impl ::core::convert::From<ColorAnimation> for Timeline {
    fn from(value: ColorAnimation) -> Self {
        ::core::convert::From::from(&value)
    }
}
impl ::core::convert::From<&ColorAnimation> for Timeline {
    fn from(value: &ColorAnimation) -> Self {
        ::windows::core::Interface::cast(value).unwrap()
    }
}
impl<'a> ::core::convert::From<&ColorAnimation> for ::windows::core::InParam<'a, Timeline> {
    fn from(value: &ColorAnimation) -> Self {
        ::windows::core::InParam::owned(value.into())
    }
}
impl ::core::convert::From<ColorAnimation> for super::super::DependencyObject {
    fn from(value: ColorAnimation) -> Self {
        ::core::convert::From::from(&value)
    }
}
impl ::core::convert::From<&ColorAnimation> for super::super::DependencyObject {
    fn from(value: &ColorAnimation) -> Self {
        ::windows::core::Interface::cast(value).unwrap()
    }
}
impl<'a> ::core::convert::From<&ColorAnimation>
    for ::windows::core::InParam<'a, super::super::DependencyObject>
{
    fn from(value: &ColorAnimation) -> Self {
        ::windows::core::InParam::owned(value.into())
    }
}
unsafe impl ::core::marker::Send for ColorAnimation {}
unsafe impl ::core::marker::Sync for ColorAnimation {}
#[doc = "*Required features: `\"UI_Xaml_Media_Animation\"`*"]
#[repr(transparent)]
pub struct ColorAnimationUsingKeyFrames(::windows::core::IUnknown);
impl ColorAnimationUsingKeyFrames {
    pub fn new() -> ::windows::core::Result<Self> {
        Self::IActivationFactory(|f| f.ActivateInstance::<Self>())
    }
    fn IActivationFactory<
        R,
        F: FnOnce(&::windows::core::IGenericFactory) -> ::windows::core::Result<R>,
    >(
        callback: F,
    ) -> ::windows::core::Result<R> {
        static SHARED: ::windows::core::FactoryCache<
            ColorAnimationUsingKeyFrames,
            ::windows::core::IGenericFactory,
        > = ::windows::core::FactoryCache::new();
        SHARED.call(callback)
    }
    pub fn KeyFrames(&self) -> ::windows::core::Result<ColorKeyFrameCollection> {
        let this = self;
        unsafe {
            let mut result__ = ::core::mem::MaybeUninit::zeroed();
            (::windows::core::Vtable::vtable(this).KeyFrames)(
                ::windows::core::Vtable::as_raw(this),
                result__.as_mut_ptr(),
            )
            .from_abi::<ColorKeyFrameCollection>(result__)
        }
    }
    pub fn EnableDependentAnimation(&self) -> ::windows::core::Result<bool> {
        let this = self;
        unsafe {
            let mut result__ = ::core::mem::MaybeUninit::zeroed();
            (::windows::core::Vtable::vtable(this).EnableDependentAnimation)(
                ::windows::core::Vtable::as_raw(this),
                result__.as_mut_ptr(),
            )
            .from_abi::<bool>(result__)
        }
    }
    pub fn SetEnableDependentAnimation(&self, value: bool) -> ::windows::core::Result<()> {
        let this = self;
        unsafe {
            (::windows::core::Vtable::vtable(this).SetEnableDependentAnimation)(
                ::windows::core::Vtable::as_raw(this),
                value,
            )
            .ok()
        }
    }
    pub fn EnableDependentAnimationProperty(
    ) -> ::windows::core::Result<super::super::DependencyProperty> {
        Self::IColorAnimationUsingKeyFramesStatics(|this| unsafe {
            let mut result__ = ::core::mem::MaybeUninit::zeroed();
            (::windows::core::Vtable::vtable(this).EnableDependentAnimationProperty)(
                ::windows::core::Vtable::as_raw(this),
                result__.as_mut_ptr(),
            )
            .from_abi::<super::super::DependencyProperty>(result__)
        })
    }
    pub fn GetValue(
        &self,
        dp: &super::super::DependencyProperty,
    ) -> ::windows::core::Result<::windows::core::IInspectable> {
        let this = &::windows::core::Interface::cast::<super::super::IDependencyObject>(self)?;
        unsafe {
            let mut result__ = ::core::mem::MaybeUninit::zeroed();
            (::windows::core::Vtable::vtable(this).GetValue)(
                ::windows::core::Vtable::as_raw(this),
                ::core::mem::transmute_copy(dp),
                result__.as_mut_ptr(),
            )
            .from_abi::<::windows::core::IInspectable>(result__)
        }
    }
    pub fn SetValue<'a, P0>(
        &self,
        dp: &super::super::DependencyProperty,
        value: P0,
    ) -> ::windows::core::Result<()>
    where
        P0: ::std::convert::Into<::windows::core::InParam<'a, ::windows::core::IInspectable>>,
    {
        let this = &::windows::core::Interface::cast::<super::super::IDependencyObject>(self)?;
        unsafe {
            (::windows::core::Vtable::vtable(this).SetValue)(
                ::windows::core::Vtable::as_raw(this),
                ::core::mem::transmute_copy(dp),
                value.into().abi(),
            )
            .ok()
        }
    }
    pub fn ClearValue(&self, dp: &super::super::DependencyProperty) -> ::windows::core::Result<()> {
        let this = &::windows::core::Interface::cast::<super::super::IDependencyObject>(self)?;
        unsafe {
            (::windows::core::Vtable::vtable(this).ClearValue)(
                ::windows::core::Vtable::as_raw(this),
                ::core::mem::transmute_copy(dp),
            )
            .ok()
        }
    }
    pub fn ReadLocalValue(
        &self,
        dp: &super::super::DependencyProperty,
    ) -> ::windows::core::Result<::windows::core::IInspectable> {
        let this = &::windows::core::Interface::cast::<super::super::IDependencyObject>(self)?;
        unsafe {
            let mut result__ = ::core::mem::MaybeUninit::zeroed();
            (::windows::core::Vtable::vtable(this).ReadLocalValue)(
                ::windows::core::Vtable::as_raw(this),
                ::core::mem::transmute_copy(dp),
                result__.as_mut_ptr(),
            )
            .from_abi::<::windows::core::IInspectable>(result__)
        }
    }
    pub fn GetAnimationBaseValue(
        &self,
        dp: &super::super::DependencyProperty,
    ) -> ::windows::core::Result<::windows::core::IInspectable> {
        let this = &::windows::core::Interface::cast::<super::super::IDependencyObject>(self)?;
        unsafe {
            let mut result__ = ::core::mem::MaybeUninit::zeroed();
            (::windows::core::Vtable::vtable(this).GetAnimationBaseValue)(
                ::windows::core::Vtable::as_raw(this),
                ::core::mem::transmute_copy(dp),
                result__.as_mut_ptr(),
            )
            .from_abi::<::windows::core::IInspectable>(result__)
        }
    }
    pub fn RegisterPropertyChangedCallback(
        &self,
        dp: &super::super::DependencyProperty,
        callback: &super::super::DependencyPropertyChangedCallback,
    ) -> ::windows::core::Result<i64> {
        let this = &::windows::core::Interface::cast::<super::super::IDependencyObject>(self)?;
        unsafe {
            let mut result__ = ::core::mem::MaybeUninit::zeroed();
            (::windows::core::Vtable::vtable(this).RegisterPropertyChangedCallback)(
                ::windows::core::Vtable::as_raw(this),
                ::core::mem::transmute_copy(dp),
                ::core::mem::transmute_copy(callback),
                result__.as_mut_ptr(),
            )
            .from_abi::<i64>(result__)
        }
    }
    pub fn UnregisterPropertyChangedCallback(
        &self,
        dp: &super::super::DependencyProperty,
        token: i64,
    ) -> ::windows::core::Result<()> {
        let this = &::windows::core::Interface::cast::<super::super::IDependencyObject>(self)?;
        unsafe {
            (::windows::core::Vtable::vtable(this).UnregisterPropertyChangedCallback)(
                ::windows::core::Vtable::as_raw(this),
                ::core::mem::transmute_copy(dp),
                token,
            )
            .ok()
        }
    }
    pub fn Dispatcher(&self) -> ::windows::core::Result<::windows::UI::Core::CoreDispatcher> {
        let this = &::windows::core::Interface::cast::<super::super::IDependencyObject>(self)?;
        unsafe {
            let mut result__ = ::core::mem::MaybeUninit::zeroed();
            (::windows::core::Vtable::vtable(this).Dispatcher)(
                ::windows::core::Vtable::as_raw(this),
                result__.as_mut_ptr(),
            )
            .from_abi::<::windows::UI::Core::CoreDispatcher>(result__)
        }
    }
    #[doc = "*Required features: `\"UI_Dispatching\"`*"]
    #[cfg(feature = "UI_Dispatching")]
    pub fn DispatcherQueue(
        &self,
    ) -> ::windows::core::Result<super::super::super::Dispatching::DispatcherQueue> {
        let this = &::windows::core::Interface::cast::<super::super::IDependencyObject>(self)?;
        unsafe {
            let mut result__ = ::core::mem::MaybeUninit::zeroed();
            (::windows::core::Vtable::vtable(this).DispatcherQueue)(
                ::windows::core::Vtable::as_raw(this),
                result__.as_mut_ptr(),
            )
            .from_abi::<super::super::super::Dispatching::DispatcherQueue>(result__)
        }
    }
    pub fn AutoReverse(&self) -> ::windows::core::Result<bool> {
        let this = &::windows::core::Interface::cast::<ITimeline>(self)?;
        unsafe {
            let mut result__ = ::core::mem::MaybeUninit::zeroed();
            (::windows::core::Vtable::vtable(this).AutoReverse)(
                ::windows::core::Vtable::as_raw(this),
                result__.as_mut_ptr(),
            )
            .from_abi::<bool>(result__)
        }
    }
    pub fn SetAutoReverse(&self, value: bool) -> ::windows::core::Result<()> {
        let this = &::windows::core::Interface::cast::<ITimeline>(self)?;
        unsafe {
            (::windows::core::Vtable::vtable(this).SetAutoReverse)(
                ::windows::core::Vtable::as_raw(this),
                value,
            )
            .ok()
        }
    }
    pub fn BeginTime(
        &self,
    ) -> ::windows::core::Result<::windows::Foundation::IReference<::windows::Foundation::TimeSpan>>
    {
        let this = &::windows::core::Interface::cast::<ITimeline>(self)?;
        unsafe {
            let mut result__ = ::core::mem::MaybeUninit::zeroed();
            (::windows::core::Vtable::vtable(this).BeginTime)(
                ::windows::core::Vtable::as_raw(this),
                result__.as_mut_ptr(),
            )
            .from_abi::<::windows::Foundation::IReference<::windows::Foundation::TimeSpan>>(
                result__,
            )
        }
    }
    pub fn SetBeginTime<'a, P0, E0>(&self, value: P0) -> ::windows::core::Result<()>
    where
        P0: ::std::convert::TryInto<
            ::windows::core::InParam<
                'a,
                ::windows::Foundation::IReference<::windows::Foundation::TimeSpan>,
            >,
            Error = E0,
        >,
        E0: ::std::convert::Into<::windows::core::Error>,
    {
        let this = &::windows::core::Interface::cast::<ITimeline>(self)?;
        unsafe {
            (::windows::core::Vtable::vtable(this).SetBeginTime)(
                ::windows::core::Vtable::as_raw(this),
                value.try_into().map_err(|e| e.into())?.abi(),
            )
            .ok()
        }
    }
    pub fn Duration(&self) -> ::windows::core::Result<super::super::Duration> {
        let this = &::windows::core::Interface::cast::<ITimeline>(self)?;
        unsafe {
            let mut result__ = ::core::mem::MaybeUninit::zeroed();
            (::windows::core::Vtable::vtable(this).Duration)(
                ::windows::core::Vtable::as_raw(this),
                result__.as_mut_ptr(),
            )
            .from_abi::<super::super::Duration>(result__)
        }
    }
    pub fn SetDuration(&self, value: super::super::Duration) -> ::windows::core::Result<()> {
        let this = &::windows::core::Interface::cast::<ITimeline>(self)?;
        unsafe {
            (::windows::core::Vtable::vtable(this).SetDuration)(
                ::windows::core::Vtable::as_raw(this),
                value,
            )
            .ok()
        }
    }
    pub fn SpeedRatio(&self) -> ::windows::core::Result<f64> {
        let this = &::windows::core::Interface::cast::<ITimeline>(self)?;
        unsafe {
            let mut result__ = ::core::mem::MaybeUninit::zeroed();
            (::windows::core::Vtable::vtable(this).SpeedRatio)(
                ::windows::core::Vtable::as_raw(this),
                result__.as_mut_ptr(),
            )
            .from_abi::<f64>(result__)
        }
    }
    pub fn SetSpeedRatio(&self, value: f64) -> ::windows::core::Result<()> {
        let this = &::windows::core::Interface::cast::<ITimeline>(self)?;
        unsafe {
            (::windows::core::Vtable::vtable(this).SetSpeedRatio)(
                ::windows::core::Vtable::as_raw(this),
                value,
            )
            .ok()
        }
    }
    pub fn FillBehavior(&self) -> ::windows::core::Result<FillBehavior> {
        let this = &::windows::core::Interface::cast::<ITimeline>(self)?;
        unsafe {
            let mut result__ = ::core::mem::MaybeUninit::zeroed();
            (::windows::core::Vtable::vtable(this).FillBehavior)(
                ::windows::core::Vtable::as_raw(this),
                result__.as_mut_ptr(),
            )
            .from_abi::<FillBehavior>(result__)
        }
    }
    pub fn SetFillBehavior(&self, value: FillBehavior) -> ::windows::core::Result<()> {
        let this = &::windows::core::Interface::cast::<ITimeline>(self)?;
        unsafe {
            (::windows::core::Vtable::vtable(this).SetFillBehavior)(
                ::windows::core::Vtable::as_raw(this),
                value,
            )
            .ok()
        }
    }
    pub fn RepeatBehavior(&self) -> ::windows::core::Result<RepeatBehavior> {
        let this = &::windows::core::Interface::cast::<ITimeline>(self)?;
        unsafe {
            let mut result__ = ::core::mem::MaybeUninit::zeroed();
            (::windows::core::Vtable::vtable(this).RepeatBehavior)(
                ::windows::core::Vtable::as_raw(this),
                result__.as_mut_ptr(),
            )
            .from_abi::<RepeatBehavior>(result__)
        }
    }
    pub fn SetRepeatBehavior(&self, value: RepeatBehavior) -> ::windows::core::Result<()> {
        let this = &::windows::core::Interface::cast::<ITimeline>(self)?;
        unsafe {
            (::windows::core::Vtable::vtable(this).SetRepeatBehavior)(
                ::windows::core::Vtable::as_raw(this),
                value,
            )
            .ok()
        }
    }
    pub fn Completed(
        &self,
        handler: &::windows::Foundation::EventHandler<::windows::core::IInspectable>,
    ) -> ::windows::core::Result<::windows::Foundation::EventRegistrationToken> {
        let this = &::windows::core::Interface::cast::<ITimeline>(self)?;
        unsafe {
            let mut result__ = ::core::mem::MaybeUninit::zeroed();
            (::windows::core::Vtable::vtable(this).Completed)(
                ::windows::core::Vtable::as_raw(this),
                ::core::mem::transmute_copy(handler),
                result__.as_mut_ptr(),
            )
            .from_abi::<::windows::Foundation::EventRegistrationToken>(result__)
        }
    }
    pub fn RemoveCompleted(
        &self,
        token: ::windows::Foundation::EventRegistrationToken,
    ) -> ::windows::core::Result<()> {
        let this = &::windows::core::Interface::cast::<ITimeline>(self)?;
        unsafe {
            (::windows::core::Vtable::vtable(this).RemoveCompleted)(
                ::windows::core::Vtable::as_raw(this),
                token,
            )
            .ok()
        }
    }
    #[doc(hidden)]
    pub fn IColorAnimationUsingKeyFramesStatics<
        R,
        F: FnOnce(&IColorAnimationUsingKeyFramesStatics) -> ::windows::core::Result<R>,
    >(
        callback: F,
    ) -> ::windows::core::Result<R> {
        static SHARED: ::windows::core::FactoryCache<
            ColorAnimationUsingKeyFrames,
            IColorAnimationUsingKeyFramesStatics,
        > = ::windows::core::FactoryCache::new();
        SHARED.call(callback)
    }
}
impl ::core::clone::Clone for ColorAnimationUsingKeyFrames {
    fn clone(&self) -> Self {
        Self(self.0.clone())
    }
}
impl ::core::cmp::PartialEq for ColorAnimationUsingKeyFrames {
    fn eq(&self, other: &Self) -> bool {
        self.0 == other.0
    }
}
impl ::core::cmp::Eq for ColorAnimationUsingKeyFrames {}
impl ::core::fmt::Debug for ColorAnimationUsingKeyFrames {
    fn fmt(&self, f: &mut ::core::fmt::Formatter<'_>) -> ::core::fmt::Result {
        f.debug_tuple("ColorAnimationUsingKeyFrames").field(&self.0).finish()
    }
}
unsafe impl ::windows::core::RuntimeType for ColorAnimationUsingKeyFrames {
    const SIGNATURE : ::windows::core::ConstBuffer = ::windows::core::ConstBuffer::from_slice ( b"rc(Microsoft.UI.Xaml.Media.Animation.ColorAnimationUsingKeyFrames;{96f28c97-67eb-5393-8e37-a81d8fda18b3})" ) ;
    type DefaultType = ::core::option::Option<Self>;
    fn from_default(from: &Self::DefaultType) -> ::windows::core::Result<Self> {
        from.as_ref().cloned().ok_or(::windows::core::Error::OK)
    }
}
unsafe impl ::windows::core::Vtable for ColorAnimationUsingKeyFrames {
    type Vtable = IColorAnimationUsingKeyFrames_Vtbl;
}
unsafe impl ::windows::core::Interface for ColorAnimationUsingKeyFrames {
    const IID: ::windows::core::GUID =
        <IColorAnimationUsingKeyFrames as ::windows::core::Interface>::IID;
}
impl ::windows::core::RuntimeName for ColorAnimationUsingKeyFrames {
    const NAME: &'static str = "Microsoft.UI.Xaml.Media.Animation.ColorAnimationUsingKeyFrames";
}
::windows::core::interface_hierarchy!(
    ColorAnimationUsingKeyFrames,
    ::windows::core::IUnknown,
    ::windows::core::IInspectable
);
impl ::core::convert::From<ColorAnimationUsingKeyFrames> for Timeline {
    fn from(value: ColorAnimationUsingKeyFrames) -> Self {
        ::core::convert::From::from(&value)
    }
}
impl ::core::convert::From<&ColorAnimationUsingKeyFrames> for Timeline {
    fn from(value: &ColorAnimationUsingKeyFrames) -> Self {
        ::windows::core::Interface::cast(value).unwrap()
    }
}
impl<'a> ::core::convert::From<&ColorAnimationUsingKeyFrames>
    for ::windows::core::InParam<'a, Timeline>
{
    fn from(value: &ColorAnimationUsingKeyFrames) -> Self {
        ::windows::core::InParam::owned(value.into())
    }
}
impl ::core::convert::From<ColorAnimationUsingKeyFrames> for super::super::DependencyObject {
    fn from(value: ColorAnimationUsingKeyFrames) -> Self {
        ::core::convert::From::from(&value)
    }
}
impl ::core::convert::From<&ColorAnimationUsingKeyFrames> for super::super::DependencyObject {
    fn from(value: &ColorAnimationUsingKeyFrames) -> Self {
        ::windows::core::Interface::cast(value).unwrap()
    }
}
impl<'a> ::core::convert::From<&ColorAnimationUsingKeyFrames>
    for ::windows::core::InParam<'a, super::super::DependencyObject>
{
    fn from(value: &ColorAnimationUsingKeyFrames) -> Self {
        ::windows::core::InParam::owned(value.into())
    }
}
unsafe impl ::core::marker::Send for ColorAnimationUsingKeyFrames {}
unsafe impl ::core::marker::Sync for ColorAnimationUsingKeyFrames {}
#[doc = "*Required features: `\"UI_Xaml_Media_Animation\"`*"]
#[repr(transparent)]
pub struct ColorKeyFrame(::windows::core::IUnknown);
impl ColorKeyFrame {
    pub fn Value(&self) -> ::windows::core::Result<::windows::UI::Color> {
        let this = self;
        unsafe {
            let mut result__ = ::core::mem::MaybeUninit::zeroed();
            (::windows::core::Vtable::vtable(this).Value)(
                ::windows::core::Vtable::as_raw(this),
                result__.as_mut_ptr(),
            )
            .from_abi::<::windows::UI::Color>(result__)
        }
    }
    pub fn SetValue(&self, value: ::windows::UI::Color) -> ::windows::core::Result<()> {
        let this = self;
        unsafe {
            (::windows::core::Vtable::vtable(this).SetValue)(
                ::windows::core::Vtable::as_raw(this),
                value,
            )
            .ok()
        }
    }
    pub fn KeyTime(&self) -> ::windows::core::Result<KeyTime> {
        let this = self;
        unsafe {
            let mut result__ = ::core::mem::MaybeUninit::zeroed();
            (::windows::core::Vtable::vtable(this).KeyTime)(
                ::windows::core::Vtable::as_raw(this),
                result__.as_mut_ptr(),
            )
            .from_abi::<KeyTime>(result__)
        }
    }
    pub fn SetKeyTime(&self, value: KeyTime) -> ::windows::core::Result<()> {
        let this = self;
        unsafe {
            (::windows::core::Vtable::vtable(this).SetKeyTime)(
                ::windows::core::Vtable::as_raw(this),
                value,
            )
            .ok()
        }
    }
    pub fn ValueProperty() -> ::windows::core::Result<super::super::DependencyProperty> {
        Self::IColorKeyFrameStatics(|this| unsafe {
            let mut result__ = ::core::mem::MaybeUninit::zeroed();
            (::windows::core::Vtable::vtable(this).ValueProperty)(
                ::windows::core::Vtable::as_raw(this),
                result__.as_mut_ptr(),
            )
            .from_abi::<super::super::DependencyProperty>(result__)
        })
    }
    pub fn KeyTimeProperty() -> ::windows::core::Result<super::super::DependencyProperty> {
        Self::IColorKeyFrameStatics(|this| unsafe {
            let mut result__ = ::core::mem::MaybeUninit::zeroed();
            (::windows::core::Vtable::vtable(this).KeyTimeProperty)(
                ::windows::core::Vtable::as_raw(this),
                result__.as_mut_ptr(),
            )
            .from_abi::<super::super::DependencyProperty>(result__)
        })
    }
    pub fn GetValue(
        &self,
        dp: &super::super::DependencyProperty,
    ) -> ::windows::core::Result<::windows::core::IInspectable> {
        let this = &::windows::core::Interface::cast::<super::super::IDependencyObject>(self)?;
        unsafe {
            let mut result__ = ::core::mem::MaybeUninit::zeroed();
            (::windows::core::Vtable::vtable(this).GetValue)(
                ::windows::core::Vtable::as_raw(this),
                ::core::mem::transmute_copy(dp),
                result__.as_mut_ptr(),
            )
            .from_abi::<::windows::core::IInspectable>(result__)
        }
    }
    pub fn SetValue2<'a, P0>(
        &self,
        dp: &super::super::DependencyProperty,
        value: P0,
    ) -> ::windows::core::Result<()>
    where
        P0: ::std::convert::Into<::windows::core::InParam<'a, ::windows::core::IInspectable>>,
    {
        let this = &::windows::core::Interface::cast::<super::super::IDependencyObject>(self)?;
        unsafe {
            (::windows::core::Vtable::vtable(this).SetValue)(
                ::windows::core::Vtable::as_raw(this),
                ::core::mem::transmute_copy(dp),
                value.into().abi(),
            )
            .ok()
        }
    }
    pub fn ClearValue(&self, dp: &super::super::DependencyProperty) -> ::windows::core::Result<()> {
        let this = &::windows::core::Interface::cast::<super::super::IDependencyObject>(self)?;
        unsafe {
            (::windows::core::Vtable::vtable(this).ClearValue)(
                ::windows::core::Vtable::as_raw(this),
                ::core::mem::transmute_copy(dp),
            )
            .ok()
        }
    }
    pub fn ReadLocalValue(
        &self,
        dp: &super::super::DependencyProperty,
    ) -> ::windows::core::Result<::windows::core::IInspectable> {
        let this = &::windows::core::Interface::cast::<super::super::IDependencyObject>(self)?;
        unsafe {
            let mut result__ = ::core::mem::MaybeUninit::zeroed();
            (::windows::core::Vtable::vtable(this).ReadLocalValue)(
                ::windows::core::Vtable::as_raw(this),
                ::core::mem::transmute_copy(dp),
                result__.as_mut_ptr(),
            )
            .from_abi::<::windows::core::IInspectable>(result__)
        }
    }
    pub fn GetAnimationBaseValue(
        &self,
        dp: &super::super::DependencyProperty,
    ) -> ::windows::core::Result<::windows::core::IInspectable> {
        let this = &::windows::core::Interface::cast::<super::super::IDependencyObject>(self)?;
        unsafe {
            let mut result__ = ::core::mem::MaybeUninit::zeroed();
            (::windows::core::Vtable::vtable(this).GetAnimationBaseValue)(
                ::windows::core::Vtable::as_raw(this),
                ::core::mem::transmute_copy(dp),
                result__.as_mut_ptr(),
            )
            .from_abi::<::windows::core::IInspectable>(result__)
        }
    }
    pub fn RegisterPropertyChangedCallback(
        &self,
        dp: &super::super::DependencyProperty,
        callback: &super::super::DependencyPropertyChangedCallback,
    ) -> ::windows::core::Result<i64> {
        let this = &::windows::core::Interface::cast::<super::super::IDependencyObject>(self)?;
        unsafe {
            let mut result__ = ::core::mem::MaybeUninit::zeroed();
            (::windows::core::Vtable::vtable(this).RegisterPropertyChangedCallback)(
                ::windows::core::Vtable::as_raw(this),
                ::core::mem::transmute_copy(dp),
                ::core::mem::transmute_copy(callback),
                result__.as_mut_ptr(),
            )
            .from_abi::<i64>(result__)
        }
    }
    pub fn UnregisterPropertyChangedCallback(
        &self,
        dp: &super::super::DependencyProperty,
        token: i64,
    ) -> ::windows::core::Result<()> {
        let this = &::windows::core::Interface::cast::<super::super::IDependencyObject>(self)?;
        unsafe {
            (::windows::core::Vtable::vtable(this).UnregisterPropertyChangedCallback)(
                ::windows::core::Vtable::as_raw(this),
                ::core::mem::transmute_copy(dp),
                token,
            )
            .ok()
        }
    }
    pub fn Dispatcher(&self) -> ::windows::core::Result<::windows::UI::Core::CoreDispatcher> {
        let this = &::windows::core::Interface::cast::<super::super::IDependencyObject>(self)?;
        unsafe {
            let mut result__ = ::core::mem::MaybeUninit::zeroed();
            (::windows::core::Vtable::vtable(this).Dispatcher)(
                ::windows::core::Vtable::as_raw(this),
                result__.as_mut_ptr(),
            )
            .from_abi::<::windows::UI::Core::CoreDispatcher>(result__)
        }
    }
    #[doc = "*Required features: `\"UI_Dispatching\"`*"]
    #[cfg(feature = "UI_Dispatching")]
    pub fn DispatcherQueue(
        &self,
    ) -> ::windows::core::Result<super::super::super::Dispatching::DispatcherQueue> {
        let this = &::windows::core::Interface::cast::<super::super::IDependencyObject>(self)?;
        unsafe {
            let mut result__ = ::core::mem::MaybeUninit::zeroed();
            (::windows::core::Vtable::vtable(this).DispatcherQueue)(
                ::windows::core::Vtable::as_raw(this),
                result__.as_mut_ptr(),
            )
            .from_abi::<super::super::super::Dispatching::DispatcherQueue>(result__)
        }
    }
    #[doc(hidden)]
    pub fn IColorKeyFrameStatics<
        R,
        F: FnOnce(&IColorKeyFrameStatics) -> ::windows::core::Result<R>,
    >(
        callback: F,
    ) -> ::windows::core::Result<R> {
        static SHARED: ::windows::core::FactoryCache<ColorKeyFrame, IColorKeyFrameStatics> =
            ::windows::core::FactoryCache::new();
        SHARED.call(callback)
    }
}
impl ::core::clone::Clone for ColorKeyFrame {
    fn clone(&self) -> Self {
        Self(self.0.clone())
    }
}
impl ::core::cmp::PartialEq for ColorKeyFrame {
    fn eq(&self, other: &Self) -> bool {
        self.0 == other.0
    }
}
impl ::core::cmp::Eq for ColorKeyFrame {}
impl ::core::fmt::Debug for ColorKeyFrame {
    fn fmt(&self, f: &mut ::core::fmt::Formatter<'_>) -> ::core::fmt::Result {
        f.debug_tuple("ColorKeyFrame").field(&self.0).finish()
    }
}
unsafe impl ::windows::core::RuntimeType for ColorKeyFrame {
    const SIGNATURE : ::windows::core::ConstBuffer = ::windows::core::ConstBuffer::from_slice ( b"rc(Microsoft.UI.Xaml.Media.Animation.ColorKeyFrame;{02848c7e-c772-5f66-842b-fd494d0da669})" ) ;
    type DefaultType = ::core::option::Option<Self>;
    fn from_default(from: &Self::DefaultType) -> ::windows::core::Result<Self> {
        from.as_ref().cloned().ok_or(::windows::core::Error::OK)
    }
}
unsafe impl ::windows::core::Vtable for ColorKeyFrame {
    type Vtable = IColorKeyFrame_Vtbl;
}
unsafe impl ::windows::core::Interface for ColorKeyFrame {
    const IID: ::windows::core::GUID = <IColorKeyFrame as ::windows::core::Interface>::IID;
}
impl ::windows::core::RuntimeName for ColorKeyFrame {
    const NAME: &'static str = "Microsoft.UI.Xaml.Media.Animation.ColorKeyFrame";
}
::windows::core::interface_hierarchy!(
    ColorKeyFrame,
    ::windows::core::IUnknown,
    ::windows::core::IInspectable
);
impl ::core::convert::From<ColorKeyFrame> for super::super::DependencyObject {
    fn from(value: ColorKeyFrame) -> Self {
        ::core::convert::From::from(&value)
    }
}
impl ::core::convert::From<&ColorKeyFrame> for super::super::DependencyObject {
    fn from(value: &ColorKeyFrame) -> Self {
        ::windows::core::Interface::cast(value).unwrap()
    }
}
impl<'a> ::core::convert::From<&ColorKeyFrame>
    for ::windows::core::InParam<'a, super::super::DependencyObject>
{
    fn from(value: &ColorKeyFrame) -> Self {
        ::windows::core::InParam::owned(value.into())
    }
}
unsafe impl ::core::marker::Send for ColorKeyFrame {}
unsafe impl ::core::marker::Sync for ColorKeyFrame {}
#[doc = "*Required features: `\"UI_Xaml_Media_Animation\"`*"]
#[repr(transparent)]
pub struct ColorKeyFrameCollection(::windows::core::IUnknown);
impl ColorKeyFrameCollection {
    pub fn new() -> ::windows::core::Result<Self> {
        Self::IActivationFactory(|f| f.ActivateInstance::<Self>())
    }
    fn IActivationFactory<
        R,
        F: FnOnce(&::windows::core::IGenericFactory) -> ::windows::core::Result<R>,
    >(
        callback: F,
    ) -> ::windows::core::Result<R> {
        static SHARED: ::windows::core::FactoryCache<
            ColorKeyFrameCollection,
            ::windows::core::IGenericFactory,
        > = ::windows::core::FactoryCache::new();
        SHARED.call(callback)
    }
    pub fn First(
        &self,
    ) -> ::windows::core::Result<::windows::Foundation::Collections::IIterator<ColorKeyFrame>> {
        let this = &::windows::core::Interface::cast::<
            ::windows::Foundation::Collections::IIterable<ColorKeyFrame>,
        >(self)?;
        unsafe {
            let mut result__ = ::core::mem::MaybeUninit::zeroed();
            (::windows::core::Vtable::vtable(this).First)(
                ::windows::core::Vtable::as_raw(this),
                result__.as_mut_ptr(),
            )
            .from_abi::<::windows::Foundation::Collections::IIterator<ColorKeyFrame>>(result__)
        }
    }
    pub fn GetAt(&self, index: u32) -> ::windows::core::Result<ColorKeyFrame> {
        let this = self;
        unsafe {
            let mut result__ = ::core::mem::MaybeUninit::zeroed();
            (::windows::core::Vtable::vtable(this).GetAt)(
                ::windows::core::Vtable::as_raw(this),
                index,
                result__.as_mut_ptr(),
            )
            .from_abi::<ColorKeyFrame>(result__)
        }
    }
    pub fn Size(&self) -> ::windows::core::Result<u32> {
        let this = self;
        unsafe {
            let mut result__ = ::core::mem::MaybeUninit::zeroed();
            (::windows::core::Vtable::vtable(this).Size)(
                ::windows::core::Vtable::as_raw(this),
                result__.as_mut_ptr(),
            )
            .from_abi::<u32>(result__)
        }
    }
    pub fn GetView(
        &self,
    ) -> ::windows::core::Result<::windows::Foundation::Collections::IVectorView<ColorKeyFrame>>
    {
        let this = self;
        unsafe {
            let mut result__ = ::core::mem::MaybeUninit::zeroed();
            (::windows::core::Vtable::vtable(this).GetView)(
                ::windows::core::Vtable::as_raw(this),
                result__.as_mut_ptr(),
            )
            .from_abi::<::windows::Foundation::Collections::IVectorView<ColorKeyFrame>>(result__)
        }
    }
    pub fn IndexOf<'a, P0>(&self, value: P0, index: &mut u32) -> ::windows::core::Result<bool>
    where
        P0: ::std::convert::Into<::windows::core::InParam<'a, ColorKeyFrame>>,
    {
        let this = self;
        unsafe {
            let mut result__ = ::core::mem::MaybeUninit::zeroed();
            (::windows::core::Vtable::vtable(this).IndexOf)(
                ::windows::core::Vtable::as_raw(this),
                value.into().abi(),
                index,
                result__.as_mut_ptr(),
            )
            .from_abi::<bool>(result__)
        }
    }
    pub fn SetAt<'a, P0>(&self, index: u32, value: P0) -> ::windows::core::Result<()>
    where
        P0: ::std::convert::Into<::windows::core::InParam<'a, ColorKeyFrame>>,
    {
        let this = self;
        unsafe {
            (::windows::core::Vtable::vtable(this).SetAt)(
                ::windows::core::Vtable::as_raw(this),
                index,
                value.into().abi(),
            )
            .ok()
        }
    }
    pub fn InsertAt<'a, P0>(&self, index: u32, value: P0) -> ::windows::core::Result<()>
    where
        P0: ::std::convert::Into<::windows::core::InParam<'a, ColorKeyFrame>>,
    {
        let this = self;
        unsafe {
            (::windows::core::Vtable::vtable(this).InsertAt)(
                ::windows::core::Vtable::as_raw(this),
                index,
                value.into().abi(),
            )
            .ok()
        }
    }
    pub fn RemoveAt(&self, index: u32) -> ::windows::core::Result<()> {
        let this = self;
        unsafe {
            (::windows::core::Vtable::vtable(this).RemoveAt)(
                ::windows::core::Vtable::as_raw(this),
                index,
            )
            .ok()
        }
    }
    pub fn Append<'a, P0>(&self, value: P0) -> ::windows::core::Result<()>
    where
        P0: ::std::convert::Into<::windows::core::InParam<'a, ColorKeyFrame>>,
    {
        let this = self;
        unsafe {
            (::windows::core::Vtable::vtable(this).Append)(
                ::windows::core::Vtable::as_raw(this),
                value.into().abi(),
            )
            .ok()
        }
    }
    pub fn RemoveAtEnd(&self) -> ::windows::core::Result<()> {
        let this = self;
        unsafe {
            (::windows::core::Vtable::vtable(this).RemoveAtEnd)(::windows::core::Vtable::as_raw(
                this,
            ))
            .ok()
        }
    }
    pub fn Clear(&self) -> ::windows::core::Result<()> {
        let this = self;
        unsafe {
            (::windows::core::Vtable::vtable(this).Clear)(::windows::core::Vtable::as_raw(this))
                .ok()
        }
    }
    pub fn GetMany(
        &self,
        startindex: u32,
        items: &mut [::core::option::Option<ColorKeyFrame>],
    ) -> ::windows::core::Result<u32> {
        let this = self;
        unsafe {
            let mut result__ = ::core::mem::MaybeUninit::zeroed();
            (::windows::core::Vtable::vtable(this).GetMany)(
                ::windows::core::Vtable::as_raw(this),
                startindex,
                items.len() as u32,
                ::core::mem::transmute_copy(&items),
                result__.as_mut_ptr(),
            )
            .from_abi::<u32>(result__)
        }
    }
    pub fn ReplaceAll(
        &self,
        items: &[::core::option::Option<ColorKeyFrame>],
    ) -> ::windows::core::Result<()> {
        let this = self;
        unsafe {
            (::windows::core::Vtable::vtable(this).ReplaceAll)(
                ::windows::core::Vtable::as_raw(this),
                items.len() as u32,
                ::core::mem::transmute(items.as_ptr()),
            )
            .ok()
        }
    }
}
impl ::core::clone::Clone for ColorKeyFrameCollection {
    fn clone(&self) -> Self {
        Self(self.0.clone())
    }
}
impl ::core::cmp::PartialEq for ColorKeyFrameCollection {
    fn eq(&self, other: &Self) -> bool {
        self.0 == other.0
    }
}
impl ::core::cmp::Eq for ColorKeyFrameCollection {}
impl ::core::fmt::Debug for ColorKeyFrameCollection {
    fn fmt(&self, f: &mut ::core::fmt::Formatter<'_>) -> ::core::fmt::Result {
        f.debug_tuple("ColorKeyFrameCollection").field(&self.0).finish()
    }
}
unsafe impl ::windows::core::RuntimeType for ColorKeyFrameCollection {
    const SIGNATURE : ::windows::core::ConstBuffer = ::windows::core::ConstBuffer::from_slice ( b"rc(Microsoft.UI.Xaml.Media.Animation.ColorKeyFrameCollection;pinterface({913337e9-11a1-4345-a3a2-4e7f956e222d};rc(Microsoft.UI.Xaml.Media.Animation.ColorKeyFrame;{02848c7e-c772-5f66-842b-fd494d0da669})))" ) ;
    type DefaultType = ::core::option::Option<Self>;
    fn from_default(from: &Self::DefaultType) -> ::windows::core::Result<Self> {
        from.as_ref().cloned().ok_or(::windows::core::Error::OK)
    }
}
unsafe impl ::windows::core::Vtable for ColorKeyFrameCollection {
    type Vtable = ::windows::Foundation::Collections::IVector_Vtbl<ColorKeyFrame>;
}
unsafe impl ::windows::core::Interface for ColorKeyFrameCollection {
    const IID : ::windows::core::GUID = < ::windows::Foundation::Collections:: IVector :: < ColorKeyFrame > as::windows::core::Interface >::IID ;
}
impl ::windows::core::RuntimeName for ColorKeyFrameCollection {
    const NAME: &'static str = "Microsoft.UI.Xaml.Media.Animation.ColorKeyFrameCollection";
}
impl ::core::iter::IntoIterator for ColorKeyFrameCollection {
    type Item = ColorKeyFrame;
    type IntoIter = ::windows::Foundation::Collections::VectorIterator<Self::Item>;
    fn into_iter(self) -> Self::IntoIter {
        ::core::iter::IntoIterator::into_iter(&self)
    }
}
impl ::core::iter::IntoIterator for &ColorKeyFrameCollection {
    type Item = ColorKeyFrame;
    type IntoIter = ::windows::Foundation::Collections::VectorIterator<Self::Item>;
    fn into_iter(self) -> Self::IntoIter {
        ::windows::Foundation::Collections::VectorIterator::new(
            ::core::convert::TryInto::try_into(self).ok(),
        )
    }
}
::windows::core::interface_hierarchy!(
    ColorKeyFrameCollection,
    ::windows::core::IUnknown,
    ::windows::core::IInspectable
);
impl ::core::convert::TryFrom<ColorKeyFrameCollection>
    for ::windows::Foundation::Collections::IIterable<ColorKeyFrame>
{
    type Error = ::windows::core::Error;
    fn try_from(value: ColorKeyFrameCollection) -> ::windows::core::Result<Self> {
        ::core::convert::TryFrom::try_from(&value)
    }
}
impl ::core::convert::TryFrom<&ColorKeyFrameCollection>
    for ::windows::Foundation::Collections::IIterable<ColorKeyFrame>
{
    type Error = ::windows::core::Error;
    fn try_from(value: &ColorKeyFrameCollection) -> ::windows::core::Result<Self> {
        ::windows::core::Interface::cast(value)
    }
}
impl<'a> ::core::convert::TryFrom<&ColorKeyFrameCollection>
    for ::windows::core::InParam<'a, ::windows::Foundation::Collections::IIterable<ColorKeyFrame>>
{
    type Error = ::windows::core::Error;
    fn try_from(value: &ColorKeyFrameCollection) -> ::windows::core::Result<Self> {
        let item = ::std::convert::TryInto::try_into(value)?;
        Ok(::windows::core::InParam::owned(item))
    }
}
impl ::core::convert::TryFrom<ColorKeyFrameCollection>
    for ::windows::Foundation::Collections::IVector<ColorKeyFrame>
{
    type Error = ::windows::core::Error;
    fn try_from(value: ColorKeyFrameCollection) -> ::windows::core::Result<Self> {
        ::core::convert::TryFrom::try_from(&value)
    }
}
impl ::core::convert::TryFrom<&ColorKeyFrameCollection>
    for ::windows::Foundation::Collections::IVector<ColorKeyFrame>
{
    type Error = ::windows::core::Error;
    fn try_from(value: &ColorKeyFrameCollection) -> ::windows::core::Result<Self> {
        ::windows::core::Interface::cast(value)
    }
}
impl<'a> ::core::convert::TryFrom<&ColorKeyFrameCollection>
    for ::windows::core::InParam<'a, ::windows::Foundation::Collections::IVector<ColorKeyFrame>>
{
    type Error = ::windows::core::Error;
    fn try_from(value: &ColorKeyFrameCollection) -> ::windows::core::Result<Self> {
        let item = ::std::convert::TryInto::try_into(value)?;
        Ok(::windows::core::InParam::owned(item))
    }
}
unsafe impl ::core::marker::Send for ColorKeyFrameCollection {}
unsafe impl ::core::marker::Sync for ColorKeyFrameCollection {}
#[doc = "*Required features: `\"UI_Xaml_Media_Animation\"`*"]
#[repr(transparent)]
pub struct CommonNavigationTransitionInfo(::windows::core::IUnknown);
impl CommonNavigationTransitionInfo {
    pub fn new() -> ::windows::core::Result<Self> {
        Self::IActivationFactory(|f| f.ActivateInstance::<Self>())
    }
    fn IActivationFactory<
        R,
        F: FnOnce(&::windows::core::IGenericFactory) -> ::windows::core::Result<R>,
    >(
        callback: F,
    ) -> ::windows::core::Result<R> {
        static SHARED: ::windows::core::FactoryCache<
            CommonNavigationTransitionInfo,
            ::windows::core::IGenericFactory,
        > = ::windows::core::FactoryCache::new();
        SHARED.call(callback)
    }
    pub fn IsStaggeringEnabled(&self) -> ::windows::core::Result<bool> {
        let this = self;
        unsafe {
            let mut result__ = ::core::mem::MaybeUninit::zeroed();
            (::windows::core::Vtable::vtable(this).IsStaggeringEnabled)(
                ::windows::core::Vtable::as_raw(this),
                result__.as_mut_ptr(),
            )
            .from_abi::<bool>(result__)
        }
    }
    pub fn SetIsStaggeringEnabled(&self, value: bool) -> ::windows::core::Result<()> {
        let this = self;
        unsafe {
            (::windows::core::Vtable::vtable(this).SetIsStaggeringEnabled)(
                ::windows::core::Vtable::as_raw(this),
                value,
            )
            .ok()
        }
    }
    pub fn IsStaggeringEnabledProperty() -> ::windows::core::Result<super::super::DependencyProperty>
    {
        Self::ICommonNavigationTransitionInfoStatics(|this| unsafe {
            let mut result__ = ::core::mem::MaybeUninit::zeroed();
            (::windows::core::Vtable::vtable(this).IsStaggeringEnabledProperty)(
                ::windows::core::Vtable::as_raw(this),
                result__.as_mut_ptr(),
            )
            .from_abi::<super::super::DependencyProperty>(result__)
        })
    }
    pub fn IsStaggerElementProperty() -> ::windows::core::Result<super::super::DependencyProperty> {
        Self::ICommonNavigationTransitionInfoStatics(|this| unsafe {
            let mut result__ = ::core::mem::MaybeUninit::zeroed();
            (::windows::core::Vtable::vtable(this).IsStaggerElementProperty)(
                ::windows::core::Vtable::as_raw(this),
                result__.as_mut_ptr(),
            )
            .from_abi::<super::super::DependencyProperty>(result__)
        })
    }
    pub fn GetIsStaggerElement<'a, P0>(element: P0) -> ::windows::core::Result<bool>
    where
        P0: ::std::convert::Into<::windows::core::InParam<'a, super::super::UIElement>>,
    {
        Self::ICommonNavigationTransitionInfoStatics(|this| unsafe {
            let mut result__ = ::core::mem::MaybeUninit::zeroed();
            (::windows::core::Vtable::vtable(this).GetIsStaggerElement)(
                ::windows::core::Vtable::as_raw(this),
                element.into().abi(),
                result__.as_mut_ptr(),
            )
            .from_abi::<bool>(result__)
        })
    }
    pub fn SetIsStaggerElement<'a, P0>(element: P0, value: bool) -> ::windows::core::Result<()>
    where
        P0: ::std::convert::Into<::windows::core::InParam<'a, super::super::UIElement>>,
    {
        Self::ICommonNavigationTransitionInfoStatics(|this| unsafe {
            (::windows::core::Vtable::vtable(this).SetIsStaggerElement)(
                ::windows::core::Vtable::as_raw(this),
                element.into().abi(),
                value,
            )
            .ok()
        })
    }
    pub fn GetValue(
        &self,
        dp: &super::super::DependencyProperty,
    ) -> ::windows::core::Result<::windows::core::IInspectable> {
        let this = &::windows::core::Interface::cast::<super::super::IDependencyObject>(self)?;
        unsafe {
            let mut result__ = ::core::mem::MaybeUninit::zeroed();
            (::windows::core::Vtable::vtable(this).GetValue)(
                ::windows::core::Vtable::as_raw(this),
                ::core::mem::transmute_copy(dp),
                result__.as_mut_ptr(),
            )
            .from_abi::<::windows::core::IInspectable>(result__)
        }
    }
    pub fn SetValue<'a, P0>(
        &self,
        dp: &super::super::DependencyProperty,
        value: P0,
    ) -> ::windows::core::Result<()>
    where
        P0: ::std::convert::Into<::windows::core::InParam<'a, ::windows::core::IInspectable>>,
    {
        let this = &::windows::core::Interface::cast::<super::super::IDependencyObject>(self)?;
        unsafe {
            (::windows::core::Vtable::vtable(this).SetValue)(
                ::windows::core::Vtable::as_raw(this),
                ::core::mem::transmute_copy(dp),
                value.into().abi(),
            )
            .ok()
        }
    }
    pub fn ClearValue(&self, dp: &super::super::DependencyProperty) -> ::windows::core::Result<()> {
        let this = &::windows::core::Interface::cast::<super::super::IDependencyObject>(self)?;
        unsafe {
            (::windows::core::Vtable::vtable(this).ClearValue)(
                ::windows::core::Vtable::as_raw(this),
                ::core::mem::transmute_copy(dp),
            )
            .ok()
        }
    }
    pub fn ReadLocalValue(
        &self,
        dp: &super::super::DependencyProperty,
    ) -> ::windows::core::Result<::windows::core::IInspectable> {
        let this = &::windows::core::Interface::cast::<super::super::IDependencyObject>(self)?;
        unsafe {
            let mut result__ = ::core::mem::MaybeUninit::zeroed();
            (::windows::core::Vtable::vtable(this).ReadLocalValue)(
                ::windows::core::Vtable::as_raw(this),
                ::core::mem::transmute_copy(dp),
                result__.as_mut_ptr(),
            )
            .from_abi::<::windows::core::IInspectable>(result__)
        }
    }
    pub fn GetAnimationBaseValue(
        &self,
        dp: &super::super::DependencyProperty,
    ) -> ::windows::core::Result<::windows::core::IInspectable> {
        let this = &::windows::core::Interface::cast::<super::super::IDependencyObject>(self)?;
        unsafe {
            let mut result__ = ::core::mem::MaybeUninit::zeroed();
            (::windows::core::Vtable::vtable(this).GetAnimationBaseValue)(
                ::windows::core::Vtable::as_raw(this),
                ::core::mem::transmute_copy(dp),
                result__.as_mut_ptr(),
            )
            .from_abi::<::windows::core::IInspectable>(result__)
        }
    }
    pub fn RegisterPropertyChangedCallback(
        &self,
        dp: &super::super::DependencyProperty,
        callback: &super::super::DependencyPropertyChangedCallback,
    ) -> ::windows::core::Result<i64> {
        let this = &::windows::core::Interface::cast::<super::super::IDependencyObject>(self)?;
        unsafe {
            let mut result__ = ::core::mem::MaybeUninit::zeroed();
            (::windows::core::Vtable::vtable(this).RegisterPropertyChangedCallback)(
                ::windows::core::Vtable::as_raw(this),
                ::core::mem::transmute_copy(dp),
                ::core::mem::transmute_copy(callback),
                result__.as_mut_ptr(),
            )
            .from_abi::<i64>(result__)
        }
    }
    pub fn UnregisterPropertyChangedCallback(
        &self,
        dp: &super::super::DependencyProperty,
        token: i64,
    ) -> ::windows::core::Result<()> {
        let this = &::windows::core::Interface::cast::<super::super::IDependencyObject>(self)?;
        unsafe {
            (::windows::core::Vtable::vtable(this).UnregisterPropertyChangedCallback)(
                ::windows::core::Vtable::as_raw(this),
                ::core::mem::transmute_copy(dp),
                token,
            )
            .ok()
        }
    }
    pub fn Dispatcher(&self) -> ::windows::core::Result<::windows::UI::Core::CoreDispatcher> {
        let this = &::windows::core::Interface::cast::<super::super::IDependencyObject>(self)?;
        unsafe {
            let mut result__ = ::core::mem::MaybeUninit::zeroed();
            (::windows::core::Vtable::vtable(this).Dispatcher)(
                ::windows::core::Vtable::as_raw(this),
                result__.as_mut_ptr(),
            )
            .from_abi::<::windows::UI::Core::CoreDispatcher>(result__)
        }
    }
    #[doc = "*Required features: `\"UI_Dispatching\"`*"]
    #[cfg(feature = "UI_Dispatching")]
    pub fn DispatcherQueue(
        &self,
    ) -> ::windows::core::Result<super::super::super::Dispatching::DispatcherQueue> {
        let this = &::windows::core::Interface::cast::<super::super::IDependencyObject>(self)?;
        unsafe {
            let mut result__ = ::core::mem::MaybeUninit::zeroed();
            (::windows::core::Vtable::vtable(this).DispatcherQueue)(
                ::windows::core::Vtable::as_raw(this),
                result__.as_mut_ptr(),
            )
            .from_abi::<super::super::super::Dispatching::DispatcherQueue>(result__)
        }
    }
    #[doc(hidden)]
    pub fn ICommonNavigationTransitionInfoStatics<
        R,
        F: FnOnce(&ICommonNavigationTransitionInfoStatics) -> ::windows::core::Result<R>,
    >(
        callback: F,
    ) -> ::windows::core::Result<R> {
        static SHARED: ::windows::core::FactoryCache<
            CommonNavigationTransitionInfo,
            ICommonNavigationTransitionInfoStatics,
        > = ::windows::core::FactoryCache::new();
        SHARED.call(callback)
    }
}
impl ::core::clone::Clone for CommonNavigationTransitionInfo {
    fn clone(&self) -> Self {
        Self(self.0.clone())
    }
}
impl ::core::cmp::PartialEq for CommonNavigationTransitionInfo {
    fn eq(&self, other: &Self) -> bool {
        self.0 == other.0
    }
}
impl ::core::cmp::Eq for CommonNavigationTransitionInfo {}
impl ::core::fmt::Debug for CommonNavigationTransitionInfo {
    fn fmt(&self, f: &mut ::core::fmt::Formatter<'_>) -> ::core::fmt::Result {
        f.debug_tuple("CommonNavigationTransitionInfo").field(&self.0).finish()
    }
}
unsafe impl ::windows::core::RuntimeType for CommonNavigationTransitionInfo {
    const SIGNATURE : ::windows::core::ConstBuffer = ::windows::core::ConstBuffer::from_slice ( b"rc(Microsoft.UI.Xaml.Media.Animation.CommonNavigationTransitionInfo;{b21cc95f-9e3d-540a-b35a-17b99dc41b1e})" ) ;
    type DefaultType = ::core::option::Option<Self>;
    fn from_default(from: &Self::DefaultType) -> ::windows::core::Result<Self> {
        from.as_ref().cloned().ok_or(::windows::core::Error::OK)
    }
}
unsafe impl ::windows::core::Vtable for CommonNavigationTransitionInfo {
    type Vtable = ICommonNavigationTransitionInfo_Vtbl;
}
unsafe impl ::windows::core::Interface for CommonNavigationTransitionInfo {
    const IID: ::windows::core::GUID =
        <ICommonNavigationTransitionInfo as ::windows::core::Interface>::IID;
}
impl ::windows::core::RuntimeName for CommonNavigationTransitionInfo {
    const NAME: &'static str = "Microsoft.UI.Xaml.Media.Animation.CommonNavigationTransitionInfo";
}
::windows::core::interface_hierarchy!(
    CommonNavigationTransitionInfo,
    ::windows::core::IUnknown,
    ::windows::core::IInspectable
);
impl ::core::convert::From<CommonNavigationTransitionInfo> for NavigationTransitionInfo {
    fn from(value: CommonNavigationTransitionInfo) -> Self {
        ::core::convert::From::from(&value)
    }
}
impl ::core::convert::From<&CommonNavigationTransitionInfo> for NavigationTransitionInfo {
    fn from(value: &CommonNavigationTransitionInfo) -> Self {
        ::windows::core::Interface::cast(value).unwrap()
    }
}
impl<'a> ::core::convert::From<&CommonNavigationTransitionInfo>
    for ::windows::core::InParam<'a, NavigationTransitionInfo>
{
    fn from(value: &CommonNavigationTransitionInfo) -> Self {
        ::windows::core::InParam::owned(value.into())
    }
}
impl ::core::convert::From<CommonNavigationTransitionInfo> for super::super::DependencyObject {
    fn from(value: CommonNavigationTransitionInfo) -> Self {
        ::core::convert::From::from(&value)
    }
}
impl ::core::convert::From<&CommonNavigationTransitionInfo> for super::super::DependencyObject {
    fn from(value: &CommonNavigationTransitionInfo) -> Self {
        ::windows::core::Interface::cast(value).unwrap()
    }
}
impl<'a> ::core::convert::From<&CommonNavigationTransitionInfo>
    for ::windows::core::InParam<'a, super::super::DependencyObject>
{
    fn from(value: &CommonNavigationTransitionInfo) -> Self {
        ::windows::core::InParam::owned(value.into())
    }
}
unsafe impl ::core::marker::Send for CommonNavigationTransitionInfo {}
unsafe impl ::core::marker::Sync for CommonNavigationTransitionInfo {}
#[doc = "*Required features: `\"UI_Xaml_Media_Animation\"`*"]
#[repr(transparent)]
pub struct ConnectedAnimation(::windows::core::IUnknown);
impl ConnectedAnimation {
    pub fn IsScaleAnimationEnabled(&self) -> ::windows::core::Result<bool> {
        let this = self;
        unsafe {
            let mut result__ = ::core::mem::MaybeUninit::zeroed();
            (::windows::core::Vtable::vtable(this).IsScaleAnimationEnabled)(
                ::windows::core::Vtable::as_raw(this),
                result__.as_mut_ptr(),
            )
            .from_abi::<bool>(result__)
        }
    }
    pub fn SetIsScaleAnimationEnabled(&self, value: bool) -> ::windows::core::Result<()> {
        let this = self;
        unsafe {
            (::windows::core::Vtable::vtable(this).SetIsScaleAnimationEnabled)(
                ::windows::core::Vtable::as_raw(this),
                value,
            )
            .ok()
        }
    }
    pub fn Configuration(&self) -> ::windows::core::Result<ConnectedAnimationConfiguration> {
        let this = self;
        unsafe {
            let mut result__ = ::core::mem::MaybeUninit::zeroed();
            (::windows::core::Vtable::vtable(this).Configuration)(
                ::windows::core::Vtable::as_raw(this),
                result__.as_mut_ptr(),
            )
            .from_abi::<ConnectedAnimationConfiguration>(result__)
        }
    }
    pub fn SetConfiguration<'a, P0>(&self, value: P0) -> ::windows::core::Result<()>
    where
        P0: ::std::convert::Into<::windows::core::InParam<'a, ConnectedAnimationConfiguration>>,
    {
        let this = self;
        unsafe {
            (::windows::core::Vtable::vtable(this).SetConfiguration)(
                ::windows::core::Vtable::as_raw(this),
                value.into().abi(),
            )
            .ok()
        }
    }
    pub fn Completed(
        &self,
        handler: &::windows::Foundation::TypedEventHandler<
            ConnectedAnimation,
            ::windows::core::IInspectable,
        >,
    ) -> ::windows::core::Result<::windows::Foundation::EventRegistrationToken> {
        let this = self;
        unsafe {
            let mut result__ = ::core::mem::MaybeUninit::zeroed();
            (::windows::core::Vtable::vtable(this).Completed)(
                ::windows::core::Vtable::as_raw(this),
                ::core::mem::transmute_copy(handler),
                result__.as_mut_ptr(),
            )
            .from_abi::<::windows::Foundation::EventRegistrationToken>(result__)
        }
    }
    pub fn RemoveCompleted(
        &self,
        token: ::windows::Foundation::EventRegistrationToken,
    ) -> ::windows::core::Result<()> {
        let this = self;
        unsafe {
            (::windows::core::Vtable::vtable(this).RemoveCompleted)(
                ::windows::core::Vtable::as_raw(this),
                token,
            )
            .ok()
        }
    }
    pub fn TryStart<'a, P0>(&self, destination: P0) -> ::windows::core::Result<bool>
    where
        P0: ::std::convert::Into<::windows::core::InParam<'a, super::super::UIElement>>,
    {
        let this = self;
        unsafe {
            let mut result__ = ::core::mem::MaybeUninit::zeroed();
            (::windows::core::Vtable::vtable(this).TryStart)(
                ::windows::core::Vtable::as_raw(this),
                destination.into().abi(),
                result__.as_mut_ptr(),
            )
            .from_abi::<bool>(result__)
        }
    }
    pub fn TryStartWithCoordinatedElements<'a, P0, P1, E1>(
        &self,
        destination: P0,
        coordinatedelements: P1,
    ) -> ::windows::core::Result<bool>
    where
        P0: ::std::convert::Into<::windows::core::InParam<'a, super::super::UIElement>>,
        P1: ::std::convert::TryInto<
            ::windows::core::InParam<
                'a,
                ::windows::Foundation::Collections::IIterable<super::super::UIElement>,
            >,
            Error = E1,
        >,
        E1: ::std::convert::Into<::windows::core::Error>,
    {
        let this = self;
        unsafe {
            let mut result__ = ::core::mem::MaybeUninit::zeroed();
            (::windows::core::Vtable::vtable(this).TryStartWithCoordinatedElements)(
                ::windows::core::Vtable::as_raw(this),
                destination.into().abi(),
                coordinatedelements.try_into().map_err(|e| e.into())?.abi(),
                result__.as_mut_ptr(),
            )
            .from_abi::<bool>(result__)
        }
    }
    pub fn Cancel(&self) -> ::windows::core::Result<()> {
        let this = self;
        unsafe {
            (::windows::core::Vtable::vtable(this).Cancel)(::windows::core::Vtable::as_raw(this))
                .ok()
        }
    }
    #[doc = "*Required features: `\"UI_Composition\"`*"]
    #[cfg(feature = "UI_Composition")]
    pub fn SetAnimationComponent<'a, P0, E0>(
        &self,
        component: ConnectedAnimationComponent,
        animation: P0,
    ) -> ::windows::core::Result<()>
    where
        P0: ::std::convert::TryInto<
            ::windows::core::InParam<
                'a,
                super::super::super::Composition::ICompositionAnimationBase,
            >,
            Error = E0,
        >,
        E0: ::std::convert::Into<::windows::core::Error>,
    {
        let this = self;
        unsafe {
            (::windows::core::Vtable::vtable(this).SetAnimationComponent)(
                ::windows::core::Vtable::as_raw(this),
                component,
                animation.try_into().map_err(|e| e.into())?.abi(),
            )
            .ok()
        }
    }
}
impl ::core::clone::Clone for ConnectedAnimation {
    fn clone(&self) -> Self {
        Self(self.0.clone())
    }
}
impl ::core::cmp::PartialEq for ConnectedAnimation {
    fn eq(&self, other: &Self) -> bool {
        self.0 == other.0
    }
}
impl ::core::cmp::Eq for ConnectedAnimation {}
impl ::core::fmt::Debug for ConnectedAnimation {
    fn fmt(&self, f: &mut ::core::fmt::Formatter<'_>) -> ::core::fmt::Result {
        f.debug_tuple("ConnectedAnimation").field(&self.0).finish()
    }
}
unsafe impl ::windows::core::RuntimeType for ConnectedAnimation {
    const SIGNATURE : ::windows::core::ConstBuffer = ::windows::core::ConstBuffer::from_slice ( b"rc(Microsoft.UI.Xaml.Media.Animation.ConnectedAnimation;{a9c1c6ad-7670-589c-a608-9b5c01cec71f})" ) ;
    type DefaultType = ::core::option::Option<Self>;
    fn from_default(from: &Self::DefaultType) -> ::windows::core::Result<Self> {
        from.as_ref().cloned().ok_or(::windows::core::Error::OK)
    }
}
unsafe impl ::windows::core::Vtable for ConnectedAnimation {
    type Vtable = IConnectedAnimation_Vtbl;
}
unsafe impl ::windows::core::Interface for ConnectedAnimation {
    const IID: ::windows::core::GUID = <IConnectedAnimation as ::windows::core::Interface>::IID;
}
impl ::windows::core::RuntimeName for ConnectedAnimation {
    const NAME: &'static str = "Microsoft.UI.Xaml.Media.Animation.ConnectedAnimation";
}
::windows::core::interface_hierarchy!(
    ConnectedAnimation,
    ::windows::core::IUnknown,
    ::windows::core::IInspectable
);
unsafe impl ::core::marker::Send for ConnectedAnimation {}
unsafe impl ::core::marker::Sync for ConnectedAnimation {}
#[doc = "*Required features: `\"UI_Xaml_Media_Animation\"`*"]
#[repr(transparent)]
pub struct ConnectedAnimationConfiguration(::windows::core::IUnknown);
impl ConnectedAnimationConfiguration {}
impl ::core::clone::Clone for ConnectedAnimationConfiguration {
    fn clone(&self) -> Self {
        Self(self.0.clone())
    }
}
impl ::core::cmp::PartialEq for ConnectedAnimationConfiguration {
    fn eq(&self, other: &Self) -> bool {
        self.0 == other.0
    }
}
impl ::core::cmp::Eq for ConnectedAnimationConfiguration {}
impl ::core::fmt::Debug for ConnectedAnimationConfiguration {
    fn fmt(&self, f: &mut ::core::fmt::Formatter<'_>) -> ::core::fmt::Result {
        f.debug_tuple("ConnectedAnimationConfiguration").field(&self.0).finish()
    }
}
unsafe impl ::windows::core::RuntimeType for ConnectedAnimationConfiguration {
    const SIGNATURE : ::windows::core::ConstBuffer = ::windows::core::ConstBuffer::from_slice ( b"rc(Microsoft.UI.Xaml.Media.Animation.ConnectedAnimationConfiguration;{e848379d-7e25-5976-bfb3-086bac4e8849})" ) ;
    type DefaultType = ::core::option::Option<Self>;
    fn from_default(from: &Self::DefaultType) -> ::windows::core::Result<Self> {
        from.as_ref().cloned().ok_or(::windows::core::Error::OK)
    }
}
unsafe impl ::windows::core::Vtable for ConnectedAnimationConfiguration {
    type Vtable = IConnectedAnimationConfiguration_Vtbl;
}
unsafe impl ::windows::core::Interface for ConnectedAnimationConfiguration {
    const IID: ::windows::core::GUID =
        <IConnectedAnimationConfiguration as ::windows::core::Interface>::IID;
}
impl ::windows::core::RuntimeName for ConnectedAnimationConfiguration {
    const NAME: &'static str = "Microsoft.UI.Xaml.Media.Animation.ConnectedAnimationConfiguration";
}
::windows::core::interface_hierarchy!(
    ConnectedAnimationConfiguration,
    ::windows::core::IUnknown,
    ::windows::core::IInspectable
);
unsafe impl ::core::marker::Send for ConnectedAnimationConfiguration {}
unsafe impl ::core::marker::Sync for ConnectedAnimationConfiguration {}
#[doc = "*Required features: `\"UI_Xaml_Media_Animation\"`*"]
#[repr(transparent)]
pub struct ConnectedAnimationService(::windows::core::IUnknown);
impl ConnectedAnimationService {
    pub fn DefaultDuration(&self) -> ::windows::core::Result<::windows::Foundation::TimeSpan> {
        let this = self;
        unsafe {
            let mut result__ = ::core::mem::MaybeUninit::zeroed();
            (::windows::core::Vtable::vtable(this).DefaultDuration)(
                ::windows::core::Vtable::as_raw(this),
                result__.as_mut_ptr(),
            )
            .from_abi::<::windows::Foundation::TimeSpan>(result__)
        }
    }
    pub fn SetDefaultDuration(
        &self,
        value: ::windows::Foundation::TimeSpan,
    ) -> ::windows::core::Result<()> {
        let this = self;
        unsafe {
            (::windows::core::Vtable::vtable(this).SetDefaultDuration)(
                ::windows::core::Vtable::as_raw(this),
                value,
            )
            .ok()
        }
    }
    #[doc = "*Required features: `\"UI_Composition\"`*"]
    #[cfg(feature = "UI_Composition")]
    pub fn DefaultEasingFunction(
        &self,
    ) -> ::windows::core::Result<super::super::super::Composition::CompositionEasingFunction> {
        let this = self;
        unsafe {
            let mut result__ = ::core::mem::MaybeUninit::zeroed();
            (::windows::core::Vtable::vtable(this).DefaultEasingFunction)(
                ::windows::core::Vtable::as_raw(this),
                result__.as_mut_ptr(),
            )
            .from_abi::<super::super::super::Composition::CompositionEasingFunction>(result__)
        }
    }
    #[doc = "*Required features: `\"UI_Composition\"`*"]
    #[cfg(feature = "UI_Composition")]
    pub fn SetDefaultEasingFunction<'a, P0>(&self, value: P0) -> ::windows::core::Result<()>
    where
        P0: ::std::convert::Into<
            ::windows::core::InParam<
                'a,
                super::super::super::Composition::CompositionEasingFunction,
            >,
        >,
    {
        let this = self;
        unsafe {
            (::windows::core::Vtable::vtable(this).SetDefaultEasingFunction)(
                ::windows::core::Vtable::as_raw(this),
                value.into().abi(),
            )
            .ok()
        }
    }
    pub fn PrepareToAnimate<'a, P0>(
        &self,
        key: &::windows::core::HSTRING,
        source: P0,
    ) -> ::windows::core::Result<ConnectedAnimation>
    where
        P0: ::std::convert::Into<::windows::core::InParam<'a, super::super::UIElement>>,
    {
        let this = self;
        unsafe {
            let mut result__ = ::core::mem::MaybeUninit::zeroed();
            (::windows::core::Vtable::vtable(this).PrepareToAnimate)(
                ::windows::core::Vtable::as_raw(this),
                ::core::mem::transmute_copy(key),
                source.into().abi(),
                result__.as_mut_ptr(),
            )
            .from_abi::<ConnectedAnimation>(result__)
        }
    }
    pub fn GetAnimation(
        &self,
        key: &::windows::core::HSTRING,
    ) -> ::windows::core::Result<ConnectedAnimation> {
        let this = self;
        unsafe {
            let mut result__ = ::core::mem::MaybeUninit::zeroed();
            (::windows::core::Vtable::vtable(this).GetAnimation)(
                ::windows::core::Vtable::as_raw(this),
                ::core::mem::transmute_copy(key),
                result__.as_mut_ptr(),
            )
            .from_abi::<ConnectedAnimation>(result__)
        }
    }
    pub fn GetForCurrentView() -> ::windows::core::Result<ConnectedAnimationService> {
        Self::IConnectedAnimationServiceStatics(|this| unsafe {
            let mut result__ = ::core::mem::MaybeUninit::zeroed();
            (::windows::core::Vtable::vtable(this).GetForCurrentView)(
                ::windows::core::Vtable::as_raw(this),
                result__.as_mut_ptr(),
            )
            .from_abi::<ConnectedAnimationService>(result__)
        })
    }
    #[doc(hidden)]
    pub fn IConnectedAnimationServiceStatics<
        R,
        F: FnOnce(&IConnectedAnimationServiceStatics) -> ::windows::core::Result<R>,
    >(
        callback: F,
    ) -> ::windows::core::Result<R> {
        static SHARED: ::windows::core::FactoryCache<
            ConnectedAnimationService,
            IConnectedAnimationServiceStatics,
        > = ::windows::core::FactoryCache::new();
        SHARED.call(callback)
    }
}
impl ::core::clone::Clone for ConnectedAnimationService {
    fn clone(&self) -> Self {
        Self(self.0.clone())
    }
}
impl ::core::cmp::PartialEq for ConnectedAnimationService {
    fn eq(&self, other: &Self) -> bool {
        self.0 == other.0
    }
}
impl ::core::cmp::Eq for ConnectedAnimationService {}
impl ::core::fmt::Debug for ConnectedAnimationService {
    fn fmt(&self, f: &mut ::core::fmt::Formatter<'_>) -> ::core::fmt::Result {
        f.debug_tuple("ConnectedAnimationService").field(&self.0).finish()
    }
}
unsafe impl ::windows::core::RuntimeType for ConnectedAnimationService {
    const SIGNATURE : ::windows::core::ConstBuffer = ::windows::core::ConstBuffer::from_slice ( b"rc(Microsoft.UI.Xaml.Media.Animation.ConnectedAnimationService;{85f72163-c3c8-586a-91fe-3e0315a3a4fc})" ) ;
    type DefaultType = ::core::option::Option<Self>;
    fn from_default(from: &Self::DefaultType) -> ::windows::core::Result<Self> {
        from.as_ref().cloned().ok_or(::windows::core::Error::OK)
    }
}
unsafe impl ::windows::core::Vtable for ConnectedAnimationService {
    type Vtable = IConnectedAnimationService_Vtbl;
}
unsafe impl ::windows::core::Interface for ConnectedAnimationService {
    const IID: ::windows::core::GUID =
        <IConnectedAnimationService as ::windows::core::Interface>::IID;
}
impl ::windows::core::RuntimeName for ConnectedAnimationService {
    const NAME: &'static str = "Microsoft.UI.Xaml.Media.Animation.ConnectedAnimationService";
}
::windows::core::interface_hierarchy!(
    ConnectedAnimationService,
    ::windows::core::IUnknown,
    ::windows::core::IInspectable
);
unsafe impl ::core::marker::Send for ConnectedAnimationService {}
unsafe impl ::core::marker::Sync for ConnectedAnimationService {}
#[doc = "*Required features: `\"UI_Xaml_Media_Animation\"`*"]
#[repr(transparent)]
pub struct ContentThemeTransition(::windows::core::IUnknown);
impl ContentThemeTransition {
    pub fn new() -> ::windows::core::Result<Self> {
        Self::IActivationFactory(|f| f.ActivateInstance::<Self>())
    }
    fn IActivationFactory<
        R,
        F: FnOnce(&::windows::core::IGenericFactory) -> ::windows::core::Result<R>,
    >(
        callback: F,
    ) -> ::windows::core::Result<R> {
        static SHARED: ::windows::core::FactoryCache<
            ContentThemeTransition,
            ::windows::core::IGenericFactory,
        > = ::windows::core::FactoryCache::new();
        SHARED.call(callback)
    }
    pub fn HorizontalOffset(&self) -> ::windows::core::Result<f64> {
        let this = self;
        unsafe {
            let mut result__ = ::core::mem::MaybeUninit::zeroed();
            (::windows::core::Vtable::vtable(this).HorizontalOffset)(
                ::windows::core::Vtable::as_raw(this),
                result__.as_mut_ptr(),
            )
            .from_abi::<f64>(result__)
        }
    }
    pub fn SetHorizontalOffset(&self, value: f64) -> ::windows::core::Result<()> {
        let this = self;
        unsafe {
            (::windows::core::Vtable::vtable(this).SetHorizontalOffset)(
                ::windows::core::Vtable::as_raw(this),
                value,
            )
            .ok()
        }
    }
    pub fn VerticalOffset(&self) -> ::windows::core::Result<f64> {
        let this = self;
        unsafe {
            let mut result__ = ::core::mem::MaybeUninit::zeroed();
            (::windows::core::Vtable::vtable(this).VerticalOffset)(
                ::windows::core::Vtable::as_raw(this),
                result__.as_mut_ptr(),
            )
            .from_abi::<f64>(result__)
        }
    }
    pub fn SetVerticalOffset(&self, value: f64) -> ::windows::core::Result<()> {
        let this = self;
        unsafe {
            (::windows::core::Vtable::vtable(this).SetVerticalOffset)(
                ::windows::core::Vtable::as_raw(this),
                value,
            )
            .ok()
        }
    }
    pub fn HorizontalOffsetProperty() -> ::windows::core::Result<super::super::DependencyProperty> {
        Self::IContentThemeTransitionStatics(|this| unsafe {
            let mut result__ = ::core::mem::MaybeUninit::zeroed();
            (::windows::core::Vtable::vtable(this).HorizontalOffsetProperty)(
                ::windows::core::Vtable::as_raw(this),
                result__.as_mut_ptr(),
            )
            .from_abi::<super::super::DependencyProperty>(result__)
        })
    }
    pub fn VerticalOffsetProperty() -> ::windows::core::Result<super::super::DependencyProperty> {
        Self::IContentThemeTransitionStatics(|this| unsafe {
            let mut result__ = ::core::mem::MaybeUninit::zeroed();
            (::windows::core::Vtable::vtable(this).VerticalOffsetProperty)(
                ::windows::core::Vtable::as_raw(this),
                result__.as_mut_ptr(),
            )
            .from_abi::<super::super::DependencyProperty>(result__)
        })
    }
    pub fn GetValue(
        &self,
        dp: &super::super::DependencyProperty,
    ) -> ::windows::core::Result<::windows::core::IInspectable> {
        let this = &::windows::core::Interface::cast::<super::super::IDependencyObject>(self)?;
        unsafe {
            let mut result__ = ::core::mem::MaybeUninit::zeroed();
            (::windows::core::Vtable::vtable(this).GetValue)(
                ::windows::core::Vtable::as_raw(this),
                ::core::mem::transmute_copy(dp),
                result__.as_mut_ptr(),
            )
            .from_abi::<::windows::core::IInspectable>(result__)
        }
    }
    pub fn SetValue<'a, P0>(
        &self,
        dp: &super::super::DependencyProperty,
        value: P0,
    ) -> ::windows::core::Result<()>
    where
        P0: ::std::convert::Into<::windows::core::InParam<'a, ::windows::core::IInspectable>>,
    {
        let this = &::windows::core::Interface::cast::<super::super::IDependencyObject>(self)?;
        unsafe {
            (::windows::core::Vtable::vtable(this).SetValue)(
                ::windows::core::Vtable::as_raw(this),
                ::core::mem::transmute_copy(dp),
                value.into().abi(),
            )
            .ok()
        }
    }
    pub fn ClearValue(&self, dp: &super::super::DependencyProperty) -> ::windows::core::Result<()> {
        let this = &::windows::core::Interface::cast::<super::super::IDependencyObject>(self)?;
        unsafe {
            (::windows::core::Vtable::vtable(this).ClearValue)(
                ::windows::core::Vtable::as_raw(this),
                ::core::mem::transmute_copy(dp),
            )
            .ok()
        }
    }
    pub fn ReadLocalValue(
        &self,
        dp: &super::super::DependencyProperty,
    ) -> ::windows::core::Result<::windows::core::IInspectable> {
        let this = &::windows::core::Interface::cast::<super::super::IDependencyObject>(self)?;
        unsafe {
            let mut result__ = ::core::mem::MaybeUninit::zeroed();
            (::windows::core::Vtable::vtable(this).ReadLocalValue)(
                ::windows::core::Vtable::as_raw(this),
                ::core::mem::transmute_copy(dp),
                result__.as_mut_ptr(),
            )
            .from_abi::<::windows::core::IInspectable>(result__)
        }
    }
    pub fn GetAnimationBaseValue(
        &self,
        dp: &super::super::DependencyProperty,
    ) -> ::windows::core::Result<::windows::core::IInspectable> {
        let this = &::windows::core::Interface::cast::<super::super::IDependencyObject>(self)?;
        unsafe {
            let mut result__ = ::core::mem::MaybeUninit::zeroed();
            (::windows::core::Vtable::vtable(this).GetAnimationBaseValue)(
                ::windows::core::Vtable::as_raw(this),
                ::core::mem::transmute_copy(dp),
                result__.as_mut_ptr(),
            )
            .from_abi::<::windows::core::IInspectable>(result__)
        }
    }
    pub fn RegisterPropertyChangedCallback(
        &self,
        dp: &super::super::DependencyProperty,
        callback: &super::super::DependencyPropertyChangedCallback,
    ) -> ::windows::core::Result<i64> {
        let this = &::windows::core::Interface::cast::<super::super::IDependencyObject>(self)?;
        unsafe {
            let mut result__ = ::core::mem::MaybeUninit::zeroed();
            (::windows::core::Vtable::vtable(this).RegisterPropertyChangedCallback)(
                ::windows::core::Vtable::as_raw(this),
                ::core::mem::transmute_copy(dp),
                ::core::mem::transmute_copy(callback),
                result__.as_mut_ptr(),
            )
            .from_abi::<i64>(result__)
        }
    }
    pub fn UnregisterPropertyChangedCallback(
        &self,
        dp: &super::super::DependencyProperty,
        token: i64,
    ) -> ::windows::core::Result<()> {
        let this = &::windows::core::Interface::cast::<super::super::IDependencyObject>(self)?;
        unsafe {
            (::windows::core::Vtable::vtable(this).UnregisterPropertyChangedCallback)(
                ::windows::core::Vtable::as_raw(this),
                ::core::mem::transmute_copy(dp),
                token,
            )
            .ok()
        }
    }
    pub fn Dispatcher(&self) -> ::windows::core::Result<::windows::UI::Core::CoreDispatcher> {
        let this = &::windows::core::Interface::cast::<super::super::IDependencyObject>(self)?;
        unsafe {
            let mut result__ = ::core::mem::MaybeUninit::zeroed();
            (::windows::core::Vtable::vtable(this).Dispatcher)(
                ::windows::core::Vtable::as_raw(this),
                result__.as_mut_ptr(),
            )
            .from_abi::<::windows::UI::Core::CoreDispatcher>(result__)
        }
    }
    #[doc = "*Required features: `\"UI_Dispatching\"`*"]
    #[cfg(feature = "UI_Dispatching")]
    pub fn DispatcherQueue(
        &self,
    ) -> ::windows::core::Result<super::super::super::Dispatching::DispatcherQueue> {
        let this = &::windows::core::Interface::cast::<super::super::IDependencyObject>(self)?;
        unsafe {
            let mut result__ = ::core::mem::MaybeUninit::zeroed();
            (::windows::core::Vtable::vtable(this).DispatcherQueue)(
                ::windows::core::Vtable::as_raw(this),
                result__.as_mut_ptr(),
            )
            .from_abi::<super::super::super::Dispatching::DispatcherQueue>(result__)
        }
    }
    #[doc(hidden)]
    pub fn IContentThemeTransitionStatics<
        R,
        F: FnOnce(&IContentThemeTransitionStatics) -> ::windows::core::Result<R>,
    >(
        callback: F,
    ) -> ::windows::core::Result<R> {
        static SHARED: ::windows::core::FactoryCache<
            ContentThemeTransition,
            IContentThemeTransitionStatics,
        > = ::windows::core::FactoryCache::new();
        SHARED.call(callback)
    }
}
impl ::core::clone::Clone for ContentThemeTransition {
    fn clone(&self) -> Self {
        Self(self.0.clone())
    }
}
impl ::core::cmp::PartialEq for ContentThemeTransition {
    fn eq(&self, other: &Self) -> bool {
        self.0 == other.0
    }
}
impl ::core::cmp::Eq for ContentThemeTransition {}
impl ::core::fmt::Debug for ContentThemeTransition {
    fn fmt(&self, f: &mut ::core::fmt::Formatter<'_>) -> ::core::fmt::Result {
        f.debug_tuple("ContentThemeTransition").field(&self.0).finish()
    }
}
unsafe impl ::windows::core::RuntimeType for ContentThemeTransition {
    const SIGNATURE : ::windows::core::ConstBuffer = ::windows::core::ConstBuffer::from_slice ( b"rc(Microsoft.UI.Xaml.Media.Animation.ContentThemeTransition;{dff47071-cc51-556c-a3fe-8bbb4cba6195})" ) ;
    type DefaultType = ::core::option::Option<Self>;
    fn from_default(from: &Self::DefaultType) -> ::windows::core::Result<Self> {
        from.as_ref().cloned().ok_or(::windows::core::Error::OK)
    }
}
unsafe impl ::windows::core::Vtable for ContentThemeTransition {
    type Vtable = IContentThemeTransition_Vtbl;
}
unsafe impl ::windows::core::Interface for ContentThemeTransition {
    const IID: ::windows::core::GUID = <IContentThemeTransition as ::windows::core::Interface>::IID;
}
impl ::windows::core::RuntimeName for ContentThemeTransition {
    const NAME: &'static str = "Microsoft.UI.Xaml.Media.Animation.ContentThemeTransition";
}
::windows::core::interface_hierarchy!(
    ContentThemeTransition,
    ::windows::core::IUnknown,
    ::windows::core::IInspectable
);
impl ::core::convert::From<ContentThemeTransition> for Transition {
    fn from(value: ContentThemeTransition) -> Self {
        ::core::convert::From::from(&value)
    }
}
impl ::core::convert::From<&ContentThemeTransition> for Transition {
    fn from(value: &ContentThemeTransition) -> Self {
        ::windows::core::Interface::cast(value).unwrap()
    }
}
impl<'a> ::core::convert::From<&ContentThemeTransition>
    for ::windows::core::InParam<'a, Transition>
{
    fn from(value: &ContentThemeTransition) -> Self {
        ::windows::core::InParam::owned(value.into())
    }
}
impl ::core::convert::From<ContentThemeTransition> for super::super::DependencyObject {
    fn from(value: ContentThemeTransition) -> Self {
        ::core::convert::From::from(&value)
    }
}
impl ::core::convert::From<&ContentThemeTransition> for super::super::DependencyObject {
    fn from(value: &ContentThemeTransition) -> Self {
        ::windows::core::Interface::cast(value).unwrap()
    }
}
impl<'a> ::core::convert::From<&ContentThemeTransition>
    for ::windows::core::InParam<'a, super::super::DependencyObject>
{
    fn from(value: &ContentThemeTransition) -> Self {
        ::windows::core::InParam::owned(value.into())
    }
}
unsafe impl ::core::marker::Send for ContentThemeTransition {}
unsafe impl ::core::marker::Sync for ContentThemeTransition {}
#[doc = "*Required features: `\"UI_Xaml_Media_Animation\"`*"]
#[repr(transparent)]
pub struct ContinuumNavigationTransitionInfo(::windows::core::IUnknown);
impl ContinuumNavigationTransitionInfo {
    pub fn new() -> ::windows::core::Result<Self> {
        Self::IActivationFactory(|f| f.ActivateInstance::<Self>())
    }
    fn IActivationFactory<
        R,
        F: FnOnce(&::windows::core::IGenericFactory) -> ::windows::core::Result<R>,
    >(
        callback: F,
    ) -> ::windows::core::Result<R> {
        static SHARED: ::windows::core::FactoryCache<
            ContinuumNavigationTransitionInfo,
            ::windows::core::IGenericFactory,
        > = ::windows::core::FactoryCache::new();
        SHARED.call(callback)
    }
    pub fn ExitElement(&self) -> ::windows::core::Result<super::super::UIElement> {
        let this = self;
        unsafe {
            let mut result__ = ::core::mem::MaybeUninit::zeroed();
            (::windows::core::Vtable::vtable(this).ExitElement)(
                ::windows::core::Vtable::as_raw(this),
                result__.as_mut_ptr(),
            )
            .from_abi::<super::super::UIElement>(result__)
        }
    }
    pub fn SetExitElement<'a, P0>(&self, value: P0) -> ::windows::core::Result<()>
    where
        P0: ::std::convert::Into<::windows::core::InParam<'a, super::super::UIElement>>,
    {
        let this = self;
        unsafe {
            (::windows::core::Vtable::vtable(this).SetExitElement)(
                ::windows::core::Vtable::as_raw(this),
                value.into().abi(),
            )
            .ok()
        }
    }
    pub fn ExitElementProperty() -> ::windows::core::Result<super::super::DependencyProperty> {
        Self::IContinuumNavigationTransitionInfoStatics(|this| unsafe {
            let mut result__ = ::core::mem::MaybeUninit::zeroed();
            (::windows::core::Vtable::vtable(this).ExitElementProperty)(
                ::windows::core::Vtable::as_raw(this),
                result__.as_mut_ptr(),
            )
            .from_abi::<super::super::DependencyProperty>(result__)
        })
    }
    pub fn IsEntranceElementProperty() -> ::windows::core::Result<super::super::DependencyProperty>
    {
        Self::IContinuumNavigationTransitionInfoStatics(|this| unsafe {
            let mut result__ = ::core::mem::MaybeUninit::zeroed();
            (::windows::core::Vtable::vtable(this).IsEntranceElementProperty)(
                ::windows::core::Vtable::as_raw(this),
                result__.as_mut_ptr(),
            )
            .from_abi::<super::super::DependencyProperty>(result__)
        })
    }
    pub fn GetIsEntranceElement<'a, P0>(element: P0) -> ::windows::core::Result<bool>
    where
        P0: ::std::convert::Into<::windows::core::InParam<'a, super::super::UIElement>>,
    {
        Self::IContinuumNavigationTransitionInfoStatics(|this| unsafe {
            let mut result__ = ::core::mem::MaybeUninit::zeroed();
            (::windows::core::Vtable::vtable(this).GetIsEntranceElement)(
                ::windows::core::Vtable::as_raw(this),
                element.into().abi(),
                result__.as_mut_ptr(),
            )
            .from_abi::<bool>(result__)
        })
    }
    pub fn SetIsEntranceElement<'a, P0>(element: P0, value: bool) -> ::windows::core::Result<()>
    where
        P0: ::std::convert::Into<::windows::core::InParam<'a, super::super::UIElement>>,
    {
        Self::IContinuumNavigationTransitionInfoStatics(|this| unsafe {
            (::windows::core::Vtable::vtable(this).SetIsEntranceElement)(
                ::windows::core::Vtable::as_raw(this),
                element.into().abi(),
                value,
            )
            .ok()
        })
    }
    pub fn IsExitElementProperty() -> ::windows::core::Result<super::super::DependencyProperty> {
        Self::IContinuumNavigationTransitionInfoStatics(|this| unsafe {
            let mut result__ = ::core::mem::MaybeUninit::zeroed();
            (::windows::core::Vtable::vtable(this).IsExitElementProperty)(
                ::windows::core::Vtable::as_raw(this),
                result__.as_mut_ptr(),
            )
            .from_abi::<super::super::DependencyProperty>(result__)
        })
    }
    pub fn GetIsExitElement<'a, P0>(element: P0) -> ::windows::core::Result<bool>
    where
        P0: ::std::convert::Into<::windows::core::InParam<'a, super::super::UIElement>>,
    {
        Self::IContinuumNavigationTransitionInfoStatics(|this| unsafe {
            let mut result__ = ::core::mem::MaybeUninit::zeroed();
            (::windows::core::Vtable::vtable(this).GetIsExitElement)(
                ::windows::core::Vtable::as_raw(this),
                element.into().abi(),
                result__.as_mut_ptr(),
            )
            .from_abi::<bool>(result__)
        })
    }
    pub fn SetIsExitElement<'a, P0>(element: P0, value: bool) -> ::windows::core::Result<()>
    where
        P0: ::std::convert::Into<::windows::core::InParam<'a, super::super::UIElement>>,
    {
        Self::IContinuumNavigationTransitionInfoStatics(|this| unsafe {
            (::windows::core::Vtable::vtable(this).SetIsExitElement)(
                ::windows::core::Vtable::as_raw(this),
                element.into().abi(),
                value,
            )
            .ok()
        })
    }
    pub fn ExitElementContainerProperty(
    ) -> ::windows::core::Result<super::super::DependencyProperty> {
        Self::IContinuumNavigationTransitionInfoStatics(|this| unsafe {
            let mut result__ = ::core::mem::MaybeUninit::zeroed();
            (::windows::core::Vtable::vtable(this).ExitElementContainerProperty)(
                ::windows::core::Vtable::as_raw(this),
                result__.as_mut_ptr(),
            )
            .from_abi::<super::super::DependencyProperty>(result__)
        })
    }
    #[doc = "*Required features: `\"UI_Xaml_Controls\"`*"]
    #[cfg(feature = "UI_Xaml_Controls")]
    pub fn GetExitElementContainer<'a, P0>(element: P0) -> ::windows::core::Result<bool>
    where
        P0: ::std::convert::Into<
            ::windows::core::InParam<'a, super::super::Controls::ListViewBase>,
        >,
    {
        Self::IContinuumNavigationTransitionInfoStatics(|this| unsafe {
            let mut result__ = ::core::mem::MaybeUninit::zeroed();
            (::windows::core::Vtable::vtable(this).GetExitElementContainer)(
                ::windows::core::Vtable::as_raw(this),
                element.into().abi(),
                result__.as_mut_ptr(),
            )
            .from_abi::<bool>(result__)
        })
    }
    #[doc = "*Required features: `\"UI_Xaml_Controls\"`*"]
    #[cfg(feature = "UI_Xaml_Controls")]
    pub fn SetExitElementContainer<'a, P0>(element: P0, value: bool) -> ::windows::core::Result<()>
    where
        P0: ::std::convert::Into<
            ::windows::core::InParam<'a, super::super::Controls::ListViewBase>,
        >,
    {
        Self::IContinuumNavigationTransitionInfoStatics(|this| unsafe {
            (::windows::core::Vtable::vtable(this).SetExitElementContainer)(
                ::windows::core::Vtable::as_raw(this),
                element.into().abi(),
                value,
            )
            .ok()
        })
    }
    pub fn GetValue(
        &self,
        dp: &super::super::DependencyProperty,
    ) -> ::windows::core::Result<::windows::core::IInspectable> {
        let this = &::windows::core::Interface::cast::<super::super::IDependencyObject>(self)?;
        unsafe {
            let mut result__ = ::core::mem::MaybeUninit::zeroed();
            (::windows::core::Vtable::vtable(this).GetValue)(
                ::windows::core::Vtable::as_raw(this),
                ::core::mem::transmute_copy(dp),
                result__.as_mut_ptr(),
            )
            .from_abi::<::windows::core::IInspectable>(result__)
        }
    }
    pub fn SetValue<'a, P0>(
        &self,
        dp: &super::super::DependencyProperty,
        value: P0,
    ) -> ::windows::core::Result<()>
    where
        P0: ::std::convert::Into<::windows::core::InParam<'a, ::windows::core::IInspectable>>,
    {
        let this = &::windows::core::Interface::cast::<super::super::IDependencyObject>(self)?;
        unsafe {
            (::windows::core::Vtable::vtable(this).SetValue)(
                ::windows::core::Vtable::as_raw(this),
                ::core::mem::transmute_copy(dp),
                value.into().abi(),
            )
            .ok()
        }
    }
    pub fn ClearValue(&self, dp: &super::super::DependencyProperty) -> ::windows::core::Result<()> {
        let this = &::windows::core::Interface::cast::<super::super::IDependencyObject>(self)?;
        unsafe {
            (::windows::core::Vtable::vtable(this).ClearValue)(
                ::windows::core::Vtable::as_raw(this),
                ::core::mem::transmute_copy(dp),
            )
            .ok()
        }
    }
    pub fn ReadLocalValue(
        &self,
        dp: &super::super::DependencyProperty,
    ) -> ::windows::core::Result<::windows::core::IInspectable> {
        let this = &::windows::core::Interface::cast::<super::super::IDependencyObject>(self)?;
        unsafe {
            let mut result__ = ::core::mem::MaybeUninit::zeroed();
            (::windows::core::Vtable::vtable(this).ReadLocalValue)(
                ::windows::core::Vtable::as_raw(this),
                ::core::mem::transmute_copy(dp),
                result__.as_mut_ptr(),
            )
            .from_abi::<::windows::core::IInspectable>(result__)
        }
    }
    pub fn GetAnimationBaseValue(
        &self,
        dp: &super::super::DependencyProperty,
    ) -> ::windows::core::Result<::windows::core::IInspectable> {
        let this = &::windows::core::Interface::cast::<super::super::IDependencyObject>(self)?;
        unsafe {
            let mut result__ = ::core::mem::MaybeUninit::zeroed();
            (::windows::core::Vtable::vtable(this).GetAnimationBaseValue)(
                ::windows::core::Vtable::as_raw(this),
                ::core::mem::transmute_copy(dp),
                result__.as_mut_ptr(),
            )
            .from_abi::<::windows::core::IInspectable>(result__)
        }
    }
    pub fn RegisterPropertyChangedCallback(
        &self,
        dp: &super::super::DependencyProperty,
        callback: &super::super::DependencyPropertyChangedCallback,
    ) -> ::windows::core::Result<i64> {
        let this = &::windows::core::Interface::cast::<super::super::IDependencyObject>(self)?;
        unsafe {
            let mut result__ = ::core::mem::MaybeUninit::zeroed();
            (::windows::core::Vtable::vtable(this).RegisterPropertyChangedCallback)(
                ::windows::core::Vtable::as_raw(this),
                ::core::mem::transmute_copy(dp),
                ::core::mem::transmute_copy(callback),
                result__.as_mut_ptr(),
            )
            .from_abi::<i64>(result__)
        }
    }
    pub fn UnregisterPropertyChangedCallback(
        &self,
        dp: &super::super::DependencyProperty,
        token: i64,
    ) -> ::windows::core::Result<()> {
        let this = &::windows::core::Interface::cast::<super::super::IDependencyObject>(self)?;
        unsafe {
            (::windows::core::Vtable::vtable(this).UnregisterPropertyChangedCallback)(
                ::windows::core::Vtable::as_raw(this),
                ::core::mem::transmute_copy(dp),
                token,
            )
            .ok()
        }
    }
    pub fn Dispatcher(&self) -> ::windows::core::Result<::windows::UI::Core::CoreDispatcher> {
        let this = &::windows::core::Interface::cast::<super::super::IDependencyObject>(self)?;
        unsafe {
            let mut result__ = ::core::mem::MaybeUninit::zeroed();
            (::windows::core::Vtable::vtable(this).Dispatcher)(
                ::windows::core::Vtable::as_raw(this),
                result__.as_mut_ptr(),
            )
            .from_abi::<::windows::UI::Core::CoreDispatcher>(result__)
        }
    }
    #[doc = "*Required features: `\"UI_Dispatching\"`*"]
    #[cfg(feature = "UI_Dispatching")]
    pub fn DispatcherQueue(
        &self,
    ) -> ::windows::core::Result<super::super::super::Dispatching::DispatcherQueue> {
        let this = &::windows::core::Interface::cast::<super::super::IDependencyObject>(self)?;
        unsafe {
            let mut result__ = ::core::mem::MaybeUninit::zeroed();
            (::windows::core::Vtable::vtable(this).DispatcherQueue)(
                ::windows::core::Vtable::as_raw(this),
                result__.as_mut_ptr(),
            )
            .from_abi::<super::super::super::Dispatching::DispatcherQueue>(result__)
        }
    }
    #[doc(hidden)]
    pub fn IContinuumNavigationTransitionInfoStatics<
        R,
        F: FnOnce(&IContinuumNavigationTransitionInfoStatics) -> ::windows::core::Result<R>,
    >(
        callback: F,
    ) -> ::windows::core::Result<R> {
        static SHARED: ::windows::core::FactoryCache<
            ContinuumNavigationTransitionInfo,
            IContinuumNavigationTransitionInfoStatics,
        > = ::windows::core::FactoryCache::new();
        SHARED.call(callback)
    }
}
impl ::core::clone::Clone for ContinuumNavigationTransitionInfo {
    fn clone(&self) -> Self {
        Self(self.0.clone())
    }
}
impl ::core::cmp::PartialEq for ContinuumNavigationTransitionInfo {
    fn eq(&self, other: &Self) -> bool {
        self.0 == other.0
    }
}
impl ::core::cmp::Eq for ContinuumNavigationTransitionInfo {}
impl ::core::fmt::Debug for ContinuumNavigationTransitionInfo {
    fn fmt(&self, f: &mut ::core::fmt::Formatter<'_>) -> ::core::fmt::Result {
        f.debug_tuple("ContinuumNavigationTransitionInfo").field(&self.0).finish()
    }
}
unsafe impl ::windows::core::RuntimeType for ContinuumNavigationTransitionInfo {
    const SIGNATURE : ::windows::core::ConstBuffer = ::windows::core::ConstBuffer::from_slice ( b"rc(Microsoft.UI.Xaml.Media.Animation.ContinuumNavigationTransitionInfo;{c55da70f-ff2a-5fc3-81c5-9670f4d78752})" ) ;
    type DefaultType = ::core::option::Option<Self>;
    fn from_default(from: &Self::DefaultType) -> ::windows::core::Result<Self> {
        from.as_ref().cloned().ok_or(::windows::core::Error::OK)
    }
}
unsafe impl ::windows::core::Vtable for ContinuumNavigationTransitionInfo {
    type Vtable = IContinuumNavigationTransitionInfo_Vtbl;
}
unsafe impl ::windows::core::Interface for ContinuumNavigationTransitionInfo {
    const IID: ::windows::core::GUID =
        <IContinuumNavigationTransitionInfo as ::windows::core::Interface>::IID;
}
impl ::windows::core::RuntimeName for ContinuumNavigationTransitionInfo {
    const NAME: &'static str =
        "Microsoft.UI.Xaml.Media.Animation.ContinuumNavigationTransitionInfo";
}
::windows::core::interface_hierarchy!(
    ContinuumNavigationTransitionInfo,
    ::windows::core::IUnknown,
    ::windows::core::IInspectable
);
impl ::core::convert::From<ContinuumNavigationTransitionInfo> for NavigationTransitionInfo {
    fn from(value: ContinuumNavigationTransitionInfo) -> Self {
        ::core::convert::From::from(&value)
    }
}
impl ::core::convert::From<&ContinuumNavigationTransitionInfo> for NavigationTransitionInfo {
    fn from(value: &ContinuumNavigationTransitionInfo) -> Self {
        ::windows::core::Interface::cast(value).unwrap()
    }
}
impl<'a> ::core::convert::From<&ContinuumNavigationTransitionInfo>
    for ::windows::core::InParam<'a, NavigationTransitionInfo>
{
    fn from(value: &ContinuumNavigationTransitionInfo) -> Self {
        ::windows::core::InParam::owned(value.into())
    }
}
impl ::core::convert::From<ContinuumNavigationTransitionInfo> for super::super::DependencyObject {
    fn from(value: ContinuumNavigationTransitionInfo) -> Self {
        ::core::convert::From::from(&value)
    }
}
impl ::core::convert::From<&ContinuumNavigationTransitionInfo> for super::super::DependencyObject {
    fn from(value: &ContinuumNavigationTransitionInfo) -> Self {
        ::windows::core::Interface::cast(value).unwrap()
    }
}
impl<'a> ::core::convert::From<&ContinuumNavigationTransitionInfo>
    for ::windows::core::InParam<'a, super::super::DependencyObject>
{
    fn from(value: &ContinuumNavigationTransitionInfo) -> Self {
        ::windows::core::InParam::owned(value.into())
    }
}
unsafe impl ::core::marker::Send for ContinuumNavigationTransitionInfo {}
unsafe impl ::core::marker::Sync for ContinuumNavigationTransitionInfo {}
#[doc = "*Required features: `\"UI_Xaml_Media_Animation\"`*"]
#[repr(transparent)]
pub struct CubicEase(::windows::core::IUnknown);
impl CubicEase {
    pub fn new() -> ::windows::core::Result<Self> {
        Self::IActivationFactory(|f| f.ActivateInstance::<Self>())
    }
    fn IActivationFactory<
        R,
        F: FnOnce(&::windows::core::IGenericFactory) -> ::windows::core::Result<R>,
    >(
        callback: F,
    ) -> ::windows::core::Result<R> {
        static SHARED: ::windows::core::FactoryCache<CubicEase, ::windows::core::IGenericFactory> =
            ::windows::core::FactoryCache::new();
        SHARED.call(callback)
    }
    pub fn GetValue(
        &self,
        dp: &super::super::DependencyProperty,
    ) -> ::windows::core::Result<::windows::core::IInspectable> {
        let this = &::windows::core::Interface::cast::<super::super::IDependencyObject>(self)?;
        unsafe {
            let mut result__ = ::core::mem::MaybeUninit::zeroed();
            (::windows::core::Vtable::vtable(this).GetValue)(
                ::windows::core::Vtable::as_raw(this),
                ::core::mem::transmute_copy(dp),
                result__.as_mut_ptr(),
            )
            .from_abi::<::windows::core::IInspectable>(result__)
        }
    }
    pub fn SetValue<'a, P0>(
        &self,
        dp: &super::super::DependencyProperty,
        value: P0,
    ) -> ::windows::core::Result<()>
    where
        P0: ::std::convert::Into<::windows::core::InParam<'a, ::windows::core::IInspectable>>,
    {
        let this = &::windows::core::Interface::cast::<super::super::IDependencyObject>(self)?;
        unsafe {
            (::windows::core::Vtable::vtable(this).SetValue)(
                ::windows::core::Vtable::as_raw(this),
                ::core::mem::transmute_copy(dp),
                value.into().abi(),
            )
            .ok()
        }
    }
    pub fn ClearValue(&self, dp: &super::super::DependencyProperty) -> ::windows::core::Result<()> {
        let this = &::windows::core::Interface::cast::<super::super::IDependencyObject>(self)?;
        unsafe {
            (::windows::core::Vtable::vtable(this).ClearValue)(
                ::windows::core::Vtable::as_raw(this),
                ::core::mem::transmute_copy(dp),
            )
            .ok()
        }
    }
    pub fn ReadLocalValue(
        &self,
        dp: &super::super::DependencyProperty,
    ) -> ::windows::core::Result<::windows::core::IInspectable> {
        let this = &::windows::core::Interface::cast::<super::super::IDependencyObject>(self)?;
        unsafe {
            let mut result__ = ::core::mem::MaybeUninit::zeroed();
            (::windows::core::Vtable::vtable(this).ReadLocalValue)(
                ::windows::core::Vtable::as_raw(this),
                ::core::mem::transmute_copy(dp),
                result__.as_mut_ptr(),
            )
            .from_abi::<::windows::core::IInspectable>(result__)
        }
    }
    pub fn GetAnimationBaseValue(
        &self,
        dp: &super::super::DependencyProperty,
    ) -> ::windows::core::Result<::windows::core::IInspectable> {
        let this = &::windows::core::Interface::cast::<super::super::IDependencyObject>(self)?;
        unsafe {
            let mut result__ = ::core::mem::MaybeUninit::zeroed();
            (::windows::core::Vtable::vtable(this).GetAnimationBaseValue)(
                ::windows::core::Vtable::as_raw(this),
                ::core::mem::transmute_copy(dp),
                result__.as_mut_ptr(),
            )
            .from_abi::<::windows::core::IInspectable>(result__)
        }
    }
    pub fn RegisterPropertyChangedCallback(
        &self,
        dp: &super::super::DependencyProperty,
        callback: &super::super::DependencyPropertyChangedCallback,
    ) -> ::windows::core::Result<i64> {
        let this = &::windows::core::Interface::cast::<super::super::IDependencyObject>(self)?;
        unsafe {
            let mut result__ = ::core::mem::MaybeUninit::zeroed();
            (::windows::core::Vtable::vtable(this).RegisterPropertyChangedCallback)(
                ::windows::core::Vtable::as_raw(this),
                ::core::mem::transmute_copy(dp),
                ::core::mem::transmute_copy(callback),
                result__.as_mut_ptr(),
            )
            .from_abi::<i64>(result__)
        }
    }
    pub fn UnregisterPropertyChangedCallback(
        &self,
        dp: &super::super::DependencyProperty,
        token: i64,
    ) -> ::windows::core::Result<()> {
        let this = &::windows::core::Interface::cast::<super::super::IDependencyObject>(self)?;
        unsafe {
            (::windows::core::Vtable::vtable(this).UnregisterPropertyChangedCallback)(
                ::windows::core::Vtable::as_raw(this),
                ::core::mem::transmute_copy(dp),
                token,
            )
            .ok()
        }
    }
    pub fn Dispatcher(&self) -> ::windows::core::Result<::windows::UI::Core::CoreDispatcher> {
        let this = &::windows::core::Interface::cast::<super::super::IDependencyObject>(self)?;
        unsafe {
            let mut result__ = ::core::mem::MaybeUninit::zeroed();
            (::windows::core::Vtable::vtable(this).Dispatcher)(
                ::windows::core::Vtable::as_raw(this),
                result__.as_mut_ptr(),
            )
            .from_abi::<::windows::UI::Core::CoreDispatcher>(result__)
        }
    }
    #[doc = "*Required features: `\"UI_Dispatching\"`*"]
    #[cfg(feature = "UI_Dispatching")]
    pub fn DispatcherQueue(
        &self,
    ) -> ::windows::core::Result<super::super::super::Dispatching::DispatcherQueue> {
        let this = &::windows::core::Interface::cast::<super::super::IDependencyObject>(self)?;
        unsafe {
            let mut result__ = ::core::mem::MaybeUninit::zeroed();
            (::windows::core::Vtable::vtable(this).DispatcherQueue)(
                ::windows::core::Vtable::as_raw(this),
                result__.as_mut_ptr(),
            )
            .from_abi::<super::super::super::Dispatching::DispatcherQueue>(result__)
        }
    }
    pub fn EasingMode(&self) -> ::windows::core::Result<EasingMode> {
        let this = &::windows::core::Interface::cast::<IEasingFunctionBase>(self)?;
        unsafe {
            let mut result__ = ::core::mem::MaybeUninit::zeroed();
            (::windows::core::Vtable::vtable(this).EasingMode)(
                ::windows::core::Vtable::as_raw(this),
                result__.as_mut_ptr(),
            )
            .from_abi::<EasingMode>(result__)
        }
    }
    pub fn SetEasingMode(&self, value: EasingMode) -> ::windows::core::Result<()> {
        let this = &::windows::core::Interface::cast::<IEasingFunctionBase>(self)?;
        unsafe {
            (::windows::core::Vtable::vtable(this).SetEasingMode)(
                ::windows::core::Vtable::as_raw(this),
                value,
            )
            .ok()
        }
    }
    pub fn Ease(&self, normalizedtime: f64) -> ::windows::core::Result<f64> {
        let this = &::windows::core::Interface::cast::<IEasingFunctionBase>(self)?;
        unsafe {
            let mut result__ = ::core::mem::MaybeUninit::zeroed();
            (::windows::core::Vtable::vtable(this).Ease)(
                ::windows::core::Vtable::as_raw(this),
                normalizedtime,
                result__.as_mut_ptr(),
            )
            .from_abi::<f64>(result__)
        }
    }
}
impl ::core::clone::Clone for CubicEase {
    fn clone(&self) -> Self {
        Self(self.0.clone())
    }
}
impl ::core::cmp::PartialEq for CubicEase {
    fn eq(&self, other: &Self) -> bool {
        self.0 == other.0
    }
}
impl ::core::cmp::Eq for CubicEase {}
impl ::core::fmt::Debug for CubicEase {
    fn fmt(&self, f: &mut ::core::fmt::Formatter<'_>) -> ::core::fmt::Result {
        f.debug_tuple("CubicEase").field(&self.0).finish()
    }
}
unsafe impl ::windows::core::RuntimeType for CubicEase {
    const SIGNATURE: ::windows::core::ConstBuffer = ::windows::core::ConstBuffer::from_slice(
        b"rc(Microsoft.UI.Xaml.Media.Animation.CubicEase;{01a218b4-eb7e-54f9-bfb6-c6ee128013d2})",
    );
    type DefaultType = ::core::option::Option<Self>;
    fn from_default(from: &Self::DefaultType) -> ::windows::core::Result<Self> {
        from.as_ref().cloned().ok_or(::windows::core::Error::OK)
    }
}
unsafe impl ::windows::core::Vtable for CubicEase {
    type Vtable = ICubicEase_Vtbl;
}
unsafe impl ::windows::core::Interface for CubicEase {
    const IID: ::windows::core::GUID = <ICubicEase as ::windows::core::Interface>::IID;
}
impl ::windows::core::RuntimeName for CubicEase {
    const NAME: &'static str = "Microsoft.UI.Xaml.Media.Animation.CubicEase";
}
::windows::core::interface_hierarchy!(
    CubicEase,
    ::windows::core::IUnknown,
    ::windows::core::IInspectable
);
impl ::core::convert::From<CubicEase> for EasingFunctionBase {
    fn from(value: CubicEase) -> Self {
        ::core::convert::From::from(&value)
    }
}
impl ::core::convert::From<&CubicEase> for EasingFunctionBase {
    fn from(value: &CubicEase) -> Self {
        ::windows::core::Interface::cast(value).unwrap()
    }
}
impl<'a> ::core::convert::From<&CubicEase> for ::windows::core::InParam<'a, EasingFunctionBase> {
    fn from(value: &CubicEase) -> Self {
        ::windows::core::InParam::owned(value.into())
    }
}
impl ::core::convert::From<CubicEase> for super::super::DependencyObject {
    fn from(value: CubicEase) -> Self {
        ::core::convert::From::from(&value)
    }
}
impl ::core::convert::From<&CubicEase> for super::super::DependencyObject {
    fn from(value: &CubicEase) -> Self {
        ::windows::core::Interface::cast(value).unwrap()
    }
}
impl<'a> ::core::convert::From<&CubicEase>
    for ::windows::core::InParam<'a, super::super::DependencyObject>
{
    fn from(value: &CubicEase) -> Self {
        ::windows::core::InParam::owned(value.into())
    }
}
unsafe impl ::core::marker::Send for CubicEase {}
unsafe impl ::core::marker::Sync for CubicEase {}
#[doc = "*Required features: `\"UI_Xaml_Media_Animation\"`*"]
#[repr(transparent)]
pub struct DirectConnectedAnimationConfiguration(::windows::core::IUnknown);
impl DirectConnectedAnimationConfiguration {
    pub fn new() -> ::windows::core::Result<DirectConnectedAnimationConfiguration> {
        Self::IDirectConnectedAnimationConfigurationFactory(|this| unsafe {
            let mut result__ = ::core::mem::MaybeUninit::zeroed();
            (::windows::core::Vtable::vtable(this).CreateInstance)(
                ::windows::core::Vtable::as_raw(this),
                ::core::ptr::null_mut(),
                &mut ::core::option::Option::<::windows::core::IInspectable>::None as *mut _ as _,
                result__.as_mut_ptr(),
            )
            .from_abi::<DirectConnectedAnimationConfiguration>(result__)
        })
    }
    pub fn compose<T>(compose: T) -> ::windows::core::Result<DirectConnectedAnimationConfiguration>
    where
        T: ::windows::core::Compose,
    {
        Self::IDirectConnectedAnimationConfigurationFactory(|this| unsafe {
            let (derived__, base__) = ::windows::core::Compose::compose(compose);
            let mut result__ = ::core::mem::MaybeUninit::zeroed();
            (::windows::core::Vtable::vtable(this).CreateInstance)(
                ::windows::core::Vtable::as_raw(this),
                ::core::mem::transmute_copy(&derived__),
                base__ as *mut _ as _,
                result__.as_mut_ptr(),
            )
            .from_abi::<DirectConnectedAnimationConfiguration>(result__)
        })
    }
    #[doc(hidden)]
    pub fn IDirectConnectedAnimationConfigurationFactory<
        R,
        F: FnOnce(&IDirectConnectedAnimationConfigurationFactory) -> ::windows::core::Result<R>,
    >(
        callback: F,
    ) -> ::windows::core::Result<R> {
        static SHARED: ::windows::core::FactoryCache<
            DirectConnectedAnimationConfiguration,
            IDirectConnectedAnimationConfigurationFactory,
        > = ::windows::core::FactoryCache::new();
        SHARED.call(callback)
    }
}
impl ::core::clone::Clone for DirectConnectedAnimationConfiguration {
    fn clone(&self) -> Self {
        Self(self.0.clone())
    }
}
impl ::core::cmp::PartialEq for DirectConnectedAnimationConfiguration {
    fn eq(&self, other: &Self) -> bool {
        self.0 == other.0
    }
}
impl ::core::cmp::Eq for DirectConnectedAnimationConfiguration {}
impl ::core::fmt::Debug for DirectConnectedAnimationConfiguration {
    fn fmt(&self, f: &mut ::core::fmt::Formatter<'_>) -> ::core::fmt::Result {
        f.debug_tuple("DirectConnectedAnimationConfiguration").field(&self.0).finish()
    }
}
unsafe impl ::windows::core::RuntimeType for DirectConnectedAnimationConfiguration {
    const SIGNATURE : ::windows::core::ConstBuffer = ::windows::core::ConstBuffer::from_slice ( b"rc(Microsoft.UI.Xaml.Media.Animation.DirectConnectedAnimationConfiguration;{44f192eb-cc11-545e-8fa2-1f0ec9c4438a})" ) ;
    type DefaultType = ::core::option::Option<Self>;
    fn from_default(from: &Self::DefaultType) -> ::windows::core::Result<Self> {
        from.as_ref().cloned().ok_or(::windows::core::Error::OK)
    }
}
unsafe impl ::windows::core::Vtable for DirectConnectedAnimationConfiguration {
    type Vtable = IDirectConnectedAnimationConfiguration_Vtbl;
}
unsafe impl ::windows::core::Interface for DirectConnectedAnimationConfiguration {
    const IID: ::windows::core::GUID =
        <IDirectConnectedAnimationConfiguration as ::windows::core::Interface>::IID;
}
impl ::windows::core::RuntimeName for DirectConnectedAnimationConfiguration {
    const NAME: &'static str =
        "Microsoft.UI.Xaml.Media.Animation.DirectConnectedAnimationConfiguration";
}
::windows::core::interface_hierarchy!(
    DirectConnectedAnimationConfiguration,
    ::windows::core::IUnknown,
    ::windows::core::IInspectable
);
impl ::core::convert::From<DirectConnectedAnimationConfiguration>
    for ConnectedAnimationConfiguration
{
    fn from(value: DirectConnectedAnimationConfiguration) -> Self {
        ::core::convert::From::from(&value)
    }
}
impl ::core::convert::From<&DirectConnectedAnimationConfiguration>
    for ConnectedAnimationConfiguration
{
    fn from(value: &DirectConnectedAnimationConfiguration) -> Self {
        ::windows::core::Interface::cast(value).unwrap()
    }
}
impl<'a> ::core::convert::From<&DirectConnectedAnimationConfiguration>
    for ::windows::core::InParam<'a, ConnectedAnimationConfiguration>
{
    fn from(value: &DirectConnectedAnimationConfiguration) -> Self {
        ::windows::core::InParam::owned(value.into())
    }
}
unsafe impl ::core::marker::Send for DirectConnectedAnimationConfiguration {}
unsafe impl ::core::marker::Sync for DirectConnectedAnimationConfiguration {}
#[doc = "*Required features: `\"UI_Xaml_Media_Animation\"`*"]
#[repr(transparent)]
pub struct DiscreteColorKeyFrame(::windows::core::IUnknown);
impl DiscreteColorKeyFrame {
    pub fn new() -> ::windows::core::Result<Self> {
        Self::IActivationFactory(|f| f.ActivateInstance::<Self>())
    }
    fn IActivationFactory<
        R,
        F: FnOnce(&::windows::core::IGenericFactory) -> ::windows::core::Result<R>,
    >(
        callback: F,
    ) -> ::windows::core::Result<R> {
        static SHARED: ::windows::core::FactoryCache<
            DiscreteColorKeyFrame,
            ::windows::core::IGenericFactory,
        > = ::windows::core::FactoryCache::new();
        SHARED.call(callback)
    }
    pub fn Value(&self) -> ::windows::core::Result<::windows::UI::Color> {
        let this = &::windows::core::Interface::cast::<IColorKeyFrame>(self)?;
        unsafe {
            let mut result__ = ::core::mem::MaybeUninit::zeroed();
            (::windows::core::Vtable::vtable(this).Value)(
                ::windows::core::Vtable::as_raw(this),
                result__.as_mut_ptr(),
            )
            .from_abi::<::windows::UI::Color>(result__)
        }
    }
    pub fn SetValue(&self, value: ::windows::UI::Color) -> ::windows::core::Result<()> {
        let this = &::windows::core::Interface::cast::<IColorKeyFrame>(self)?;
        unsafe {
            (::windows::core::Vtable::vtable(this).SetValue)(
                ::windows::core::Vtable::as_raw(this),
                value,
            )
            .ok()
        }
    }
    pub fn KeyTime(&self) -> ::windows::core::Result<KeyTime> {
        let this = &::windows::core::Interface::cast::<IColorKeyFrame>(self)?;
        unsafe {
            let mut result__ = ::core::mem::MaybeUninit::zeroed();
            (::windows::core::Vtable::vtable(this).KeyTime)(
                ::windows::core::Vtable::as_raw(this),
                result__.as_mut_ptr(),
            )
            .from_abi::<KeyTime>(result__)
        }
    }
    pub fn SetKeyTime(&self, value: KeyTime) -> ::windows::core::Result<()> {
        let this = &::windows::core::Interface::cast::<IColorKeyFrame>(self)?;
        unsafe {
            (::windows::core::Vtable::vtable(this).SetKeyTime)(
                ::windows::core::Vtable::as_raw(this),
                value,
            )
            .ok()
        }
    }
    pub fn GetValue(
        &self,
        dp: &super::super::DependencyProperty,
    ) -> ::windows::core::Result<::windows::core::IInspectable> {
        let this = &::windows::core::Interface::cast::<super::super::IDependencyObject>(self)?;
        unsafe {
            let mut result__ = ::core::mem::MaybeUninit::zeroed();
            (::windows::core::Vtable::vtable(this).GetValue)(
                ::windows::core::Vtable::as_raw(this),
                ::core::mem::transmute_copy(dp),
                result__.as_mut_ptr(),
            )
            .from_abi::<::windows::core::IInspectable>(result__)
        }
    }
    pub fn SetValue2<'a, P0>(
        &self,
        dp: &super::super::DependencyProperty,
        value: P0,
    ) -> ::windows::core::Result<()>
    where
        P0: ::std::convert::Into<::windows::core::InParam<'a, ::windows::core::IInspectable>>,
    {
        let this = &::windows::core::Interface::cast::<super::super::IDependencyObject>(self)?;
        unsafe {
            (::windows::core::Vtable::vtable(this).SetValue)(
                ::windows::core::Vtable::as_raw(this),
                ::core::mem::transmute_copy(dp),
                value.into().abi(),
            )
            .ok()
        }
    }
    pub fn ClearValue(&self, dp: &super::super::DependencyProperty) -> ::windows::core::Result<()> {
        let this = &::windows::core::Interface::cast::<super::super::IDependencyObject>(self)?;
        unsafe {
            (::windows::core::Vtable::vtable(this).ClearValue)(
                ::windows::core::Vtable::as_raw(this),
                ::core::mem::transmute_copy(dp),
            )
            .ok()
        }
    }
    pub fn ReadLocalValue(
        &self,
        dp: &super::super::DependencyProperty,
    ) -> ::windows::core::Result<::windows::core::IInspectable> {
        let this = &::windows::core::Interface::cast::<super::super::IDependencyObject>(self)?;
        unsafe {
            let mut result__ = ::core::mem::MaybeUninit::zeroed();
            (::windows::core::Vtable::vtable(this).ReadLocalValue)(
                ::windows::core::Vtable::as_raw(this),
                ::core::mem::transmute_copy(dp),
                result__.as_mut_ptr(),
            )
            .from_abi::<::windows::core::IInspectable>(result__)
        }
    }
    pub fn GetAnimationBaseValue(
        &self,
        dp: &super::super::DependencyProperty,
    ) -> ::windows::core::Result<::windows::core::IInspectable> {
        let this = &::windows::core::Interface::cast::<super::super::IDependencyObject>(self)?;
        unsafe {
            let mut result__ = ::core::mem::MaybeUninit::zeroed();
            (::windows::core::Vtable::vtable(this).GetAnimationBaseValue)(
                ::windows::core::Vtable::as_raw(this),
                ::core::mem::transmute_copy(dp),
                result__.as_mut_ptr(),
            )
            .from_abi::<::windows::core::IInspectable>(result__)
        }
    }
    pub fn RegisterPropertyChangedCallback(
        &self,
        dp: &super::super::DependencyProperty,
        callback: &super::super::DependencyPropertyChangedCallback,
    ) -> ::windows::core::Result<i64> {
        let this = &::windows::core::Interface::cast::<super::super::IDependencyObject>(self)?;
        unsafe {
            let mut result__ = ::core::mem::MaybeUninit::zeroed();
            (::windows::core::Vtable::vtable(this).RegisterPropertyChangedCallback)(
                ::windows::core::Vtable::as_raw(this),
                ::core::mem::transmute_copy(dp),
                ::core::mem::transmute_copy(callback),
                result__.as_mut_ptr(),
            )
            .from_abi::<i64>(result__)
        }
    }
    pub fn UnregisterPropertyChangedCallback(
        &self,
        dp: &super::super::DependencyProperty,
        token: i64,
    ) -> ::windows::core::Result<()> {
        let this = &::windows::core::Interface::cast::<super::super::IDependencyObject>(self)?;
        unsafe {
            (::windows::core::Vtable::vtable(this).UnregisterPropertyChangedCallback)(
                ::windows::core::Vtable::as_raw(this),
                ::core::mem::transmute_copy(dp),
                token,
            )
            .ok()
        }
    }
    pub fn Dispatcher(&self) -> ::windows::core::Result<::windows::UI::Core::CoreDispatcher> {
        let this = &::windows::core::Interface::cast::<super::super::IDependencyObject>(self)?;
        unsafe {
            let mut result__ = ::core::mem::MaybeUninit::zeroed();
            (::windows::core::Vtable::vtable(this).Dispatcher)(
                ::windows::core::Vtable::as_raw(this),
                result__.as_mut_ptr(),
            )
            .from_abi::<::windows::UI::Core::CoreDispatcher>(result__)
        }
    }
    #[doc = "*Required features: `\"UI_Dispatching\"`*"]
    #[cfg(feature = "UI_Dispatching")]
    pub fn DispatcherQueue(
        &self,
    ) -> ::windows::core::Result<super::super::super::Dispatching::DispatcherQueue> {
        let this = &::windows::core::Interface::cast::<super::super::IDependencyObject>(self)?;
        unsafe {
            let mut result__ = ::core::mem::MaybeUninit::zeroed();
            (::windows::core::Vtable::vtable(this).DispatcherQueue)(
                ::windows::core::Vtable::as_raw(this),
                result__.as_mut_ptr(),
            )
            .from_abi::<super::super::super::Dispatching::DispatcherQueue>(result__)
        }
    }
}
impl ::core::clone::Clone for DiscreteColorKeyFrame {
    fn clone(&self) -> Self {
        Self(self.0.clone())
    }
}
impl ::core::cmp::PartialEq for DiscreteColorKeyFrame {
    fn eq(&self, other: &Self) -> bool {
        self.0 == other.0
    }
}
impl ::core::cmp::Eq for DiscreteColorKeyFrame {}
impl ::core::fmt::Debug for DiscreteColorKeyFrame {
    fn fmt(&self, f: &mut ::core::fmt::Formatter<'_>) -> ::core::fmt::Result {
        f.debug_tuple("DiscreteColorKeyFrame").field(&self.0).finish()
    }
}
unsafe impl ::windows::core::RuntimeType for DiscreteColorKeyFrame {
    const SIGNATURE : ::windows::core::ConstBuffer = ::windows::core::ConstBuffer::from_slice ( b"rc(Microsoft.UI.Xaml.Media.Animation.DiscreteColorKeyFrame;{9b3d88a7-31d3-5912-8646-641a8a565ca1})" ) ;
    type DefaultType = ::core::option::Option<Self>;
    fn from_default(from: &Self::DefaultType) -> ::windows::core::Result<Self> {
        from.as_ref().cloned().ok_or(::windows::core::Error::OK)
    }
}
unsafe impl ::windows::core::Vtable for DiscreteColorKeyFrame {
    type Vtable = IDiscreteColorKeyFrame_Vtbl;
}
unsafe impl ::windows::core::Interface for DiscreteColorKeyFrame {
    const IID: ::windows::core::GUID = <IDiscreteColorKeyFrame as ::windows::core::Interface>::IID;
}
impl ::windows::core::RuntimeName for DiscreteColorKeyFrame {
    const NAME: &'static str = "Microsoft.UI.Xaml.Media.Animation.DiscreteColorKeyFrame";
}
::windows::core::interface_hierarchy!(
    DiscreteColorKeyFrame,
    ::windows::core::IUnknown,
    ::windows::core::IInspectable
);
impl ::core::convert::From<DiscreteColorKeyFrame> for ColorKeyFrame {
    fn from(value: DiscreteColorKeyFrame) -> Self {
        ::core::convert::From::from(&value)
    }
}
impl ::core::convert::From<&DiscreteColorKeyFrame> for ColorKeyFrame {
    fn from(value: &DiscreteColorKeyFrame) -> Self {
        ::windows::core::Interface::cast(value).unwrap()
    }
}
impl<'a> ::core::convert::From<&DiscreteColorKeyFrame>
    for ::windows::core::InParam<'a, ColorKeyFrame>
{
    fn from(value: &DiscreteColorKeyFrame) -> Self {
        ::windows::core::InParam::owned(value.into())
    }
}
impl ::core::convert::From<DiscreteColorKeyFrame> for super::super::DependencyObject {
    fn from(value: DiscreteColorKeyFrame) -> Self {
        ::core::convert::From::from(&value)
    }
}
impl ::core::convert::From<&DiscreteColorKeyFrame> for super::super::DependencyObject {
    fn from(value: &DiscreteColorKeyFrame) -> Self {
        ::windows::core::Interface::cast(value).unwrap()
    }
}
impl<'a> ::core::convert::From<&DiscreteColorKeyFrame>
    for ::windows::core::InParam<'a, super::super::DependencyObject>
{
    fn from(value: &DiscreteColorKeyFrame) -> Self {
        ::windows::core::InParam::owned(value.into())
    }
}
unsafe impl ::core::marker::Send for DiscreteColorKeyFrame {}
unsafe impl ::core::marker::Sync for DiscreteColorKeyFrame {}
#[doc = "*Required features: `\"UI_Xaml_Media_Animation\"`*"]
#[repr(transparent)]
pub struct DiscreteDoubleKeyFrame(::windows::core::IUnknown);
impl DiscreteDoubleKeyFrame {
    pub fn new() -> ::windows::core::Result<Self> {
        Self::IActivationFactory(|f| f.ActivateInstance::<Self>())
    }
    fn IActivationFactory<
        R,
        F: FnOnce(&::windows::core::IGenericFactory) -> ::windows::core::Result<R>,
    >(
        callback: F,
    ) -> ::windows::core::Result<R> {
        static SHARED: ::windows::core::FactoryCache<
            DiscreteDoubleKeyFrame,
            ::windows::core::IGenericFactory,
        > = ::windows::core::FactoryCache::new();
        SHARED.call(callback)
    }
    pub fn GetValue(
        &self,
        dp: &super::super::DependencyProperty,
    ) -> ::windows::core::Result<::windows::core::IInspectable> {
        let this = &::windows::core::Interface::cast::<super::super::IDependencyObject>(self)?;
        unsafe {
            let mut result__ = ::core::mem::MaybeUninit::zeroed();
            (::windows::core::Vtable::vtable(this).GetValue)(
                ::windows::core::Vtable::as_raw(this),
                ::core::mem::transmute_copy(dp),
                result__.as_mut_ptr(),
            )
            .from_abi::<::windows::core::IInspectable>(result__)
        }
    }
    pub fn SetValue<'a, P0>(
        &self,
        dp: &super::super::DependencyProperty,
        value: P0,
    ) -> ::windows::core::Result<()>
    where
        P0: ::std::convert::Into<::windows::core::InParam<'a, ::windows::core::IInspectable>>,
    {
        let this = &::windows::core::Interface::cast::<super::super::IDependencyObject>(self)?;
        unsafe {
            (::windows::core::Vtable::vtable(this).SetValue)(
                ::windows::core::Vtable::as_raw(this),
                ::core::mem::transmute_copy(dp),
                value.into().abi(),
            )
            .ok()
        }
    }
    pub fn ClearValue(&self, dp: &super::super::DependencyProperty) -> ::windows::core::Result<()> {
        let this = &::windows::core::Interface::cast::<super::super::IDependencyObject>(self)?;
        unsafe {
            (::windows::core::Vtable::vtable(this).ClearValue)(
                ::windows::core::Vtable::as_raw(this),
                ::core::mem::transmute_copy(dp),
            )
            .ok()
        }
    }
    pub fn ReadLocalValue(
        &self,
        dp: &super::super::DependencyProperty,
    ) -> ::windows::core::Result<::windows::core::IInspectable> {
        let this = &::windows::core::Interface::cast::<super::super::IDependencyObject>(self)?;
        unsafe {
            let mut result__ = ::core::mem::MaybeUninit::zeroed();
            (::windows::core::Vtable::vtable(this).ReadLocalValue)(
                ::windows::core::Vtable::as_raw(this),
                ::core::mem::transmute_copy(dp),
                result__.as_mut_ptr(),
            )
            .from_abi::<::windows::core::IInspectable>(result__)
        }
    }
    pub fn GetAnimationBaseValue(
        &self,
        dp: &super::super::DependencyProperty,
    ) -> ::windows::core::Result<::windows::core::IInspectable> {
        let this = &::windows::core::Interface::cast::<super::super::IDependencyObject>(self)?;
        unsafe {
            let mut result__ = ::core::mem::MaybeUninit::zeroed();
            (::windows::core::Vtable::vtable(this).GetAnimationBaseValue)(
                ::windows::core::Vtable::as_raw(this),
                ::core::mem::transmute_copy(dp),
                result__.as_mut_ptr(),
            )
            .from_abi::<::windows::core::IInspectable>(result__)
        }
    }
    pub fn RegisterPropertyChangedCallback(
        &self,
        dp: &super::super::DependencyProperty,
        callback: &super::super::DependencyPropertyChangedCallback,
    ) -> ::windows::core::Result<i64> {
        let this = &::windows::core::Interface::cast::<super::super::IDependencyObject>(self)?;
        unsafe {
            let mut result__ = ::core::mem::MaybeUninit::zeroed();
            (::windows::core::Vtable::vtable(this).RegisterPropertyChangedCallback)(
                ::windows::core::Vtable::as_raw(this),
                ::core::mem::transmute_copy(dp),
                ::core::mem::transmute_copy(callback),
                result__.as_mut_ptr(),
            )
            .from_abi::<i64>(result__)
        }
    }
    pub fn UnregisterPropertyChangedCallback(
        &self,
        dp: &super::super::DependencyProperty,
        token: i64,
    ) -> ::windows::core::Result<()> {
        let this = &::windows::core::Interface::cast::<super::super::IDependencyObject>(self)?;
        unsafe {
            (::windows::core::Vtable::vtable(this).UnregisterPropertyChangedCallback)(
                ::windows::core::Vtable::as_raw(this),
                ::core::mem::transmute_copy(dp),
                token,
            )
            .ok()
        }
    }
    pub fn Dispatcher(&self) -> ::windows::core::Result<::windows::UI::Core::CoreDispatcher> {
        let this = &::windows::core::Interface::cast::<super::super::IDependencyObject>(self)?;
        unsafe {
            let mut result__ = ::core::mem::MaybeUninit::zeroed();
            (::windows::core::Vtable::vtable(this).Dispatcher)(
                ::windows::core::Vtable::as_raw(this),
                result__.as_mut_ptr(),
            )
            .from_abi::<::windows::UI::Core::CoreDispatcher>(result__)
        }
    }
    #[doc = "*Required features: `\"UI_Dispatching\"`*"]
    #[cfg(feature = "UI_Dispatching")]
    pub fn DispatcherQueue(
        &self,
    ) -> ::windows::core::Result<super::super::super::Dispatching::DispatcherQueue> {
        let this = &::windows::core::Interface::cast::<super::super::IDependencyObject>(self)?;
        unsafe {
            let mut result__ = ::core::mem::MaybeUninit::zeroed();
            (::windows::core::Vtable::vtable(this).DispatcherQueue)(
                ::windows::core::Vtable::as_raw(this),
                result__.as_mut_ptr(),
            )
            .from_abi::<super::super::super::Dispatching::DispatcherQueue>(result__)
        }
    }
    pub fn Value(&self) -> ::windows::core::Result<f64> {
        let this = &::windows::core::Interface::cast::<IDoubleKeyFrame>(self)?;
        unsafe {
            let mut result__ = ::core::mem::MaybeUninit::zeroed();
            (::windows::core::Vtable::vtable(this).Value)(
                ::windows::core::Vtable::as_raw(this),
                result__.as_mut_ptr(),
            )
            .from_abi::<f64>(result__)
        }
    }
    pub fn SetValue2(&self, value: f64) -> ::windows::core::Result<()> {
        let this = &::windows::core::Interface::cast::<IDoubleKeyFrame>(self)?;
        unsafe {
            (::windows::core::Vtable::vtable(this).SetValue)(
                ::windows::core::Vtable::as_raw(this),
                value,
            )
            .ok()
        }
    }
    pub fn KeyTime(&self) -> ::windows::core::Result<KeyTime> {
        let this = &::windows::core::Interface::cast::<IDoubleKeyFrame>(self)?;
        unsafe {
            let mut result__ = ::core::mem::MaybeUninit::zeroed();
            (::windows::core::Vtable::vtable(this).KeyTime)(
                ::windows::core::Vtable::as_raw(this),
                result__.as_mut_ptr(),
            )
            .from_abi::<KeyTime>(result__)
        }
    }
    pub fn SetKeyTime(&self, value: KeyTime) -> ::windows::core::Result<()> {
        let this = &::windows::core::Interface::cast::<IDoubleKeyFrame>(self)?;
        unsafe {
            (::windows::core::Vtable::vtable(this).SetKeyTime)(
                ::windows::core::Vtable::as_raw(this),
                value,
            )
            .ok()
        }
    }
}
impl ::core::clone::Clone for DiscreteDoubleKeyFrame {
    fn clone(&self) -> Self {
        Self(self.0.clone())
    }
}
impl ::core::cmp::PartialEq for DiscreteDoubleKeyFrame {
    fn eq(&self, other: &Self) -> bool {
        self.0 == other.0
    }
}
impl ::core::cmp::Eq for DiscreteDoubleKeyFrame {}
impl ::core::fmt::Debug for DiscreteDoubleKeyFrame {
    fn fmt(&self, f: &mut ::core::fmt::Formatter<'_>) -> ::core::fmt::Result {
        f.debug_tuple("DiscreteDoubleKeyFrame").field(&self.0).finish()
    }
}
unsafe impl ::windows::core::RuntimeType for DiscreteDoubleKeyFrame {
    const SIGNATURE : ::windows::core::ConstBuffer = ::windows::core::ConstBuffer::from_slice ( b"rc(Microsoft.UI.Xaml.Media.Animation.DiscreteDoubleKeyFrame;{ec16a555-c083-5a18-805b-a14b90bc80e2})" ) ;
    type DefaultType = ::core::option::Option<Self>;
    fn from_default(from: &Self::DefaultType) -> ::windows::core::Result<Self> {
        from.as_ref().cloned().ok_or(::windows::core::Error::OK)
    }
}
unsafe impl ::windows::core::Vtable for DiscreteDoubleKeyFrame {
    type Vtable = IDiscreteDoubleKeyFrame_Vtbl;
}
unsafe impl ::windows::core::Interface for DiscreteDoubleKeyFrame {
    const IID: ::windows::core::GUID = <IDiscreteDoubleKeyFrame as ::windows::core::Interface>::IID;
}
impl ::windows::core::RuntimeName for DiscreteDoubleKeyFrame {
    const NAME: &'static str = "Microsoft.UI.Xaml.Media.Animation.DiscreteDoubleKeyFrame";
}
::windows::core::interface_hierarchy!(
    DiscreteDoubleKeyFrame,
    ::windows::core::IUnknown,
    ::windows::core::IInspectable
);
impl ::core::convert::From<DiscreteDoubleKeyFrame> for DoubleKeyFrame {
    fn from(value: DiscreteDoubleKeyFrame) -> Self {
        ::core::convert::From::from(&value)
    }
}
impl ::core::convert::From<&DiscreteDoubleKeyFrame> for DoubleKeyFrame {
    fn from(value: &DiscreteDoubleKeyFrame) -> Self {
        ::windows::core::Interface::cast(value).unwrap()
    }
}
impl<'a> ::core::convert::From<&DiscreteDoubleKeyFrame>
    for ::windows::core::InParam<'a, DoubleKeyFrame>
{
    fn from(value: &DiscreteDoubleKeyFrame) -> Self {
        ::windows::core::InParam::owned(value.into())
    }
}
impl ::core::convert::From<DiscreteDoubleKeyFrame> for super::super::DependencyObject {
    fn from(value: DiscreteDoubleKeyFrame) -> Self {
        ::core::convert::From::from(&value)
    }
}
impl ::core::convert::From<&DiscreteDoubleKeyFrame> for super::super::DependencyObject {
    fn from(value: &DiscreteDoubleKeyFrame) -> Self {
        ::windows::core::Interface::cast(value).unwrap()
    }
}
impl<'a> ::core::convert::From<&DiscreteDoubleKeyFrame>
    for ::windows::core::InParam<'a, super::super::DependencyObject>
{
    fn from(value: &DiscreteDoubleKeyFrame) -> Self {
        ::windows::core::InParam::owned(value.into())
    }
}
unsafe impl ::core::marker::Send for DiscreteDoubleKeyFrame {}
unsafe impl ::core::marker::Sync for DiscreteDoubleKeyFrame {}
#[doc = "*Required features: `\"UI_Xaml_Media_Animation\"`*"]
#[repr(transparent)]
pub struct DiscreteObjectKeyFrame(::windows::core::IUnknown);
impl DiscreteObjectKeyFrame {
    pub fn new() -> ::windows::core::Result<Self> {
        Self::IActivationFactory(|f| f.ActivateInstance::<Self>())
    }
    fn IActivationFactory<
        R,
        F: FnOnce(&::windows::core::IGenericFactory) -> ::windows::core::Result<R>,
    >(
        callback: F,
    ) -> ::windows::core::Result<R> {
        static SHARED: ::windows::core::FactoryCache<
            DiscreteObjectKeyFrame,
            ::windows::core::IGenericFactory,
        > = ::windows::core::FactoryCache::new();
        SHARED.call(callback)
    }
    pub fn GetValue(
        &self,
        dp: &super::super::DependencyProperty,
    ) -> ::windows::core::Result<::windows::core::IInspectable> {
        let this = &::windows::core::Interface::cast::<super::super::IDependencyObject>(self)?;
        unsafe {
            let mut result__ = ::core::mem::MaybeUninit::zeroed();
            (::windows::core::Vtable::vtable(this).GetValue)(
                ::windows::core::Vtable::as_raw(this),
                ::core::mem::transmute_copy(dp),
                result__.as_mut_ptr(),
            )
            .from_abi::<::windows::core::IInspectable>(result__)
        }
    }
    pub fn SetValue<'a, P0>(
        &self,
        dp: &super::super::DependencyProperty,
        value: P0,
    ) -> ::windows::core::Result<()>
    where
        P0: ::std::convert::Into<::windows::core::InParam<'a, ::windows::core::IInspectable>>,
    {
        let this = &::windows::core::Interface::cast::<super::super::IDependencyObject>(self)?;
        unsafe {
            (::windows::core::Vtable::vtable(this).SetValue)(
                ::windows::core::Vtable::as_raw(this),
                ::core::mem::transmute_copy(dp),
                value.into().abi(),
            )
            .ok()
        }
    }
    pub fn ClearValue(&self, dp: &super::super::DependencyProperty) -> ::windows::core::Result<()> {
        let this = &::windows::core::Interface::cast::<super::super::IDependencyObject>(self)?;
        unsafe {
            (::windows::core::Vtable::vtable(this).ClearValue)(
                ::windows::core::Vtable::as_raw(this),
                ::core::mem::transmute_copy(dp),
            )
            .ok()
        }
    }
    pub fn ReadLocalValue(
        &self,
        dp: &super::super::DependencyProperty,
    ) -> ::windows::core::Result<::windows::core::IInspectable> {
        let this = &::windows::core::Interface::cast::<super::super::IDependencyObject>(self)?;
        unsafe {
            let mut result__ = ::core::mem::MaybeUninit::zeroed();
            (::windows::core::Vtable::vtable(this).ReadLocalValue)(
                ::windows::core::Vtable::as_raw(this),
                ::core::mem::transmute_copy(dp),
                result__.as_mut_ptr(),
            )
            .from_abi::<::windows::core::IInspectable>(result__)
        }
    }
    pub fn GetAnimationBaseValue(
        &self,
        dp: &super::super::DependencyProperty,
    ) -> ::windows::core::Result<::windows::core::IInspectable> {
        let this = &::windows::core::Interface::cast::<super::super::IDependencyObject>(self)?;
        unsafe {
            let mut result__ = ::core::mem::MaybeUninit::zeroed();
            (::windows::core::Vtable::vtable(this).GetAnimationBaseValue)(
                ::windows::core::Vtable::as_raw(this),
                ::core::mem::transmute_copy(dp),
                result__.as_mut_ptr(),
            )
            .from_abi::<::windows::core::IInspectable>(result__)
        }
    }
    pub fn RegisterPropertyChangedCallback(
        &self,
        dp: &super::super::DependencyProperty,
        callback: &super::super::DependencyPropertyChangedCallback,
    ) -> ::windows::core::Result<i64> {
        let this = &::windows::core::Interface::cast::<super::super::IDependencyObject>(self)?;
        unsafe {
            let mut result__ = ::core::mem::MaybeUninit::zeroed();
            (::windows::core::Vtable::vtable(this).RegisterPropertyChangedCallback)(
                ::windows::core::Vtable::as_raw(this),
                ::core::mem::transmute_copy(dp),
                ::core::mem::transmute_copy(callback),
                result__.as_mut_ptr(),
            )
            .from_abi::<i64>(result__)
        }
    }
    pub fn UnregisterPropertyChangedCallback(
        &self,
        dp: &super::super::DependencyProperty,
        token: i64,
    ) -> ::windows::core::Result<()> {
        let this = &::windows::core::Interface::cast::<super::super::IDependencyObject>(self)?;
        unsafe {
            (::windows::core::Vtable::vtable(this).UnregisterPropertyChangedCallback)(
                ::windows::core::Vtable::as_raw(this),
                ::core::mem::transmute_copy(dp),
                token,
            )
            .ok()
        }
    }
    pub fn Dispatcher(&self) -> ::windows::core::Result<::windows::UI::Core::CoreDispatcher> {
        let this = &::windows::core::Interface::cast::<super::super::IDependencyObject>(self)?;
        unsafe {
            let mut result__ = ::core::mem::MaybeUninit::zeroed();
            (::windows::core::Vtable::vtable(this).Dispatcher)(
                ::windows::core::Vtable::as_raw(this),
                result__.as_mut_ptr(),
            )
            .from_abi::<::windows::UI::Core::CoreDispatcher>(result__)
        }
    }
    #[doc = "*Required features: `\"UI_Dispatching\"`*"]
    #[cfg(feature = "UI_Dispatching")]
    pub fn DispatcherQueue(
        &self,
    ) -> ::windows::core::Result<super::super::super::Dispatching::DispatcherQueue> {
        let this = &::windows::core::Interface::cast::<super::super::IDependencyObject>(self)?;
        unsafe {
            let mut result__ = ::core::mem::MaybeUninit::zeroed();
            (::windows::core::Vtable::vtable(this).DispatcherQueue)(
                ::windows::core::Vtable::as_raw(this),
                result__.as_mut_ptr(),
            )
            .from_abi::<super::super::super::Dispatching::DispatcherQueue>(result__)
        }
    }
    pub fn Value(&self) -> ::windows::core::Result<::windows::core::IInspectable> {
        let this = &::windows::core::Interface::cast::<IObjectKeyFrame>(self)?;
        unsafe {
            let mut result__ = ::core::mem::MaybeUninit::zeroed();
            (::windows::core::Vtable::vtable(this).Value)(
                ::windows::core::Vtable::as_raw(this),
                result__.as_mut_ptr(),
            )
            .from_abi::<::windows::core::IInspectable>(result__)
        }
    }
    pub fn SetValue2<'a, P0>(&self, value: P0) -> ::windows::core::Result<()>
    where
        P0: ::std::convert::Into<::windows::core::InParam<'a, ::windows::core::IInspectable>>,
    {
        let this = &::windows::core::Interface::cast::<IObjectKeyFrame>(self)?;
        unsafe {
            (::windows::core::Vtable::vtable(this).SetValue)(
                ::windows::core::Vtable::as_raw(this),
                value.into().abi(),
            )
            .ok()
        }
    }
    pub fn KeyTime(&self) -> ::windows::core::Result<KeyTime> {
        let this = &::windows::core::Interface::cast::<IObjectKeyFrame>(self)?;
        unsafe {
            let mut result__ = ::core::mem::MaybeUninit::zeroed();
            (::windows::core::Vtable::vtable(this).KeyTime)(
                ::windows::core::Vtable::as_raw(this),
                result__.as_mut_ptr(),
            )
            .from_abi::<KeyTime>(result__)
        }
    }
    pub fn SetKeyTime(&self, value: KeyTime) -> ::windows::core::Result<()> {
        let this = &::windows::core::Interface::cast::<IObjectKeyFrame>(self)?;
        unsafe {
            (::windows::core::Vtable::vtable(this).SetKeyTime)(
                ::windows::core::Vtable::as_raw(this),
                value,
            )
            .ok()
        }
    }
}
impl ::core::clone::Clone for DiscreteObjectKeyFrame {
    fn clone(&self) -> Self {
        Self(self.0.clone())
    }
}
impl ::core::cmp::PartialEq for DiscreteObjectKeyFrame {
    fn eq(&self, other: &Self) -> bool {
        self.0 == other.0
    }
}
impl ::core::cmp::Eq for DiscreteObjectKeyFrame {}
impl ::core::fmt::Debug for DiscreteObjectKeyFrame {
    fn fmt(&self, f: &mut ::core::fmt::Formatter<'_>) -> ::core::fmt::Result {
        f.debug_tuple("DiscreteObjectKeyFrame").field(&self.0).finish()
    }
}
unsafe impl ::windows::core::RuntimeType for DiscreteObjectKeyFrame {
    const SIGNATURE : ::windows::core::ConstBuffer = ::windows::core::ConstBuffer::from_slice ( b"rc(Microsoft.UI.Xaml.Media.Animation.DiscreteObjectKeyFrame;{542fa813-6892-559d-9f69-1f2ac666af13})" ) ;
    type DefaultType = ::core::option::Option<Self>;
    fn from_default(from: &Self::DefaultType) -> ::windows::core::Result<Self> {
        from.as_ref().cloned().ok_or(::windows::core::Error::OK)
    }
}
unsafe impl ::windows::core::Vtable for DiscreteObjectKeyFrame {
    type Vtable = IDiscreteObjectKeyFrame_Vtbl;
}
unsafe impl ::windows::core::Interface for DiscreteObjectKeyFrame {
    const IID: ::windows::core::GUID = <IDiscreteObjectKeyFrame as ::windows::core::Interface>::IID;
}
impl ::windows::core::RuntimeName for DiscreteObjectKeyFrame {
    const NAME: &'static str = "Microsoft.UI.Xaml.Media.Animation.DiscreteObjectKeyFrame";
}
::windows::core::interface_hierarchy!(
    DiscreteObjectKeyFrame,
    ::windows::core::IUnknown,
    ::windows::core::IInspectable
);
impl ::core::convert::From<DiscreteObjectKeyFrame> for ObjectKeyFrame {
    fn from(value: DiscreteObjectKeyFrame) -> Self {
        ::core::convert::From::from(&value)
    }
}
impl ::core::convert::From<&DiscreteObjectKeyFrame> for ObjectKeyFrame {
    fn from(value: &DiscreteObjectKeyFrame) -> Self {
        ::windows::core::Interface::cast(value).unwrap()
    }
}
impl<'a> ::core::convert::From<&DiscreteObjectKeyFrame>
    for ::windows::core::InParam<'a, ObjectKeyFrame>
{
    fn from(value: &DiscreteObjectKeyFrame) -> Self {
        ::windows::core::InParam::owned(value.into())
    }
}
impl ::core::convert::From<DiscreteObjectKeyFrame> for super::super::DependencyObject {
    fn from(value: DiscreteObjectKeyFrame) -> Self {
        ::core::convert::From::from(&value)
    }
}
impl ::core::convert::From<&DiscreteObjectKeyFrame> for super::super::DependencyObject {
    fn from(value: &DiscreteObjectKeyFrame) -> Self {
        ::windows::core::Interface::cast(value).unwrap()
    }
}
impl<'a> ::core::convert::From<&DiscreteObjectKeyFrame>
    for ::windows::core::InParam<'a, super::super::DependencyObject>
{
    fn from(value: &DiscreteObjectKeyFrame) -> Self {
        ::windows::core::InParam::owned(value.into())
    }
}
unsafe impl ::core::marker::Send for DiscreteObjectKeyFrame {}
unsafe impl ::core::marker::Sync for DiscreteObjectKeyFrame {}
#[doc = "*Required features: `\"UI_Xaml_Media_Animation\"`*"]
#[repr(transparent)]
pub struct DiscretePointKeyFrame(::windows::core::IUnknown);
impl DiscretePointKeyFrame {
    pub fn new() -> ::windows::core::Result<Self> {
        Self::IActivationFactory(|f| f.ActivateInstance::<Self>())
    }
    fn IActivationFactory<
        R,
        F: FnOnce(&::windows::core::IGenericFactory) -> ::windows::core::Result<R>,
    >(
        callback: F,
    ) -> ::windows::core::Result<R> {
        static SHARED: ::windows::core::FactoryCache<
            DiscretePointKeyFrame,
            ::windows::core::IGenericFactory,
        > = ::windows::core::FactoryCache::new();
        SHARED.call(callback)
    }
    pub fn GetValue(
        &self,
        dp: &super::super::DependencyProperty,
    ) -> ::windows::core::Result<::windows::core::IInspectable> {
        let this = &::windows::core::Interface::cast::<super::super::IDependencyObject>(self)?;
        unsafe {
            let mut result__ = ::core::mem::MaybeUninit::zeroed();
            (::windows::core::Vtable::vtable(this).GetValue)(
                ::windows::core::Vtable::as_raw(this),
                ::core::mem::transmute_copy(dp),
                result__.as_mut_ptr(),
            )
            .from_abi::<::windows::core::IInspectable>(result__)
        }
    }
    pub fn SetValue<'a, P0>(
        &self,
        dp: &super::super::DependencyProperty,
        value: P0,
    ) -> ::windows::core::Result<()>
    where
        P0: ::std::convert::Into<::windows::core::InParam<'a, ::windows::core::IInspectable>>,
    {
        let this = &::windows::core::Interface::cast::<super::super::IDependencyObject>(self)?;
        unsafe {
            (::windows::core::Vtable::vtable(this).SetValue)(
                ::windows::core::Vtable::as_raw(this),
                ::core::mem::transmute_copy(dp),
                value.into().abi(),
            )
            .ok()
        }
    }
    pub fn ClearValue(&self, dp: &super::super::DependencyProperty) -> ::windows::core::Result<()> {
        let this = &::windows::core::Interface::cast::<super::super::IDependencyObject>(self)?;
        unsafe {
            (::windows::core::Vtable::vtable(this).ClearValue)(
                ::windows::core::Vtable::as_raw(this),
                ::core::mem::transmute_copy(dp),
            )
            .ok()
        }
    }
    pub fn ReadLocalValue(
        &self,
        dp: &super::super::DependencyProperty,
    ) -> ::windows::core::Result<::windows::core::IInspectable> {
        let this = &::windows::core::Interface::cast::<super::super::IDependencyObject>(self)?;
        unsafe {
            let mut result__ = ::core::mem::MaybeUninit::zeroed();
            (::windows::core::Vtable::vtable(this).ReadLocalValue)(
                ::windows::core::Vtable::as_raw(this),
                ::core::mem::transmute_copy(dp),
                result__.as_mut_ptr(),
            )
            .from_abi::<::windows::core::IInspectable>(result__)
        }
    }
    pub fn GetAnimationBaseValue(
        &self,
        dp: &super::super::DependencyProperty,
    ) -> ::windows::core::Result<::windows::core::IInspectable> {
        let this = &::windows::core::Interface::cast::<super::super::IDependencyObject>(self)?;
        unsafe {
            let mut result__ = ::core::mem::MaybeUninit::zeroed();
            (::windows::core::Vtable::vtable(this).GetAnimationBaseValue)(
                ::windows::core::Vtable::as_raw(this),
                ::core::mem::transmute_copy(dp),
                result__.as_mut_ptr(),
            )
            .from_abi::<::windows::core::IInspectable>(result__)
        }
    }
    pub fn RegisterPropertyChangedCallback(
        &self,
        dp: &super::super::DependencyProperty,
        callback: &super::super::DependencyPropertyChangedCallback,
    ) -> ::windows::core::Result<i64> {
        let this = &::windows::core::Interface::cast::<super::super::IDependencyObject>(self)?;
        unsafe {
            let mut result__ = ::core::mem::MaybeUninit::zeroed();
            (::windows::core::Vtable::vtable(this).RegisterPropertyChangedCallback)(
                ::windows::core::Vtable::as_raw(this),
                ::core::mem::transmute_copy(dp),
                ::core::mem::transmute_copy(callback),
                result__.as_mut_ptr(),
            )
            .from_abi::<i64>(result__)
        }
    }
    pub fn UnregisterPropertyChangedCallback(
        &self,
        dp: &super::super::DependencyProperty,
        token: i64,
    ) -> ::windows::core::Result<()> {
        let this = &::windows::core::Interface::cast::<super::super::IDependencyObject>(self)?;
        unsafe {
            (::windows::core::Vtable::vtable(this).UnregisterPropertyChangedCallback)(
                ::windows::core::Vtable::as_raw(this),
                ::core::mem::transmute_copy(dp),
                token,
            )
            .ok()
        }
    }
    pub fn Dispatcher(&self) -> ::windows::core::Result<::windows::UI::Core::CoreDispatcher> {
        let this = &::windows::core::Interface::cast::<super::super::IDependencyObject>(self)?;
        unsafe {
            let mut result__ = ::core::mem::MaybeUninit::zeroed();
            (::windows::core::Vtable::vtable(this).Dispatcher)(
                ::windows::core::Vtable::as_raw(this),
                result__.as_mut_ptr(),
            )
            .from_abi::<::windows::UI::Core::CoreDispatcher>(result__)
        }
    }
    #[doc = "*Required features: `\"UI_Dispatching\"`*"]
    #[cfg(feature = "UI_Dispatching")]
    pub fn DispatcherQueue(
        &self,
    ) -> ::windows::core::Result<super::super::super::Dispatching::DispatcherQueue> {
        let this = &::windows::core::Interface::cast::<super::super::IDependencyObject>(self)?;
        unsafe {
            let mut result__ = ::core::mem::MaybeUninit::zeroed();
            (::windows::core::Vtable::vtable(this).DispatcherQueue)(
                ::windows::core::Vtable::as_raw(this),
                result__.as_mut_ptr(),
            )
            .from_abi::<super::super::super::Dispatching::DispatcherQueue>(result__)
        }
    }
    pub fn Value(&self) -> ::windows::core::Result<::windows::Foundation::Point> {
        let this = &::windows::core::Interface::cast::<IPointKeyFrame>(self)?;
        unsafe {
            let mut result__ = ::core::mem::MaybeUninit::zeroed();
            (::windows::core::Vtable::vtable(this).Value)(
                ::windows::core::Vtable::as_raw(this),
                result__.as_mut_ptr(),
            )
            .from_abi::<::windows::Foundation::Point>(result__)
        }
    }
    pub fn SetValue2(&self, value: ::windows::Foundation::Point) -> ::windows::core::Result<()> {
        let this = &::windows::core::Interface::cast::<IPointKeyFrame>(self)?;
        unsafe {
            (::windows::core::Vtable::vtable(this).SetValue)(
                ::windows::core::Vtable::as_raw(this),
                value,
            )
            .ok()
        }
    }
    pub fn KeyTime(&self) -> ::windows::core::Result<KeyTime> {
        let this = &::windows::core::Interface::cast::<IPointKeyFrame>(self)?;
        unsafe {
            let mut result__ = ::core::mem::MaybeUninit::zeroed();
            (::windows::core::Vtable::vtable(this).KeyTime)(
                ::windows::core::Vtable::as_raw(this),
                result__.as_mut_ptr(),
            )
            .from_abi::<KeyTime>(result__)
        }
    }
    pub fn SetKeyTime(&self, value: KeyTime) -> ::windows::core::Result<()> {
        let this = &::windows::core::Interface::cast::<IPointKeyFrame>(self)?;
        unsafe {
            (::windows::core::Vtable::vtable(this).SetKeyTime)(
                ::windows::core::Vtable::as_raw(this),
                value,
            )
            .ok()
        }
    }
}
impl ::core::clone::Clone for DiscretePointKeyFrame {
    fn clone(&self) -> Self {
        Self(self.0.clone())
    }
}
impl ::core::cmp::PartialEq for DiscretePointKeyFrame {
    fn eq(&self, other: &Self) -> bool {
        self.0 == other.0
    }
}
impl ::core::cmp::Eq for DiscretePointKeyFrame {}
impl ::core::fmt::Debug for DiscretePointKeyFrame {
    fn fmt(&self, f: &mut ::core::fmt::Formatter<'_>) -> ::core::fmt::Result {
        f.debug_tuple("DiscretePointKeyFrame").field(&self.0).finish()
    }
}
unsafe impl ::windows::core::RuntimeType for DiscretePointKeyFrame {
    const SIGNATURE : ::windows::core::ConstBuffer = ::windows::core::ConstBuffer::from_slice ( b"rc(Microsoft.UI.Xaml.Media.Animation.DiscretePointKeyFrame;{2255a291-007e-57ce-aa53-97d1e4a0d7e2})" ) ;
    type DefaultType = ::core::option::Option<Self>;
    fn from_default(from: &Self::DefaultType) -> ::windows::core::Result<Self> {
        from.as_ref().cloned().ok_or(::windows::core::Error::OK)
    }
}
unsafe impl ::windows::core::Vtable for DiscretePointKeyFrame {
    type Vtable = IDiscretePointKeyFrame_Vtbl;
}
unsafe impl ::windows::core::Interface for DiscretePointKeyFrame {
    const IID: ::windows::core::GUID = <IDiscretePointKeyFrame as ::windows::core::Interface>::IID;
}
impl ::windows::core::RuntimeName for DiscretePointKeyFrame {
    const NAME: &'static str = "Microsoft.UI.Xaml.Media.Animation.DiscretePointKeyFrame";
}
::windows::core::interface_hierarchy!(
    DiscretePointKeyFrame,
    ::windows::core::IUnknown,
    ::windows::core::IInspectable
);
impl ::core::convert::From<DiscretePointKeyFrame> for PointKeyFrame {
    fn from(value: DiscretePointKeyFrame) -> Self {
        ::core::convert::From::from(&value)
    }
}
impl ::core::convert::From<&DiscretePointKeyFrame> for PointKeyFrame {
    fn from(value: &DiscretePointKeyFrame) -> Self {
        ::windows::core::Interface::cast(value).unwrap()
    }
}
impl<'a> ::core::convert::From<&DiscretePointKeyFrame>
    for ::windows::core::InParam<'a, PointKeyFrame>
{
    fn from(value: &DiscretePointKeyFrame) -> Self {
        ::windows::core::InParam::owned(value.into())
    }
}
impl ::core::convert::From<DiscretePointKeyFrame> for super::super::DependencyObject {
    fn from(value: DiscretePointKeyFrame) -> Self {
        ::core::convert::From::from(&value)
    }
}
impl ::core::convert::From<&DiscretePointKeyFrame> for super::super::DependencyObject {
    fn from(value: &DiscretePointKeyFrame) -> Self {
        ::windows::core::Interface::cast(value).unwrap()
    }
}
impl<'a> ::core::convert::From<&DiscretePointKeyFrame>
    for ::windows::core::InParam<'a, super::super::DependencyObject>
{
    fn from(value: &DiscretePointKeyFrame) -> Self {
        ::windows::core::InParam::owned(value.into())
    }
}
unsafe impl ::core::marker::Send for DiscretePointKeyFrame {}
unsafe impl ::core::marker::Sync for DiscretePointKeyFrame {}
#[doc = "*Required features: `\"UI_Xaml_Media_Animation\"`*"]
#[repr(transparent)]
pub struct DoubleAnimation(::windows::core::IUnknown);
impl DoubleAnimation {
    pub fn new() -> ::windows::core::Result<Self> {
        Self::IActivationFactory(|f| f.ActivateInstance::<Self>())
    }
    fn IActivationFactory<
        R,
        F: FnOnce(&::windows::core::IGenericFactory) -> ::windows::core::Result<R>,
    >(
        callback: F,
    ) -> ::windows::core::Result<R> {
        static SHARED: ::windows::core::FactoryCache<
            DoubleAnimation,
            ::windows::core::IGenericFactory,
        > = ::windows::core::FactoryCache::new();
        SHARED.call(callback)
    }
    pub fn GetValue(
        &self,
        dp: &super::super::DependencyProperty,
    ) -> ::windows::core::Result<::windows::core::IInspectable> {
        let this = &::windows::core::Interface::cast::<super::super::IDependencyObject>(self)?;
        unsafe {
            let mut result__ = ::core::mem::MaybeUninit::zeroed();
            (::windows::core::Vtable::vtable(this).GetValue)(
                ::windows::core::Vtable::as_raw(this),
                ::core::mem::transmute_copy(dp),
                result__.as_mut_ptr(),
            )
            .from_abi::<::windows::core::IInspectable>(result__)
        }
    }
    pub fn SetValue<'a, P0>(
        &self,
        dp: &super::super::DependencyProperty,
        value: P0,
    ) -> ::windows::core::Result<()>
    where
        P0: ::std::convert::Into<::windows::core::InParam<'a, ::windows::core::IInspectable>>,
    {
        let this = &::windows::core::Interface::cast::<super::super::IDependencyObject>(self)?;
        unsafe {
            (::windows::core::Vtable::vtable(this).SetValue)(
                ::windows::core::Vtable::as_raw(this),
                ::core::mem::transmute_copy(dp),
                value.into().abi(),
            )
            .ok()
        }
    }
    pub fn ClearValue(&self, dp: &super::super::DependencyProperty) -> ::windows::core::Result<()> {
        let this = &::windows::core::Interface::cast::<super::super::IDependencyObject>(self)?;
        unsafe {
            (::windows::core::Vtable::vtable(this).ClearValue)(
                ::windows::core::Vtable::as_raw(this),
                ::core::mem::transmute_copy(dp),
            )
            .ok()
        }
    }
    pub fn ReadLocalValue(
        &self,
        dp: &super::super::DependencyProperty,
    ) -> ::windows::core::Result<::windows::core::IInspectable> {
        let this = &::windows::core::Interface::cast::<super::super::IDependencyObject>(self)?;
        unsafe {
            let mut result__ = ::core::mem::MaybeUninit::zeroed();
            (::windows::core::Vtable::vtable(this).ReadLocalValue)(
                ::windows::core::Vtable::as_raw(this),
                ::core::mem::transmute_copy(dp),
                result__.as_mut_ptr(),
            )
            .from_abi::<::windows::core::IInspectable>(result__)
        }
    }
    pub fn GetAnimationBaseValue(
        &self,
        dp: &super::super::DependencyProperty,
    ) -> ::windows::core::Result<::windows::core::IInspectable> {
        let this = &::windows::core::Interface::cast::<super::super::IDependencyObject>(self)?;
        unsafe {
            let mut result__ = ::core::mem::MaybeUninit::zeroed();
            (::windows::core::Vtable::vtable(this).GetAnimationBaseValue)(
                ::windows::core::Vtable::as_raw(this),
                ::core::mem::transmute_copy(dp),
                result__.as_mut_ptr(),
            )
            .from_abi::<::windows::core::IInspectable>(result__)
        }
    }
    pub fn RegisterPropertyChangedCallback(
        &self,
        dp: &super::super::DependencyProperty,
        callback: &super::super::DependencyPropertyChangedCallback,
    ) -> ::windows::core::Result<i64> {
        let this = &::windows::core::Interface::cast::<super::super::IDependencyObject>(self)?;
        unsafe {
            let mut result__ = ::core::mem::MaybeUninit::zeroed();
            (::windows::core::Vtable::vtable(this).RegisterPropertyChangedCallback)(
                ::windows::core::Vtable::as_raw(this),
                ::core::mem::transmute_copy(dp),
                ::core::mem::transmute_copy(callback),
                result__.as_mut_ptr(),
            )
            .from_abi::<i64>(result__)
        }
    }
    pub fn UnregisterPropertyChangedCallback(
        &self,
        dp: &super::super::DependencyProperty,
        token: i64,
    ) -> ::windows::core::Result<()> {
        let this = &::windows::core::Interface::cast::<super::super::IDependencyObject>(self)?;
        unsafe {
            (::windows::core::Vtable::vtable(this).UnregisterPropertyChangedCallback)(
                ::windows::core::Vtable::as_raw(this),
                ::core::mem::transmute_copy(dp),
                token,
            )
            .ok()
        }
    }
    pub fn Dispatcher(&self) -> ::windows::core::Result<::windows::UI::Core::CoreDispatcher> {
        let this = &::windows::core::Interface::cast::<super::super::IDependencyObject>(self)?;
        unsafe {
            let mut result__ = ::core::mem::MaybeUninit::zeroed();
            (::windows::core::Vtable::vtable(this).Dispatcher)(
                ::windows::core::Vtable::as_raw(this),
                result__.as_mut_ptr(),
            )
            .from_abi::<::windows::UI::Core::CoreDispatcher>(result__)
        }
    }
    #[doc = "*Required features: `\"UI_Dispatching\"`*"]
    #[cfg(feature = "UI_Dispatching")]
    pub fn DispatcherQueue(
        &self,
    ) -> ::windows::core::Result<super::super::super::Dispatching::DispatcherQueue> {
        let this = &::windows::core::Interface::cast::<super::super::IDependencyObject>(self)?;
        unsafe {
            let mut result__ = ::core::mem::MaybeUninit::zeroed();
            (::windows::core::Vtable::vtable(this).DispatcherQueue)(
                ::windows::core::Vtable::as_raw(this),
                result__.as_mut_ptr(),
            )
            .from_abi::<super::super::super::Dispatching::DispatcherQueue>(result__)
        }
    }
    pub fn From(&self) -> ::windows::core::Result<::windows::Foundation::IReference<f64>> {
        let this = self;
        unsafe {
            let mut result__ = ::core::mem::MaybeUninit::zeroed();
            (::windows::core::Vtable::vtable(this).From)(
                ::windows::core::Vtable::as_raw(this),
                result__.as_mut_ptr(),
            )
            .from_abi::<::windows::Foundation::IReference<f64>>(result__)
        }
    }
    pub fn SetFrom<'a, P0, E0>(&self, value: P0) -> ::windows::core::Result<()>
    where
        P0: ::std::convert::TryInto<
            ::windows::core::InParam<'a, ::windows::Foundation::IReference<f64>>,
            Error = E0,
        >,
        E0: ::std::convert::Into<::windows::core::Error>,
    {
        let this = self;
        unsafe {
            (::windows::core::Vtable::vtable(this).SetFrom)(
                ::windows::core::Vtable::as_raw(this),
                value.try_into().map_err(|e| e.into())?.abi(),
            )
            .ok()
        }
    }
    pub fn To(&self) -> ::windows::core::Result<::windows::Foundation::IReference<f64>> {
        let this = self;
        unsafe {
            let mut result__ = ::core::mem::MaybeUninit::zeroed();
            (::windows::core::Vtable::vtable(this).To)(
                ::windows::core::Vtable::as_raw(this),
                result__.as_mut_ptr(),
            )
            .from_abi::<::windows::Foundation::IReference<f64>>(result__)
        }
    }
    pub fn SetTo<'a, P0, E0>(&self, value: P0) -> ::windows::core::Result<()>
    where
        P0: ::std::convert::TryInto<
            ::windows::core::InParam<'a, ::windows::Foundation::IReference<f64>>,
            Error = E0,
        >,
        E0: ::std::convert::Into<::windows::core::Error>,
    {
        let this = self;
        unsafe {
            (::windows::core::Vtable::vtable(this).SetTo)(
                ::windows::core::Vtable::as_raw(this),
                value.try_into().map_err(|e| e.into())?.abi(),
            )
            .ok()
        }
    }
    pub fn By(&self) -> ::windows::core::Result<::windows::Foundation::IReference<f64>> {
        let this = self;
        unsafe {
            let mut result__ = ::core::mem::MaybeUninit::zeroed();
            (::windows::core::Vtable::vtable(this).By)(
                ::windows::core::Vtable::as_raw(this),
                result__.as_mut_ptr(),
            )
            .from_abi::<::windows::Foundation::IReference<f64>>(result__)
        }
    }
    pub fn SetBy<'a, P0, E0>(&self, value: P0) -> ::windows::core::Result<()>
    where
        P0: ::std::convert::TryInto<
            ::windows::core::InParam<'a, ::windows::Foundation::IReference<f64>>,
            Error = E0,
        >,
        E0: ::std::convert::Into<::windows::core::Error>,
    {
        let this = self;
        unsafe {
            (::windows::core::Vtable::vtable(this).SetBy)(
                ::windows::core::Vtable::as_raw(this),
                value.try_into().map_err(|e| e.into())?.abi(),
            )
            .ok()
        }
    }
    pub fn EasingFunction(&self) -> ::windows::core::Result<EasingFunctionBase> {
        let this = self;
        unsafe {
            let mut result__ = ::core::mem::MaybeUninit::zeroed();
            (::windows::core::Vtable::vtable(this).EasingFunction)(
                ::windows::core::Vtable::as_raw(this),
                result__.as_mut_ptr(),
            )
            .from_abi::<EasingFunctionBase>(result__)
        }
    }
    pub fn SetEasingFunction<'a, P0>(&self, value: P0) -> ::windows::core::Result<()>
    where
        P0: ::std::convert::Into<::windows::core::InParam<'a, EasingFunctionBase>>,
    {
        let this = self;
        unsafe {
            (::windows::core::Vtable::vtable(this).SetEasingFunction)(
                ::windows::core::Vtable::as_raw(this),
                value.into().abi(),
            )
            .ok()
        }
    }
    pub fn EnableDependentAnimation(&self) -> ::windows::core::Result<bool> {
        let this = self;
        unsafe {
            let mut result__ = ::core::mem::MaybeUninit::zeroed();
            (::windows::core::Vtable::vtable(this).EnableDependentAnimation)(
                ::windows::core::Vtable::as_raw(this),
                result__.as_mut_ptr(),
            )
            .from_abi::<bool>(result__)
        }
    }
    pub fn SetEnableDependentAnimation(&self, value: bool) -> ::windows::core::Result<()> {
        let this = self;
        unsafe {
            (::windows::core::Vtable::vtable(this).SetEnableDependentAnimation)(
                ::windows::core::Vtable::as_raw(this),
                value,
            )
            .ok()
        }
    }
    pub fn FromProperty() -> ::windows::core::Result<super::super::DependencyProperty> {
        Self::IDoubleAnimationStatics(|this| unsafe {
            let mut result__ = ::core::mem::MaybeUninit::zeroed();
            (::windows::core::Vtable::vtable(this).FromProperty)(
                ::windows::core::Vtable::as_raw(this),
                result__.as_mut_ptr(),
            )
            .from_abi::<super::super::DependencyProperty>(result__)
        })
    }
    pub fn ToProperty() -> ::windows::core::Result<super::super::DependencyProperty> {
        Self::IDoubleAnimationStatics(|this| unsafe {
            let mut result__ = ::core::mem::MaybeUninit::zeroed();
            (::windows::core::Vtable::vtable(this).ToProperty)(
                ::windows::core::Vtable::as_raw(this),
                result__.as_mut_ptr(),
            )
            .from_abi::<super::super::DependencyProperty>(result__)
        })
    }
    pub fn ByProperty() -> ::windows::core::Result<super::super::DependencyProperty> {
        Self::IDoubleAnimationStatics(|this| unsafe {
            let mut result__ = ::core::mem::MaybeUninit::zeroed();
            (::windows::core::Vtable::vtable(this).ByProperty)(
                ::windows::core::Vtable::as_raw(this),
                result__.as_mut_ptr(),
            )
            .from_abi::<super::super::DependencyProperty>(result__)
        })
    }
    pub fn EasingFunctionProperty() -> ::windows::core::Result<super::super::DependencyProperty> {
        Self::IDoubleAnimationStatics(|this| unsafe {
            let mut result__ = ::core::mem::MaybeUninit::zeroed();
            (::windows::core::Vtable::vtable(this).EasingFunctionProperty)(
                ::windows::core::Vtable::as_raw(this),
                result__.as_mut_ptr(),
            )
            .from_abi::<super::super::DependencyProperty>(result__)
        })
    }
    pub fn EnableDependentAnimationProperty(
    ) -> ::windows::core::Result<super::super::DependencyProperty> {
        Self::IDoubleAnimationStatics(|this| unsafe {
            let mut result__ = ::core::mem::MaybeUninit::zeroed();
            (::windows::core::Vtable::vtable(this).EnableDependentAnimationProperty)(
                ::windows::core::Vtable::as_raw(this),
                result__.as_mut_ptr(),
            )
            .from_abi::<super::super::DependencyProperty>(result__)
        })
    }
    pub fn AutoReverse(&self) -> ::windows::core::Result<bool> {
        let this = &::windows::core::Interface::cast::<ITimeline>(self)?;
        unsafe {
            let mut result__ = ::core::mem::MaybeUninit::zeroed();
            (::windows::core::Vtable::vtable(this).AutoReverse)(
                ::windows::core::Vtable::as_raw(this),
                result__.as_mut_ptr(),
            )
            .from_abi::<bool>(result__)
        }
    }
    pub fn SetAutoReverse(&self, value: bool) -> ::windows::core::Result<()> {
        let this = &::windows::core::Interface::cast::<ITimeline>(self)?;
        unsafe {
            (::windows::core::Vtable::vtable(this).SetAutoReverse)(
                ::windows::core::Vtable::as_raw(this),
                value,
            )
            .ok()
        }
    }
    pub fn BeginTime(
        &self,
    ) -> ::windows::core::Result<::windows::Foundation::IReference<::windows::Foundation::TimeSpan>>
    {
        let this = &::windows::core::Interface::cast::<ITimeline>(self)?;
        unsafe {
            let mut result__ = ::core::mem::MaybeUninit::zeroed();
            (::windows::core::Vtable::vtable(this).BeginTime)(
                ::windows::core::Vtable::as_raw(this),
                result__.as_mut_ptr(),
            )
            .from_abi::<::windows::Foundation::IReference<::windows::Foundation::TimeSpan>>(
                result__,
            )
        }
    }
    pub fn SetBeginTime<'a, P0, E0>(&self, value: P0) -> ::windows::core::Result<()>
    where
        P0: ::std::convert::TryInto<
            ::windows::core::InParam<
                'a,
                ::windows::Foundation::IReference<::windows::Foundation::TimeSpan>,
            >,
            Error = E0,
        >,
        E0: ::std::convert::Into<::windows::core::Error>,
    {
        let this = &::windows::core::Interface::cast::<ITimeline>(self)?;
        unsafe {
            (::windows::core::Vtable::vtable(this).SetBeginTime)(
                ::windows::core::Vtable::as_raw(this),
                value.try_into().map_err(|e| e.into())?.abi(),
            )
            .ok()
        }
    }
    pub fn Duration(&self) -> ::windows::core::Result<super::super::Duration> {
        let this = &::windows::core::Interface::cast::<ITimeline>(self)?;
        unsafe {
            let mut result__ = ::core::mem::MaybeUninit::zeroed();
            (::windows::core::Vtable::vtable(this).Duration)(
                ::windows::core::Vtable::as_raw(this),
                result__.as_mut_ptr(),
            )
            .from_abi::<super::super::Duration>(result__)
        }
    }
    pub fn SetDuration(&self, value: super::super::Duration) -> ::windows::core::Result<()> {
        let this = &::windows::core::Interface::cast::<ITimeline>(self)?;
        unsafe {
            (::windows::core::Vtable::vtable(this).SetDuration)(
                ::windows::core::Vtable::as_raw(this),
                value,
            )
            .ok()
        }
    }
    pub fn SpeedRatio(&self) -> ::windows::core::Result<f64> {
        let this = &::windows::core::Interface::cast::<ITimeline>(self)?;
        unsafe {
            let mut result__ = ::core::mem::MaybeUninit::zeroed();
            (::windows::core::Vtable::vtable(this).SpeedRatio)(
                ::windows::core::Vtable::as_raw(this),
                result__.as_mut_ptr(),
            )
            .from_abi::<f64>(result__)
        }
    }
    pub fn SetSpeedRatio(&self, value: f64) -> ::windows::core::Result<()> {
        let this = &::windows::core::Interface::cast::<ITimeline>(self)?;
        unsafe {
            (::windows::core::Vtable::vtable(this).SetSpeedRatio)(
                ::windows::core::Vtable::as_raw(this),
                value,
            )
            .ok()
        }
    }
    pub fn FillBehavior(&self) -> ::windows::core::Result<FillBehavior> {
        let this = &::windows::core::Interface::cast::<ITimeline>(self)?;
        unsafe {
            let mut result__ = ::core::mem::MaybeUninit::zeroed();
            (::windows::core::Vtable::vtable(this).FillBehavior)(
                ::windows::core::Vtable::as_raw(this),
                result__.as_mut_ptr(),
            )
            .from_abi::<FillBehavior>(result__)
        }
    }
    pub fn SetFillBehavior(&self, value: FillBehavior) -> ::windows::core::Result<()> {
        let this = &::windows::core::Interface::cast::<ITimeline>(self)?;
        unsafe {
            (::windows::core::Vtable::vtable(this).SetFillBehavior)(
                ::windows::core::Vtable::as_raw(this),
                value,
            )
            .ok()
        }
    }
    pub fn RepeatBehavior(&self) -> ::windows::core::Result<RepeatBehavior> {
        let this = &::windows::core::Interface::cast::<ITimeline>(self)?;
        unsafe {
            let mut result__ = ::core::mem::MaybeUninit::zeroed();
            (::windows::core::Vtable::vtable(this).RepeatBehavior)(
                ::windows::core::Vtable::as_raw(this),
                result__.as_mut_ptr(),
            )
            .from_abi::<RepeatBehavior>(result__)
        }
    }
    pub fn SetRepeatBehavior(&self, value: RepeatBehavior) -> ::windows::core::Result<()> {
        let this = &::windows::core::Interface::cast::<ITimeline>(self)?;
        unsafe {
            (::windows::core::Vtable::vtable(this).SetRepeatBehavior)(
                ::windows::core::Vtable::as_raw(this),
                value,
            )
            .ok()
        }
    }
    pub fn Completed(
        &self,
        handler: &::windows::Foundation::EventHandler<::windows::core::IInspectable>,
    ) -> ::windows::core::Result<::windows::Foundation::EventRegistrationToken> {
        let this = &::windows::core::Interface::cast::<ITimeline>(self)?;
        unsafe {
            let mut result__ = ::core::mem::MaybeUninit::zeroed();
            (::windows::core::Vtable::vtable(this).Completed)(
                ::windows::core::Vtable::as_raw(this),
                ::core::mem::transmute_copy(handler),
                result__.as_mut_ptr(),
            )
            .from_abi::<::windows::Foundation::EventRegistrationToken>(result__)
        }
    }
    pub fn RemoveCompleted(
        &self,
        token: ::windows::Foundation::EventRegistrationToken,
    ) -> ::windows::core::Result<()> {
        let this = &::windows::core::Interface::cast::<ITimeline>(self)?;
        unsafe {
            (::windows::core::Vtable::vtable(this).RemoveCompleted)(
                ::windows::core::Vtable::as_raw(this),
                token,
            )
            .ok()
        }
    }
    #[doc(hidden)]
    pub fn IDoubleAnimationStatics<
        R,
        F: FnOnce(&IDoubleAnimationStatics) -> ::windows::core::Result<R>,
    >(
        callback: F,
    ) -> ::windows::core::Result<R> {
        static SHARED: ::windows::core::FactoryCache<DoubleAnimation, IDoubleAnimationStatics> =
            ::windows::core::FactoryCache::new();
        SHARED.call(callback)
    }
}
impl ::core::clone::Clone for DoubleAnimation {
    fn clone(&self) -> Self {
        Self(self.0.clone())
    }
}
impl ::core::cmp::PartialEq for DoubleAnimation {
    fn eq(&self, other: &Self) -> bool {
        self.0 == other.0
    }
}
impl ::core::cmp::Eq for DoubleAnimation {}
impl ::core::fmt::Debug for DoubleAnimation {
    fn fmt(&self, f: &mut ::core::fmt::Formatter<'_>) -> ::core::fmt::Result {
        f.debug_tuple("DoubleAnimation").field(&self.0).finish()
    }
}
unsafe impl ::windows::core::RuntimeType for DoubleAnimation {
    const SIGNATURE : ::windows::core::ConstBuffer = ::windows::core::ConstBuffer::from_slice ( b"rc(Microsoft.UI.Xaml.Media.Animation.DoubleAnimation;{651ec97e-e483-5985-aa0b-49cfb07432dd})" ) ;
    type DefaultType = ::core::option::Option<Self>;
    fn from_default(from: &Self::DefaultType) -> ::windows::core::Result<Self> {
        from.as_ref().cloned().ok_or(::windows::core::Error::OK)
    }
}
unsafe impl ::windows::core::Vtable for DoubleAnimation {
    type Vtable = IDoubleAnimation_Vtbl;
}
unsafe impl ::windows::core::Interface for DoubleAnimation {
    const IID: ::windows::core::GUID = <IDoubleAnimation as ::windows::core::Interface>::IID;
}
impl ::windows::core::RuntimeName for DoubleAnimation {
    const NAME: &'static str = "Microsoft.UI.Xaml.Media.Animation.DoubleAnimation";
}
::windows::core::interface_hierarchy!(
    DoubleAnimation,
    ::windows::core::IUnknown,
    ::windows::core::IInspectable
);
impl ::core::convert::From<DoubleAnimation> for Timeline {
    fn from(value: DoubleAnimation) -> Self {
        ::core::convert::From::from(&value)
    }
}
impl ::core::convert::From<&DoubleAnimation> for Timeline {
    fn from(value: &DoubleAnimation) -> Self {
        ::windows::core::Interface::cast(value).unwrap()
    }
}
impl<'a> ::core::convert::From<&DoubleAnimation> for ::windows::core::InParam<'a, Timeline> {
    fn from(value: &DoubleAnimation) -> Self {
        ::windows::core::InParam::owned(value.into())
    }
}
impl ::core::convert::From<DoubleAnimation> for super::super::DependencyObject {
    fn from(value: DoubleAnimation) -> Self {
        ::core::convert::From::from(&value)
    }
}
impl ::core::convert::From<&DoubleAnimation> for super::super::DependencyObject {
    fn from(value: &DoubleAnimation) -> Self {
        ::windows::core::Interface::cast(value).unwrap()
    }
}
impl<'a> ::core::convert::From<&DoubleAnimation>
    for ::windows::core::InParam<'a, super::super::DependencyObject>
{
    fn from(value: &DoubleAnimation) -> Self {
        ::windows::core::InParam::owned(value.into())
    }
}
unsafe impl ::core::marker::Send for DoubleAnimation {}
unsafe impl ::core::marker::Sync for DoubleAnimation {}
#[doc = "*Required features: `\"UI_Xaml_Media_Animation\"`*"]
#[repr(transparent)]
pub struct DoubleAnimationUsingKeyFrames(::windows::core::IUnknown);
impl DoubleAnimationUsingKeyFrames {
    pub fn new() -> ::windows::core::Result<Self> {
        Self::IActivationFactory(|f| f.ActivateInstance::<Self>())
    }
    fn IActivationFactory<
        R,
        F: FnOnce(&::windows::core::IGenericFactory) -> ::windows::core::Result<R>,
    >(
        callback: F,
    ) -> ::windows::core::Result<R> {
        static SHARED: ::windows::core::FactoryCache<
            DoubleAnimationUsingKeyFrames,
            ::windows::core::IGenericFactory,
        > = ::windows::core::FactoryCache::new();
        SHARED.call(callback)
    }
    pub fn GetValue(
        &self,
        dp: &super::super::DependencyProperty,
    ) -> ::windows::core::Result<::windows::core::IInspectable> {
        let this = &::windows::core::Interface::cast::<super::super::IDependencyObject>(self)?;
        unsafe {
            let mut result__ = ::core::mem::MaybeUninit::zeroed();
            (::windows::core::Vtable::vtable(this).GetValue)(
                ::windows::core::Vtable::as_raw(this),
                ::core::mem::transmute_copy(dp),
                result__.as_mut_ptr(),
            )
            .from_abi::<::windows::core::IInspectable>(result__)
        }
    }
    pub fn SetValue<'a, P0>(
        &self,
        dp: &super::super::DependencyProperty,
        value: P0,
    ) -> ::windows::core::Result<()>
    where
        P0: ::std::convert::Into<::windows::core::InParam<'a, ::windows::core::IInspectable>>,
    {
        let this = &::windows::core::Interface::cast::<super::super::IDependencyObject>(self)?;
        unsafe {
            (::windows::core::Vtable::vtable(this).SetValue)(
                ::windows::core::Vtable::as_raw(this),
                ::core::mem::transmute_copy(dp),
                value.into().abi(),
            )
            .ok()
        }
    }
    pub fn ClearValue(&self, dp: &super::super::DependencyProperty) -> ::windows::core::Result<()> {
        let this = &::windows::core::Interface::cast::<super::super::IDependencyObject>(self)?;
        unsafe {
            (::windows::core::Vtable::vtable(this).ClearValue)(
                ::windows::core::Vtable::as_raw(this),
                ::core::mem::transmute_copy(dp),
            )
            .ok()
        }
    }
    pub fn ReadLocalValue(
        &self,
        dp: &super::super::DependencyProperty,
    ) -> ::windows::core::Result<::windows::core::IInspectable> {
        let this = &::windows::core::Interface::cast::<super::super::IDependencyObject>(self)?;
        unsafe {
            let mut result__ = ::core::mem::MaybeUninit::zeroed();
            (::windows::core::Vtable::vtable(this).ReadLocalValue)(
                ::windows::core::Vtable::as_raw(this),
                ::core::mem::transmute_copy(dp),
                result__.as_mut_ptr(),
            )
            .from_abi::<::windows::core::IInspectable>(result__)
        }
    }
    pub fn GetAnimationBaseValue(
        &self,
        dp: &super::super::DependencyProperty,
    ) -> ::windows::core::Result<::windows::core::IInspectable> {
        let this = &::windows::core::Interface::cast::<super::super::IDependencyObject>(self)?;
        unsafe {
            let mut result__ = ::core::mem::MaybeUninit::zeroed();
            (::windows::core::Vtable::vtable(this).GetAnimationBaseValue)(
                ::windows::core::Vtable::as_raw(this),
                ::core::mem::transmute_copy(dp),
                result__.as_mut_ptr(),
            )
            .from_abi::<::windows::core::IInspectable>(result__)
        }
    }
    pub fn RegisterPropertyChangedCallback(
        &self,
        dp: &super::super::DependencyProperty,
        callback: &super::super::DependencyPropertyChangedCallback,
    ) -> ::windows::core::Result<i64> {
        let this = &::windows::core::Interface::cast::<super::super::IDependencyObject>(self)?;
        unsafe {
            let mut result__ = ::core::mem::MaybeUninit::zeroed();
            (::windows::core::Vtable::vtable(this).RegisterPropertyChangedCallback)(
                ::windows::core::Vtable::as_raw(this),
                ::core::mem::transmute_copy(dp),
                ::core::mem::transmute_copy(callback),
                result__.as_mut_ptr(),
            )
            .from_abi::<i64>(result__)
        }
    }
    pub fn UnregisterPropertyChangedCallback(
        &self,
        dp: &super::super::DependencyProperty,
        token: i64,
    ) -> ::windows::core::Result<()> {
        let this = &::windows::core::Interface::cast::<super::super::IDependencyObject>(self)?;
        unsafe {
            (::windows::core::Vtable::vtable(this).UnregisterPropertyChangedCallback)(
                ::windows::core::Vtable::as_raw(this),
                ::core::mem::transmute_copy(dp),
                token,
            )
            .ok()
        }
    }
    pub fn Dispatcher(&self) -> ::windows::core::Result<::windows::UI::Core::CoreDispatcher> {
        let this = &::windows::core::Interface::cast::<super::super::IDependencyObject>(self)?;
        unsafe {
            let mut result__ = ::core::mem::MaybeUninit::zeroed();
            (::windows::core::Vtable::vtable(this).Dispatcher)(
                ::windows::core::Vtable::as_raw(this),
                result__.as_mut_ptr(),
            )
            .from_abi::<::windows::UI::Core::CoreDispatcher>(result__)
        }
    }
    #[doc = "*Required features: `\"UI_Dispatching\"`*"]
    #[cfg(feature = "UI_Dispatching")]
    pub fn DispatcherQueue(
        &self,
    ) -> ::windows::core::Result<super::super::super::Dispatching::DispatcherQueue> {
        let this = &::windows::core::Interface::cast::<super::super::IDependencyObject>(self)?;
        unsafe {
            let mut result__ = ::core::mem::MaybeUninit::zeroed();
            (::windows::core::Vtable::vtable(this).DispatcherQueue)(
                ::windows::core::Vtable::as_raw(this),
                result__.as_mut_ptr(),
            )
            .from_abi::<super::super::super::Dispatching::DispatcherQueue>(result__)
        }
    }
    pub fn KeyFrames(&self) -> ::windows::core::Result<DoubleKeyFrameCollection> {
        let this = self;
        unsafe {
            let mut result__ = ::core::mem::MaybeUninit::zeroed();
            (::windows::core::Vtable::vtable(this).KeyFrames)(
                ::windows::core::Vtable::as_raw(this),
                result__.as_mut_ptr(),
            )
            .from_abi::<DoubleKeyFrameCollection>(result__)
        }
    }
    pub fn EnableDependentAnimation(&self) -> ::windows::core::Result<bool> {
        let this = self;
        unsafe {
            let mut result__ = ::core::mem::MaybeUninit::zeroed();
            (::windows::core::Vtable::vtable(this).EnableDependentAnimation)(
                ::windows::core::Vtable::as_raw(this),
                result__.as_mut_ptr(),
            )
            .from_abi::<bool>(result__)
        }
    }
    pub fn SetEnableDependentAnimation(&self, value: bool) -> ::windows::core::Result<()> {
        let this = self;
        unsafe {
            (::windows::core::Vtable::vtable(this).SetEnableDependentAnimation)(
                ::windows::core::Vtable::as_raw(this),
                value,
            )
            .ok()
        }
    }
    pub fn EnableDependentAnimationProperty(
    ) -> ::windows::core::Result<super::super::DependencyProperty> {
        Self::IDoubleAnimationUsingKeyFramesStatics(|this| unsafe {
            let mut result__ = ::core::mem::MaybeUninit::zeroed();
            (::windows::core::Vtable::vtable(this).EnableDependentAnimationProperty)(
                ::windows::core::Vtable::as_raw(this),
                result__.as_mut_ptr(),
            )
            .from_abi::<super::super::DependencyProperty>(result__)
        })
    }
    pub fn AutoReverse(&self) -> ::windows::core::Result<bool> {
        let this = &::windows::core::Interface::cast::<ITimeline>(self)?;
        unsafe {
            let mut result__ = ::core::mem::MaybeUninit::zeroed();
            (::windows::core::Vtable::vtable(this).AutoReverse)(
                ::windows::core::Vtable::as_raw(this),
                result__.as_mut_ptr(),
            )
            .from_abi::<bool>(result__)
        }
    }
    pub fn SetAutoReverse(&self, value: bool) -> ::windows::core::Result<()> {
        let this = &::windows::core::Interface::cast::<ITimeline>(self)?;
        unsafe {
            (::windows::core::Vtable::vtable(this).SetAutoReverse)(
                ::windows::core::Vtable::as_raw(this),
                value,
            )
            .ok()
        }
    }
    pub fn BeginTime(
        &self,
    ) -> ::windows::core::Result<::windows::Foundation::IReference<::windows::Foundation::TimeSpan>>
    {
        let this = &::windows::core::Interface::cast::<ITimeline>(self)?;
        unsafe {
            let mut result__ = ::core::mem::MaybeUninit::zeroed();
            (::windows::core::Vtable::vtable(this).BeginTime)(
                ::windows::core::Vtable::as_raw(this),
                result__.as_mut_ptr(),
            )
            .from_abi::<::windows::Foundation::IReference<::windows::Foundation::TimeSpan>>(
                result__,
            )
        }
    }
    pub fn SetBeginTime<'a, P0, E0>(&self, value: P0) -> ::windows::core::Result<()>
    where
        P0: ::std::convert::TryInto<
            ::windows::core::InParam<
                'a,
                ::windows::Foundation::IReference<::windows::Foundation::TimeSpan>,
            >,
            Error = E0,
        >,
        E0: ::std::convert::Into<::windows::core::Error>,
    {
        let this = &::windows::core::Interface::cast::<ITimeline>(self)?;
        unsafe {
            (::windows::core::Vtable::vtable(this).SetBeginTime)(
                ::windows::core::Vtable::as_raw(this),
                value.try_into().map_err(|e| e.into())?.abi(),
            )
            .ok()
        }
    }
    pub fn Duration(&self) -> ::windows::core::Result<super::super::Duration> {
        let this = &::windows::core::Interface::cast::<ITimeline>(self)?;
        unsafe {
            let mut result__ = ::core::mem::MaybeUninit::zeroed();
            (::windows::core::Vtable::vtable(this).Duration)(
                ::windows::core::Vtable::as_raw(this),
                result__.as_mut_ptr(),
            )
            .from_abi::<super::super::Duration>(result__)
        }
    }
    pub fn SetDuration(&self, value: super::super::Duration) -> ::windows::core::Result<()> {
        let this = &::windows::core::Interface::cast::<ITimeline>(self)?;
        unsafe {
            (::windows::core::Vtable::vtable(this).SetDuration)(
                ::windows::core::Vtable::as_raw(this),
                value,
            )
            .ok()
        }
    }
    pub fn SpeedRatio(&self) -> ::windows::core::Result<f64> {
        let this = &::windows::core::Interface::cast::<ITimeline>(self)?;
        unsafe {
            let mut result__ = ::core::mem::MaybeUninit::zeroed();
            (::windows::core::Vtable::vtable(this).SpeedRatio)(
                ::windows::core::Vtable::as_raw(this),
                result__.as_mut_ptr(),
            )
            .from_abi::<f64>(result__)
        }
    }
    pub fn SetSpeedRatio(&self, value: f64) -> ::windows::core::Result<()> {
        let this = &::windows::core::Interface::cast::<ITimeline>(self)?;
        unsafe {
            (::windows::core::Vtable::vtable(this).SetSpeedRatio)(
                ::windows::core::Vtable::as_raw(this),
                value,
            )
            .ok()
        }
    }
    pub fn FillBehavior(&self) -> ::windows::core::Result<FillBehavior> {
        let this = &::windows::core::Interface::cast::<ITimeline>(self)?;
        unsafe {
            let mut result__ = ::core::mem::MaybeUninit::zeroed();
            (::windows::core::Vtable::vtable(this).FillBehavior)(
                ::windows::core::Vtable::as_raw(this),
                result__.as_mut_ptr(),
            )
            .from_abi::<FillBehavior>(result__)
        }
    }
    pub fn SetFillBehavior(&self, value: FillBehavior) -> ::windows::core::Result<()> {
        let this = &::windows::core::Interface::cast::<ITimeline>(self)?;
        unsafe {
            (::windows::core::Vtable::vtable(this).SetFillBehavior)(
                ::windows::core::Vtable::as_raw(this),
                value,
            )
            .ok()
        }
    }
    pub fn RepeatBehavior(&self) -> ::windows::core::Result<RepeatBehavior> {
        let this = &::windows::core::Interface::cast::<ITimeline>(self)?;
        unsafe {
            let mut result__ = ::core::mem::MaybeUninit::zeroed();
            (::windows::core::Vtable::vtable(this).RepeatBehavior)(
                ::windows::core::Vtable::as_raw(this),
                result__.as_mut_ptr(),
            )
            .from_abi::<RepeatBehavior>(result__)
        }
    }
    pub fn SetRepeatBehavior(&self, value: RepeatBehavior) -> ::windows::core::Result<()> {
        let this = &::windows::core::Interface::cast::<ITimeline>(self)?;
        unsafe {
            (::windows::core::Vtable::vtable(this).SetRepeatBehavior)(
                ::windows::core::Vtable::as_raw(this),
                value,
            )
            .ok()
        }
    }
    pub fn Completed(
        &self,
        handler: &::windows::Foundation::EventHandler<::windows::core::IInspectable>,
    ) -> ::windows::core::Result<::windows::Foundation::EventRegistrationToken> {
        let this = &::windows::core::Interface::cast::<ITimeline>(self)?;
        unsafe {
            let mut result__ = ::core::mem::MaybeUninit::zeroed();
            (::windows::core::Vtable::vtable(this).Completed)(
                ::windows::core::Vtable::as_raw(this),
                ::core::mem::transmute_copy(handler),
                result__.as_mut_ptr(),
            )
            .from_abi::<::windows::Foundation::EventRegistrationToken>(result__)
        }
    }
    pub fn RemoveCompleted(
        &self,
        token: ::windows::Foundation::EventRegistrationToken,
    ) -> ::windows::core::Result<()> {
        let this = &::windows::core::Interface::cast::<ITimeline>(self)?;
        unsafe {
            (::windows::core::Vtable::vtable(this).RemoveCompleted)(
                ::windows::core::Vtable::as_raw(this),
                token,
            )
            .ok()
        }
    }
    #[doc(hidden)]
    pub fn IDoubleAnimationUsingKeyFramesStatics<
        R,
        F: FnOnce(&IDoubleAnimationUsingKeyFramesStatics) -> ::windows::core::Result<R>,
    >(
        callback: F,
    ) -> ::windows::core::Result<R> {
        static SHARED: ::windows::core::FactoryCache<
            DoubleAnimationUsingKeyFrames,
            IDoubleAnimationUsingKeyFramesStatics,
        > = ::windows::core::FactoryCache::new();
        SHARED.call(callback)
    }
}
impl ::core::clone::Clone for DoubleAnimationUsingKeyFrames {
    fn clone(&self) -> Self {
        Self(self.0.clone())
    }
}
impl ::core::cmp::PartialEq for DoubleAnimationUsingKeyFrames {
    fn eq(&self, other: &Self) -> bool {
        self.0 == other.0
    }
}
impl ::core::cmp::Eq for DoubleAnimationUsingKeyFrames {}
impl ::core::fmt::Debug for DoubleAnimationUsingKeyFrames {
    fn fmt(&self, f: &mut ::core::fmt::Formatter<'_>) -> ::core::fmt::Result {
        f.debug_tuple("DoubleAnimationUsingKeyFrames").field(&self.0).finish()
    }
}
unsafe impl ::windows::core::RuntimeType for DoubleAnimationUsingKeyFrames {
    const SIGNATURE : ::windows::core::ConstBuffer = ::windows::core::ConstBuffer::from_slice ( b"rc(Microsoft.UI.Xaml.Media.Animation.DoubleAnimationUsingKeyFrames;{815437d5-63cf-54a5-aea5-24b84708d12d})" ) ;
    type DefaultType = ::core::option::Option<Self>;
    fn from_default(from: &Self::DefaultType) -> ::windows::core::Result<Self> {
        from.as_ref().cloned().ok_or(::windows::core::Error::OK)
    }
}
unsafe impl ::windows::core::Vtable for DoubleAnimationUsingKeyFrames {
    type Vtable = IDoubleAnimationUsingKeyFrames_Vtbl;
}
unsafe impl ::windows::core::Interface for DoubleAnimationUsingKeyFrames {
    const IID: ::windows::core::GUID =
        <IDoubleAnimationUsingKeyFrames as ::windows::core::Interface>::IID;
}
impl ::windows::core::RuntimeName for DoubleAnimationUsingKeyFrames {
    const NAME: &'static str = "Microsoft.UI.Xaml.Media.Animation.DoubleAnimationUsingKeyFrames";
}
::windows::core::interface_hierarchy!(
    DoubleAnimationUsingKeyFrames,
    ::windows::core::IUnknown,
    ::windows::core::IInspectable
);
impl ::core::convert::From<DoubleAnimationUsingKeyFrames> for Timeline {
    fn from(value: DoubleAnimationUsingKeyFrames) -> Self {
        ::core::convert::From::from(&value)
    }
}
impl ::core::convert::From<&DoubleAnimationUsingKeyFrames> for Timeline {
    fn from(value: &DoubleAnimationUsingKeyFrames) -> Self {
        ::windows::core::Interface::cast(value).unwrap()
    }
}
impl<'a> ::core::convert::From<&DoubleAnimationUsingKeyFrames>
    for ::windows::core::InParam<'a, Timeline>
{
    fn from(value: &DoubleAnimationUsingKeyFrames) -> Self {
        ::windows::core::InParam::owned(value.into())
    }
}
impl ::core::convert::From<DoubleAnimationUsingKeyFrames> for super::super::DependencyObject {
    fn from(value: DoubleAnimationUsingKeyFrames) -> Self {
        ::core::convert::From::from(&value)
    }
}
impl ::core::convert::From<&DoubleAnimationUsingKeyFrames> for super::super::DependencyObject {
    fn from(value: &DoubleAnimationUsingKeyFrames) -> Self {
        ::windows::core::Interface::cast(value).unwrap()
    }
}
impl<'a> ::core::convert::From<&DoubleAnimationUsingKeyFrames>
    for ::windows::core::InParam<'a, super::super::DependencyObject>
{
    fn from(value: &DoubleAnimationUsingKeyFrames) -> Self {
        ::windows::core::InParam::owned(value.into())
    }
}
unsafe impl ::core::marker::Send for DoubleAnimationUsingKeyFrames {}
unsafe impl ::core::marker::Sync for DoubleAnimationUsingKeyFrames {}
#[doc = "*Required features: `\"UI_Xaml_Media_Animation\"`*"]
#[repr(transparent)]
pub struct DoubleKeyFrame(::windows::core::IUnknown);
impl DoubleKeyFrame {
    pub fn GetValue(
        &self,
        dp: &super::super::DependencyProperty,
    ) -> ::windows::core::Result<::windows::core::IInspectable> {
        let this = &::windows::core::Interface::cast::<super::super::IDependencyObject>(self)?;
        unsafe {
            let mut result__ = ::core::mem::MaybeUninit::zeroed();
            (::windows::core::Vtable::vtable(this).GetValue)(
                ::windows::core::Vtable::as_raw(this),
                ::core::mem::transmute_copy(dp),
                result__.as_mut_ptr(),
            )
            .from_abi::<::windows::core::IInspectable>(result__)
        }
    }
    pub fn SetValue<'a, P0>(
        &self,
        dp: &super::super::DependencyProperty,
        value: P0,
    ) -> ::windows::core::Result<()>
    where
        P0: ::std::convert::Into<::windows::core::InParam<'a, ::windows::core::IInspectable>>,
    {
        let this = &::windows::core::Interface::cast::<super::super::IDependencyObject>(self)?;
        unsafe {
            (::windows::core::Vtable::vtable(this).SetValue)(
                ::windows::core::Vtable::as_raw(this),
                ::core::mem::transmute_copy(dp),
                value.into().abi(),
            )
            .ok()
        }
    }
    pub fn ClearValue(&self, dp: &super::super::DependencyProperty) -> ::windows::core::Result<()> {
        let this = &::windows::core::Interface::cast::<super::super::IDependencyObject>(self)?;
        unsafe {
            (::windows::core::Vtable::vtable(this).ClearValue)(
                ::windows::core::Vtable::as_raw(this),
                ::core::mem::transmute_copy(dp),
            )
            .ok()
        }
    }
    pub fn ReadLocalValue(
        &self,
        dp: &super::super::DependencyProperty,
    ) -> ::windows::core::Result<::windows::core::IInspectable> {
        let this = &::windows::core::Interface::cast::<super::super::IDependencyObject>(self)?;
        unsafe {
            let mut result__ = ::core::mem::MaybeUninit::zeroed();
            (::windows::core::Vtable::vtable(this).ReadLocalValue)(
                ::windows::core::Vtable::as_raw(this),
                ::core::mem::transmute_copy(dp),
                result__.as_mut_ptr(),
            )
            .from_abi::<::windows::core::IInspectable>(result__)
        }
    }
    pub fn GetAnimationBaseValue(
        &self,
        dp: &super::super::DependencyProperty,
    ) -> ::windows::core::Result<::windows::core::IInspectable> {
        let this = &::windows::core::Interface::cast::<super::super::IDependencyObject>(self)?;
        unsafe {
            let mut result__ = ::core::mem::MaybeUninit::zeroed();
            (::windows::core::Vtable::vtable(this).GetAnimationBaseValue)(
                ::windows::core::Vtable::as_raw(this),
                ::core::mem::transmute_copy(dp),
                result__.as_mut_ptr(),
            )
            .from_abi::<::windows::core::IInspectable>(result__)
        }
    }
    pub fn RegisterPropertyChangedCallback(
        &self,
        dp: &super::super::DependencyProperty,
        callback: &super::super::DependencyPropertyChangedCallback,
    ) -> ::windows::core::Result<i64> {
        let this = &::windows::core::Interface::cast::<super::super::IDependencyObject>(self)?;
        unsafe {
            let mut result__ = ::core::mem::MaybeUninit::zeroed();
            (::windows::core::Vtable::vtable(this).RegisterPropertyChangedCallback)(
                ::windows::core::Vtable::as_raw(this),
                ::core::mem::transmute_copy(dp),
                ::core::mem::transmute_copy(callback),
                result__.as_mut_ptr(),
            )
            .from_abi::<i64>(result__)
        }
    }
    pub fn UnregisterPropertyChangedCallback(
        &self,
        dp: &super::super::DependencyProperty,
        token: i64,
    ) -> ::windows::core::Result<()> {
        let this = &::windows::core::Interface::cast::<super::super::IDependencyObject>(self)?;
        unsafe {
            (::windows::core::Vtable::vtable(this).UnregisterPropertyChangedCallback)(
                ::windows::core::Vtable::as_raw(this),
                ::core::mem::transmute_copy(dp),
                token,
            )
            .ok()
        }
    }
    pub fn Dispatcher(&self) -> ::windows::core::Result<::windows::UI::Core::CoreDispatcher> {
        let this = &::windows::core::Interface::cast::<super::super::IDependencyObject>(self)?;
        unsafe {
            let mut result__ = ::core::mem::MaybeUninit::zeroed();
            (::windows::core::Vtable::vtable(this).Dispatcher)(
                ::windows::core::Vtable::as_raw(this),
                result__.as_mut_ptr(),
            )
            .from_abi::<::windows::UI::Core::CoreDispatcher>(result__)
        }
    }
    #[doc = "*Required features: `\"UI_Dispatching\"`*"]
    #[cfg(feature = "UI_Dispatching")]
    pub fn DispatcherQueue(
        &self,
    ) -> ::windows::core::Result<super::super::super::Dispatching::DispatcherQueue> {
        let this = &::windows::core::Interface::cast::<super::super::IDependencyObject>(self)?;
        unsafe {
            let mut result__ = ::core::mem::MaybeUninit::zeroed();
            (::windows::core::Vtable::vtable(this).DispatcherQueue)(
                ::windows::core::Vtable::as_raw(this),
                result__.as_mut_ptr(),
            )
            .from_abi::<super::super::super::Dispatching::DispatcherQueue>(result__)
        }
    }
    pub fn Value(&self) -> ::windows::core::Result<f64> {
        let this = self;
        unsafe {
            let mut result__ = ::core::mem::MaybeUninit::zeroed();
            (::windows::core::Vtable::vtable(this).Value)(
                ::windows::core::Vtable::as_raw(this),
                result__.as_mut_ptr(),
            )
            .from_abi::<f64>(result__)
        }
    }
    pub fn SetValue2(&self, value: f64) -> ::windows::core::Result<()> {
        let this = self;
        unsafe {
            (::windows::core::Vtable::vtable(this).SetValue)(
                ::windows::core::Vtable::as_raw(this),
                value,
            )
            .ok()
        }
    }
    pub fn KeyTime(&self) -> ::windows::core::Result<KeyTime> {
        let this = self;
        unsafe {
            let mut result__ = ::core::mem::MaybeUninit::zeroed();
            (::windows::core::Vtable::vtable(this).KeyTime)(
                ::windows::core::Vtable::as_raw(this),
                result__.as_mut_ptr(),
            )
            .from_abi::<KeyTime>(result__)
        }
    }
    pub fn SetKeyTime(&self, value: KeyTime) -> ::windows::core::Result<()> {
        let this = self;
        unsafe {
            (::windows::core::Vtable::vtable(this).SetKeyTime)(
                ::windows::core::Vtable::as_raw(this),
                value,
            )
            .ok()
        }
    }
    pub fn ValueProperty() -> ::windows::core::Result<super::super::DependencyProperty> {
        Self::IDoubleKeyFrameStatics(|this| unsafe {
            let mut result__ = ::core::mem::MaybeUninit::zeroed();
            (::windows::core::Vtable::vtable(this).ValueProperty)(
                ::windows::core::Vtable::as_raw(this),
                result__.as_mut_ptr(),
            )
            .from_abi::<super::super::DependencyProperty>(result__)
        })
    }
    pub fn KeyTimeProperty() -> ::windows::core::Result<super::super::DependencyProperty> {
        Self::IDoubleKeyFrameStatics(|this| unsafe {
            let mut result__ = ::core::mem::MaybeUninit::zeroed();
            (::windows::core::Vtable::vtable(this).KeyTimeProperty)(
                ::windows::core::Vtable::as_raw(this),
                result__.as_mut_ptr(),
            )
            .from_abi::<super::super::DependencyProperty>(result__)
        })
    }
    #[doc(hidden)]
    pub fn IDoubleKeyFrameStatics<
        R,
        F: FnOnce(&IDoubleKeyFrameStatics) -> ::windows::core::Result<R>,
    >(
        callback: F,
    ) -> ::windows::core::Result<R> {
        static SHARED: ::windows::core::FactoryCache<DoubleKeyFrame, IDoubleKeyFrameStatics> =
            ::windows::core::FactoryCache::new();
        SHARED.call(callback)
    }
}
impl ::core::clone::Clone for DoubleKeyFrame {
    fn clone(&self) -> Self {
        Self(self.0.clone())
    }
}
impl ::core::cmp::PartialEq for DoubleKeyFrame {
    fn eq(&self, other: &Self) -> bool {
        self.0 == other.0
    }
}
impl ::core::cmp::Eq for DoubleKeyFrame {}
impl ::core::fmt::Debug for DoubleKeyFrame {
    fn fmt(&self, f: &mut ::core::fmt::Formatter<'_>) -> ::core::fmt::Result {
        f.debug_tuple("DoubleKeyFrame").field(&self.0).finish()
    }
}
unsafe impl ::windows::core::RuntimeType for DoubleKeyFrame {
    const SIGNATURE : ::windows::core::ConstBuffer = ::windows::core::ConstBuffer::from_slice ( b"rc(Microsoft.UI.Xaml.Media.Animation.DoubleKeyFrame;{94c82ae6-ca62-5f52-934c-3e427e75d69a})" ) ;
    type DefaultType = ::core::option::Option<Self>;
    fn from_default(from: &Self::DefaultType) -> ::windows::core::Result<Self> {
        from.as_ref().cloned().ok_or(::windows::core::Error::OK)
    }
}
unsafe impl ::windows::core::Vtable for DoubleKeyFrame {
    type Vtable = IDoubleKeyFrame_Vtbl;
}
unsafe impl ::windows::core::Interface for DoubleKeyFrame {
    const IID: ::windows::core::GUID = <IDoubleKeyFrame as ::windows::core::Interface>::IID;
}
impl ::windows::core::RuntimeName for DoubleKeyFrame {
    const NAME: &'static str = "Microsoft.UI.Xaml.Media.Animation.DoubleKeyFrame";
}
::windows::core::interface_hierarchy!(
    DoubleKeyFrame,
    ::windows::core::IUnknown,
    ::windows::core::IInspectable
);
impl ::core::convert::From<DoubleKeyFrame> for super::super::DependencyObject {
    fn from(value: DoubleKeyFrame) -> Self {
        ::core::convert::From::from(&value)
    }
}
impl ::core::convert::From<&DoubleKeyFrame> for super::super::DependencyObject {
    fn from(value: &DoubleKeyFrame) -> Self {
        ::windows::core::Interface::cast(value).unwrap()
    }
}
impl<'a> ::core::convert::From<&DoubleKeyFrame>
    for ::windows::core::InParam<'a, super::super::DependencyObject>
{
    fn from(value: &DoubleKeyFrame) -> Self {
        ::windows::core::InParam::owned(value.into())
    }
}
unsafe impl ::core::marker::Send for DoubleKeyFrame {}
unsafe impl ::core::marker::Sync for DoubleKeyFrame {}
#[doc = "*Required features: `\"UI_Xaml_Media_Animation\"`*"]
#[repr(transparent)]
pub struct DoubleKeyFrameCollection(::windows::core::IUnknown);
impl DoubleKeyFrameCollection {
    pub fn new() -> ::windows::core::Result<Self> {
        Self::IActivationFactory(|f| f.ActivateInstance::<Self>())
    }
    fn IActivationFactory<
        R,
        F: FnOnce(&::windows::core::IGenericFactory) -> ::windows::core::Result<R>,
    >(
        callback: F,
    ) -> ::windows::core::Result<R> {
        static SHARED: ::windows::core::FactoryCache<
            DoubleKeyFrameCollection,
            ::windows::core::IGenericFactory,
        > = ::windows::core::FactoryCache::new();
        SHARED.call(callback)
    }
    pub fn First(
        &self,
    ) -> ::windows::core::Result<::windows::Foundation::Collections::IIterator<DoubleKeyFrame>>
    {
        let this = &::windows::core::Interface::cast::<
            ::windows::Foundation::Collections::IIterable<DoubleKeyFrame>,
        >(self)?;
        unsafe {
            let mut result__ = ::core::mem::MaybeUninit::zeroed();
            (::windows::core::Vtable::vtable(this).First)(
                ::windows::core::Vtable::as_raw(this),
                result__.as_mut_ptr(),
            )
            .from_abi::<::windows::Foundation::Collections::IIterator<DoubleKeyFrame>>(result__)
        }
    }
    pub fn GetAt(&self, index: u32) -> ::windows::core::Result<DoubleKeyFrame> {
        let this = self;
        unsafe {
            let mut result__ = ::core::mem::MaybeUninit::zeroed();
            (::windows::core::Vtable::vtable(this).GetAt)(
                ::windows::core::Vtable::as_raw(this),
                index,
                result__.as_mut_ptr(),
            )
            .from_abi::<DoubleKeyFrame>(result__)
        }
    }
    pub fn Size(&self) -> ::windows::core::Result<u32> {
        let this = self;
        unsafe {
            let mut result__ = ::core::mem::MaybeUninit::zeroed();
            (::windows::core::Vtable::vtable(this).Size)(
                ::windows::core::Vtable::as_raw(this),
                result__.as_mut_ptr(),
            )
            .from_abi::<u32>(result__)
        }
    }
    pub fn GetView(
        &self,
    ) -> ::windows::core::Result<::windows::Foundation::Collections::IVectorView<DoubleKeyFrame>>
    {
        let this = self;
        unsafe {
            let mut result__ = ::core::mem::MaybeUninit::zeroed();
            (::windows::core::Vtable::vtable(this).GetView)(
                ::windows::core::Vtable::as_raw(this),
                result__.as_mut_ptr(),
            )
            .from_abi::<::windows::Foundation::Collections::IVectorView<DoubleKeyFrame>>(result__)
        }
    }
    pub fn IndexOf<'a, P0>(&self, value: P0, index: &mut u32) -> ::windows::core::Result<bool>
    where
        P0: ::std::convert::Into<::windows::core::InParam<'a, DoubleKeyFrame>>,
    {
        let this = self;
        unsafe {
            let mut result__ = ::core::mem::MaybeUninit::zeroed();
            (::windows::core::Vtable::vtable(this).IndexOf)(
                ::windows::core::Vtable::as_raw(this),
                value.into().abi(),
                index,
                result__.as_mut_ptr(),
            )
            .from_abi::<bool>(result__)
        }
    }
    pub fn SetAt<'a, P0>(&self, index: u32, value: P0) -> ::windows::core::Result<()>
    where
        P0: ::std::convert::Into<::windows::core::InParam<'a, DoubleKeyFrame>>,
    {
        let this = self;
        unsafe {
            (::windows::core::Vtable::vtable(this).SetAt)(
                ::windows::core::Vtable::as_raw(this),
                index,
                value.into().abi(),
            )
            .ok()
        }
    }
    pub fn InsertAt<'a, P0>(&self, index: u32, value: P0) -> ::windows::core::Result<()>
    where
        P0: ::std::convert::Into<::windows::core::InParam<'a, DoubleKeyFrame>>,
    {
        let this = self;
        unsafe {
            (::windows::core::Vtable::vtable(this).InsertAt)(
                ::windows::core::Vtable::as_raw(this),
                index,
                value.into().abi(),
            )
            .ok()
        }
    }
    pub fn RemoveAt(&self, index: u32) -> ::windows::core::Result<()> {
        let this = self;
        unsafe {
            (::windows::core::Vtable::vtable(this).RemoveAt)(
                ::windows::core::Vtable::as_raw(this),
                index,
            )
            .ok()
        }
    }
    pub fn Append<'a, P0>(&self, value: P0) -> ::windows::core::Result<()>
    where
        P0: ::std::convert::Into<::windows::core::InParam<'a, DoubleKeyFrame>>,
    {
        let this = self;
        unsafe {
            (::windows::core::Vtable::vtable(this).Append)(
                ::windows::core::Vtable::as_raw(this),
                value.into().abi(),
            )
            .ok()
        }
    }
    pub fn RemoveAtEnd(&self) -> ::windows::core::Result<()> {
        let this = self;
        unsafe {
            (::windows::core::Vtable::vtable(this).RemoveAtEnd)(::windows::core::Vtable::as_raw(
                this,
            ))
            .ok()
        }
    }
    pub fn Clear(&self) -> ::windows::core::Result<()> {
        let this = self;
        unsafe {
            (::windows::core::Vtable::vtable(this).Clear)(::windows::core::Vtable::as_raw(this))
                .ok()
        }
    }
    pub fn GetMany(
        &self,
        startindex: u32,
        items: &mut [::core::option::Option<DoubleKeyFrame>],
    ) -> ::windows::core::Result<u32> {
        let this = self;
        unsafe {
            let mut result__ = ::core::mem::MaybeUninit::zeroed();
            (::windows::core::Vtable::vtable(this).GetMany)(
                ::windows::core::Vtable::as_raw(this),
                startindex,
                items.len() as u32,
                ::core::mem::transmute_copy(&items),
                result__.as_mut_ptr(),
            )
            .from_abi::<u32>(result__)
        }
    }
    pub fn ReplaceAll(
        &self,
        items: &[::core::option::Option<DoubleKeyFrame>],
    ) -> ::windows::core::Result<()> {
        let this = self;
        unsafe {
            (::windows::core::Vtable::vtable(this).ReplaceAll)(
                ::windows::core::Vtable::as_raw(this),
                items.len() as u32,
                ::core::mem::transmute(items.as_ptr()),
            )
            .ok()
        }
    }
}
impl ::core::clone::Clone for DoubleKeyFrameCollection {
    fn clone(&self) -> Self {
        Self(self.0.clone())
    }
}
impl ::core::cmp::PartialEq for DoubleKeyFrameCollection {
    fn eq(&self, other: &Self) -> bool {
        self.0 == other.0
    }
}
impl ::core::cmp::Eq for DoubleKeyFrameCollection {}
impl ::core::fmt::Debug for DoubleKeyFrameCollection {
    fn fmt(&self, f: &mut ::core::fmt::Formatter<'_>) -> ::core::fmt::Result {
        f.debug_tuple("DoubleKeyFrameCollection").field(&self.0).finish()
    }
}
unsafe impl ::windows::core::RuntimeType for DoubleKeyFrameCollection {
    const SIGNATURE : ::windows::core::ConstBuffer = ::windows::core::ConstBuffer::from_slice ( b"rc(Microsoft.UI.Xaml.Media.Animation.DoubleKeyFrameCollection;pinterface({913337e9-11a1-4345-a3a2-4e7f956e222d};rc(Microsoft.UI.Xaml.Media.Animation.DoubleKeyFrame;{94c82ae6-ca62-5f52-934c-3e427e75d69a})))" ) ;
    type DefaultType = ::core::option::Option<Self>;
    fn from_default(from: &Self::DefaultType) -> ::windows::core::Result<Self> {
        from.as_ref().cloned().ok_or(::windows::core::Error::OK)
    }
}
unsafe impl ::windows::core::Vtable for DoubleKeyFrameCollection {
    type Vtable = ::windows::Foundation::Collections::IVector_Vtbl<DoubleKeyFrame>;
}
unsafe impl ::windows::core::Interface for DoubleKeyFrameCollection {
    const IID : ::windows::core::GUID = < ::windows::Foundation::Collections:: IVector :: < DoubleKeyFrame > as::windows::core::Interface >::IID ;
}
impl ::windows::core::RuntimeName for DoubleKeyFrameCollection {
    const NAME: &'static str = "Microsoft.UI.Xaml.Media.Animation.DoubleKeyFrameCollection";
}
impl ::core::iter::IntoIterator for DoubleKeyFrameCollection {
    type Item = DoubleKeyFrame;
    type IntoIter = ::windows::Foundation::Collections::VectorIterator<Self::Item>;
    fn into_iter(self) -> Self::IntoIter {
        ::core::iter::IntoIterator::into_iter(&self)
    }
}
impl ::core::iter::IntoIterator for &DoubleKeyFrameCollection {
    type Item = DoubleKeyFrame;
    type IntoIter = ::windows::Foundation::Collections::VectorIterator<Self::Item>;
    fn into_iter(self) -> Self::IntoIter {
        ::windows::Foundation::Collections::VectorIterator::new(
            ::core::convert::TryInto::try_into(self).ok(),
        )
    }
}
::windows::core::interface_hierarchy!(
    DoubleKeyFrameCollection,
    ::windows::core::IUnknown,
    ::windows::core::IInspectable
);
impl ::core::convert::TryFrom<DoubleKeyFrameCollection>
    for ::windows::Foundation::Collections::IIterable<DoubleKeyFrame>
{
    type Error = ::windows::core::Error;
    fn try_from(value: DoubleKeyFrameCollection) -> ::windows::core::Result<Self> {
        ::core::convert::TryFrom::try_from(&value)
    }
}
impl ::core::convert::TryFrom<&DoubleKeyFrameCollection>
    for ::windows::Foundation::Collections::IIterable<DoubleKeyFrame>
{
    type Error = ::windows::core::Error;
    fn try_from(value: &DoubleKeyFrameCollection) -> ::windows::core::Result<Self> {
        ::windows::core::Interface::cast(value)
    }
}
impl<'a> ::core::convert::TryFrom<&DoubleKeyFrameCollection>
    for ::windows::core::InParam<'a, ::windows::Foundation::Collections::IIterable<DoubleKeyFrame>>
{
    type Error = ::windows::core::Error;
    fn try_from(value: &DoubleKeyFrameCollection) -> ::windows::core::Result<Self> {
        let item = ::std::convert::TryInto::try_into(value)?;
        Ok(::windows::core::InParam::owned(item))
    }
}
impl ::core::convert::TryFrom<DoubleKeyFrameCollection>
    for ::windows::Foundation::Collections::IVector<DoubleKeyFrame>
{
    type Error = ::windows::core::Error;
    fn try_from(value: DoubleKeyFrameCollection) -> ::windows::core::Result<Self> {
        ::core::convert::TryFrom::try_from(&value)
    }
}
impl ::core::convert::TryFrom<&DoubleKeyFrameCollection>
    for ::windows::Foundation::Collections::IVector<DoubleKeyFrame>
{
    type Error = ::windows::core::Error;
    fn try_from(value: &DoubleKeyFrameCollection) -> ::windows::core::Result<Self> {
        ::windows::core::Interface::cast(value)
    }
}
impl<'a> ::core::convert::TryFrom<&DoubleKeyFrameCollection>
    for ::windows::core::InParam<'a, ::windows::Foundation::Collections::IVector<DoubleKeyFrame>>
{
    type Error = ::windows::core::Error;
    fn try_from(value: &DoubleKeyFrameCollection) -> ::windows::core::Result<Self> {
        let item = ::std::convert::TryInto::try_into(value)?;
        Ok(::windows::core::InParam::owned(item))
    }
}
unsafe impl ::core::marker::Send for DoubleKeyFrameCollection {}
unsafe impl ::core::marker::Sync for DoubleKeyFrameCollection {}
#[doc = "*Required features: `\"UI_Xaml_Media_Animation\"`*"]
#[repr(transparent)]
pub struct DragItemThemeAnimation(::windows::core::IUnknown);
impl DragItemThemeAnimation {
    pub fn new() -> ::windows::core::Result<Self> {
        Self::IActivationFactory(|f| f.ActivateInstance::<Self>())
    }
    fn IActivationFactory<
        R,
        F: FnOnce(&::windows::core::IGenericFactory) -> ::windows::core::Result<R>,
    >(
        callback: F,
    ) -> ::windows::core::Result<R> {
        static SHARED: ::windows::core::FactoryCache<
            DragItemThemeAnimation,
            ::windows::core::IGenericFactory,
        > = ::windows::core::FactoryCache::new();
        SHARED.call(callback)
    }
    pub fn GetValue(
        &self,
        dp: &super::super::DependencyProperty,
    ) -> ::windows::core::Result<::windows::core::IInspectable> {
        let this = &::windows::core::Interface::cast::<super::super::IDependencyObject>(self)?;
        unsafe {
            let mut result__ = ::core::mem::MaybeUninit::zeroed();
            (::windows::core::Vtable::vtable(this).GetValue)(
                ::windows::core::Vtable::as_raw(this),
                ::core::mem::transmute_copy(dp),
                result__.as_mut_ptr(),
            )
            .from_abi::<::windows::core::IInspectable>(result__)
        }
    }
    pub fn SetValue<'a, P0>(
        &self,
        dp: &super::super::DependencyProperty,
        value: P0,
    ) -> ::windows::core::Result<()>
    where
        P0: ::std::convert::Into<::windows::core::InParam<'a, ::windows::core::IInspectable>>,
    {
        let this = &::windows::core::Interface::cast::<super::super::IDependencyObject>(self)?;
        unsafe {
            (::windows::core::Vtable::vtable(this).SetValue)(
                ::windows::core::Vtable::as_raw(this),
                ::core::mem::transmute_copy(dp),
                value.into().abi(),
            )
            .ok()
        }
    }
    pub fn ClearValue(&self, dp: &super::super::DependencyProperty) -> ::windows::core::Result<()> {
        let this = &::windows::core::Interface::cast::<super::super::IDependencyObject>(self)?;
        unsafe {
            (::windows::core::Vtable::vtable(this).ClearValue)(
                ::windows::core::Vtable::as_raw(this),
                ::core::mem::transmute_copy(dp),
            )
            .ok()
        }
    }
    pub fn ReadLocalValue(
        &self,
        dp: &super::super::DependencyProperty,
    ) -> ::windows::core::Result<::windows::core::IInspectable> {
        let this = &::windows::core::Interface::cast::<super::super::IDependencyObject>(self)?;
        unsafe {
            let mut result__ = ::core::mem::MaybeUninit::zeroed();
            (::windows::core::Vtable::vtable(this).ReadLocalValue)(
                ::windows::core::Vtable::as_raw(this),
                ::core::mem::transmute_copy(dp),
                result__.as_mut_ptr(),
            )
            .from_abi::<::windows::core::IInspectable>(result__)
        }
    }
    pub fn GetAnimationBaseValue(
        &self,
        dp: &super::super::DependencyProperty,
    ) -> ::windows::core::Result<::windows::core::IInspectable> {
        let this = &::windows::core::Interface::cast::<super::super::IDependencyObject>(self)?;
        unsafe {
            let mut result__ = ::core::mem::MaybeUninit::zeroed();
            (::windows::core::Vtable::vtable(this).GetAnimationBaseValue)(
                ::windows::core::Vtable::as_raw(this),
                ::core::mem::transmute_copy(dp),
                result__.as_mut_ptr(),
            )
            .from_abi::<::windows::core::IInspectable>(result__)
        }
    }
    pub fn RegisterPropertyChangedCallback(
        &self,
        dp: &super::super::DependencyProperty,
        callback: &super::super::DependencyPropertyChangedCallback,
    ) -> ::windows::core::Result<i64> {
        let this = &::windows::core::Interface::cast::<super::super::IDependencyObject>(self)?;
        unsafe {
            let mut result__ = ::core::mem::MaybeUninit::zeroed();
            (::windows::core::Vtable::vtable(this).RegisterPropertyChangedCallback)(
                ::windows::core::Vtable::as_raw(this),
                ::core::mem::transmute_copy(dp),
                ::core::mem::transmute_copy(callback),
                result__.as_mut_ptr(),
            )
            .from_abi::<i64>(result__)
        }
    }
    pub fn UnregisterPropertyChangedCallback(
        &self,
        dp: &super::super::DependencyProperty,
        token: i64,
    ) -> ::windows::core::Result<()> {
        let this = &::windows::core::Interface::cast::<super::super::IDependencyObject>(self)?;
        unsafe {
            (::windows::core::Vtable::vtable(this).UnregisterPropertyChangedCallback)(
                ::windows::core::Vtable::as_raw(this),
                ::core::mem::transmute_copy(dp),
                token,
            )
            .ok()
        }
    }
    pub fn Dispatcher(&self) -> ::windows::core::Result<::windows::UI::Core::CoreDispatcher> {
        let this = &::windows::core::Interface::cast::<super::super::IDependencyObject>(self)?;
        unsafe {
            let mut result__ = ::core::mem::MaybeUninit::zeroed();
            (::windows::core::Vtable::vtable(this).Dispatcher)(
                ::windows::core::Vtable::as_raw(this),
                result__.as_mut_ptr(),
            )
            .from_abi::<::windows::UI::Core::CoreDispatcher>(result__)
        }
    }
    #[doc = "*Required features: `\"UI_Dispatching\"`*"]
    #[cfg(feature = "UI_Dispatching")]
    pub fn DispatcherQueue(
        &self,
    ) -> ::windows::core::Result<super::super::super::Dispatching::DispatcherQueue> {
        let this = &::windows::core::Interface::cast::<super::super::IDependencyObject>(self)?;
        unsafe {
            let mut result__ = ::core::mem::MaybeUninit::zeroed();
            (::windows::core::Vtable::vtable(this).DispatcherQueue)(
                ::windows::core::Vtable::as_raw(this),
                result__.as_mut_ptr(),
            )
            .from_abi::<super::super::super::Dispatching::DispatcherQueue>(result__)
        }
    }
    pub fn TargetName(&self) -> ::windows::core::Result<::windows::core::HSTRING> {
        let this = self;
        unsafe {
            let mut result__ = ::core::mem::MaybeUninit::zeroed();
            (::windows::core::Vtable::vtable(this).TargetName)(
                ::windows::core::Vtable::as_raw(this),
                result__.as_mut_ptr(),
            )
            .from_abi::<::windows::core::HSTRING>(result__)
        }
    }
    pub fn SetTargetName(&self, value: &::windows::core::HSTRING) -> ::windows::core::Result<()> {
        let this = self;
        unsafe {
            (::windows::core::Vtable::vtable(this).SetTargetName)(
                ::windows::core::Vtable::as_raw(this),
                ::core::mem::transmute_copy(value),
            )
            .ok()
        }
    }
    pub fn TargetNameProperty() -> ::windows::core::Result<super::super::DependencyProperty> {
        Self::IDragItemThemeAnimationStatics(|this| unsafe {
            let mut result__ = ::core::mem::MaybeUninit::zeroed();
            (::windows::core::Vtable::vtable(this).TargetNameProperty)(
                ::windows::core::Vtable::as_raw(this),
                result__.as_mut_ptr(),
            )
            .from_abi::<super::super::DependencyProperty>(result__)
        })
    }
    pub fn AutoReverse(&self) -> ::windows::core::Result<bool> {
        let this = &::windows::core::Interface::cast::<ITimeline>(self)?;
        unsafe {
            let mut result__ = ::core::mem::MaybeUninit::zeroed();
            (::windows::core::Vtable::vtable(this).AutoReverse)(
                ::windows::core::Vtable::as_raw(this),
                result__.as_mut_ptr(),
            )
            .from_abi::<bool>(result__)
        }
    }
    pub fn SetAutoReverse(&self, value: bool) -> ::windows::core::Result<()> {
        let this = &::windows::core::Interface::cast::<ITimeline>(self)?;
        unsafe {
            (::windows::core::Vtable::vtable(this).SetAutoReverse)(
                ::windows::core::Vtable::as_raw(this),
                value,
            )
            .ok()
        }
    }
    pub fn BeginTime(
        &self,
    ) -> ::windows::core::Result<::windows::Foundation::IReference<::windows::Foundation::TimeSpan>>
    {
        let this = &::windows::core::Interface::cast::<ITimeline>(self)?;
        unsafe {
            let mut result__ = ::core::mem::MaybeUninit::zeroed();
            (::windows::core::Vtable::vtable(this).BeginTime)(
                ::windows::core::Vtable::as_raw(this),
                result__.as_mut_ptr(),
            )
            .from_abi::<::windows::Foundation::IReference<::windows::Foundation::TimeSpan>>(
                result__,
            )
        }
    }
    pub fn SetBeginTime<'a, P0, E0>(&self, value: P0) -> ::windows::core::Result<()>
    where
        P0: ::std::convert::TryInto<
            ::windows::core::InParam<
                'a,
                ::windows::Foundation::IReference<::windows::Foundation::TimeSpan>,
            >,
            Error = E0,
        >,
        E0: ::std::convert::Into<::windows::core::Error>,
    {
        let this = &::windows::core::Interface::cast::<ITimeline>(self)?;
        unsafe {
            (::windows::core::Vtable::vtable(this).SetBeginTime)(
                ::windows::core::Vtable::as_raw(this),
                value.try_into().map_err(|e| e.into())?.abi(),
            )
            .ok()
        }
    }
    pub fn Duration(&self) -> ::windows::core::Result<super::super::Duration> {
        let this = &::windows::core::Interface::cast::<ITimeline>(self)?;
        unsafe {
            let mut result__ = ::core::mem::MaybeUninit::zeroed();
            (::windows::core::Vtable::vtable(this).Duration)(
                ::windows::core::Vtable::as_raw(this),
                result__.as_mut_ptr(),
            )
            .from_abi::<super::super::Duration>(result__)
        }
    }
    pub fn SetDuration(&self, value: super::super::Duration) -> ::windows::core::Result<()> {
        let this = &::windows::core::Interface::cast::<ITimeline>(self)?;
        unsafe {
            (::windows::core::Vtable::vtable(this).SetDuration)(
                ::windows::core::Vtable::as_raw(this),
                value,
            )
            .ok()
        }
    }
    pub fn SpeedRatio(&self) -> ::windows::core::Result<f64> {
        let this = &::windows::core::Interface::cast::<ITimeline>(self)?;
        unsafe {
            let mut result__ = ::core::mem::MaybeUninit::zeroed();
            (::windows::core::Vtable::vtable(this).SpeedRatio)(
                ::windows::core::Vtable::as_raw(this),
                result__.as_mut_ptr(),
            )
            .from_abi::<f64>(result__)
        }
    }
    pub fn SetSpeedRatio(&self, value: f64) -> ::windows::core::Result<()> {
        let this = &::windows::core::Interface::cast::<ITimeline>(self)?;
        unsafe {
            (::windows::core::Vtable::vtable(this).SetSpeedRatio)(
                ::windows::core::Vtable::as_raw(this),
                value,
            )
            .ok()
        }
    }
    pub fn FillBehavior(&self) -> ::windows::core::Result<FillBehavior> {
        let this = &::windows::core::Interface::cast::<ITimeline>(self)?;
        unsafe {
            let mut result__ = ::core::mem::MaybeUninit::zeroed();
            (::windows::core::Vtable::vtable(this).FillBehavior)(
                ::windows::core::Vtable::as_raw(this),
                result__.as_mut_ptr(),
            )
            .from_abi::<FillBehavior>(result__)
        }
    }
    pub fn SetFillBehavior(&self, value: FillBehavior) -> ::windows::core::Result<()> {
        let this = &::windows::core::Interface::cast::<ITimeline>(self)?;
        unsafe {
            (::windows::core::Vtable::vtable(this).SetFillBehavior)(
                ::windows::core::Vtable::as_raw(this),
                value,
            )
            .ok()
        }
    }
    pub fn RepeatBehavior(&self) -> ::windows::core::Result<RepeatBehavior> {
        let this = &::windows::core::Interface::cast::<ITimeline>(self)?;
        unsafe {
            let mut result__ = ::core::mem::MaybeUninit::zeroed();
            (::windows::core::Vtable::vtable(this).RepeatBehavior)(
                ::windows::core::Vtable::as_raw(this),
                result__.as_mut_ptr(),
            )
            .from_abi::<RepeatBehavior>(result__)
        }
    }
    pub fn SetRepeatBehavior(&self, value: RepeatBehavior) -> ::windows::core::Result<()> {
        let this = &::windows::core::Interface::cast::<ITimeline>(self)?;
        unsafe {
            (::windows::core::Vtable::vtable(this).SetRepeatBehavior)(
                ::windows::core::Vtable::as_raw(this),
                value,
            )
            .ok()
        }
    }
    pub fn Completed(
        &self,
        handler: &::windows::Foundation::EventHandler<::windows::core::IInspectable>,
    ) -> ::windows::core::Result<::windows::Foundation::EventRegistrationToken> {
        let this = &::windows::core::Interface::cast::<ITimeline>(self)?;
        unsafe {
            let mut result__ = ::core::mem::MaybeUninit::zeroed();
            (::windows::core::Vtable::vtable(this).Completed)(
                ::windows::core::Vtable::as_raw(this),
                ::core::mem::transmute_copy(handler),
                result__.as_mut_ptr(),
            )
            .from_abi::<::windows::Foundation::EventRegistrationToken>(result__)
        }
    }
    pub fn RemoveCompleted(
        &self,
        token: ::windows::Foundation::EventRegistrationToken,
    ) -> ::windows::core::Result<()> {
        let this = &::windows::core::Interface::cast::<ITimeline>(self)?;
        unsafe {
            (::windows::core::Vtable::vtable(this).RemoveCompleted)(
                ::windows::core::Vtable::as_raw(this),
                token,
            )
            .ok()
        }
    }
    #[doc(hidden)]
    pub fn IDragItemThemeAnimationStatics<
        R,
        F: FnOnce(&IDragItemThemeAnimationStatics) -> ::windows::core::Result<R>,
    >(
        callback: F,
    ) -> ::windows::core::Result<R> {
        static SHARED: ::windows::core::FactoryCache<
            DragItemThemeAnimation,
            IDragItemThemeAnimationStatics,
        > = ::windows::core::FactoryCache::new();
        SHARED.call(callback)
    }
}
impl ::core::clone::Clone for DragItemThemeAnimation {
    fn clone(&self) -> Self {
        Self(self.0.clone())
    }
}
impl ::core::cmp::PartialEq for DragItemThemeAnimation {
    fn eq(&self, other: &Self) -> bool {
        self.0 == other.0
    }
}
impl ::core::cmp::Eq for DragItemThemeAnimation {}
impl ::core::fmt::Debug for DragItemThemeAnimation {
    fn fmt(&self, f: &mut ::core::fmt::Formatter<'_>) -> ::core::fmt::Result {
        f.debug_tuple("DragItemThemeAnimation").field(&self.0).finish()
    }
}
unsafe impl ::windows::core::RuntimeType for DragItemThemeAnimation {
    const SIGNATURE : ::windows::core::ConstBuffer = ::windows::core::ConstBuffer::from_slice ( b"rc(Microsoft.UI.Xaml.Media.Animation.DragItemThemeAnimation;{648e690e-a2c0-58ca-b15d-db6fccc663f2})" ) ;
    type DefaultType = ::core::option::Option<Self>;
    fn from_default(from: &Self::DefaultType) -> ::windows::core::Result<Self> {
        from.as_ref().cloned().ok_or(::windows::core::Error::OK)
    }
}
unsafe impl ::windows::core::Vtable for DragItemThemeAnimation {
    type Vtable = IDragItemThemeAnimation_Vtbl;
}
unsafe impl ::windows::core::Interface for DragItemThemeAnimation {
    const IID: ::windows::core::GUID = <IDragItemThemeAnimation as ::windows::core::Interface>::IID;
}
impl ::windows::core::RuntimeName for DragItemThemeAnimation {
    const NAME: &'static str = "Microsoft.UI.Xaml.Media.Animation.DragItemThemeAnimation";
}
::windows::core::interface_hierarchy!(
    DragItemThemeAnimation,
    ::windows::core::IUnknown,
    ::windows::core::IInspectable
);
impl ::core::convert::From<DragItemThemeAnimation> for Timeline {
    fn from(value: DragItemThemeAnimation) -> Self {
        ::core::convert::From::from(&value)
    }
}
impl ::core::convert::From<&DragItemThemeAnimation> for Timeline {
    fn from(value: &DragItemThemeAnimation) -> Self {
        ::windows::core::Interface::cast(value).unwrap()
    }
}
impl<'a> ::core::convert::From<&DragItemThemeAnimation> for ::windows::core::InParam<'a, Timeline> {
    fn from(value: &DragItemThemeAnimation) -> Self {
        ::windows::core::InParam::owned(value.into())
    }
}
impl ::core::convert::From<DragItemThemeAnimation> for super::super::DependencyObject {
    fn from(value: DragItemThemeAnimation) -> Self {
        ::core::convert::From::from(&value)
    }
}
impl ::core::convert::From<&DragItemThemeAnimation> for super::super::DependencyObject {
    fn from(value: &DragItemThemeAnimation) -> Self {
        ::windows::core::Interface::cast(value).unwrap()
    }
}
impl<'a> ::core::convert::From<&DragItemThemeAnimation>
    for ::windows::core::InParam<'a, super::super::DependencyObject>
{
    fn from(value: &DragItemThemeAnimation) -> Self {
        ::windows::core::InParam::owned(value.into())
    }
}
unsafe impl ::core::marker::Send for DragItemThemeAnimation {}
unsafe impl ::core::marker::Sync for DragItemThemeAnimation {}
#[doc = "*Required features: `\"UI_Xaml_Media_Animation\"`*"]
#[repr(transparent)]
pub struct DragOverThemeAnimation(::windows::core::IUnknown);
impl DragOverThemeAnimation {
    pub fn new() -> ::windows::core::Result<Self> {
        Self::IActivationFactory(|f| f.ActivateInstance::<Self>())
    }
    fn IActivationFactory<
        R,
        F: FnOnce(&::windows::core::IGenericFactory) -> ::windows::core::Result<R>,
    >(
        callback: F,
    ) -> ::windows::core::Result<R> {
        static SHARED: ::windows::core::FactoryCache<
            DragOverThemeAnimation,
            ::windows::core::IGenericFactory,
        > = ::windows::core::FactoryCache::new();
        SHARED.call(callback)
    }
    pub fn GetValue(
        &self,
        dp: &super::super::DependencyProperty,
    ) -> ::windows::core::Result<::windows::core::IInspectable> {
        let this = &::windows::core::Interface::cast::<super::super::IDependencyObject>(self)?;
        unsafe {
            let mut result__ = ::core::mem::MaybeUninit::zeroed();
            (::windows::core::Vtable::vtable(this).GetValue)(
                ::windows::core::Vtable::as_raw(this),
                ::core::mem::transmute_copy(dp),
                result__.as_mut_ptr(),
            )
            .from_abi::<::windows::core::IInspectable>(result__)
        }
    }
    pub fn SetValue<'a, P0>(
        &self,
        dp: &super::super::DependencyProperty,
        value: P0,
    ) -> ::windows::core::Result<()>
    where
        P0: ::std::convert::Into<::windows::core::InParam<'a, ::windows::core::IInspectable>>,
    {
        let this = &::windows::core::Interface::cast::<super::super::IDependencyObject>(self)?;
        unsafe {
            (::windows::core::Vtable::vtable(this).SetValue)(
                ::windows::core::Vtable::as_raw(this),
                ::core::mem::transmute_copy(dp),
                value.into().abi(),
            )
            .ok()
        }
    }
    pub fn ClearValue(&self, dp: &super::super::DependencyProperty) -> ::windows::core::Result<()> {
        let this = &::windows::core::Interface::cast::<super::super::IDependencyObject>(self)?;
        unsafe {
            (::windows::core::Vtable::vtable(this).ClearValue)(
                ::windows::core::Vtable::as_raw(this),
                ::core::mem::transmute_copy(dp),
            )
            .ok()
        }
    }
    pub fn ReadLocalValue(
        &self,
        dp: &super::super::DependencyProperty,
    ) -> ::windows::core::Result<::windows::core::IInspectable> {
        let this = &::windows::core::Interface::cast::<super::super::IDependencyObject>(self)?;
        unsafe {
            let mut result__ = ::core::mem::MaybeUninit::zeroed();
            (::windows::core::Vtable::vtable(this).ReadLocalValue)(
                ::windows::core::Vtable::as_raw(this),
                ::core::mem::transmute_copy(dp),
                result__.as_mut_ptr(),
            )
            .from_abi::<::windows::core::IInspectable>(result__)
        }
    }
    pub fn GetAnimationBaseValue(
        &self,
        dp: &super::super::DependencyProperty,
    ) -> ::windows::core::Result<::windows::core::IInspectable> {
        let this = &::windows::core::Interface::cast::<super::super::IDependencyObject>(self)?;
        unsafe {
            let mut result__ = ::core::mem::MaybeUninit::zeroed();
            (::windows::core::Vtable::vtable(this).GetAnimationBaseValue)(
                ::windows::core::Vtable::as_raw(this),
                ::core::mem::transmute_copy(dp),
                result__.as_mut_ptr(),
            )
            .from_abi::<::windows::core::IInspectable>(result__)
        }
    }
    pub fn RegisterPropertyChangedCallback(
        &self,
        dp: &super::super::DependencyProperty,
        callback: &super::super::DependencyPropertyChangedCallback,
    ) -> ::windows::core::Result<i64> {
        let this = &::windows::core::Interface::cast::<super::super::IDependencyObject>(self)?;
        unsafe {
            let mut result__ = ::core::mem::MaybeUninit::zeroed();
            (::windows::core::Vtable::vtable(this).RegisterPropertyChangedCallback)(
                ::windows::core::Vtable::as_raw(this),
                ::core::mem::transmute_copy(dp),
                ::core::mem::transmute_copy(callback),
                result__.as_mut_ptr(),
            )
            .from_abi::<i64>(result__)
        }
    }
    pub fn UnregisterPropertyChangedCallback(
        &self,
        dp: &super::super::DependencyProperty,
        token: i64,
    ) -> ::windows::core::Result<()> {
        let this = &::windows::core::Interface::cast::<super::super::IDependencyObject>(self)?;
        unsafe {
            (::windows::core::Vtable::vtable(this).UnregisterPropertyChangedCallback)(
                ::windows::core::Vtable::as_raw(this),
                ::core::mem::transmute_copy(dp),
                token,
            )
            .ok()
        }
    }
    pub fn Dispatcher(&self) -> ::windows::core::Result<::windows::UI::Core::CoreDispatcher> {
        let this = &::windows::core::Interface::cast::<super::super::IDependencyObject>(self)?;
        unsafe {
            let mut result__ = ::core::mem::MaybeUninit::zeroed();
            (::windows::core::Vtable::vtable(this).Dispatcher)(
                ::windows::core::Vtable::as_raw(this),
                result__.as_mut_ptr(),
            )
            .from_abi::<::windows::UI::Core::CoreDispatcher>(result__)
        }
    }
    #[doc = "*Required features: `\"UI_Dispatching\"`*"]
    #[cfg(feature = "UI_Dispatching")]
    pub fn DispatcherQueue(
        &self,
    ) -> ::windows::core::Result<super::super::super::Dispatching::DispatcherQueue> {
        let this = &::windows::core::Interface::cast::<super::super::IDependencyObject>(self)?;
        unsafe {
            let mut result__ = ::core::mem::MaybeUninit::zeroed();
            (::windows::core::Vtable::vtable(this).DispatcherQueue)(
                ::windows::core::Vtable::as_raw(this),
                result__.as_mut_ptr(),
            )
            .from_abi::<super::super::super::Dispatching::DispatcherQueue>(result__)
        }
    }
    pub fn TargetName(&self) -> ::windows::core::Result<::windows::core::HSTRING> {
        let this = self;
        unsafe {
            let mut result__ = ::core::mem::MaybeUninit::zeroed();
            (::windows::core::Vtable::vtable(this).TargetName)(
                ::windows::core::Vtable::as_raw(this),
                result__.as_mut_ptr(),
            )
            .from_abi::<::windows::core::HSTRING>(result__)
        }
    }
    pub fn SetTargetName(&self, value: &::windows::core::HSTRING) -> ::windows::core::Result<()> {
        let this = self;
        unsafe {
            (::windows::core::Vtable::vtable(this).SetTargetName)(
                ::windows::core::Vtable::as_raw(this),
                ::core::mem::transmute_copy(value),
            )
            .ok()
        }
    }
    pub fn ToOffset(&self) -> ::windows::core::Result<f64> {
        let this = self;
        unsafe {
            let mut result__ = ::core::mem::MaybeUninit::zeroed();
            (::windows::core::Vtable::vtable(this).ToOffset)(
                ::windows::core::Vtable::as_raw(this),
                result__.as_mut_ptr(),
            )
            .from_abi::<f64>(result__)
        }
    }
    pub fn SetToOffset(&self, value: f64) -> ::windows::core::Result<()> {
        let this = self;
        unsafe {
            (::windows::core::Vtable::vtable(this).SetToOffset)(
                ::windows::core::Vtable::as_raw(this),
                value,
            )
            .ok()
        }
    }
    #[doc = "*Required features: `\"UI_Xaml_Controls_Primitives\"`*"]
    #[cfg(feature = "UI_Xaml_Controls_Primitives")]
    pub fn Direction(
        &self,
    ) -> ::windows::core::Result<super::super::Controls::Primitives::AnimationDirection> {
        let this = self;
        unsafe {
            let mut result__ = ::core::mem::MaybeUninit::zeroed();
            (::windows::core::Vtable::vtable(this).Direction)(
                ::windows::core::Vtable::as_raw(this),
                result__.as_mut_ptr(),
            )
            .from_abi::<super::super::Controls::Primitives::AnimationDirection>(result__)
        }
    }
    #[doc = "*Required features: `\"UI_Xaml_Controls_Primitives\"`*"]
    #[cfg(feature = "UI_Xaml_Controls_Primitives")]
    pub fn SetDirection(
        &self,
        value: super::super::Controls::Primitives::AnimationDirection,
    ) -> ::windows::core::Result<()> {
        let this = self;
        unsafe {
            (::windows::core::Vtable::vtable(this).SetDirection)(
                ::windows::core::Vtable::as_raw(this),
                value,
            )
            .ok()
        }
    }
    pub fn TargetNameProperty() -> ::windows::core::Result<super::super::DependencyProperty> {
        Self::IDragOverThemeAnimationStatics(|this| unsafe {
            let mut result__ = ::core::mem::MaybeUninit::zeroed();
            (::windows::core::Vtable::vtable(this).TargetNameProperty)(
                ::windows::core::Vtable::as_raw(this),
                result__.as_mut_ptr(),
            )
            .from_abi::<super::super::DependencyProperty>(result__)
        })
    }
    pub fn ToOffsetProperty() -> ::windows::core::Result<super::super::DependencyProperty> {
        Self::IDragOverThemeAnimationStatics(|this| unsafe {
            let mut result__ = ::core::mem::MaybeUninit::zeroed();
            (::windows::core::Vtable::vtable(this).ToOffsetProperty)(
                ::windows::core::Vtable::as_raw(this),
                result__.as_mut_ptr(),
            )
            .from_abi::<super::super::DependencyProperty>(result__)
        })
    }
    pub fn DirectionProperty() -> ::windows::core::Result<super::super::DependencyProperty> {
        Self::IDragOverThemeAnimationStatics(|this| unsafe {
            let mut result__ = ::core::mem::MaybeUninit::zeroed();
            (::windows::core::Vtable::vtable(this).DirectionProperty)(
                ::windows::core::Vtable::as_raw(this),
                result__.as_mut_ptr(),
            )
            .from_abi::<super::super::DependencyProperty>(result__)
        })
    }
    pub fn AutoReverse(&self) -> ::windows::core::Result<bool> {
        let this = &::windows::core::Interface::cast::<ITimeline>(self)?;
        unsafe {
            let mut result__ = ::core::mem::MaybeUninit::zeroed();
            (::windows::core::Vtable::vtable(this).AutoReverse)(
                ::windows::core::Vtable::as_raw(this),
                result__.as_mut_ptr(),
            )
            .from_abi::<bool>(result__)
        }
    }
    pub fn SetAutoReverse(&self, value: bool) -> ::windows::core::Result<()> {
        let this = &::windows::core::Interface::cast::<ITimeline>(self)?;
        unsafe {
            (::windows::core::Vtable::vtable(this).SetAutoReverse)(
                ::windows::core::Vtable::as_raw(this),
                value,
            )
            .ok()
        }
    }
    pub fn BeginTime(
        &self,
    ) -> ::windows::core::Result<::windows::Foundation::IReference<::windows::Foundation::TimeSpan>>
    {
        let this = &::windows::core::Interface::cast::<ITimeline>(self)?;
        unsafe {
            let mut result__ = ::core::mem::MaybeUninit::zeroed();
            (::windows::core::Vtable::vtable(this).BeginTime)(
                ::windows::core::Vtable::as_raw(this),
                result__.as_mut_ptr(),
            )
            .from_abi::<::windows::Foundation::IReference<::windows::Foundation::TimeSpan>>(
                result__,
            )
        }
    }
    pub fn SetBeginTime<'a, P0, E0>(&self, value: P0) -> ::windows::core::Result<()>
    where
        P0: ::std::convert::TryInto<
            ::windows::core::InParam<
                'a,
                ::windows::Foundation::IReference<::windows::Foundation::TimeSpan>,
            >,
            Error = E0,
        >,
        E0: ::std::convert::Into<::windows::core::Error>,
    {
        let this = &::windows::core::Interface::cast::<ITimeline>(self)?;
        unsafe {
            (::windows::core::Vtable::vtable(this).SetBeginTime)(
                ::windows::core::Vtable::as_raw(this),
                value.try_into().map_err(|e| e.into())?.abi(),
            )
            .ok()
        }
    }
    pub fn Duration(&self) -> ::windows::core::Result<super::super::Duration> {
        let this = &::windows::core::Interface::cast::<ITimeline>(self)?;
        unsafe {
            let mut result__ = ::core::mem::MaybeUninit::zeroed();
            (::windows::core::Vtable::vtable(this).Duration)(
                ::windows::core::Vtable::as_raw(this),
                result__.as_mut_ptr(),
            )
            .from_abi::<super::super::Duration>(result__)
        }
    }
    pub fn SetDuration(&self, value: super::super::Duration) -> ::windows::core::Result<()> {
        let this = &::windows::core::Interface::cast::<ITimeline>(self)?;
        unsafe {
            (::windows::core::Vtable::vtable(this).SetDuration)(
                ::windows::core::Vtable::as_raw(this),
                value,
            )
            .ok()
        }
    }
    pub fn SpeedRatio(&self) -> ::windows::core::Result<f64> {
        let this = &::windows::core::Interface::cast::<ITimeline>(self)?;
        unsafe {
            let mut result__ = ::core::mem::MaybeUninit::zeroed();
            (::windows::core::Vtable::vtable(this).SpeedRatio)(
                ::windows::core::Vtable::as_raw(this),
                result__.as_mut_ptr(),
            )
            .from_abi::<f64>(result__)
        }
    }
    pub fn SetSpeedRatio(&self, value: f64) -> ::windows::core::Result<()> {
        let this = &::windows::core::Interface::cast::<ITimeline>(self)?;
        unsafe {
            (::windows::core::Vtable::vtable(this).SetSpeedRatio)(
                ::windows::core::Vtable::as_raw(this),
                value,
            )
            .ok()
        }
    }
    pub fn FillBehavior(&self) -> ::windows::core::Result<FillBehavior> {
        let this = &::windows::core::Interface::cast::<ITimeline>(self)?;
        unsafe {
            let mut result__ = ::core::mem::MaybeUninit::zeroed();
            (::windows::core::Vtable::vtable(this).FillBehavior)(
                ::windows::core::Vtable::as_raw(this),
                result__.as_mut_ptr(),
            )
            .from_abi::<FillBehavior>(result__)
        }
    }
    pub fn SetFillBehavior(&self, value: FillBehavior) -> ::windows::core::Result<()> {
        let this = &::windows::core::Interface::cast::<ITimeline>(self)?;
        unsafe {
            (::windows::core::Vtable::vtable(this).SetFillBehavior)(
                ::windows::core::Vtable::as_raw(this),
                value,
            )
            .ok()
        }
    }
    pub fn RepeatBehavior(&self) -> ::windows::core::Result<RepeatBehavior> {
        let this = &::windows::core::Interface::cast::<ITimeline>(self)?;
        unsafe {
            let mut result__ = ::core::mem::MaybeUninit::zeroed();
            (::windows::core::Vtable::vtable(this).RepeatBehavior)(
                ::windows::core::Vtable::as_raw(this),
                result__.as_mut_ptr(),
            )
            .from_abi::<RepeatBehavior>(result__)
        }
    }
    pub fn SetRepeatBehavior(&self, value: RepeatBehavior) -> ::windows::core::Result<()> {
        let this = &::windows::core::Interface::cast::<ITimeline>(self)?;
        unsafe {
            (::windows::core::Vtable::vtable(this).SetRepeatBehavior)(
                ::windows::core::Vtable::as_raw(this),
                value,
            )
            .ok()
        }
    }
    pub fn Completed(
        &self,
        handler: &::windows::Foundation::EventHandler<::windows::core::IInspectable>,
    ) -> ::windows::core::Result<::windows::Foundation::EventRegistrationToken> {
        let this = &::windows::core::Interface::cast::<ITimeline>(self)?;
        unsafe {
            let mut result__ = ::core::mem::MaybeUninit::zeroed();
            (::windows::core::Vtable::vtable(this).Completed)(
                ::windows::core::Vtable::as_raw(this),
                ::core::mem::transmute_copy(handler),
                result__.as_mut_ptr(),
            )
            .from_abi::<::windows::Foundation::EventRegistrationToken>(result__)
        }
    }
    pub fn RemoveCompleted(
        &self,
        token: ::windows::Foundation::EventRegistrationToken,
    ) -> ::windows::core::Result<()> {
        let this = &::windows::core::Interface::cast::<ITimeline>(self)?;
        unsafe {
            (::windows::core::Vtable::vtable(this).RemoveCompleted)(
                ::windows::core::Vtable::as_raw(this),
                token,
            )
            .ok()
        }
    }
    #[doc(hidden)]
    pub fn IDragOverThemeAnimationStatics<
        R,
        F: FnOnce(&IDragOverThemeAnimationStatics) -> ::windows::core::Result<R>,
    >(
        callback: F,
    ) -> ::windows::core::Result<R> {
        static SHARED: ::windows::core::FactoryCache<
            DragOverThemeAnimation,
            IDragOverThemeAnimationStatics,
        > = ::windows::core::FactoryCache::new();
        SHARED.call(callback)
    }
}
impl ::core::clone::Clone for DragOverThemeAnimation {
    fn clone(&self) -> Self {
        Self(self.0.clone())
    }
}
impl ::core::cmp::PartialEq for DragOverThemeAnimation {
    fn eq(&self, other: &Self) -> bool {
        self.0 == other.0
    }
}
impl ::core::cmp::Eq for DragOverThemeAnimation {}
impl ::core::fmt::Debug for DragOverThemeAnimation {
    fn fmt(&self, f: &mut ::core::fmt::Formatter<'_>) -> ::core::fmt::Result {
        f.debug_tuple("DragOverThemeAnimation").field(&self.0).finish()
    }
}
unsafe impl ::windows::core::RuntimeType for DragOverThemeAnimation {
    const SIGNATURE : ::windows::core::ConstBuffer = ::windows::core::ConstBuffer::from_slice ( b"rc(Microsoft.UI.Xaml.Media.Animation.DragOverThemeAnimation;{633cd3c0-71af-52fd-993e-504e3e6f56d4})" ) ;
    type DefaultType = ::core::option::Option<Self>;
    fn from_default(from: &Self::DefaultType) -> ::windows::core::Result<Self> {
        from.as_ref().cloned().ok_or(::windows::core::Error::OK)
    }
}
unsafe impl ::windows::core::Vtable for DragOverThemeAnimation {
    type Vtable = IDragOverThemeAnimation_Vtbl;
}
unsafe impl ::windows::core::Interface for DragOverThemeAnimation {
    const IID: ::windows::core::GUID = <IDragOverThemeAnimation as ::windows::core::Interface>::IID;
}
impl ::windows::core::RuntimeName for DragOverThemeAnimation {
    const NAME: &'static str = "Microsoft.UI.Xaml.Media.Animation.DragOverThemeAnimation";
}
::windows::core::interface_hierarchy!(
    DragOverThemeAnimation,
    ::windows::core::IUnknown,
    ::windows::core::IInspectable
);
impl ::core::convert::From<DragOverThemeAnimation> for Timeline {
    fn from(value: DragOverThemeAnimation) -> Self {
        ::core::convert::From::from(&value)
    }
}
impl ::core::convert::From<&DragOverThemeAnimation> for Timeline {
    fn from(value: &DragOverThemeAnimation) -> Self {
        ::windows::core::Interface::cast(value).unwrap()
    }
}
impl<'a> ::core::convert::From<&DragOverThemeAnimation> for ::windows::core::InParam<'a, Timeline> {
    fn from(value: &DragOverThemeAnimation) -> Self {
        ::windows::core::InParam::owned(value.into())
    }
}
impl ::core::convert::From<DragOverThemeAnimation> for super::super::DependencyObject {
    fn from(value: DragOverThemeAnimation) -> Self {
        ::core::convert::From::from(&value)
    }
}
impl ::core::convert::From<&DragOverThemeAnimation> for super::super::DependencyObject {
    fn from(value: &DragOverThemeAnimation) -> Self {
        ::windows::core::Interface::cast(value).unwrap()
    }
}
impl<'a> ::core::convert::From<&DragOverThemeAnimation>
    for ::windows::core::InParam<'a, super::super::DependencyObject>
{
    fn from(value: &DragOverThemeAnimation) -> Self {
        ::windows::core::InParam::owned(value.into())
    }
}
unsafe impl ::core::marker::Send for DragOverThemeAnimation {}
unsafe impl ::core::marker::Sync for DragOverThemeAnimation {}
#[doc = "*Required features: `\"UI_Xaml_Media_Animation\"`*"]
#[repr(transparent)]
pub struct DrillInNavigationTransitionInfo(::windows::core::IUnknown);
impl DrillInNavigationTransitionInfo {
    pub fn new() -> ::windows::core::Result<Self> {
        Self::IActivationFactory(|f| f.ActivateInstance::<Self>())
    }
    fn IActivationFactory<
        R,
        F: FnOnce(&::windows::core::IGenericFactory) -> ::windows::core::Result<R>,
    >(
        callback: F,
    ) -> ::windows::core::Result<R> {
        static SHARED: ::windows::core::FactoryCache<
            DrillInNavigationTransitionInfo,
            ::windows::core::IGenericFactory,
        > = ::windows::core::FactoryCache::new();
        SHARED.call(callback)
    }
    pub fn GetValue(
        &self,
        dp: &super::super::DependencyProperty,
    ) -> ::windows::core::Result<::windows::core::IInspectable> {
        let this = &::windows::core::Interface::cast::<super::super::IDependencyObject>(self)?;
        unsafe {
            let mut result__ = ::core::mem::MaybeUninit::zeroed();
            (::windows::core::Vtable::vtable(this).GetValue)(
                ::windows::core::Vtable::as_raw(this),
                ::core::mem::transmute_copy(dp),
                result__.as_mut_ptr(),
            )
            .from_abi::<::windows::core::IInspectable>(result__)
        }
    }
    pub fn SetValue<'a, P0>(
        &self,
        dp: &super::super::DependencyProperty,
        value: P0,
    ) -> ::windows::core::Result<()>
    where
        P0: ::std::convert::Into<::windows::core::InParam<'a, ::windows::core::IInspectable>>,
    {
        let this = &::windows::core::Interface::cast::<super::super::IDependencyObject>(self)?;
        unsafe {
            (::windows::core::Vtable::vtable(this).SetValue)(
                ::windows::core::Vtable::as_raw(this),
                ::core::mem::transmute_copy(dp),
                value.into().abi(),
            )
            .ok()
        }
    }
    pub fn ClearValue(&self, dp: &super::super::DependencyProperty) -> ::windows::core::Result<()> {
        let this = &::windows::core::Interface::cast::<super::super::IDependencyObject>(self)?;
        unsafe {
            (::windows::core::Vtable::vtable(this).ClearValue)(
                ::windows::core::Vtable::as_raw(this),
                ::core::mem::transmute_copy(dp),
            )
            .ok()
        }
    }
    pub fn ReadLocalValue(
        &self,
        dp: &super::super::DependencyProperty,
    ) -> ::windows::core::Result<::windows::core::IInspectable> {
        let this = &::windows::core::Interface::cast::<super::super::IDependencyObject>(self)?;
        unsafe {
            let mut result__ = ::core::mem::MaybeUninit::zeroed();
            (::windows::core::Vtable::vtable(this).ReadLocalValue)(
                ::windows::core::Vtable::as_raw(this),
                ::core::mem::transmute_copy(dp),
                result__.as_mut_ptr(),
            )
            .from_abi::<::windows::core::IInspectable>(result__)
        }
    }
    pub fn GetAnimationBaseValue(
        &self,
        dp: &super::super::DependencyProperty,
    ) -> ::windows::core::Result<::windows::core::IInspectable> {
        let this = &::windows::core::Interface::cast::<super::super::IDependencyObject>(self)?;
        unsafe {
            let mut result__ = ::core::mem::MaybeUninit::zeroed();
            (::windows::core::Vtable::vtable(this).GetAnimationBaseValue)(
                ::windows::core::Vtable::as_raw(this),
                ::core::mem::transmute_copy(dp),
                result__.as_mut_ptr(),
            )
            .from_abi::<::windows::core::IInspectable>(result__)
        }
    }
    pub fn RegisterPropertyChangedCallback(
        &self,
        dp: &super::super::DependencyProperty,
        callback: &super::super::DependencyPropertyChangedCallback,
    ) -> ::windows::core::Result<i64> {
        let this = &::windows::core::Interface::cast::<super::super::IDependencyObject>(self)?;
        unsafe {
            let mut result__ = ::core::mem::MaybeUninit::zeroed();
            (::windows::core::Vtable::vtable(this).RegisterPropertyChangedCallback)(
                ::windows::core::Vtable::as_raw(this),
                ::core::mem::transmute_copy(dp),
                ::core::mem::transmute_copy(callback),
                result__.as_mut_ptr(),
            )
            .from_abi::<i64>(result__)
        }
    }
    pub fn UnregisterPropertyChangedCallback(
        &self,
        dp: &super::super::DependencyProperty,
        token: i64,
    ) -> ::windows::core::Result<()> {
        let this = &::windows::core::Interface::cast::<super::super::IDependencyObject>(self)?;
        unsafe {
            (::windows::core::Vtable::vtable(this).UnregisterPropertyChangedCallback)(
                ::windows::core::Vtable::as_raw(this),
                ::core::mem::transmute_copy(dp),
                token,
            )
            .ok()
        }
    }
    pub fn Dispatcher(&self) -> ::windows::core::Result<::windows::UI::Core::CoreDispatcher> {
        let this = &::windows::core::Interface::cast::<super::super::IDependencyObject>(self)?;
        unsafe {
            let mut result__ = ::core::mem::MaybeUninit::zeroed();
            (::windows::core::Vtable::vtable(this).Dispatcher)(
                ::windows::core::Vtable::as_raw(this),
                result__.as_mut_ptr(),
            )
            .from_abi::<::windows::UI::Core::CoreDispatcher>(result__)
        }
    }
    #[doc = "*Required features: `\"UI_Dispatching\"`*"]
    #[cfg(feature = "UI_Dispatching")]
    pub fn DispatcherQueue(
        &self,
    ) -> ::windows::core::Result<super::super::super::Dispatching::DispatcherQueue> {
        let this = &::windows::core::Interface::cast::<super::super::IDependencyObject>(self)?;
        unsafe {
            let mut result__ = ::core::mem::MaybeUninit::zeroed();
            (::windows::core::Vtable::vtable(this).DispatcherQueue)(
                ::windows::core::Vtable::as_raw(this),
                result__.as_mut_ptr(),
            )
            .from_abi::<super::super::super::Dispatching::DispatcherQueue>(result__)
        }
    }
}
impl ::core::clone::Clone for DrillInNavigationTransitionInfo {
    fn clone(&self) -> Self {
        Self(self.0.clone())
    }
}
impl ::core::cmp::PartialEq for DrillInNavigationTransitionInfo {
    fn eq(&self, other: &Self) -> bool {
        self.0 == other.0
    }
}
impl ::core::cmp::Eq for DrillInNavigationTransitionInfo {}
impl ::core::fmt::Debug for DrillInNavigationTransitionInfo {
    fn fmt(&self, f: &mut ::core::fmt::Formatter<'_>) -> ::core::fmt::Result {
        f.debug_tuple("DrillInNavigationTransitionInfo").field(&self.0).finish()
    }
}
unsafe impl ::windows::core::RuntimeType for DrillInNavigationTransitionInfo {
    const SIGNATURE : ::windows::core::ConstBuffer = ::windows::core::ConstBuffer::from_slice ( b"rc(Microsoft.UI.Xaml.Media.Animation.DrillInNavigationTransitionInfo;{5d5863d6-4bbf-5b30-94fa-034531cfa2aa})" ) ;
    type DefaultType = ::core::option::Option<Self>;
    fn from_default(from: &Self::DefaultType) -> ::windows::core::Result<Self> {
        from.as_ref().cloned().ok_or(::windows::core::Error::OK)
    }
}
unsafe impl ::windows::core::Vtable for DrillInNavigationTransitionInfo {
    type Vtable = IDrillInNavigationTransitionInfo_Vtbl;
}
unsafe impl ::windows::core::Interface for DrillInNavigationTransitionInfo {
    const IID: ::windows::core::GUID =
        <IDrillInNavigationTransitionInfo as ::windows::core::Interface>::IID;
}
impl ::windows::core::RuntimeName for DrillInNavigationTransitionInfo {
    const NAME: &'static str = "Microsoft.UI.Xaml.Media.Animation.DrillInNavigationTransitionInfo";
}
::windows::core::interface_hierarchy!(
    DrillInNavigationTransitionInfo,
    ::windows::core::IUnknown,
    ::windows::core::IInspectable
);
impl ::core::convert::From<DrillInNavigationTransitionInfo> for NavigationTransitionInfo {
    fn from(value: DrillInNavigationTransitionInfo) -> Self {
        ::core::convert::From::from(&value)
    }
}
impl ::core::convert::From<&DrillInNavigationTransitionInfo> for NavigationTransitionInfo {
    fn from(value: &DrillInNavigationTransitionInfo) -> Self {
        ::windows::core::Interface::cast(value).unwrap()
    }
}
impl<'a> ::core::convert::From<&DrillInNavigationTransitionInfo>
    for ::windows::core::InParam<'a, NavigationTransitionInfo>
{
    fn from(value: &DrillInNavigationTransitionInfo) -> Self {
        ::windows::core::InParam::owned(value.into())
    }
}
impl ::core::convert::From<DrillInNavigationTransitionInfo> for super::super::DependencyObject {
    fn from(value: DrillInNavigationTransitionInfo) -> Self {
        ::core::convert::From::from(&value)
    }
}
impl ::core::convert::From<&DrillInNavigationTransitionInfo> for super::super::DependencyObject {
    fn from(value: &DrillInNavigationTransitionInfo) -> Self {
        ::windows::core::Interface::cast(value).unwrap()
    }
}
impl<'a> ::core::convert::From<&DrillInNavigationTransitionInfo>
    for ::windows::core::InParam<'a, super::super::DependencyObject>
{
    fn from(value: &DrillInNavigationTransitionInfo) -> Self {
        ::windows::core::InParam::owned(value.into())
    }
}
unsafe impl ::core::marker::Send for DrillInNavigationTransitionInfo {}
unsafe impl ::core::marker::Sync for DrillInNavigationTransitionInfo {}
#[doc = "*Required features: `\"UI_Xaml_Media_Animation\"`*"]
#[repr(transparent)]
pub struct DrillInThemeAnimation(::windows::core::IUnknown);
impl DrillInThemeAnimation {
    pub fn new() -> ::windows::core::Result<Self> {
        Self::IActivationFactory(|f| f.ActivateInstance::<Self>())
    }
    fn IActivationFactory<
        R,
        F: FnOnce(&::windows::core::IGenericFactory) -> ::windows::core::Result<R>,
    >(
        callback: F,
    ) -> ::windows::core::Result<R> {
        static SHARED: ::windows::core::FactoryCache<
            DrillInThemeAnimation,
            ::windows::core::IGenericFactory,
        > = ::windows::core::FactoryCache::new();
        SHARED.call(callback)
    }
    pub fn GetValue(
        &self,
        dp: &super::super::DependencyProperty,
    ) -> ::windows::core::Result<::windows::core::IInspectable> {
        let this = &::windows::core::Interface::cast::<super::super::IDependencyObject>(self)?;
        unsafe {
            let mut result__ = ::core::mem::MaybeUninit::zeroed();
            (::windows::core::Vtable::vtable(this).GetValue)(
                ::windows::core::Vtable::as_raw(this),
                ::core::mem::transmute_copy(dp),
                result__.as_mut_ptr(),
            )
            .from_abi::<::windows::core::IInspectable>(result__)
        }
    }
    pub fn SetValue<'a, P0>(
        &self,
        dp: &super::super::DependencyProperty,
        value: P0,
    ) -> ::windows::core::Result<()>
    where
        P0: ::std::convert::Into<::windows::core::InParam<'a, ::windows::core::IInspectable>>,
    {
        let this = &::windows::core::Interface::cast::<super::super::IDependencyObject>(self)?;
        unsafe {
            (::windows::core::Vtable::vtable(this).SetValue)(
                ::windows::core::Vtable::as_raw(this),
                ::core::mem::transmute_copy(dp),
                value.into().abi(),
            )
            .ok()
        }
    }
    pub fn ClearValue(&self, dp: &super::super::DependencyProperty) -> ::windows::core::Result<()> {
        let this = &::windows::core::Interface::cast::<super::super::IDependencyObject>(self)?;
        unsafe {
            (::windows::core::Vtable::vtable(this).ClearValue)(
                ::windows::core::Vtable::as_raw(this),
                ::core::mem::transmute_copy(dp),
            )
            .ok()
        }
    }
    pub fn ReadLocalValue(
        &self,
        dp: &super::super::DependencyProperty,
    ) -> ::windows::core::Result<::windows::core::IInspectable> {
        let this = &::windows::core::Interface::cast::<super::super::IDependencyObject>(self)?;
        unsafe {
            let mut result__ = ::core::mem::MaybeUninit::zeroed();
            (::windows::core::Vtable::vtable(this).ReadLocalValue)(
                ::windows::core::Vtable::as_raw(this),
                ::core::mem::transmute_copy(dp),
                result__.as_mut_ptr(),
            )
            .from_abi::<::windows::core::IInspectable>(result__)
        }
    }
    pub fn GetAnimationBaseValue(
        &self,
        dp: &super::super::DependencyProperty,
    ) -> ::windows::core::Result<::windows::core::IInspectable> {
        let this = &::windows::core::Interface::cast::<super::super::IDependencyObject>(self)?;
        unsafe {
            let mut result__ = ::core::mem::MaybeUninit::zeroed();
            (::windows::core::Vtable::vtable(this).GetAnimationBaseValue)(
                ::windows::core::Vtable::as_raw(this),
                ::core::mem::transmute_copy(dp),
                result__.as_mut_ptr(),
            )
            .from_abi::<::windows::core::IInspectable>(result__)
        }
    }
    pub fn RegisterPropertyChangedCallback(
        &self,
        dp: &super::super::DependencyProperty,
        callback: &super::super::DependencyPropertyChangedCallback,
    ) -> ::windows::core::Result<i64> {
        let this = &::windows::core::Interface::cast::<super::super::IDependencyObject>(self)?;
        unsafe {
            let mut result__ = ::core::mem::MaybeUninit::zeroed();
            (::windows::core::Vtable::vtable(this).RegisterPropertyChangedCallback)(
                ::windows::core::Vtable::as_raw(this),
                ::core::mem::transmute_copy(dp),
                ::core::mem::transmute_copy(callback),
                result__.as_mut_ptr(),
            )
            .from_abi::<i64>(result__)
        }
    }
    pub fn UnregisterPropertyChangedCallback(
        &self,
        dp: &super::super::DependencyProperty,
        token: i64,
    ) -> ::windows::core::Result<()> {
        let this = &::windows::core::Interface::cast::<super::super::IDependencyObject>(self)?;
        unsafe {
            (::windows::core::Vtable::vtable(this).UnregisterPropertyChangedCallback)(
                ::windows::core::Vtable::as_raw(this),
                ::core::mem::transmute_copy(dp),
                token,
            )
            .ok()
        }
    }
    pub fn Dispatcher(&self) -> ::windows::core::Result<::windows::UI::Core::CoreDispatcher> {
        let this = &::windows::core::Interface::cast::<super::super::IDependencyObject>(self)?;
        unsafe {
            let mut result__ = ::core::mem::MaybeUninit::zeroed();
            (::windows::core::Vtable::vtable(this).Dispatcher)(
                ::windows::core::Vtable::as_raw(this),
                result__.as_mut_ptr(),
            )
            .from_abi::<::windows::UI::Core::CoreDispatcher>(result__)
        }
    }
    #[doc = "*Required features: `\"UI_Dispatching\"`*"]
    #[cfg(feature = "UI_Dispatching")]
    pub fn DispatcherQueue(
        &self,
    ) -> ::windows::core::Result<super::super::super::Dispatching::DispatcherQueue> {
        let this = &::windows::core::Interface::cast::<super::super::IDependencyObject>(self)?;
        unsafe {
            let mut result__ = ::core::mem::MaybeUninit::zeroed();
            (::windows::core::Vtable::vtable(this).DispatcherQueue)(
                ::windows::core::Vtable::as_raw(this),
                result__.as_mut_ptr(),
            )
            .from_abi::<super::super::super::Dispatching::DispatcherQueue>(result__)
        }
    }
    pub fn EntranceTargetName(&self) -> ::windows::core::Result<::windows::core::HSTRING> {
        let this = self;
        unsafe {
            let mut result__ = ::core::mem::MaybeUninit::zeroed();
            (::windows::core::Vtable::vtable(this).EntranceTargetName)(
                ::windows::core::Vtable::as_raw(this),
                result__.as_mut_ptr(),
            )
            .from_abi::<::windows::core::HSTRING>(result__)
        }
    }
    pub fn SetEntranceTargetName(
        &self,
        value: &::windows::core::HSTRING,
    ) -> ::windows::core::Result<()> {
        let this = self;
        unsafe {
            (::windows::core::Vtable::vtable(this).SetEntranceTargetName)(
                ::windows::core::Vtable::as_raw(this),
                ::core::mem::transmute_copy(value),
            )
            .ok()
        }
    }
    pub fn EntranceTarget(&self) -> ::windows::core::Result<super::super::DependencyObject> {
        let this = self;
        unsafe {
            let mut result__ = ::core::mem::MaybeUninit::zeroed();
            (::windows::core::Vtable::vtable(this).EntranceTarget)(
                ::windows::core::Vtable::as_raw(this),
                result__.as_mut_ptr(),
            )
            .from_abi::<super::super::DependencyObject>(result__)
        }
    }
    pub fn SetEntranceTarget<'a, P0>(&self, value: P0) -> ::windows::core::Result<()>
    where
        P0: ::std::convert::Into<::windows::core::InParam<'a, super::super::DependencyObject>>,
    {
        let this = self;
        unsafe {
            (::windows::core::Vtable::vtable(this).SetEntranceTarget)(
                ::windows::core::Vtable::as_raw(this),
                value.into().abi(),
            )
            .ok()
        }
    }
    pub fn ExitTargetName(&self) -> ::windows::core::Result<::windows::core::HSTRING> {
        let this = self;
        unsafe {
            let mut result__ = ::core::mem::MaybeUninit::zeroed();
            (::windows::core::Vtable::vtable(this).ExitTargetName)(
                ::windows::core::Vtable::as_raw(this),
                result__.as_mut_ptr(),
            )
            .from_abi::<::windows::core::HSTRING>(result__)
        }
    }
    pub fn SetExitTargetName(
        &self,
        value: &::windows::core::HSTRING,
    ) -> ::windows::core::Result<()> {
        let this = self;
        unsafe {
            (::windows::core::Vtable::vtable(this).SetExitTargetName)(
                ::windows::core::Vtable::as_raw(this),
                ::core::mem::transmute_copy(value),
            )
            .ok()
        }
    }
    pub fn ExitTarget(&self) -> ::windows::core::Result<super::super::DependencyObject> {
        let this = self;
        unsafe {
            let mut result__ = ::core::mem::MaybeUninit::zeroed();
            (::windows::core::Vtable::vtable(this).ExitTarget)(
                ::windows::core::Vtable::as_raw(this),
                result__.as_mut_ptr(),
            )
            .from_abi::<super::super::DependencyObject>(result__)
        }
    }
    pub fn SetExitTarget<'a, P0>(&self, value: P0) -> ::windows::core::Result<()>
    where
        P0: ::std::convert::Into<::windows::core::InParam<'a, super::super::DependencyObject>>,
    {
        let this = self;
        unsafe {
            (::windows::core::Vtable::vtable(this).SetExitTarget)(
                ::windows::core::Vtable::as_raw(this),
                value.into().abi(),
            )
            .ok()
        }
    }
    pub fn EntranceTargetNameProperty() -> ::windows::core::Result<super::super::DependencyProperty>
    {
        Self::IDrillInThemeAnimationStatics(|this| unsafe {
            let mut result__ = ::core::mem::MaybeUninit::zeroed();
            (::windows::core::Vtable::vtable(this).EntranceTargetNameProperty)(
                ::windows::core::Vtable::as_raw(this),
                result__.as_mut_ptr(),
            )
            .from_abi::<super::super::DependencyProperty>(result__)
        })
    }
    pub fn EntranceTargetProperty() -> ::windows::core::Result<super::super::DependencyProperty> {
        Self::IDrillInThemeAnimationStatics(|this| unsafe {
            let mut result__ = ::core::mem::MaybeUninit::zeroed();
            (::windows::core::Vtable::vtable(this).EntranceTargetProperty)(
                ::windows::core::Vtable::as_raw(this),
                result__.as_mut_ptr(),
            )
            .from_abi::<super::super::DependencyProperty>(result__)
        })
    }
    pub fn ExitTargetNameProperty() -> ::windows::core::Result<super::super::DependencyProperty> {
        Self::IDrillInThemeAnimationStatics(|this| unsafe {
            let mut result__ = ::core::mem::MaybeUninit::zeroed();
            (::windows::core::Vtable::vtable(this).ExitTargetNameProperty)(
                ::windows::core::Vtable::as_raw(this),
                result__.as_mut_ptr(),
            )
            .from_abi::<super::super::DependencyProperty>(result__)
        })
    }
    pub fn ExitTargetProperty() -> ::windows::core::Result<super::super::DependencyProperty> {
        Self::IDrillInThemeAnimationStatics(|this| unsafe {
            let mut result__ = ::core::mem::MaybeUninit::zeroed();
            (::windows::core::Vtable::vtable(this).ExitTargetProperty)(
                ::windows::core::Vtable::as_raw(this),
                result__.as_mut_ptr(),
            )
            .from_abi::<super::super::DependencyProperty>(result__)
        })
    }
    pub fn AutoReverse(&self) -> ::windows::core::Result<bool> {
        let this = &::windows::core::Interface::cast::<ITimeline>(self)?;
        unsafe {
            let mut result__ = ::core::mem::MaybeUninit::zeroed();
            (::windows::core::Vtable::vtable(this).AutoReverse)(
                ::windows::core::Vtable::as_raw(this),
                result__.as_mut_ptr(),
            )
            .from_abi::<bool>(result__)
        }
    }
    pub fn SetAutoReverse(&self, value: bool) -> ::windows::core::Result<()> {
        let this = &::windows::core::Interface::cast::<ITimeline>(self)?;
        unsafe {
            (::windows::core::Vtable::vtable(this).SetAutoReverse)(
                ::windows::core::Vtable::as_raw(this),
                value,
            )
            .ok()
        }
    }
    pub fn BeginTime(
        &self,
    ) -> ::windows::core::Result<::windows::Foundation::IReference<::windows::Foundation::TimeSpan>>
    {
        let this = &::windows::core::Interface::cast::<ITimeline>(self)?;
        unsafe {
            let mut result__ = ::core::mem::MaybeUninit::zeroed();
            (::windows::core::Vtable::vtable(this).BeginTime)(
                ::windows::core::Vtable::as_raw(this),
                result__.as_mut_ptr(),
            )
            .from_abi::<::windows::Foundation::IReference<::windows::Foundation::TimeSpan>>(
                result__,
            )
        }
    }
    pub fn SetBeginTime<'a, P0, E0>(&self, value: P0) -> ::windows::core::Result<()>
    where
        P0: ::std::convert::TryInto<
            ::windows::core::InParam<
                'a,
                ::windows::Foundation::IReference<::windows::Foundation::TimeSpan>,
            >,
            Error = E0,
        >,
        E0: ::std::convert::Into<::windows::core::Error>,
    {
        let this = &::windows::core::Interface::cast::<ITimeline>(self)?;
        unsafe {
            (::windows::core::Vtable::vtable(this).SetBeginTime)(
                ::windows::core::Vtable::as_raw(this),
                value.try_into().map_err(|e| e.into())?.abi(),
            )
            .ok()
        }
    }
    pub fn Duration(&self) -> ::windows::core::Result<super::super::Duration> {
        let this = &::windows::core::Interface::cast::<ITimeline>(self)?;
        unsafe {
            let mut result__ = ::core::mem::MaybeUninit::zeroed();
            (::windows::core::Vtable::vtable(this).Duration)(
                ::windows::core::Vtable::as_raw(this),
                result__.as_mut_ptr(),
            )
            .from_abi::<super::super::Duration>(result__)
        }
    }
    pub fn SetDuration(&self, value: super::super::Duration) -> ::windows::core::Result<()> {
        let this = &::windows::core::Interface::cast::<ITimeline>(self)?;
        unsafe {
            (::windows::core::Vtable::vtable(this).SetDuration)(
                ::windows::core::Vtable::as_raw(this),
                value,
            )
            .ok()
        }
    }
    pub fn SpeedRatio(&self) -> ::windows::core::Result<f64> {
        let this = &::windows::core::Interface::cast::<ITimeline>(self)?;
        unsafe {
            let mut result__ = ::core::mem::MaybeUninit::zeroed();
            (::windows::core::Vtable::vtable(this).SpeedRatio)(
                ::windows::core::Vtable::as_raw(this),
                result__.as_mut_ptr(),
            )
            .from_abi::<f64>(result__)
        }
    }
    pub fn SetSpeedRatio(&self, value: f64) -> ::windows::core::Result<()> {
        let this = &::windows::core::Interface::cast::<ITimeline>(self)?;
        unsafe {
            (::windows::core::Vtable::vtable(this).SetSpeedRatio)(
                ::windows::core::Vtable::as_raw(this),
                value,
            )
            .ok()
        }
    }
    pub fn FillBehavior(&self) -> ::windows::core::Result<FillBehavior> {
        let this = &::windows::core::Interface::cast::<ITimeline>(self)?;
        unsafe {
            let mut result__ = ::core::mem::MaybeUninit::zeroed();
            (::windows::core::Vtable::vtable(this).FillBehavior)(
                ::windows::core::Vtable::as_raw(this),
                result__.as_mut_ptr(),
            )
            .from_abi::<FillBehavior>(result__)
        }
    }
    pub fn SetFillBehavior(&self, value: FillBehavior) -> ::windows::core::Result<()> {
        let this = &::windows::core::Interface::cast::<ITimeline>(self)?;
        unsafe {
            (::windows::core::Vtable::vtable(this).SetFillBehavior)(
                ::windows::core::Vtable::as_raw(this),
                value,
            )
            .ok()
        }
    }
    pub fn RepeatBehavior(&self) -> ::windows::core::Result<RepeatBehavior> {
        let this = &::windows::core::Interface::cast::<ITimeline>(self)?;
        unsafe {
            let mut result__ = ::core::mem::MaybeUninit::zeroed();
            (::windows::core::Vtable::vtable(this).RepeatBehavior)(
                ::windows::core::Vtable::as_raw(this),
                result__.as_mut_ptr(),
            )
            .from_abi::<RepeatBehavior>(result__)
        }
    }
    pub fn SetRepeatBehavior(&self, value: RepeatBehavior) -> ::windows::core::Result<()> {
        let this = &::windows::core::Interface::cast::<ITimeline>(self)?;
        unsafe {
            (::windows::core::Vtable::vtable(this).SetRepeatBehavior)(
                ::windows::core::Vtable::as_raw(this),
                value,
            )
            .ok()
        }
    }
    pub fn Completed(
        &self,
        handler: &::windows::Foundation::EventHandler<::windows::core::IInspectable>,
    ) -> ::windows::core::Result<::windows::Foundation::EventRegistrationToken> {
        let this = &::windows::core::Interface::cast::<ITimeline>(self)?;
        unsafe {
            let mut result__ = ::core::mem::MaybeUninit::zeroed();
            (::windows::core::Vtable::vtable(this).Completed)(
                ::windows::core::Vtable::as_raw(this),
                ::core::mem::transmute_copy(handler),
                result__.as_mut_ptr(),
            )
            .from_abi::<::windows::Foundation::EventRegistrationToken>(result__)
        }
    }
    pub fn RemoveCompleted(
        &self,
        token: ::windows::Foundation::EventRegistrationToken,
    ) -> ::windows::core::Result<()> {
        let this = &::windows::core::Interface::cast::<ITimeline>(self)?;
        unsafe {
            (::windows::core::Vtable::vtable(this).RemoveCompleted)(
                ::windows::core::Vtable::as_raw(this),
                token,
            )
            .ok()
        }
    }
    #[doc(hidden)]
    pub fn IDrillInThemeAnimationStatics<
        R,
        F: FnOnce(&IDrillInThemeAnimationStatics) -> ::windows::core::Result<R>,
    >(
        callback: F,
    ) -> ::windows::core::Result<R> {
        static SHARED: ::windows::core::FactoryCache<
            DrillInThemeAnimation,
            IDrillInThemeAnimationStatics,
        > = ::windows::core::FactoryCache::new();
        SHARED.call(callback)
    }
}
impl ::core::clone::Clone for DrillInThemeAnimation {
    fn clone(&self) -> Self {
        Self(self.0.clone())
    }
}
impl ::core::cmp::PartialEq for DrillInThemeAnimation {
    fn eq(&self, other: &Self) -> bool {
        self.0 == other.0
    }
}
impl ::core::cmp::Eq for DrillInThemeAnimation {}
impl ::core::fmt::Debug for DrillInThemeAnimation {
    fn fmt(&self, f: &mut ::core::fmt::Formatter<'_>) -> ::core::fmt::Result {
        f.debug_tuple("DrillInThemeAnimation").field(&self.0).finish()
    }
}
unsafe impl ::windows::core::RuntimeType for DrillInThemeAnimation {
    const SIGNATURE : ::windows::core::ConstBuffer = ::windows::core::ConstBuffer::from_slice ( b"rc(Microsoft.UI.Xaml.Media.Animation.DrillInThemeAnimation;{097577e0-3027-5f24-af8c-976d9faed830})" ) ;
    type DefaultType = ::core::option::Option<Self>;
    fn from_default(from: &Self::DefaultType) -> ::windows::core::Result<Self> {
        from.as_ref().cloned().ok_or(::windows::core::Error::OK)
    }
}
unsafe impl ::windows::core::Vtable for DrillInThemeAnimation {
    type Vtable = IDrillInThemeAnimation_Vtbl;
}
unsafe impl ::windows::core::Interface for DrillInThemeAnimation {
    const IID: ::windows::core::GUID = <IDrillInThemeAnimation as ::windows::core::Interface>::IID;
}
impl ::windows::core::RuntimeName for DrillInThemeAnimation {
    const NAME: &'static str = "Microsoft.UI.Xaml.Media.Animation.DrillInThemeAnimation";
}
::windows::core::interface_hierarchy!(
    DrillInThemeAnimation,
    ::windows::core::IUnknown,
    ::windows::core::IInspectable
);
impl ::core::convert::From<DrillInThemeAnimation> for Timeline {
    fn from(value: DrillInThemeAnimation) -> Self {
        ::core::convert::From::from(&value)
    }
}
impl ::core::convert::From<&DrillInThemeAnimation> for Timeline {
    fn from(value: &DrillInThemeAnimation) -> Self {
        ::windows::core::Interface::cast(value).unwrap()
    }
}
impl<'a> ::core::convert::From<&DrillInThemeAnimation> for ::windows::core::InParam<'a, Timeline> {
    fn from(value: &DrillInThemeAnimation) -> Self {
        ::windows::core::InParam::owned(value.into())
    }
}
impl ::core::convert::From<DrillInThemeAnimation> for super::super::DependencyObject {
    fn from(value: DrillInThemeAnimation) -> Self {
        ::core::convert::From::from(&value)
    }
}
impl ::core::convert::From<&DrillInThemeAnimation> for super::super::DependencyObject {
    fn from(value: &DrillInThemeAnimation) -> Self {
        ::windows::core::Interface::cast(value).unwrap()
    }
}
impl<'a> ::core::convert::From<&DrillInThemeAnimation>
    for ::windows::core::InParam<'a, super::super::DependencyObject>
{
    fn from(value: &DrillInThemeAnimation) -> Self {
        ::windows::core::InParam::owned(value.into())
    }
}
unsafe impl ::core::marker::Send for DrillInThemeAnimation {}
unsafe impl ::core::marker::Sync for DrillInThemeAnimation {}
#[doc = "*Required features: `\"UI_Xaml_Media_Animation\"`*"]
#[repr(transparent)]
pub struct DrillOutThemeAnimation(::windows::core::IUnknown);
impl DrillOutThemeAnimation {
    pub fn new() -> ::windows::core::Result<Self> {
        Self::IActivationFactory(|f| f.ActivateInstance::<Self>())
    }
    fn IActivationFactory<
        R,
        F: FnOnce(&::windows::core::IGenericFactory) -> ::windows::core::Result<R>,
    >(
        callback: F,
    ) -> ::windows::core::Result<R> {
        static SHARED: ::windows::core::FactoryCache<
            DrillOutThemeAnimation,
            ::windows::core::IGenericFactory,
        > = ::windows::core::FactoryCache::new();
        SHARED.call(callback)
    }
    pub fn GetValue(
        &self,
        dp: &super::super::DependencyProperty,
    ) -> ::windows::core::Result<::windows::core::IInspectable> {
        let this = &::windows::core::Interface::cast::<super::super::IDependencyObject>(self)?;
        unsafe {
            let mut result__ = ::core::mem::MaybeUninit::zeroed();
            (::windows::core::Vtable::vtable(this).GetValue)(
                ::windows::core::Vtable::as_raw(this),
                ::core::mem::transmute_copy(dp),
                result__.as_mut_ptr(),
            )
            .from_abi::<::windows::core::IInspectable>(result__)
        }
    }
    pub fn SetValue<'a, P0>(
        &self,
        dp: &super::super::DependencyProperty,
        value: P0,
    ) -> ::windows::core::Result<()>
    where
        P0: ::std::convert::Into<::windows::core::InParam<'a, ::windows::core::IInspectable>>,
    {
        let this = &::windows::core::Interface::cast::<super::super::IDependencyObject>(self)?;
        unsafe {
            (::windows::core::Vtable::vtable(this).SetValue)(
                ::windows::core::Vtable::as_raw(this),
                ::core::mem::transmute_copy(dp),
                value.into().abi(),
            )
            .ok()
        }
    }
    pub fn ClearValue(&self, dp: &super::super::DependencyProperty) -> ::windows::core::Result<()> {
        let this = &::windows::core::Interface::cast::<super::super::IDependencyObject>(self)?;
        unsafe {
            (::windows::core::Vtable::vtable(this).ClearValue)(
                ::windows::core::Vtable::as_raw(this),
                ::core::mem::transmute_copy(dp),
            )
            .ok()
        }
    }
    pub fn ReadLocalValue(
        &self,
        dp: &super::super::DependencyProperty,
    ) -> ::windows::core::Result<::windows::core::IInspectable> {
        let this = &::windows::core::Interface::cast::<super::super::IDependencyObject>(self)?;
        unsafe {
            let mut result__ = ::core::mem::MaybeUninit::zeroed();
            (::windows::core::Vtable::vtable(this).ReadLocalValue)(
                ::windows::core::Vtable::as_raw(this),
                ::core::mem::transmute_copy(dp),
                result__.as_mut_ptr(),
            )
            .from_abi::<::windows::core::IInspectable>(result__)
        }
    }
    pub fn GetAnimationBaseValue(
        &self,
        dp: &super::super::DependencyProperty,
    ) -> ::windows::core::Result<::windows::core::IInspectable> {
        let this = &::windows::core::Interface::cast::<super::super::IDependencyObject>(self)?;
        unsafe {
            let mut result__ = ::core::mem::MaybeUninit::zeroed();
            (::windows::core::Vtable::vtable(this).GetAnimationBaseValue)(
                ::windows::core::Vtable::as_raw(this),
                ::core::mem::transmute_copy(dp),
                result__.as_mut_ptr(),
            )
            .from_abi::<::windows::core::IInspectable>(result__)
        }
    }
    pub fn RegisterPropertyChangedCallback(
        &self,
        dp: &super::super::DependencyProperty,
        callback: &super::super::DependencyPropertyChangedCallback,
    ) -> ::windows::core::Result<i64> {
        let this = &::windows::core::Interface::cast::<super::super::IDependencyObject>(self)?;
        unsafe {
            let mut result__ = ::core::mem::MaybeUninit::zeroed();
            (::windows::core::Vtable::vtable(this).RegisterPropertyChangedCallback)(
                ::windows::core::Vtable::as_raw(this),
                ::core::mem::transmute_copy(dp),
                ::core::mem::transmute_copy(callback),
                result__.as_mut_ptr(),
            )
            .from_abi::<i64>(result__)
        }
    }
    pub fn UnregisterPropertyChangedCallback(
        &self,
        dp: &super::super::DependencyProperty,
        token: i64,
    ) -> ::windows::core::Result<()> {
        let this = &::windows::core::Interface::cast::<super::super::IDependencyObject>(self)?;
        unsafe {
            (::windows::core::Vtable::vtable(this).UnregisterPropertyChangedCallback)(
                ::windows::core::Vtable::as_raw(this),
                ::core::mem::transmute_copy(dp),
                token,
            )
            .ok()
        }
    }
    pub fn Dispatcher(&self) -> ::windows::core::Result<::windows::UI::Core::CoreDispatcher> {
        let this = &::windows::core::Interface::cast::<super::super::IDependencyObject>(self)?;
        unsafe {
            let mut result__ = ::core::mem::MaybeUninit::zeroed();
            (::windows::core::Vtable::vtable(this).Dispatcher)(
                ::windows::core::Vtable::as_raw(this),
                result__.as_mut_ptr(),
            )
            .from_abi::<::windows::UI::Core::CoreDispatcher>(result__)
        }
    }
    #[doc = "*Required features: `\"UI_Dispatching\"`*"]
    #[cfg(feature = "UI_Dispatching")]
    pub fn DispatcherQueue(
        &self,
    ) -> ::windows::core::Result<super::super::super::Dispatching::DispatcherQueue> {
        let this = &::windows::core::Interface::cast::<super::super::IDependencyObject>(self)?;
        unsafe {
            let mut result__ = ::core::mem::MaybeUninit::zeroed();
            (::windows::core::Vtable::vtable(this).DispatcherQueue)(
                ::windows::core::Vtable::as_raw(this),
                result__.as_mut_ptr(),
            )
            .from_abi::<super::super::super::Dispatching::DispatcherQueue>(result__)
        }
    }
    pub fn EntranceTargetName(&self) -> ::windows::core::Result<::windows::core::HSTRING> {
        let this = self;
        unsafe {
            let mut result__ = ::core::mem::MaybeUninit::zeroed();
            (::windows::core::Vtable::vtable(this).EntranceTargetName)(
                ::windows::core::Vtable::as_raw(this),
                result__.as_mut_ptr(),
            )
            .from_abi::<::windows::core::HSTRING>(result__)
        }
    }
    pub fn SetEntranceTargetName(
        &self,
        value: &::windows::core::HSTRING,
    ) -> ::windows::core::Result<()> {
        let this = self;
        unsafe {
            (::windows::core::Vtable::vtable(this).SetEntranceTargetName)(
                ::windows::core::Vtable::as_raw(this),
                ::core::mem::transmute_copy(value),
            )
            .ok()
        }
    }
    pub fn EntranceTarget(&self) -> ::windows::core::Result<super::super::DependencyObject> {
        let this = self;
        unsafe {
            let mut result__ = ::core::mem::MaybeUninit::zeroed();
            (::windows::core::Vtable::vtable(this).EntranceTarget)(
                ::windows::core::Vtable::as_raw(this),
                result__.as_mut_ptr(),
            )
            .from_abi::<super::super::DependencyObject>(result__)
        }
    }
    pub fn SetEntranceTarget<'a, P0>(&self, value: P0) -> ::windows::core::Result<()>
    where
        P0: ::std::convert::Into<::windows::core::InParam<'a, super::super::DependencyObject>>,
    {
        let this = self;
        unsafe {
            (::windows::core::Vtable::vtable(this).SetEntranceTarget)(
                ::windows::core::Vtable::as_raw(this),
                value.into().abi(),
            )
            .ok()
        }
    }
    pub fn ExitTargetName(&self) -> ::windows::core::Result<::windows::core::HSTRING> {
        let this = self;
        unsafe {
            let mut result__ = ::core::mem::MaybeUninit::zeroed();
            (::windows::core::Vtable::vtable(this).ExitTargetName)(
                ::windows::core::Vtable::as_raw(this),
                result__.as_mut_ptr(),
            )
            .from_abi::<::windows::core::HSTRING>(result__)
        }
    }
    pub fn SetExitTargetName(
        &self,
        value: &::windows::core::HSTRING,
    ) -> ::windows::core::Result<()> {
        let this = self;
        unsafe {
            (::windows::core::Vtable::vtable(this).SetExitTargetName)(
                ::windows::core::Vtable::as_raw(this),
                ::core::mem::transmute_copy(value),
            )
            .ok()
        }
    }
    pub fn ExitTarget(&self) -> ::windows::core::Result<super::super::DependencyObject> {
        let this = self;
        unsafe {
            let mut result__ = ::core::mem::MaybeUninit::zeroed();
            (::windows::core::Vtable::vtable(this).ExitTarget)(
                ::windows::core::Vtable::as_raw(this),
                result__.as_mut_ptr(),
            )
            .from_abi::<super::super::DependencyObject>(result__)
        }
    }
    pub fn SetExitTarget<'a, P0>(&self, value: P0) -> ::windows::core::Result<()>
    where
        P0: ::std::convert::Into<::windows::core::InParam<'a, super::super::DependencyObject>>,
    {
        let this = self;
        unsafe {
            (::windows::core::Vtable::vtable(this).SetExitTarget)(
                ::windows::core::Vtable::as_raw(this),
                value.into().abi(),
            )
            .ok()
        }
    }
    pub fn EntranceTargetNameProperty() -> ::windows::core::Result<super::super::DependencyProperty>
    {
        Self::IDrillOutThemeAnimationStatics(|this| unsafe {
            let mut result__ = ::core::mem::MaybeUninit::zeroed();
            (::windows::core::Vtable::vtable(this).EntranceTargetNameProperty)(
                ::windows::core::Vtable::as_raw(this),
                result__.as_mut_ptr(),
            )
            .from_abi::<super::super::DependencyProperty>(result__)
        })
    }
    pub fn EntranceTargetProperty() -> ::windows::core::Result<super::super::DependencyProperty> {
        Self::IDrillOutThemeAnimationStatics(|this| unsafe {
            let mut result__ = ::core::mem::MaybeUninit::zeroed();
            (::windows::core::Vtable::vtable(this).EntranceTargetProperty)(
                ::windows::core::Vtable::as_raw(this),
                result__.as_mut_ptr(),
            )
            .from_abi::<super::super::DependencyProperty>(result__)
        })
    }
    pub fn ExitTargetNameProperty() -> ::windows::core::Result<super::super::DependencyProperty> {
        Self::IDrillOutThemeAnimationStatics(|this| unsafe {
            let mut result__ = ::core::mem::MaybeUninit::zeroed();
            (::windows::core::Vtable::vtable(this).ExitTargetNameProperty)(
                ::windows::core::Vtable::as_raw(this),
                result__.as_mut_ptr(),
            )
            .from_abi::<super::super::DependencyProperty>(result__)
        })
    }
    pub fn ExitTargetProperty() -> ::windows::core::Result<super::super::DependencyProperty> {
        Self::IDrillOutThemeAnimationStatics(|this| unsafe {
            let mut result__ = ::core::mem::MaybeUninit::zeroed();
            (::windows::core::Vtable::vtable(this).ExitTargetProperty)(
                ::windows::core::Vtable::as_raw(this),
                result__.as_mut_ptr(),
            )
            .from_abi::<super::super::DependencyProperty>(result__)
        })
    }
    pub fn AutoReverse(&self) -> ::windows::core::Result<bool> {
        let this = &::windows::core::Interface::cast::<ITimeline>(self)?;
        unsafe {
            let mut result__ = ::core::mem::MaybeUninit::zeroed();
            (::windows::core::Vtable::vtable(this).AutoReverse)(
                ::windows::core::Vtable::as_raw(this),
                result__.as_mut_ptr(),
            )
            .from_abi::<bool>(result__)
        }
    }
    pub fn SetAutoReverse(&self, value: bool) -> ::windows::core::Result<()> {
        let this = &::windows::core::Interface::cast::<ITimeline>(self)?;
        unsafe {
            (::windows::core::Vtable::vtable(this).SetAutoReverse)(
                ::windows::core::Vtable::as_raw(this),
                value,
            )
            .ok()
        }
    }
    pub fn BeginTime(
        &self,
    ) -> ::windows::core::Result<::windows::Foundation::IReference<::windows::Foundation::TimeSpan>>
    {
        let this = &::windows::core::Interface::cast::<ITimeline>(self)?;
        unsafe {
            let mut result__ = ::core::mem::MaybeUninit::zeroed();
            (::windows::core::Vtable::vtable(this).BeginTime)(
                ::windows::core::Vtable::as_raw(this),
                result__.as_mut_ptr(),
            )
            .from_abi::<::windows::Foundation::IReference<::windows::Foundation::TimeSpan>>(
                result__,
            )
        }
    }
    pub fn SetBeginTime<'a, P0, E0>(&self, value: P0) -> ::windows::core::Result<()>
    where
        P0: ::std::convert::TryInto<
            ::windows::core::InParam<
                'a,
                ::windows::Foundation::IReference<::windows::Foundation::TimeSpan>,
            >,
            Error = E0,
        >,
        E0: ::std::convert::Into<::windows::core::Error>,
    {
        let this = &::windows::core::Interface::cast::<ITimeline>(self)?;
        unsafe {
            (::windows::core::Vtable::vtable(this).SetBeginTime)(
                ::windows::core::Vtable::as_raw(this),
                value.try_into().map_err(|e| e.into())?.abi(),
            )
            .ok()
        }
    }
    pub fn Duration(&self) -> ::windows::core::Result<super::super::Duration> {
        let this = &::windows::core::Interface::cast::<ITimeline>(self)?;
        unsafe {
            let mut result__ = ::core::mem::MaybeUninit::zeroed();
            (::windows::core::Vtable::vtable(this).Duration)(
                ::windows::core::Vtable::as_raw(this),
                result__.as_mut_ptr(),
            )
            .from_abi::<super::super::Duration>(result__)
        }
    }
    pub fn SetDuration(&self, value: super::super::Duration) -> ::windows::core::Result<()> {
        let this = &::windows::core::Interface::cast::<ITimeline>(self)?;
        unsafe {
            (::windows::core::Vtable::vtable(this).SetDuration)(
                ::windows::core::Vtable::as_raw(this),
                value,
            )
            .ok()
        }
    }
    pub fn SpeedRatio(&self) -> ::windows::core::Result<f64> {
        let this = &::windows::core::Interface::cast::<ITimeline>(self)?;
        unsafe {
            let mut result__ = ::core::mem::MaybeUninit::zeroed();
            (::windows::core::Vtable::vtable(this).SpeedRatio)(
                ::windows::core::Vtable::as_raw(this),
                result__.as_mut_ptr(),
            )
            .from_abi::<f64>(result__)
        }
    }
    pub fn SetSpeedRatio(&self, value: f64) -> ::windows::core::Result<()> {
        let this = &::windows::core::Interface::cast::<ITimeline>(self)?;
        unsafe {
            (::windows::core::Vtable::vtable(this).SetSpeedRatio)(
                ::windows::core::Vtable::as_raw(this),
                value,
            )
            .ok()
        }
    }
    pub fn FillBehavior(&self) -> ::windows::core::Result<FillBehavior> {
        let this = &::windows::core::Interface::cast::<ITimeline>(self)?;
        unsafe {
            let mut result__ = ::core::mem::MaybeUninit::zeroed();
            (::windows::core::Vtable::vtable(this).FillBehavior)(
                ::windows::core::Vtable::as_raw(this),
                result__.as_mut_ptr(),
            )
            .from_abi::<FillBehavior>(result__)
        }
    }
    pub fn SetFillBehavior(&self, value: FillBehavior) -> ::windows::core::Result<()> {
        let this = &::windows::core::Interface::cast::<ITimeline>(self)?;
        unsafe {
            (::windows::core::Vtable::vtable(this).SetFillBehavior)(
                ::windows::core::Vtable::as_raw(this),
                value,
            )
            .ok()
        }
    }
    pub fn RepeatBehavior(&self) -> ::windows::core::Result<RepeatBehavior> {
        let this = &::windows::core::Interface::cast::<ITimeline>(self)?;
        unsafe {
            let mut result__ = ::core::mem::MaybeUninit::zeroed();
            (::windows::core::Vtable::vtable(this).RepeatBehavior)(
                ::windows::core::Vtable::as_raw(this),
                result__.as_mut_ptr(),
            )
            .from_abi::<RepeatBehavior>(result__)
        }
    }
    pub fn SetRepeatBehavior(&self, value: RepeatBehavior) -> ::windows::core::Result<()> {
        let this = &::windows::core::Interface::cast::<ITimeline>(self)?;
        unsafe {
            (::windows::core::Vtable::vtable(this).SetRepeatBehavior)(
                ::windows::core::Vtable::as_raw(this),
                value,
            )
            .ok()
        }
    }
    pub fn Completed(
        &self,
        handler: &::windows::Foundation::EventHandler<::windows::core::IInspectable>,
    ) -> ::windows::core::Result<::windows::Foundation::EventRegistrationToken> {
        let this = &::windows::core::Interface::cast::<ITimeline>(self)?;
        unsafe {
            let mut result__ = ::core::mem::MaybeUninit::zeroed();
            (::windows::core::Vtable::vtable(this).Completed)(
                ::windows::core::Vtable::as_raw(this),
                ::core::mem::transmute_copy(handler),
                result__.as_mut_ptr(),
            )
            .from_abi::<::windows::Foundation::EventRegistrationToken>(result__)
        }
    }
    pub fn RemoveCompleted(
        &self,
        token: ::windows::Foundation::EventRegistrationToken,
    ) -> ::windows::core::Result<()> {
        let this = &::windows::core::Interface::cast::<ITimeline>(self)?;
        unsafe {
            (::windows::core::Vtable::vtable(this).RemoveCompleted)(
                ::windows::core::Vtable::as_raw(this),
                token,
            )
            .ok()
        }
    }
    #[doc(hidden)]
    pub fn IDrillOutThemeAnimationStatics<
        R,
        F: FnOnce(&IDrillOutThemeAnimationStatics) -> ::windows::core::Result<R>,
    >(
        callback: F,
    ) -> ::windows::core::Result<R> {
        static SHARED: ::windows::core::FactoryCache<
            DrillOutThemeAnimation,
            IDrillOutThemeAnimationStatics,
        > = ::windows::core::FactoryCache::new();
        SHARED.call(callback)
    }
}
impl ::core::clone::Clone for DrillOutThemeAnimation {
    fn clone(&self) -> Self {
        Self(self.0.clone())
    }
}
impl ::core::cmp::PartialEq for DrillOutThemeAnimation {
    fn eq(&self, other: &Self) -> bool {
        self.0 == other.0
    }
}
impl ::core::cmp::Eq for DrillOutThemeAnimation {}
impl ::core::fmt::Debug for DrillOutThemeAnimation {
    fn fmt(&self, f: &mut ::core::fmt::Formatter<'_>) -> ::core::fmt::Result {
        f.debug_tuple("DrillOutThemeAnimation").field(&self.0).finish()
    }
}
unsafe impl ::windows::core::RuntimeType for DrillOutThemeAnimation {
    const SIGNATURE : ::windows::core::ConstBuffer = ::windows::core::ConstBuffer::from_slice ( b"rc(Microsoft.UI.Xaml.Media.Animation.DrillOutThemeAnimation;{9a93b9cc-925f-525a-9eac-55d39db3d314})" ) ;
    type DefaultType = ::core::option::Option<Self>;
    fn from_default(from: &Self::DefaultType) -> ::windows::core::Result<Self> {
        from.as_ref().cloned().ok_or(::windows::core::Error::OK)
    }
}
unsafe impl ::windows::core::Vtable for DrillOutThemeAnimation {
    type Vtable = IDrillOutThemeAnimation_Vtbl;
}
unsafe impl ::windows::core::Interface for DrillOutThemeAnimation {
    const IID: ::windows::core::GUID = <IDrillOutThemeAnimation as ::windows::core::Interface>::IID;
}
impl ::windows::core::RuntimeName for DrillOutThemeAnimation {
    const NAME: &'static str = "Microsoft.UI.Xaml.Media.Animation.DrillOutThemeAnimation";
}
::windows::core::interface_hierarchy!(
    DrillOutThemeAnimation,
    ::windows::core::IUnknown,
    ::windows::core::IInspectable
);
impl ::core::convert::From<DrillOutThemeAnimation> for Timeline {
    fn from(value: DrillOutThemeAnimation) -> Self {
        ::core::convert::From::from(&value)
    }
}
impl ::core::convert::From<&DrillOutThemeAnimation> for Timeline {
    fn from(value: &DrillOutThemeAnimation) -> Self {
        ::windows::core::Interface::cast(value).unwrap()
    }
}
impl<'a> ::core::convert::From<&DrillOutThemeAnimation> for ::windows::core::InParam<'a, Timeline> {
    fn from(value: &DrillOutThemeAnimation) -> Self {
        ::windows::core::InParam::owned(value.into())
    }
}
impl ::core::convert::From<DrillOutThemeAnimation> for super::super::DependencyObject {
    fn from(value: DrillOutThemeAnimation) -> Self {
        ::core::convert::From::from(&value)
    }
}
impl ::core::convert::From<&DrillOutThemeAnimation> for super::super::DependencyObject {
    fn from(value: &DrillOutThemeAnimation) -> Self {
        ::windows::core::Interface::cast(value).unwrap()
    }
}
impl<'a> ::core::convert::From<&DrillOutThemeAnimation>
    for ::windows::core::InParam<'a, super::super::DependencyObject>
{
    fn from(value: &DrillOutThemeAnimation) -> Self {
        ::windows::core::InParam::owned(value.into())
    }
}
unsafe impl ::core::marker::Send for DrillOutThemeAnimation {}
unsafe impl ::core::marker::Sync for DrillOutThemeAnimation {}
#[doc = "*Required features: `\"UI_Xaml_Media_Animation\"`*"]
#[repr(transparent)]
pub struct DropTargetItemThemeAnimation(::windows::core::IUnknown);
impl DropTargetItemThemeAnimation {
    pub fn new() -> ::windows::core::Result<Self> {
        Self::IActivationFactory(|f| f.ActivateInstance::<Self>())
    }
    fn IActivationFactory<
        R,
        F: FnOnce(&::windows::core::IGenericFactory) -> ::windows::core::Result<R>,
    >(
        callback: F,
    ) -> ::windows::core::Result<R> {
        static SHARED: ::windows::core::FactoryCache<
            DropTargetItemThemeAnimation,
            ::windows::core::IGenericFactory,
        > = ::windows::core::FactoryCache::new();
        SHARED.call(callback)
    }
    pub fn GetValue(
        &self,
        dp: &super::super::DependencyProperty,
    ) -> ::windows::core::Result<::windows::core::IInspectable> {
        let this = &::windows::core::Interface::cast::<super::super::IDependencyObject>(self)?;
        unsafe {
            let mut result__ = ::core::mem::MaybeUninit::zeroed();
            (::windows::core::Vtable::vtable(this).GetValue)(
                ::windows::core::Vtable::as_raw(this),
                ::core::mem::transmute_copy(dp),
                result__.as_mut_ptr(),
            )
            .from_abi::<::windows::core::IInspectable>(result__)
        }
    }
    pub fn SetValue<'a, P0>(
        &self,
        dp: &super::super::DependencyProperty,
        value: P0,
    ) -> ::windows::core::Result<()>
    where
        P0: ::std::convert::Into<::windows::core::InParam<'a, ::windows::core::IInspectable>>,
    {
        let this = &::windows::core::Interface::cast::<super::super::IDependencyObject>(self)?;
        unsafe {
            (::windows::core::Vtable::vtable(this).SetValue)(
                ::windows::core::Vtable::as_raw(this),
                ::core::mem::transmute_copy(dp),
                value.into().abi(),
            )
            .ok()
        }
    }
    pub fn ClearValue(&self, dp: &super::super::DependencyProperty) -> ::windows::core::Result<()> {
        let this = &::windows::core::Interface::cast::<super::super::IDependencyObject>(self)?;
        unsafe {
            (::windows::core::Vtable::vtable(this).ClearValue)(
                ::windows::core::Vtable::as_raw(this),
                ::core::mem::transmute_copy(dp),
            )
            .ok()
        }
    }
    pub fn ReadLocalValue(
        &self,
        dp: &super::super::DependencyProperty,
    ) -> ::windows::core::Result<::windows::core::IInspectable> {
        let this = &::windows::core::Interface::cast::<super::super::IDependencyObject>(self)?;
        unsafe {
            let mut result__ = ::core::mem::MaybeUninit::zeroed();
            (::windows::core::Vtable::vtable(this).ReadLocalValue)(
                ::windows::core::Vtable::as_raw(this),
                ::core::mem::transmute_copy(dp),
                result__.as_mut_ptr(),
            )
            .from_abi::<::windows::core::IInspectable>(result__)
        }
    }
    pub fn GetAnimationBaseValue(
        &self,
        dp: &super::super::DependencyProperty,
    ) -> ::windows::core::Result<::windows::core::IInspectable> {
        let this = &::windows::core::Interface::cast::<super::super::IDependencyObject>(self)?;
        unsafe {
            let mut result__ = ::core::mem::MaybeUninit::zeroed();
            (::windows::core::Vtable::vtable(this).GetAnimationBaseValue)(
                ::windows::core::Vtable::as_raw(this),
                ::core::mem::transmute_copy(dp),
                result__.as_mut_ptr(),
            )
            .from_abi::<::windows::core::IInspectable>(result__)
        }
    }
    pub fn RegisterPropertyChangedCallback(
        &self,
        dp: &super::super::DependencyProperty,
        callback: &super::super::DependencyPropertyChangedCallback,
    ) -> ::windows::core::Result<i64> {
        let this = &::windows::core::Interface::cast::<super::super::IDependencyObject>(self)?;
        unsafe {
            let mut result__ = ::core::mem::MaybeUninit::zeroed();
            (::windows::core::Vtable::vtable(this).RegisterPropertyChangedCallback)(
                ::windows::core::Vtable::as_raw(this),
                ::core::mem::transmute_copy(dp),
                ::core::mem::transmute_copy(callback),
                result__.as_mut_ptr(),
            )
            .from_abi::<i64>(result__)
        }
    }
    pub fn UnregisterPropertyChangedCallback(
        &self,
        dp: &super::super::DependencyProperty,
        token: i64,
    ) -> ::windows::core::Result<()> {
        let this = &::windows::core::Interface::cast::<super::super::IDependencyObject>(self)?;
        unsafe {
            (::windows::core::Vtable::vtable(this).UnregisterPropertyChangedCallback)(
                ::windows::core::Vtable::as_raw(this),
                ::core::mem::transmute_copy(dp),
                token,
            )
            .ok()
        }
    }
    pub fn Dispatcher(&self) -> ::windows::core::Result<::windows::UI::Core::CoreDispatcher> {
        let this = &::windows::core::Interface::cast::<super::super::IDependencyObject>(self)?;
        unsafe {
            let mut result__ = ::core::mem::MaybeUninit::zeroed();
            (::windows::core::Vtable::vtable(this).Dispatcher)(
                ::windows::core::Vtable::as_raw(this),
                result__.as_mut_ptr(),
            )
            .from_abi::<::windows::UI::Core::CoreDispatcher>(result__)
        }
    }
    #[doc = "*Required features: `\"UI_Dispatching\"`*"]
    #[cfg(feature = "UI_Dispatching")]
    pub fn DispatcherQueue(
        &self,
    ) -> ::windows::core::Result<super::super::super::Dispatching::DispatcherQueue> {
        let this = &::windows::core::Interface::cast::<super::super::IDependencyObject>(self)?;
        unsafe {
            let mut result__ = ::core::mem::MaybeUninit::zeroed();
            (::windows::core::Vtable::vtable(this).DispatcherQueue)(
                ::windows::core::Vtable::as_raw(this),
                result__.as_mut_ptr(),
            )
            .from_abi::<super::super::super::Dispatching::DispatcherQueue>(result__)
        }
    }
    pub fn TargetName(&self) -> ::windows::core::Result<::windows::core::HSTRING> {
        let this = self;
        unsafe {
            let mut result__ = ::core::mem::MaybeUninit::zeroed();
            (::windows::core::Vtable::vtable(this).TargetName)(
                ::windows::core::Vtable::as_raw(this),
                result__.as_mut_ptr(),
            )
            .from_abi::<::windows::core::HSTRING>(result__)
        }
    }
    pub fn SetTargetName(&self, value: &::windows::core::HSTRING) -> ::windows::core::Result<()> {
        let this = self;
        unsafe {
            (::windows::core::Vtable::vtable(this).SetTargetName)(
                ::windows::core::Vtable::as_raw(this),
                ::core::mem::transmute_copy(value),
            )
            .ok()
        }
    }
    pub fn TargetNameProperty() -> ::windows::core::Result<super::super::DependencyProperty> {
        Self::IDropTargetItemThemeAnimationStatics(|this| unsafe {
            let mut result__ = ::core::mem::MaybeUninit::zeroed();
            (::windows::core::Vtable::vtable(this).TargetNameProperty)(
                ::windows::core::Vtable::as_raw(this),
                result__.as_mut_ptr(),
            )
            .from_abi::<super::super::DependencyProperty>(result__)
        })
    }
    pub fn AutoReverse(&self) -> ::windows::core::Result<bool> {
        let this = &::windows::core::Interface::cast::<ITimeline>(self)?;
        unsafe {
            let mut result__ = ::core::mem::MaybeUninit::zeroed();
            (::windows::core::Vtable::vtable(this).AutoReverse)(
                ::windows::core::Vtable::as_raw(this),
                result__.as_mut_ptr(),
            )
            .from_abi::<bool>(result__)
        }
    }
    pub fn SetAutoReverse(&self, value: bool) -> ::windows::core::Result<()> {
        let this = &::windows::core::Interface::cast::<ITimeline>(self)?;
        unsafe {
            (::windows::core::Vtable::vtable(this).SetAutoReverse)(
                ::windows::core::Vtable::as_raw(this),
                value,
            )
            .ok()
        }
    }
    pub fn BeginTime(
        &self,
    ) -> ::windows::core::Result<::windows::Foundation::IReference<::windows::Foundation::TimeSpan>>
    {
        let this = &::windows::core::Interface::cast::<ITimeline>(self)?;
        unsafe {
            let mut result__ = ::core::mem::MaybeUninit::zeroed();
            (::windows::core::Vtable::vtable(this).BeginTime)(
                ::windows::core::Vtable::as_raw(this),
                result__.as_mut_ptr(),
            )
            .from_abi::<::windows::Foundation::IReference<::windows::Foundation::TimeSpan>>(
                result__,
            )
        }
    }
    pub fn SetBeginTime<'a, P0, E0>(&self, value: P0) -> ::windows::core::Result<()>
    where
        P0: ::std::convert::TryInto<
            ::windows::core::InParam<
                'a,
                ::windows::Foundation::IReference<::windows::Foundation::TimeSpan>,
            >,
            Error = E0,
        >,
        E0: ::std::convert::Into<::windows::core::Error>,
    {
        let this = &::windows::core::Interface::cast::<ITimeline>(self)?;
        unsafe {
            (::windows::core::Vtable::vtable(this).SetBeginTime)(
                ::windows::core::Vtable::as_raw(this),
                value.try_into().map_err(|e| e.into())?.abi(),
            )
            .ok()
        }
    }
    pub fn Duration(&self) -> ::windows::core::Result<super::super::Duration> {
        let this = &::windows::core::Interface::cast::<ITimeline>(self)?;
        unsafe {
            let mut result__ = ::core::mem::MaybeUninit::zeroed();
            (::windows::core::Vtable::vtable(this).Duration)(
                ::windows::core::Vtable::as_raw(this),
                result__.as_mut_ptr(),
            )
            .from_abi::<super::super::Duration>(result__)
        }
    }
    pub fn SetDuration(&self, value: super::super::Duration) -> ::windows::core::Result<()> {
        let this = &::windows::core::Interface::cast::<ITimeline>(self)?;
        unsafe {
            (::windows::core::Vtable::vtable(this).SetDuration)(
                ::windows::core::Vtable::as_raw(this),
                value,
            )
            .ok()
        }
    }
    pub fn SpeedRatio(&self) -> ::windows::core::Result<f64> {
        let this = &::windows::core::Interface::cast::<ITimeline>(self)?;
        unsafe {
            let mut result__ = ::core::mem::MaybeUninit::zeroed();
            (::windows::core::Vtable::vtable(this).SpeedRatio)(
                ::windows::core::Vtable::as_raw(this),
                result__.as_mut_ptr(),
            )
            .from_abi::<f64>(result__)
        }
    }
    pub fn SetSpeedRatio(&self, value: f64) -> ::windows::core::Result<()> {
        let this = &::windows::core::Interface::cast::<ITimeline>(self)?;
        unsafe {
            (::windows::core::Vtable::vtable(this).SetSpeedRatio)(
                ::windows::core::Vtable::as_raw(this),
                value,
            )
            .ok()
        }
    }
    pub fn FillBehavior(&self) -> ::windows::core::Result<FillBehavior> {
        let this = &::windows::core::Interface::cast::<ITimeline>(self)?;
        unsafe {
            let mut result__ = ::core::mem::MaybeUninit::zeroed();
            (::windows::core::Vtable::vtable(this).FillBehavior)(
                ::windows::core::Vtable::as_raw(this),
                result__.as_mut_ptr(),
            )
            .from_abi::<FillBehavior>(result__)
        }
    }
    pub fn SetFillBehavior(&self, value: FillBehavior) -> ::windows::core::Result<()> {
        let this = &::windows::core::Interface::cast::<ITimeline>(self)?;
        unsafe {
            (::windows::core::Vtable::vtable(this).SetFillBehavior)(
                ::windows::core::Vtable::as_raw(this),
                value,
            )
            .ok()
        }
    }
    pub fn RepeatBehavior(&self) -> ::windows::core::Result<RepeatBehavior> {
        let this = &::windows::core::Interface::cast::<ITimeline>(self)?;
        unsafe {
            let mut result__ = ::core::mem::MaybeUninit::zeroed();
            (::windows::core::Vtable::vtable(this).RepeatBehavior)(
                ::windows::core::Vtable::as_raw(this),
                result__.as_mut_ptr(),
            )
            .from_abi::<RepeatBehavior>(result__)
        }
    }
    pub fn SetRepeatBehavior(&self, value: RepeatBehavior) -> ::windows::core::Result<()> {
        let this = &::windows::core::Interface::cast::<ITimeline>(self)?;
        unsafe {
            (::windows::core::Vtable::vtable(this).SetRepeatBehavior)(
                ::windows::core::Vtable::as_raw(this),
                value,
            )
            .ok()
        }
    }
    pub fn Completed(
        &self,
        handler: &::windows::Foundation::EventHandler<::windows::core::IInspectable>,
    ) -> ::windows::core::Result<::windows::Foundation::EventRegistrationToken> {
        let this = &::windows::core::Interface::cast::<ITimeline>(self)?;
        unsafe {
            let mut result__ = ::core::mem::MaybeUninit::zeroed();
            (::windows::core::Vtable::vtable(this).Completed)(
                ::windows::core::Vtable::as_raw(this),
                ::core::mem::transmute_copy(handler),
                result__.as_mut_ptr(),
            )
            .from_abi::<::windows::Foundation::EventRegistrationToken>(result__)
        }
    }
    pub fn RemoveCompleted(
        &self,
        token: ::windows::Foundation::EventRegistrationToken,
    ) -> ::windows::core::Result<()> {
        let this = &::windows::core::Interface::cast::<ITimeline>(self)?;
        unsafe {
            (::windows::core::Vtable::vtable(this).RemoveCompleted)(
                ::windows::core::Vtable::as_raw(this),
                token,
            )
            .ok()
        }
    }
    #[doc(hidden)]
    pub fn IDropTargetItemThemeAnimationStatics<
        R,
        F: FnOnce(&IDropTargetItemThemeAnimationStatics) -> ::windows::core::Result<R>,
    >(
        callback: F,
    ) -> ::windows::core::Result<R> {
        static SHARED: ::windows::core::FactoryCache<
            DropTargetItemThemeAnimation,
            IDropTargetItemThemeAnimationStatics,
        > = ::windows::core::FactoryCache::new();
        SHARED.call(callback)
    }
}
impl ::core::clone::Clone for DropTargetItemThemeAnimation {
    fn clone(&self) -> Self {
        Self(self.0.clone())
    }
}
impl ::core::cmp::PartialEq for DropTargetItemThemeAnimation {
    fn eq(&self, other: &Self) -> bool {
        self.0 == other.0
    }
}
impl ::core::cmp::Eq for DropTargetItemThemeAnimation {}
impl ::core::fmt::Debug for DropTargetItemThemeAnimation {
    fn fmt(&self, f: &mut ::core::fmt::Formatter<'_>) -> ::core::fmt::Result {
        f.debug_tuple("DropTargetItemThemeAnimation").field(&self.0).finish()
    }
}
unsafe impl ::windows::core::RuntimeType for DropTargetItemThemeAnimation {
    const SIGNATURE : ::windows::core::ConstBuffer = ::windows::core::ConstBuffer::from_slice ( b"rc(Microsoft.UI.Xaml.Media.Animation.DropTargetItemThemeAnimation;{b97f19c0-f1e2-5705-a252-2db05d2e5a54})" ) ;
    type DefaultType = ::core::option::Option<Self>;
    fn from_default(from: &Self::DefaultType) -> ::windows::core::Result<Self> {
        from.as_ref().cloned().ok_or(::windows::core::Error::OK)
    }
}
unsafe impl ::windows::core::Vtable for DropTargetItemThemeAnimation {
    type Vtable = IDropTargetItemThemeAnimation_Vtbl;
}
unsafe impl ::windows::core::Interface for DropTargetItemThemeAnimation {
    const IID: ::windows::core::GUID =
        <IDropTargetItemThemeAnimation as ::windows::core::Interface>::IID;
}
impl ::windows::core::RuntimeName for DropTargetItemThemeAnimation {
    const NAME: &'static str = "Microsoft.UI.Xaml.Media.Animation.DropTargetItemThemeAnimation";
}
::windows::core::interface_hierarchy!(
    DropTargetItemThemeAnimation,
    ::windows::core::IUnknown,
    ::windows::core::IInspectable
);
impl ::core::convert::From<DropTargetItemThemeAnimation> for Timeline {
    fn from(value: DropTargetItemThemeAnimation) -> Self {
        ::core::convert::From::from(&value)
    }
}
impl ::core::convert::From<&DropTargetItemThemeAnimation> for Timeline {
    fn from(value: &DropTargetItemThemeAnimation) -> Self {
        ::windows::core::Interface::cast(value).unwrap()
    }
}
impl<'a> ::core::convert::From<&DropTargetItemThemeAnimation>
    for ::windows::core::InParam<'a, Timeline>
{
    fn from(value: &DropTargetItemThemeAnimation) -> Self {
        ::windows::core::InParam::owned(value.into())
    }
}
impl ::core::convert::From<DropTargetItemThemeAnimation> for super::super::DependencyObject {
    fn from(value: DropTargetItemThemeAnimation) -> Self {
        ::core::convert::From::from(&value)
    }
}
impl ::core::convert::From<&DropTargetItemThemeAnimation> for super::super::DependencyObject {
    fn from(value: &DropTargetItemThemeAnimation) -> Self {
        ::windows::core::Interface::cast(value).unwrap()
    }
}
impl<'a> ::core::convert::From<&DropTargetItemThemeAnimation>
    for ::windows::core::InParam<'a, super::super::DependencyObject>
{
    fn from(value: &DropTargetItemThemeAnimation) -> Self {
        ::windows::core::InParam::owned(value.into())
    }
}
unsafe impl ::core::marker::Send for DropTargetItemThemeAnimation {}
unsafe impl ::core::marker::Sync for DropTargetItemThemeAnimation {}
#[doc = "*Required features: `\"UI_Xaml_Media_Animation\"`*"]
#[repr(transparent)]
pub struct EasingColorKeyFrame(::windows::core::IUnknown);
impl EasingColorKeyFrame {
    pub fn new() -> ::windows::core::Result<Self> {
        Self::IActivationFactory(|f| f.ActivateInstance::<Self>())
    }
    fn IActivationFactory<
        R,
        F: FnOnce(&::windows::core::IGenericFactory) -> ::windows::core::Result<R>,
    >(
        callback: F,
    ) -> ::windows::core::Result<R> {
        static SHARED: ::windows::core::FactoryCache<
            EasingColorKeyFrame,
            ::windows::core::IGenericFactory,
        > = ::windows::core::FactoryCache::new();
        SHARED.call(callback)
    }
    pub fn Value(&self) -> ::windows::core::Result<::windows::UI::Color> {
        let this = &::windows::core::Interface::cast::<IColorKeyFrame>(self)?;
        unsafe {
            let mut result__ = ::core::mem::MaybeUninit::zeroed();
            (::windows::core::Vtable::vtable(this).Value)(
                ::windows::core::Vtable::as_raw(this),
                result__.as_mut_ptr(),
            )
            .from_abi::<::windows::UI::Color>(result__)
        }
    }
    pub fn SetValue(&self, value: ::windows::UI::Color) -> ::windows::core::Result<()> {
        let this = &::windows::core::Interface::cast::<IColorKeyFrame>(self)?;
        unsafe {
            (::windows::core::Vtable::vtable(this).SetValue)(
                ::windows::core::Vtable::as_raw(this),
                value,
            )
            .ok()
        }
    }
    pub fn KeyTime(&self) -> ::windows::core::Result<KeyTime> {
        let this = &::windows::core::Interface::cast::<IColorKeyFrame>(self)?;
        unsafe {
            let mut result__ = ::core::mem::MaybeUninit::zeroed();
            (::windows::core::Vtable::vtable(this).KeyTime)(
                ::windows::core::Vtable::as_raw(this),
                result__.as_mut_ptr(),
            )
            .from_abi::<KeyTime>(result__)
        }
    }
    pub fn SetKeyTime(&self, value: KeyTime) -> ::windows::core::Result<()> {
        let this = &::windows::core::Interface::cast::<IColorKeyFrame>(self)?;
        unsafe {
            (::windows::core::Vtable::vtable(this).SetKeyTime)(
                ::windows::core::Vtable::as_raw(this),
                value,
            )
            .ok()
        }
    }
    pub fn GetValue(
        &self,
        dp: &super::super::DependencyProperty,
    ) -> ::windows::core::Result<::windows::core::IInspectable> {
        let this = &::windows::core::Interface::cast::<super::super::IDependencyObject>(self)?;
        unsafe {
            let mut result__ = ::core::mem::MaybeUninit::zeroed();
            (::windows::core::Vtable::vtable(this).GetValue)(
                ::windows::core::Vtable::as_raw(this),
                ::core::mem::transmute_copy(dp),
                result__.as_mut_ptr(),
            )
            .from_abi::<::windows::core::IInspectable>(result__)
        }
    }
    pub fn SetValue2<'a, P0>(
        &self,
        dp: &super::super::DependencyProperty,
        value: P0,
    ) -> ::windows::core::Result<()>
    where
        P0: ::std::convert::Into<::windows::core::InParam<'a, ::windows::core::IInspectable>>,
    {
        let this = &::windows::core::Interface::cast::<super::super::IDependencyObject>(self)?;
        unsafe {
            (::windows::core::Vtable::vtable(this).SetValue)(
                ::windows::core::Vtable::as_raw(this),
                ::core::mem::transmute_copy(dp),
                value.into().abi(),
            )
            .ok()
        }
    }
    pub fn ClearValue(&self, dp: &super::super::DependencyProperty) -> ::windows::core::Result<()> {
        let this = &::windows::core::Interface::cast::<super::super::IDependencyObject>(self)?;
        unsafe {
            (::windows::core::Vtable::vtable(this).ClearValue)(
                ::windows::core::Vtable::as_raw(this),
                ::core::mem::transmute_copy(dp),
            )
            .ok()
        }
    }
    pub fn ReadLocalValue(
        &self,
        dp: &super::super::DependencyProperty,
    ) -> ::windows::core::Result<::windows::core::IInspectable> {
        let this = &::windows::core::Interface::cast::<super::super::IDependencyObject>(self)?;
        unsafe {
            let mut result__ = ::core::mem::MaybeUninit::zeroed();
            (::windows::core::Vtable::vtable(this).ReadLocalValue)(
                ::windows::core::Vtable::as_raw(this),
                ::core::mem::transmute_copy(dp),
                result__.as_mut_ptr(),
            )
            .from_abi::<::windows::core::IInspectable>(result__)
        }
    }
    pub fn GetAnimationBaseValue(
        &self,
        dp: &super::super::DependencyProperty,
    ) -> ::windows::core::Result<::windows::core::IInspectable> {
        let this = &::windows::core::Interface::cast::<super::super::IDependencyObject>(self)?;
        unsafe {
            let mut result__ = ::core::mem::MaybeUninit::zeroed();
            (::windows::core::Vtable::vtable(this).GetAnimationBaseValue)(
                ::windows::core::Vtable::as_raw(this),
                ::core::mem::transmute_copy(dp),
                result__.as_mut_ptr(),
            )
            .from_abi::<::windows::core::IInspectable>(result__)
        }
    }
    pub fn RegisterPropertyChangedCallback(
        &self,
        dp: &super::super::DependencyProperty,
        callback: &super::super::DependencyPropertyChangedCallback,
    ) -> ::windows::core::Result<i64> {
        let this = &::windows::core::Interface::cast::<super::super::IDependencyObject>(self)?;
        unsafe {
            let mut result__ = ::core::mem::MaybeUninit::zeroed();
            (::windows::core::Vtable::vtable(this).RegisterPropertyChangedCallback)(
                ::windows::core::Vtable::as_raw(this),
                ::core::mem::transmute_copy(dp),
                ::core::mem::transmute_copy(callback),
                result__.as_mut_ptr(),
            )
            .from_abi::<i64>(result__)
        }
    }
    pub fn UnregisterPropertyChangedCallback(
        &self,
        dp: &super::super::DependencyProperty,
        token: i64,
    ) -> ::windows::core::Result<()> {
        let this = &::windows::core::Interface::cast::<super::super::IDependencyObject>(self)?;
        unsafe {
            (::windows::core::Vtable::vtable(this).UnregisterPropertyChangedCallback)(
                ::windows::core::Vtable::as_raw(this),
                ::core::mem::transmute_copy(dp),
                token,
            )
            .ok()
        }
    }
    pub fn Dispatcher(&self) -> ::windows::core::Result<::windows::UI::Core::CoreDispatcher> {
        let this = &::windows::core::Interface::cast::<super::super::IDependencyObject>(self)?;
        unsafe {
            let mut result__ = ::core::mem::MaybeUninit::zeroed();
            (::windows::core::Vtable::vtable(this).Dispatcher)(
                ::windows::core::Vtable::as_raw(this),
                result__.as_mut_ptr(),
            )
            .from_abi::<::windows::UI::Core::CoreDispatcher>(result__)
        }
    }
    #[doc = "*Required features: `\"UI_Dispatching\"`*"]
    #[cfg(feature = "UI_Dispatching")]
    pub fn DispatcherQueue(
        &self,
    ) -> ::windows::core::Result<super::super::super::Dispatching::DispatcherQueue> {
        let this = &::windows::core::Interface::cast::<super::super::IDependencyObject>(self)?;
        unsafe {
            let mut result__ = ::core::mem::MaybeUninit::zeroed();
            (::windows::core::Vtable::vtable(this).DispatcherQueue)(
                ::windows::core::Vtable::as_raw(this),
                result__.as_mut_ptr(),
            )
            .from_abi::<super::super::super::Dispatching::DispatcherQueue>(result__)
        }
    }
    pub fn EasingFunction(&self) -> ::windows::core::Result<EasingFunctionBase> {
        let this = self;
        unsafe {
            let mut result__ = ::core::mem::MaybeUninit::zeroed();
            (::windows::core::Vtable::vtable(this).EasingFunction)(
                ::windows::core::Vtable::as_raw(this),
                result__.as_mut_ptr(),
            )
            .from_abi::<EasingFunctionBase>(result__)
        }
    }
    pub fn SetEasingFunction<'a, P0>(&self, value: P0) -> ::windows::core::Result<()>
    where
        P0: ::std::convert::Into<::windows::core::InParam<'a, EasingFunctionBase>>,
    {
        let this = self;
        unsafe {
            (::windows::core::Vtable::vtable(this).SetEasingFunction)(
                ::windows::core::Vtable::as_raw(this),
                value.into().abi(),
            )
            .ok()
        }
    }
    pub fn EasingFunctionProperty() -> ::windows::core::Result<super::super::DependencyProperty> {
        Self::IEasingColorKeyFrameStatics(|this| unsafe {
            let mut result__ = ::core::mem::MaybeUninit::zeroed();
            (::windows::core::Vtable::vtable(this).EasingFunctionProperty)(
                ::windows::core::Vtable::as_raw(this),
                result__.as_mut_ptr(),
            )
            .from_abi::<super::super::DependencyProperty>(result__)
        })
    }
    #[doc(hidden)]
    pub fn IEasingColorKeyFrameStatics<
        R,
        F: FnOnce(&IEasingColorKeyFrameStatics) -> ::windows::core::Result<R>,
    >(
        callback: F,
    ) -> ::windows::core::Result<R> {
        static SHARED: ::windows::core::FactoryCache<
            EasingColorKeyFrame,
            IEasingColorKeyFrameStatics,
        > = ::windows::core::FactoryCache::new();
        SHARED.call(callback)
    }
}
impl ::core::clone::Clone for EasingColorKeyFrame {
    fn clone(&self) -> Self {
        Self(self.0.clone())
    }
}
impl ::core::cmp::PartialEq for EasingColorKeyFrame {
    fn eq(&self, other: &Self) -> bool {
        self.0 == other.0
    }
}
impl ::core::cmp::Eq for EasingColorKeyFrame {}
impl ::core::fmt::Debug for EasingColorKeyFrame {
    fn fmt(&self, f: &mut ::core::fmt::Formatter<'_>) -> ::core::fmt::Result {
        f.debug_tuple("EasingColorKeyFrame").field(&self.0).finish()
    }
}
unsafe impl ::windows::core::RuntimeType for EasingColorKeyFrame {
    const SIGNATURE : ::windows::core::ConstBuffer = ::windows::core::ConstBuffer::from_slice ( b"rc(Microsoft.UI.Xaml.Media.Animation.EasingColorKeyFrame;{a137a710-da3c-5426-a1a2-3a5a672a4264})" ) ;
    type DefaultType = ::core::option::Option<Self>;
    fn from_default(from: &Self::DefaultType) -> ::windows::core::Result<Self> {
        from.as_ref().cloned().ok_or(::windows::core::Error::OK)
    }
}
unsafe impl ::windows::core::Vtable for EasingColorKeyFrame {
    type Vtable = IEasingColorKeyFrame_Vtbl;
}
unsafe impl ::windows::core::Interface for EasingColorKeyFrame {
    const IID: ::windows::core::GUID = <IEasingColorKeyFrame as ::windows::core::Interface>::IID;
}
impl ::windows::core::RuntimeName for EasingColorKeyFrame {
    const NAME: &'static str = "Microsoft.UI.Xaml.Media.Animation.EasingColorKeyFrame";
}
::windows::core::interface_hierarchy!(
    EasingColorKeyFrame,
    ::windows::core::IUnknown,
    ::windows::core::IInspectable
);
impl ::core::convert::From<EasingColorKeyFrame> for ColorKeyFrame {
    fn from(value: EasingColorKeyFrame) -> Self {
        ::core::convert::From::from(&value)
    }
}
impl ::core::convert::From<&EasingColorKeyFrame> for ColorKeyFrame {
    fn from(value: &EasingColorKeyFrame) -> Self {
        ::windows::core::Interface::cast(value).unwrap()
    }
}
impl<'a> ::core::convert::From<&EasingColorKeyFrame>
    for ::windows::core::InParam<'a, ColorKeyFrame>
{
    fn from(value: &EasingColorKeyFrame) -> Self {
        ::windows::core::InParam::owned(value.into())
    }
}
impl ::core::convert::From<EasingColorKeyFrame> for super::super::DependencyObject {
    fn from(value: EasingColorKeyFrame) -> Self {
        ::core::convert::From::from(&value)
    }
}
impl ::core::convert::From<&EasingColorKeyFrame> for super::super::DependencyObject {
    fn from(value: &EasingColorKeyFrame) -> Self {
        ::windows::core::Interface::cast(value).unwrap()
    }
}
impl<'a> ::core::convert::From<&EasingColorKeyFrame>
    for ::windows::core::InParam<'a, super::super::DependencyObject>
{
    fn from(value: &EasingColorKeyFrame) -> Self {
        ::windows::core::InParam::owned(value.into())
    }
}
unsafe impl ::core::marker::Send for EasingColorKeyFrame {}
unsafe impl ::core::marker::Sync for EasingColorKeyFrame {}
#[doc = "*Required features: `\"UI_Xaml_Media_Animation\"`*"]
#[repr(transparent)]
pub struct EasingDoubleKeyFrame(::windows::core::IUnknown);
impl EasingDoubleKeyFrame {
    pub fn new() -> ::windows::core::Result<Self> {
        Self::IActivationFactory(|f| f.ActivateInstance::<Self>())
    }
    fn IActivationFactory<
        R,
        F: FnOnce(&::windows::core::IGenericFactory) -> ::windows::core::Result<R>,
    >(
        callback: F,
    ) -> ::windows::core::Result<R> {
        static SHARED: ::windows::core::FactoryCache<
            EasingDoubleKeyFrame,
            ::windows::core::IGenericFactory,
        > = ::windows::core::FactoryCache::new();
        SHARED.call(callback)
    }
    pub fn GetValue(
        &self,
        dp: &super::super::DependencyProperty,
    ) -> ::windows::core::Result<::windows::core::IInspectable> {
        let this = &::windows::core::Interface::cast::<super::super::IDependencyObject>(self)?;
        unsafe {
            let mut result__ = ::core::mem::MaybeUninit::zeroed();
            (::windows::core::Vtable::vtable(this).GetValue)(
                ::windows::core::Vtable::as_raw(this),
                ::core::mem::transmute_copy(dp),
                result__.as_mut_ptr(),
            )
            .from_abi::<::windows::core::IInspectable>(result__)
        }
    }
    pub fn SetValue<'a, P0>(
        &self,
        dp: &super::super::DependencyProperty,
        value: P0,
    ) -> ::windows::core::Result<()>
    where
        P0: ::std::convert::Into<::windows::core::InParam<'a, ::windows::core::IInspectable>>,
    {
        let this = &::windows::core::Interface::cast::<super::super::IDependencyObject>(self)?;
        unsafe {
            (::windows::core::Vtable::vtable(this).SetValue)(
                ::windows::core::Vtable::as_raw(this),
                ::core::mem::transmute_copy(dp),
                value.into().abi(),
            )
            .ok()
        }
    }
    pub fn ClearValue(&self, dp: &super::super::DependencyProperty) -> ::windows::core::Result<()> {
        let this = &::windows::core::Interface::cast::<super::super::IDependencyObject>(self)?;
        unsafe {
            (::windows::core::Vtable::vtable(this).ClearValue)(
                ::windows::core::Vtable::as_raw(this),
                ::core::mem::transmute_copy(dp),
            )
            .ok()
        }
    }
    pub fn ReadLocalValue(
        &self,
        dp: &super::super::DependencyProperty,
    ) -> ::windows::core::Result<::windows::core::IInspectable> {
        let this = &::windows::core::Interface::cast::<super::super::IDependencyObject>(self)?;
        unsafe {
            let mut result__ = ::core::mem::MaybeUninit::zeroed();
            (::windows::core::Vtable::vtable(this).ReadLocalValue)(
                ::windows::core::Vtable::as_raw(this),
                ::core::mem::transmute_copy(dp),
                result__.as_mut_ptr(),
            )
            .from_abi::<::windows::core::IInspectable>(result__)
        }
    }
    pub fn GetAnimationBaseValue(
        &self,
        dp: &super::super::DependencyProperty,
    ) -> ::windows::core::Result<::windows::core::IInspectable> {
        let this = &::windows::core::Interface::cast::<super::super::IDependencyObject>(self)?;
        unsafe {
            let mut result__ = ::core::mem::MaybeUninit::zeroed();
            (::windows::core::Vtable::vtable(this).GetAnimationBaseValue)(
                ::windows::core::Vtable::as_raw(this),
                ::core::mem::transmute_copy(dp),
                result__.as_mut_ptr(),
            )
            .from_abi::<::windows::core::IInspectable>(result__)
        }
    }
    pub fn RegisterPropertyChangedCallback(
        &self,
        dp: &super::super::DependencyProperty,
        callback: &super::super::DependencyPropertyChangedCallback,
    ) -> ::windows::core::Result<i64> {
        let this = &::windows::core::Interface::cast::<super::super::IDependencyObject>(self)?;
        unsafe {
            let mut result__ = ::core::mem::MaybeUninit::zeroed();
            (::windows::core::Vtable::vtable(this).RegisterPropertyChangedCallback)(
                ::windows::core::Vtable::as_raw(this),
                ::core::mem::transmute_copy(dp),
                ::core::mem::transmute_copy(callback),
                result__.as_mut_ptr(),
            )
            .from_abi::<i64>(result__)
        }
    }
    pub fn UnregisterPropertyChangedCallback(
        &self,
        dp: &super::super::DependencyProperty,
        token: i64,
    ) -> ::windows::core::Result<()> {
        let this = &::windows::core::Interface::cast::<super::super::IDependencyObject>(self)?;
        unsafe {
            (::windows::core::Vtable::vtable(this).UnregisterPropertyChangedCallback)(
                ::windows::core::Vtable::as_raw(this),
                ::core::mem::transmute_copy(dp),
                token,
            )
            .ok()
        }
    }
    pub fn Dispatcher(&self) -> ::windows::core::Result<::windows::UI::Core::CoreDispatcher> {
        let this = &::windows::core::Interface::cast::<super::super::IDependencyObject>(self)?;
        unsafe {
            let mut result__ = ::core::mem::MaybeUninit::zeroed();
            (::windows::core::Vtable::vtable(this).Dispatcher)(
                ::windows::core::Vtable::as_raw(this),
                result__.as_mut_ptr(),
            )
            .from_abi::<::windows::UI::Core::CoreDispatcher>(result__)
        }
    }
    #[doc = "*Required features: `\"UI_Dispatching\"`*"]
    #[cfg(feature = "UI_Dispatching")]
    pub fn DispatcherQueue(
        &self,
    ) -> ::windows::core::Result<super::super::super::Dispatching::DispatcherQueue> {
        let this = &::windows::core::Interface::cast::<super::super::IDependencyObject>(self)?;
        unsafe {
            let mut result__ = ::core::mem::MaybeUninit::zeroed();
            (::windows::core::Vtable::vtable(this).DispatcherQueue)(
                ::windows::core::Vtable::as_raw(this),
                result__.as_mut_ptr(),
            )
            .from_abi::<super::super::super::Dispatching::DispatcherQueue>(result__)
        }
    }
    pub fn Value(&self) -> ::windows::core::Result<f64> {
        let this = &::windows::core::Interface::cast::<IDoubleKeyFrame>(self)?;
        unsafe {
            let mut result__ = ::core::mem::MaybeUninit::zeroed();
            (::windows::core::Vtable::vtable(this).Value)(
                ::windows::core::Vtable::as_raw(this),
                result__.as_mut_ptr(),
            )
            .from_abi::<f64>(result__)
        }
    }
    pub fn SetValue2(&self, value: f64) -> ::windows::core::Result<()> {
        let this = &::windows::core::Interface::cast::<IDoubleKeyFrame>(self)?;
        unsafe {
            (::windows::core::Vtable::vtable(this).SetValue)(
                ::windows::core::Vtable::as_raw(this),
                value,
            )
            .ok()
        }
    }
    pub fn KeyTime(&self) -> ::windows::core::Result<KeyTime> {
        let this = &::windows::core::Interface::cast::<IDoubleKeyFrame>(self)?;
        unsafe {
            let mut result__ = ::core::mem::MaybeUninit::zeroed();
            (::windows::core::Vtable::vtable(this).KeyTime)(
                ::windows::core::Vtable::as_raw(this),
                result__.as_mut_ptr(),
            )
            .from_abi::<KeyTime>(result__)
        }
    }
    pub fn SetKeyTime(&self, value: KeyTime) -> ::windows::core::Result<()> {
        let this = &::windows::core::Interface::cast::<IDoubleKeyFrame>(self)?;
        unsafe {
            (::windows::core::Vtable::vtable(this).SetKeyTime)(
                ::windows::core::Vtable::as_raw(this),
                value,
            )
            .ok()
        }
    }
    pub fn EasingFunction(&self) -> ::windows::core::Result<EasingFunctionBase> {
        let this = self;
        unsafe {
            let mut result__ = ::core::mem::MaybeUninit::zeroed();
            (::windows::core::Vtable::vtable(this).EasingFunction)(
                ::windows::core::Vtable::as_raw(this),
                result__.as_mut_ptr(),
            )
            .from_abi::<EasingFunctionBase>(result__)
        }
    }
    pub fn SetEasingFunction<'a, P0>(&self, value: P0) -> ::windows::core::Result<()>
    where
        P0: ::std::convert::Into<::windows::core::InParam<'a, EasingFunctionBase>>,
    {
        let this = self;
        unsafe {
            (::windows::core::Vtable::vtable(this).SetEasingFunction)(
                ::windows::core::Vtable::as_raw(this),
                value.into().abi(),
            )
            .ok()
        }
    }
    pub fn EasingFunctionProperty() -> ::windows::core::Result<super::super::DependencyProperty> {
        Self::IEasingDoubleKeyFrameStatics(|this| unsafe {
            let mut result__ = ::core::mem::MaybeUninit::zeroed();
            (::windows::core::Vtable::vtable(this).EasingFunctionProperty)(
                ::windows::core::Vtable::as_raw(this),
                result__.as_mut_ptr(),
            )
            .from_abi::<super::super::DependencyProperty>(result__)
        })
    }
    #[doc(hidden)]
    pub fn IEasingDoubleKeyFrameStatics<
        R,
        F: FnOnce(&IEasingDoubleKeyFrameStatics) -> ::windows::core::Result<R>,
    >(
        callback: F,
    ) -> ::windows::core::Result<R> {
        static SHARED: ::windows::core::FactoryCache<
            EasingDoubleKeyFrame,
            IEasingDoubleKeyFrameStatics,
        > = ::windows::core::FactoryCache::new();
        SHARED.call(callback)
    }
}
impl ::core::clone::Clone for EasingDoubleKeyFrame {
    fn clone(&self) -> Self {
        Self(self.0.clone())
    }
}
impl ::core::cmp::PartialEq for EasingDoubleKeyFrame {
    fn eq(&self, other: &Self) -> bool {
        self.0 == other.0
    }
}
impl ::core::cmp::Eq for EasingDoubleKeyFrame {}
impl ::core::fmt::Debug for EasingDoubleKeyFrame {
    fn fmt(&self, f: &mut ::core::fmt::Formatter<'_>) -> ::core::fmt::Result {
        f.debug_tuple("EasingDoubleKeyFrame").field(&self.0).finish()
    }
}
unsafe impl ::windows::core::RuntimeType for EasingDoubleKeyFrame {
    const SIGNATURE : ::windows::core::ConstBuffer = ::windows::core::ConstBuffer::from_slice ( b"rc(Microsoft.UI.Xaml.Media.Animation.EasingDoubleKeyFrame;{935d9b7e-da61-5bb2-a574-7d2e53b60561})" ) ;
    type DefaultType = ::core::option::Option<Self>;
    fn from_default(from: &Self::DefaultType) -> ::windows::core::Result<Self> {
        from.as_ref().cloned().ok_or(::windows::core::Error::OK)
    }
}
unsafe impl ::windows::core::Vtable for EasingDoubleKeyFrame {
    type Vtable = IEasingDoubleKeyFrame_Vtbl;
}
unsafe impl ::windows::core::Interface for EasingDoubleKeyFrame {
    const IID: ::windows::core::GUID = <IEasingDoubleKeyFrame as ::windows::core::Interface>::IID;
}
impl ::windows::core::RuntimeName for EasingDoubleKeyFrame {
    const NAME: &'static str = "Microsoft.UI.Xaml.Media.Animation.EasingDoubleKeyFrame";
}
::windows::core::interface_hierarchy!(
    EasingDoubleKeyFrame,
    ::windows::core::IUnknown,
    ::windows::core::IInspectable
);
impl ::core::convert::From<EasingDoubleKeyFrame> for DoubleKeyFrame {
    fn from(value: EasingDoubleKeyFrame) -> Self {
        ::core::convert::From::from(&value)
    }
}
impl ::core::convert::From<&EasingDoubleKeyFrame> for DoubleKeyFrame {
    fn from(value: &EasingDoubleKeyFrame) -> Self {
        ::windows::core::Interface::cast(value).unwrap()
    }
}
impl<'a> ::core::convert::From<&EasingDoubleKeyFrame>
    for ::windows::core::InParam<'a, DoubleKeyFrame>
{
    fn from(value: &EasingDoubleKeyFrame) -> Self {
        ::windows::core::InParam::owned(value.into())
    }
}
impl ::core::convert::From<EasingDoubleKeyFrame> for super::super::DependencyObject {
    fn from(value: EasingDoubleKeyFrame) -> Self {
        ::core::convert::From::from(&value)
    }
}
impl ::core::convert::From<&EasingDoubleKeyFrame> for super::super::DependencyObject {
    fn from(value: &EasingDoubleKeyFrame) -> Self {
        ::windows::core::Interface::cast(value).unwrap()
    }
}
impl<'a> ::core::convert::From<&EasingDoubleKeyFrame>
    for ::windows::core::InParam<'a, super::super::DependencyObject>
{
    fn from(value: &EasingDoubleKeyFrame) -> Self {
        ::windows::core::InParam::owned(value.into())
    }
}
unsafe impl ::core::marker::Send for EasingDoubleKeyFrame {}
unsafe impl ::core::marker::Sync for EasingDoubleKeyFrame {}
#[doc = "*Required features: `\"UI_Xaml_Media_Animation\"`*"]
#[repr(transparent)]
pub struct EasingFunctionBase(::windows::core::IUnknown);
impl EasingFunctionBase {
    pub fn GetValue(
        &self,
        dp: &super::super::DependencyProperty,
    ) -> ::windows::core::Result<::windows::core::IInspectable> {
        let this = &::windows::core::Interface::cast::<super::super::IDependencyObject>(self)?;
        unsafe {
            let mut result__ = ::core::mem::MaybeUninit::zeroed();
            (::windows::core::Vtable::vtable(this).GetValue)(
                ::windows::core::Vtable::as_raw(this),
                ::core::mem::transmute_copy(dp),
                result__.as_mut_ptr(),
            )
            .from_abi::<::windows::core::IInspectable>(result__)
        }
    }
    pub fn SetValue<'a, P0>(
        &self,
        dp: &super::super::DependencyProperty,
        value: P0,
    ) -> ::windows::core::Result<()>
    where
        P0: ::std::convert::Into<::windows::core::InParam<'a, ::windows::core::IInspectable>>,
    {
        let this = &::windows::core::Interface::cast::<super::super::IDependencyObject>(self)?;
        unsafe {
            (::windows::core::Vtable::vtable(this).SetValue)(
                ::windows::core::Vtable::as_raw(this),
                ::core::mem::transmute_copy(dp),
                value.into().abi(),
            )
            .ok()
        }
    }
    pub fn ClearValue(&self, dp: &super::super::DependencyProperty) -> ::windows::core::Result<()> {
        let this = &::windows::core::Interface::cast::<super::super::IDependencyObject>(self)?;
        unsafe {
            (::windows::core::Vtable::vtable(this).ClearValue)(
                ::windows::core::Vtable::as_raw(this),
                ::core::mem::transmute_copy(dp),
            )
            .ok()
        }
    }
    pub fn ReadLocalValue(
        &self,
        dp: &super::super::DependencyProperty,
    ) -> ::windows::core::Result<::windows::core::IInspectable> {
        let this = &::windows::core::Interface::cast::<super::super::IDependencyObject>(self)?;
        unsafe {
            let mut result__ = ::core::mem::MaybeUninit::zeroed();
            (::windows::core::Vtable::vtable(this).ReadLocalValue)(
                ::windows::core::Vtable::as_raw(this),
                ::core::mem::transmute_copy(dp),
                result__.as_mut_ptr(),
            )
            .from_abi::<::windows::core::IInspectable>(result__)
        }
    }
    pub fn GetAnimationBaseValue(
        &self,
        dp: &super::super::DependencyProperty,
    ) -> ::windows::core::Result<::windows::core::IInspectable> {
        let this = &::windows::core::Interface::cast::<super::super::IDependencyObject>(self)?;
        unsafe {
            let mut result__ = ::core::mem::MaybeUninit::zeroed();
            (::windows::core::Vtable::vtable(this).GetAnimationBaseValue)(
                ::windows::core::Vtable::as_raw(this),
                ::core::mem::transmute_copy(dp),
                result__.as_mut_ptr(),
            )
            .from_abi::<::windows::core::IInspectable>(result__)
        }
    }
    pub fn RegisterPropertyChangedCallback(
        &self,
        dp: &super::super::DependencyProperty,
        callback: &super::super::DependencyPropertyChangedCallback,
    ) -> ::windows::core::Result<i64> {
        let this = &::windows::core::Interface::cast::<super::super::IDependencyObject>(self)?;
        unsafe {
            let mut result__ = ::core::mem::MaybeUninit::zeroed();
            (::windows::core::Vtable::vtable(this).RegisterPropertyChangedCallback)(
                ::windows::core::Vtable::as_raw(this),
                ::core::mem::transmute_copy(dp),
                ::core::mem::transmute_copy(callback),
                result__.as_mut_ptr(),
            )
            .from_abi::<i64>(result__)
        }
    }
    pub fn UnregisterPropertyChangedCallback(
        &self,
        dp: &super::super::DependencyProperty,
        token: i64,
    ) -> ::windows::core::Result<()> {
        let this = &::windows::core::Interface::cast::<super::super::IDependencyObject>(self)?;
        unsafe {
            (::windows::core::Vtable::vtable(this).UnregisterPropertyChangedCallback)(
                ::windows::core::Vtable::as_raw(this),
                ::core::mem::transmute_copy(dp),
                token,
            )
            .ok()
        }
    }
    pub fn Dispatcher(&self) -> ::windows::core::Result<::windows::UI::Core::CoreDispatcher> {
        let this = &::windows::core::Interface::cast::<super::super::IDependencyObject>(self)?;
        unsafe {
            let mut result__ = ::core::mem::MaybeUninit::zeroed();
            (::windows::core::Vtable::vtable(this).Dispatcher)(
                ::windows::core::Vtable::as_raw(this),
                result__.as_mut_ptr(),
            )
            .from_abi::<::windows::UI::Core::CoreDispatcher>(result__)
        }
    }
    #[doc = "*Required features: `\"UI_Dispatching\"`*"]
    #[cfg(feature = "UI_Dispatching")]
    pub fn DispatcherQueue(
        &self,
    ) -> ::windows::core::Result<super::super::super::Dispatching::DispatcherQueue> {
        let this = &::windows::core::Interface::cast::<super::super::IDependencyObject>(self)?;
        unsafe {
            let mut result__ = ::core::mem::MaybeUninit::zeroed();
            (::windows::core::Vtable::vtable(this).DispatcherQueue)(
                ::windows::core::Vtable::as_raw(this),
                result__.as_mut_ptr(),
            )
            .from_abi::<super::super::super::Dispatching::DispatcherQueue>(result__)
        }
    }
    pub fn EasingMode(&self) -> ::windows::core::Result<EasingMode> {
        let this = self;
        unsafe {
            let mut result__ = ::core::mem::MaybeUninit::zeroed();
            (::windows::core::Vtable::vtable(this).EasingMode)(
                ::windows::core::Vtable::as_raw(this),
                result__.as_mut_ptr(),
            )
            .from_abi::<EasingMode>(result__)
        }
    }
    pub fn SetEasingMode(&self, value: EasingMode) -> ::windows::core::Result<()> {
        let this = self;
        unsafe {
            (::windows::core::Vtable::vtable(this).SetEasingMode)(
                ::windows::core::Vtable::as_raw(this),
                value,
            )
            .ok()
        }
    }
    pub fn Ease(&self, normalizedtime: f64) -> ::windows::core::Result<f64> {
        let this = self;
        unsafe {
            let mut result__ = ::core::mem::MaybeUninit::zeroed();
            (::windows::core::Vtable::vtable(this).Ease)(
                ::windows::core::Vtable::as_raw(this),
                normalizedtime,
                result__.as_mut_ptr(),
            )
            .from_abi::<f64>(result__)
        }
    }
    pub fn EasingModeProperty() -> ::windows::core::Result<super::super::DependencyProperty> {
        Self::IEasingFunctionBaseStatics(|this| unsafe {
            let mut result__ = ::core::mem::MaybeUninit::zeroed();
            (::windows::core::Vtable::vtable(this).EasingModeProperty)(
                ::windows::core::Vtable::as_raw(this),
                result__.as_mut_ptr(),
            )
            .from_abi::<super::super::DependencyProperty>(result__)
        })
    }
    #[doc(hidden)]
    pub fn IEasingFunctionBaseStatics<
        R,
        F: FnOnce(&IEasingFunctionBaseStatics) -> ::windows::core::Result<R>,
    >(
        callback: F,
    ) -> ::windows::core::Result<R> {
        static SHARED: ::windows::core::FactoryCache<
            EasingFunctionBase,
            IEasingFunctionBaseStatics,
        > = ::windows::core::FactoryCache::new();
        SHARED.call(callback)
    }
}
impl ::core::clone::Clone for EasingFunctionBase {
    fn clone(&self) -> Self {
        Self(self.0.clone())
    }
}
impl ::core::cmp::PartialEq for EasingFunctionBase {
    fn eq(&self, other: &Self) -> bool {
        self.0 == other.0
    }
}
impl ::core::cmp::Eq for EasingFunctionBase {}
impl ::core::fmt::Debug for EasingFunctionBase {
    fn fmt(&self, f: &mut ::core::fmt::Formatter<'_>) -> ::core::fmt::Result {
        f.debug_tuple("EasingFunctionBase").field(&self.0).finish()
    }
}
unsafe impl ::windows::core::RuntimeType for EasingFunctionBase {
    const SIGNATURE : ::windows::core::ConstBuffer = ::windows::core::ConstBuffer::from_slice ( b"rc(Microsoft.UI.Xaml.Media.Animation.EasingFunctionBase;{4fab519a-a93d-5d28-af18-84532bd32efe})" ) ;
    type DefaultType = ::core::option::Option<Self>;
    fn from_default(from: &Self::DefaultType) -> ::windows::core::Result<Self> {
        from.as_ref().cloned().ok_or(::windows::core::Error::OK)
    }
}
unsafe impl ::windows::core::Vtable for EasingFunctionBase {
    type Vtable = IEasingFunctionBase_Vtbl;
}
unsafe impl ::windows::core::Interface for EasingFunctionBase {
    const IID: ::windows::core::GUID = <IEasingFunctionBase as ::windows::core::Interface>::IID;
}
impl ::windows::core::RuntimeName for EasingFunctionBase {
    const NAME: &'static str = "Microsoft.UI.Xaml.Media.Animation.EasingFunctionBase";
}
::windows::core::interface_hierarchy!(
    EasingFunctionBase,
    ::windows::core::IUnknown,
    ::windows::core::IInspectable
);
impl ::core::convert::From<EasingFunctionBase> for super::super::DependencyObject {
    fn from(value: EasingFunctionBase) -> Self {
        ::core::convert::From::from(&value)
    }
}
impl ::core::convert::From<&EasingFunctionBase> for super::super::DependencyObject {
    fn from(value: &EasingFunctionBase) -> Self {
        ::windows::core::Interface::cast(value).unwrap()
    }
}
impl<'a> ::core::convert::From<&EasingFunctionBase>
    for ::windows::core::InParam<'a, super::super::DependencyObject>
{
    fn from(value: &EasingFunctionBase) -> Self {
        ::windows::core::InParam::owned(value.into())
    }
}
unsafe impl ::core::marker::Send for EasingFunctionBase {}
unsafe impl ::core::marker::Sync for EasingFunctionBase {}
#[doc = "*Required features: `\"UI_Xaml_Media_Animation\"`*"]
#[repr(transparent)]
pub struct EasingPointKeyFrame(::windows::core::IUnknown);
impl EasingPointKeyFrame {
    pub fn new() -> ::windows::core::Result<Self> {
        Self::IActivationFactory(|f| f.ActivateInstance::<Self>())
    }
    fn IActivationFactory<
        R,
        F: FnOnce(&::windows::core::IGenericFactory) -> ::windows::core::Result<R>,
    >(
        callback: F,
    ) -> ::windows::core::Result<R> {
        static SHARED: ::windows::core::FactoryCache<
            EasingPointKeyFrame,
            ::windows::core::IGenericFactory,
        > = ::windows::core::FactoryCache::new();
        SHARED.call(callback)
    }
    pub fn GetValue(
        &self,
        dp: &super::super::DependencyProperty,
    ) -> ::windows::core::Result<::windows::core::IInspectable> {
        let this = &::windows::core::Interface::cast::<super::super::IDependencyObject>(self)?;
        unsafe {
            let mut result__ = ::core::mem::MaybeUninit::zeroed();
            (::windows::core::Vtable::vtable(this).GetValue)(
                ::windows::core::Vtable::as_raw(this),
                ::core::mem::transmute_copy(dp),
                result__.as_mut_ptr(),
            )
            .from_abi::<::windows::core::IInspectable>(result__)
        }
    }
    pub fn SetValue<'a, P0>(
        &self,
        dp: &super::super::DependencyProperty,
        value: P0,
    ) -> ::windows::core::Result<()>
    where
        P0: ::std::convert::Into<::windows::core::InParam<'a, ::windows::core::IInspectable>>,
    {
        let this = &::windows::core::Interface::cast::<super::super::IDependencyObject>(self)?;
        unsafe {
            (::windows::core::Vtable::vtable(this).SetValue)(
                ::windows::core::Vtable::as_raw(this),
                ::core::mem::transmute_copy(dp),
                value.into().abi(),
            )
            .ok()
        }
    }
    pub fn ClearValue(&self, dp: &super::super::DependencyProperty) -> ::windows::core::Result<()> {
        let this = &::windows::core::Interface::cast::<super::super::IDependencyObject>(self)?;
        unsafe {
            (::windows::core::Vtable::vtable(this).ClearValue)(
                ::windows::core::Vtable::as_raw(this),
                ::core::mem::transmute_copy(dp),
            )
            .ok()
        }
    }
    pub fn ReadLocalValue(
        &self,
        dp: &super::super::DependencyProperty,
    ) -> ::windows::core::Result<::windows::core::IInspectable> {
        let this = &::windows::core::Interface::cast::<super::super::IDependencyObject>(self)?;
        unsafe {
            let mut result__ = ::core::mem::MaybeUninit::zeroed();
            (::windows::core::Vtable::vtable(this).ReadLocalValue)(
                ::windows::core::Vtable::as_raw(this),
                ::core::mem::transmute_copy(dp),
                result__.as_mut_ptr(),
            )
            .from_abi::<::windows::core::IInspectable>(result__)
        }
    }
    pub fn GetAnimationBaseValue(
        &self,
        dp: &super::super::DependencyProperty,
    ) -> ::windows::core::Result<::windows::core::IInspectable> {
        let this = &::windows::core::Interface::cast::<super::super::IDependencyObject>(self)?;
        unsafe {
            let mut result__ = ::core::mem::MaybeUninit::zeroed();
            (::windows::core::Vtable::vtable(this).GetAnimationBaseValue)(
                ::windows::core::Vtable::as_raw(this),
                ::core::mem::transmute_copy(dp),
                result__.as_mut_ptr(),
            )
            .from_abi::<::windows::core::IInspectable>(result__)
        }
    }
    pub fn RegisterPropertyChangedCallback(
        &self,
        dp: &super::super::DependencyProperty,
        callback: &super::super::DependencyPropertyChangedCallback,
    ) -> ::windows::core::Result<i64> {
        let this = &::windows::core::Interface::cast::<super::super::IDependencyObject>(self)?;
        unsafe {
            let mut result__ = ::core::mem::MaybeUninit::zeroed();
            (::windows::core::Vtable::vtable(this).RegisterPropertyChangedCallback)(
                ::windows::core::Vtable::as_raw(this),
                ::core::mem::transmute_copy(dp),
                ::core::mem::transmute_copy(callback),
                result__.as_mut_ptr(),
            )
            .from_abi::<i64>(result__)
        }
    }
    pub fn UnregisterPropertyChangedCallback(
        &self,
        dp: &super::super::DependencyProperty,
        token: i64,
    ) -> ::windows::core::Result<()> {
        let this = &::windows::core::Interface::cast::<super::super::IDependencyObject>(self)?;
        unsafe {
            (::windows::core::Vtable::vtable(this).UnregisterPropertyChangedCallback)(
                ::windows::core::Vtable::as_raw(this),
                ::core::mem::transmute_copy(dp),
                token,
            )
            .ok()
        }
    }
    pub fn Dispatcher(&self) -> ::windows::core::Result<::windows::UI::Core::CoreDispatcher> {
        let this = &::windows::core::Interface::cast::<super::super::IDependencyObject>(self)?;
        unsafe {
            let mut result__ = ::core::mem::MaybeUninit::zeroed();
            (::windows::core::Vtable::vtable(this).Dispatcher)(
                ::windows::core::Vtable::as_raw(this),
                result__.as_mut_ptr(),
            )
            .from_abi::<::windows::UI::Core::CoreDispatcher>(result__)
        }
    }
    #[doc = "*Required features: `\"UI_Dispatching\"`*"]
    #[cfg(feature = "UI_Dispatching")]
    pub fn DispatcherQueue(
        &self,
    ) -> ::windows::core::Result<super::super::super::Dispatching::DispatcherQueue> {
        let this = &::windows::core::Interface::cast::<super::super::IDependencyObject>(self)?;
        unsafe {
            let mut result__ = ::core::mem::MaybeUninit::zeroed();
            (::windows::core::Vtable::vtable(this).DispatcherQueue)(
                ::windows::core::Vtable::as_raw(this),
                result__.as_mut_ptr(),
            )
            .from_abi::<super::super::super::Dispatching::DispatcherQueue>(result__)
        }
    }
    pub fn EasingFunction(&self) -> ::windows::core::Result<EasingFunctionBase> {
        let this = self;
        unsafe {
            let mut result__ = ::core::mem::MaybeUninit::zeroed();
            (::windows::core::Vtable::vtable(this).EasingFunction)(
                ::windows::core::Vtable::as_raw(this),
                result__.as_mut_ptr(),
            )
            .from_abi::<EasingFunctionBase>(result__)
        }
    }
    pub fn SetEasingFunction<'a, P0>(&self, value: P0) -> ::windows::core::Result<()>
    where
        P0: ::std::convert::Into<::windows::core::InParam<'a, EasingFunctionBase>>,
    {
        let this = self;
        unsafe {
            (::windows::core::Vtable::vtable(this).SetEasingFunction)(
                ::windows::core::Vtable::as_raw(this),
                value.into().abi(),
            )
            .ok()
        }
    }
    pub fn EasingFunctionProperty() -> ::windows::core::Result<super::super::DependencyProperty> {
        Self::IEasingPointKeyFrameStatics(|this| unsafe {
            let mut result__ = ::core::mem::MaybeUninit::zeroed();
            (::windows::core::Vtable::vtable(this).EasingFunctionProperty)(
                ::windows::core::Vtable::as_raw(this),
                result__.as_mut_ptr(),
            )
            .from_abi::<super::super::DependencyProperty>(result__)
        })
    }
    pub fn Value(&self) -> ::windows::core::Result<::windows::Foundation::Point> {
        let this = &::windows::core::Interface::cast::<IPointKeyFrame>(self)?;
        unsafe {
            let mut result__ = ::core::mem::MaybeUninit::zeroed();
            (::windows::core::Vtable::vtable(this).Value)(
                ::windows::core::Vtable::as_raw(this),
                result__.as_mut_ptr(),
            )
            .from_abi::<::windows::Foundation::Point>(result__)
        }
    }
    pub fn SetValue2(&self, value: ::windows::Foundation::Point) -> ::windows::core::Result<()> {
        let this = &::windows::core::Interface::cast::<IPointKeyFrame>(self)?;
        unsafe {
            (::windows::core::Vtable::vtable(this).SetValue)(
                ::windows::core::Vtable::as_raw(this),
                value,
            )
            .ok()
        }
    }
    pub fn KeyTime(&self) -> ::windows::core::Result<KeyTime> {
        let this = &::windows::core::Interface::cast::<IPointKeyFrame>(self)?;
        unsafe {
            let mut result__ = ::core::mem::MaybeUninit::zeroed();
            (::windows::core::Vtable::vtable(this).KeyTime)(
                ::windows::core::Vtable::as_raw(this),
                result__.as_mut_ptr(),
            )
            .from_abi::<KeyTime>(result__)
        }
    }
    pub fn SetKeyTime(&self, value: KeyTime) -> ::windows::core::Result<()> {
        let this = &::windows::core::Interface::cast::<IPointKeyFrame>(self)?;
        unsafe {
            (::windows::core::Vtable::vtable(this).SetKeyTime)(
                ::windows::core::Vtable::as_raw(this),
                value,
            )
            .ok()
        }
    }
    #[doc(hidden)]
    pub fn IEasingPointKeyFrameStatics<
        R,
        F: FnOnce(&IEasingPointKeyFrameStatics) -> ::windows::core::Result<R>,
    >(
        callback: F,
    ) -> ::windows::core::Result<R> {
        static SHARED: ::windows::core::FactoryCache<
            EasingPointKeyFrame,
            IEasingPointKeyFrameStatics,
        > = ::windows::core::FactoryCache::new();
        SHARED.call(callback)
    }
}
impl ::core::clone::Clone for EasingPointKeyFrame {
    fn clone(&self) -> Self {
        Self(self.0.clone())
    }
}
impl ::core::cmp::PartialEq for EasingPointKeyFrame {
    fn eq(&self, other: &Self) -> bool {
        self.0 == other.0
    }
}
impl ::core::cmp::Eq for EasingPointKeyFrame {}
impl ::core::fmt::Debug for EasingPointKeyFrame {
    fn fmt(&self, f: &mut ::core::fmt::Formatter<'_>) -> ::core::fmt::Result {
        f.debug_tuple("EasingPointKeyFrame").field(&self.0).finish()
    }
}
unsafe impl ::windows::core::RuntimeType for EasingPointKeyFrame {
    const SIGNATURE : ::windows::core::ConstBuffer = ::windows::core::ConstBuffer::from_slice ( b"rc(Microsoft.UI.Xaml.Media.Animation.EasingPointKeyFrame;{9406ee8e-3641-54fe-a424-83420ea45cd3})" ) ;
    type DefaultType = ::core::option::Option<Self>;
    fn from_default(from: &Self::DefaultType) -> ::windows::core::Result<Self> {
        from.as_ref().cloned().ok_or(::windows::core::Error::OK)
    }
}
unsafe impl ::windows::core::Vtable for EasingPointKeyFrame {
    type Vtable = IEasingPointKeyFrame_Vtbl;
}
unsafe impl ::windows::core::Interface for EasingPointKeyFrame {
    const IID: ::windows::core::GUID = <IEasingPointKeyFrame as ::windows::core::Interface>::IID;
}
impl ::windows::core::RuntimeName for EasingPointKeyFrame {
    const NAME: &'static str = "Microsoft.UI.Xaml.Media.Animation.EasingPointKeyFrame";
}
::windows::core::interface_hierarchy!(
    EasingPointKeyFrame,
    ::windows::core::IUnknown,
    ::windows::core::IInspectable
);
impl ::core::convert::From<EasingPointKeyFrame> for PointKeyFrame {
    fn from(value: EasingPointKeyFrame) -> Self {
        ::core::convert::From::from(&value)
    }
}
impl ::core::convert::From<&EasingPointKeyFrame> for PointKeyFrame {
    fn from(value: &EasingPointKeyFrame) -> Self {
        ::windows::core::Interface::cast(value).unwrap()
    }
}
impl<'a> ::core::convert::From<&EasingPointKeyFrame>
    for ::windows::core::InParam<'a, PointKeyFrame>
{
    fn from(value: &EasingPointKeyFrame) -> Self {
        ::windows::core::InParam::owned(value.into())
    }
}
impl ::core::convert::From<EasingPointKeyFrame> for super::super::DependencyObject {
    fn from(value: EasingPointKeyFrame) -> Self {
        ::core::convert::From::from(&value)
    }
}
impl ::core::convert::From<&EasingPointKeyFrame> for super::super::DependencyObject {
    fn from(value: &EasingPointKeyFrame) -> Self {
        ::windows::core::Interface::cast(value).unwrap()
    }
}
impl<'a> ::core::convert::From<&EasingPointKeyFrame>
    for ::windows::core::InParam<'a, super::super::DependencyObject>
{
    fn from(value: &EasingPointKeyFrame) -> Self {
        ::windows::core::InParam::owned(value.into())
    }
}
unsafe impl ::core::marker::Send for EasingPointKeyFrame {}
unsafe impl ::core::marker::Sync for EasingPointKeyFrame {}
#[doc = "*Required features: `\"UI_Xaml_Media_Animation\"`*"]
#[repr(transparent)]
pub struct EdgeUIThemeTransition(::windows::core::IUnknown);
impl EdgeUIThemeTransition {
    pub fn new() -> ::windows::core::Result<Self> {
        Self::IActivationFactory(|f| f.ActivateInstance::<Self>())
    }
    fn IActivationFactory<
        R,
        F: FnOnce(&::windows::core::IGenericFactory) -> ::windows::core::Result<R>,
    >(
        callback: F,
    ) -> ::windows::core::Result<R> {
        static SHARED: ::windows::core::FactoryCache<
            EdgeUIThemeTransition,
            ::windows::core::IGenericFactory,
        > = ::windows::core::FactoryCache::new();
        SHARED.call(callback)
    }
    pub fn GetValue(
        &self,
        dp: &super::super::DependencyProperty,
    ) -> ::windows::core::Result<::windows::core::IInspectable> {
        let this = &::windows::core::Interface::cast::<super::super::IDependencyObject>(self)?;
        unsafe {
            let mut result__ = ::core::mem::MaybeUninit::zeroed();
            (::windows::core::Vtable::vtable(this).GetValue)(
                ::windows::core::Vtable::as_raw(this),
                ::core::mem::transmute_copy(dp),
                result__.as_mut_ptr(),
            )
            .from_abi::<::windows::core::IInspectable>(result__)
        }
    }
    pub fn SetValue<'a, P0>(
        &self,
        dp: &super::super::DependencyProperty,
        value: P0,
    ) -> ::windows::core::Result<()>
    where
        P0: ::std::convert::Into<::windows::core::InParam<'a, ::windows::core::IInspectable>>,
    {
        let this = &::windows::core::Interface::cast::<super::super::IDependencyObject>(self)?;
        unsafe {
            (::windows::core::Vtable::vtable(this).SetValue)(
                ::windows::core::Vtable::as_raw(this),
                ::core::mem::transmute_copy(dp),
                value.into().abi(),
            )
            .ok()
        }
    }
    pub fn ClearValue(&self, dp: &super::super::DependencyProperty) -> ::windows::core::Result<()> {
        let this = &::windows::core::Interface::cast::<super::super::IDependencyObject>(self)?;
        unsafe {
            (::windows::core::Vtable::vtable(this).ClearValue)(
                ::windows::core::Vtable::as_raw(this),
                ::core::mem::transmute_copy(dp),
            )
            .ok()
        }
    }
    pub fn ReadLocalValue(
        &self,
        dp: &super::super::DependencyProperty,
    ) -> ::windows::core::Result<::windows::core::IInspectable> {
        let this = &::windows::core::Interface::cast::<super::super::IDependencyObject>(self)?;
        unsafe {
            let mut result__ = ::core::mem::MaybeUninit::zeroed();
            (::windows::core::Vtable::vtable(this).ReadLocalValue)(
                ::windows::core::Vtable::as_raw(this),
                ::core::mem::transmute_copy(dp),
                result__.as_mut_ptr(),
            )
            .from_abi::<::windows::core::IInspectable>(result__)
        }
    }
    pub fn GetAnimationBaseValue(
        &self,
        dp: &super::super::DependencyProperty,
    ) -> ::windows::core::Result<::windows::core::IInspectable> {
        let this = &::windows::core::Interface::cast::<super::super::IDependencyObject>(self)?;
        unsafe {
            let mut result__ = ::core::mem::MaybeUninit::zeroed();
            (::windows::core::Vtable::vtable(this).GetAnimationBaseValue)(
                ::windows::core::Vtable::as_raw(this),
                ::core::mem::transmute_copy(dp),
                result__.as_mut_ptr(),
            )
            .from_abi::<::windows::core::IInspectable>(result__)
        }
    }
    pub fn RegisterPropertyChangedCallback(
        &self,
        dp: &super::super::DependencyProperty,
        callback: &super::super::DependencyPropertyChangedCallback,
    ) -> ::windows::core::Result<i64> {
        let this = &::windows::core::Interface::cast::<super::super::IDependencyObject>(self)?;
        unsafe {
            let mut result__ = ::core::mem::MaybeUninit::zeroed();
            (::windows::core::Vtable::vtable(this).RegisterPropertyChangedCallback)(
                ::windows::core::Vtable::as_raw(this),
                ::core::mem::transmute_copy(dp),
                ::core::mem::transmute_copy(callback),
                result__.as_mut_ptr(),
            )
            .from_abi::<i64>(result__)
        }
    }
    pub fn UnregisterPropertyChangedCallback(
        &self,
        dp: &super::super::DependencyProperty,
        token: i64,
    ) -> ::windows::core::Result<()> {
        let this = &::windows::core::Interface::cast::<super::super::IDependencyObject>(self)?;
        unsafe {
            (::windows::core::Vtable::vtable(this).UnregisterPropertyChangedCallback)(
                ::windows::core::Vtable::as_raw(this),
                ::core::mem::transmute_copy(dp),
                token,
            )
            .ok()
        }
    }
    pub fn Dispatcher(&self) -> ::windows::core::Result<::windows::UI::Core::CoreDispatcher> {
        let this = &::windows::core::Interface::cast::<super::super::IDependencyObject>(self)?;
        unsafe {
            let mut result__ = ::core::mem::MaybeUninit::zeroed();
            (::windows::core::Vtable::vtable(this).Dispatcher)(
                ::windows::core::Vtable::as_raw(this),
                result__.as_mut_ptr(),
            )
            .from_abi::<::windows::UI::Core::CoreDispatcher>(result__)
        }
    }
    #[doc = "*Required features: `\"UI_Dispatching\"`*"]
    #[cfg(feature = "UI_Dispatching")]
    pub fn DispatcherQueue(
        &self,
    ) -> ::windows::core::Result<super::super::super::Dispatching::DispatcherQueue> {
        let this = &::windows::core::Interface::cast::<super::super::IDependencyObject>(self)?;
        unsafe {
            let mut result__ = ::core::mem::MaybeUninit::zeroed();
            (::windows::core::Vtable::vtable(this).DispatcherQueue)(
                ::windows::core::Vtable::as_raw(this),
                result__.as_mut_ptr(),
            )
            .from_abi::<super::super::super::Dispatching::DispatcherQueue>(result__)
        }
    }
    #[doc = "*Required features: `\"UI_Xaml_Controls_Primitives\"`*"]
    #[cfg(feature = "UI_Xaml_Controls_Primitives")]
    pub fn Edge(
        &self,
    ) -> ::windows::core::Result<super::super::Controls::Primitives::EdgeTransitionLocation> {
        let this = self;
        unsafe {
            let mut result__ = ::core::mem::MaybeUninit::zeroed();
            (::windows::core::Vtable::vtable(this).Edge)(
                ::windows::core::Vtable::as_raw(this),
                result__.as_mut_ptr(),
            )
            .from_abi::<super::super::Controls::Primitives::EdgeTransitionLocation>(result__)
        }
    }
    #[doc = "*Required features: `\"UI_Xaml_Controls_Primitives\"`*"]
    #[cfg(feature = "UI_Xaml_Controls_Primitives")]
    pub fn SetEdge(
        &self,
        value: super::super::Controls::Primitives::EdgeTransitionLocation,
    ) -> ::windows::core::Result<()> {
        let this = self;
        unsafe {
            (::windows::core::Vtable::vtable(this).SetEdge)(
                ::windows::core::Vtable::as_raw(this),
                value,
            )
            .ok()
        }
    }
    pub fn EdgeProperty() -> ::windows::core::Result<super::super::DependencyProperty> {
        Self::IEdgeUIThemeTransitionStatics(|this| unsafe {
            let mut result__ = ::core::mem::MaybeUninit::zeroed();
            (::windows::core::Vtable::vtable(this).EdgeProperty)(
                ::windows::core::Vtable::as_raw(this),
                result__.as_mut_ptr(),
            )
            .from_abi::<super::super::DependencyProperty>(result__)
        })
    }
    #[doc(hidden)]
    pub fn IEdgeUIThemeTransitionStatics<
        R,
        F: FnOnce(&IEdgeUIThemeTransitionStatics) -> ::windows::core::Result<R>,
    >(
        callback: F,
    ) -> ::windows::core::Result<R> {
        static SHARED: ::windows::core::FactoryCache<
            EdgeUIThemeTransition,
            IEdgeUIThemeTransitionStatics,
        > = ::windows::core::FactoryCache::new();
        SHARED.call(callback)
    }
}
impl ::core::clone::Clone for EdgeUIThemeTransition {
    fn clone(&self) -> Self {
        Self(self.0.clone())
    }
}
impl ::core::cmp::PartialEq for EdgeUIThemeTransition {
    fn eq(&self, other: &Self) -> bool {
        self.0 == other.0
    }
}
impl ::core::cmp::Eq for EdgeUIThemeTransition {}
impl ::core::fmt::Debug for EdgeUIThemeTransition {
    fn fmt(&self, f: &mut ::core::fmt::Formatter<'_>) -> ::core::fmt::Result {
        f.debug_tuple("EdgeUIThemeTransition").field(&self.0).finish()
    }
}
unsafe impl ::windows::core::RuntimeType for EdgeUIThemeTransition {
    const SIGNATURE : ::windows::core::ConstBuffer = ::windows::core::ConstBuffer::from_slice ( b"rc(Microsoft.UI.Xaml.Media.Animation.EdgeUIThemeTransition;{57089964-e358-5fe2-84e7-15e82bba9c06})" ) ;
    type DefaultType = ::core::option::Option<Self>;
    fn from_default(from: &Self::DefaultType) -> ::windows::core::Result<Self> {
        from.as_ref().cloned().ok_or(::windows::core::Error::OK)
    }
}
unsafe impl ::windows::core::Vtable for EdgeUIThemeTransition {
    type Vtable = IEdgeUIThemeTransition_Vtbl;
}
unsafe impl ::windows::core::Interface for EdgeUIThemeTransition {
    const IID: ::windows::core::GUID = <IEdgeUIThemeTransition as ::windows::core::Interface>::IID;
}
impl ::windows::core::RuntimeName for EdgeUIThemeTransition {
    const NAME: &'static str = "Microsoft.UI.Xaml.Media.Animation.EdgeUIThemeTransition";
}
::windows::core::interface_hierarchy!(
    EdgeUIThemeTransition,
    ::windows::core::IUnknown,
    ::windows::core::IInspectable
);
impl ::core::convert::From<EdgeUIThemeTransition> for Transition {
    fn from(value: EdgeUIThemeTransition) -> Self {
        ::core::convert::From::from(&value)
    }
}
impl ::core::convert::From<&EdgeUIThemeTransition> for Transition {
    fn from(value: &EdgeUIThemeTransition) -> Self {
        ::windows::core::Interface::cast(value).unwrap()
    }
}
impl<'a> ::core::convert::From<&EdgeUIThemeTransition>
    for ::windows::core::InParam<'a, Transition>
{
    fn from(value: &EdgeUIThemeTransition) -> Self {
        ::windows::core::InParam::owned(value.into())
    }
}
impl ::core::convert::From<EdgeUIThemeTransition> for super::super::DependencyObject {
    fn from(value: EdgeUIThemeTransition) -> Self {
        ::core::convert::From::from(&value)
    }
}
impl ::core::convert::From<&EdgeUIThemeTransition> for super::super::DependencyObject {
    fn from(value: &EdgeUIThemeTransition) -> Self {
        ::windows::core::Interface::cast(value).unwrap()
    }
}
impl<'a> ::core::convert::From<&EdgeUIThemeTransition>
    for ::windows::core::InParam<'a, super::super::DependencyObject>
{
    fn from(value: &EdgeUIThemeTransition) -> Self {
        ::windows::core::InParam::owned(value.into())
    }
}
unsafe impl ::core::marker::Send for EdgeUIThemeTransition {}
unsafe impl ::core::marker::Sync for EdgeUIThemeTransition {}
#[doc = "*Required features: `\"UI_Xaml_Media_Animation\"`*"]
#[repr(transparent)]
pub struct ElasticEase(::windows::core::IUnknown);
impl ElasticEase {
    pub fn new() -> ::windows::core::Result<Self> {
        Self::IActivationFactory(|f| f.ActivateInstance::<Self>())
    }
    fn IActivationFactory<
        R,
        F: FnOnce(&::windows::core::IGenericFactory) -> ::windows::core::Result<R>,
    >(
        callback: F,
    ) -> ::windows::core::Result<R> {
        static SHARED: ::windows::core::FactoryCache<
            ElasticEase,
            ::windows::core::IGenericFactory,
        > = ::windows::core::FactoryCache::new();
        SHARED.call(callback)
    }
    pub fn GetValue(
        &self,
        dp: &super::super::DependencyProperty,
    ) -> ::windows::core::Result<::windows::core::IInspectable> {
        let this = &::windows::core::Interface::cast::<super::super::IDependencyObject>(self)?;
        unsafe {
            let mut result__ = ::core::mem::MaybeUninit::zeroed();
            (::windows::core::Vtable::vtable(this).GetValue)(
                ::windows::core::Vtable::as_raw(this),
                ::core::mem::transmute_copy(dp),
                result__.as_mut_ptr(),
            )
            .from_abi::<::windows::core::IInspectable>(result__)
        }
    }
    pub fn SetValue<'a, P0>(
        &self,
        dp: &super::super::DependencyProperty,
        value: P0,
    ) -> ::windows::core::Result<()>
    where
        P0: ::std::convert::Into<::windows::core::InParam<'a, ::windows::core::IInspectable>>,
    {
        let this = &::windows::core::Interface::cast::<super::super::IDependencyObject>(self)?;
        unsafe {
            (::windows::core::Vtable::vtable(this).SetValue)(
                ::windows::core::Vtable::as_raw(this),
                ::core::mem::transmute_copy(dp),
                value.into().abi(),
            )
            .ok()
        }
    }
    pub fn ClearValue(&self, dp: &super::super::DependencyProperty) -> ::windows::core::Result<()> {
        let this = &::windows::core::Interface::cast::<super::super::IDependencyObject>(self)?;
        unsafe {
            (::windows::core::Vtable::vtable(this).ClearValue)(
                ::windows::core::Vtable::as_raw(this),
                ::core::mem::transmute_copy(dp),
            )
            .ok()
        }
    }
    pub fn ReadLocalValue(
        &self,
        dp: &super::super::DependencyProperty,
    ) -> ::windows::core::Result<::windows::core::IInspectable> {
        let this = &::windows::core::Interface::cast::<super::super::IDependencyObject>(self)?;
        unsafe {
            let mut result__ = ::core::mem::MaybeUninit::zeroed();
            (::windows::core::Vtable::vtable(this).ReadLocalValue)(
                ::windows::core::Vtable::as_raw(this),
                ::core::mem::transmute_copy(dp),
                result__.as_mut_ptr(),
            )
            .from_abi::<::windows::core::IInspectable>(result__)
        }
    }
    pub fn GetAnimationBaseValue(
        &self,
        dp: &super::super::DependencyProperty,
    ) -> ::windows::core::Result<::windows::core::IInspectable> {
        let this = &::windows::core::Interface::cast::<super::super::IDependencyObject>(self)?;
        unsafe {
            let mut result__ = ::core::mem::MaybeUninit::zeroed();
            (::windows::core::Vtable::vtable(this).GetAnimationBaseValue)(
                ::windows::core::Vtable::as_raw(this),
                ::core::mem::transmute_copy(dp),
                result__.as_mut_ptr(),
            )
            .from_abi::<::windows::core::IInspectable>(result__)
        }
    }
    pub fn RegisterPropertyChangedCallback(
        &self,
        dp: &super::super::DependencyProperty,
        callback: &super::super::DependencyPropertyChangedCallback,
    ) -> ::windows::core::Result<i64> {
        let this = &::windows::core::Interface::cast::<super::super::IDependencyObject>(self)?;
        unsafe {
            let mut result__ = ::core::mem::MaybeUninit::zeroed();
            (::windows::core::Vtable::vtable(this).RegisterPropertyChangedCallback)(
                ::windows::core::Vtable::as_raw(this),
                ::core::mem::transmute_copy(dp),
                ::core::mem::transmute_copy(callback),
                result__.as_mut_ptr(),
            )
            .from_abi::<i64>(result__)
        }
    }
    pub fn UnregisterPropertyChangedCallback(
        &self,
        dp: &super::super::DependencyProperty,
        token: i64,
    ) -> ::windows::core::Result<()> {
        let this = &::windows::core::Interface::cast::<super::super::IDependencyObject>(self)?;
        unsafe {
            (::windows::core::Vtable::vtable(this).UnregisterPropertyChangedCallback)(
                ::windows::core::Vtable::as_raw(this),
                ::core::mem::transmute_copy(dp),
                token,
            )
            .ok()
        }
    }
    pub fn Dispatcher(&self) -> ::windows::core::Result<::windows::UI::Core::CoreDispatcher> {
        let this = &::windows::core::Interface::cast::<super::super::IDependencyObject>(self)?;
        unsafe {
            let mut result__ = ::core::mem::MaybeUninit::zeroed();
            (::windows::core::Vtable::vtable(this).Dispatcher)(
                ::windows::core::Vtable::as_raw(this),
                result__.as_mut_ptr(),
            )
            .from_abi::<::windows::UI::Core::CoreDispatcher>(result__)
        }
    }
    #[doc = "*Required features: `\"UI_Dispatching\"`*"]
    #[cfg(feature = "UI_Dispatching")]
    pub fn DispatcherQueue(
        &self,
    ) -> ::windows::core::Result<super::super::super::Dispatching::DispatcherQueue> {
        let this = &::windows::core::Interface::cast::<super::super::IDependencyObject>(self)?;
        unsafe {
            let mut result__ = ::core::mem::MaybeUninit::zeroed();
            (::windows::core::Vtable::vtable(this).DispatcherQueue)(
                ::windows::core::Vtable::as_raw(this),
                result__.as_mut_ptr(),
            )
            .from_abi::<super::super::super::Dispatching::DispatcherQueue>(result__)
        }
    }
    pub fn EasingMode(&self) -> ::windows::core::Result<EasingMode> {
        let this = &::windows::core::Interface::cast::<IEasingFunctionBase>(self)?;
        unsafe {
            let mut result__ = ::core::mem::MaybeUninit::zeroed();
            (::windows::core::Vtable::vtable(this).EasingMode)(
                ::windows::core::Vtable::as_raw(this),
                result__.as_mut_ptr(),
            )
            .from_abi::<EasingMode>(result__)
        }
    }
    pub fn SetEasingMode(&self, value: EasingMode) -> ::windows::core::Result<()> {
        let this = &::windows::core::Interface::cast::<IEasingFunctionBase>(self)?;
        unsafe {
            (::windows::core::Vtable::vtable(this).SetEasingMode)(
                ::windows::core::Vtable::as_raw(this),
                value,
            )
            .ok()
        }
    }
    pub fn Ease(&self, normalizedtime: f64) -> ::windows::core::Result<f64> {
        let this = &::windows::core::Interface::cast::<IEasingFunctionBase>(self)?;
        unsafe {
            let mut result__ = ::core::mem::MaybeUninit::zeroed();
            (::windows::core::Vtable::vtable(this).Ease)(
                ::windows::core::Vtable::as_raw(this),
                normalizedtime,
                result__.as_mut_ptr(),
            )
            .from_abi::<f64>(result__)
        }
    }
    pub fn Oscillations(&self) -> ::windows::core::Result<i32> {
        let this = self;
        unsafe {
            let mut result__ = ::core::mem::MaybeUninit::zeroed();
            (::windows::core::Vtable::vtable(this).Oscillations)(
                ::windows::core::Vtable::as_raw(this),
                result__.as_mut_ptr(),
            )
            .from_abi::<i32>(result__)
        }
    }
    pub fn SetOscillations(&self, value: i32) -> ::windows::core::Result<()> {
        let this = self;
        unsafe {
            (::windows::core::Vtable::vtable(this).SetOscillations)(
                ::windows::core::Vtable::as_raw(this),
                value,
            )
            .ok()
        }
    }
    pub fn Springiness(&self) -> ::windows::core::Result<f64> {
        let this = self;
        unsafe {
            let mut result__ = ::core::mem::MaybeUninit::zeroed();
            (::windows::core::Vtable::vtable(this).Springiness)(
                ::windows::core::Vtable::as_raw(this),
                result__.as_mut_ptr(),
            )
            .from_abi::<f64>(result__)
        }
    }
    pub fn SetSpringiness(&self, value: f64) -> ::windows::core::Result<()> {
        let this = self;
        unsafe {
            (::windows::core::Vtable::vtable(this).SetSpringiness)(
                ::windows::core::Vtable::as_raw(this),
                value,
            )
            .ok()
        }
    }
    pub fn OscillationsProperty() -> ::windows::core::Result<super::super::DependencyProperty> {
        Self::IElasticEaseStatics(|this| unsafe {
            let mut result__ = ::core::mem::MaybeUninit::zeroed();
            (::windows::core::Vtable::vtable(this).OscillationsProperty)(
                ::windows::core::Vtable::as_raw(this),
                result__.as_mut_ptr(),
            )
            .from_abi::<super::super::DependencyProperty>(result__)
        })
    }
    pub fn SpringinessProperty() -> ::windows::core::Result<super::super::DependencyProperty> {
        Self::IElasticEaseStatics(|this| unsafe {
            let mut result__ = ::core::mem::MaybeUninit::zeroed();
            (::windows::core::Vtable::vtable(this).SpringinessProperty)(
                ::windows::core::Vtable::as_raw(this),
                result__.as_mut_ptr(),
            )
            .from_abi::<super::super::DependencyProperty>(result__)
        })
    }
    #[doc(hidden)]
    pub fn IElasticEaseStatics<R, F: FnOnce(&IElasticEaseStatics) -> ::windows::core::Result<R>>(
        callback: F,
    ) -> ::windows::core::Result<R> {
        static SHARED: ::windows::core::FactoryCache<ElasticEase, IElasticEaseStatics> =
            ::windows::core::FactoryCache::new();
        SHARED.call(callback)
    }
}
impl ::core::clone::Clone for ElasticEase {
    fn clone(&self) -> Self {
        Self(self.0.clone())
    }
}
impl ::core::cmp::PartialEq for ElasticEase {
    fn eq(&self, other: &Self) -> bool {
        self.0 == other.0
    }
}
impl ::core::cmp::Eq for ElasticEase {}
impl ::core::fmt::Debug for ElasticEase {
    fn fmt(&self, f: &mut ::core::fmt::Formatter<'_>) -> ::core::fmt::Result {
        f.debug_tuple("ElasticEase").field(&self.0).finish()
    }
}
unsafe impl ::windows::core::RuntimeType for ElasticEase {
    const SIGNATURE: ::windows::core::ConstBuffer = ::windows::core::ConstBuffer::from_slice(
        b"rc(Microsoft.UI.Xaml.Media.Animation.ElasticEase;{2b18d50b-4d34-509b-915c-61b1aa6f83d8})",
    );
    type DefaultType = ::core::option::Option<Self>;
    fn from_default(from: &Self::DefaultType) -> ::windows::core::Result<Self> {
        from.as_ref().cloned().ok_or(::windows::core::Error::OK)
    }
}
unsafe impl ::windows::core::Vtable for ElasticEase {
    type Vtable = IElasticEase_Vtbl;
}
unsafe impl ::windows::core::Interface for ElasticEase {
    const IID: ::windows::core::GUID = <IElasticEase as ::windows::core::Interface>::IID;
}
impl ::windows::core::RuntimeName for ElasticEase {
    const NAME: &'static str = "Microsoft.UI.Xaml.Media.Animation.ElasticEase";
}
::windows::core::interface_hierarchy!(
    ElasticEase,
    ::windows::core::IUnknown,
    ::windows::core::IInspectable
);
impl ::core::convert::From<ElasticEase> for EasingFunctionBase {
    fn from(value: ElasticEase) -> Self {
        ::core::convert::From::from(&value)
    }
}
impl ::core::convert::From<&ElasticEase> for EasingFunctionBase {
    fn from(value: &ElasticEase) -> Self {
        ::windows::core::Interface::cast(value).unwrap()
    }
}
impl<'a> ::core::convert::From<&ElasticEase> for ::windows::core::InParam<'a, EasingFunctionBase> {
    fn from(value: &ElasticEase) -> Self {
        ::windows::core::InParam::owned(value.into())
    }
}
impl ::core::convert::From<ElasticEase> for super::super::DependencyObject {
    fn from(value: ElasticEase) -> Self {
        ::core::convert::From::from(&value)
    }
}
impl ::core::convert::From<&ElasticEase> for super::super::DependencyObject {
    fn from(value: &ElasticEase) -> Self {
        ::windows::core::Interface::cast(value).unwrap()
    }
}
impl<'a> ::core::convert::From<&ElasticEase>
    for ::windows::core::InParam<'a, super::super::DependencyObject>
{
    fn from(value: &ElasticEase) -> Self {
        ::windows::core::InParam::owned(value.into())
    }
}
unsafe impl ::core::marker::Send for ElasticEase {}
unsafe impl ::core::marker::Sync for ElasticEase {}
#[doc = "*Required features: `\"UI_Xaml_Media_Animation\"`*"]
#[repr(transparent)]
pub struct EntranceNavigationTransitionInfo(::windows::core::IUnknown);
impl EntranceNavigationTransitionInfo {
    pub fn new() -> ::windows::core::Result<Self> {
        Self::IActivationFactory(|f| f.ActivateInstance::<Self>())
    }
    fn IActivationFactory<
        R,
        F: FnOnce(&::windows::core::IGenericFactory) -> ::windows::core::Result<R>,
    >(
        callback: F,
    ) -> ::windows::core::Result<R> {
        static SHARED: ::windows::core::FactoryCache<
            EntranceNavigationTransitionInfo,
            ::windows::core::IGenericFactory,
        > = ::windows::core::FactoryCache::new();
        SHARED.call(callback)
    }
    pub fn GetValue(
        &self,
        dp: &super::super::DependencyProperty,
    ) -> ::windows::core::Result<::windows::core::IInspectable> {
        let this = &::windows::core::Interface::cast::<super::super::IDependencyObject>(self)?;
        unsafe {
            let mut result__ = ::core::mem::MaybeUninit::zeroed();
            (::windows::core::Vtable::vtable(this).GetValue)(
                ::windows::core::Vtable::as_raw(this),
                ::core::mem::transmute_copy(dp),
                result__.as_mut_ptr(),
            )
            .from_abi::<::windows::core::IInspectable>(result__)
        }
    }
    pub fn SetValue<'a, P0>(
        &self,
        dp: &super::super::DependencyProperty,
        value: P0,
    ) -> ::windows::core::Result<()>
    where
        P0: ::std::convert::Into<::windows::core::InParam<'a, ::windows::core::IInspectable>>,
    {
        let this = &::windows::core::Interface::cast::<super::super::IDependencyObject>(self)?;
        unsafe {
            (::windows::core::Vtable::vtable(this).SetValue)(
                ::windows::core::Vtable::as_raw(this),
                ::core::mem::transmute_copy(dp),
                value.into().abi(),
            )
            .ok()
        }
    }
    pub fn ClearValue(&self, dp: &super::super::DependencyProperty) -> ::windows::core::Result<()> {
        let this = &::windows::core::Interface::cast::<super::super::IDependencyObject>(self)?;
        unsafe {
            (::windows::core::Vtable::vtable(this).ClearValue)(
                ::windows::core::Vtable::as_raw(this),
                ::core::mem::transmute_copy(dp),
            )
            .ok()
        }
    }
    pub fn ReadLocalValue(
        &self,
        dp: &super::super::DependencyProperty,
    ) -> ::windows::core::Result<::windows::core::IInspectable> {
        let this = &::windows::core::Interface::cast::<super::super::IDependencyObject>(self)?;
        unsafe {
            let mut result__ = ::core::mem::MaybeUninit::zeroed();
            (::windows::core::Vtable::vtable(this).ReadLocalValue)(
                ::windows::core::Vtable::as_raw(this),
                ::core::mem::transmute_copy(dp),
                result__.as_mut_ptr(),
            )
            .from_abi::<::windows::core::IInspectable>(result__)
        }
    }
    pub fn GetAnimationBaseValue(
        &self,
        dp: &super::super::DependencyProperty,
    ) -> ::windows::core::Result<::windows::core::IInspectable> {
        let this = &::windows::core::Interface::cast::<super::super::IDependencyObject>(self)?;
        unsafe {
            let mut result__ = ::core::mem::MaybeUninit::zeroed();
            (::windows::core::Vtable::vtable(this).GetAnimationBaseValue)(
                ::windows::core::Vtable::as_raw(this),
                ::core::mem::transmute_copy(dp),
                result__.as_mut_ptr(),
            )
            .from_abi::<::windows::core::IInspectable>(result__)
        }
    }
    pub fn RegisterPropertyChangedCallback(
        &self,
        dp: &super::super::DependencyProperty,
        callback: &super::super::DependencyPropertyChangedCallback,
    ) -> ::windows::core::Result<i64> {
        let this = &::windows::core::Interface::cast::<super::super::IDependencyObject>(self)?;
        unsafe {
            let mut result__ = ::core::mem::MaybeUninit::zeroed();
            (::windows::core::Vtable::vtable(this).RegisterPropertyChangedCallback)(
                ::windows::core::Vtable::as_raw(this),
                ::core::mem::transmute_copy(dp),
                ::core::mem::transmute_copy(callback),
                result__.as_mut_ptr(),
            )
            .from_abi::<i64>(result__)
        }
    }
    pub fn UnregisterPropertyChangedCallback(
        &self,
        dp: &super::super::DependencyProperty,
        token: i64,
    ) -> ::windows::core::Result<()> {
        let this = &::windows::core::Interface::cast::<super::super::IDependencyObject>(self)?;
        unsafe {
            (::windows::core::Vtable::vtable(this).UnregisterPropertyChangedCallback)(
                ::windows::core::Vtable::as_raw(this),
                ::core::mem::transmute_copy(dp),
                token,
            )
            .ok()
        }
    }
    pub fn Dispatcher(&self) -> ::windows::core::Result<::windows::UI::Core::CoreDispatcher> {
        let this = &::windows::core::Interface::cast::<super::super::IDependencyObject>(self)?;
        unsafe {
            let mut result__ = ::core::mem::MaybeUninit::zeroed();
            (::windows::core::Vtable::vtable(this).Dispatcher)(
                ::windows::core::Vtable::as_raw(this),
                result__.as_mut_ptr(),
            )
            .from_abi::<::windows::UI::Core::CoreDispatcher>(result__)
        }
    }
    #[doc = "*Required features: `\"UI_Dispatching\"`*"]
    #[cfg(feature = "UI_Dispatching")]
    pub fn DispatcherQueue(
        &self,
    ) -> ::windows::core::Result<super::super::super::Dispatching::DispatcherQueue> {
        let this = &::windows::core::Interface::cast::<super::super::IDependencyObject>(self)?;
        unsafe {
            let mut result__ = ::core::mem::MaybeUninit::zeroed();
            (::windows::core::Vtable::vtable(this).DispatcherQueue)(
                ::windows::core::Vtable::as_raw(this),
                result__.as_mut_ptr(),
            )
            .from_abi::<super::super::super::Dispatching::DispatcherQueue>(result__)
        }
    }
    pub fn IsTargetElementProperty() -> ::windows::core::Result<super::super::DependencyProperty> {
        Self::IEntranceNavigationTransitionInfoStatics(|this| unsafe {
            let mut result__ = ::core::mem::MaybeUninit::zeroed();
            (::windows::core::Vtable::vtable(this).IsTargetElementProperty)(
                ::windows::core::Vtable::as_raw(this),
                result__.as_mut_ptr(),
            )
            .from_abi::<super::super::DependencyProperty>(result__)
        })
    }
    pub fn GetIsTargetElement<'a, P0>(element: P0) -> ::windows::core::Result<bool>
    where
        P0: ::std::convert::Into<::windows::core::InParam<'a, super::super::UIElement>>,
    {
        Self::IEntranceNavigationTransitionInfoStatics(|this| unsafe {
            let mut result__ = ::core::mem::MaybeUninit::zeroed();
            (::windows::core::Vtable::vtable(this).GetIsTargetElement)(
                ::windows::core::Vtable::as_raw(this),
                element.into().abi(),
                result__.as_mut_ptr(),
            )
            .from_abi::<bool>(result__)
        })
    }
    pub fn SetIsTargetElement<'a, P0>(element: P0, value: bool) -> ::windows::core::Result<()>
    where
        P0: ::std::convert::Into<::windows::core::InParam<'a, super::super::UIElement>>,
    {
        Self::IEntranceNavigationTransitionInfoStatics(|this| unsafe {
            (::windows::core::Vtable::vtable(this).SetIsTargetElement)(
                ::windows::core::Vtable::as_raw(this),
                element.into().abi(),
                value,
            )
            .ok()
        })
    }
    #[doc(hidden)]
    pub fn IEntranceNavigationTransitionInfoStatics<
        R,
        F: FnOnce(&IEntranceNavigationTransitionInfoStatics) -> ::windows::core::Result<R>,
    >(
        callback: F,
    ) -> ::windows::core::Result<R> {
        static SHARED: ::windows::core::FactoryCache<
            EntranceNavigationTransitionInfo,
            IEntranceNavigationTransitionInfoStatics,
        > = ::windows::core::FactoryCache::new();
        SHARED.call(callback)
    }
}
impl ::core::clone::Clone for EntranceNavigationTransitionInfo {
    fn clone(&self) -> Self {
        Self(self.0.clone())
    }
}
impl ::core::cmp::PartialEq for EntranceNavigationTransitionInfo {
    fn eq(&self, other: &Self) -> bool {
        self.0 == other.0
    }
}
impl ::core::cmp::Eq for EntranceNavigationTransitionInfo {}
impl ::core::fmt::Debug for EntranceNavigationTransitionInfo {
    fn fmt(&self, f: &mut ::core::fmt::Formatter<'_>) -> ::core::fmt::Result {
        f.debug_tuple("EntranceNavigationTransitionInfo").field(&self.0).finish()
    }
}
unsafe impl ::windows::core::RuntimeType for EntranceNavigationTransitionInfo {
    const SIGNATURE : ::windows::core::ConstBuffer = ::windows::core::ConstBuffer::from_slice ( b"rc(Microsoft.UI.Xaml.Media.Animation.EntranceNavigationTransitionInfo;{dec74921-0ed7-54e1-8c1d-30b8cccc4b8d})" ) ;
    type DefaultType = ::core::option::Option<Self>;
    fn from_default(from: &Self::DefaultType) -> ::windows::core::Result<Self> {
        from.as_ref().cloned().ok_or(::windows::core::Error::OK)
    }
}
unsafe impl ::windows::core::Vtable for EntranceNavigationTransitionInfo {
    type Vtable = IEntranceNavigationTransitionInfo_Vtbl;
}
unsafe impl ::windows::core::Interface for EntranceNavigationTransitionInfo {
    const IID: ::windows::core::GUID =
        <IEntranceNavigationTransitionInfo as ::windows::core::Interface>::IID;
}
impl ::windows::core::RuntimeName for EntranceNavigationTransitionInfo {
    const NAME: &'static str = "Microsoft.UI.Xaml.Media.Animation.EntranceNavigationTransitionInfo";
}
::windows::core::interface_hierarchy!(
    EntranceNavigationTransitionInfo,
    ::windows::core::IUnknown,
    ::windows::core::IInspectable
);
impl ::core::convert::From<EntranceNavigationTransitionInfo> for NavigationTransitionInfo {
    fn from(value: EntranceNavigationTransitionInfo) -> Self {
        ::core::convert::From::from(&value)
    }
}
impl ::core::convert::From<&EntranceNavigationTransitionInfo> for NavigationTransitionInfo {
    fn from(value: &EntranceNavigationTransitionInfo) -> Self {
        ::windows::core::Interface::cast(value).unwrap()
    }
}
impl<'a> ::core::convert::From<&EntranceNavigationTransitionInfo>
    for ::windows::core::InParam<'a, NavigationTransitionInfo>
{
    fn from(value: &EntranceNavigationTransitionInfo) -> Self {
        ::windows::core::InParam::owned(value.into())
    }
}
impl ::core::convert::From<EntranceNavigationTransitionInfo> for super::super::DependencyObject {
    fn from(value: EntranceNavigationTransitionInfo) -> Self {
        ::core::convert::From::from(&value)
    }
}
impl ::core::convert::From<&EntranceNavigationTransitionInfo> for super::super::DependencyObject {
    fn from(value: &EntranceNavigationTransitionInfo) -> Self {
        ::windows::core::Interface::cast(value).unwrap()
    }
}
impl<'a> ::core::convert::From<&EntranceNavigationTransitionInfo>
    for ::windows::core::InParam<'a, super::super::DependencyObject>
{
    fn from(value: &EntranceNavigationTransitionInfo) -> Self {
        ::windows::core::InParam::owned(value.into())
    }
}
unsafe impl ::core::marker::Send for EntranceNavigationTransitionInfo {}
unsafe impl ::core::marker::Sync for EntranceNavigationTransitionInfo {}
#[doc = "*Required features: `\"UI_Xaml_Media_Animation\"`*"]
#[repr(transparent)]
pub struct EntranceThemeTransition(::windows::core::IUnknown);
impl EntranceThemeTransition {
    pub fn new() -> ::windows::core::Result<Self> {
        Self::IActivationFactory(|f| f.ActivateInstance::<Self>())
    }
    fn IActivationFactory<
        R,
        F: FnOnce(&::windows::core::IGenericFactory) -> ::windows::core::Result<R>,
    >(
        callback: F,
    ) -> ::windows::core::Result<R> {
        static SHARED: ::windows::core::FactoryCache<
            EntranceThemeTransition,
            ::windows::core::IGenericFactory,
        > = ::windows::core::FactoryCache::new();
        SHARED.call(callback)
    }
    pub fn GetValue(
        &self,
        dp: &super::super::DependencyProperty,
    ) -> ::windows::core::Result<::windows::core::IInspectable> {
        let this = &::windows::core::Interface::cast::<super::super::IDependencyObject>(self)?;
        unsafe {
            let mut result__ = ::core::mem::MaybeUninit::zeroed();
            (::windows::core::Vtable::vtable(this).GetValue)(
                ::windows::core::Vtable::as_raw(this),
                ::core::mem::transmute_copy(dp),
                result__.as_mut_ptr(),
            )
            .from_abi::<::windows::core::IInspectable>(result__)
        }
    }
    pub fn SetValue<'a, P0>(
        &self,
        dp: &super::super::DependencyProperty,
        value: P0,
    ) -> ::windows::core::Result<()>
    where
        P0: ::std::convert::Into<::windows::core::InParam<'a, ::windows::core::IInspectable>>,
    {
        let this = &::windows::core::Interface::cast::<super::super::IDependencyObject>(self)?;
        unsafe {
            (::windows::core::Vtable::vtable(this).SetValue)(
                ::windows::core::Vtable::as_raw(this),
                ::core::mem::transmute_copy(dp),
                value.into().abi(),
            )
            .ok()
        }
    }
    pub fn ClearValue(&self, dp: &super::super::DependencyProperty) -> ::windows::core::Result<()> {
        let this = &::windows::core::Interface::cast::<super::super::IDependencyObject>(self)?;
        unsafe {
            (::windows::core::Vtable::vtable(this).ClearValue)(
                ::windows::core::Vtable::as_raw(this),
                ::core::mem::transmute_copy(dp),
            )
            .ok()
        }
    }
    pub fn ReadLocalValue(
        &self,
        dp: &super::super::DependencyProperty,
    ) -> ::windows::core::Result<::windows::core::IInspectable> {
        let this = &::windows::core::Interface::cast::<super::super::IDependencyObject>(self)?;
        unsafe {
            let mut result__ = ::core::mem::MaybeUninit::zeroed();
            (::windows::core::Vtable::vtable(this).ReadLocalValue)(
                ::windows::core::Vtable::as_raw(this),
                ::core::mem::transmute_copy(dp),
                result__.as_mut_ptr(),
            )
            .from_abi::<::windows::core::IInspectable>(result__)
        }
    }
    pub fn GetAnimationBaseValue(
        &self,
        dp: &super::super::DependencyProperty,
    ) -> ::windows::core::Result<::windows::core::IInspectable> {
        let this = &::windows::core::Interface::cast::<super::super::IDependencyObject>(self)?;
        unsafe {
            let mut result__ = ::core::mem::MaybeUninit::zeroed();
            (::windows::core::Vtable::vtable(this).GetAnimationBaseValue)(
                ::windows::core::Vtable::as_raw(this),
                ::core::mem::transmute_copy(dp),
                result__.as_mut_ptr(),
            )
            .from_abi::<::windows::core::IInspectable>(result__)
        }
    }
    pub fn RegisterPropertyChangedCallback(
        &self,
        dp: &super::super::DependencyProperty,
        callback: &super::super::DependencyPropertyChangedCallback,
    ) -> ::windows::core::Result<i64> {
        let this = &::windows::core::Interface::cast::<super::super::IDependencyObject>(self)?;
        unsafe {
            let mut result__ = ::core::mem::MaybeUninit::zeroed();
            (::windows::core::Vtable::vtable(this).RegisterPropertyChangedCallback)(
                ::windows::core::Vtable::as_raw(this),
                ::core::mem::transmute_copy(dp),
                ::core::mem::transmute_copy(callback),
                result__.as_mut_ptr(),
            )
            .from_abi::<i64>(result__)
        }
    }
    pub fn UnregisterPropertyChangedCallback(
        &self,
        dp: &super::super::DependencyProperty,
        token: i64,
    ) -> ::windows::core::Result<()> {
        let this = &::windows::core::Interface::cast::<super::super::IDependencyObject>(self)?;
        unsafe {
            (::windows::core::Vtable::vtable(this).UnregisterPropertyChangedCallback)(
                ::windows::core::Vtable::as_raw(this),
                ::core::mem::transmute_copy(dp),
                token,
            )
            .ok()
        }
    }
    pub fn Dispatcher(&self) -> ::windows::core::Result<::windows::UI::Core::CoreDispatcher> {
        let this = &::windows::core::Interface::cast::<super::super::IDependencyObject>(self)?;
        unsafe {
            let mut result__ = ::core::mem::MaybeUninit::zeroed();
            (::windows::core::Vtable::vtable(this).Dispatcher)(
                ::windows::core::Vtable::as_raw(this),
                result__.as_mut_ptr(),
            )
            .from_abi::<::windows::UI::Core::CoreDispatcher>(result__)
        }
    }
    #[doc = "*Required features: `\"UI_Dispatching\"`*"]
    #[cfg(feature = "UI_Dispatching")]
    pub fn DispatcherQueue(
        &self,
    ) -> ::windows::core::Result<super::super::super::Dispatching::DispatcherQueue> {
        let this = &::windows::core::Interface::cast::<super::super::IDependencyObject>(self)?;
        unsafe {
            let mut result__ = ::core::mem::MaybeUninit::zeroed();
            (::windows::core::Vtable::vtable(this).DispatcherQueue)(
                ::windows::core::Vtable::as_raw(this),
                result__.as_mut_ptr(),
            )
            .from_abi::<super::super::super::Dispatching::DispatcherQueue>(result__)
        }
    }
    pub fn FromHorizontalOffset(&self) -> ::windows::core::Result<f64> {
        let this = self;
        unsafe {
            let mut result__ = ::core::mem::MaybeUninit::zeroed();
            (::windows::core::Vtable::vtable(this).FromHorizontalOffset)(
                ::windows::core::Vtable::as_raw(this),
                result__.as_mut_ptr(),
            )
            .from_abi::<f64>(result__)
        }
    }
    pub fn SetFromHorizontalOffset(&self, value: f64) -> ::windows::core::Result<()> {
        let this = self;
        unsafe {
            (::windows::core::Vtable::vtable(this).SetFromHorizontalOffset)(
                ::windows::core::Vtable::as_raw(this),
                value,
            )
            .ok()
        }
    }
    pub fn FromVerticalOffset(&self) -> ::windows::core::Result<f64> {
        let this = self;
        unsafe {
            let mut result__ = ::core::mem::MaybeUninit::zeroed();
            (::windows::core::Vtable::vtable(this).FromVerticalOffset)(
                ::windows::core::Vtable::as_raw(this),
                result__.as_mut_ptr(),
            )
            .from_abi::<f64>(result__)
        }
    }
    pub fn SetFromVerticalOffset(&self, value: f64) -> ::windows::core::Result<()> {
        let this = self;
        unsafe {
            (::windows::core::Vtable::vtable(this).SetFromVerticalOffset)(
                ::windows::core::Vtable::as_raw(this),
                value,
            )
            .ok()
        }
    }
    pub fn IsStaggeringEnabled(&self) -> ::windows::core::Result<bool> {
        let this = self;
        unsafe {
            let mut result__ = ::core::mem::MaybeUninit::zeroed();
            (::windows::core::Vtable::vtable(this).IsStaggeringEnabled)(
                ::windows::core::Vtable::as_raw(this),
                result__.as_mut_ptr(),
            )
            .from_abi::<bool>(result__)
        }
    }
    pub fn SetIsStaggeringEnabled(&self, value: bool) -> ::windows::core::Result<()> {
        let this = self;
        unsafe {
            (::windows::core::Vtable::vtable(this).SetIsStaggeringEnabled)(
                ::windows::core::Vtable::as_raw(this),
                value,
            )
            .ok()
        }
    }
    pub fn FromHorizontalOffsetProperty(
    ) -> ::windows::core::Result<super::super::DependencyProperty> {
        Self::IEntranceThemeTransitionStatics(|this| unsafe {
            let mut result__ = ::core::mem::MaybeUninit::zeroed();
            (::windows::core::Vtable::vtable(this).FromHorizontalOffsetProperty)(
                ::windows::core::Vtable::as_raw(this),
                result__.as_mut_ptr(),
            )
            .from_abi::<super::super::DependencyProperty>(result__)
        })
    }
    pub fn FromVerticalOffsetProperty() -> ::windows::core::Result<super::super::DependencyProperty>
    {
        Self::IEntranceThemeTransitionStatics(|this| unsafe {
            let mut result__ = ::core::mem::MaybeUninit::zeroed();
            (::windows::core::Vtable::vtable(this).FromVerticalOffsetProperty)(
                ::windows::core::Vtable::as_raw(this),
                result__.as_mut_ptr(),
            )
            .from_abi::<super::super::DependencyProperty>(result__)
        })
    }
    pub fn IsStaggeringEnabledProperty() -> ::windows::core::Result<super::super::DependencyProperty>
    {
        Self::IEntranceThemeTransitionStatics(|this| unsafe {
            let mut result__ = ::core::mem::MaybeUninit::zeroed();
            (::windows::core::Vtable::vtable(this).IsStaggeringEnabledProperty)(
                ::windows::core::Vtable::as_raw(this),
                result__.as_mut_ptr(),
            )
            .from_abi::<super::super::DependencyProperty>(result__)
        })
    }
    #[doc(hidden)]
    pub fn IEntranceThemeTransitionStatics<
        R,
        F: FnOnce(&IEntranceThemeTransitionStatics) -> ::windows::core::Result<R>,
    >(
        callback: F,
    ) -> ::windows::core::Result<R> {
        static SHARED: ::windows::core::FactoryCache<
            EntranceThemeTransition,
            IEntranceThemeTransitionStatics,
        > = ::windows::core::FactoryCache::new();
        SHARED.call(callback)
    }
}
impl ::core::clone::Clone for EntranceThemeTransition {
    fn clone(&self) -> Self {
        Self(self.0.clone())
    }
}
impl ::core::cmp::PartialEq for EntranceThemeTransition {
    fn eq(&self, other: &Self) -> bool {
        self.0 == other.0
    }
}
impl ::core::cmp::Eq for EntranceThemeTransition {}
impl ::core::fmt::Debug for EntranceThemeTransition {
    fn fmt(&self, f: &mut ::core::fmt::Formatter<'_>) -> ::core::fmt::Result {
        f.debug_tuple("EntranceThemeTransition").field(&self.0).finish()
    }
}
unsafe impl ::windows::core::RuntimeType for EntranceThemeTransition {
    const SIGNATURE : ::windows::core::ConstBuffer = ::windows::core::ConstBuffer::from_slice ( b"rc(Microsoft.UI.Xaml.Media.Animation.EntranceThemeTransition;{8eb681fa-1629-5e29-ac1e-70f3639329f8})" ) ;
    type DefaultType = ::core::option::Option<Self>;
    fn from_default(from: &Self::DefaultType) -> ::windows::core::Result<Self> {
        from.as_ref().cloned().ok_or(::windows::core::Error::OK)
    }
}
unsafe impl ::windows::core::Vtable for EntranceThemeTransition {
    type Vtable = IEntranceThemeTransition_Vtbl;
}
unsafe impl ::windows::core::Interface for EntranceThemeTransition {
    const IID: ::windows::core::GUID =
        <IEntranceThemeTransition as ::windows::core::Interface>::IID;
}
impl ::windows::core::RuntimeName for EntranceThemeTransition {
    const NAME: &'static str = "Microsoft.UI.Xaml.Media.Animation.EntranceThemeTransition";
}
::windows::core::interface_hierarchy!(
    EntranceThemeTransition,
    ::windows::core::IUnknown,
    ::windows::core::IInspectable
);
impl ::core::convert::From<EntranceThemeTransition> for Transition {
    fn from(value: EntranceThemeTransition) -> Self {
        ::core::convert::From::from(&value)
    }
}
impl ::core::convert::From<&EntranceThemeTransition> for Transition {
    fn from(value: &EntranceThemeTransition) -> Self {
        ::windows::core::Interface::cast(value).unwrap()
    }
}
impl<'a> ::core::convert::From<&EntranceThemeTransition>
    for ::windows::core::InParam<'a, Transition>
{
    fn from(value: &EntranceThemeTransition) -> Self {
        ::windows::core::InParam::owned(value.into())
    }
}
impl ::core::convert::From<EntranceThemeTransition> for super::super::DependencyObject {
    fn from(value: EntranceThemeTransition) -> Self {
        ::core::convert::From::from(&value)
    }
}
impl ::core::convert::From<&EntranceThemeTransition> for super::super::DependencyObject {
    fn from(value: &EntranceThemeTransition) -> Self {
        ::windows::core::Interface::cast(value).unwrap()
    }
}
impl<'a> ::core::convert::From<&EntranceThemeTransition>
    for ::windows::core::InParam<'a, super::super::DependencyObject>
{
    fn from(value: &EntranceThemeTransition) -> Self {
        ::windows::core::InParam::owned(value.into())
    }
}
unsafe impl ::core::marker::Send for EntranceThemeTransition {}
unsafe impl ::core::marker::Sync for EntranceThemeTransition {}
#[doc = "*Required features: `\"UI_Xaml_Media_Animation\"`*"]
#[repr(transparent)]
pub struct ExponentialEase(::windows::core::IUnknown);
impl ExponentialEase {
    pub fn new() -> ::windows::core::Result<Self> {
        Self::IActivationFactory(|f| f.ActivateInstance::<Self>())
    }
    fn IActivationFactory<
        R,
        F: FnOnce(&::windows::core::IGenericFactory) -> ::windows::core::Result<R>,
    >(
        callback: F,
    ) -> ::windows::core::Result<R> {
        static SHARED: ::windows::core::FactoryCache<
            ExponentialEase,
            ::windows::core::IGenericFactory,
        > = ::windows::core::FactoryCache::new();
        SHARED.call(callback)
    }
    pub fn GetValue(
        &self,
        dp: &super::super::DependencyProperty,
    ) -> ::windows::core::Result<::windows::core::IInspectable> {
        let this = &::windows::core::Interface::cast::<super::super::IDependencyObject>(self)?;
        unsafe {
            let mut result__ = ::core::mem::MaybeUninit::zeroed();
            (::windows::core::Vtable::vtable(this).GetValue)(
                ::windows::core::Vtable::as_raw(this),
                ::core::mem::transmute_copy(dp),
                result__.as_mut_ptr(),
            )
            .from_abi::<::windows::core::IInspectable>(result__)
        }
    }
    pub fn SetValue<'a, P0>(
        &self,
        dp: &super::super::DependencyProperty,
        value: P0,
    ) -> ::windows::core::Result<()>
    where
        P0: ::std::convert::Into<::windows::core::InParam<'a, ::windows::core::IInspectable>>,
    {
        let this = &::windows::core::Interface::cast::<super::super::IDependencyObject>(self)?;
        unsafe {
            (::windows::core::Vtable::vtable(this).SetValue)(
                ::windows::core::Vtable::as_raw(this),
                ::core::mem::transmute_copy(dp),
                value.into().abi(),
            )
            .ok()
        }
    }
    pub fn ClearValue(&self, dp: &super::super::DependencyProperty) -> ::windows::core::Result<()> {
        let this = &::windows::core::Interface::cast::<super::super::IDependencyObject>(self)?;
        unsafe {
            (::windows::core::Vtable::vtable(this).ClearValue)(
                ::windows::core::Vtable::as_raw(this),
                ::core::mem::transmute_copy(dp),
            )
            .ok()
        }
    }
    pub fn ReadLocalValue(
        &self,
        dp: &super::super::DependencyProperty,
    ) -> ::windows::core::Result<::windows::core::IInspectable> {
        let this = &::windows::core::Interface::cast::<super::super::IDependencyObject>(self)?;
        unsafe {
            let mut result__ = ::core::mem::MaybeUninit::zeroed();
            (::windows::core::Vtable::vtable(this).ReadLocalValue)(
                ::windows::core::Vtable::as_raw(this),
                ::core::mem::transmute_copy(dp),
                result__.as_mut_ptr(),
            )
            .from_abi::<::windows::core::IInspectable>(result__)
        }
    }
    pub fn GetAnimationBaseValue(
        &self,
        dp: &super::super::DependencyProperty,
    ) -> ::windows::core::Result<::windows::core::IInspectable> {
        let this = &::windows::core::Interface::cast::<super::super::IDependencyObject>(self)?;
        unsafe {
            let mut result__ = ::core::mem::MaybeUninit::zeroed();
            (::windows::core::Vtable::vtable(this).GetAnimationBaseValue)(
                ::windows::core::Vtable::as_raw(this),
                ::core::mem::transmute_copy(dp),
                result__.as_mut_ptr(),
            )
            .from_abi::<::windows::core::IInspectable>(result__)
        }
    }
    pub fn RegisterPropertyChangedCallback(
        &self,
        dp: &super::super::DependencyProperty,
        callback: &super::super::DependencyPropertyChangedCallback,
    ) -> ::windows::core::Result<i64> {
        let this = &::windows::core::Interface::cast::<super::super::IDependencyObject>(self)?;
        unsafe {
            let mut result__ = ::core::mem::MaybeUninit::zeroed();
            (::windows::core::Vtable::vtable(this).RegisterPropertyChangedCallback)(
                ::windows::core::Vtable::as_raw(this),
                ::core::mem::transmute_copy(dp),
                ::core::mem::transmute_copy(callback),
                result__.as_mut_ptr(),
            )
            .from_abi::<i64>(result__)
        }
    }
    pub fn UnregisterPropertyChangedCallback(
        &self,
        dp: &super::super::DependencyProperty,
        token: i64,
    ) -> ::windows::core::Result<()> {
        let this = &::windows::core::Interface::cast::<super::super::IDependencyObject>(self)?;
        unsafe {
            (::windows::core::Vtable::vtable(this).UnregisterPropertyChangedCallback)(
                ::windows::core::Vtable::as_raw(this),
                ::core::mem::transmute_copy(dp),
                token,
            )
            .ok()
        }
    }
    pub fn Dispatcher(&self) -> ::windows::core::Result<::windows::UI::Core::CoreDispatcher> {
        let this = &::windows::core::Interface::cast::<super::super::IDependencyObject>(self)?;
        unsafe {
            let mut result__ = ::core::mem::MaybeUninit::zeroed();
            (::windows::core::Vtable::vtable(this).Dispatcher)(
                ::windows::core::Vtable::as_raw(this),
                result__.as_mut_ptr(),
            )
            .from_abi::<::windows::UI::Core::CoreDispatcher>(result__)
        }
    }
    #[doc = "*Required features: `\"UI_Dispatching\"`*"]
    #[cfg(feature = "UI_Dispatching")]
    pub fn DispatcherQueue(
        &self,
    ) -> ::windows::core::Result<super::super::super::Dispatching::DispatcherQueue> {
        let this = &::windows::core::Interface::cast::<super::super::IDependencyObject>(self)?;
        unsafe {
            let mut result__ = ::core::mem::MaybeUninit::zeroed();
            (::windows::core::Vtable::vtable(this).DispatcherQueue)(
                ::windows::core::Vtable::as_raw(this),
                result__.as_mut_ptr(),
            )
            .from_abi::<super::super::super::Dispatching::DispatcherQueue>(result__)
        }
    }
    pub fn EasingMode(&self) -> ::windows::core::Result<EasingMode> {
        let this = &::windows::core::Interface::cast::<IEasingFunctionBase>(self)?;
        unsafe {
            let mut result__ = ::core::mem::MaybeUninit::zeroed();
            (::windows::core::Vtable::vtable(this).EasingMode)(
                ::windows::core::Vtable::as_raw(this),
                result__.as_mut_ptr(),
            )
            .from_abi::<EasingMode>(result__)
        }
    }
    pub fn SetEasingMode(&self, value: EasingMode) -> ::windows::core::Result<()> {
        let this = &::windows::core::Interface::cast::<IEasingFunctionBase>(self)?;
        unsafe {
            (::windows::core::Vtable::vtable(this).SetEasingMode)(
                ::windows::core::Vtable::as_raw(this),
                value,
            )
            .ok()
        }
    }
    pub fn Ease(&self, normalizedtime: f64) -> ::windows::core::Result<f64> {
        let this = &::windows::core::Interface::cast::<IEasingFunctionBase>(self)?;
        unsafe {
            let mut result__ = ::core::mem::MaybeUninit::zeroed();
            (::windows::core::Vtable::vtable(this).Ease)(
                ::windows::core::Vtable::as_raw(this),
                normalizedtime,
                result__.as_mut_ptr(),
            )
            .from_abi::<f64>(result__)
        }
    }
    pub fn Exponent(&self) -> ::windows::core::Result<f64> {
        let this = self;
        unsafe {
            let mut result__ = ::core::mem::MaybeUninit::zeroed();
            (::windows::core::Vtable::vtable(this).Exponent)(
                ::windows::core::Vtable::as_raw(this),
                result__.as_mut_ptr(),
            )
            .from_abi::<f64>(result__)
        }
    }
    pub fn SetExponent(&self, value: f64) -> ::windows::core::Result<()> {
        let this = self;
        unsafe {
            (::windows::core::Vtable::vtable(this).SetExponent)(
                ::windows::core::Vtable::as_raw(this),
                value,
            )
            .ok()
        }
    }
    pub fn ExponentProperty() -> ::windows::core::Result<super::super::DependencyProperty> {
        Self::IExponentialEaseStatics(|this| unsafe {
            let mut result__ = ::core::mem::MaybeUninit::zeroed();
            (::windows::core::Vtable::vtable(this).ExponentProperty)(
                ::windows::core::Vtable::as_raw(this),
                result__.as_mut_ptr(),
            )
            .from_abi::<super::super::DependencyProperty>(result__)
        })
    }
    #[doc(hidden)]
    pub fn IExponentialEaseStatics<
        R,
        F: FnOnce(&IExponentialEaseStatics) -> ::windows::core::Result<R>,
    >(
        callback: F,
    ) -> ::windows::core::Result<R> {
        static SHARED: ::windows::core::FactoryCache<ExponentialEase, IExponentialEaseStatics> =
            ::windows::core::FactoryCache::new();
        SHARED.call(callback)
    }
}
impl ::core::clone::Clone for ExponentialEase {
    fn clone(&self) -> Self {
        Self(self.0.clone())
    }
}
impl ::core::cmp::PartialEq for ExponentialEase {
    fn eq(&self, other: &Self) -> bool {
        self.0 == other.0
    }
}
impl ::core::cmp::Eq for ExponentialEase {}
impl ::core::fmt::Debug for ExponentialEase {
    fn fmt(&self, f: &mut ::core::fmt::Formatter<'_>) -> ::core::fmt::Result {
        f.debug_tuple("ExponentialEase").field(&self.0).finish()
    }
}
unsafe impl ::windows::core::RuntimeType for ExponentialEase {
    const SIGNATURE : ::windows::core::ConstBuffer = ::windows::core::ConstBuffer::from_slice ( b"rc(Microsoft.UI.Xaml.Media.Animation.ExponentialEase;{4d289262-e832-5fbc-a98b-87a6ecb3b6cc})" ) ;
    type DefaultType = ::core::option::Option<Self>;
    fn from_default(from: &Self::DefaultType) -> ::windows::core::Result<Self> {
        from.as_ref().cloned().ok_or(::windows::core::Error::OK)
    }
}
unsafe impl ::windows::core::Vtable for ExponentialEase {
    type Vtable = IExponentialEase_Vtbl;
}
unsafe impl ::windows::core::Interface for ExponentialEase {
    const IID: ::windows::core::GUID = <IExponentialEase as ::windows::core::Interface>::IID;
}
impl ::windows::core::RuntimeName for ExponentialEase {
    const NAME: &'static str = "Microsoft.UI.Xaml.Media.Animation.ExponentialEase";
}
::windows::core::interface_hierarchy!(
    ExponentialEase,
    ::windows::core::IUnknown,
    ::windows::core::IInspectable
);
impl ::core::convert::From<ExponentialEase> for EasingFunctionBase {
    fn from(value: ExponentialEase) -> Self {
        ::core::convert::From::from(&value)
    }
}
impl ::core::convert::From<&ExponentialEase> for EasingFunctionBase {
    fn from(value: &ExponentialEase) -> Self {
        ::windows::core::Interface::cast(value).unwrap()
    }
}
impl<'a> ::core::convert::From<&ExponentialEase>
    for ::windows::core::InParam<'a, EasingFunctionBase>
{
    fn from(value: &ExponentialEase) -> Self {
        ::windows::core::InParam::owned(value.into())
    }
}
impl ::core::convert::From<ExponentialEase> for super::super::DependencyObject {
    fn from(value: ExponentialEase) -> Self {
        ::core::convert::From::from(&value)
    }
}
impl ::core::convert::From<&ExponentialEase> for super::super::DependencyObject {
    fn from(value: &ExponentialEase) -> Self {
        ::windows::core::Interface::cast(value).unwrap()
    }
}
impl<'a> ::core::convert::From<&ExponentialEase>
    for ::windows::core::InParam<'a, super::super::DependencyObject>
{
    fn from(value: &ExponentialEase) -> Self {
        ::windows::core::InParam::owned(value.into())
    }
}
unsafe impl ::core::marker::Send for ExponentialEase {}
unsafe impl ::core::marker::Sync for ExponentialEase {}
#[doc = "*Required features: `\"UI_Xaml_Media_Animation\"`*"]
#[repr(transparent)]
pub struct FadeInThemeAnimation(::windows::core::IUnknown);
impl FadeInThemeAnimation {
    pub fn new() -> ::windows::core::Result<Self> {
        Self::IActivationFactory(|f| f.ActivateInstance::<Self>())
    }
    fn IActivationFactory<
        R,
        F: FnOnce(&::windows::core::IGenericFactory) -> ::windows::core::Result<R>,
    >(
        callback: F,
    ) -> ::windows::core::Result<R> {
        static SHARED: ::windows::core::FactoryCache<
            FadeInThemeAnimation,
            ::windows::core::IGenericFactory,
        > = ::windows::core::FactoryCache::new();
        SHARED.call(callback)
    }
    pub fn GetValue(
        &self,
        dp: &super::super::DependencyProperty,
    ) -> ::windows::core::Result<::windows::core::IInspectable> {
        let this = &::windows::core::Interface::cast::<super::super::IDependencyObject>(self)?;
        unsafe {
            let mut result__ = ::core::mem::MaybeUninit::zeroed();
            (::windows::core::Vtable::vtable(this).GetValue)(
                ::windows::core::Vtable::as_raw(this),
                ::core::mem::transmute_copy(dp),
                result__.as_mut_ptr(),
            )
            .from_abi::<::windows::core::IInspectable>(result__)
        }
    }
    pub fn SetValue<'a, P0>(
        &self,
        dp: &super::super::DependencyProperty,
        value: P0,
    ) -> ::windows::core::Result<()>
    where
        P0: ::std::convert::Into<::windows::core::InParam<'a, ::windows::core::IInspectable>>,
    {
        let this = &::windows::core::Interface::cast::<super::super::IDependencyObject>(self)?;
        unsafe {
            (::windows::core::Vtable::vtable(this).SetValue)(
                ::windows::core::Vtable::as_raw(this),
                ::core::mem::transmute_copy(dp),
                value.into().abi(),
            )
            .ok()
        }
    }
    pub fn ClearValue(&self, dp: &super::super::DependencyProperty) -> ::windows::core::Result<()> {
        let this = &::windows::core::Interface::cast::<super::super::IDependencyObject>(self)?;
        unsafe {
            (::windows::core::Vtable::vtable(this).ClearValue)(
                ::windows::core::Vtable::as_raw(this),
                ::core::mem::transmute_copy(dp),
            )
            .ok()
        }
    }
    pub fn ReadLocalValue(
        &self,
        dp: &super::super::DependencyProperty,
    ) -> ::windows::core::Result<::windows::core::IInspectable> {
        let this = &::windows::core::Interface::cast::<super::super::IDependencyObject>(self)?;
        unsafe {
            let mut result__ = ::core::mem::MaybeUninit::zeroed();
            (::windows::core::Vtable::vtable(this).ReadLocalValue)(
                ::windows::core::Vtable::as_raw(this),
                ::core::mem::transmute_copy(dp),
                result__.as_mut_ptr(),
            )
            .from_abi::<::windows::core::IInspectable>(result__)
        }
    }
    pub fn GetAnimationBaseValue(
        &self,
        dp: &super::super::DependencyProperty,
    ) -> ::windows::core::Result<::windows::core::IInspectable> {
        let this = &::windows::core::Interface::cast::<super::super::IDependencyObject>(self)?;
        unsafe {
            let mut result__ = ::core::mem::MaybeUninit::zeroed();
            (::windows::core::Vtable::vtable(this).GetAnimationBaseValue)(
                ::windows::core::Vtable::as_raw(this),
                ::core::mem::transmute_copy(dp),
                result__.as_mut_ptr(),
            )
            .from_abi::<::windows::core::IInspectable>(result__)
        }
    }
    pub fn RegisterPropertyChangedCallback(
        &self,
        dp: &super::super::DependencyProperty,
        callback: &super::super::DependencyPropertyChangedCallback,
    ) -> ::windows::core::Result<i64> {
        let this = &::windows::core::Interface::cast::<super::super::IDependencyObject>(self)?;
        unsafe {
            let mut result__ = ::core::mem::MaybeUninit::zeroed();
            (::windows::core::Vtable::vtable(this).RegisterPropertyChangedCallback)(
                ::windows::core::Vtable::as_raw(this),
                ::core::mem::transmute_copy(dp),
                ::core::mem::transmute_copy(callback),
                result__.as_mut_ptr(),
            )
            .from_abi::<i64>(result__)
        }
    }
    pub fn UnregisterPropertyChangedCallback(
        &self,
        dp: &super::super::DependencyProperty,
        token: i64,
    ) -> ::windows::core::Result<()> {
        let this = &::windows::core::Interface::cast::<super::super::IDependencyObject>(self)?;
        unsafe {
            (::windows::core::Vtable::vtable(this).UnregisterPropertyChangedCallback)(
                ::windows::core::Vtable::as_raw(this),
                ::core::mem::transmute_copy(dp),
                token,
            )
            .ok()
        }
    }
    pub fn Dispatcher(&self) -> ::windows::core::Result<::windows::UI::Core::CoreDispatcher> {
        let this = &::windows::core::Interface::cast::<super::super::IDependencyObject>(self)?;
        unsafe {
            let mut result__ = ::core::mem::MaybeUninit::zeroed();
            (::windows::core::Vtable::vtable(this).Dispatcher)(
                ::windows::core::Vtable::as_raw(this),
                result__.as_mut_ptr(),
            )
            .from_abi::<::windows::UI::Core::CoreDispatcher>(result__)
        }
    }
    #[doc = "*Required features: `\"UI_Dispatching\"`*"]
    #[cfg(feature = "UI_Dispatching")]
    pub fn DispatcherQueue(
        &self,
    ) -> ::windows::core::Result<super::super::super::Dispatching::DispatcherQueue> {
        let this = &::windows::core::Interface::cast::<super::super::IDependencyObject>(self)?;
        unsafe {
            let mut result__ = ::core::mem::MaybeUninit::zeroed();
            (::windows::core::Vtable::vtable(this).DispatcherQueue)(
                ::windows::core::Vtable::as_raw(this),
                result__.as_mut_ptr(),
            )
            .from_abi::<super::super::super::Dispatching::DispatcherQueue>(result__)
        }
    }
    pub fn TargetName(&self) -> ::windows::core::Result<::windows::core::HSTRING> {
        let this = self;
        unsafe {
            let mut result__ = ::core::mem::MaybeUninit::zeroed();
            (::windows::core::Vtable::vtable(this).TargetName)(
                ::windows::core::Vtable::as_raw(this),
                result__.as_mut_ptr(),
            )
            .from_abi::<::windows::core::HSTRING>(result__)
        }
    }
    pub fn SetTargetName(&self, value: &::windows::core::HSTRING) -> ::windows::core::Result<()> {
        let this = self;
        unsafe {
            (::windows::core::Vtable::vtable(this).SetTargetName)(
                ::windows::core::Vtable::as_raw(this),
                ::core::mem::transmute_copy(value),
            )
            .ok()
        }
    }
    pub fn TargetNameProperty() -> ::windows::core::Result<super::super::DependencyProperty> {
        Self::IFadeInThemeAnimationStatics(|this| unsafe {
            let mut result__ = ::core::mem::MaybeUninit::zeroed();
            (::windows::core::Vtable::vtable(this).TargetNameProperty)(
                ::windows::core::Vtable::as_raw(this),
                result__.as_mut_ptr(),
            )
            .from_abi::<super::super::DependencyProperty>(result__)
        })
    }
    pub fn AutoReverse(&self) -> ::windows::core::Result<bool> {
        let this = &::windows::core::Interface::cast::<ITimeline>(self)?;
        unsafe {
            let mut result__ = ::core::mem::MaybeUninit::zeroed();
            (::windows::core::Vtable::vtable(this).AutoReverse)(
                ::windows::core::Vtable::as_raw(this),
                result__.as_mut_ptr(),
            )
            .from_abi::<bool>(result__)
        }
    }
    pub fn SetAutoReverse(&self, value: bool) -> ::windows::core::Result<()> {
        let this = &::windows::core::Interface::cast::<ITimeline>(self)?;
        unsafe {
            (::windows::core::Vtable::vtable(this).SetAutoReverse)(
                ::windows::core::Vtable::as_raw(this),
                value,
            )
            .ok()
        }
    }
    pub fn BeginTime(
        &self,
    ) -> ::windows::core::Result<::windows::Foundation::IReference<::windows::Foundation::TimeSpan>>
    {
        let this = &::windows::core::Interface::cast::<ITimeline>(self)?;
        unsafe {
            let mut result__ = ::core::mem::MaybeUninit::zeroed();
            (::windows::core::Vtable::vtable(this).BeginTime)(
                ::windows::core::Vtable::as_raw(this),
                result__.as_mut_ptr(),
            )
            .from_abi::<::windows::Foundation::IReference<::windows::Foundation::TimeSpan>>(
                result__,
            )
        }
    }
    pub fn SetBeginTime<'a, P0, E0>(&self, value: P0) -> ::windows::core::Result<()>
    where
        P0: ::std::convert::TryInto<
            ::windows::core::InParam<
                'a,
                ::windows::Foundation::IReference<::windows::Foundation::TimeSpan>,
            >,
            Error = E0,
        >,
        E0: ::std::convert::Into<::windows::core::Error>,
    {
        let this = &::windows::core::Interface::cast::<ITimeline>(self)?;
        unsafe {
            (::windows::core::Vtable::vtable(this).SetBeginTime)(
                ::windows::core::Vtable::as_raw(this),
                value.try_into().map_err(|e| e.into())?.abi(),
            )
            .ok()
        }
    }
    pub fn Duration(&self) -> ::windows::core::Result<super::super::Duration> {
        let this = &::windows::core::Interface::cast::<ITimeline>(self)?;
        unsafe {
            let mut result__ = ::core::mem::MaybeUninit::zeroed();
            (::windows::core::Vtable::vtable(this).Duration)(
                ::windows::core::Vtable::as_raw(this),
                result__.as_mut_ptr(),
            )
            .from_abi::<super::super::Duration>(result__)
        }
    }
    pub fn SetDuration(&self, value: super::super::Duration) -> ::windows::core::Result<()> {
        let this = &::windows::core::Interface::cast::<ITimeline>(self)?;
        unsafe {
            (::windows::core::Vtable::vtable(this).SetDuration)(
                ::windows::core::Vtable::as_raw(this),
                value,
            )
            .ok()
        }
    }
    pub fn SpeedRatio(&self) -> ::windows::core::Result<f64> {
        let this = &::windows::core::Interface::cast::<ITimeline>(self)?;
        unsafe {
            let mut result__ = ::core::mem::MaybeUninit::zeroed();
            (::windows::core::Vtable::vtable(this).SpeedRatio)(
                ::windows::core::Vtable::as_raw(this),
                result__.as_mut_ptr(),
            )
            .from_abi::<f64>(result__)
        }
    }
    pub fn SetSpeedRatio(&self, value: f64) -> ::windows::core::Result<()> {
        let this = &::windows::core::Interface::cast::<ITimeline>(self)?;
        unsafe {
            (::windows::core::Vtable::vtable(this).SetSpeedRatio)(
                ::windows::core::Vtable::as_raw(this),
                value,
            )
            .ok()
        }
    }
    pub fn FillBehavior(&self) -> ::windows::core::Result<FillBehavior> {
        let this = &::windows::core::Interface::cast::<ITimeline>(self)?;
        unsafe {
            let mut result__ = ::core::mem::MaybeUninit::zeroed();
            (::windows::core::Vtable::vtable(this).FillBehavior)(
                ::windows::core::Vtable::as_raw(this),
                result__.as_mut_ptr(),
            )
            .from_abi::<FillBehavior>(result__)
        }
    }
    pub fn SetFillBehavior(&self, value: FillBehavior) -> ::windows::core::Result<()> {
        let this = &::windows::core::Interface::cast::<ITimeline>(self)?;
        unsafe {
            (::windows::core::Vtable::vtable(this).SetFillBehavior)(
                ::windows::core::Vtable::as_raw(this),
                value,
            )
            .ok()
        }
    }
    pub fn RepeatBehavior(&self) -> ::windows::core::Result<RepeatBehavior> {
        let this = &::windows::core::Interface::cast::<ITimeline>(self)?;
        unsafe {
            let mut result__ = ::core::mem::MaybeUninit::zeroed();
            (::windows::core::Vtable::vtable(this).RepeatBehavior)(
                ::windows::core::Vtable::as_raw(this),
                result__.as_mut_ptr(),
            )
            .from_abi::<RepeatBehavior>(result__)
        }
    }
    pub fn SetRepeatBehavior(&self, value: RepeatBehavior) -> ::windows::core::Result<()> {
        let this = &::windows::core::Interface::cast::<ITimeline>(self)?;
        unsafe {
            (::windows::core::Vtable::vtable(this).SetRepeatBehavior)(
                ::windows::core::Vtable::as_raw(this),
                value,
            )
            .ok()
        }
    }
    pub fn Completed(
        &self,
        handler: &::windows::Foundation::EventHandler<::windows::core::IInspectable>,
    ) -> ::windows::core::Result<::windows::Foundation::EventRegistrationToken> {
        let this = &::windows::core::Interface::cast::<ITimeline>(self)?;
        unsafe {
            let mut result__ = ::core::mem::MaybeUninit::zeroed();
            (::windows::core::Vtable::vtable(this).Completed)(
                ::windows::core::Vtable::as_raw(this),
                ::core::mem::transmute_copy(handler),
                result__.as_mut_ptr(),
            )
            .from_abi::<::windows::Foundation::EventRegistrationToken>(result__)
        }
    }
    pub fn RemoveCompleted(
        &self,
        token: ::windows::Foundation::EventRegistrationToken,
    ) -> ::windows::core::Result<()> {
        let this = &::windows::core::Interface::cast::<ITimeline>(self)?;
        unsafe {
            (::windows::core::Vtable::vtable(this).RemoveCompleted)(
                ::windows::core::Vtable::as_raw(this),
                token,
            )
            .ok()
        }
    }
    #[doc(hidden)]
    pub fn IFadeInThemeAnimationStatics<
        R,
        F: FnOnce(&IFadeInThemeAnimationStatics) -> ::windows::core::Result<R>,
    >(
        callback: F,
    ) -> ::windows::core::Result<R> {
        static SHARED: ::windows::core::FactoryCache<
            FadeInThemeAnimation,
            IFadeInThemeAnimationStatics,
        > = ::windows::core::FactoryCache::new();
        SHARED.call(callback)
    }
}
impl ::core::clone::Clone for FadeInThemeAnimation {
    fn clone(&self) -> Self {
        Self(self.0.clone())
    }
}
impl ::core::cmp::PartialEq for FadeInThemeAnimation {
    fn eq(&self, other: &Self) -> bool {
        self.0 == other.0
    }
}
impl ::core::cmp::Eq for FadeInThemeAnimation {}
impl ::core::fmt::Debug for FadeInThemeAnimation {
    fn fmt(&self, f: &mut ::core::fmt::Formatter<'_>) -> ::core::fmt::Result {
        f.debug_tuple("FadeInThemeAnimation").field(&self.0).finish()
    }
}
unsafe impl ::windows::core::RuntimeType for FadeInThemeAnimation {
    const SIGNATURE : ::windows::core::ConstBuffer = ::windows::core::ConstBuffer::from_slice ( b"rc(Microsoft.UI.Xaml.Media.Animation.FadeInThemeAnimation;{0dca074a-31cc-5e70-8b6b-8dbd7fff01f6})" ) ;
    type DefaultType = ::core::option::Option<Self>;
    fn from_default(from: &Self::DefaultType) -> ::windows::core::Result<Self> {
        from.as_ref().cloned().ok_or(::windows::core::Error::OK)
    }
}
unsafe impl ::windows::core::Vtable for FadeInThemeAnimation {
    type Vtable = IFadeInThemeAnimation_Vtbl;
}
unsafe impl ::windows::core::Interface for FadeInThemeAnimation {
    const IID: ::windows::core::GUID = <IFadeInThemeAnimation as ::windows::core::Interface>::IID;
}
impl ::windows::core::RuntimeName for FadeInThemeAnimation {
    const NAME: &'static str = "Microsoft.UI.Xaml.Media.Animation.FadeInThemeAnimation";
}
::windows::core::interface_hierarchy!(
    FadeInThemeAnimation,
    ::windows::core::IUnknown,
    ::windows::core::IInspectable
);
impl ::core::convert::From<FadeInThemeAnimation> for Timeline {
    fn from(value: FadeInThemeAnimation) -> Self {
        ::core::convert::From::from(&value)
    }
}
impl ::core::convert::From<&FadeInThemeAnimation> for Timeline {
    fn from(value: &FadeInThemeAnimation) -> Self {
        ::windows::core::Interface::cast(value).unwrap()
    }
}
impl<'a> ::core::convert::From<&FadeInThemeAnimation> for ::windows::core::InParam<'a, Timeline> {
    fn from(value: &FadeInThemeAnimation) -> Self {
        ::windows::core::InParam::owned(value.into())
    }
}
impl ::core::convert::From<FadeInThemeAnimation> for super::super::DependencyObject {
    fn from(value: FadeInThemeAnimation) -> Self {
        ::core::convert::From::from(&value)
    }
}
impl ::core::convert::From<&FadeInThemeAnimation> for super::super::DependencyObject {
    fn from(value: &FadeInThemeAnimation) -> Self {
        ::windows::core::Interface::cast(value).unwrap()
    }
}
impl<'a> ::core::convert::From<&FadeInThemeAnimation>
    for ::windows::core::InParam<'a, super::super::DependencyObject>
{
    fn from(value: &FadeInThemeAnimation) -> Self {
        ::windows::core::InParam::owned(value.into())
    }
}
unsafe impl ::core::marker::Send for FadeInThemeAnimation {}
unsafe impl ::core::marker::Sync for FadeInThemeAnimation {}
#[doc = "*Required features: `\"UI_Xaml_Media_Animation\"`*"]
#[repr(transparent)]
pub struct FadeOutThemeAnimation(::windows::core::IUnknown);
impl FadeOutThemeAnimation {
    pub fn new() -> ::windows::core::Result<Self> {
        Self::IActivationFactory(|f| f.ActivateInstance::<Self>())
    }
    fn IActivationFactory<
        R,
        F: FnOnce(&::windows::core::IGenericFactory) -> ::windows::core::Result<R>,
    >(
        callback: F,
    ) -> ::windows::core::Result<R> {
        static SHARED: ::windows::core::FactoryCache<
            FadeOutThemeAnimation,
            ::windows::core::IGenericFactory,
        > = ::windows::core::FactoryCache::new();
        SHARED.call(callback)
    }
    pub fn GetValue(
        &self,
        dp: &super::super::DependencyProperty,
    ) -> ::windows::core::Result<::windows::core::IInspectable> {
        let this = &::windows::core::Interface::cast::<super::super::IDependencyObject>(self)?;
        unsafe {
            let mut result__ = ::core::mem::MaybeUninit::zeroed();
            (::windows::core::Vtable::vtable(this).GetValue)(
                ::windows::core::Vtable::as_raw(this),
                ::core::mem::transmute_copy(dp),
                result__.as_mut_ptr(),
            )
            .from_abi::<::windows::core::IInspectable>(result__)
        }
    }
    pub fn SetValue<'a, P0>(
        &self,
        dp: &super::super::DependencyProperty,
        value: P0,
    ) -> ::windows::core::Result<()>
    where
        P0: ::std::convert::Into<::windows::core::InParam<'a, ::windows::core::IInspectable>>,
    {
        let this = &::windows::core::Interface::cast::<super::super::IDependencyObject>(self)?;
        unsafe {
            (::windows::core::Vtable::vtable(this).SetValue)(
                ::windows::core::Vtable::as_raw(this),
                ::core::mem::transmute_copy(dp),
                value.into().abi(),
            )
            .ok()
        }
    }
    pub fn ClearValue(&self, dp: &super::super::DependencyProperty) -> ::windows::core::Result<()> {
        let this = &::windows::core::Interface::cast::<super::super::IDependencyObject>(self)?;
        unsafe {
            (::windows::core::Vtable::vtable(this).ClearValue)(
                ::windows::core::Vtable::as_raw(this),
                ::core::mem::transmute_copy(dp),
            )
            .ok()
        }
    }
    pub fn ReadLocalValue(
        &self,
        dp: &super::super::DependencyProperty,
    ) -> ::windows::core::Result<::windows::core::IInspectable> {
        let this = &::windows::core::Interface::cast::<super::super::IDependencyObject>(self)?;
        unsafe {
            let mut result__ = ::core::mem::MaybeUninit::zeroed();
            (::windows::core::Vtable::vtable(this).ReadLocalValue)(
                ::windows::core::Vtable::as_raw(this),
                ::core::mem::transmute_copy(dp),
                result__.as_mut_ptr(),
            )
            .from_abi::<::windows::core::IInspectable>(result__)
        }
    }
    pub fn GetAnimationBaseValue(
        &self,
        dp: &super::super::DependencyProperty,
    ) -> ::windows::core::Result<::windows::core::IInspectable> {
        let this = &::windows::core::Interface::cast::<super::super::IDependencyObject>(self)?;
        unsafe {
            let mut result__ = ::core::mem::MaybeUninit::zeroed();
            (::windows::core::Vtable::vtable(this).GetAnimationBaseValue)(
                ::windows::core::Vtable::as_raw(this),
                ::core::mem::transmute_copy(dp),
                result__.as_mut_ptr(),
            )
            .from_abi::<::windows::core::IInspectable>(result__)
        }
    }
    pub fn RegisterPropertyChangedCallback(
        &self,
        dp: &super::super::DependencyProperty,
        callback: &super::super::DependencyPropertyChangedCallback,
    ) -> ::windows::core::Result<i64> {
        let this = &::windows::core::Interface::cast::<super::super::IDependencyObject>(self)?;
        unsafe {
            let mut result__ = ::core::mem::MaybeUninit::zeroed();
            (::windows::core::Vtable::vtable(this).RegisterPropertyChangedCallback)(
                ::windows::core::Vtable::as_raw(this),
                ::core::mem::transmute_copy(dp),
                ::core::mem::transmute_copy(callback),
                result__.as_mut_ptr(),
            )
            .from_abi::<i64>(result__)
        }
    }
    pub fn UnregisterPropertyChangedCallback(
        &self,
        dp: &super::super::DependencyProperty,
        token: i64,
    ) -> ::windows::core::Result<()> {
        let this = &::windows::core::Interface::cast::<super::super::IDependencyObject>(self)?;
        unsafe {
            (::windows::core::Vtable::vtable(this).UnregisterPropertyChangedCallback)(
                ::windows::core::Vtable::as_raw(this),
                ::core::mem::transmute_copy(dp),
                token,
            )
            .ok()
        }
    }
    pub fn Dispatcher(&self) -> ::windows::core::Result<::windows::UI::Core::CoreDispatcher> {
        let this = &::windows::core::Interface::cast::<super::super::IDependencyObject>(self)?;
        unsafe {
            let mut result__ = ::core::mem::MaybeUninit::zeroed();
            (::windows::core::Vtable::vtable(this).Dispatcher)(
                ::windows::core::Vtable::as_raw(this),
                result__.as_mut_ptr(),
            )
            .from_abi::<::windows::UI::Core::CoreDispatcher>(result__)
        }
    }
    #[doc = "*Required features: `\"UI_Dispatching\"`*"]
    #[cfg(feature = "UI_Dispatching")]
    pub fn DispatcherQueue(
        &self,
    ) -> ::windows::core::Result<super::super::super::Dispatching::DispatcherQueue> {
        let this = &::windows::core::Interface::cast::<super::super::IDependencyObject>(self)?;
        unsafe {
            let mut result__ = ::core::mem::MaybeUninit::zeroed();
            (::windows::core::Vtable::vtable(this).DispatcherQueue)(
                ::windows::core::Vtable::as_raw(this),
                result__.as_mut_ptr(),
            )
            .from_abi::<super::super::super::Dispatching::DispatcherQueue>(result__)
        }
    }
    pub fn TargetName(&self) -> ::windows::core::Result<::windows::core::HSTRING> {
        let this = self;
        unsafe {
            let mut result__ = ::core::mem::MaybeUninit::zeroed();
            (::windows::core::Vtable::vtable(this).TargetName)(
                ::windows::core::Vtable::as_raw(this),
                result__.as_mut_ptr(),
            )
            .from_abi::<::windows::core::HSTRING>(result__)
        }
    }
    pub fn SetTargetName(&self, value: &::windows::core::HSTRING) -> ::windows::core::Result<()> {
        let this = self;
        unsafe {
            (::windows::core::Vtable::vtable(this).SetTargetName)(
                ::windows::core::Vtable::as_raw(this),
                ::core::mem::transmute_copy(value),
            )
            .ok()
        }
    }
    pub fn TargetNameProperty() -> ::windows::core::Result<super::super::DependencyProperty> {
        Self::IFadeOutThemeAnimationStatics(|this| unsafe {
            let mut result__ = ::core::mem::MaybeUninit::zeroed();
            (::windows::core::Vtable::vtable(this).TargetNameProperty)(
                ::windows::core::Vtable::as_raw(this),
                result__.as_mut_ptr(),
            )
            .from_abi::<super::super::DependencyProperty>(result__)
        })
    }
    pub fn AutoReverse(&self) -> ::windows::core::Result<bool> {
        let this = &::windows::core::Interface::cast::<ITimeline>(self)?;
        unsafe {
            let mut result__ = ::core::mem::MaybeUninit::zeroed();
            (::windows::core::Vtable::vtable(this).AutoReverse)(
                ::windows::core::Vtable::as_raw(this),
                result__.as_mut_ptr(),
            )
            .from_abi::<bool>(result__)
        }
    }
    pub fn SetAutoReverse(&self, value: bool) -> ::windows::core::Result<()> {
        let this = &::windows::core::Interface::cast::<ITimeline>(self)?;
        unsafe {
            (::windows::core::Vtable::vtable(this).SetAutoReverse)(
                ::windows::core::Vtable::as_raw(this),
                value,
            )
            .ok()
        }
    }
    pub fn BeginTime(
        &self,
    ) -> ::windows::core::Result<::windows::Foundation::IReference<::windows::Foundation::TimeSpan>>
    {
        let this = &::windows::core::Interface::cast::<ITimeline>(self)?;
        unsafe {
            let mut result__ = ::core::mem::MaybeUninit::zeroed();
            (::windows::core::Vtable::vtable(this).BeginTime)(
                ::windows::core::Vtable::as_raw(this),
                result__.as_mut_ptr(),
            )
            .from_abi::<::windows::Foundation::IReference<::windows::Foundation::TimeSpan>>(
                result__,
            )
        }
    }
    pub fn SetBeginTime<'a, P0, E0>(&self, value: P0) -> ::windows::core::Result<()>
    where
        P0: ::std::convert::TryInto<
            ::windows::core::InParam<
                'a,
                ::windows::Foundation::IReference<::windows::Foundation::TimeSpan>,
            >,
            Error = E0,
        >,
        E0: ::std::convert::Into<::windows::core::Error>,
    {
        let this = &::windows::core::Interface::cast::<ITimeline>(self)?;
        unsafe {
            (::windows::core::Vtable::vtable(this).SetBeginTime)(
                ::windows::core::Vtable::as_raw(this),
                value.try_into().map_err(|e| e.into())?.abi(),
            )
            .ok()
        }
    }
    pub fn Duration(&self) -> ::windows::core::Result<super::super::Duration> {
        let this = &::windows::core::Interface::cast::<ITimeline>(self)?;
        unsafe {
            let mut result__ = ::core::mem::MaybeUninit::zeroed();
            (::windows::core::Vtable::vtable(this).Duration)(
                ::windows::core::Vtable::as_raw(this),
                result__.as_mut_ptr(),
            )
            .from_abi::<super::super::Duration>(result__)
        }
    }
    pub fn SetDuration(&self, value: super::super::Duration) -> ::windows::core::Result<()> {
        let this = &::windows::core::Interface::cast::<ITimeline>(self)?;
        unsafe {
            (::windows::core::Vtable::vtable(this).SetDuration)(
                ::windows::core::Vtable::as_raw(this),
                value,
            )
            .ok()
        }
    }
    pub fn SpeedRatio(&self) -> ::windows::core::Result<f64> {
        let this = &::windows::core::Interface::cast::<ITimeline>(self)?;
        unsafe {
            let mut result__ = ::core::mem::MaybeUninit::zeroed();
            (::windows::core::Vtable::vtable(this).SpeedRatio)(
                ::windows::core::Vtable::as_raw(this),
                result__.as_mut_ptr(),
            )
            .from_abi::<f64>(result__)
        }
    }
    pub fn SetSpeedRatio(&self, value: f64) -> ::windows::core::Result<()> {
        let this = &::windows::core::Interface::cast::<ITimeline>(self)?;
        unsafe {
            (::windows::core::Vtable::vtable(this).SetSpeedRatio)(
                ::windows::core::Vtable::as_raw(this),
                value,
            )
            .ok()
        }
    }
    pub fn FillBehavior(&self) -> ::windows::core::Result<FillBehavior> {
        let this = &::windows::core::Interface::cast::<ITimeline>(self)?;
        unsafe {
            let mut result__ = ::core::mem::MaybeUninit::zeroed();
            (::windows::core::Vtable::vtable(this).FillBehavior)(
                ::windows::core::Vtable::as_raw(this),
                result__.as_mut_ptr(),
            )
            .from_abi::<FillBehavior>(result__)
        }
    }
    pub fn SetFillBehavior(&self, value: FillBehavior) -> ::windows::core::Result<()> {
        let this = &::windows::core::Interface::cast::<ITimeline>(self)?;
        unsafe {
            (::windows::core::Vtable::vtable(this).SetFillBehavior)(
                ::windows::core::Vtable::as_raw(this),
                value,
            )
            .ok()
        }
    }
    pub fn RepeatBehavior(&self) -> ::windows::core::Result<RepeatBehavior> {
        let this = &::windows::core::Interface::cast::<ITimeline>(self)?;
        unsafe {
            let mut result__ = ::core::mem::MaybeUninit::zeroed();
            (::windows::core::Vtable::vtable(this).RepeatBehavior)(
                ::windows::core::Vtable::as_raw(this),
                result__.as_mut_ptr(),
            )
            .from_abi::<RepeatBehavior>(result__)
        }
    }
    pub fn SetRepeatBehavior(&self, value: RepeatBehavior) -> ::windows::core::Result<()> {
        let this = &::windows::core::Interface::cast::<ITimeline>(self)?;
        unsafe {
            (::windows::core::Vtable::vtable(this).SetRepeatBehavior)(
                ::windows::core::Vtable::as_raw(this),
                value,
            )
            .ok()
        }
    }
    pub fn Completed(
        &self,
        handler: &::windows::Foundation::EventHandler<::windows::core::IInspectable>,
    ) -> ::windows::core::Result<::windows::Foundation::EventRegistrationToken> {
        let this = &::windows::core::Interface::cast::<ITimeline>(self)?;
        unsafe {
            let mut result__ = ::core::mem::MaybeUninit::zeroed();
            (::windows::core::Vtable::vtable(this).Completed)(
                ::windows::core::Vtable::as_raw(this),
                ::core::mem::transmute_copy(handler),
                result__.as_mut_ptr(),
            )
            .from_abi::<::windows::Foundation::EventRegistrationToken>(result__)
        }
    }
    pub fn RemoveCompleted(
        &self,
        token: ::windows::Foundation::EventRegistrationToken,
    ) -> ::windows::core::Result<()> {
        let this = &::windows::core::Interface::cast::<ITimeline>(self)?;
        unsafe {
            (::windows::core::Vtable::vtable(this).RemoveCompleted)(
                ::windows::core::Vtable::as_raw(this),
                token,
            )
            .ok()
        }
    }
    #[doc(hidden)]
    pub fn IFadeOutThemeAnimationStatics<
        R,
        F: FnOnce(&IFadeOutThemeAnimationStatics) -> ::windows::core::Result<R>,
    >(
        callback: F,
    ) -> ::windows::core::Result<R> {
        static SHARED: ::windows::core::FactoryCache<
            FadeOutThemeAnimation,
            IFadeOutThemeAnimationStatics,
        > = ::windows::core::FactoryCache::new();
        SHARED.call(callback)
    }
}
impl ::core::clone::Clone for FadeOutThemeAnimation {
    fn clone(&self) -> Self {
        Self(self.0.clone())
    }
}
impl ::core::cmp::PartialEq for FadeOutThemeAnimation {
    fn eq(&self, other: &Self) -> bool {
        self.0 == other.0
    }
}
impl ::core::cmp::Eq for FadeOutThemeAnimation {}
impl ::core::fmt::Debug for FadeOutThemeAnimation {
    fn fmt(&self, f: &mut ::core::fmt::Formatter<'_>) -> ::core::fmt::Result {
        f.debug_tuple("FadeOutThemeAnimation").field(&self.0).finish()
    }
}
unsafe impl ::windows::core::RuntimeType for FadeOutThemeAnimation {
    const SIGNATURE : ::windows::core::ConstBuffer = ::windows::core::ConstBuffer::from_slice ( b"rc(Microsoft.UI.Xaml.Media.Animation.FadeOutThemeAnimation;{114024d6-5d67-5c9c-83c5-54a8bd7b671a})" ) ;
    type DefaultType = ::core::option::Option<Self>;
    fn from_default(from: &Self::DefaultType) -> ::windows::core::Result<Self> {
        from.as_ref().cloned().ok_or(::windows::core::Error::OK)
    }
}
unsafe impl ::windows::core::Vtable for FadeOutThemeAnimation {
    type Vtable = IFadeOutThemeAnimation_Vtbl;
}
unsafe impl ::windows::core::Interface for FadeOutThemeAnimation {
    const IID: ::windows::core::GUID = <IFadeOutThemeAnimation as ::windows::core::Interface>::IID;
}
impl ::windows::core::RuntimeName for FadeOutThemeAnimation {
    const NAME: &'static str = "Microsoft.UI.Xaml.Media.Animation.FadeOutThemeAnimation";
}
::windows::core::interface_hierarchy!(
    FadeOutThemeAnimation,
    ::windows::core::IUnknown,
    ::windows::core::IInspectable
);
impl ::core::convert::From<FadeOutThemeAnimation> for Timeline {
    fn from(value: FadeOutThemeAnimation) -> Self {
        ::core::convert::From::from(&value)
    }
}
impl ::core::convert::From<&FadeOutThemeAnimation> for Timeline {
    fn from(value: &FadeOutThemeAnimation) -> Self {
        ::windows::core::Interface::cast(value).unwrap()
    }
}
impl<'a> ::core::convert::From<&FadeOutThemeAnimation> for ::windows::core::InParam<'a, Timeline> {
    fn from(value: &FadeOutThemeAnimation) -> Self {
        ::windows::core::InParam::owned(value.into())
    }
}
impl ::core::convert::From<FadeOutThemeAnimation> for super::super::DependencyObject {
    fn from(value: FadeOutThemeAnimation) -> Self {
        ::core::convert::From::from(&value)
    }
}
impl ::core::convert::From<&FadeOutThemeAnimation> for super::super::DependencyObject {
    fn from(value: &FadeOutThemeAnimation) -> Self {
        ::windows::core::Interface::cast(value).unwrap()
    }
}
impl<'a> ::core::convert::From<&FadeOutThemeAnimation>
    for ::windows::core::InParam<'a, super::super::DependencyObject>
{
    fn from(value: &FadeOutThemeAnimation) -> Self {
        ::windows::core::InParam::owned(value.into())
    }
}
unsafe impl ::core::marker::Send for FadeOutThemeAnimation {}
unsafe impl ::core::marker::Sync for FadeOutThemeAnimation {}
#[doc = "*Required features: `\"UI_Xaml_Media_Animation\"`*"]
#[repr(transparent)]
pub struct GravityConnectedAnimationConfiguration(::windows::core::IUnknown);
impl GravityConnectedAnimationConfiguration {
    pub fn IsShadowEnabled(&self) -> ::windows::core::Result<bool> {
        let this = self;
        unsafe {
            let mut result__ = ::core::mem::MaybeUninit::zeroed();
            (::windows::core::Vtable::vtable(this).IsShadowEnabled)(
                ::windows::core::Vtable::as_raw(this),
                result__.as_mut_ptr(),
            )
            .from_abi::<bool>(result__)
        }
    }
    pub fn SetIsShadowEnabled(&self, value: bool) -> ::windows::core::Result<()> {
        let this = self;
        unsafe {
            (::windows::core::Vtable::vtable(this).SetIsShadowEnabled)(
                ::windows::core::Vtable::as_raw(this),
                value,
            )
            .ok()
        }
    }
    pub fn new() -> ::windows::core::Result<GravityConnectedAnimationConfiguration> {
        Self::IGravityConnectedAnimationConfigurationFactory(|this| unsafe {
            let mut result__ = ::core::mem::MaybeUninit::zeroed();
            (::windows::core::Vtable::vtable(this).CreateInstance)(
                ::windows::core::Vtable::as_raw(this),
                ::core::ptr::null_mut(),
                &mut ::core::option::Option::<::windows::core::IInspectable>::None as *mut _ as _,
                result__.as_mut_ptr(),
            )
            .from_abi::<GravityConnectedAnimationConfiguration>(result__)
        })
    }
    pub fn compose<T>(compose: T) -> ::windows::core::Result<GravityConnectedAnimationConfiguration>
    where
        T: ::windows::core::Compose,
    {
        Self::IGravityConnectedAnimationConfigurationFactory(|this| unsafe {
            let (derived__, base__) = ::windows::core::Compose::compose(compose);
            let mut result__ = ::core::mem::MaybeUninit::zeroed();
            (::windows::core::Vtable::vtable(this).CreateInstance)(
                ::windows::core::Vtable::as_raw(this),
                ::core::mem::transmute_copy(&derived__),
                base__ as *mut _ as _,
                result__.as_mut_ptr(),
            )
            .from_abi::<GravityConnectedAnimationConfiguration>(result__)
        })
    }
    #[doc(hidden)]
    pub fn IGravityConnectedAnimationConfigurationFactory<
        R,
        F: FnOnce(&IGravityConnectedAnimationConfigurationFactory) -> ::windows::core::Result<R>,
    >(
        callback: F,
    ) -> ::windows::core::Result<R> {
        static SHARED: ::windows::core::FactoryCache<
            GravityConnectedAnimationConfiguration,
            IGravityConnectedAnimationConfigurationFactory,
        > = ::windows::core::FactoryCache::new();
        SHARED.call(callback)
    }
}
impl ::core::clone::Clone for GravityConnectedAnimationConfiguration {
    fn clone(&self) -> Self {
        Self(self.0.clone())
    }
}
impl ::core::cmp::PartialEq for GravityConnectedAnimationConfiguration {
    fn eq(&self, other: &Self) -> bool {
        self.0 == other.0
    }
}
impl ::core::cmp::Eq for GravityConnectedAnimationConfiguration {}
impl ::core::fmt::Debug for GravityConnectedAnimationConfiguration {
    fn fmt(&self, f: &mut ::core::fmt::Formatter<'_>) -> ::core::fmt::Result {
        f.debug_tuple("GravityConnectedAnimationConfiguration").field(&self.0).finish()
    }
}
unsafe impl ::windows::core::RuntimeType for GravityConnectedAnimationConfiguration {
    const SIGNATURE : ::windows::core::ConstBuffer = ::windows::core::ConstBuffer::from_slice ( b"rc(Microsoft.UI.Xaml.Media.Animation.GravityConnectedAnimationConfiguration;{04c8b276-cff3-5a55-9229-33dc66c99e20})" ) ;
    type DefaultType = ::core::option::Option<Self>;
    fn from_default(from: &Self::DefaultType) -> ::windows::core::Result<Self> {
        from.as_ref().cloned().ok_or(::windows::core::Error::OK)
    }
}
unsafe impl ::windows::core::Vtable for GravityConnectedAnimationConfiguration {
    type Vtable = IGravityConnectedAnimationConfiguration_Vtbl;
}
unsafe impl ::windows::core::Interface for GravityConnectedAnimationConfiguration {
    const IID: ::windows::core::GUID =
        <IGravityConnectedAnimationConfiguration as ::windows::core::Interface>::IID;
}
impl ::windows::core::RuntimeName for GravityConnectedAnimationConfiguration {
    const NAME: &'static str =
        "Microsoft.UI.Xaml.Media.Animation.GravityConnectedAnimationConfiguration";
}
::windows::core::interface_hierarchy!(
    GravityConnectedAnimationConfiguration,
    ::windows::core::IUnknown,
    ::windows::core::IInspectable
);
impl ::core::convert::From<GravityConnectedAnimationConfiguration>
    for ConnectedAnimationConfiguration
{
    fn from(value: GravityConnectedAnimationConfiguration) -> Self {
        ::core::convert::From::from(&value)
    }
}
impl ::core::convert::From<&GravityConnectedAnimationConfiguration>
    for ConnectedAnimationConfiguration
{
    fn from(value: &GravityConnectedAnimationConfiguration) -> Self {
        ::windows::core::Interface::cast(value).unwrap()
    }
}
impl<'a> ::core::convert::From<&GravityConnectedAnimationConfiguration>
    for ::windows::core::InParam<'a, ConnectedAnimationConfiguration>
{
    fn from(value: &GravityConnectedAnimationConfiguration) -> Self {
        ::windows::core::InParam::owned(value.into())
    }
}
unsafe impl ::core::marker::Send for GravityConnectedAnimationConfiguration {}
unsafe impl ::core::marker::Sync for GravityConnectedAnimationConfiguration {}
#[doc = "*Required features: `\"UI_Xaml_Media_Animation\"`*"]
#[repr(transparent)]
pub struct KeySpline(::windows::core::IUnknown);
impl KeySpline {
    pub fn new() -> ::windows::core::Result<Self> {
        Self::IActivationFactory(|f| f.ActivateInstance::<Self>())
    }
    fn IActivationFactory<
        R,
        F: FnOnce(&::windows::core::IGenericFactory) -> ::windows::core::Result<R>,
    >(
        callback: F,
    ) -> ::windows::core::Result<R> {
        static SHARED: ::windows::core::FactoryCache<KeySpline, ::windows::core::IGenericFactory> =
            ::windows::core::FactoryCache::new();
        SHARED.call(callback)
    }
    pub fn GetValue(
        &self,
        dp: &super::super::DependencyProperty,
    ) -> ::windows::core::Result<::windows::core::IInspectable> {
        let this = &::windows::core::Interface::cast::<super::super::IDependencyObject>(self)?;
        unsafe {
            let mut result__ = ::core::mem::MaybeUninit::zeroed();
            (::windows::core::Vtable::vtable(this).GetValue)(
                ::windows::core::Vtable::as_raw(this),
                ::core::mem::transmute_copy(dp),
                result__.as_mut_ptr(),
            )
            .from_abi::<::windows::core::IInspectable>(result__)
        }
    }
    pub fn SetValue<'a, P0>(
        &self,
        dp: &super::super::DependencyProperty,
        value: P0,
    ) -> ::windows::core::Result<()>
    where
        P0: ::std::convert::Into<::windows::core::InParam<'a, ::windows::core::IInspectable>>,
    {
        let this = &::windows::core::Interface::cast::<super::super::IDependencyObject>(self)?;
        unsafe {
            (::windows::core::Vtable::vtable(this).SetValue)(
                ::windows::core::Vtable::as_raw(this),
                ::core::mem::transmute_copy(dp),
                value.into().abi(),
            )
            .ok()
        }
    }
    pub fn ClearValue(&self, dp: &super::super::DependencyProperty) -> ::windows::core::Result<()> {
        let this = &::windows::core::Interface::cast::<super::super::IDependencyObject>(self)?;
        unsafe {
            (::windows::core::Vtable::vtable(this).ClearValue)(
                ::windows::core::Vtable::as_raw(this),
                ::core::mem::transmute_copy(dp),
            )
            .ok()
        }
    }
    pub fn ReadLocalValue(
        &self,
        dp: &super::super::DependencyProperty,
    ) -> ::windows::core::Result<::windows::core::IInspectable> {
        let this = &::windows::core::Interface::cast::<super::super::IDependencyObject>(self)?;
        unsafe {
            let mut result__ = ::core::mem::MaybeUninit::zeroed();
            (::windows::core::Vtable::vtable(this).ReadLocalValue)(
                ::windows::core::Vtable::as_raw(this),
                ::core::mem::transmute_copy(dp),
                result__.as_mut_ptr(),
            )
            .from_abi::<::windows::core::IInspectable>(result__)
        }
    }
    pub fn GetAnimationBaseValue(
        &self,
        dp: &super::super::DependencyProperty,
    ) -> ::windows::core::Result<::windows::core::IInspectable> {
        let this = &::windows::core::Interface::cast::<super::super::IDependencyObject>(self)?;
        unsafe {
            let mut result__ = ::core::mem::MaybeUninit::zeroed();
            (::windows::core::Vtable::vtable(this).GetAnimationBaseValue)(
                ::windows::core::Vtable::as_raw(this),
                ::core::mem::transmute_copy(dp),
                result__.as_mut_ptr(),
            )
            .from_abi::<::windows::core::IInspectable>(result__)
        }
    }
    pub fn RegisterPropertyChangedCallback(
        &self,
        dp: &super::super::DependencyProperty,
        callback: &super::super::DependencyPropertyChangedCallback,
    ) -> ::windows::core::Result<i64> {
        let this = &::windows::core::Interface::cast::<super::super::IDependencyObject>(self)?;
        unsafe {
            let mut result__ = ::core::mem::MaybeUninit::zeroed();
            (::windows::core::Vtable::vtable(this).RegisterPropertyChangedCallback)(
                ::windows::core::Vtable::as_raw(this),
                ::core::mem::transmute_copy(dp),
                ::core::mem::transmute_copy(callback),
                result__.as_mut_ptr(),
            )
            .from_abi::<i64>(result__)
        }
    }
    pub fn UnregisterPropertyChangedCallback(
        &self,
        dp: &super::super::DependencyProperty,
        token: i64,
    ) -> ::windows::core::Result<()> {
        let this = &::windows::core::Interface::cast::<super::super::IDependencyObject>(self)?;
        unsafe {
            (::windows::core::Vtable::vtable(this).UnregisterPropertyChangedCallback)(
                ::windows::core::Vtable::as_raw(this),
                ::core::mem::transmute_copy(dp),
                token,
            )
            .ok()
        }
    }
    pub fn Dispatcher(&self) -> ::windows::core::Result<::windows::UI::Core::CoreDispatcher> {
        let this = &::windows::core::Interface::cast::<super::super::IDependencyObject>(self)?;
        unsafe {
            let mut result__ = ::core::mem::MaybeUninit::zeroed();
            (::windows::core::Vtable::vtable(this).Dispatcher)(
                ::windows::core::Vtable::as_raw(this),
                result__.as_mut_ptr(),
            )
            .from_abi::<::windows::UI::Core::CoreDispatcher>(result__)
        }
    }
    #[doc = "*Required features: `\"UI_Dispatching\"`*"]
    #[cfg(feature = "UI_Dispatching")]
    pub fn DispatcherQueue(
        &self,
    ) -> ::windows::core::Result<super::super::super::Dispatching::DispatcherQueue> {
        let this = &::windows::core::Interface::cast::<super::super::IDependencyObject>(self)?;
        unsafe {
            let mut result__ = ::core::mem::MaybeUninit::zeroed();
            (::windows::core::Vtable::vtable(this).DispatcherQueue)(
                ::windows::core::Vtable::as_raw(this),
                result__.as_mut_ptr(),
            )
            .from_abi::<super::super::super::Dispatching::DispatcherQueue>(result__)
        }
    }
    pub fn ControlPoint1(&self) -> ::windows::core::Result<::windows::Foundation::Point> {
        let this = self;
        unsafe {
            let mut result__ = ::core::mem::MaybeUninit::zeroed();
            (::windows::core::Vtable::vtable(this).ControlPoint1)(
                ::windows::core::Vtable::as_raw(this),
                result__.as_mut_ptr(),
            )
            .from_abi::<::windows::Foundation::Point>(result__)
        }
    }
    pub fn SetControlPoint1(
        &self,
        value: ::windows::Foundation::Point,
    ) -> ::windows::core::Result<()> {
        let this = self;
        unsafe {
            (::windows::core::Vtable::vtable(this).SetControlPoint1)(
                ::windows::core::Vtable::as_raw(this),
                value,
            )
            .ok()
        }
    }
    pub fn ControlPoint2(&self) -> ::windows::core::Result<::windows::Foundation::Point> {
        let this = self;
        unsafe {
            let mut result__ = ::core::mem::MaybeUninit::zeroed();
            (::windows::core::Vtable::vtable(this).ControlPoint2)(
                ::windows::core::Vtable::as_raw(this),
                result__.as_mut_ptr(),
            )
            .from_abi::<::windows::Foundation::Point>(result__)
        }
    }
    pub fn SetControlPoint2(
        &self,
        value: ::windows::Foundation::Point,
    ) -> ::windows::core::Result<()> {
        let this = self;
        unsafe {
            (::windows::core::Vtable::vtable(this).SetControlPoint2)(
                ::windows::core::Vtable::as_raw(this),
                value,
            )
            .ok()
        }
    }
}
impl ::core::clone::Clone for KeySpline {
    fn clone(&self) -> Self {
        Self(self.0.clone())
    }
}
impl ::core::cmp::PartialEq for KeySpline {
    fn eq(&self, other: &Self) -> bool {
        self.0 == other.0
    }
}
impl ::core::cmp::Eq for KeySpline {}
impl ::core::fmt::Debug for KeySpline {
    fn fmt(&self, f: &mut ::core::fmt::Formatter<'_>) -> ::core::fmt::Result {
        f.debug_tuple("KeySpline").field(&self.0).finish()
    }
}
unsafe impl ::windows::core::RuntimeType for KeySpline {
    const SIGNATURE: ::windows::core::ConstBuffer = ::windows::core::ConstBuffer::from_slice(
        b"rc(Microsoft.UI.Xaml.Media.Animation.KeySpline;{130d8b2b-0b52-5253-881b-36ab48592e6b})",
    );
    type DefaultType = ::core::option::Option<Self>;
    fn from_default(from: &Self::DefaultType) -> ::windows::core::Result<Self> {
        from.as_ref().cloned().ok_or(::windows::core::Error::OK)
    }
}
unsafe impl ::windows::core::Vtable for KeySpline {
    type Vtable = IKeySpline_Vtbl;
}
unsafe impl ::windows::core::Interface for KeySpline {
    const IID: ::windows::core::GUID = <IKeySpline as ::windows::core::Interface>::IID;
}
impl ::windows::core::RuntimeName for KeySpline {
    const NAME: &'static str = "Microsoft.UI.Xaml.Media.Animation.KeySpline";
}
::windows::core::interface_hierarchy!(
    KeySpline,
    ::windows::core::IUnknown,
    ::windows::core::IInspectable
);
impl ::core::convert::From<KeySpline> for super::super::DependencyObject {
    fn from(value: KeySpline) -> Self {
        ::core::convert::From::from(&value)
    }
}
impl ::core::convert::From<&KeySpline> for super::super::DependencyObject {
    fn from(value: &KeySpline) -> Self {
        ::windows::core::Interface::cast(value).unwrap()
    }
}
impl<'a> ::core::convert::From<&KeySpline>
    for ::windows::core::InParam<'a, super::super::DependencyObject>
{
    fn from(value: &KeySpline) -> Self {
        ::windows::core::InParam::owned(value.into())
    }
}
unsafe impl ::core::marker::Send for KeySpline {}
unsafe impl ::core::marker::Sync for KeySpline {}
#[doc = "*Required features: `\"UI_Xaml_Media_Animation\"`*"]
#[repr(transparent)]
pub struct KeyTimeHelper(::windows::core::IUnknown);
impl KeyTimeHelper {
    pub fn FromTimeSpan(
        timespan: ::windows::Foundation::TimeSpan,
    ) -> ::windows::core::Result<KeyTime> {
        Self::IKeyTimeHelperStatics(|this| unsafe {
            let mut result__ = ::core::mem::MaybeUninit::zeroed();
            (::windows::core::Vtable::vtable(this).FromTimeSpan)(
                ::windows::core::Vtable::as_raw(this),
                timespan,
                result__.as_mut_ptr(),
            )
            .from_abi::<KeyTime>(result__)
        })
    }
    #[doc(hidden)]
    pub fn IKeyTimeHelperStatics<
        R,
        F: FnOnce(&IKeyTimeHelperStatics) -> ::windows::core::Result<R>,
    >(
        callback: F,
    ) -> ::windows::core::Result<R> {
        static SHARED: ::windows::core::FactoryCache<KeyTimeHelper, IKeyTimeHelperStatics> =
            ::windows::core::FactoryCache::new();
        SHARED.call(callback)
    }
}
impl ::core::clone::Clone for KeyTimeHelper {
    fn clone(&self) -> Self {
        Self(self.0.clone())
    }
}
impl ::core::cmp::PartialEq for KeyTimeHelper {
    fn eq(&self, other: &Self) -> bool {
        self.0 == other.0
    }
}
impl ::core::cmp::Eq for KeyTimeHelper {}
impl ::core::fmt::Debug for KeyTimeHelper {
    fn fmt(&self, f: &mut ::core::fmt::Formatter<'_>) -> ::core::fmt::Result {
        f.debug_tuple("KeyTimeHelper").field(&self.0).finish()
    }
}
unsafe impl ::windows::core::RuntimeType for KeyTimeHelper {
    const SIGNATURE : ::windows::core::ConstBuffer = ::windows::core::ConstBuffer::from_slice ( b"rc(Microsoft.UI.Xaml.Media.Animation.KeyTimeHelper;{e354da44-1f24-59c6-bc5b-d6b1ba267e9c})" ) ;
    type DefaultType = ::core::option::Option<Self>;
    fn from_default(from: &Self::DefaultType) -> ::windows::core::Result<Self> {
        from.as_ref().cloned().ok_or(::windows::core::Error::OK)
    }
}
unsafe impl ::windows::core::Vtable for KeyTimeHelper {
    type Vtable = IKeyTimeHelper_Vtbl;
}
unsafe impl ::windows::core::Interface for KeyTimeHelper {
    const IID: ::windows::core::GUID = <IKeyTimeHelper as ::windows::core::Interface>::IID;
}
impl ::windows::core::RuntimeName for KeyTimeHelper {
    const NAME: &'static str = "Microsoft.UI.Xaml.Media.Animation.KeyTimeHelper";
}
::windows::core::interface_hierarchy!(
    KeyTimeHelper,
    ::windows::core::IUnknown,
    ::windows::core::IInspectable
);
unsafe impl ::core::marker::Send for KeyTimeHelper {}
unsafe impl ::core::marker::Sync for KeyTimeHelper {}
#[doc = "*Required features: `\"UI_Xaml_Media_Animation\"`*"]
#[repr(transparent)]
pub struct LinearColorKeyFrame(::windows::core::IUnknown);
impl LinearColorKeyFrame {
    pub fn new() -> ::windows::core::Result<Self> {
        Self::IActivationFactory(|f| f.ActivateInstance::<Self>())
    }
    fn IActivationFactory<
        R,
        F: FnOnce(&::windows::core::IGenericFactory) -> ::windows::core::Result<R>,
    >(
        callback: F,
    ) -> ::windows::core::Result<R> {
        static SHARED: ::windows::core::FactoryCache<
            LinearColorKeyFrame,
            ::windows::core::IGenericFactory,
        > = ::windows::core::FactoryCache::new();
        SHARED.call(callback)
    }
    pub fn Value(&self) -> ::windows::core::Result<::windows::UI::Color> {
        let this = &::windows::core::Interface::cast::<IColorKeyFrame>(self)?;
        unsafe {
            let mut result__ = ::core::mem::MaybeUninit::zeroed();
            (::windows::core::Vtable::vtable(this).Value)(
                ::windows::core::Vtable::as_raw(this),
                result__.as_mut_ptr(),
            )
            .from_abi::<::windows::UI::Color>(result__)
        }
    }
    pub fn SetValue(&self, value: ::windows::UI::Color) -> ::windows::core::Result<()> {
        let this = &::windows::core::Interface::cast::<IColorKeyFrame>(self)?;
        unsafe {
            (::windows::core::Vtable::vtable(this).SetValue)(
                ::windows::core::Vtable::as_raw(this),
                value,
            )
            .ok()
        }
    }
    pub fn KeyTime(&self) -> ::windows::core::Result<KeyTime> {
        let this = &::windows::core::Interface::cast::<IColorKeyFrame>(self)?;
        unsafe {
            let mut result__ = ::core::mem::MaybeUninit::zeroed();
            (::windows::core::Vtable::vtable(this).KeyTime)(
                ::windows::core::Vtable::as_raw(this),
                result__.as_mut_ptr(),
            )
            .from_abi::<KeyTime>(result__)
        }
    }
    pub fn SetKeyTime(&self, value: KeyTime) -> ::windows::core::Result<()> {
        let this = &::windows::core::Interface::cast::<IColorKeyFrame>(self)?;
        unsafe {
            (::windows::core::Vtable::vtable(this).SetKeyTime)(
                ::windows::core::Vtable::as_raw(this),
                value,
            )
            .ok()
        }
    }
    pub fn GetValue(
        &self,
        dp: &super::super::DependencyProperty,
    ) -> ::windows::core::Result<::windows::core::IInspectable> {
        let this = &::windows::core::Interface::cast::<super::super::IDependencyObject>(self)?;
        unsafe {
            let mut result__ = ::core::mem::MaybeUninit::zeroed();
            (::windows::core::Vtable::vtable(this).GetValue)(
                ::windows::core::Vtable::as_raw(this),
                ::core::mem::transmute_copy(dp),
                result__.as_mut_ptr(),
            )
            .from_abi::<::windows::core::IInspectable>(result__)
        }
    }
    pub fn SetValue2<'a, P0>(
        &self,
        dp: &super::super::DependencyProperty,
        value: P0,
    ) -> ::windows::core::Result<()>
    where
        P0: ::std::convert::Into<::windows::core::InParam<'a, ::windows::core::IInspectable>>,
    {
        let this = &::windows::core::Interface::cast::<super::super::IDependencyObject>(self)?;
        unsafe {
            (::windows::core::Vtable::vtable(this).SetValue)(
                ::windows::core::Vtable::as_raw(this),
                ::core::mem::transmute_copy(dp),
                value.into().abi(),
            )
            .ok()
        }
    }
    pub fn ClearValue(&self, dp: &super::super::DependencyProperty) -> ::windows::core::Result<()> {
        let this = &::windows::core::Interface::cast::<super::super::IDependencyObject>(self)?;
        unsafe {
            (::windows::core::Vtable::vtable(this).ClearValue)(
                ::windows::core::Vtable::as_raw(this),
                ::core::mem::transmute_copy(dp),
            )
            .ok()
        }
    }
    pub fn ReadLocalValue(
        &self,
        dp: &super::super::DependencyProperty,
    ) -> ::windows::core::Result<::windows::core::IInspectable> {
        let this = &::windows::core::Interface::cast::<super::super::IDependencyObject>(self)?;
        unsafe {
            let mut result__ = ::core::mem::MaybeUninit::zeroed();
            (::windows::core::Vtable::vtable(this).ReadLocalValue)(
                ::windows::core::Vtable::as_raw(this),
                ::core::mem::transmute_copy(dp),
                result__.as_mut_ptr(),
            )
            .from_abi::<::windows::core::IInspectable>(result__)
        }
    }
    pub fn GetAnimationBaseValue(
        &self,
        dp: &super::super::DependencyProperty,
    ) -> ::windows::core::Result<::windows::core::IInspectable> {
        let this = &::windows::core::Interface::cast::<super::super::IDependencyObject>(self)?;
        unsafe {
            let mut result__ = ::core::mem::MaybeUninit::zeroed();
            (::windows::core::Vtable::vtable(this).GetAnimationBaseValue)(
                ::windows::core::Vtable::as_raw(this),
                ::core::mem::transmute_copy(dp),
                result__.as_mut_ptr(),
            )
            .from_abi::<::windows::core::IInspectable>(result__)
        }
    }
    pub fn RegisterPropertyChangedCallback(
        &self,
        dp: &super::super::DependencyProperty,
        callback: &super::super::DependencyPropertyChangedCallback,
    ) -> ::windows::core::Result<i64> {
        let this = &::windows::core::Interface::cast::<super::super::IDependencyObject>(self)?;
        unsafe {
            let mut result__ = ::core::mem::MaybeUninit::zeroed();
            (::windows::core::Vtable::vtable(this).RegisterPropertyChangedCallback)(
                ::windows::core::Vtable::as_raw(this),
                ::core::mem::transmute_copy(dp),
                ::core::mem::transmute_copy(callback),
                result__.as_mut_ptr(),
            )
            .from_abi::<i64>(result__)
        }
    }
    pub fn UnregisterPropertyChangedCallback(
        &self,
        dp: &super::super::DependencyProperty,
        token: i64,
    ) -> ::windows::core::Result<()> {
        let this = &::windows::core::Interface::cast::<super::super::IDependencyObject>(self)?;
        unsafe {
            (::windows::core::Vtable::vtable(this).UnregisterPropertyChangedCallback)(
                ::windows::core::Vtable::as_raw(this),
                ::core::mem::transmute_copy(dp),
                token,
            )
            .ok()
        }
    }
    pub fn Dispatcher(&self) -> ::windows::core::Result<::windows::UI::Core::CoreDispatcher> {
        let this = &::windows::core::Interface::cast::<super::super::IDependencyObject>(self)?;
        unsafe {
            let mut result__ = ::core::mem::MaybeUninit::zeroed();
            (::windows::core::Vtable::vtable(this).Dispatcher)(
                ::windows::core::Vtable::as_raw(this),
                result__.as_mut_ptr(),
            )
            .from_abi::<::windows::UI::Core::CoreDispatcher>(result__)
        }
    }
    #[doc = "*Required features: `\"UI_Dispatching\"`*"]
    #[cfg(feature = "UI_Dispatching")]
    pub fn DispatcherQueue(
        &self,
    ) -> ::windows::core::Result<super::super::super::Dispatching::DispatcherQueue> {
        let this = &::windows::core::Interface::cast::<super::super::IDependencyObject>(self)?;
        unsafe {
            let mut result__ = ::core::mem::MaybeUninit::zeroed();
            (::windows::core::Vtable::vtable(this).DispatcherQueue)(
                ::windows::core::Vtable::as_raw(this),
                result__.as_mut_ptr(),
            )
            .from_abi::<super::super::super::Dispatching::DispatcherQueue>(result__)
        }
    }
}
impl ::core::clone::Clone for LinearColorKeyFrame {
    fn clone(&self) -> Self {
        Self(self.0.clone())
    }
}
impl ::core::cmp::PartialEq for LinearColorKeyFrame {
    fn eq(&self, other: &Self) -> bool {
        self.0 == other.0
    }
}
impl ::core::cmp::Eq for LinearColorKeyFrame {}
impl ::core::fmt::Debug for LinearColorKeyFrame {
    fn fmt(&self, f: &mut ::core::fmt::Formatter<'_>) -> ::core::fmt::Result {
        f.debug_tuple("LinearColorKeyFrame").field(&self.0).finish()
    }
}
unsafe impl ::windows::core::RuntimeType for LinearColorKeyFrame {
    const SIGNATURE : ::windows::core::ConstBuffer = ::windows::core::ConstBuffer::from_slice ( b"rc(Microsoft.UI.Xaml.Media.Animation.LinearColorKeyFrame;{0bce4cd6-3a80-5f2f-932e-619a8546d0bd})" ) ;
    type DefaultType = ::core::option::Option<Self>;
    fn from_default(from: &Self::DefaultType) -> ::windows::core::Result<Self> {
        from.as_ref().cloned().ok_or(::windows::core::Error::OK)
    }
}
unsafe impl ::windows::core::Vtable for LinearColorKeyFrame {
    type Vtable = ILinearColorKeyFrame_Vtbl;
}
unsafe impl ::windows::core::Interface for LinearColorKeyFrame {
    const IID: ::windows::core::GUID = <ILinearColorKeyFrame as ::windows::core::Interface>::IID;
}
impl ::windows::core::RuntimeName for LinearColorKeyFrame {
    const NAME: &'static str = "Microsoft.UI.Xaml.Media.Animation.LinearColorKeyFrame";
}
::windows::core::interface_hierarchy!(
    LinearColorKeyFrame,
    ::windows::core::IUnknown,
    ::windows::core::IInspectable
);
impl ::core::convert::From<LinearColorKeyFrame> for ColorKeyFrame {
    fn from(value: LinearColorKeyFrame) -> Self {
        ::core::convert::From::from(&value)
    }
}
impl ::core::convert::From<&LinearColorKeyFrame> for ColorKeyFrame {
    fn from(value: &LinearColorKeyFrame) -> Self {
        ::windows::core::Interface::cast(value).unwrap()
    }
}
impl<'a> ::core::convert::From<&LinearColorKeyFrame>
    for ::windows::core::InParam<'a, ColorKeyFrame>
{
    fn from(value: &LinearColorKeyFrame) -> Self {
        ::windows::core::InParam::owned(value.into())
    }
}
impl ::core::convert::From<LinearColorKeyFrame> for super::super::DependencyObject {
    fn from(value: LinearColorKeyFrame) -> Self {
        ::core::convert::From::from(&value)
    }
}
impl ::core::convert::From<&LinearColorKeyFrame> for super::super::DependencyObject {
    fn from(value: &LinearColorKeyFrame) -> Self {
        ::windows::core::Interface::cast(value).unwrap()
    }
}
impl<'a> ::core::convert::From<&LinearColorKeyFrame>
    for ::windows::core::InParam<'a, super::super::DependencyObject>
{
    fn from(value: &LinearColorKeyFrame) -> Self {
        ::windows::core::InParam::owned(value.into())
    }
}
unsafe impl ::core::marker::Send for LinearColorKeyFrame {}
unsafe impl ::core::marker::Sync for LinearColorKeyFrame {}
#[doc = "*Required features: `\"UI_Xaml_Media_Animation\"`*"]
#[repr(transparent)]
pub struct LinearDoubleKeyFrame(::windows::core::IUnknown);
impl LinearDoubleKeyFrame {
    pub fn new() -> ::windows::core::Result<Self> {
        Self::IActivationFactory(|f| f.ActivateInstance::<Self>())
    }
    fn IActivationFactory<
        R,
        F: FnOnce(&::windows::core::IGenericFactory) -> ::windows::core::Result<R>,
    >(
        callback: F,
    ) -> ::windows::core::Result<R> {
        static SHARED: ::windows::core::FactoryCache<
            LinearDoubleKeyFrame,
            ::windows::core::IGenericFactory,
        > = ::windows::core::FactoryCache::new();
        SHARED.call(callback)
    }
    pub fn GetValue(
        &self,
        dp: &super::super::DependencyProperty,
    ) -> ::windows::core::Result<::windows::core::IInspectable> {
        let this = &::windows::core::Interface::cast::<super::super::IDependencyObject>(self)?;
        unsafe {
            let mut result__ = ::core::mem::MaybeUninit::zeroed();
            (::windows::core::Vtable::vtable(this).GetValue)(
                ::windows::core::Vtable::as_raw(this),
                ::core::mem::transmute_copy(dp),
                result__.as_mut_ptr(),
            )
            .from_abi::<::windows::core::IInspectable>(result__)
        }
    }
    pub fn SetValue<'a, P0>(
        &self,
        dp: &super::super::DependencyProperty,
        value: P0,
    ) -> ::windows::core::Result<()>
    where
        P0: ::std::convert::Into<::windows::core::InParam<'a, ::windows::core::IInspectable>>,
    {
        let this = &::windows::core::Interface::cast::<super::super::IDependencyObject>(self)?;
        unsafe {
            (::windows::core::Vtable::vtable(this).SetValue)(
                ::windows::core::Vtable::as_raw(this),
                ::core::mem::transmute_copy(dp),
                value.into().abi(),
            )
            .ok()
        }
    }
    pub fn ClearValue(&self, dp: &super::super::DependencyProperty) -> ::windows::core::Result<()> {
        let this = &::windows::core::Interface::cast::<super::super::IDependencyObject>(self)?;
        unsafe {
            (::windows::core::Vtable::vtable(this).ClearValue)(
                ::windows::core::Vtable::as_raw(this),
                ::core::mem::transmute_copy(dp),
            )
            .ok()
        }
    }
    pub fn ReadLocalValue(
        &self,
        dp: &super::super::DependencyProperty,
    ) -> ::windows::core::Result<::windows::core::IInspectable> {
        let this = &::windows::core::Interface::cast::<super::super::IDependencyObject>(self)?;
        unsafe {
            let mut result__ = ::core::mem::MaybeUninit::zeroed();
            (::windows::core::Vtable::vtable(this).ReadLocalValue)(
                ::windows::core::Vtable::as_raw(this),
                ::core::mem::transmute_copy(dp),
                result__.as_mut_ptr(),
            )
            .from_abi::<::windows::core::IInspectable>(result__)
        }
    }
    pub fn GetAnimationBaseValue(
        &self,
        dp: &super::super::DependencyProperty,
    ) -> ::windows::core::Result<::windows::core::IInspectable> {
        let this = &::windows::core::Interface::cast::<super::super::IDependencyObject>(self)?;
        unsafe {
            let mut result__ = ::core::mem::MaybeUninit::zeroed();
            (::windows::core::Vtable::vtable(this).GetAnimationBaseValue)(
                ::windows::core::Vtable::as_raw(this),
                ::core::mem::transmute_copy(dp),
                result__.as_mut_ptr(),
            )
            .from_abi::<::windows::core::IInspectable>(result__)
        }
    }
    pub fn RegisterPropertyChangedCallback(
        &self,
        dp: &super::super::DependencyProperty,
        callback: &super::super::DependencyPropertyChangedCallback,
    ) -> ::windows::core::Result<i64> {
        let this = &::windows::core::Interface::cast::<super::super::IDependencyObject>(self)?;
        unsafe {
            let mut result__ = ::core::mem::MaybeUninit::zeroed();
            (::windows::core::Vtable::vtable(this).RegisterPropertyChangedCallback)(
                ::windows::core::Vtable::as_raw(this),
                ::core::mem::transmute_copy(dp),
                ::core::mem::transmute_copy(callback),
                result__.as_mut_ptr(),
            )
            .from_abi::<i64>(result__)
        }
    }
    pub fn UnregisterPropertyChangedCallback(
        &self,
        dp: &super::super::DependencyProperty,
        token: i64,
    ) -> ::windows::core::Result<()> {
        let this = &::windows::core::Interface::cast::<super::super::IDependencyObject>(self)?;
        unsafe {
            (::windows::core::Vtable::vtable(this).UnregisterPropertyChangedCallback)(
                ::windows::core::Vtable::as_raw(this),
                ::core::mem::transmute_copy(dp),
                token,
            )
            .ok()
        }
    }
    pub fn Dispatcher(&self) -> ::windows::core::Result<::windows::UI::Core::CoreDispatcher> {
        let this = &::windows::core::Interface::cast::<super::super::IDependencyObject>(self)?;
        unsafe {
            let mut result__ = ::core::mem::MaybeUninit::zeroed();
            (::windows::core::Vtable::vtable(this).Dispatcher)(
                ::windows::core::Vtable::as_raw(this),
                result__.as_mut_ptr(),
            )
            .from_abi::<::windows::UI::Core::CoreDispatcher>(result__)
        }
    }
    #[doc = "*Required features: `\"UI_Dispatching\"`*"]
    #[cfg(feature = "UI_Dispatching")]
    pub fn DispatcherQueue(
        &self,
    ) -> ::windows::core::Result<super::super::super::Dispatching::DispatcherQueue> {
        let this = &::windows::core::Interface::cast::<super::super::IDependencyObject>(self)?;
        unsafe {
            let mut result__ = ::core::mem::MaybeUninit::zeroed();
            (::windows::core::Vtable::vtable(this).DispatcherQueue)(
                ::windows::core::Vtable::as_raw(this),
                result__.as_mut_ptr(),
            )
            .from_abi::<super::super::super::Dispatching::DispatcherQueue>(result__)
        }
    }
    pub fn Value(&self) -> ::windows::core::Result<f64> {
        let this = &::windows::core::Interface::cast::<IDoubleKeyFrame>(self)?;
        unsafe {
            let mut result__ = ::core::mem::MaybeUninit::zeroed();
            (::windows::core::Vtable::vtable(this).Value)(
                ::windows::core::Vtable::as_raw(this),
                result__.as_mut_ptr(),
            )
            .from_abi::<f64>(result__)
        }
    }
    pub fn SetValue2(&self, value: f64) -> ::windows::core::Result<()> {
        let this = &::windows::core::Interface::cast::<IDoubleKeyFrame>(self)?;
        unsafe {
            (::windows::core::Vtable::vtable(this).SetValue)(
                ::windows::core::Vtable::as_raw(this),
                value,
            )
            .ok()
        }
    }
    pub fn KeyTime(&self) -> ::windows::core::Result<KeyTime> {
        let this = &::windows::core::Interface::cast::<IDoubleKeyFrame>(self)?;
        unsafe {
            let mut result__ = ::core::mem::MaybeUninit::zeroed();
            (::windows::core::Vtable::vtable(this).KeyTime)(
                ::windows::core::Vtable::as_raw(this),
                result__.as_mut_ptr(),
            )
            .from_abi::<KeyTime>(result__)
        }
    }
    pub fn SetKeyTime(&self, value: KeyTime) -> ::windows::core::Result<()> {
        let this = &::windows::core::Interface::cast::<IDoubleKeyFrame>(self)?;
        unsafe {
            (::windows::core::Vtable::vtable(this).SetKeyTime)(
                ::windows::core::Vtable::as_raw(this),
                value,
            )
            .ok()
        }
    }
}
impl ::core::clone::Clone for LinearDoubleKeyFrame {
    fn clone(&self) -> Self {
        Self(self.0.clone())
    }
}
impl ::core::cmp::PartialEq for LinearDoubleKeyFrame {
    fn eq(&self, other: &Self) -> bool {
        self.0 == other.0
    }
}
impl ::core::cmp::Eq for LinearDoubleKeyFrame {}
impl ::core::fmt::Debug for LinearDoubleKeyFrame {
    fn fmt(&self, f: &mut ::core::fmt::Formatter<'_>) -> ::core::fmt::Result {
        f.debug_tuple("LinearDoubleKeyFrame").field(&self.0).finish()
    }
}
unsafe impl ::windows::core::RuntimeType for LinearDoubleKeyFrame {
    const SIGNATURE : ::windows::core::ConstBuffer = ::windows::core::ConstBuffer::from_slice ( b"rc(Microsoft.UI.Xaml.Media.Animation.LinearDoubleKeyFrame;{38a635b9-f613-55e0-aaec-9d4e097eff91})" ) ;
    type DefaultType = ::core::option::Option<Self>;
    fn from_default(from: &Self::DefaultType) -> ::windows::core::Result<Self> {
        from.as_ref().cloned().ok_or(::windows::core::Error::OK)
    }
}
unsafe impl ::windows::core::Vtable for LinearDoubleKeyFrame {
    type Vtable = ILinearDoubleKeyFrame_Vtbl;
}
unsafe impl ::windows::core::Interface for LinearDoubleKeyFrame {
    const IID: ::windows::core::GUID = <ILinearDoubleKeyFrame as ::windows::core::Interface>::IID;
}
impl ::windows::core::RuntimeName for LinearDoubleKeyFrame {
    const NAME: &'static str = "Microsoft.UI.Xaml.Media.Animation.LinearDoubleKeyFrame";
}
::windows::core::interface_hierarchy!(
    LinearDoubleKeyFrame,
    ::windows::core::IUnknown,
    ::windows::core::IInspectable
);
impl ::core::convert::From<LinearDoubleKeyFrame> for DoubleKeyFrame {
    fn from(value: LinearDoubleKeyFrame) -> Self {
        ::core::convert::From::from(&value)
    }
}
impl ::core::convert::From<&LinearDoubleKeyFrame> for DoubleKeyFrame {
    fn from(value: &LinearDoubleKeyFrame) -> Self {
        ::windows::core::Interface::cast(value).unwrap()
    }
}
impl<'a> ::core::convert::From<&LinearDoubleKeyFrame>
    for ::windows::core::InParam<'a, DoubleKeyFrame>
{
    fn from(value: &LinearDoubleKeyFrame) -> Self {
        ::windows::core::InParam::owned(value.into())
    }
}
impl ::core::convert::From<LinearDoubleKeyFrame> for super::super::DependencyObject {
    fn from(value: LinearDoubleKeyFrame) -> Self {
        ::core::convert::From::from(&value)
    }
}
impl ::core::convert::From<&LinearDoubleKeyFrame> for super::super::DependencyObject {
    fn from(value: &LinearDoubleKeyFrame) -> Self {
        ::windows::core::Interface::cast(value).unwrap()
    }
}
impl<'a> ::core::convert::From<&LinearDoubleKeyFrame>
    for ::windows::core::InParam<'a, super::super::DependencyObject>
{
    fn from(value: &LinearDoubleKeyFrame) -> Self {
        ::windows::core::InParam::owned(value.into())
    }
}
unsafe impl ::core::marker::Send for LinearDoubleKeyFrame {}
unsafe impl ::core::marker::Sync for LinearDoubleKeyFrame {}
#[doc = "*Required features: `\"UI_Xaml_Media_Animation\"`*"]
#[repr(transparent)]
pub struct LinearPointKeyFrame(::windows::core::IUnknown);
impl LinearPointKeyFrame {
    pub fn new() -> ::windows::core::Result<Self> {
        Self::IActivationFactory(|f| f.ActivateInstance::<Self>())
    }
    fn IActivationFactory<
        R,
        F: FnOnce(&::windows::core::IGenericFactory) -> ::windows::core::Result<R>,
    >(
        callback: F,
    ) -> ::windows::core::Result<R> {
        static SHARED: ::windows::core::FactoryCache<
            LinearPointKeyFrame,
            ::windows::core::IGenericFactory,
        > = ::windows::core::FactoryCache::new();
        SHARED.call(callback)
    }
    pub fn GetValue(
        &self,
        dp: &super::super::DependencyProperty,
    ) -> ::windows::core::Result<::windows::core::IInspectable> {
        let this = &::windows::core::Interface::cast::<super::super::IDependencyObject>(self)?;
        unsafe {
            let mut result__ = ::core::mem::MaybeUninit::zeroed();
            (::windows::core::Vtable::vtable(this).GetValue)(
                ::windows::core::Vtable::as_raw(this),
                ::core::mem::transmute_copy(dp),
                result__.as_mut_ptr(),
            )
            .from_abi::<::windows::core::IInspectable>(result__)
        }
    }
    pub fn SetValue<'a, P0>(
        &self,
        dp: &super::super::DependencyProperty,
        value: P0,
    ) -> ::windows::core::Result<()>
    where
        P0: ::std::convert::Into<::windows::core::InParam<'a, ::windows::core::IInspectable>>,
    {
        let this = &::windows::core::Interface::cast::<super::super::IDependencyObject>(self)?;
        unsafe {
            (::windows::core::Vtable::vtable(this).SetValue)(
                ::windows::core::Vtable::as_raw(this),
                ::core::mem::transmute_copy(dp),
                value.into().abi(),
            )
            .ok()
        }
    }
    pub fn ClearValue(&self, dp: &super::super::DependencyProperty) -> ::windows::core::Result<()> {
        let this = &::windows::core::Interface::cast::<super::super::IDependencyObject>(self)?;
        unsafe {
            (::windows::core::Vtable::vtable(this).ClearValue)(
                ::windows::core::Vtable::as_raw(this),
                ::core::mem::transmute_copy(dp),
            )
            .ok()
        }
    }
    pub fn ReadLocalValue(
        &self,
        dp: &super::super::DependencyProperty,
    ) -> ::windows::core::Result<::windows::core::IInspectable> {
        let this = &::windows::core::Interface::cast::<super::super::IDependencyObject>(self)?;
        unsafe {
            let mut result__ = ::core::mem::MaybeUninit::zeroed();
            (::windows::core::Vtable::vtable(this).ReadLocalValue)(
                ::windows::core::Vtable::as_raw(this),
                ::core::mem::transmute_copy(dp),
                result__.as_mut_ptr(),
            )
            .from_abi::<::windows::core::IInspectable>(result__)
        }
    }
    pub fn GetAnimationBaseValue(
        &self,
        dp: &super::super::DependencyProperty,
    ) -> ::windows::core::Result<::windows::core::IInspectable> {
        let this = &::windows::core::Interface::cast::<super::super::IDependencyObject>(self)?;
        unsafe {
            let mut result__ = ::core::mem::MaybeUninit::zeroed();
            (::windows::core::Vtable::vtable(this).GetAnimationBaseValue)(
                ::windows::core::Vtable::as_raw(this),
                ::core::mem::transmute_copy(dp),
                result__.as_mut_ptr(),
            )
            .from_abi::<::windows::core::IInspectable>(result__)
        }
    }
    pub fn RegisterPropertyChangedCallback(
        &self,
        dp: &super::super::DependencyProperty,
        callback: &super::super::DependencyPropertyChangedCallback,
    ) -> ::windows::core::Result<i64> {
        let this = &::windows::core::Interface::cast::<super::super::IDependencyObject>(self)?;
        unsafe {
            let mut result__ = ::core::mem::MaybeUninit::zeroed();
            (::windows::core::Vtable::vtable(this).RegisterPropertyChangedCallback)(
                ::windows::core::Vtable::as_raw(this),
                ::core::mem::transmute_copy(dp),
                ::core::mem::transmute_copy(callback),
                result__.as_mut_ptr(),
            )
            .from_abi::<i64>(result__)
        }
    }
    pub fn UnregisterPropertyChangedCallback(
        &self,
        dp: &super::super::DependencyProperty,
        token: i64,
    ) -> ::windows::core::Result<()> {
        let this = &::windows::core::Interface::cast::<super::super::IDependencyObject>(self)?;
        unsafe {
            (::windows::core::Vtable::vtable(this).UnregisterPropertyChangedCallback)(
                ::windows::core::Vtable::as_raw(this),
                ::core::mem::transmute_copy(dp),
                token,
            )
            .ok()
        }
    }
    pub fn Dispatcher(&self) -> ::windows::core::Result<::windows::UI::Core::CoreDispatcher> {
        let this = &::windows::core::Interface::cast::<super::super::IDependencyObject>(self)?;
        unsafe {
            let mut result__ = ::core::mem::MaybeUninit::zeroed();
            (::windows::core::Vtable::vtable(this).Dispatcher)(
                ::windows::core::Vtable::as_raw(this),
                result__.as_mut_ptr(),
            )
            .from_abi::<::windows::UI::Core::CoreDispatcher>(result__)
        }
    }
    #[doc = "*Required features: `\"UI_Dispatching\"`*"]
    #[cfg(feature = "UI_Dispatching")]
    pub fn DispatcherQueue(
        &self,
    ) -> ::windows::core::Result<super::super::super::Dispatching::DispatcherQueue> {
        let this = &::windows::core::Interface::cast::<super::super::IDependencyObject>(self)?;
        unsafe {
            let mut result__ = ::core::mem::MaybeUninit::zeroed();
            (::windows::core::Vtable::vtable(this).DispatcherQueue)(
                ::windows::core::Vtable::as_raw(this),
                result__.as_mut_ptr(),
            )
            .from_abi::<super::super::super::Dispatching::DispatcherQueue>(result__)
        }
    }
    pub fn Value(&self) -> ::windows::core::Result<::windows::Foundation::Point> {
        let this = &::windows::core::Interface::cast::<IPointKeyFrame>(self)?;
        unsafe {
            let mut result__ = ::core::mem::MaybeUninit::zeroed();
            (::windows::core::Vtable::vtable(this).Value)(
                ::windows::core::Vtable::as_raw(this),
                result__.as_mut_ptr(),
            )
            .from_abi::<::windows::Foundation::Point>(result__)
        }
    }
    pub fn SetValue2(&self, value: ::windows::Foundation::Point) -> ::windows::core::Result<()> {
        let this = &::windows::core::Interface::cast::<IPointKeyFrame>(self)?;
        unsafe {
            (::windows::core::Vtable::vtable(this).SetValue)(
                ::windows::core::Vtable::as_raw(this),
                value,
            )
            .ok()
        }
    }
    pub fn KeyTime(&self) -> ::windows::core::Result<KeyTime> {
        let this = &::windows::core::Interface::cast::<IPointKeyFrame>(self)?;
        unsafe {
            let mut result__ = ::core::mem::MaybeUninit::zeroed();
            (::windows::core::Vtable::vtable(this).KeyTime)(
                ::windows::core::Vtable::as_raw(this),
                result__.as_mut_ptr(),
            )
            .from_abi::<KeyTime>(result__)
        }
    }
    pub fn SetKeyTime(&self, value: KeyTime) -> ::windows::core::Result<()> {
        let this = &::windows::core::Interface::cast::<IPointKeyFrame>(self)?;
        unsafe {
            (::windows::core::Vtable::vtable(this).SetKeyTime)(
                ::windows::core::Vtable::as_raw(this),
                value,
            )
            .ok()
        }
    }
}
impl ::core::clone::Clone for LinearPointKeyFrame {
    fn clone(&self) -> Self {
        Self(self.0.clone())
    }
}
impl ::core::cmp::PartialEq for LinearPointKeyFrame {
    fn eq(&self, other: &Self) -> bool {
        self.0 == other.0
    }
}
impl ::core::cmp::Eq for LinearPointKeyFrame {}
impl ::core::fmt::Debug for LinearPointKeyFrame {
    fn fmt(&self, f: &mut ::core::fmt::Formatter<'_>) -> ::core::fmt::Result {
        f.debug_tuple("LinearPointKeyFrame").field(&self.0).finish()
    }
}
unsafe impl ::windows::core::RuntimeType for LinearPointKeyFrame {
    const SIGNATURE : ::windows::core::ConstBuffer = ::windows::core::ConstBuffer::from_slice ( b"rc(Microsoft.UI.Xaml.Media.Animation.LinearPointKeyFrame;{4ec22493-bacb-5105-ac16-8ea5418ab76e})" ) ;
    type DefaultType = ::core::option::Option<Self>;
    fn from_default(from: &Self::DefaultType) -> ::windows::core::Result<Self> {
        from.as_ref().cloned().ok_or(::windows::core::Error::OK)
    }
}
unsafe impl ::windows::core::Vtable for LinearPointKeyFrame {
    type Vtable = ILinearPointKeyFrame_Vtbl;
}
unsafe impl ::windows::core::Interface for LinearPointKeyFrame {
    const IID: ::windows::core::GUID = <ILinearPointKeyFrame as ::windows::core::Interface>::IID;
}
impl ::windows::core::RuntimeName for LinearPointKeyFrame {
    const NAME: &'static str = "Microsoft.UI.Xaml.Media.Animation.LinearPointKeyFrame";
}
::windows::core::interface_hierarchy!(
    LinearPointKeyFrame,
    ::windows::core::IUnknown,
    ::windows::core::IInspectable
);
impl ::core::convert::From<LinearPointKeyFrame> for PointKeyFrame {
    fn from(value: LinearPointKeyFrame) -> Self {
        ::core::convert::From::from(&value)
    }
}
impl ::core::convert::From<&LinearPointKeyFrame> for PointKeyFrame {
    fn from(value: &LinearPointKeyFrame) -> Self {
        ::windows::core::Interface::cast(value).unwrap()
    }
}
impl<'a> ::core::convert::From<&LinearPointKeyFrame>
    for ::windows::core::InParam<'a, PointKeyFrame>
{
    fn from(value: &LinearPointKeyFrame) -> Self {
        ::windows::core::InParam::owned(value.into())
    }
}
impl ::core::convert::From<LinearPointKeyFrame> for super::super::DependencyObject {
    fn from(value: LinearPointKeyFrame) -> Self {
        ::core::convert::From::from(&value)
    }
}
impl ::core::convert::From<&LinearPointKeyFrame> for super::super::DependencyObject {
    fn from(value: &LinearPointKeyFrame) -> Self {
        ::windows::core::Interface::cast(value).unwrap()
    }
}
impl<'a> ::core::convert::From<&LinearPointKeyFrame>
    for ::windows::core::InParam<'a, super::super::DependencyObject>
{
    fn from(value: &LinearPointKeyFrame) -> Self {
        ::windows::core::InParam::owned(value.into())
    }
}
unsafe impl ::core::marker::Send for LinearPointKeyFrame {}
unsafe impl ::core::marker::Sync for LinearPointKeyFrame {}
#[doc = "*Required features: `\"UI_Xaml_Media_Animation\"`*"]
#[repr(transparent)]
pub struct NavigationThemeTransition(::windows::core::IUnknown);
impl NavigationThemeTransition {
    pub fn new() -> ::windows::core::Result<Self> {
        Self::IActivationFactory(|f| f.ActivateInstance::<Self>())
    }
    fn IActivationFactory<
        R,
        F: FnOnce(&::windows::core::IGenericFactory) -> ::windows::core::Result<R>,
    >(
        callback: F,
    ) -> ::windows::core::Result<R> {
        static SHARED: ::windows::core::FactoryCache<
            NavigationThemeTransition,
            ::windows::core::IGenericFactory,
        > = ::windows::core::FactoryCache::new();
        SHARED.call(callback)
    }
    pub fn GetValue(
        &self,
        dp: &super::super::DependencyProperty,
    ) -> ::windows::core::Result<::windows::core::IInspectable> {
        let this = &::windows::core::Interface::cast::<super::super::IDependencyObject>(self)?;
        unsafe {
            let mut result__ = ::core::mem::MaybeUninit::zeroed();
            (::windows::core::Vtable::vtable(this).GetValue)(
                ::windows::core::Vtable::as_raw(this),
                ::core::mem::transmute_copy(dp),
                result__.as_mut_ptr(),
            )
            .from_abi::<::windows::core::IInspectable>(result__)
        }
    }
    pub fn SetValue<'a, P0>(
        &self,
        dp: &super::super::DependencyProperty,
        value: P0,
    ) -> ::windows::core::Result<()>
    where
        P0: ::std::convert::Into<::windows::core::InParam<'a, ::windows::core::IInspectable>>,
    {
        let this = &::windows::core::Interface::cast::<super::super::IDependencyObject>(self)?;
        unsafe {
            (::windows::core::Vtable::vtable(this).SetValue)(
                ::windows::core::Vtable::as_raw(this),
                ::core::mem::transmute_copy(dp),
                value.into().abi(),
            )
            .ok()
        }
    }
    pub fn ClearValue(&self, dp: &super::super::DependencyProperty) -> ::windows::core::Result<()> {
        let this = &::windows::core::Interface::cast::<super::super::IDependencyObject>(self)?;
        unsafe {
            (::windows::core::Vtable::vtable(this).ClearValue)(
                ::windows::core::Vtable::as_raw(this),
                ::core::mem::transmute_copy(dp),
            )
            .ok()
        }
    }
    pub fn ReadLocalValue(
        &self,
        dp: &super::super::DependencyProperty,
    ) -> ::windows::core::Result<::windows::core::IInspectable> {
        let this = &::windows::core::Interface::cast::<super::super::IDependencyObject>(self)?;
        unsafe {
            let mut result__ = ::core::mem::MaybeUninit::zeroed();
            (::windows::core::Vtable::vtable(this).ReadLocalValue)(
                ::windows::core::Vtable::as_raw(this),
                ::core::mem::transmute_copy(dp),
                result__.as_mut_ptr(),
            )
            .from_abi::<::windows::core::IInspectable>(result__)
        }
    }
    pub fn GetAnimationBaseValue(
        &self,
        dp: &super::super::DependencyProperty,
    ) -> ::windows::core::Result<::windows::core::IInspectable> {
        let this = &::windows::core::Interface::cast::<super::super::IDependencyObject>(self)?;
        unsafe {
            let mut result__ = ::core::mem::MaybeUninit::zeroed();
            (::windows::core::Vtable::vtable(this).GetAnimationBaseValue)(
                ::windows::core::Vtable::as_raw(this),
                ::core::mem::transmute_copy(dp),
                result__.as_mut_ptr(),
            )
            .from_abi::<::windows::core::IInspectable>(result__)
        }
    }
    pub fn RegisterPropertyChangedCallback(
        &self,
        dp: &super::super::DependencyProperty,
        callback: &super::super::DependencyPropertyChangedCallback,
    ) -> ::windows::core::Result<i64> {
        let this = &::windows::core::Interface::cast::<super::super::IDependencyObject>(self)?;
        unsafe {
            let mut result__ = ::core::mem::MaybeUninit::zeroed();
            (::windows::core::Vtable::vtable(this).RegisterPropertyChangedCallback)(
                ::windows::core::Vtable::as_raw(this),
                ::core::mem::transmute_copy(dp),
                ::core::mem::transmute_copy(callback),
                result__.as_mut_ptr(),
            )
            .from_abi::<i64>(result__)
        }
    }
    pub fn UnregisterPropertyChangedCallback(
        &self,
        dp: &super::super::DependencyProperty,
        token: i64,
    ) -> ::windows::core::Result<()> {
        let this = &::windows::core::Interface::cast::<super::super::IDependencyObject>(self)?;
        unsafe {
            (::windows::core::Vtable::vtable(this).UnregisterPropertyChangedCallback)(
                ::windows::core::Vtable::as_raw(this),
                ::core::mem::transmute_copy(dp),
                token,
            )
            .ok()
        }
    }
    pub fn Dispatcher(&self) -> ::windows::core::Result<::windows::UI::Core::CoreDispatcher> {
        let this = &::windows::core::Interface::cast::<super::super::IDependencyObject>(self)?;
        unsafe {
            let mut result__ = ::core::mem::MaybeUninit::zeroed();
            (::windows::core::Vtable::vtable(this).Dispatcher)(
                ::windows::core::Vtable::as_raw(this),
                result__.as_mut_ptr(),
            )
            .from_abi::<::windows::UI::Core::CoreDispatcher>(result__)
        }
    }
    #[doc = "*Required features: `\"UI_Dispatching\"`*"]
    #[cfg(feature = "UI_Dispatching")]
    pub fn DispatcherQueue(
        &self,
    ) -> ::windows::core::Result<super::super::super::Dispatching::DispatcherQueue> {
        let this = &::windows::core::Interface::cast::<super::super::IDependencyObject>(self)?;
        unsafe {
            let mut result__ = ::core::mem::MaybeUninit::zeroed();
            (::windows::core::Vtable::vtable(this).DispatcherQueue)(
                ::windows::core::Vtable::as_raw(this),
                result__.as_mut_ptr(),
            )
            .from_abi::<super::super::super::Dispatching::DispatcherQueue>(result__)
        }
    }
    pub fn DefaultNavigationTransitionInfo(
        &self,
    ) -> ::windows::core::Result<NavigationTransitionInfo> {
        let this = self;
        unsafe {
            let mut result__ = ::core::mem::MaybeUninit::zeroed();
            (::windows::core::Vtable::vtable(this).DefaultNavigationTransitionInfo)(
                ::windows::core::Vtable::as_raw(this),
                result__.as_mut_ptr(),
            )
            .from_abi::<NavigationTransitionInfo>(result__)
        }
    }
    pub fn SetDefaultNavigationTransitionInfo<'a, P0>(
        &self,
        value: P0,
    ) -> ::windows::core::Result<()>
    where
        P0: ::std::convert::Into<::windows::core::InParam<'a, NavigationTransitionInfo>>,
    {
        let this = self;
        unsafe {
            (::windows::core::Vtable::vtable(this).SetDefaultNavigationTransitionInfo)(
                ::windows::core::Vtable::as_raw(this),
                value.into().abi(),
            )
            .ok()
        }
    }
    pub fn DefaultNavigationTransitionInfoProperty(
    ) -> ::windows::core::Result<super::super::DependencyProperty> {
        Self::INavigationThemeTransitionStatics(|this| unsafe {
            let mut result__ = ::core::mem::MaybeUninit::zeroed();
            (::windows::core::Vtable::vtable(this).DefaultNavigationTransitionInfoProperty)(
                ::windows::core::Vtable::as_raw(this),
                result__.as_mut_ptr(),
            )
            .from_abi::<super::super::DependencyProperty>(result__)
        })
    }
    #[doc(hidden)]
    pub fn INavigationThemeTransitionStatics<
        R,
        F: FnOnce(&INavigationThemeTransitionStatics) -> ::windows::core::Result<R>,
    >(
        callback: F,
    ) -> ::windows::core::Result<R> {
        static SHARED: ::windows::core::FactoryCache<
            NavigationThemeTransition,
            INavigationThemeTransitionStatics,
        > = ::windows::core::FactoryCache::new();
        SHARED.call(callback)
    }
}
impl ::core::clone::Clone for NavigationThemeTransition {
    fn clone(&self) -> Self {
        Self(self.0.clone())
    }
}
impl ::core::cmp::PartialEq for NavigationThemeTransition {
    fn eq(&self, other: &Self) -> bool {
        self.0 == other.0
    }
}
impl ::core::cmp::Eq for NavigationThemeTransition {}
impl ::core::fmt::Debug for NavigationThemeTransition {
    fn fmt(&self, f: &mut ::core::fmt::Formatter<'_>) -> ::core::fmt::Result {
        f.debug_tuple("NavigationThemeTransition").field(&self.0).finish()
    }
}
unsafe impl ::windows::core::RuntimeType for NavigationThemeTransition {
    const SIGNATURE : ::windows::core::ConstBuffer = ::windows::core::ConstBuffer::from_slice ( b"rc(Microsoft.UI.Xaml.Media.Animation.NavigationThemeTransition;{d7cfbd3b-0d27-5ea1-beb7-f6b847520dc6})" ) ;
    type DefaultType = ::core::option::Option<Self>;
    fn from_default(from: &Self::DefaultType) -> ::windows::core::Result<Self> {
        from.as_ref().cloned().ok_or(::windows::core::Error::OK)
    }
}
unsafe impl ::windows::core::Vtable for NavigationThemeTransition {
    type Vtable = INavigationThemeTransition_Vtbl;
}
unsafe impl ::windows::core::Interface for NavigationThemeTransition {
    const IID: ::windows::core::GUID =
        <INavigationThemeTransition as ::windows::core::Interface>::IID;
}
impl ::windows::core::RuntimeName for NavigationThemeTransition {
    const NAME: &'static str = "Microsoft.UI.Xaml.Media.Animation.NavigationThemeTransition";
}
::windows::core::interface_hierarchy!(
    NavigationThemeTransition,
    ::windows::core::IUnknown,
    ::windows::core::IInspectable
);
impl ::core::convert::From<NavigationThemeTransition> for Transition {
    fn from(value: NavigationThemeTransition) -> Self {
        ::core::convert::From::from(&value)
    }
}
impl ::core::convert::From<&NavigationThemeTransition> for Transition {
    fn from(value: &NavigationThemeTransition) -> Self {
        ::windows::core::Interface::cast(value).unwrap()
    }
}
impl<'a> ::core::convert::From<&NavigationThemeTransition>
    for ::windows::core::InParam<'a, Transition>
{
    fn from(value: &NavigationThemeTransition) -> Self {
        ::windows::core::InParam::owned(value.into())
    }
}
impl ::core::convert::From<NavigationThemeTransition> for super::super::DependencyObject {
    fn from(value: NavigationThemeTransition) -> Self {
        ::core::convert::From::from(&value)
    }
}
impl ::core::convert::From<&NavigationThemeTransition> for super::super::DependencyObject {
    fn from(value: &NavigationThemeTransition) -> Self {
        ::windows::core::Interface::cast(value).unwrap()
    }
}
impl<'a> ::core::convert::From<&NavigationThemeTransition>
    for ::windows::core::InParam<'a, super::super::DependencyObject>
{
    fn from(value: &NavigationThemeTransition) -> Self {
        ::windows::core::InParam::owned(value.into())
    }
}
unsafe impl ::core::marker::Send for NavigationThemeTransition {}
unsafe impl ::core::marker::Sync for NavigationThemeTransition {}
#[doc = "*Required features: `\"UI_Xaml_Media_Animation\"`*"]
#[repr(transparent)]
pub struct NavigationTransitionInfo(::windows::core::IUnknown);
impl NavigationTransitionInfo {
    pub fn GetValue(
        &self,
        dp: &super::super::DependencyProperty,
    ) -> ::windows::core::Result<::windows::core::IInspectable> {
        let this = &::windows::core::Interface::cast::<super::super::IDependencyObject>(self)?;
        unsafe {
            let mut result__ = ::core::mem::MaybeUninit::zeroed();
            (::windows::core::Vtable::vtable(this).GetValue)(
                ::windows::core::Vtable::as_raw(this),
                ::core::mem::transmute_copy(dp),
                result__.as_mut_ptr(),
            )
            .from_abi::<::windows::core::IInspectable>(result__)
        }
    }
    pub fn SetValue<'a, P0>(
        &self,
        dp: &super::super::DependencyProperty,
        value: P0,
    ) -> ::windows::core::Result<()>
    where
        P0: ::std::convert::Into<::windows::core::InParam<'a, ::windows::core::IInspectable>>,
    {
        let this = &::windows::core::Interface::cast::<super::super::IDependencyObject>(self)?;
        unsafe {
            (::windows::core::Vtable::vtable(this).SetValue)(
                ::windows::core::Vtable::as_raw(this),
                ::core::mem::transmute_copy(dp),
                value.into().abi(),
            )
            .ok()
        }
    }
    pub fn ClearValue(&self, dp: &super::super::DependencyProperty) -> ::windows::core::Result<()> {
        let this = &::windows::core::Interface::cast::<super::super::IDependencyObject>(self)?;
        unsafe {
            (::windows::core::Vtable::vtable(this).ClearValue)(
                ::windows::core::Vtable::as_raw(this),
                ::core::mem::transmute_copy(dp),
            )
            .ok()
        }
    }
    pub fn ReadLocalValue(
        &self,
        dp: &super::super::DependencyProperty,
    ) -> ::windows::core::Result<::windows::core::IInspectable> {
        let this = &::windows::core::Interface::cast::<super::super::IDependencyObject>(self)?;
        unsafe {
            let mut result__ = ::core::mem::MaybeUninit::zeroed();
            (::windows::core::Vtable::vtable(this).ReadLocalValue)(
                ::windows::core::Vtable::as_raw(this),
                ::core::mem::transmute_copy(dp),
                result__.as_mut_ptr(),
            )
            .from_abi::<::windows::core::IInspectable>(result__)
        }
    }
    pub fn GetAnimationBaseValue(
        &self,
        dp: &super::super::DependencyProperty,
    ) -> ::windows::core::Result<::windows::core::IInspectable> {
        let this = &::windows::core::Interface::cast::<super::super::IDependencyObject>(self)?;
        unsafe {
            let mut result__ = ::core::mem::MaybeUninit::zeroed();
            (::windows::core::Vtable::vtable(this).GetAnimationBaseValue)(
                ::windows::core::Vtable::as_raw(this),
                ::core::mem::transmute_copy(dp),
                result__.as_mut_ptr(),
            )
            .from_abi::<::windows::core::IInspectable>(result__)
        }
    }
    pub fn RegisterPropertyChangedCallback(
        &self,
        dp: &super::super::DependencyProperty,
        callback: &super::super::DependencyPropertyChangedCallback,
    ) -> ::windows::core::Result<i64> {
        let this = &::windows::core::Interface::cast::<super::super::IDependencyObject>(self)?;
        unsafe {
            let mut result__ = ::core::mem::MaybeUninit::zeroed();
            (::windows::core::Vtable::vtable(this).RegisterPropertyChangedCallback)(
                ::windows::core::Vtable::as_raw(this),
                ::core::mem::transmute_copy(dp),
                ::core::mem::transmute_copy(callback),
                result__.as_mut_ptr(),
            )
            .from_abi::<i64>(result__)
        }
    }
    pub fn UnregisterPropertyChangedCallback(
        &self,
        dp: &super::super::DependencyProperty,
        token: i64,
    ) -> ::windows::core::Result<()> {
        let this = &::windows::core::Interface::cast::<super::super::IDependencyObject>(self)?;
        unsafe {
            (::windows::core::Vtable::vtable(this).UnregisterPropertyChangedCallback)(
                ::windows::core::Vtable::as_raw(this),
                ::core::mem::transmute_copy(dp),
                token,
            )
            .ok()
        }
    }
    pub fn Dispatcher(&self) -> ::windows::core::Result<::windows::UI::Core::CoreDispatcher> {
        let this = &::windows::core::Interface::cast::<super::super::IDependencyObject>(self)?;
        unsafe {
            let mut result__ = ::core::mem::MaybeUninit::zeroed();
            (::windows::core::Vtable::vtable(this).Dispatcher)(
                ::windows::core::Vtable::as_raw(this),
                result__.as_mut_ptr(),
            )
            .from_abi::<::windows::UI::Core::CoreDispatcher>(result__)
        }
    }
    #[doc = "*Required features: `\"UI_Dispatching\"`*"]
    #[cfg(feature = "UI_Dispatching")]
    pub fn DispatcherQueue(
        &self,
    ) -> ::windows::core::Result<super::super::super::Dispatching::DispatcherQueue> {
        let this = &::windows::core::Interface::cast::<super::super::IDependencyObject>(self)?;
        unsafe {
            let mut result__ = ::core::mem::MaybeUninit::zeroed();
            (::windows::core::Vtable::vtable(this).DispatcherQueue)(
                ::windows::core::Vtable::as_raw(this),
                result__.as_mut_ptr(),
            )
            .from_abi::<super::super::super::Dispatching::DispatcherQueue>(result__)
        }
    }
}
impl ::core::clone::Clone for NavigationTransitionInfo {
    fn clone(&self) -> Self {
        Self(self.0.clone())
    }
}
impl ::core::cmp::PartialEq for NavigationTransitionInfo {
    fn eq(&self, other: &Self) -> bool {
        self.0 == other.0
    }
}
impl ::core::cmp::Eq for NavigationTransitionInfo {}
impl ::core::fmt::Debug for NavigationTransitionInfo {
    fn fmt(&self, f: &mut ::core::fmt::Formatter<'_>) -> ::core::fmt::Result {
        f.debug_tuple("NavigationTransitionInfo").field(&self.0).finish()
    }
}
unsafe impl ::windows::core::RuntimeType for NavigationTransitionInfo {
    const SIGNATURE : ::windows::core::ConstBuffer = ::windows::core::ConstBuffer::from_slice ( b"rc(Microsoft.UI.Xaml.Media.Animation.NavigationTransitionInfo;{25bb17fb-6e15-514e-b278-197537a4d990})" ) ;
    type DefaultType = ::core::option::Option<Self>;
    fn from_default(from: &Self::DefaultType) -> ::windows::core::Result<Self> {
        from.as_ref().cloned().ok_or(::windows::core::Error::OK)
    }
}
unsafe impl ::windows::core::Vtable for NavigationTransitionInfo {
    type Vtable = INavigationTransitionInfo_Vtbl;
}
unsafe impl ::windows::core::Interface for NavigationTransitionInfo {
    const IID: ::windows::core::GUID =
        <INavigationTransitionInfo as ::windows::core::Interface>::IID;
}
impl ::windows::core::RuntimeName for NavigationTransitionInfo {
    const NAME: &'static str = "Microsoft.UI.Xaml.Media.Animation.NavigationTransitionInfo";
}
::windows::core::interface_hierarchy!(
    NavigationTransitionInfo,
    ::windows::core::IUnknown,
    ::windows::core::IInspectable
);
impl ::core::convert::From<NavigationTransitionInfo> for super::super::DependencyObject {
    fn from(value: NavigationTransitionInfo) -> Self {
        ::core::convert::From::from(&value)
    }
}
impl ::core::convert::From<&NavigationTransitionInfo> for super::super::DependencyObject {
    fn from(value: &NavigationTransitionInfo) -> Self {
        ::windows::core::Interface::cast(value).unwrap()
    }
}
impl<'a> ::core::convert::From<&NavigationTransitionInfo>
    for ::windows::core::InParam<'a, super::super::DependencyObject>
{
    fn from(value: &NavigationTransitionInfo) -> Self {
        ::windows::core::InParam::owned(value.into())
    }
}
unsafe impl ::core::marker::Send for NavigationTransitionInfo {}
unsafe impl ::core::marker::Sync for NavigationTransitionInfo {}
#[doc = "*Required features: `\"UI_Xaml_Media_Animation\"`*"]
#[repr(transparent)]
pub struct ObjectAnimationUsingKeyFrames(::windows::core::IUnknown);
impl ObjectAnimationUsingKeyFrames {
    pub fn new() -> ::windows::core::Result<Self> {
        Self::IActivationFactory(|f| f.ActivateInstance::<Self>())
    }
    fn IActivationFactory<
        R,
        F: FnOnce(&::windows::core::IGenericFactory) -> ::windows::core::Result<R>,
    >(
        callback: F,
    ) -> ::windows::core::Result<R> {
        static SHARED: ::windows::core::FactoryCache<
            ObjectAnimationUsingKeyFrames,
            ::windows::core::IGenericFactory,
        > = ::windows::core::FactoryCache::new();
        SHARED.call(callback)
    }
    pub fn GetValue(
        &self,
        dp: &super::super::DependencyProperty,
    ) -> ::windows::core::Result<::windows::core::IInspectable> {
        let this = &::windows::core::Interface::cast::<super::super::IDependencyObject>(self)?;
        unsafe {
            let mut result__ = ::core::mem::MaybeUninit::zeroed();
            (::windows::core::Vtable::vtable(this).GetValue)(
                ::windows::core::Vtable::as_raw(this),
                ::core::mem::transmute_copy(dp),
                result__.as_mut_ptr(),
            )
            .from_abi::<::windows::core::IInspectable>(result__)
        }
    }
    pub fn SetValue<'a, P0>(
        &self,
        dp: &super::super::DependencyProperty,
        value: P0,
    ) -> ::windows::core::Result<()>
    where
        P0: ::std::convert::Into<::windows::core::InParam<'a, ::windows::core::IInspectable>>,
    {
        let this = &::windows::core::Interface::cast::<super::super::IDependencyObject>(self)?;
        unsafe {
            (::windows::core::Vtable::vtable(this).SetValue)(
                ::windows::core::Vtable::as_raw(this),
                ::core::mem::transmute_copy(dp),
                value.into().abi(),
            )
            .ok()
        }
    }
    pub fn ClearValue(&self, dp: &super::super::DependencyProperty) -> ::windows::core::Result<()> {
        let this = &::windows::core::Interface::cast::<super::super::IDependencyObject>(self)?;
        unsafe {
            (::windows::core::Vtable::vtable(this).ClearValue)(
                ::windows::core::Vtable::as_raw(this),
                ::core::mem::transmute_copy(dp),
            )
            .ok()
        }
    }
    pub fn ReadLocalValue(
        &self,
        dp: &super::super::DependencyProperty,
    ) -> ::windows::core::Result<::windows::core::IInspectable> {
        let this = &::windows::core::Interface::cast::<super::super::IDependencyObject>(self)?;
        unsafe {
            let mut result__ = ::core::mem::MaybeUninit::zeroed();
            (::windows::core::Vtable::vtable(this).ReadLocalValue)(
                ::windows::core::Vtable::as_raw(this),
                ::core::mem::transmute_copy(dp),
                result__.as_mut_ptr(),
            )
            .from_abi::<::windows::core::IInspectable>(result__)
        }
    }
    pub fn GetAnimationBaseValue(
        &self,
        dp: &super::super::DependencyProperty,
    ) -> ::windows::core::Result<::windows::core::IInspectable> {
        let this = &::windows::core::Interface::cast::<super::super::IDependencyObject>(self)?;
        unsafe {
            let mut result__ = ::core::mem::MaybeUninit::zeroed();
            (::windows::core::Vtable::vtable(this).GetAnimationBaseValue)(
                ::windows::core::Vtable::as_raw(this),
                ::core::mem::transmute_copy(dp),
                result__.as_mut_ptr(),
            )
            .from_abi::<::windows::core::IInspectable>(result__)
        }
    }
    pub fn RegisterPropertyChangedCallback(
        &self,
        dp: &super::super::DependencyProperty,
        callback: &super::super::DependencyPropertyChangedCallback,
    ) -> ::windows::core::Result<i64> {
        let this = &::windows::core::Interface::cast::<super::super::IDependencyObject>(self)?;
        unsafe {
            let mut result__ = ::core::mem::MaybeUninit::zeroed();
            (::windows::core::Vtable::vtable(this).RegisterPropertyChangedCallback)(
                ::windows::core::Vtable::as_raw(this),
                ::core::mem::transmute_copy(dp),
                ::core::mem::transmute_copy(callback),
                result__.as_mut_ptr(),
            )
            .from_abi::<i64>(result__)
        }
    }
    pub fn UnregisterPropertyChangedCallback(
        &self,
        dp: &super::super::DependencyProperty,
        token: i64,
    ) -> ::windows::core::Result<()> {
        let this = &::windows::core::Interface::cast::<super::super::IDependencyObject>(self)?;
        unsafe {
            (::windows::core::Vtable::vtable(this).UnregisterPropertyChangedCallback)(
                ::windows::core::Vtable::as_raw(this),
                ::core::mem::transmute_copy(dp),
                token,
            )
            .ok()
        }
    }
    pub fn Dispatcher(&self) -> ::windows::core::Result<::windows::UI::Core::CoreDispatcher> {
        let this = &::windows::core::Interface::cast::<super::super::IDependencyObject>(self)?;
        unsafe {
            let mut result__ = ::core::mem::MaybeUninit::zeroed();
            (::windows::core::Vtable::vtable(this).Dispatcher)(
                ::windows::core::Vtable::as_raw(this),
                result__.as_mut_ptr(),
            )
            .from_abi::<::windows::UI::Core::CoreDispatcher>(result__)
        }
    }
    #[doc = "*Required features: `\"UI_Dispatching\"`*"]
    #[cfg(feature = "UI_Dispatching")]
    pub fn DispatcherQueue(
        &self,
    ) -> ::windows::core::Result<super::super::super::Dispatching::DispatcherQueue> {
        let this = &::windows::core::Interface::cast::<super::super::IDependencyObject>(self)?;
        unsafe {
            let mut result__ = ::core::mem::MaybeUninit::zeroed();
            (::windows::core::Vtable::vtable(this).DispatcherQueue)(
                ::windows::core::Vtable::as_raw(this),
                result__.as_mut_ptr(),
            )
            .from_abi::<super::super::super::Dispatching::DispatcherQueue>(result__)
        }
    }
    pub fn KeyFrames(&self) -> ::windows::core::Result<ObjectKeyFrameCollection> {
        let this = self;
        unsafe {
            let mut result__ = ::core::mem::MaybeUninit::zeroed();
            (::windows::core::Vtable::vtable(this).KeyFrames)(
                ::windows::core::Vtable::as_raw(this),
                result__.as_mut_ptr(),
            )
            .from_abi::<ObjectKeyFrameCollection>(result__)
        }
    }
    pub fn EnableDependentAnimation(&self) -> ::windows::core::Result<bool> {
        let this = self;
        unsafe {
            let mut result__ = ::core::mem::MaybeUninit::zeroed();
            (::windows::core::Vtable::vtable(this).EnableDependentAnimation)(
                ::windows::core::Vtable::as_raw(this),
                result__.as_mut_ptr(),
            )
            .from_abi::<bool>(result__)
        }
    }
    pub fn SetEnableDependentAnimation(&self, value: bool) -> ::windows::core::Result<()> {
        let this = self;
        unsafe {
            (::windows::core::Vtable::vtable(this).SetEnableDependentAnimation)(
                ::windows::core::Vtable::as_raw(this),
                value,
            )
            .ok()
        }
    }
    pub fn EnableDependentAnimationProperty(
    ) -> ::windows::core::Result<super::super::DependencyProperty> {
        Self::IObjectAnimationUsingKeyFramesStatics(|this| unsafe {
            let mut result__ = ::core::mem::MaybeUninit::zeroed();
            (::windows::core::Vtable::vtable(this).EnableDependentAnimationProperty)(
                ::windows::core::Vtable::as_raw(this),
                result__.as_mut_ptr(),
            )
            .from_abi::<super::super::DependencyProperty>(result__)
        })
    }
    pub fn AutoReverse(&self) -> ::windows::core::Result<bool> {
        let this = &::windows::core::Interface::cast::<ITimeline>(self)?;
        unsafe {
            let mut result__ = ::core::mem::MaybeUninit::zeroed();
            (::windows::core::Vtable::vtable(this).AutoReverse)(
                ::windows::core::Vtable::as_raw(this),
                result__.as_mut_ptr(),
            )
            .from_abi::<bool>(result__)
        }
    }
    pub fn SetAutoReverse(&self, value: bool) -> ::windows::core::Result<()> {
        let this = &::windows::core::Interface::cast::<ITimeline>(self)?;
        unsafe {
            (::windows::core::Vtable::vtable(this).SetAutoReverse)(
                ::windows::core::Vtable::as_raw(this),
                value,
            )
            .ok()
        }
    }
    pub fn BeginTime(
        &self,
    ) -> ::windows::core::Result<::windows::Foundation::IReference<::windows::Foundation::TimeSpan>>
    {
        let this = &::windows::core::Interface::cast::<ITimeline>(self)?;
        unsafe {
            let mut result__ = ::core::mem::MaybeUninit::zeroed();
            (::windows::core::Vtable::vtable(this).BeginTime)(
                ::windows::core::Vtable::as_raw(this),
                result__.as_mut_ptr(),
            )
            .from_abi::<::windows::Foundation::IReference<::windows::Foundation::TimeSpan>>(
                result__,
            )
        }
    }
    pub fn SetBeginTime<'a, P0, E0>(&self, value: P0) -> ::windows::core::Result<()>
    where
        P0: ::std::convert::TryInto<
            ::windows::core::InParam<
                'a,
                ::windows::Foundation::IReference<::windows::Foundation::TimeSpan>,
            >,
            Error = E0,
        >,
        E0: ::std::convert::Into<::windows::core::Error>,
    {
        let this = &::windows::core::Interface::cast::<ITimeline>(self)?;
        unsafe {
            (::windows::core::Vtable::vtable(this).SetBeginTime)(
                ::windows::core::Vtable::as_raw(this),
                value.try_into().map_err(|e| e.into())?.abi(),
            )
            .ok()
        }
    }
    pub fn Duration(&self) -> ::windows::core::Result<super::super::Duration> {
        let this = &::windows::core::Interface::cast::<ITimeline>(self)?;
        unsafe {
            let mut result__ = ::core::mem::MaybeUninit::zeroed();
            (::windows::core::Vtable::vtable(this).Duration)(
                ::windows::core::Vtable::as_raw(this),
                result__.as_mut_ptr(),
            )
            .from_abi::<super::super::Duration>(result__)
        }
    }
    pub fn SetDuration(&self, value: super::super::Duration) -> ::windows::core::Result<()> {
        let this = &::windows::core::Interface::cast::<ITimeline>(self)?;
        unsafe {
            (::windows::core::Vtable::vtable(this).SetDuration)(
                ::windows::core::Vtable::as_raw(this),
                value,
            )
            .ok()
        }
    }
    pub fn SpeedRatio(&self) -> ::windows::core::Result<f64> {
        let this = &::windows::core::Interface::cast::<ITimeline>(self)?;
        unsafe {
            let mut result__ = ::core::mem::MaybeUninit::zeroed();
            (::windows::core::Vtable::vtable(this).SpeedRatio)(
                ::windows::core::Vtable::as_raw(this),
                result__.as_mut_ptr(),
            )
            .from_abi::<f64>(result__)
        }
    }
    pub fn SetSpeedRatio(&self, value: f64) -> ::windows::core::Result<()> {
        let this = &::windows::core::Interface::cast::<ITimeline>(self)?;
        unsafe {
            (::windows::core::Vtable::vtable(this).SetSpeedRatio)(
                ::windows::core::Vtable::as_raw(this),
                value,
            )
            .ok()
        }
    }
    pub fn FillBehavior(&self) -> ::windows::core::Result<FillBehavior> {
        let this = &::windows::core::Interface::cast::<ITimeline>(self)?;
        unsafe {
            let mut result__ = ::core::mem::MaybeUninit::zeroed();
            (::windows::core::Vtable::vtable(this).FillBehavior)(
                ::windows::core::Vtable::as_raw(this),
                result__.as_mut_ptr(),
            )
            .from_abi::<FillBehavior>(result__)
        }
    }
    pub fn SetFillBehavior(&self, value: FillBehavior) -> ::windows::core::Result<()> {
        let this = &::windows::core::Interface::cast::<ITimeline>(self)?;
        unsafe {
            (::windows::core::Vtable::vtable(this).SetFillBehavior)(
                ::windows::core::Vtable::as_raw(this),
                value,
            )
            .ok()
        }
    }
    pub fn RepeatBehavior(&self) -> ::windows::core::Result<RepeatBehavior> {
        let this = &::windows::core::Interface::cast::<ITimeline>(self)?;
        unsafe {
            let mut result__ = ::core::mem::MaybeUninit::zeroed();
            (::windows::core::Vtable::vtable(this).RepeatBehavior)(
                ::windows::core::Vtable::as_raw(this),
                result__.as_mut_ptr(),
            )
            .from_abi::<RepeatBehavior>(result__)
        }
    }
    pub fn SetRepeatBehavior(&self, value: RepeatBehavior) -> ::windows::core::Result<()> {
        let this = &::windows::core::Interface::cast::<ITimeline>(self)?;
        unsafe {
            (::windows::core::Vtable::vtable(this).SetRepeatBehavior)(
                ::windows::core::Vtable::as_raw(this),
                value,
            )
            .ok()
        }
    }
    pub fn Completed(
        &self,
        handler: &::windows::Foundation::EventHandler<::windows::core::IInspectable>,
    ) -> ::windows::core::Result<::windows::Foundation::EventRegistrationToken> {
        let this = &::windows::core::Interface::cast::<ITimeline>(self)?;
        unsafe {
            let mut result__ = ::core::mem::MaybeUninit::zeroed();
            (::windows::core::Vtable::vtable(this).Completed)(
                ::windows::core::Vtable::as_raw(this),
                ::core::mem::transmute_copy(handler),
                result__.as_mut_ptr(),
            )
            .from_abi::<::windows::Foundation::EventRegistrationToken>(result__)
        }
    }
    pub fn RemoveCompleted(
        &self,
        token: ::windows::Foundation::EventRegistrationToken,
    ) -> ::windows::core::Result<()> {
        let this = &::windows::core::Interface::cast::<ITimeline>(self)?;
        unsafe {
            (::windows::core::Vtable::vtable(this).RemoveCompleted)(
                ::windows::core::Vtable::as_raw(this),
                token,
            )
            .ok()
        }
    }
    #[doc(hidden)]
    pub fn IObjectAnimationUsingKeyFramesStatics<
        R,
        F: FnOnce(&IObjectAnimationUsingKeyFramesStatics) -> ::windows::core::Result<R>,
    >(
        callback: F,
    ) -> ::windows::core::Result<R> {
        static SHARED: ::windows::core::FactoryCache<
            ObjectAnimationUsingKeyFrames,
            IObjectAnimationUsingKeyFramesStatics,
        > = ::windows::core::FactoryCache::new();
        SHARED.call(callback)
    }
}
impl ::core::clone::Clone for ObjectAnimationUsingKeyFrames {
    fn clone(&self) -> Self {
        Self(self.0.clone())
    }
}
impl ::core::cmp::PartialEq for ObjectAnimationUsingKeyFrames {
    fn eq(&self, other: &Self) -> bool {
        self.0 == other.0
    }
}
impl ::core::cmp::Eq for ObjectAnimationUsingKeyFrames {}
impl ::core::fmt::Debug for ObjectAnimationUsingKeyFrames {
    fn fmt(&self, f: &mut ::core::fmt::Formatter<'_>) -> ::core::fmt::Result {
        f.debug_tuple("ObjectAnimationUsingKeyFrames").field(&self.0).finish()
    }
}
unsafe impl ::windows::core::RuntimeType for ObjectAnimationUsingKeyFrames {
    const SIGNATURE : ::windows::core::ConstBuffer = ::windows::core::ConstBuffer::from_slice ( b"rc(Microsoft.UI.Xaml.Media.Animation.ObjectAnimationUsingKeyFrames;{aa08dc4c-0b03-5c0a-b084-d95d272b2f0d})" ) ;
    type DefaultType = ::core::option::Option<Self>;
    fn from_default(from: &Self::DefaultType) -> ::windows::core::Result<Self> {
        from.as_ref().cloned().ok_or(::windows::core::Error::OK)
    }
}
unsafe impl ::windows::core::Vtable for ObjectAnimationUsingKeyFrames {
    type Vtable = IObjectAnimationUsingKeyFrames_Vtbl;
}
unsafe impl ::windows::core::Interface for ObjectAnimationUsingKeyFrames {
    const IID: ::windows::core::GUID =
        <IObjectAnimationUsingKeyFrames as ::windows::core::Interface>::IID;
}
impl ::windows::core::RuntimeName for ObjectAnimationUsingKeyFrames {
    const NAME: &'static str = "Microsoft.UI.Xaml.Media.Animation.ObjectAnimationUsingKeyFrames";
}
::windows::core::interface_hierarchy!(
    ObjectAnimationUsingKeyFrames,
    ::windows::core::IUnknown,
    ::windows::core::IInspectable
);
impl ::core::convert::From<ObjectAnimationUsingKeyFrames> for Timeline {
    fn from(value: ObjectAnimationUsingKeyFrames) -> Self {
        ::core::convert::From::from(&value)
    }
}
impl ::core::convert::From<&ObjectAnimationUsingKeyFrames> for Timeline {
    fn from(value: &ObjectAnimationUsingKeyFrames) -> Self {
        ::windows::core::Interface::cast(value).unwrap()
    }
}
impl<'a> ::core::convert::From<&ObjectAnimationUsingKeyFrames>
    for ::windows::core::InParam<'a, Timeline>
{
    fn from(value: &ObjectAnimationUsingKeyFrames) -> Self {
        ::windows::core::InParam::owned(value.into())
    }
}
impl ::core::convert::From<ObjectAnimationUsingKeyFrames> for super::super::DependencyObject {
    fn from(value: ObjectAnimationUsingKeyFrames) -> Self {
        ::core::convert::From::from(&value)
    }
}
impl ::core::convert::From<&ObjectAnimationUsingKeyFrames> for super::super::DependencyObject {
    fn from(value: &ObjectAnimationUsingKeyFrames) -> Self {
        ::windows::core::Interface::cast(value).unwrap()
    }
}
impl<'a> ::core::convert::From<&ObjectAnimationUsingKeyFrames>
    for ::windows::core::InParam<'a, super::super::DependencyObject>
{
    fn from(value: &ObjectAnimationUsingKeyFrames) -> Self {
        ::windows::core::InParam::owned(value.into())
    }
}
unsafe impl ::core::marker::Send for ObjectAnimationUsingKeyFrames {}
unsafe impl ::core::marker::Sync for ObjectAnimationUsingKeyFrames {}
#[doc = "*Required features: `\"UI_Xaml_Media_Animation\"`*"]
#[repr(transparent)]
pub struct ObjectKeyFrame(::windows::core::IUnknown);
impl ObjectKeyFrame {
    pub fn GetValue(
        &self,
        dp: &super::super::DependencyProperty,
    ) -> ::windows::core::Result<::windows::core::IInspectable> {
        let this = &::windows::core::Interface::cast::<super::super::IDependencyObject>(self)?;
        unsafe {
            let mut result__ = ::core::mem::MaybeUninit::zeroed();
            (::windows::core::Vtable::vtable(this).GetValue)(
                ::windows::core::Vtable::as_raw(this),
                ::core::mem::transmute_copy(dp),
                result__.as_mut_ptr(),
            )
            .from_abi::<::windows::core::IInspectable>(result__)
        }
    }
    pub fn SetValue<'a, P0>(
        &self,
        dp: &super::super::DependencyProperty,
        value: P0,
    ) -> ::windows::core::Result<()>
    where
        P0: ::std::convert::Into<::windows::core::InParam<'a, ::windows::core::IInspectable>>,
    {
        let this = &::windows::core::Interface::cast::<super::super::IDependencyObject>(self)?;
        unsafe {
            (::windows::core::Vtable::vtable(this).SetValue)(
                ::windows::core::Vtable::as_raw(this),
                ::core::mem::transmute_copy(dp),
                value.into().abi(),
            )
            .ok()
        }
    }
    pub fn ClearValue(&self, dp: &super::super::DependencyProperty) -> ::windows::core::Result<()> {
        let this = &::windows::core::Interface::cast::<super::super::IDependencyObject>(self)?;
        unsafe {
            (::windows::core::Vtable::vtable(this).ClearValue)(
                ::windows::core::Vtable::as_raw(this),
                ::core::mem::transmute_copy(dp),
            )
            .ok()
        }
    }
    pub fn ReadLocalValue(
        &self,
        dp: &super::super::DependencyProperty,
    ) -> ::windows::core::Result<::windows::core::IInspectable> {
        let this = &::windows::core::Interface::cast::<super::super::IDependencyObject>(self)?;
        unsafe {
            let mut result__ = ::core::mem::MaybeUninit::zeroed();
            (::windows::core::Vtable::vtable(this).ReadLocalValue)(
                ::windows::core::Vtable::as_raw(this),
                ::core::mem::transmute_copy(dp),
                result__.as_mut_ptr(),
            )
            .from_abi::<::windows::core::IInspectable>(result__)
        }
    }
    pub fn GetAnimationBaseValue(
        &self,
        dp: &super::super::DependencyProperty,
    ) -> ::windows::core::Result<::windows::core::IInspectable> {
        let this = &::windows::core::Interface::cast::<super::super::IDependencyObject>(self)?;
        unsafe {
            let mut result__ = ::core::mem::MaybeUninit::zeroed();
            (::windows::core::Vtable::vtable(this).GetAnimationBaseValue)(
                ::windows::core::Vtable::as_raw(this),
                ::core::mem::transmute_copy(dp),
                result__.as_mut_ptr(),
            )
            .from_abi::<::windows::core::IInspectable>(result__)
        }
    }
    pub fn RegisterPropertyChangedCallback(
        &self,
        dp: &super::super::DependencyProperty,
        callback: &super::super::DependencyPropertyChangedCallback,
    ) -> ::windows::core::Result<i64> {
        let this = &::windows::core::Interface::cast::<super::super::IDependencyObject>(self)?;
        unsafe {
            let mut result__ = ::core::mem::MaybeUninit::zeroed();
            (::windows::core::Vtable::vtable(this).RegisterPropertyChangedCallback)(
                ::windows::core::Vtable::as_raw(this),
                ::core::mem::transmute_copy(dp),
                ::core::mem::transmute_copy(callback),
                result__.as_mut_ptr(),
            )
            .from_abi::<i64>(result__)
        }
    }
    pub fn UnregisterPropertyChangedCallback(
        &self,
        dp: &super::super::DependencyProperty,
        token: i64,
    ) -> ::windows::core::Result<()> {
        let this = &::windows::core::Interface::cast::<super::super::IDependencyObject>(self)?;
        unsafe {
            (::windows::core::Vtable::vtable(this).UnregisterPropertyChangedCallback)(
                ::windows::core::Vtable::as_raw(this),
                ::core::mem::transmute_copy(dp),
                token,
            )
            .ok()
        }
    }
    pub fn Dispatcher(&self) -> ::windows::core::Result<::windows::UI::Core::CoreDispatcher> {
        let this = &::windows::core::Interface::cast::<super::super::IDependencyObject>(self)?;
        unsafe {
            let mut result__ = ::core::mem::MaybeUninit::zeroed();
            (::windows::core::Vtable::vtable(this).Dispatcher)(
                ::windows::core::Vtable::as_raw(this),
                result__.as_mut_ptr(),
            )
            .from_abi::<::windows::UI::Core::CoreDispatcher>(result__)
        }
    }
    #[doc = "*Required features: `\"UI_Dispatching\"`*"]
    #[cfg(feature = "UI_Dispatching")]
    pub fn DispatcherQueue(
        &self,
    ) -> ::windows::core::Result<super::super::super::Dispatching::DispatcherQueue> {
        let this = &::windows::core::Interface::cast::<super::super::IDependencyObject>(self)?;
        unsafe {
            let mut result__ = ::core::mem::MaybeUninit::zeroed();
            (::windows::core::Vtable::vtable(this).DispatcherQueue)(
                ::windows::core::Vtable::as_raw(this),
                result__.as_mut_ptr(),
            )
            .from_abi::<super::super::super::Dispatching::DispatcherQueue>(result__)
        }
    }
    pub fn Value(&self) -> ::windows::core::Result<::windows::core::IInspectable> {
        let this = self;
        unsafe {
            let mut result__ = ::core::mem::MaybeUninit::zeroed();
            (::windows::core::Vtable::vtable(this).Value)(
                ::windows::core::Vtable::as_raw(this),
                result__.as_mut_ptr(),
            )
            .from_abi::<::windows::core::IInspectable>(result__)
        }
    }
    pub fn SetValue2<'a, P0>(&self, value: P0) -> ::windows::core::Result<()>
    where
        P0: ::std::convert::Into<::windows::core::InParam<'a, ::windows::core::IInspectable>>,
    {
        let this = self;
        unsafe {
            (::windows::core::Vtable::vtable(this).SetValue)(
                ::windows::core::Vtable::as_raw(this),
                value.into().abi(),
            )
            .ok()
        }
    }
    pub fn KeyTime(&self) -> ::windows::core::Result<KeyTime> {
        let this = self;
        unsafe {
            let mut result__ = ::core::mem::MaybeUninit::zeroed();
            (::windows::core::Vtable::vtable(this).KeyTime)(
                ::windows::core::Vtable::as_raw(this),
                result__.as_mut_ptr(),
            )
            .from_abi::<KeyTime>(result__)
        }
    }
    pub fn SetKeyTime(&self, value: KeyTime) -> ::windows::core::Result<()> {
        let this = self;
        unsafe {
            (::windows::core::Vtable::vtable(this).SetKeyTime)(
                ::windows::core::Vtable::as_raw(this),
                value,
            )
            .ok()
        }
    }
    pub fn ValueProperty() -> ::windows::core::Result<super::super::DependencyProperty> {
        Self::IObjectKeyFrameStatics(|this| unsafe {
            let mut result__ = ::core::mem::MaybeUninit::zeroed();
            (::windows::core::Vtable::vtable(this).ValueProperty)(
                ::windows::core::Vtable::as_raw(this),
                result__.as_mut_ptr(),
            )
            .from_abi::<super::super::DependencyProperty>(result__)
        })
    }
    pub fn KeyTimeProperty() -> ::windows::core::Result<super::super::DependencyProperty> {
        Self::IObjectKeyFrameStatics(|this| unsafe {
            let mut result__ = ::core::mem::MaybeUninit::zeroed();
            (::windows::core::Vtable::vtable(this).KeyTimeProperty)(
                ::windows::core::Vtable::as_raw(this),
                result__.as_mut_ptr(),
            )
            .from_abi::<super::super::DependencyProperty>(result__)
        })
    }
    #[doc(hidden)]
    pub fn IObjectKeyFrameStatics<
        R,
        F: FnOnce(&IObjectKeyFrameStatics) -> ::windows::core::Result<R>,
    >(
        callback: F,
    ) -> ::windows::core::Result<R> {
        static SHARED: ::windows::core::FactoryCache<ObjectKeyFrame, IObjectKeyFrameStatics> =
            ::windows::core::FactoryCache::new();
        SHARED.call(callback)
    }
}
impl ::core::clone::Clone for ObjectKeyFrame {
    fn clone(&self) -> Self {
        Self(self.0.clone())
    }
}
impl ::core::cmp::PartialEq for ObjectKeyFrame {
    fn eq(&self, other: &Self) -> bool {
        self.0 == other.0
    }
}
impl ::core::cmp::Eq for ObjectKeyFrame {}
impl ::core::fmt::Debug for ObjectKeyFrame {
    fn fmt(&self, f: &mut ::core::fmt::Formatter<'_>) -> ::core::fmt::Result {
        f.debug_tuple("ObjectKeyFrame").field(&self.0).finish()
    }
}
unsafe impl ::windows::core::RuntimeType for ObjectKeyFrame {
    const SIGNATURE : ::windows::core::ConstBuffer = ::windows::core::ConstBuffer::from_slice ( b"rc(Microsoft.UI.Xaml.Media.Animation.ObjectKeyFrame;{c5a9f65b-fc69-5a88-a797-34f46d761381})" ) ;
    type DefaultType = ::core::option::Option<Self>;
    fn from_default(from: &Self::DefaultType) -> ::windows::core::Result<Self> {
        from.as_ref().cloned().ok_or(::windows::core::Error::OK)
    }
}
unsafe impl ::windows::core::Vtable for ObjectKeyFrame {
    type Vtable = IObjectKeyFrame_Vtbl;
}
unsafe impl ::windows::core::Interface for ObjectKeyFrame {
    const IID: ::windows::core::GUID = <IObjectKeyFrame as ::windows::core::Interface>::IID;
}
impl ::windows::core::RuntimeName for ObjectKeyFrame {
    const NAME: &'static str = "Microsoft.UI.Xaml.Media.Animation.ObjectKeyFrame";
}
::windows::core::interface_hierarchy!(
    ObjectKeyFrame,
    ::windows::core::IUnknown,
    ::windows::core::IInspectable
);
impl ::core::convert::From<ObjectKeyFrame> for super::super::DependencyObject {
    fn from(value: ObjectKeyFrame) -> Self {
        ::core::convert::From::from(&value)
    }
}
impl ::core::convert::From<&ObjectKeyFrame> for super::super::DependencyObject {
    fn from(value: &ObjectKeyFrame) -> Self {
        ::windows::core::Interface::cast(value).unwrap()
    }
}
impl<'a> ::core::convert::From<&ObjectKeyFrame>
    for ::windows::core::InParam<'a, super::super::DependencyObject>
{
    fn from(value: &ObjectKeyFrame) -> Self {
        ::windows::core::InParam::owned(value.into())
    }
}
unsafe impl ::core::marker::Send for ObjectKeyFrame {}
unsafe impl ::core::marker::Sync for ObjectKeyFrame {}
#[doc = "*Required features: `\"UI_Xaml_Media_Animation\"`*"]
#[repr(transparent)]
pub struct ObjectKeyFrameCollection(::windows::core::IUnknown);
impl ObjectKeyFrameCollection {
    pub fn new() -> ::windows::core::Result<Self> {
        Self::IActivationFactory(|f| f.ActivateInstance::<Self>())
    }
    fn IActivationFactory<
        R,
        F: FnOnce(&::windows::core::IGenericFactory) -> ::windows::core::Result<R>,
    >(
        callback: F,
    ) -> ::windows::core::Result<R> {
        static SHARED: ::windows::core::FactoryCache<
            ObjectKeyFrameCollection,
            ::windows::core::IGenericFactory,
        > = ::windows::core::FactoryCache::new();
        SHARED.call(callback)
    }
    pub fn First(
        &self,
    ) -> ::windows::core::Result<::windows::Foundation::Collections::IIterator<ObjectKeyFrame>>
    {
        let this = &::windows::core::Interface::cast::<
            ::windows::Foundation::Collections::IIterable<ObjectKeyFrame>,
        >(self)?;
        unsafe {
            let mut result__ = ::core::mem::MaybeUninit::zeroed();
            (::windows::core::Vtable::vtable(this).First)(
                ::windows::core::Vtable::as_raw(this),
                result__.as_mut_ptr(),
            )
            .from_abi::<::windows::Foundation::Collections::IIterator<ObjectKeyFrame>>(result__)
        }
    }
    pub fn GetAt(&self, index: u32) -> ::windows::core::Result<ObjectKeyFrame> {
        let this = self;
        unsafe {
            let mut result__ = ::core::mem::MaybeUninit::zeroed();
            (::windows::core::Vtable::vtable(this).GetAt)(
                ::windows::core::Vtable::as_raw(this),
                index,
                result__.as_mut_ptr(),
            )
            .from_abi::<ObjectKeyFrame>(result__)
        }
    }
    pub fn Size(&self) -> ::windows::core::Result<u32> {
        let this = self;
        unsafe {
            let mut result__ = ::core::mem::MaybeUninit::zeroed();
            (::windows::core::Vtable::vtable(this).Size)(
                ::windows::core::Vtable::as_raw(this),
                result__.as_mut_ptr(),
            )
            .from_abi::<u32>(result__)
        }
    }
    pub fn GetView(
        &self,
    ) -> ::windows::core::Result<::windows::Foundation::Collections::IVectorView<ObjectKeyFrame>>
    {
        let this = self;
        unsafe {
            let mut result__ = ::core::mem::MaybeUninit::zeroed();
            (::windows::core::Vtable::vtable(this).GetView)(
                ::windows::core::Vtable::as_raw(this),
                result__.as_mut_ptr(),
            )
            .from_abi::<::windows::Foundation::Collections::IVectorView<ObjectKeyFrame>>(result__)
        }
    }
    pub fn IndexOf<'a, P0>(&self, value: P0, index: &mut u32) -> ::windows::core::Result<bool>
    where
        P0: ::std::convert::Into<::windows::core::InParam<'a, ObjectKeyFrame>>,
    {
        let this = self;
        unsafe {
            let mut result__ = ::core::mem::MaybeUninit::zeroed();
            (::windows::core::Vtable::vtable(this).IndexOf)(
                ::windows::core::Vtable::as_raw(this),
                value.into().abi(),
                index,
                result__.as_mut_ptr(),
            )
            .from_abi::<bool>(result__)
        }
    }
    pub fn SetAt<'a, P0>(&self, index: u32, value: P0) -> ::windows::core::Result<()>
    where
        P0: ::std::convert::Into<::windows::core::InParam<'a, ObjectKeyFrame>>,
    {
        let this = self;
        unsafe {
            (::windows::core::Vtable::vtable(this).SetAt)(
                ::windows::core::Vtable::as_raw(this),
                index,
                value.into().abi(),
            )
            .ok()
        }
    }
    pub fn InsertAt<'a, P0>(&self, index: u32, value: P0) -> ::windows::core::Result<()>
    where
        P0: ::std::convert::Into<::windows::core::InParam<'a, ObjectKeyFrame>>,
    {
        let this = self;
        unsafe {
            (::windows::core::Vtable::vtable(this).InsertAt)(
                ::windows::core::Vtable::as_raw(this),
                index,
                value.into().abi(),
            )
            .ok()
        }
    }
    pub fn RemoveAt(&self, index: u32) -> ::windows::core::Result<()> {
        let this = self;
        unsafe {
            (::windows::core::Vtable::vtable(this).RemoveAt)(
                ::windows::core::Vtable::as_raw(this),
                index,
            )
            .ok()
        }
    }
    pub fn Append<'a, P0>(&self, value: P0) -> ::windows::core::Result<()>
    where
        P0: ::std::convert::Into<::windows::core::InParam<'a, ObjectKeyFrame>>,
    {
        let this = self;
        unsafe {
            (::windows::core::Vtable::vtable(this).Append)(
                ::windows::core::Vtable::as_raw(this),
                value.into().abi(),
            )
            .ok()
        }
    }
    pub fn RemoveAtEnd(&self) -> ::windows::core::Result<()> {
        let this = self;
        unsafe {
            (::windows::core::Vtable::vtable(this).RemoveAtEnd)(::windows::core::Vtable::as_raw(
                this,
            ))
            .ok()
        }
    }
    pub fn Clear(&self) -> ::windows::core::Result<()> {
        let this = self;
        unsafe {
            (::windows::core::Vtable::vtable(this).Clear)(::windows::core::Vtable::as_raw(this))
                .ok()
        }
    }
    pub fn GetMany(
        &self,
        startindex: u32,
        items: &mut [::core::option::Option<ObjectKeyFrame>],
    ) -> ::windows::core::Result<u32> {
        let this = self;
        unsafe {
            let mut result__ = ::core::mem::MaybeUninit::zeroed();
            (::windows::core::Vtable::vtable(this).GetMany)(
                ::windows::core::Vtable::as_raw(this),
                startindex,
                items.len() as u32,
                ::core::mem::transmute_copy(&items),
                result__.as_mut_ptr(),
            )
            .from_abi::<u32>(result__)
        }
    }
    pub fn ReplaceAll(
        &self,
        items: &[::core::option::Option<ObjectKeyFrame>],
    ) -> ::windows::core::Result<()> {
        let this = self;
        unsafe {
            (::windows::core::Vtable::vtable(this).ReplaceAll)(
                ::windows::core::Vtable::as_raw(this),
                items.len() as u32,
                ::core::mem::transmute(items.as_ptr()),
            )
            .ok()
        }
    }
}
impl ::core::clone::Clone for ObjectKeyFrameCollection {
    fn clone(&self) -> Self {
        Self(self.0.clone())
    }
}
impl ::core::cmp::PartialEq for ObjectKeyFrameCollection {
    fn eq(&self, other: &Self) -> bool {
        self.0 == other.0
    }
}
impl ::core::cmp::Eq for ObjectKeyFrameCollection {}
impl ::core::fmt::Debug for ObjectKeyFrameCollection {
    fn fmt(&self, f: &mut ::core::fmt::Formatter<'_>) -> ::core::fmt::Result {
        f.debug_tuple("ObjectKeyFrameCollection").field(&self.0).finish()
    }
}
unsafe impl ::windows::core::RuntimeType for ObjectKeyFrameCollection {
    const SIGNATURE : ::windows::core::ConstBuffer = ::windows::core::ConstBuffer::from_slice ( b"rc(Microsoft.UI.Xaml.Media.Animation.ObjectKeyFrameCollection;pinterface({913337e9-11a1-4345-a3a2-4e7f956e222d};rc(Microsoft.UI.Xaml.Media.Animation.ObjectKeyFrame;{c5a9f65b-fc69-5a88-a797-34f46d761381})))" ) ;
    type DefaultType = ::core::option::Option<Self>;
    fn from_default(from: &Self::DefaultType) -> ::windows::core::Result<Self> {
        from.as_ref().cloned().ok_or(::windows::core::Error::OK)
    }
}
unsafe impl ::windows::core::Vtable for ObjectKeyFrameCollection {
    type Vtable = ::windows::Foundation::Collections::IVector_Vtbl<ObjectKeyFrame>;
}
unsafe impl ::windows::core::Interface for ObjectKeyFrameCollection {
    const IID : ::windows::core::GUID = < ::windows::Foundation::Collections:: IVector :: < ObjectKeyFrame > as::windows::core::Interface >::IID ;
}
impl ::windows::core::RuntimeName for ObjectKeyFrameCollection {
    const NAME: &'static str = "Microsoft.UI.Xaml.Media.Animation.ObjectKeyFrameCollection";
}
impl ::core::iter::IntoIterator for ObjectKeyFrameCollection {
    type Item = ObjectKeyFrame;
    type IntoIter = ::windows::Foundation::Collections::VectorIterator<Self::Item>;
    fn into_iter(self) -> Self::IntoIter {
        ::core::iter::IntoIterator::into_iter(&self)
    }
}
impl ::core::iter::IntoIterator for &ObjectKeyFrameCollection {
    type Item = ObjectKeyFrame;
    type IntoIter = ::windows::Foundation::Collections::VectorIterator<Self::Item>;
    fn into_iter(self) -> Self::IntoIter {
        ::windows::Foundation::Collections::VectorIterator::new(
            ::core::convert::TryInto::try_into(self).ok(),
        )
    }
}
::windows::core::interface_hierarchy!(
    ObjectKeyFrameCollection,
    ::windows::core::IUnknown,
    ::windows::core::IInspectable
);
impl ::core::convert::TryFrom<ObjectKeyFrameCollection>
    for ::windows::Foundation::Collections::IIterable<ObjectKeyFrame>
{
    type Error = ::windows::core::Error;
    fn try_from(value: ObjectKeyFrameCollection) -> ::windows::core::Result<Self> {
        ::core::convert::TryFrom::try_from(&value)
    }
}
impl ::core::convert::TryFrom<&ObjectKeyFrameCollection>
    for ::windows::Foundation::Collections::IIterable<ObjectKeyFrame>
{
    type Error = ::windows::core::Error;
    fn try_from(value: &ObjectKeyFrameCollection) -> ::windows::core::Result<Self> {
        ::windows::core::Interface::cast(value)
    }
}
impl<'a> ::core::convert::TryFrom<&ObjectKeyFrameCollection>
    for ::windows::core::InParam<'a, ::windows::Foundation::Collections::IIterable<ObjectKeyFrame>>
{
    type Error = ::windows::core::Error;
    fn try_from(value: &ObjectKeyFrameCollection) -> ::windows::core::Result<Self> {
        let item = ::std::convert::TryInto::try_into(value)?;
        Ok(::windows::core::InParam::owned(item))
    }
}
impl ::core::convert::TryFrom<ObjectKeyFrameCollection>
    for ::windows::Foundation::Collections::IVector<ObjectKeyFrame>
{
    type Error = ::windows::core::Error;
    fn try_from(value: ObjectKeyFrameCollection) -> ::windows::core::Result<Self> {
        ::core::convert::TryFrom::try_from(&value)
    }
}
impl ::core::convert::TryFrom<&ObjectKeyFrameCollection>
    for ::windows::Foundation::Collections::IVector<ObjectKeyFrame>
{
    type Error = ::windows::core::Error;
    fn try_from(value: &ObjectKeyFrameCollection) -> ::windows::core::Result<Self> {
        ::windows::core::Interface::cast(value)
    }
}
impl<'a> ::core::convert::TryFrom<&ObjectKeyFrameCollection>
    for ::windows::core::InParam<'a, ::windows::Foundation::Collections::IVector<ObjectKeyFrame>>
{
    type Error = ::windows::core::Error;
    fn try_from(value: &ObjectKeyFrameCollection) -> ::windows::core::Result<Self> {
        let item = ::std::convert::TryInto::try_into(value)?;
        Ok(::windows::core::InParam::owned(item))
    }
}
unsafe impl ::core::marker::Send for ObjectKeyFrameCollection {}
unsafe impl ::core::marker::Sync for ObjectKeyFrameCollection {}
#[doc = "*Required features: `\"UI_Xaml_Media_Animation\"`*"]
#[repr(transparent)]
pub struct PaneThemeTransition(::windows::core::IUnknown);
impl PaneThemeTransition {
    pub fn new() -> ::windows::core::Result<Self> {
        Self::IActivationFactory(|f| f.ActivateInstance::<Self>())
    }
    fn IActivationFactory<
        R,
        F: FnOnce(&::windows::core::IGenericFactory) -> ::windows::core::Result<R>,
    >(
        callback: F,
    ) -> ::windows::core::Result<R> {
        static SHARED: ::windows::core::FactoryCache<
            PaneThemeTransition,
            ::windows::core::IGenericFactory,
        > = ::windows::core::FactoryCache::new();
        SHARED.call(callback)
    }
    pub fn GetValue(
        &self,
        dp: &super::super::DependencyProperty,
    ) -> ::windows::core::Result<::windows::core::IInspectable> {
        let this = &::windows::core::Interface::cast::<super::super::IDependencyObject>(self)?;
        unsafe {
            let mut result__ = ::core::mem::MaybeUninit::zeroed();
            (::windows::core::Vtable::vtable(this).GetValue)(
                ::windows::core::Vtable::as_raw(this),
                ::core::mem::transmute_copy(dp),
                result__.as_mut_ptr(),
            )
            .from_abi::<::windows::core::IInspectable>(result__)
        }
    }
    pub fn SetValue<'a, P0>(
        &self,
        dp: &super::super::DependencyProperty,
        value: P0,
    ) -> ::windows::core::Result<()>
    where
        P0: ::std::convert::Into<::windows::core::InParam<'a, ::windows::core::IInspectable>>,
    {
        let this = &::windows::core::Interface::cast::<super::super::IDependencyObject>(self)?;
        unsafe {
            (::windows::core::Vtable::vtable(this).SetValue)(
                ::windows::core::Vtable::as_raw(this),
                ::core::mem::transmute_copy(dp),
                value.into().abi(),
            )
            .ok()
        }
    }
    pub fn ClearValue(&self, dp: &super::super::DependencyProperty) -> ::windows::core::Result<()> {
        let this = &::windows::core::Interface::cast::<super::super::IDependencyObject>(self)?;
        unsafe {
            (::windows::core::Vtable::vtable(this).ClearValue)(
                ::windows::core::Vtable::as_raw(this),
                ::core::mem::transmute_copy(dp),
            )
            .ok()
        }
    }
    pub fn ReadLocalValue(
        &self,
        dp: &super::super::DependencyProperty,
    ) -> ::windows::core::Result<::windows::core::IInspectable> {
        let this = &::windows::core::Interface::cast::<super::super::IDependencyObject>(self)?;
        unsafe {
            let mut result__ = ::core::mem::MaybeUninit::zeroed();
            (::windows::core::Vtable::vtable(this).ReadLocalValue)(
                ::windows::core::Vtable::as_raw(this),
                ::core::mem::transmute_copy(dp),
                result__.as_mut_ptr(),
            )
            .from_abi::<::windows::core::IInspectable>(result__)
        }
    }
    pub fn GetAnimationBaseValue(
        &self,
        dp: &super::super::DependencyProperty,
    ) -> ::windows::core::Result<::windows::core::IInspectable> {
        let this = &::windows::core::Interface::cast::<super::super::IDependencyObject>(self)?;
        unsafe {
            let mut result__ = ::core::mem::MaybeUninit::zeroed();
            (::windows::core::Vtable::vtable(this).GetAnimationBaseValue)(
                ::windows::core::Vtable::as_raw(this),
                ::core::mem::transmute_copy(dp),
                result__.as_mut_ptr(),
            )
            .from_abi::<::windows::core::IInspectable>(result__)
        }
    }
    pub fn RegisterPropertyChangedCallback(
        &self,
        dp: &super::super::DependencyProperty,
        callback: &super::super::DependencyPropertyChangedCallback,
    ) -> ::windows::core::Result<i64> {
        let this = &::windows::core::Interface::cast::<super::super::IDependencyObject>(self)?;
        unsafe {
            let mut result__ = ::core::mem::MaybeUninit::zeroed();
            (::windows::core::Vtable::vtable(this).RegisterPropertyChangedCallback)(
                ::windows::core::Vtable::as_raw(this),
                ::core::mem::transmute_copy(dp),
                ::core::mem::transmute_copy(callback),
                result__.as_mut_ptr(),
            )
            .from_abi::<i64>(result__)
        }
    }
    pub fn UnregisterPropertyChangedCallback(
        &self,
        dp: &super::super::DependencyProperty,
        token: i64,
    ) -> ::windows::core::Result<()> {
        let this = &::windows::core::Interface::cast::<super::super::IDependencyObject>(self)?;
        unsafe {
            (::windows::core::Vtable::vtable(this).UnregisterPropertyChangedCallback)(
                ::windows::core::Vtable::as_raw(this),
                ::core::mem::transmute_copy(dp),
                token,
            )
            .ok()
        }
    }
    pub fn Dispatcher(&self) -> ::windows::core::Result<::windows::UI::Core::CoreDispatcher> {
        let this = &::windows::core::Interface::cast::<super::super::IDependencyObject>(self)?;
        unsafe {
            let mut result__ = ::core::mem::MaybeUninit::zeroed();
            (::windows::core::Vtable::vtable(this).Dispatcher)(
                ::windows::core::Vtable::as_raw(this),
                result__.as_mut_ptr(),
            )
            .from_abi::<::windows::UI::Core::CoreDispatcher>(result__)
        }
    }
    #[doc = "*Required features: `\"UI_Dispatching\"`*"]
    #[cfg(feature = "UI_Dispatching")]
    pub fn DispatcherQueue(
        &self,
    ) -> ::windows::core::Result<super::super::super::Dispatching::DispatcherQueue> {
        let this = &::windows::core::Interface::cast::<super::super::IDependencyObject>(self)?;
        unsafe {
            let mut result__ = ::core::mem::MaybeUninit::zeroed();
            (::windows::core::Vtable::vtable(this).DispatcherQueue)(
                ::windows::core::Vtable::as_raw(this),
                result__.as_mut_ptr(),
            )
            .from_abi::<super::super::super::Dispatching::DispatcherQueue>(result__)
        }
    }
    #[doc = "*Required features: `\"UI_Xaml_Controls_Primitives\"`*"]
    #[cfg(feature = "UI_Xaml_Controls_Primitives")]
    pub fn Edge(
        &self,
    ) -> ::windows::core::Result<super::super::Controls::Primitives::EdgeTransitionLocation> {
        let this = self;
        unsafe {
            let mut result__ = ::core::mem::MaybeUninit::zeroed();
            (::windows::core::Vtable::vtable(this).Edge)(
                ::windows::core::Vtable::as_raw(this),
                result__.as_mut_ptr(),
            )
            .from_abi::<super::super::Controls::Primitives::EdgeTransitionLocation>(result__)
        }
    }
    #[doc = "*Required features: `\"UI_Xaml_Controls_Primitives\"`*"]
    #[cfg(feature = "UI_Xaml_Controls_Primitives")]
    pub fn SetEdge(
        &self,
        value: super::super::Controls::Primitives::EdgeTransitionLocation,
    ) -> ::windows::core::Result<()> {
        let this = self;
        unsafe {
            (::windows::core::Vtable::vtable(this).SetEdge)(
                ::windows::core::Vtable::as_raw(this),
                value,
            )
            .ok()
        }
    }
    pub fn EdgeProperty() -> ::windows::core::Result<super::super::DependencyProperty> {
        Self::IPaneThemeTransitionStatics(|this| unsafe {
            let mut result__ = ::core::mem::MaybeUninit::zeroed();
            (::windows::core::Vtable::vtable(this).EdgeProperty)(
                ::windows::core::Vtable::as_raw(this),
                result__.as_mut_ptr(),
            )
            .from_abi::<super::super::DependencyProperty>(result__)
        })
    }
    #[doc(hidden)]
    pub fn IPaneThemeTransitionStatics<
        R,
        F: FnOnce(&IPaneThemeTransitionStatics) -> ::windows::core::Result<R>,
    >(
        callback: F,
    ) -> ::windows::core::Result<R> {
        static SHARED: ::windows::core::FactoryCache<
            PaneThemeTransition,
            IPaneThemeTransitionStatics,
        > = ::windows::core::FactoryCache::new();
        SHARED.call(callback)
    }
}
impl ::core::clone::Clone for PaneThemeTransition {
    fn clone(&self) -> Self {
        Self(self.0.clone())
    }
}
impl ::core::cmp::PartialEq for PaneThemeTransition {
    fn eq(&self, other: &Self) -> bool {
        self.0 == other.0
    }
}
impl ::core::cmp::Eq for PaneThemeTransition {}
impl ::core::fmt::Debug for PaneThemeTransition {
    fn fmt(&self, f: &mut ::core::fmt::Formatter<'_>) -> ::core::fmt::Result {
        f.debug_tuple("PaneThemeTransition").field(&self.0).finish()
    }
}
unsafe impl ::windows::core::RuntimeType for PaneThemeTransition {
    const SIGNATURE : ::windows::core::ConstBuffer = ::windows::core::ConstBuffer::from_slice ( b"rc(Microsoft.UI.Xaml.Media.Animation.PaneThemeTransition;{321bcd80-157c-5e10-b0fe-6440bd92529a})" ) ;
    type DefaultType = ::core::option::Option<Self>;
    fn from_default(from: &Self::DefaultType) -> ::windows::core::Result<Self> {
        from.as_ref().cloned().ok_or(::windows::core::Error::OK)
    }
}
unsafe impl ::windows::core::Vtable for PaneThemeTransition {
    type Vtable = IPaneThemeTransition_Vtbl;
}
unsafe impl ::windows::core::Interface for PaneThemeTransition {
    const IID: ::windows::core::GUID = <IPaneThemeTransition as ::windows::core::Interface>::IID;
}
impl ::windows::core::RuntimeName for PaneThemeTransition {
    const NAME: &'static str = "Microsoft.UI.Xaml.Media.Animation.PaneThemeTransition";
}
::windows::core::interface_hierarchy!(
    PaneThemeTransition,
    ::windows::core::IUnknown,
    ::windows::core::IInspectable
);
impl ::core::convert::From<PaneThemeTransition> for Transition {
    fn from(value: PaneThemeTransition) -> Self {
        ::core::convert::From::from(&value)
    }
}
impl ::core::convert::From<&PaneThemeTransition> for Transition {
    fn from(value: &PaneThemeTransition) -> Self {
        ::windows::core::Interface::cast(value).unwrap()
    }
}
impl<'a> ::core::convert::From<&PaneThemeTransition> for ::windows::core::InParam<'a, Transition> {
    fn from(value: &PaneThemeTransition) -> Self {
        ::windows::core::InParam::owned(value.into())
    }
}
impl ::core::convert::From<PaneThemeTransition> for super::super::DependencyObject {
    fn from(value: PaneThemeTransition) -> Self {
        ::core::convert::From::from(&value)
    }
}
impl ::core::convert::From<&PaneThemeTransition> for super::super::DependencyObject {
    fn from(value: &PaneThemeTransition) -> Self {
        ::windows::core::Interface::cast(value).unwrap()
    }
}
impl<'a> ::core::convert::From<&PaneThemeTransition>
    for ::windows::core::InParam<'a, super::super::DependencyObject>
{
    fn from(value: &PaneThemeTransition) -> Self {
        ::windows::core::InParam::owned(value.into())
    }
}
unsafe impl ::core::marker::Send for PaneThemeTransition {}
unsafe impl ::core::marker::Sync for PaneThemeTransition {}
#[doc = "*Required features: `\"UI_Xaml_Media_Animation\"`*"]
#[repr(transparent)]
pub struct PointAnimation(::windows::core::IUnknown);
impl PointAnimation {
    pub fn new() -> ::windows::core::Result<Self> {
        Self::IActivationFactory(|f| f.ActivateInstance::<Self>())
    }
    fn IActivationFactory<
        R,
        F: FnOnce(&::windows::core::IGenericFactory) -> ::windows::core::Result<R>,
    >(
        callback: F,
    ) -> ::windows::core::Result<R> {
        static SHARED: ::windows::core::FactoryCache<
            PointAnimation,
            ::windows::core::IGenericFactory,
        > = ::windows::core::FactoryCache::new();
        SHARED.call(callback)
    }
    pub fn GetValue(
        &self,
        dp: &super::super::DependencyProperty,
    ) -> ::windows::core::Result<::windows::core::IInspectable> {
        let this = &::windows::core::Interface::cast::<super::super::IDependencyObject>(self)?;
        unsafe {
            let mut result__ = ::core::mem::MaybeUninit::zeroed();
            (::windows::core::Vtable::vtable(this).GetValue)(
                ::windows::core::Vtable::as_raw(this),
                ::core::mem::transmute_copy(dp),
                result__.as_mut_ptr(),
            )
            .from_abi::<::windows::core::IInspectable>(result__)
        }
    }
    pub fn SetValue<'a, P0>(
        &self,
        dp: &super::super::DependencyProperty,
        value: P0,
    ) -> ::windows::core::Result<()>
    where
        P0: ::std::convert::Into<::windows::core::InParam<'a, ::windows::core::IInspectable>>,
    {
        let this = &::windows::core::Interface::cast::<super::super::IDependencyObject>(self)?;
        unsafe {
            (::windows::core::Vtable::vtable(this).SetValue)(
                ::windows::core::Vtable::as_raw(this),
                ::core::mem::transmute_copy(dp),
                value.into().abi(),
            )
            .ok()
        }
    }
    pub fn ClearValue(&self, dp: &super::super::DependencyProperty) -> ::windows::core::Result<()> {
        let this = &::windows::core::Interface::cast::<super::super::IDependencyObject>(self)?;
        unsafe {
            (::windows::core::Vtable::vtable(this).ClearValue)(
                ::windows::core::Vtable::as_raw(this),
                ::core::mem::transmute_copy(dp),
            )
            .ok()
        }
    }
    pub fn ReadLocalValue(
        &self,
        dp: &super::super::DependencyProperty,
    ) -> ::windows::core::Result<::windows::core::IInspectable> {
        let this = &::windows::core::Interface::cast::<super::super::IDependencyObject>(self)?;
        unsafe {
            let mut result__ = ::core::mem::MaybeUninit::zeroed();
            (::windows::core::Vtable::vtable(this).ReadLocalValue)(
                ::windows::core::Vtable::as_raw(this),
                ::core::mem::transmute_copy(dp),
                result__.as_mut_ptr(),
            )
            .from_abi::<::windows::core::IInspectable>(result__)
        }
    }
    pub fn GetAnimationBaseValue(
        &self,
        dp: &super::super::DependencyProperty,
    ) -> ::windows::core::Result<::windows::core::IInspectable> {
        let this = &::windows::core::Interface::cast::<super::super::IDependencyObject>(self)?;
        unsafe {
            let mut result__ = ::core::mem::MaybeUninit::zeroed();
            (::windows::core::Vtable::vtable(this).GetAnimationBaseValue)(
                ::windows::core::Vtable::as_raw(this),
                ::core::mem::transmute_copy(dp),
                result__.as_mut_ptr(),
            )
            .from_abi::<::windows::core::IInspectable>(result__)
        }
    }
    pub fn RegisterPropertyChangedCallback(
        &self,
        dp: &super::super::DependencyProperty,
        callback: &super::super::DependencyPropertyChangedCallback,
    ) -> ::windows::core::Result<i64> {
        let this = &::windows::core::Interface::cast::<super::super::IDependencyObject>(self)?;
        unsafe {
            let mut result__ = ::core::mem::MaybeUninit::zeroed();
            (::windows::core::Vtable::vtable(this).RegisterPropertyChangedCallback)(
                ::windows::core::Vtable::as_raw(this),
                ::core::mem::transmute_copy(dp),
                ::core::mem::transmute_copy(callback),
                result__.as_mut_ptr(),
            )
            .from_abi::<i64>(result__)
        }
    }
    pub fn UnregisterPropertyChangedCallback(
        &self,
        dp: &super::super::DependencyProperty,
        token: i64,
    ) -> ::windows::core::Result<()> {
        let this = &::windows::core::Interface::cast::<super::super::IDependencyObject>(self)?;
        unsafe {
            (::windows::core::Vtable::vtable(this).UnregisterPropertyChangedCallback)(
                ::windows::core::Vtable::as_raw(this),
                ::core::mem::transmute_copy(dp),
                token,
            )
            .ok()
        }
    }
    pub fn Dispatcher(&self) -> ::windows::core::Result<::windows::UI::Core::CoreDispatcher> {
        let this = &::windows::core::Interface::cast::<super::super::IDependencyObject>(self)?;
        unsafe {
            let mut result__ = ::core::mem::MaybeUninit::zeroed();
            (::windows::core::Vtable::vtable(this).Dispatcher)(
                ::windows::core::Vtable::as_raw(this),
                result__.as_mut_ptr(),
            )
            .from_abi::<::windows::UI::Core::CoreDispatcher>(result__)
        }
    }
    #[doc = "*Required features: `\"UI_Dispatching\"`*"]
    #[cfg(feature = "UI_Dispatching")]
    pub fn DispatcherQueue(
        &self,
    ) -> ::windows::core::Result<super::super::super::Dispatching::DispatcherQueue> {
        let this = &::windows::core::Interface::cast::<super::super::IDependencyObject>(self)?;
        unsafe {
            let mut result__ = ::core::mem::MaybeUninit::zeroed();
            (::windows::core::Vtable::vtable(this).DispatcherQueue)(
                ::windows::core::Vtable::as_raw(this),
                result__.as_mut_ptr(),
            )
            .from_abi::<super::super::super::Dispatching::DispatcherQueue>(result__)
        }
    }
    pub fn From(
        &self,
    ) -> ::windows::core::Result<::windows::Foundation::IReference<::windows::Foundation::Point>>
    {
        let this = self;
        unsafe {
            let mut result__ = ::core::mem::MaybeUninit::zeroed();
            (::windows::core::Vtable::vtable(this).From)(
                ::windows::core::Vtable::as_raw(this),
                result__.as_mut_ptr(),
            )
            .from_abi::<::windows::Foundation::IReference<::windows::Foundation::Point>>(result__)
        }
    }
    pub fn SetFrom<'a, P0, E0>(&self, value: P0) -> ::windows::core::Result<()>
    where
        P0: ::std::convert::TryInto<
            ::windows::core::InParam<
                'a,
                ::windows::Foundation::IReference<::windows::Foundation::Point>,
            >,
            Error = E0,
        >,
        E0: ::std::convert::Into<::windows::core::Error>,
    {
        let this = self;
        unsafe {
            (::windows::core::Vtable::vtable(this).SetFrom)(
                ::windows::core::Vtable::as_raw(this),
                value.try_into().map_err(|e| e.into())?.abi(),
            )
            .ok()
        }
    }
    pub fn To(
        &self,
    ) -> ::windows::core::Result<::windows::Foundation::IReference<::windows::Foundation::Point>>
    {
        let this = self;
        unsafe {
            let mut result__ = ::core::mem::MaybeUninit::zeroed();
            (::windows::core::Vtable::vtable(this).To)(
                ::windows::core::Vtable::as_raw(this),
                result__.as_mut_ptr(),
            )
            .from_abi::<::windows::Foundation::IReference<::windows::Foundation::Point>>(result__)
        }
    }
    pub fn SetTo<'a, P0, E0>(&self, value: P0) -> ::windows::core::Result<()>
    where
        P0: ::std::convert::TryInto<
            ::windows::core::InParam<
                'a,
                ::windows::Foundation::IReference<::windows::Foundation::Point>,
            >,
            Error = E0,
        >,
        E0: ::std::convert::Into<::windows::core::Error>,
    {
        let this = self;
        unsafe {
            (::windows::core::Vtable::vtable(this).SetTo)(
                ::windows::core::Vtable::as_raw(this),
                value.try_into().map_err(|e| e.into())?.abi(),
            )
            .ok()
        }
    }
    pub fn By(
        &self,
    ) -> ::windows::core::Result<::windows::Foundation::IReference<::windows::Foundation::Point>>
    {
        let this = self;
        unsafe {
            let mut result__ = ::core::mem::MaybeUninit::zeroed();
            (::windows::core::Vtable::vtable(this).By)(
                ::windows::core::Vtable::as_raw(this),
                result__.as_mut_ptr(),
            )
            .from_abi::<::windows::Foundation::IReference<::windows::Foundation::Point>>(result__)
        }
    }
    pub fn SetBy<'a, P0, E0>(&self, value: P0) -> ::windows::core::Result<()>
    where
        P0: ::std::convert::TryInto<
            ::windows::core::InParam<
                'a,
                ::windows::Foundation::IReference<::windows::Foundation::Point>,
            >,
            Error = E0,
        >,
        E0: ::std::convert::Into<::windows::core::Error>,
    {
        let this = self;
        unsafe {
            (::windows::core::Vtable::vtable(this).SetBy)(
                ::windows::core::Vtable::as_raw(this),
                value.try_into().map_err(|e| e.into())?.abi(),
            )
            .ok()
        }
    }
    pub fn EasingFunction(&self) -> ::windows::core::Result<EasingFunctionBase> {
        let this = self;
        unsafe {
            let mut result__ = ::core::mem::MaybeUninit::zeroed();
            (::windows::core::Vtable::vtable(this).EasingFunction)(
                ::windows::core::Vtable::as_raw(this),
                result__.as_mut_ptr(),
            )
            .from_abi::<EasingFunctionBase>(result__)
        }
    }
    pub fn SetEasingFunction<'a, P0>(&self, value: P0) -> ::windows::core::Result<()>
    where
        P0: ::std::convert::Into<::windows::core::InParam<'a, EasingFunctionBase>>,
    {
        let this = self;
        unsafe {
            (::windows::core::Vtable::vtable(this).SetEasingFunction)(
                ::windows::core::Vtable::as_raw(this),
                value.into().abi(),
            )
            .ok()
        }
    }
    pub fn EnableDependentAnimation(&self) -> ::windows::core::Result<bool> {
        let this = self;
        unsafe {
            let mut result__ = ::core::mem::MaybeUninit::zeroed();
            (::windows::core::Vtable::vtable(this).EnableDependentAnimation)(
                ::windows::core::Vtable::as_raw(this),
                result__.as_mut_ptr(),
            )
            .from_abi::<bool>(result__)
        }
    }
    pub fn SetEnableDependentAnimation(&self, value: bool) -> ::windows::core::Result<()> {
        let this = self;
        unsafe {
            (::windows::core::Vtable::vtable(this).SetEnableDependentAnimation)(
                ::windows::core::Vtable::as_raw(this),
                value,
            )
            .ok()
        }
    }
    pub fn FromProperty() -> ::windows::core::Result<super::super::DependencyProperty> {
        Self::IPointAnimationStatics(|this| unsafe {
            let mut result__ = ::core::mem::MaybeUninit::zeroed();
            (::windows::core::Vtable::vtable(this).FromProperty)(
                ::windows::core::Vtable::as_raw(this),
                result__.as_mut_ptr(),
            )
            .from_abi::<super::super::DependencyProperty>(result__)
        })
    }
    pub fn ToProperty() -> ::windows::core::Result<super::super::DependencyProperty> {
        Self::IPointAnimationStatics(|this| unsafe {
            let mut result__ = ::core::mem::MaybeUninit::zeroed();
            (::windows::core::Vtable::vtable(this).ToProperty)(
                ::windows::core::Vtable::as_raw(this),
                result__.as_mut_ptr(),
            )
            .from_abi::<super::super::DependencyProperty>(result__)
        })
    }
    pub fn ByProperty() -> ::windows::core::Result<super::super::DependencyProperty> {
        Self::IPointAnimationStatics(|this| unsafe {
            let mut result__ = ::core::mem::MaybeUninit::zeroed();
            (::windows::core::Vtable::vtable(this).ByProperty)(
                ::windows::core::Vtable::as_raw(this),
                result__.as_mut_ptr(),
            )
            .from_abi::<super::super::DependencyProperty>(result__)
        })
    }
    pub fn EasingFunctionProperty() -> ::windows::core::Result<super::super::DependencyProperty> {
        Self::IPointAnimationStatics(|this| unsafe {
            let mut result__ = ::core::mem::MaybeUninit::zeroed();
            (::windows::core::Vtable::vtable(this).EasingFunctionProperty)(
                ::windows::core::Vtable::as_raw(this),
                result__.as_mut_ptr(),
            )
            .from_abi::<super::super::DependencyProperty>(result__)
        })
    }
    pub fn EnableDependentAnimationProperty(
    ) -> ::windows::core::Result<super::super::DependencyProperty> {
        Self::IPointAnimationStatics(|this| unsafe {
            let mut result__ = ::core::mem::MaybeUninit::zeroed();
            (::windows::core::Vtable::vtable(this).EnableDependentAnimationProperty)(
                ::windows::core::Vtable::as_raw(this),
                result__.as_mut_ptr(),
            )
            .from_abi::<super::super::DependencyProperty>(result__)
        })
    }
    pub fn AutoReverse(&self) -> ::windows::core::Result<bool> {
        let this = &::windows::core::Interface::cast::<ITimeline>(self)?;
        unsafe {
            let mut result__ = ::core::mem::MaybeUninit::zeroed();
            (::windows::core::Vtable::vtable(this).AutoReverse)(
                ::windows::core::Vtable::as_raw(this),
                result__.as_mut_ptr(),
            )
            .from_abi::<bool>(result__)
        }
    }
    pub fn SetAutoReverse(&self, value: bool) -> ::windows::core::Result<()> {
        let this = &::windows::core::Interface::cast::<ITimeline>(self)?;
        unsafe {
            (::windows::core::Vtable::vtable(this).SetAutoReverse)(
                ::windows::core::Vtable::as_raw(this),
                value,
            )
            .ok()
        }
    }
    pub fn BeginTime(
        &self,
    ) -> ::windows::core::Result<::windows::Foundation::IReference<::windows::Foundation::TimeSpan>>
    {
        let this = &::windows::core::Interface::cast::<ITimeline>(self)?;
        unsafe {
            let mut result__ = ::core::mem::MaybeUninit::zeroed();
            (::windows::core::Vtable::vtable(this).BeginTime)(
                ::windows::core::Vtable::as_raw(this),
                result__.as_mut_ptr(),
            )
            .from_abi::<::windows::Foundation::IReference<::windows::Foundation::TimeSpan>>(
                result__,
            )
        }
    }
    pub fn SetBeginTime<'a, P0, E0>(&self, value: P0) -> ::windows::core::Result<()>
    where
        P0: ::std::convert::TryInto<
            ::windows::core::InParam<
                'a,
                ::windows::Foundation::IReference<::windows::Foundation::TimeSpan>,
            >,
            Error = E0,
        >,
        E0: ::std::convert::Into<::windows::core::Error>,
    {
        let this = &::windows::core::Interface::cast::<ITimeline>(self)?;
        unsafe {
            (::windows::core::Vtable::vtable(this).SetBeginTime)(
                ::windows::core::Vtable::as_raw(this),
                value.try_into().map_err(|e| e.into())?.abi(),
            )
            .ok()
        }
    }
    pub fn Duration(&self) -> ::windows::core::Result<super::super::Duration> {
        let this = &::windows::core::Interface::cast::<ITimeline>(self)?;
        unsafe {
            let mut result__ = ::core::mem::MaybeUninit::zeroed();
            (::windows::core::Vtable::vtable(this).Duration)(
                ::windows::core::Vtable::as_raw(this),
                result__.as_mut_ptr(),
            )
            .from_abi::<super::super::Duration>(result__)
        }
    }
    pub fn SetDuration(&self, value: super::super::Duration) -> ::windows::core::Result<()> {
        let this = &::windows::core::Interface::cast::<ITimeline>(self)?;
        unsafe {
            (::windows::core::Vtable::vtable(this).SetDuration)(
                ::windows::core::Vtable::as_raw(this),
                value,
            )
            .ok()
        }
    }
    pub fn SpeedRatio(&self) -> ::windows::core::Result<f64> {
        let this = &::windows::core::Interface::cast::<ITimeline>(self)?;
        unsafe {
            let mut result__ = ::core::mem::MaybeUninit::zeroed();
            (::windows::core::Vtable::vtable(this).SpeedRatio)(
                ::windows::core::Vtable::as_raw(this),
                result__.as_mut_ptr(),
            )
            .from_abi::<f64>(result__)
        }
    }
    pub fn SetSpeedRatio(&self, value: f64) -> ::windows::core::Result<()> {
        let this = &::windows::core::Interface::cast::<ITimeline>(self)?;
        unsafe {
            (::windows::core::Vtable::vtable(this).SetSpeedRatio)(
                ::windows::core::Vtable::as_raw(this),
                value,
            )
            .ok()
        }
    }
    pub fn FillBehavior(&self) -> ::windows::core::Result<FillBehavior> {
        let this = &::windows::core::Interface::cast::<ITimeline>(self)?;
        unsafe {
            let mut result__ = ::core::mem::MaybeUninit::zeroed();
            (::windows::core::Vtable::vtable(this).FillBehavior)(
                ::windows::core::Vtable::as_raw(this),
                result__.as_mut_ptr(),
            )
            .from_abi::<FillBehavior>(result__)
        }
    }
    pub fn SetFillBehavior(&self, value: FillBehavior) -> ::windows::core::Result<()> {
        let this = &::windows::core::Interface::cast::<ITimeline>(self)?;
        unsafe {
            (::windows::core::Vtable::vtable(this).SetFillBehavior)(
                ::windows::core::Vtable::as_raw(this),
                value,
            )
            .ok()
        }
    }
    pub fn RepeatBehavior(&self) -> ::windows::core::Result<RepeatBehavior> {
        let this = &::windows::core::Interface::cast::<ITimeline>(self)?;
        unsafe {
            let mut result__ = ::core::mem::MaybeUninit::zeroed();
            (::windows::core::Vtable::vtable(this).RepeatBehavior)(
                ::windows::core::Vtable::as_raw(this),
                result__.as_mut_ptr(),
            )
            .from_abi::<RepeatBehavior>(result__)
        }
    }
    pub fn SetRepeatBehavior(&self, value: RepeatBehavior) -> ::windows::core::Result<()> {
        let this = &::windows::core::Interface::cast::<ITimeline>(self)?;
        unsafe {
            (::windows::core::Vtable::vtable(this).SetRepeatBehavior)(
                ::windows::core::Vtable::as_raw(this),
                value,
            )
            .ok()
        }
    }
    pub fn Completed(
        &self,
        handler: &::windows::Foundation::EventHandler<::windows::core::IInspectable>,
    ) -> ::windows::core::Result<::windows::Foundation::EventRegistrationToken> {
        let this = &::windows::core::Interface::cast::<ITimeline>(self)?;
        unsafe {
            let mut result__ = ::core::mem::MaybeUninit::zeroed();
            (::windows::core::Vtable::vtable(this).Completed)(
                ::windows::core::Vtable::as_raw(this),
                ::core::mem::transmute_copy(handler),
                result__.as_mut_ptr(),
            )
            .from_abi::<::windows::Foundation::EventRegistrationToken>(result__)
        }
    }
    pub fn RemoveCompleted(
        &self,
        token: ::windows::Foundation::EventRegistrationToken,
    ) -> ::windows::core::Result<()> {
        let this = &::windows::core::Interface::cast::<ITimeline>(self)?;
        unsafe {
            (::windows::core::Vtable::vtable(this).RemoveCompleted)(
                ::windows::core::Vtable::as_raw(this),
                token,
            )
            .ok()
        }
    }
    #[doc(hidden)]
    pub fn IPointAnimationStatics<
        R,
        F: FnOnce(&IPointAnimationStatics) -> ::windows::core::Result<R>,
    >(
        callback: F,
    ) -> ::windows::core::Result<R> {
        static SHARED: ::windows::core::FactoryCache<PointAnimation, IPointAnimationStatics> =
            ::windows::core::FactoryCache::new();
        SHARED.call(callback)
    }
}
impl ::core::clone::Clone for PointAnimation {
    fn clone(&self) -> Self {
        Self(self.0.clone())
    }
}
impl ::core::cmp::PartialEq for PointAnimation {
    fn eq(&self, other: &Self) -> bool {
        self.0 == other.0
    }
}
impl ::core::cmp::Eq for PointAnimation {}
impl ::core::fmt::Debug for PointAnimation {
    fn fmt(&self, f: &mut ::core::fmt::Formatter<'_>) -> ::core::fmt::Result {
        f.debug_tuple("PointAnimation").field(&self.0).finish()
    }
}
unsafe impl ::windows::core::RuntimeType for PointAnimation {
    const SIGNATURE : ::windows::core::ConstBuffer = ::windows::core::ConstBuffer::from_slice ( b"rc(Microsoft.UI.Xaml.Media.Animation.PointAnimation;{a0737cc4-2eab-5c13-a5d7-78361df1000e})" ) ;
    type DefaultType = ::core::option::Option<Self>;
    fn from_default(from: &Self::DefaultType) -> ::windows::core::Result<Self> {
        from.as_ref().cloned().ok_or(::windows::core::Error::OK)
    }
}
unsafe impl ::windows::core::Vtable for PointAnimation {
    type Vtable = IPointAnimation_Vtbl;
}
unsafe impl ::windows::core::Interface for PointAnimation {
    const IID: ::windows::core::GUID = <IPointAnimation as ::windows::core::Interface>::IID;
}
impl ::windows::core::RuntimeName for PointAnimation {
    const NAME: &'static str = "Microsoft.UI.Xaml.Media.Animation.PointAnimation";
}
::windows::core::interface_hierarchy!(
    PointAnimation,
    ::windows::core::IUnknown,
    ::windows::core::IInspectable
);
impl ::core::convert::From<PointAnimation> for Timeline {
    fn from(value: PointAnimation) -> Self {
        ::core::convert::From::from(&value)
    }
}
impl ::core::convert::From<&PointAnimation> for Timeline {
    fn from(value: &PointAnimation) -> Self {
        ::windows::core::Interface::cast(value).unwrap()
    }
}
impl<'a> ::core::convert::From<&PointAnimation> for ::windows::core::InParam<'a, Timeline> {
    fn from(value: &PointAnimation) -> Self {
        ::windows::core::InParam::owned(value.into())
    }
}
impl ::core::convert::From<PointAnimation> for super::super::DependencyObject {
    fn from(value: PointAnimation) -> Self {
        ::core::convert::From::from(&value)
    }
}
impl ::core::convert::From<&PointAnimation> for super::super::DependencyObject {
    fn from(value: &PointAnimation) -> Self {
        ::windows::core::Interface::cast(value).unwrap()
    }
}
impl<'a> ::core::convert::From<&PointAnimation>
    for ::windows::core::InParam<'a, super::super::DependencyObject>
{
    fn from(value: &PointAnimation) -> Self {
        ::windows::core::InParam::owned(value.into())
    }
}
unsafe impl ::core::marker::Send for PointAnimation {}
unsafe impl ::core::marker::Sync for PointAnimation {}
#[doc = "*Required features: `\"UI_Xaml_Media_Animation\"`*"]
#[repr(transparent)]
pub struct PointAnimationUsingKeyFrames(::windows::core::IUnknown);
impl PointAnimationUsingKeyFrames {
    pub fn new() -> ::windows::core::Result<Self> {
        Self::IActivationFactory(|f| f.ActivateInstance::<Self>())
    }
    fn IActivationFactory<
        R,
        F: FnOnce(&::windows::core::IGenericFactory) -> ::windows::core::Result<R>,
    >(
        callback: F,
    ) -> ::windows::core::Result<R> {
        static SHARED: ::windows::core::FactoryCache<
            PointAnimationUsingKeyFrames,
            ::windows::core::IGenericFactory,
        > = ::windows::core::FactoryCache::new();
        SHARED.call(callback)
    }
    pub fn GetValue(
        &self,
        dp: &super::super::DependencyProperty,
    ) -> ::windows::core::Result<::windows::core::IInspectable> {
        let this = &::windows::core::Interface::cast::<super::super::IDependencyObject>(self)?;
        unsafe {
            let mut result__ = ::core::mem::MaybeUninit::zeroed();
            (::windows::core::Vtable::vtable(this).GetValue)(
                ::windows::core::Vtable::as_raw(this),
                ::core::mem::transmute_copy(dp),
                result__.as_mut_ptr(),
            )
            .from_abi::<::windows::core::IInspectable>(result__)
        }
    }
    pub fn SetValue<'a, P0>(
        &self,
        dp: &super::super::DependencyProperty,
        value: P0,
    ) -> ::windows::core::Result<()>
    where
        P0: ::std::convert::Into<::windows::core::InParam<'a, ::windows::core::IInspectable>>,
    {
        let this = &::windows::core::Interface::cast::<super::super::IDependencyObject>(self)?;
        unsafe {
            (::windows::core::Vtable::vtable(this).SetValue)(
                ::windows::core::Vtable::as_raw(this),
                ::core::mem::transmute_copy(dp),
                value.into().abi(),
            )
            .ok()
        }
    }
    pub fn ClearValue(&self, dp: &super::super::DependencyProperty) -> ::windows::core::Result<()> {
        let this = &::windows::core::Interface::cast::<super::super::IDependencyObject>(self)?;
        unsafe {
            (::windows::core::Vtable::vtable(this).ClearValue)(
                ::windows::core::Vtable::as_raw(this),
                ::core::mem::transmute_copy(dp),
            )
            .ok()
        }
    }
    pub fn ReadLocalValue(
        &self,
        dp: &super::super::DependencyProperty,
    ) -> ::windows::core::Result<::windows::core::IInspectable> {
        let this = &::windows::core::Interface::cast::<super::super::IDependencyObject>(self)?;
        unsafe {
            let mut result__ = ::core::mem::MaybeUninit::zeroed();
            (::windows::core::Vtable::vtable(this).ReadLocalValue)(
                ::windows::core::Vtable::as_raw(this),
                ::core::mem::transmute_copy(dp),
                result__.as_mut_ptr(),
            )
            .from_abi::<::windows::core::IInspectable>(result__)
        }
    }
    pub fn GetAnimationBaseValue(
        &self,
        dp: &super::super::DependencyProperty,
    ) -> ::windows::core::Result<::windows::core::IInspectable> {
        let this = &::windows::core::Interface::cast::<super::super::IDependencyObject>(self)?;
        unsafe {
            let mut result__ = ::core::mem::MaybeUninit::zeroed();
            (::windows::core::Vtable::vtable(this).GetAnimationBaseValue)(
                ::windows::core::Vtable::as_raw(this),
                ::core::mem::transmute_copy(dp),
                result__.as_mut_ptr(),
            )
            .from_abi::<::windows::core::IInspectable>(result__)
        }
    }
    pub fn RegisterPropertyChangedCallback(
        &self,
        dp: &super::super::DependencyProperty,
        callback: &super::super::DependencyPropertyChangedCallback,
    ) -> ::windows::core::Result<i64> {
        let this = &::windows::core::Interface::cast::<super::super::IDependencyObject>(self)?;
        unsafe {
            let mut result__ = ::core::mem::MaybeUninit::zeroed();
            (::windows::core::Vtable::vtable(this).RegisterPropertyChangedCallback)(
                ::windows::core::Vtable::as_raw(this),
                ::core::mem::transmute_copy(dp),
                ::core::mem::transmute_copy(callback),
                result__.as_mut_ptr(),
            )
            .from_abi::<i64>(result__)
        }
    }
    pub fn UnregisterPropertyChangedCallback(
        &self,
        dp: &super::super::DependencyProperty,
        token: i64,
    ) -> ::windows::core::Result<()> {
        let this = &::windows::core::Interface::cast::<super::super::IDependencyObject>(self)?;
        unsafe {
            (::windows::core::Vtable::vtable(this).UnregisterPropertyChangedCallback)(
                ::windows::core::Vtable::as_raw(this),
                ::core::mem::transmute_copy(dp),
                token,
            )
            .ok()
        }
    }
    pub fn Dispatcher(&self) -> ::windows::core::Result<::windows::UI::Core::CoreDispatcher> {
        let this = &::windows::core::Interface::cast::<super::super::IDependencyObject>(self)?;
        unsafe {
            let mut result__ = ::core::mem::MaybeUninit::zeroed();
            (::windows::core::Vtable::vtable(this).Dispatcher)(
                ::windows::core::Vtable::as_raw(this),
                result__.as_mut_ptr(),
            )
            .from_abi::<::windows::UI::Core::CoreDispatcher>(result__)
        }
    }
    #[doc = "*Required features: `\"UI_Dispatching\"`*"]
    #[cfg(feature = "UI_Dispatching")]
    pub fn DispatcherQueue(
        &self,
    ) -> ::windows::core::Result<super::super::super::Dispatching::DispatcherQueue> {
        let this = &::windows::core::Interface::cast::<super::super::IDependencyObject>(self)?;
        unsafe {
            let mut result__ = ::core::mem::MaybeUninit::zeroed();
            (::windows::core::Vtable::vtable(this).DispatcherQueue)(
                ::windows::core::Vtable::as_raw(this),
                result__.as_mut_ptr(),
            )
            .from_abi::<super::super::super::Dispatching::DispatcherQueue>(result__)
        }
    }
    pub fn KeyFrames(&self) -> ::windows::core::Result<PointKeyFrameCollection> {
        let this = self;
        unsafe {
            let mut result__ = ::core::mem::MaybeUninit::zeroed();
            (::windows::core::Vtable::vtable(this).KeyFrames)(
                ::windows::core::Vtable::as_raw(this),
                result__.as_mut_ptr(),
            )
            .from_abi::<PointKeyFrameCollection>(result__)
        }
    }
    pub fn EnableDependentAnimation(&self) -> ::windows::core::Result<bool> {
        let this = self;
        unsafe {
            let mut result__ = ::core::mem::MaybeUninit::zeroed();
            (::windows::core::Vtable::vtable(this).EnableDependentAnimation)(
                ::windows::core::Vtable::as_raw(this),
                result__.as_mut_ptr(),
            )
            .from_abi::<bool>(result__)
        }
    }
    pub fn SetEnableDependentAnimation(&self, value: bool) -> ::windows::core::Result<()> {
        let this = self;
        unsafe {
            (::windows::core::Vtable::vtable(this).SetEnableDependentAnimation)(
                ::windows::core::Vtable::as_raw(this),
                value,
            )
            .ok()
        }
    }
    pub fn EnableDependentAnimationProperty(
    ) -> ::windows::core::Result<super::super::DependencyProperty> {
        Self::IPointAnimationUsingKeyFramesStatics(|this| unsafe {
            let mut result__ = ::core::mem::MaybeUninit::zeroed();
            (::windows::core::Vtable::vtable(this).EnableDependentAnimationProperty)(
                ::windows::core::Vtable::as_raw(this),
                result__.as_mut_ptr(),
            )
            .from_abi::<super::super::DependencyProperty>(result__)
        })
    }
    pub fn AutoReverse(&self) -> ::windows::core::Result<bool> {
        let this = &::windows::core::Interface::cast::<ITimeline>(self)?;
        unsafe {
            let mut result__ = ::core::mem::MaybeUninit::zeroed();
            (::windows::core::Vtable::vtable(this).AutoReverse)(
                ::windows::core::Vtable::as_raw(this),
                result__.as_mut_ptr(),
            )
            .from_abi::<bool>(result__)
        }
    }
    pub fn SetAutoReverse(&self, value: bool) -> ::windows::core::Result<()> {
        let this = &::windows::core::Interface::cast::<ITimeline>(self)?;
        unsafe {
            (::windows::core::Vtable::vtable(this).SetAutoReverse)(
                ::windows::core::Vtable::as_raw(this),
                value,
            )
            .ok()
        }
    }
    pub fn BeginTime(
        &self,
    ) -> ::windows::core::Result<::windows::Foundation::IReference<::windows::Foundation::TimeSpan>>
    {
        let this = &::windows::core::Interface::cast::<ITimeline>(self)?;
        unsafe {
            let mut result__ = ::core::mem::MaybeUninit::zeroed();
            (::windows::core::Vtable::vtable(this).BeginTime)(
                ::windows::core::Vtable::as_raw(this),
                result__.as_mut_ptr(),
            )
            .from_abi::<::windows::Foundation::IReference<::windows::Foundation::TimeSpan>>(
                result__,
            )
        }
    }
    pub fn SetBeginTime<'a, P0, E0>(&self, value: P0) -> ::windows::core::Result<()>
    where
        P0: ::std::convert::TryInto<
            ::windows::core::InParam<
                'a,
                ::windows::Foundation::IReference<::windows::Foundation::TimeSpan>,
            >,
            Error = E0,
        >,
        E0: ::std::convert::Into<::windows::core::Error>,
    {
        let this = &::windows::core::Interface::cast::<ITimeline>(self)?;
        unsafe {
            (::windows::core::Vtable::vtable(this).SetBeginTime)(
                ::windows::core::Vtable::as_raw(this),
                value.try_into().map_err(|e| e.into())?.abi(),
            )
            .ok()
        }
    }
    pub fn Duration(&self) -> ::windows::core::Result<super::super::Duration> {
        let this = &::windows::core::Interface::cast::<ITimeline>(self)?;
        unsafe {
            let mut result__ = ::core::mem::MaybeUninit::zeroed();
            (::windows::core::Vtable::vtable(this).Duration)(
                ::windows::core::Vtable::as_raw(this),
                result__.as_mut_ptr(),
            )
            .from_abi::<super::super::Duration>(result__)
        }
    }
    pub fn SetDuration(&self, value: super::super::Duration) -> ::windows::core::Result<()> {
        let this = &::windows::core::Interface::cast::<ITimeline>(self)?;
        unsafe {
            (::windows::core::Vtable::vtable(this).SetDuration)(
                ::windows::core::Vtable::as_raw(this),
                value,
            )
            .ok()
        }
    }
    pub fn SpeedRatio(&self) -> ::windows::core::Result<f64> {
        let this = &::windows::core::Interface::cast::<ITimeline>(self)?;
        unsafe {
            let mut result__ = ::core::mem::MaybeUninit::zeroed();
            (::windows::core::Vtable::vtable(this).SpeedRatio)(
                ::windows::core::Vtable::as_raw(this),
                result__.as_mut_ptr(),
            )
            .from_abi::<f64>(result__)
        }
    }
    pub fn SetSpeedRatio(&self, value: f64) -> ::windows::core::Result<()> {
        let this = &::windows::core::Interface::cast::<ITimeline>(self)?;
        unsafe {
            (::windows::core::Vtable::vtable(this).SetSpeedRatio)(
                ::windows::core::Vtable::as_raw(this),
                value,
            )
            .ok()
        }
    }
    pub fn FillBehavior(&self) -> ::windows::core::Result<FillBehavior> {
        let this = &::windows::core::Interface::cast::<ITimeline>(self)?;
        unsafe {
            let mut result__ = ::core::mem::MaybeUninit::zeroed();
            (::windows::core::Vtable::vtable(this).FillBehavior)(
                ::windows::core::Vtable::as_raw(this),
                result__.as_mut_ptr(),
            )
            .from_abi::<FillBehavior>(result__)
        }
    }
    pub fn SetFillBehavior(&self, value: FillBehavior) -> ::windows::core::Result<()> {
        let this = &::windows::core::Interface::cast::<ITimeline>(self)?;
        unsafe {
            (::windows::core::Vtable::vtable(this).SetFillBehavior)(
                ::windows::core::Vtable::as_raw(this),
                value,
            )
            .ok()
        }
    }
    pub fn RepeatBehavior(&self) -> ::windows::core::Result<RepeatBehavior> {
        let this = &::windows::core::Interface::cast::<ITimeline>(self)?;
        unsafe {
            let mut result__ = ::core::mem::MaybeUninit::zeroed();
            (::windows::core::Vtable::vtable(this).RepeatBehavior)(
                ::windows::core::Vtable::as_raw(this),
                result__.as_mut_ptr(),
            )
            .from_abi::<RepeatBehavior>(result__)
        }
    }
    pub fn SetRepeatBehavior(&self, value: RepeatBehavior) -> ::windows::core::Result<()> {
        let this = &::windows::core::Interface::cast::<ITimeline>(self)?;
        unsafe {
            (::windows::core::Vtable::vtable(this).SetRepeatBehavior)(
                ::windows::core::Vtable::as_raw(this),
                value,
            )
            .ok()
        }
    }
    pub fn Completed(
        &self,
        handler: &::windows::Foundation::EventHandler<::windows::core::IInspectable>,
    ) -> ::windows::core::Result<::windows::Foundation::EventRegistrationToken> {
        let this = &::windows::core::Interface::cast::<ITimeline>(self)?;
        unsafe {
            let mut result__ = ::core::mem::MaybeUninit::zeroed();
            (::windows::core::Vtable::vtable(this).Completed)(
                ::windows::core::Vtable::as_raw(this),
                ::core::mem::transmute_copy(handler),
                result__.as_mut_ptr(),
            )
            .from_abi::<::windows::Foundation::EventRegistrationToken>(result__)
        }
    }
    pub fn RemoveCompleted(
        &self,
        token: ::windows::Foundation::EventRegistrationToken,
    ) -> ::windows::core::Result<()> {
        let this = &::windows::core::Interface::cast::<ITimeline>(self)?;
        unsafe {
            (::windows::core::Vtable::vtable(this).RemoveCompleted)(
                ::windows::core::Vtable::as_raw(this),
                token,
            )
            .ok()
        }
    }
    #[doc(hidden)]
    pub fn IPointAnimationUsingKeyFramesStatics<
        R,
        F: FnOnce(&IPointAnimationUsingKeyFramesStatics) -> ::windows::core::Result<R>,
    >(
        callback: F,
    ) -> ::windows::core::Result<R> {
        static SHARED: ::windows::core::FactoryCache<
            PointAnimationUsingKeyFrames,
            IPointAnimationUsingKeyFramesStatics,
        > = ::windows::core::FactoryCache::new();
        SHARED.call(callback)
    }
}
impl ::core::clone::Clone for PointAnimationUsingKeyFrames {
    fn clone(&self) -> Self {
        Self(self.0.clone())
    }
}
impl ::core::cmp::PartialEq for PointAnimationUsingKeyFrames {
    fn eq(&self, other: &Self) -> bool {
        self.0 == other.0
    }
}
impl ::core::cmp::Eq for PointAnimationUsingKeyFrames {}
impl ::core::fmt::Debug for PointAnimationUsingKeyFrames {
    fn fmt(&self, f: &mut ::core::fmt::Formatter<'_>) -> ::core::fmt::Result {
        f.debug_tuple("PointAnimationUsingKeyFrames").field(&self.0).finish()
    }
}
unsafe impl ::windows::core::RuntimeType for PointAnimationUsingKeyFrames {
    const SIGNATURE : ::windows::core::ConstBuffer = ::windows::core::ConstBuffer::from_slice ( b"rc(Microsoft.UI.Xaml.Media.Animation.PointAnimationUsingKeyFrames;{bdd63992-df13-5514-8611-4952f722f6d0})" ) ;
    type DefaultType = ::core::option::Option<Self>;
    fn from_default(from: &Self::DefaultType) -> ::windows::core::Result<Self> {
        from.as_ref().cloned().ok_or(::windows::core::Error::OK)
    }
}
unsafe impl ::windows::core::Vtable for PointAnimationUsingKeyFrames {
    type Vtable = IPointAnimationUsingKeyFrames_Vtbl;
}
unsafe impl ::windows::core::Interface for PointAnimationUsingKeyFrames {
    const IID: ::windows::core::GUID =
        <IPointAnimationUsingKeyFrames as ::windows::core::Interface>::IID;
}
impl ::windows::core::RuntimeName for PointAnimationUsingKeyFrames {
    const NAME: &'static str = "Microsoft.UI.Xaml.Media.Animation.PointAnimationUsingKeyFrames";
}
::windows::core::interface_hierarchy!(
    PointAnimationUsingKeyFrames,
    ::windows::core::IUnknown,
    ::windows::core::IInspectable
);
impl ::core::convert::From<PointAnimationUsingKeyFrames> for Timeline {
    fn from(value: PointAnimationUsingKeyFrames) -> Self {
        ::core::convert::From::from(&value)
    }
}
impl ::core::convert::From<&PointAnimationUsingKeyFrames> for Timeline {
    fn from(value: &PointAnimationUsingKeyFrames) -> Self {
        ::windows::core::Interface::cast(value).unwrap()
    }
}
impl<'a> ::core::convert::From<&PointAnimationUsingKeyFrames>
    for ::windows::core::InParam<'a, Timeline>
{
    fn from(value: &PointAnimationUsingKeyFrames) -> Self {
        ::windows::core::InParam::owned(value.into())
    }
}
impl ::core::convert::From<PointAnimationUsingKeyFrames> for super::super::DependencyObject {
    fn from(value: PointAnimationUsingKeyFrames) -> Self {
        ::core::convert::From::from(&value)
    }
}
impl ::core::convert::From<&PointAnimationUsingKeyFrames> for super::super::DependencyObject {
    fn from(value: &PointAnimationUsingKeyFrames) -> Self {
        ::windows::core::Interface::cast(value).unwrap()
    }
}
impl<'a> ::core::convert::From<&PointAnimationUsingKeyFrames>
    for ::windows::core::InParam<'a, super::super::DependencyObject>
{
    fn from(value: &PointAnimationUsingKeyFrames) -> Self {
        ::windows::core::InParam::owned(value.into())
    }
}
unsafe impl ::core::marker::Send for PointAnimationUsingKeyFrames {}
unsafe impl ::core::marker::Sync for PointAnimationUsingKeyFrames {}
#[doc = "*Required features: `\"UI_Xaml_Media_Animation\"`*"]
#[repr(transparent)]
pub struct PointKeyFrame(::windows::core::IUnknown);
impl PointKeyFrame {
    pub fn GetValue(
        &self,
        dp: &super::super::DependencyProperty,
    ) -> ::windows::core::Result<::windows::core::IInspectable> {
        let this = &::windows::core::Interface::cast::<super::super::IDependencyObject>(self)?;
        unsafe {
            let mut result__ = ::core::mem::MaybeUninit::zeroed();
            (::windows::core::Vtable::vtable(this).GetValue)(
                ::windows::core::Vtable::as_raw(this),
                ::core::mem::transmute_copy(dp),
                result__.as_mut_ptr(),
            )
            .from_abi::<::windows::core::IInspectable>(result__)
        }
    }
    pub fn SetValue<'a, P0>(
        &self,
        dp: &super::super::DependencyProperty,
        value: P0,
    ) -> ::windows::core::Result<()>
    where
        P0: ::std::convert::Into<::windows::core::InParam<'a, ::windows::core::IInspectable>>,
    {
        let this = &::windows::core::Interface::cast::<super::super::IDependencyObject>(self)?;
        unsafe {
            (::windows::core::Vtable::vtable(this).SetValue)(
                ::windows::core::Vtable::as_raw(this),
                ::core::mem::transmute_copy(dp),
                value.into().abi(),
            )
            .ok()
        }
    }
    pub fn ClearValue(&self, dp: &super::super::DependencyProperty) -> ::windows::core::Result<()> {
        let this = &::windows::core::Interface::cast::<super::super::IDependencyObject>(self)?;
        unsafe {
            (::windows::core::Vtable::vtable(this).ClearValue)(
                ::windows::core::Vtable::as_raw(this),
                ::core::mem::transmute_copy(dp),
            )
            .ok()
        }
    }
    pub fn ReadLocalValue(
        &self,
        dp: &super::super::DependencyProperty,
    ) -> ::windows::core::Result<::windows::core::IInspectable> {
        let this = &::windows::core::Interface::cast::<super::super::IDependencyObject>(self)?;
        unsafe {
            let mut result__ = ::core::mem::MaybeUninit::zeroed();
            (::windows::core::Vtable::vtable(this).ReadLocalValue)(
                ::windows::core::Vtable::as_raw(this),
                ::core::mem::transmute_copy(dp),
                result__.as_mut_ptr(),
            )
            .from_abi::<::windows::core::IInspectable>(result__)
        }
    }
    pub fn GetAnimationBaseValue(
        &self,
        dp: &super::super::DependencyProperty,
    ) -> ::windows::core::Result<::windows::core::IInspectable> {
        let this = &::windows::core::Interface::cast::<super::super::IDependencyObject>(self)?;
        unsafe {
            let mut result__ = ::core::mem::MaybeUninit::zeroed();
            (::windows::core::Vtable::vtable(this).GetAnimationBaseValue)(
                ::windows::core::Vtable::as_raw(this),
                ::core::mem::transmute_copy(dp),
                result__.as_mut_ptr(),
            )
            .from_abi::<::windows::core::IInspectable>(result__)
        }
    }
    pub fn RegisterPropertyChangedCallback(
        &self,
        dp: &super::super::DependencyProperty,
        callback: &super::super::DependencyPropertyChangedCallback,
    ) -> ::windows::core::Result<i64> {
        let this = &::windows::core::Interface::cast::<super::super::IDependencyObject>(self)?;
        unsafe {
            let mut result__ = ::core::mem::MaybeUninit::zeroed();
            (::windows::core::Vtable::vtable(this).RegisterPropertyChangedCallback)(
                ::windows::core::Vtable::as_raw(this),
                ::core::mem::transmute_copy(dp),
                ::core::mem::transmute_copy(callback),
                result__.as_mut_ptr(),
            )
            .from_abi::<i64>(result__)
        }
    }
    pub fn UnregisterPropertyChangedCallback(
        &self,
        dp: &super::super::DependencyProperty,
        token: i64,
    ) -> ::windows::core::Result<()> {
        let this = &::windows::core::Interface::cast::<super::super::IDependencyObject>(self)?;
        unsafe {
            (::windows::core::Vtable::vtable(this).UnregisterPropertyChangedCallback)(
                ::windows::core::Vtable::as_raw(this),
                ::core::mem::transmute_copy(dp),
                token,
            )
            .ok()
        }
    }
    pub fn Dispatcher(&self) -> ::windows::core::Result<::windows::UI::Core::CoreDispatcher> {
        let this = &::windows::core::Interface::cast::<super::super::IDependencyObject>(self)?;
        unsafe {
            let mut result__ = ::core::mem::MaybeUninit::zeroed();
            (::windows::core::Vtable::vtable(this).Dispatcher)(
                ::windows::core::Vtable::as_raw(this),
                result__.as_mut_ptr(),
            )
            .from_abi::<::windows::UI::Core::CoreDispatcher>(result__)
        }
    }
    #[doc = "*Required features: `\"UI_Dispatching\"`*"]
    #[cfg(feature = "UI_Dispatching")]
    pub fn DispatcherQueue(
        &self,
    ) -> ::windows::core::Result<super::super::super::Dispatching::DispatcherQueue> {
        let this = &::windows::core::Interface::cast::<super::super::IDependencyObject>(self)?;
        unsafe {
            let mut result__ = ::core::mem::MaybeUninit::zeroed();
            (::windows::core::Vtable::vtable(this).DispatcherQueue)(
                ::windows::core::Vtable::as_raw(this),
                result__.as_mut_ptr(),
            )
            .from_abi::<super::super::super::Dispatching::DispatcherQueue>(result__)
        }
    }
    pub fn Value(&self) -> ::windows::core::Result<::windows::Foundation::Point> {
        let this = self;
        unsafe {
            let mut result__ = ::core::mem::MaybeUninit::zeroed();
            (::windows::core::Vtable::vtable(this).Value)(
                ::windows::core::Vtable::as_raw(this),
                result__.as_mut_ptr(),
            )
            .from_abi::<::windows::Foundation::Point>(result__)
        }
    }
    pub fn SetValue2(&self, value: ::windows::Foundation::Point) -> ::windows::core::Result<()> {
        let this = self;
        unsafe {
            (::windows::core::Vtable::vtable(this).SetValue)(
                ::windows::core::Vtable::as_raw(this),
                value,
            )
            .ok()
        }
    }
    pub fn KeyTime(&self) -> ::windows::core::Result<KeyTime> {
        let this = self;
        unsafe {
            let mut result__ = ::core::mem::MaybeUninit::zeroed();
            (::windows::core::Vtable::vtable(this).KeyTime)(
                ::windows::core::Vtable::as_raw(this),
                result__.as_mut_ptr(),
            )
            .from_abi::<KeyTime>(result__)
        }
    }
    pub fn SetKeyTime(&self, value: KeyTime) -> ::windows::core::Result<()> {
        let this = self;
        unsafe {
            (::windows::core::Vtable::vtable(this).SetKeyTime)(
                ::windows::core::Vtable::as_raw(this),
                value,
            )
            .ok()
        }
    }
    pub fn ValueProperty() -> ::windows::core::Result<super::super::DependencyProperty> {
        Self::IPointKeyFrameStatics(|this| unsafe {
            let mut result__ = ::core::mem::MaybeUninit::zeroed();
            (::windows::core::Vtable::vtable(this).ValueProperty)(
                ::windows::core::Vtable::as_raw(this),
                result__.as_mut_ptr(),
            )
            .from_abi::<super::super::DependencyProperty>(result__)
        })
    }
    pub fn KeyTimeProperty() -> ::windows::core::Result<super::super::DependencyProperty> {
        Self::IPointKeyFrameStatics(|this| unsafe {
            let mut result__ = ::core::mem::MaybeUninit::zeroed();
            (::windows::core::Vtable::vtable(this).KeyTimeProperty)(
                ::windows::core::Vtable::as_raw(this),
                result__.as_mut_ptr(),
            )
            .from_abi::<super::super::DependencyProperty>(result__)
        })
    }
    #[doc(hidden)]
    pub fn IPointKeyFrameStatics<
        R,
        F: FnOnce(&IPointKeyFrameStatics) -> ::windows::core::Result<R>,
    >(
        callback: F,
    ) -> ::windows::core::Result<R> {
        static SHARED: ::windows::core::FactoryCache<PointKeyFrame, IPointKeyFrameStatics> =
            ::windows::core::FactoryCache::new();
        SHARED.call(callback)
    }
}
impl ::core::clone::Clone for PointKeyFrame {
    fn clone(&self) -> Self {
        Self(self.0.clone())
    }
}
impl ::core::cmp::PartialEq for PointKeyFrame {
    fn eq(&self, other: &Self) -> bool {
        self.0 == other.0
    }
}
impl ::core::cmp::Eq for PointKeyFrame {}
impl ::core::fmt::Debug for PointKeyFrame {
    fn fmt(&self, f: &mut ::core::fmt::Formatter<'_>) -> ::core::fmt::Result {
        f.debug_tuple("PointKeyFrame").field(&self.0).finish()
    }
}
unsafe impl ::windows::core::RuntimeType for PointKeyFrame {
    const SIGNATURE : ::windows::core::ConstBuffer = ::windows::core::ConstBuffer::from_slice ( b"rc(Microsoft.UI.Xaml.Media.Animation.PointKeyFrame;{59d5c07d-a3a7-5450-9dfb-4b7e77d58f93})" ) ;
    type DefaultType = ::core::option::Option<Self>;
    fn from_default(from: &Self::DefaultType) -> ::windows::core::Result<Self> {
        from.as_ref().cloned().ok_or(::windows::core::Error::OK)
    }
}
unsafe impl ::windows::core::Vtable for PointKeyFrame {
    type Vtable = IPointKeyFrame_Vtbl;
}
unsafe impl ::windows::core::Interface for PointKeyFrame {
    const IID: ::windows::core::GUID = <IPointKeyFrame as ::windows::core::Interface>::IID;
}
impl ::windows::core::RuntimeName for PointKeyFrame {
    const NAME: &'static str = "Microsoft.UI.Xaml.Media.Animation.PointKeyFrame";
}
::windows::core::interface_hierarchy!(
    PointKeyFrame,
    ::windows::core::IUnknown,
    ::windows::core::IInspectable
);
impl ::core::convert::From<PointKeyFrame> for super::super::DependencyObject {
    fn from(value: PointKeyFrame) -> Self {
        ::core::convert::From::from(&value)
    }
}
impl ::core::convert::From<&PointKeyFrame> for super::super::DependencyObject {
    fn from(value: &PointKeyFrame) -> Self {
        ::windows::core::Interface::cast(value).unwrap()
    }
}
impl<'a> ::core::convert::From<&PointKeyFrame>
    for ::windows::core::InParam<'a, super::super::DependencyObject>
{
    fn from(value: &PointKeyFrame) -> Self {
        ::windows::core::InParam::owned(value.into())
    }
}
unsafe impl ::core::marker::Send for PointKeyFrame {}
unsafe impl ::core::marker::Sync for PointKeyFrame {}
#[doc = "*Required features: `\"UI_Xaml_Media_Animation\"`*"]
#[repr(transparent)]
pub struct PointKeyFrameCollection(::windows::core::IUnknown);
impl PointKeyFrameCollection {
    pub fn new() -> ::windows::core::Result<Self> {
        Self::IActivationFactory(|f| f.ActivateInstance::<Self>())
    }
    fn IActivationFactory<
        R,
        F: FnOnce(&::windows::core::IGenericFactory) -> ::windows::core::Result<R>,
    >(
        callback: F,
    ) -> ::windows::core::Result<R> {
        static SHARED: ::windows::core::FactoryCache<
            PointKeyFrameCollection,
            ::windows::core::IGenericFactory,
        > = ::windows::core::FactoryCache::new();
        SHARED.call(callback)
    }
    pub fn First(
        &self,
    ) -> ::windows::core::Result<::windows::Foundation::Collections::IIterator<PointKeyFrame>> {
        let this = &::windows::core::Interface::cast::<
            ::windows::Foundation::Collections::IIterable<PointKeyFrame>,
        >(self)?;
        unsafe {
            let mut result__ = ::core::mem::MaybeUninit::zeroed();
            (::windows::core::Vtable::vtable(this).First)(
                ::windows::core::Vtable::as_raw(this),
                result__.as_mut_ptr(),
            )
            .from_abi::<::windows::Foundation::Collections::IIterator<PointKeyFrame>>(result__)
        }
    }
    pub fn GetAt(&self, index: u32) -> ::windows::core::Result<PointKeyFrame> {
        let this = self;
        unsafe {
            let mut result__ = ::core::mem::MaybeUninit::zeroed();
            (::windows::core::Vtable::vtable(this).GetAt)(
                ::windows::core::Vtable::as_raw(this),
                index,
                result__.as_mut_ptr(),
            )
            .from_abi::<PointKeyFrame>(result__)
        }
    }
    pub fn Size(&self) -> ::windows::core::Result<u32> {
        let this = self;
        unsafe {
            let mut result__ = ::core::mem::MaybeUninit::zeroed();
            (::windows::core::Vtable::vtable(this).Size)(
                ::windows::core::Vtable::as_raw(this),
                result__.as_mut_ptr(),
            )
            .from_abi::<u32>(result__)
        }
    }
    pub fn GetView(
        &self,
    ) -> ::windows::core::Result<::windows::Foundation::Collections::IVectorView<PointKeyFrame>>
    {
        let this = self;
        unsafe {
            let mut result__ = ::core::mem::MaybeUninit::zeroed();
            (::windows::core::Vtable::vtable(this).GetView)(
                ::windows::core::Vtable::as_raw(this),
                result__.as_mut_ptr(),
            )
            .from_abi::<::windows::Foundation::Collections::IVectorView<PointKeyFrame>>(result__)
        }
    }
    pub fn IndexOf<'a, P0>(&self, value: P0, index: &mut u32) -> ::windows::core::Result<bool>
    where
        P0: ::std::convert::Into<::windows::core::InParam<'a, PointKeyFrame>>,
    {
        let this = self;
        unsafe {
            let mut result__ = ::core::mem::MaybeUninit::zeroed();
            (::windows::core::Vtable::vtable(this).IndexOf)(
                ::windows::core::Vtable::as_raw(this),
                value.into().abi(),
                index,
                result__.as_mut_ptr(),
            )
            .from_abi::<bool>(result__)
        }
    }
    pub fn SetAt<'a, P0>(&self, index: u32, value: P0) -> ::windows::core::Result<()>
    where
        P0: ::std::convert::Into<::windows::core::InParam<'a, PointKeyFrame>>,
    {
        let this = self;
        unsafe {
            (::windows::core::Vtable::vtable(this).SetAt)(
                ::windows::core::Vtable::as_raw(this),
                index,
                value.into().abi(),
            )
            .ok()
        }
    }
    pub fn InsertAt<'a, P0>(&self, index: u32, value: P0) -> ::windows::core::Result<()>
    where
        P0: ::std::convert::Into<::windows::core::InParam<'a, PointKeyFrame>>,
    {
        let this = self;
        unsafe {
            (::windows::core::Vtable::vtable(this).InsertAt)(
                ::windows::core::Vtable::as_raw(this),
                index,
                value.into().abi(),
            )
            .ok()
        }
    }
    pub fn RemoveAt(&self, index: u32) -> ::windows::core::Result<()> {
        let this = self;
        unsafe {
            (::windows::core::Vtable::vtable(this).RemoveAt)(
                ::windows::core::Vtable::as_raw(this),
                index,
            )
            .ok()
        }
    }
    pub fn Append<'a, P0>(&self, value: P0) -> ::windows::core::Result<()>
    where
        P0: ::std::convert::Into<::windows::core::InParam<'a, PointKeyFrame>>,
    {
        let this = self;
        unsafe {
            (::windows::core::Vtable::vtable(this).Append)(
                ::windows::core::Vtable::as_raw(this),
                value.into().abi(),
            )
            .ok()
        }
    }
    pub fn RemoveAtEnd(&self) -> ::windows::core::Result<()> {
        let this = self;
        unsafe {
            (::windows::core::Vtable::vtable(this).RemoveAtEnd)(::windows::core::Vtable::as_raw(
                this,
            ))
            .ok()
        }
    }
    pub fn Clear(&self) -> ::windows::core::Result<()> {
        let this = self;
        unsafe {
            (::windows::core::Vtable::vtable(this).Clear)(::windows::core::Vtable::as_raw(this))
                .ok()
        }
    }
    pub fn GetMany(
        &self,
        startindex: u32,
        items: &mut [::core::option::Option<PointKeyFrame>],
    ) -> ::windows::core::Result<u32> {
        let this = self;
        unsafe {
            let mut result__ = ::core::mem::MaybeUninit::zeroed();
            (::windows::core::Vtable::vtable(this).GetMany)(
                ::windows::core::Vtable::as_raw(this),
                startindex,
                items.len() as u32,
                ::core::mem::transmute_copy(&items),
                result__.as_mut_ptr(),
            )
            .from_abi::<u32>(result__)
        }
    }
    pub fn ReplaceAll(
        &self,
        items: &[::core::option::Option<PointKeyFrame>],
    ) -> ::windows::core::Result<()> {
        let this = self;
        unsafe {
            (::windows::core::Vtable::vtable(this).ReplaceAll)(
                ::windows::core::Vtable::as_raw(this),
                items.len() as u32,
                ::core::mem::transmute(items.as_ptr()),
            )
            .ok()
        }
    }
}
impl ::core::clone::Clone for PointKeyFrameCollection {
    fn clone(&self) -> Self {
        Self(self.0.clone())
    }
}
impl ::core::cmp::PartialEq for PointKeyFrameCollection {
    fn eq(&self, other: &Self) -> bool {
        self.0 == other.0
    }
}
impl ::core::cmp::Eq for PointKeyFrameCollection {}
impl ::core::fmt::Debug for PointKeyFrameCollection {
    fn fmt(&self, f: &mut ::core::fmt::Formatter<'_>) -> ::core::fmt::Result {
        f.debug_tuple("PointKeyFrameCollection").field(&self.0).finish()
    }
}
unsafe impl ::windows::core::RuntimeType for PointKeyFrameCollection {
    const SIGNATURE : ::windows::core::ConstBuffer = ::windows::core::ConstBuffer::from_slice ( b"rc(Microsoft.UI.Xaml.Media.Animation.PointKeyFrameCollection;pinterface({913337e9-11a1-4345-a3a2-4e7f956e222d};rc(Microsoft.UI.Xaml.Media.Animation.PointKeyFrame;{59d5c07d-a3a7-5450-9dfb-4b7e77d58f93})))" ) ;
    type DefaultType = ::core::option::Option<Self>;
    fn from_default(from: &Self::DefaultType) -> ::windows::core::Result<Self> {
        from.as_ref().cloned().ok_or(::windows::core::Error::OK)
    }
}
unsafe impl ::windows::core::Vtable for PointKeyFrameCollection {
    type Vtable = ::windows::Foundation::Collections::IVector_Vtbl<PointKeyFrame>;
}
unsafe impl ::windows::core::Interface for PointKeyFrameCollection {
    const IID : ::windows::core::GUID = < ::windows::Foundation::Collections:: IVector :: < PointKeyFrame > as::windows::core::Interface >::IID ;
}
impl ::windows::core::RuntimeName for PointKeyFrameCollection {
    const NAME: &'static str = "Microsoft.UI.Xaml.Media.Animation.PointKeyFrameCollection";
}
impl ::core::iter::IntoIterator for PointKeyFrameCollection {
    type Item = PointKeyFrame;
    type IntoIter = ::windows::Foundation::Collections::VectorIterator<Self::Item>;
    fn into_iter(self) -> Self::IntoIter {
        ::core::iter::IntoIterator::into_iter(&self)
    }
}
impl ::core::iter::IntoIterator for &PointKeyFrameCollection {
    type Item = PointKeyFrame;
    type IntoIter = ::windows::Foundation::Collections::VectorIterator<Self::Item>;
    fn into_iter(self) -> Self::IntoIter {
        ::windows::Foundation::Collections::VectorIterator::new(
            ::core::convert::TryInto::try_into(self).ok(),
        )
    }
}
::windows::core::interface_hierarchy!(
    PointKeyFrameCollection,
    ::windows::core::IUnknown,
    ::windows::core::IInspectable
);
impl ::core::convert::TryFrom<PointKeyFrameCollection>
    for ::windows::Foundation::Collections::IIterable<PointKeyFrame>
{
    type Error = ::windows::core::Error;
    fn try_from(value: PointKeyFrameCollection) -> ::windows::core::Result<Self> {
        ::core::convert::TryFrom::try_from(&value)
    }
}
impl ::core::convert::TryFrom<&PointKeyFrameCollection>
    for ::windows::Foundation::Collections::IIterable<PointKeyFrame>
{
    type Error = ::windows::core::Error;
    fn try_from(value: &PointKeyFrameCollection) -> ::windows::core::Result<Self> {
        ::windows::core::Interface::cast(value)
    }
}
impl<'a> ::core::convert::TryFrom<&PointKeyFrameCollection>
    for ::windows::core::InParam<'a, ::windows::Foundation::Collections::IIterable<PointKeyFrame>>
{
    type Error = ::windows::core::Error;
    fn try_from(value: &PointKeyFrameCollection) -> ::windows::core::Result<Self> {
        let item = ::std::convert::TryInto::try_into(value)?;
        Ok(::windows::core::InParam::owned(item))
    }
}
impl ::core::convert::TryFrom<PointKeyFrameCollection>
    for ::windows::Foundation::Collections::IVector<PointKeyFrame>
{
    type Error = ::windows::core::Error;
    fn try_from(value: PointKeyFrameCollection) -> ::windows::core::Result<Self> {
        ::core::convert::TryFrom::try_from(&value)
    }
}
impl ::core::convert::TryFrom<&PointKeyFrameCollection>
    for ::windows::Foundation::Collections::IVector<PointKeyFrame>
{
    type Error = ::windows::core::Error;
    fn try_from(value: &PointKeyFrameCollection) -> ::windows::core::Result<Self> {
        ::windows::core::Interface::cast(value)
    }
}
impl<'a> ::core::convert::TryFrom<&PointKeyFrameCollection>
    for ::windows::core::InParam<'a, ::windows::Foundation::Collections::IVector<PointKeyFrame>>
{
    type Error = ::windows::core::Error;
    fn try_from(value: &PointKeyFrameCollection) -> ::windows::core::Result<Self> {
        let item = ::std::convert::TryInto::try_into(value)?;
        Ok(::windows::core::InParam::owned(item))
    }
}
unsafe impl ::core::marker::Send for PointKeyFrameCollection {}
unsafe impl ::core::marker::Sync for PointKeyFrameCollection {}
#[doc = "*Required features: `\"UI_Xaml_Media_Animation\"`*"]
#[repr(transparent)]
pub struct PointerDownThemeAnimation(::windows::core::IUnknown);
impl PointerDownThemeAnimation {
    pub fn new() -> ::windows::core::Result<Self> {
        Self::IActivationFactory(|f| f.ActivateInstance::<Self>())
    }
    fn IActivationFactory<
        R,
        F: FnOnce(&::windows::core::IGenericFactory) -> ::windows::core::Result<R>,
    >(
        callback: F,
    ) -> ::windows::core::Result<R> {
        static SHARED: ::windows::core::FactoryCache<
            PointerDownThemeAnimation,
            ::windows::core::IGenericFactory,
        > = ::windows::core::FactoryCache::new();
        SHARED.call(callback)
    }
    pub fn GetValue(
        &self,
        dp: &super::super::DependencyProperty,
    ) -> ::windows::core::Result<::windows::core::IInspectable> {
        let this = &::windows::core::Interface::cast::<super::super::IDependencyObject>(self)?;
        unsafe {
            let mut result__ = ::core::mem::MaybeUninit::zeroed();
            (::windows::core::Vtable::vtable(this).GetValue)(
                ::windows::core::Vtable::as_raw(this),
                ::core::mem::transmute_copy(dp),
                result__.as_mut_ptr(),
            )
            .from_abi::<::windows::core::IInspectable>(result__)
        }
    }
    pub fn SetValue<'a, P0>(
        &self,
        dp: &super::super::DependencyProperty,
        value: P0,
    ) -> ::windows::core::Result<()>
    where
        P0: ::std::convert::Into<::windows::core::InParam<'a, ::windows::core::IInspectable>>,
    {
        let this = &::windows::core::Interface::cast::<super::super::IDependencyObject>(self)?;
        unsafe {
            (::windows::core::Vtable::vtable(this).SetValue)(
                ::windows::core::Vtable::as_raw(this),
                ::core::mem::transmute_copy(dp),
                value.into().abi(),
            )
            .ok()
        }
    }
    pub fn ClearValue(&self, dp: &super::super::DependencyProperty) -> ::windows::core::Result<()> {
        let this = &::windows::core::Interface::cast::<super::super::IDependencyObject>(self)?;
        unsafe {
            (::windows::core::Vtable::vtable(this).ClearValue)(
                ::windows::core::Vtable::as_raw(this),
                ::core::mem::transmute_copy(dp),
            )
            .ok()
        }
    }
    pub fn ReadLocalValue(
        &self,
        dp: &super::super::DependencyProperty,
    ) -> ::windows::core::Result<::windows::core::IInspectable> {
        let this = &::windows::core::Interface::cast::<super::super::IDependencyObject>(self)?;
        unsafe {
            let mut result__ = ::core::mem::MaybeUninit::zeroed();
            (::windows::core::Vtable::vtable(this).ReadLocalValue)(
                ::windows::core::Vtable::as_raw(this),
                ::core::mem::transmute_copy(dp),
                result__.as_mut_ptr(),
            )
            .from_abi::<::windows::core::IInspectable>(result__)
        }
    }
    pub fn GetAnimationBaseValue(
        &self,
        dp: &super::super::DependencyProperty,
    ) -> ::windows::core::Result<::windows::core::IInspectable> {
        let this = &::windows::core::Interface::cast::<super::super::IDependencyObject>(self)?;
        unsafe {
            let mut result__ = ::core::mem::MaybeUninit::zeroed();
            (::windows::core::Vtable::vtable(this).GetAnimationBaseValue)(
                ::windows::core::Vtable::as_raw(this),
                ::core::mem::transmute_copy(dp),
                result__.as_mut_ptr(),
            )
            .from_abi::<::windows::core::IInspectable>(result__)
        }
    }
    pub fn RegisterPropertyChangedCallback(
        &self,
        dp: &super::super::DependencyProperty,
        callback: &super::super::DependencyPropertyChangedCallback,
    ) -> ::windows::core::Result<i64> {
        let this = &::windows::core::Interface::cast::<super::super::IDependencyObject>(self)?;
        unsafe {
            let mut result__ = ::core::mem::MaybeUninit::zeroed();
            (::windows::core::Vtable::vtable(this).RegisterPropertyChangedCallback)(
                ::windows::core::Vtable::as_raw(this),
                ::core::mem::transmute_copy(dp),
                ::core::mem::transmute_copy(callback),
                result__.as_mut_ptr(),
            )
            .from_abi::<i64>(result__)
        }
    }
    pub fn UnregisterPropertyChangedCallback(
        &self,
        dp: &super::super::DependencyProperty,
        token: i64,
    ) -> ::windows::core::Result<()> {
        let this = &::windows::core::Interface::cast::<super::super::IDependencyObject>(self)?;
        unsafe {
            (::windows::core::Vtable::vtable(this).UnregisterPropertyChangedCallback)(
                ::windows::core::Vtable::as_raw(this),
                ::core::mem::transmute_copy(dp),
                token,
            )
            .ok()
        }
    }
    pub fn Dispatcher(&self) -> ::windows::core::Result<::windows::UI::Core::CoreDispatcher> {
        let this = &::windows::core::Interface::cast::<super::super::IDependencyObject>(self)?;
        unsafe {
            let mut result__ = ::core::mem::MaybeUninit::zeroed();
            (::windows::core::Vtable::vtable(this).Dispatcher)(
                ::windows::core::Vtable::as_raw(this),
                result__.as_mut_ptr(),
            )
            .from_abi::<::windows::UI::Core::CoreDispatcher>(result__)
        }
    }
    #[doc = "*Required features: `\"UI_Dispatching\"`*"]
    #[cfg(feature = "UI_Dispatching")]
    pub fn DispatcherQueue(
        &self,
    ) -> ::windows::core::Result<super::super::super::Dispatching::DispatcherQueue> {
        let this = &::windows::core::Interface::cast::<super::super::IDependencyObject>(self)?;
        unsafe {
            let mut result__ = ::core::mem::MaybeUninit::zeroed();
            (::windows::core::Vtable::vtable(this).DispatcherQueue)(
                ::windows::core::Vtable::as_raw(this),
                result__.as_mut_ptr(),
            )
            .from_abi::<super::super::super::Dispatching::DispatcherQueue>(result__)
        }
    }
    pub fn TargetName(&self) -> ::windows::core::Result<::windows::core::HSTRING> {
        let this = self;
        unsafe {
            let mut result__ = ::core::mem::MaybeUninit::zeroed();
            (::windows::core::Vtable::vtable(this).TargetName)(
                ::windows::core::Vtable::as_raw(this),
                result__.as_mut_ptr(),
            )
            .from_abi::<::windows::core::HSTRING>(result__)
        }
    }
    pub fn SetTargetName(&self, value: &::windows::core::HSTRING) -> ::windows::core::Result<()> {
        let this = self;
        unsafe {
            (::windows::core::Vtable::vtable(this).SetTargetName)(
                ::windows::core::Vtable::as_raw(this),
                ::core::mem::transmute_copy(value),
            )
            .ok()
        }
    }
    pub fn TargetNameProperty() -> ::windows::core::Result<super::super::DependencyProperty> {
        Self::IPointerDownThemeAnimationStatics(|this| unsafe {
            let mut result__ = ::core::mem::MaybeUninit::zeroed();
            (::windows::core::Vtable::vtable(this).TargetNameProperty)(
                ::windows::core::Vtable::as_raw(this),
                result__.as_mut_ptr(),
            )
            .from_abi::<super::super::DependencyProperty>(result__)
        })
    }
    pub fn AutoReverse(&self) -> ::windows::core::Result<bool> {
        let this = &::windows::core::Interface::cast::<ITimeline>(self)?;
        unsafe {
            let mut result__ = ::core::mem::MaybeUninit::zeroed();
            (::windows::core::Vtable::vtable(this).AutoReverse)(
                ::windows::core::Vtable::as_raw(this),
                result__.as_mut_ptr(),
            )
            .from_abi::<bool>(result__)
        }
    }
    pub fn SetAutoReverse(&self, value: bool) -> ::windows::core::Result<()> {
        let this = &::windows::core::Interface::cast::<ITimeline>(self)?;
        unsafe {
            (::windows::core::Vtable::vtable(this).SetAutoReverse)(
                ::windows::core::Vtable::as_raw(this),
                value,
            )
            .ok()
        }
    }
    pub fn BeginTime(
        &self,
    ) -> ::windows::core::Result<::windows::Foundation::IReference<::windows::Foundation::TimeSpan>>
    {
        let this = &::windows::core::Interface::cast::<ITimeline>(self)?;
        unsafe {
            let mut result__ = ::core::mem::MaybeUninit::zeroed();
            (::windows::core::Vtable::vtable(this).BeginTime)(
                ::windows::core::Vtable::as_raw(this),
                result__.as_mut_ptr(),
            )
            .from_abi::<::windows::Foundation::IReference<::windows::Foundation::TimeSpan>>(
                result__,
            )
        }
    }
    pub fn SetBeginTime<'a, P0, E0>(&self, value: P0) -> ::windows::core::Result<()>
    where
        P0: ::std::convert::TryInto<
            ::windows::core::InParam<
                'a,
                ::windows::Foundation::IReference<::windows::Foundation::TimeSpan>,
            >,
            Error = E0,
        >,
        E0: ::std::convert::Into<::windows::core::Error>,
    {
        let this = &::windows::core::Interface::cast::<ITimeline>(self)?;
        unsafe {
            (::windows::core::Vtable::vtable(this).SetBeginTime)(
                ::windows::core::Vtable::as_raw(this),
                value.try_into().map_err(|e| e.into())?.abi(),
            )
            .ok()
        }
    }
    pub fn Duration(&self) -> ::windows::core::Result<super::super::Duration> {
        let this = &::windows::core::Interface::cast::<ITimeline>(self)?;
        unsafe {
            let mut result__ = ::core::mem::MaybeUninit::zeroed();
            (::windows::core::Vtable::vtable(this).Duration)(
                ::windows::core::Vtable::as_raw(this),
                result__.as_mut_ptr(),
            )
            .from_abi::<super::super::Duration>(result__)
        }
    }
    pub fn SetDuration(&self, value: super::super::Duration) -> ::windows::core::Result<()> {
        let this = &::windows::core::Interface::cast::<ITimeline>(self)?;
        unsafe {
            (::windows::core::Vtable::vtable(this).SetDuration)(
                ::windows::core::Vtable::as_raw(this),
                value,
            )
            .ok()
        }
    }
    pub fn SpeedRatio(&self) -> ::windows::core::Result<f64> {
        let this = &::windows::core::Interface::cast::<ITimeline>(self)?;
        unsafe {
            let mut result__ = ::core::mem::MaybeUninit::zeroed();
            (::windows::core::Vtable::vtable(this).SpeedRatio)(
                ::windows::core::Vtable::as_raw(this),
                result__.as_mut_ptr(),
            )
            .from_abi::<f64>(result__)
        }
    }
    pub fn SetSpeedRatio(&self, value: f64) -> ::windows::core::Result<()> {
        let this = &::windows::core::Interface::cast::<ITimeline>(self)?;
        unsafe {
            (::windows::core::Vtable::vtable(this).SetSpeedRatio)(
                ::windows::core::Vtable::as_raw(this),
                value,
            )
            .ok()
        }
    }
    pub fn FillBehavior(&self) -> ::windows::core::Result<FillBehavior> {
        let this = &::windows::core::Interface::cast::<ITimeline>(self)?;
        unsafe {
            let mut result__ = ::core::mem::MaybeUninit::zeroed();
            (::windows::core::Vtable::vtable(this).FillBehavior)(
                ::windows::core::Vtable::as_raw(this),
                result__.as_mut_ptr(),
            )
            .from_abi::<FillBehavior>(result__)
        }
    }
    pub fn SetFillBehavior(&self, value: FillBehavior) -> ::windows::core::Result<()> {
        let this = &::windows::core::Interface::cast::<ITimeline>(self)?;
        unsafe {
            (::windows::core::Vtable::vtable(this).SetFillBehavior)(
                ::windows::core::Vtable::as_raw(this),
                value,
            )
            .ok()
        }
    }
    pub fn RepeatBehavior(&self) -> ::windows::core::Result<RepeatBehavior> {
        let this = &::windows::core::Interface::cast::<ITimeline>(self)?;
        unsafe {
            let mut result__ = ::core::mem::MaybeUninit::zeroed();
            (::windows::core::Vtable::vtable(this).RepeatBehavior)(
                ::windows::core::Vtable::as_raw(this),
                result__.as_mut_ptr(),
            )
            .from_abi::<RepeatBehavior>(result__)
        }
    }
    pub fn SetRepeatBehavior(&self, value: RepeatBehavior) -> ::windows::core::Result<()> {
        let this = &::windows::core::Interface::cast::<ITimeline>(self)?;
        unsafe {
            (::windows::core::Vtable::vtable(this).SetRepeatBehavior)(
                ::windows::core::Vtable::as_raw(this),
                value,
            )
            .ok()
        }
    }
    pub fn Completed(
        &self,
        handler: &::windows::Foundation::EventHandler<::windows::core::IInspectable>,
    ) -> ::windows::core::Result<::windows::Foundation::EventRegistrationToken> {
        let this = &::windows::core::Interface::cast::<ITimeline>(self)?;
        unsafe {
            let mut result__ = ::core::mem::MaybeUninit::zeroed();
            (::windows::core::Vtable::vtable(this).Completed)(
                ::windows::core::Vtable::as_raw(this),
                ::core::mem::transmute_copy(handler),
                result__.as_mut_ptr(),
            )
            .from_abi::<::windows::Foundation::EventRegistrationToken>(result__)
        }
    }
    pub fn RemoveCompleted(
        &self,
        token: ::windows::Foundation::EventRegistrationToken,
    ) -> ::windows::core::Result<()> {
        let this = &::windows::core::Interface::cast::<ITimeline>(self)?;
        unsafe {
            (::windows::core::Vtable::vtable(this).RemoveCompleted)(
                ::windows::core::Vtable::as_raw(this),
                token,
            )
            .ok()
        }
    }
    #[doc(hidden)]
    pub fn IPointerDownThemeAnimationStatics<
        R,
        F: FnOnce(&IPointerDownThemeAnimationStatics) -> ::windows::core::Result<R>,
    >(
        callback: F,
    ) -> ::windows::core::Result<R> {
        static SHARED: ::windows::core::FactoryCache<
            PointerDownThemeAnimation,
            IPointerDownThemeAnimationStatics,
        > = ::windows::core::FactoryCache::new();
        SHARED.call(callback)
    }
}
impl ::core::clone::Clone for PointerDownThemeAnimation {
    fn clone(&self) -> Self {
        Self(self.0.clone())
    }
}
impl ::core::cmp::PartialEq for PointerDownThemeAnimation {
    fn eq(&self, other: &Self) -> bool {
        self.0 == other.0
    }
}
impl ::core::cmp::Eq for PointerDownThemeAnimation {}
impl ::core::fmt::Debug for PointerDownThemeAnimation {
    fn fmt(&self, f: &mut ::core::fmt::Formatter<'_>) -> ::core::fmt::Result {
        f.debug_tuple("PointerDownThemeAnimation").field(&self.0).finish()
    }
}
unsafe impl ::windows::core::RuntimeType for PointerDownThemeAnimation {
    const SIGNATURE : ::windows::core::ConstBuffer = ::windows::core::ConstBuffer::from_slice ( b"rc(Microsoft.UI.Xaml.Media.Animation.PointerDownThemeAnimation;{abdd1acc-40df-595d-be68-0362fe681b91})" ) ;
    type DefaultType = ::core::option::Option<Self>;
    fn from_default(from: &Self::DefaultType) -> ::windows::core::Result<Self> {
        from.as_ref().cloned().ok_or(::windows::core::Error::OK)
    }
}
unsafe impl ::windows::core::Vtable for PointerDownThemeAnimation {
    type Vtable = IPointerDownThemeAnimation_Vtbl;
}
unsafe impl ::windows::core::Interface for PointerDownThemeAnimation {
    const IID: ::windows::core::GUID =
        <IPointerDownThemeAnimation as ::windows::core::Interface>::IID;
}
impl ::windows::core::RuntimeName for PointerDownThemeAnimation {
    const NAME: &'static str = "Microsoft.UI.Xaml.Media.Animation.PointerDownThemeAnimation";
}
::windows::core::interface_hierarchy!(
    PointerDownThemeAnimation,
    ::windows::core::IUnknown,
    ::windows::core::IInspectable
);
impl ::core::convert::From<PointerDownThemeAnimation> for Timeline {
    fn from(value: PointerDownThemeAnimation) -> Self {
        ::core::convert::From::from(&value)
    }
}
impl ::core::convert::From<&PointerDownThemeAnimation> for Timeline {
    fn from(value: &PointerDownThemeAnimation) -> Self {
        ::windows::core::Interface::cast(value).unwrap()
    }
}
impl<'a> ::core::convert::From<&PointerDownThemeAnimation>
    for ::windows::core::InParam<'a, Timeline>
{
    fn from(value: &PointerDownThemeAnimation) -> Self {
        ::windows::core::InParam::owned(value.into())
    }
}
impl ::core::convert::From<PointerDownThemeAnimation> for super::super::DependencyObject {
    fn from(value: PointerDownThemeAnimation) -> Self {
        ::core::convert::From::from(&value)
    }
}
impl ::core::convert::From<&PointerDownThemeAnimation> for super::super::DependencyObject {
    fn from(value: &PointerDownThemeAnimation) -> Self {
        ::windows::core::Interface::cast(value).unwrap()
    }
}
impl<'a> ::core::convert::From<&PointerDownThemeAnimation>
    for ::windows::core::InParam<'a, super::super::DependencyObject>
{
    fn from(value: &PointerDownThemeAnimation) -> Self {
        ::windows::core::InParam::owned(value.into())
    }
}
unsafe impl ::core::marker::Send for PointerDownThemeAnimation {}
unsafe impl ::core::marker::Sync for PointerDownThemeAnimation {}
#[doc = "*Required features: `\"UI_Xaml_Media_Animation\"`*"]
#[repr(transparent)]
pub struct PointerUpThemeAnimation(::windows::core::IUnknown);
impl PointerUpThemeAnimation {
    pub fn new() -> ::windows::core::Result<Self> {
        Self::IActivationFactory(|f| f.ActivateInstance::<Self>())
    }
    fn IActivationFactory<
        R,
        F: FnOnce(&::windows::core::IGenericFactory) -> ::windows::core::Result<R>,
    >(
        callback: F,
    ) -> ::windows::core::Result<R> {
        static SHARED: ::windows::core::FactoryCache<
            PointerUpThemeAnimation,
            ::windows::core::IGenericFactory,
        > = ::windows::core::FactoryCache::new();
        SHARED.call(callback)
    }
    pub fn GetValue(
        &self,
        dp: &super::super::DependencyProperty,
    ) -> ::windows::core::Result<::windows::core::IInspectable> {
        let this = &::windows::core::Interface::cast::<super::super::IDependencyObject>(self)?;
        unsafe {
            let mut result__ = ::core::mem::MaybeUninit::zeroed();
            (::windows::core::Vtable::vtable(this).GetValue)(
                ::windows::core::Vtable::as_raw(this),
                ::core::mem::transmute_copy(dp),
                result__.as_mut_ptr(),
            )
            .from_abi::<::windows::core::IInspectable>(result__)
        }
    }
    pub fn SetValue<'a, P0>(
        &self,
        dp: &super::super::DependencyProperty,
        value: P0,
    ) -> ::windows::core::Result<()>
    where
        P0: ::std::convert::Into<::windows::core::InParam<'a, ::windows::core::IInspectable>>,
    {
        let this = &::windows::core::Interface::cast::<super::super::IDependencyObject>(self)?;
        unsafe {
            (::windows::core::Vtable::vtable(this).SetValue)(
                ::windows::core::Vtable::as_raw(this),
                ::core::mem::transmute_copy(dp),
                value.into().abi(),
            )
            .ok()
        }
    }
    pub fn ClearValue(&self, dp: &super::super::DependencyProperty) -> ::windows::core::Result<()> {
        let this = &::windows::core::Interface::cast::<super::super::IDependencyObject>(self)?;
        unsafe {
            (::windows::core::Vtable::vtable(this).ClearValue)(
                ::windows::core::Vtable::as_raw(this),
                ::core::mem::transmute_copy(dp),
            )
            .ok()
        }
    }
    pub fn ReadLocalValue(
        &self,
        dp: &super::super::DependencyProperty,
    ) -> ::windows::core::Result<::windows::core::IInspectable> {
        let this = &::windows::core::Interface::cast::<super::super::IDependencyObject>(self)?;
        unsafe {
            let mut result__ = ::core::mem::MaybeUninit::zeroed();
            (::windows::core::Vtable::vtable(this).ReadLocalValue)(
                ::windows::core::Vtable::as_raw(this),
                ::core::mem::transmute_copy(dp),
                result__.as_mut_ptr(),
            )
            .from_abi::<::windows::core::IInspectable>(result__)
        }
    }
    pub fn GetAnimationBaseValue(
        &self,
        dp: &super::super::DependencyProperty,
    ) -> ::windows::core::Result<::windows::core::IInspectable> {
        let this = &::windows::core::Interface::cast::<super::super::IDependencyObject>(self)?;
        unsafe {
            let mut result__ = ::core::mem::MaybeUninit::zeroed();
            (::windows::core::Vtable::vtable(this).GetAnimationBaseValue)(
                ::windows::core::Vtable::as_raw(this),
                ::core::mem::transmute_copy(dp),
                result__.as_mut_ptr(),
            )
            .from_abi::<::windows::core::IInspectable>(result__)
        }
    }
    pub fn RegisterPropertyChangedCallback(
        &self,
        dp: &super::super::DependencyProperty,
        callback: &super::super::DependencyPropertyChangedCallback,
    ) -> ::windows::core::Result<i64> {
        let this = &::windows::core::Interface::cast::<super::super::IDependencyObject>(self)?;
        unsafe {
            let mut result__ = ::core::mem::MaybeUninit::zeroed();
            (::windows::core::Vtable::vtable(this).RegisterPropertyChangedCallback)(
                ::windows::core::Vtable::as_raw(this),
                ::core::mem::transmute_copy(dp),
                ::core::mem::transmute_copy(callback),
                result__.as_mut_ptr(),
            )
            .from_abi::<i64>(result__)
        }
    }
    pub fn UnregisterPropertyChangedCallback(
        &self,
        dp: &super::super::DependencyProperty,
        token: i64,
    ) -> ::windows::core::Result<()> {
        let this = &::windows::core::Interface::cast::<super::super::IDependencyObject>(self)?;
        unsafe {
            (::windows::core::Vtable::vtable(this).UnregisterPropertyChangedCallback)(
                ::windows::core::Vtable::as_raw(this),
                ::core::mem::transmute_copy(dp),
                token,
            )
            .ok()
        }
    }
    pub fn Dispatcher(&self) -> ::windows::core::Result<::windows::UI::Core::CoreDispatcher> {
        let this = &::windows::core::Interface::cast::<super::super::IDependencyObject>(self)?;
        unsafe {
            let mut result__ = ::core::mem::MaybeUninit::zeroed();
            (::windows::core::Vtable::vtable(this).Dispatcher)(
                ::windows::core::Vtable::as_raw(this),
                result__.as_mut_ptr(),
            )
            .from_abi::<::windows::UI::Core::CoreDispatcher>(result__)
        }
    }
    #[doc = "*Required features: `\"UI_Dispatching\"`*"]
    #[cfg(feature = "UI_Dispatching")]
    pub fn DispatcherQueue(
        &self,
    ) -> ::windows::core::Result<super::super::super::Dispatching::DispatcherQueue> {
        let this = &::windows::core::Interface::cast::<super::super::IDependencyObject>(self)?;
        unsafe {
            let mut result__ = ::core::mem::MaybeUninit::zeroed();
            (::windows::core::Vtable::vtable(this).DispatcherQueue)(
                ::windows::core::Vtable::as_raw(this),
                result__.as_mut_ptr(),
            )
            .from_abi::<super::super::super::Dispatching::DispatcherQueue>(result__)
        }
    }
    pub fn TargetName(&self) -> ::windows::core::Result<::windows::core::HSTRING> {
        let this = self;
        unsafe {
            let mut result__ = ::core::mem::MaybeUninit::zeroed();
            (::windows::core::Vtable::vtable(this).TargetName)(
                ::windows::core::Vtable::as_raw(this),
                result__.as_mut_ptr(),
            )
            .from_abi::<::windows::core::HSTRING>(result__)
        }
    }
    pub fn SetTargetName(&self, value: &::windows::core::HSTRING) -> ::windows::core::Result<()> {
        let this = self;
        unsafe {
            (::windows::core::Vtable::vtable(this).SetTargetName)(
                ::windows::core::Vtable::as_raw(this),
                ::core::mem::transmute_copy(value),
            )
            .ok()
        }
    }
    pub fn TargetNameProperty() -> ::windows::core::Result<super::super::DependencyProperty> {
        Self::IPointerUpThemeAnimationStatics(|this| unsafe {
            let mut result__ = ::core::mem::MaybeUninit::zeroed();
            (::windows::core::Vtable::vtable(this).TargetNameProperty)(
                ::windows::core::Vtable::as_raw(this),
                result__.as_mut_ptr(),
            )
            .from_abi::<super::super::DependencyProperty>(result__)
        })
    }
    pub fn AutoReverse(&self) -> ::windows::core::Result<bool> {
        let this = &::windows::core::Interface::cast::<ITimeline>(self)?;
        unsafe {
            let mut result__ = ::core::mem::MaybeUninit::zeroed();
            (::windows::core::Vtable::vtable(this).AutoReverse)(
                ::windows::core::Vtable::as_raw(this),
                result__.as_mut_ptr(),
            )
            .from_abi::<bool>(result__)
        }
    }
    pub fn SetAutoReverse(&self, value: bool) -> ::windows::core::Result<()> {
        let this = &::windows::core::Interface::cast::<ITimeline>(self)?;
        unsafe {
            (::windows::core::Vtable::vtable(this).SetAutoReverse)(
                ::windows::core::Vtable::as_raw(this),
                value,
            )
            .ok()
        }
    }
    pub fn BeginTime(
        &self,
    ) -> ::windows::core::Result<::windows::Foundation::IReference<::windows::Foundation::TimeSpan>>
    {
        let this = &::windows::core::Interface::cast::<ITimeline>(self)?;
        unsafe {
            let mut result__ = ::core::mem::MaybeUninit::zeroed();
            (::windows::core::Vtable::vtable(this).BeginTime)(
                ::windows::core::Vtable::as_raw(this),
                result__.as_mut_ptr(),
            )
            .from_abi::<::windows::Foundation::IReference<::windows::Foundation::TimeSpan>>(
                result__,
            )
        }
    }
    pub fn SetBeginTime<'a, P0, E0>(&self, value: P0) -> ::windows::core::Result<()>
    where
        P0: ::std::convert::TryInto<
            ::windows::core::InParam<
                'a,
                ::windows::Foundation::IReference<::windows::Foundation::TimeSpan>,
            >,
            Error = E0,
        >,
        E0: ::std::convert::Into<::windows::core::Error>,
    {
        let this = &::windows::core::Interface::cast::<ITimeline>(self)?;
        unsafe {
            (::windows::core::Vtable::vtable(this).SetBeginTime)(
                ::windows::core::Vtable::as_raw(this),
                value.try_into().map_err(|e| e.into())?.abi(),
            )
            .ok()
        }
    }
    pub fn Duration(&self) -> ::windows::core::Result<super::super::Duration> {
        let this = &::windows::core::Interface::cast::<ITimeline>(self)?;
        unsafe {
            let mut result__ = ::core::mem::MaybeUninit::zeroed();
            (::windows::core::Vtable::vtable(this).Duration)(
                ::windows::core::Vtable::as_raw(this),
                result__.as_mut_ptr(),
            )
            .from_abi::<super::super::Duration>(result__)
        }
    }
    pub fn SetDuration(&self, value: super::super::Duration) -> ::windows::core::Result<()> {
        let this = &::windows::core::Interface::cast::<ITimeline>(self)?;
        unsafe {
            (::windows::core::Vtable::vtable(this).SetDuration)(
                ::windows::core::Vtable::as_raw(this),
                value,
            )
            .ok()
        }
    }
    pub fn SpeedRatio(&self) -> ::windows::core::Result<f64> {
        let this = &::windows::core::Interface::cast::<ITimeline>(self)?;
        unsafe {
            let mut result__ = ::core::mem::MaybeUninit::zeroed();
            (::windows::core::Vtable::vtable(this).SpeedRatio)(
                ::windows::core::Vtable::as_raw(this),
                result__.as_mut_ptr(),
            )
            .from_abi::<f64>(result__)
        }
    }
    pub fn SetSpeedRatio(&self, value: f64) -> ::windows::core::Result<()> {
        let this = &::windows::core::Interface::cast::<ITimeline>(self)?;
        unsafe {
            (::windows::core::Vtable::vtable(this).SetSpeedRatio)(
                ::windows::core::Vtable::as_raw(this),
                value,
            )
            .ok()
        }
    }
    pub fn FillBehavior(&self) -> ::windows::core::Result<FillBehavior> {
        let this = &::windows::core::Interface::cast::<ITimeline>(self)?;
        unsafe {
            let mut result__ = ::core::mem::MaybeUninit::zeroed();
            (::windows::core::Vtable::vtable(this).FillBehavior)(
                ::windows::core::Vtable::as_raw(this),
                result__.as_mut_ptr(),
            )
            .from_abi::<FillBehavior>(result__)
        }
    }
    pub fn SetFillBehavior(&self, value: FillBehavior) -> ::windows::core::Result<()> {
        let this = &::windows::core::Interface::cast::<ITimeline>(self)?;
        unsafe {
            (::windows::core::Vtable::vtable(this).SetFillBehavior)(
                ::windows::core::Vtable::as_raw(this),
                value,
            )
            .ok()
        }
    }
    pub fn RepeatBehavior(&self) -> ::windows::core::Result<RepeatBehavior> {
        let this = &::windows::core::Interface::cast::<ITimeline>(self)?;
        unsafe {
            let mut result__ = ::core::mem::MaybeUninit::zeroed();
            (::windows::core::Vtable::vtable(this).RepeatBehavior)(
                ::windows::core::Vtable::as_raw(this),
                result__.as_mut_ptr(),
            )
            .from_abi::<RepeatBehavior>(result__)
        }
    }
    pub fn SetRepeatBehavior(&self, value: RepeatBehavior) -> ::windows::core::Result<()> {
        let this = &::windows::core::Interface::cast::<ITimeline>(self)?;
        unsafe {
            (::windows::core::Vtable::vtable(this).SetRepeatBehavior)(
                ::windows::core::Vtable::as_raw(this),
                value,
            )
            .ok()
        }
    }
    pub fn Completed(
        &self,
        handler: &::windows::Foundation::EventHandler<::windows::core::IInspectable>,
    ) -> ::windows::core::Result<::windows::Foundation::EventRegistrationToken> {
        let this = &::windows::core::Interface::cast::<ITimeline>(self)?;
        unsafe {
            let mut result__ = ::core::mem::MaybeUninit::zeroed();
            (::windows::core::Vtable::vtable(this).Completed)(
                ::windows::core::Vtable::as_raw(this),
                ::core::mem::transmute_copy(handler),
                result__.as_mut_ptr(),
            )
            .from_abi::<::windows::Foundation::EventRegistrationToken>(result__)
        }
    }
    pub fn RemoveCompleted(
        &self,
        token: ::windows::Foundation::EventRegistrationToken,
    ) -> ::windows::core::Result<()> {
        let this = &::windows::core::Interface::cast::<ITimeline>(self)?;
        unsafe {
            (::windows::core::Vtable::vtable(this).RemoveCompleted)(
                ::windows::core::Vtable::as_raw(this),
                token,
            )
            .ok()
        }
    }
    #[doc(hidden)]
    pub fn IPointerUpThemeAnimationStatics<
        R,
        F: FnOnce(&IPointerUpThemeAnimationStatics) -> ::windows::core::Result<R>,
    >(
        callback: F,
    ) -> ::windows::core::Result<R> {
        static SHARED: ::windows::core::FactoryCache<
            PointerUpThemeAnimation,
            IPointerUpThemeAnimationStatics,
        > = ::windows::core::FactoryCache::new();
        SHARED.call(callback)
    }
}
impl ::core::clone::Clone for PointerUpThemeAnimation {
    fn clone(&self) -> Self {
        Self(self.0.clone())
    }
}
impl ::core::cmp::PartialEq for PointerUpThemeAnimation {
    fn eq(&self, other: &Self) -> bool {
        self.0 == other.0
    }
}
impl ::core::cmp::Eq for PointerUpThemeAnimation {}
impl ::core::fmt::Debug for PointerUpThemeAnimation {
    fn fmt(&self, f: &mut ::core::fmt::Formatter<'_>) -> ::core::fmt::Result {
        f.debug_tuple("PointerUpThemeAnimation").field(&self.0).finish()
    }
}
unsafe impl ::windows::core::RuntimeType for PointerUpThemeAnimation {
    const SIGNATURE : ::windows::core::ConstBuffer = ::windows::core::ConstBuffer::from_slice ( b"rc(Microsoft.UI.Xaml.Media.Animation.PointerUpThemeAnimation;{94896d1c-c938-5d68-84da-552bde815810})" ) ;
    type DefaultType = ::core::option::Option<Self>;
    fn from_default(from: &Self::DefaultType) -> ::windows::core::Result<Self> {
        from.as_ref().cloned().ok_or(::windows::core::Error::OK)
    }
}
unsafe impl ::windows::core::Vtable for PointerUpThemeAnimation {
    type Vtable = IPointerUpThemeAnimation_Vtbl;
}
unsafe impl ::windows::core::Interface for PointerUpThemeAnimation {
    const IID: ::windows::core::GUID =
        <IPointerUpThemeAnimation as ::windows::core::Interface>::IID;
}
impl ::windows::core::RuntimeName for PointerUpThemeAnimation {
    const NAME: &'static str = "Microsoft.UI.Xaml.Media.Animation.PointerUpThemeAnimation";
}
::windows::core::interface_hierarchy!(
    PointerUpThemeAnimation,
    ::windows::core::IUnknown,
    ::windows::core::IInspectable
);
impl ::core::convert::From<PointerUpThemeAnimation> for Timeline {
    fn from(value: PointerUpThemeAnimation) -> Self {
        ::core::convert::From::from(&value)
    }
}
impl ::core::convert::From<&PointerUpThemeAnimation> for Timeline {
    fn from(value: &PointerUpThemeAnimation) -> Self {
        ::windows::core::Interface::cast(value).unwrap()
    }
}
impl<'a> ::core::convert::From<&PointerUpThemeAnimation>
    for ::windows::core::InParam<'a, Timeline>
{
    fn from(value: &PointerUpThemeAnimation) -> Self {
        ::windows::core::InParam::owned(value.into())
    }
}
impl ::core::convert::From<PointerUpThemeAnimation> for super::super::DependencyObject {
    fn from(value: PointerUpThemeAnimation) -> Self {
        ::core::convert::From::from(&value)
    }
}
impl ::core::convert::From<&PointerUpThemeAnimation> for super::super::DependencyObject {
    fn from(value: &PointerUpThemeAnimation) -> Self {
        ::windows::core::Interface::cast(value).unwrap()
    }
}
impl<'a> ::core::convert::From<&PointerUpThemeAnimation>
    for ::windows::core::InParam<'a, super::super::DependencyObject>
{
    fn from(value: &PointerUpThemeAnimation) -> Self {
        ::windows::core::InParam::owned(value.into())
    }
}
unsafe impl ::core::marker::Send for PointerUpThemeAnimation {}
unsafe impl ::core::marker::Sync for PointerUpThemeAnimation {}
#[doc = "*Required features: `\"UI_Xaml_Media_Animation\"`*"]
#[repr(transparent)]
pub struct PopInThemeAnimation(::windows::core::IUnknown);
impl PopInThemeAnimation {
    pub fn new() -> ::windows::core::Result<Self> {
        Self::IActivationFactory(|f| f.ActivateInstance::<Self>())
    }
    fn IActivationFactory<
        R,
        F: FnOnce(&::windows::core::IGenericFactory) -> ::windows::core::Result<R>,
    >(
        callback: F,
    ) -> ::windows::core::Result<R> {
        static SHARED: ::windows::core::FactoryCache<
            PopInThemeAnimation,
            ::windows::core::IGenericFactory,
        > = ::windows::core::FactoryCache::new();
        SHARED.call(callback)
    }
    pub fn GetValue(
        &self,
        dp: &super::super::DependencyProperty,
    ) -> ::windows::core::Result<::windows::core::IInspectable> {
        let this = &::windows::core::Interface::cast::<super::super::IDependencyObject>(self)?;
        unsafe {
            let mut result__ = ::core::mem::MaybeUninit::zeroed();
            (::windows::core::Vtable::vtable(this).GetValue)(
                ::windows::core::Vtable::as_raw(this),
                ::core::mem::transmute_copy(dp),
                result__.as_mut_ptr(),
            )
            .from_abi::<::windows::core::IInspectable>(result__)
        }
    }
    pub fn SetValue<'a, P0>(
        &self,
        dp: &super::super::DependencyProperty,
        value: P0,
    ) -> ::windows::core::Result<()>
    where
        P0: ::std::convert::Into<::windows::core::InParam<'a, ::windows::core::IInspectable>>,
    {
        let this = &::windows::core::Interface::cast::<super::super::IDependencyObject>(self)?;
        unsafe {
            (::windows::core::Vtable::vtable(this).SetValue)(
                ::windows::core::Vtable::as_raw(this),
                ::core::mem::transmute_copy(dp),
                value.into().abi(),
            )
            .ok()
        }
    }
    pub fn ClearValue(&self, dp: &super::super::DependencyProperty) -> ::windows::core::Result<()> {
        let this = &::windows::core::Interface::cast::<super::super::IDependencyObject>(self)?;
        unsafe {
            (::windows::core::Vtable::vtable(this).ClearValue)(
                ::windows::core::Vtable::as_raw(this),
                ::core::mem::transmute_copy(dp),
            )
            .ok()
        }
    }
    pub fn ReadLocalValue(
        &self,
        dp: &super::super::DependencyProperty,
    ) -> ::windows::core::Result<::windows::core::IInspectable> {
        let this = &::windows::core::Interface::cast::<super::super::IDependencyObject>(self)?;
        unsafe {
            let mut result__ = ::core::mem::MaybeUninit::zeroed();
            (::windows::core::Vtable::vtable(this).ReadLocalValue)(
                ::windows::core::Vtable::as_raw(this),
                ::core::mem::transmute_copy(dp),
                result__.as_mut_ptr(),
            )
            .from_abi::<::windows::core::IInspectable>(result__)
        }
    }
    pub fn GetAnimationBaseValue(
        &self,
        dp: &super::super::DependencyProperty,
    ) -> ::windows::core::Result<::windows::core::IInspectable> {
        let this = &::windows::core::Interface::cast::<super::super::IDependencyObject>(self)?;
        unsafe {
            let mut result__ = ::core::mem::MaybeUninit::zeroed();
            (::windows::core::Vtable::vtable(this).GetAnimationBaseValue)(
                ::windows::core::Vtable::as_raw(this),
                ::core::mem::transmute_copy(dp),
                result__.as_mut_ptr(),
            )
            .from_abi::<::windows::core::IInspectable>(result__)
        }
    }
    pub fn RegisterPropertyChangedCallback(
        &self,
        dp: &super::super::DependencyProperty,
        callback: &super::super::DependencyPropertyChangedCallback,
    ) -> ::windows::core::Result<i64> {
        let this = &::windows::core::Interface::cast::<super::super::IDependencyObject>(self)?;
        unsafe {
            let mut result__ = ::core::mem::MaybeUninit::zeroed();
            (::windows::core::Vtable::vtable(this).RegisterPropertyChangedCallback)(
                ::windows::core::Vtable::as_raw(this),
                ::core::mem::transmute_copy(dp),
                ::core::mem::transmute_copy(callback),
                result__.as_mut_ptr(),
            )
            .from_abi::<i64>(result__)
        }
    }
    pub fn UnregisterPropertyChangedCallback(
        &self,
        dp: &super::super::DependencyProperty,
        token: i64,
    ) -> ::windows::core::Result<()> {
        let this = &::windows::core::Interface::cast::<super::super::IDependencyObject>(self)?;
        unsafe {
            (::windows::core::Vtable::vtable(this).UnregisterPropertyChangedCallback)(
                ::windows::core::Vtable::as_raw(this),
                ::core::mem::transmute_copy(dp),
                token,
            )
            .ok()
        }
    }
    pub fn Dispatcher(&self) -> ::windows::core::Result<::windows::UI::Core::CoreDispatcher> {
        let this = &::windows::core::Interface::cast::<super::super::IDependencyObject>(self)?;
        unsafe {
            let mut result__ = ::core::mem::MaybeUninit::zeroed();
            (::windows::core::Vtable::vtable(this).Dispatcher)(
                ::windows::core::Vtable::as_raw(this),
                result__.as_mut_ptr(),
            )
            .from_abi::<::windows::UI::Core::CoreDispatcher>(result__)
        }
    }
    #[doc = "*Required features: `\"UI_Dispatching\"`*"]
    #[cfg(feature = "UI_Dispatching")]
    pub fn DispatcherQueue(
        &self,
    ) -> ::windows::core::Result<super::super::super::Dispatching::DispatcherQueue> {
        let this = &::windows::core::Interface::cast::<super::super::IDependencyObject>(self)?;
        unsafe {
            let mut result__ = ::core::mem::MaybeUninit::zeroed();
            (::windows::core::Vtable::vtable(this).DispatcherQueue)(
                ::windows::core::Vtable::as_raw(this),
                result__.as_mut_ptr(),
            )
            .from_abi::<super::super::super::Dispatching::DispatcherQueue>(result__)
        }
    }
    pub fn TargetName(&self) -> ::windows::core::Result<::windows::core::HSTRING> {
        let this = self;
        unsafe {
            let mut result__ = ::core::mem::MaybeUninit::zeroed();
            (::windows::core::Vtable::vtable(this).TargetName)(
                ::windows::core::Vtable::as_raw(this),
                result__.as_mut_ptr(),
            )
            .from_abi::<::windows::core::HSTRING>(result__)
        }
    }
    pub fn SetTargetName(&self, value: &::windows::core::HSTRING) -> ::windows::core::Result<()> {
        let this = self;
        unsafe {
            (::windows::core::Vtable::vtable(this).SetTargetName)(
                ::windows::core::Vtable::as_raw(this),
                ::core::mem::transmute_copy(value),
            )
            .ok()
        }
    }
    pub fn FromHorizontalOffset(&self) -> ::windows::core::Result<f64> {
        let this = self;
        unsafe {
            let mut result__ = ::core::mem::MaybeUninit::zeroed();
            (::windows::core::Vtable::vtable(this).FromHorizontalOffset)(
                ::windows::core::Vtable::as_raw(this),
                result__.as_mut_ptr(),
            )
            .from_abi::<f64>(result__)
        }
    }
    pub fn SetFromHorizontalOffset(&self, value: f64) -> ::windows::core::Result<()> {
        let this = self;
        unsafe {
            (::windows::core::Vtable::vtable(this).SetFromHorizontalOffset)(
                ::windows::core::Vtable::as_raw(this),
                value,
            )
            .ok()
        }
    }
    pub fn FromVerticalOffset(&self) -> ::windows::core::Result<f64> {
        let this = self;
        unsafe {
            let mut result__ = ::core::mem::MaybeUninit::zeroed();
            (::windows::core::Vtable::vtable(this).FromVerticalOffset)(
                ::windows::core::Vtable::as_raw(this),
                result__.as_mut_ptr(),
            )
            .from_abi::<f64>(result__)
        }
    }
    pub fn SetFromVerticalOffset(&self, value: f64) -> ::windows::core::Result<()> {
        let this = self;
        unsafe {
            (::windows::core::Vtable::vtable(this).SetFromVerticalOffset)(
                ::windows::core::Vtable::as_raw(this),
                value,
            )
            .ok()
        }
    }
    pub fn TargetNameProperty() -> ::windows::core::Result<super::super::DependencyProperty> {
        Self::IPopInThemeAnimationStatics(|this| unsafe {
            let mut result__ = ::core::mem::MaybeUninit::zeroed();
            (::windows::core::Vtable::vtable(this).TargetNameProperty)(
                ::windows::core::Vtable::as_raw(this),
                result__.as_mut_ptr(),
            )
            .from_abi::<super::super::DependencyProperty>(result__)
        })
    }
    pub fn FromHorizontalOffsetProperty(
    ) -> ::windows::core::Result<super::super::DependencyProperty> {
        Self::IPopInThemeAnimationStatics(|this| unsafe {
            let mut result__ = ::core::mem::MaybeUninit::zeroed();
            (::windows::core::Vtable::vtable(this).FromHorizontalOffsetProperty)(
                ::windows::core::Vtable::as_raw(this),
                result__.as_mut_ptr(),
            )
            .from_abi::<super::super::DependencyProperty>(result__)
        })
    }
    pub fn FromVerticalOffsetProperty() -> ::windows::core::Result<super::super::DependencyProperty>
    {
        Self::IPopInThemeAnimationStatics(|this| unsafe {
            let mut result__ = ::core::mem::MaybeUninit::zeroed();
            (::windows::core::Vtable::vtable(this).FromVerticalOffsetProperty)(
                ::windows::core::Vtable::as_raw(this),
                result__.as_mut_ptr(),
            )
            .from_abi::<super::super::DependencyProperty>(result__)
        })
    }
    pub fn AutoReverse(&self) -> ::windows::core::Result<bool> {
        let this = &::windows::core::Interface::cast::<ITimeline>(self)?;
        unsafe {
            let mut result__ = ::core::mem::MaybeUninit::zeroed();
            (::windows::core::Vtable::vtable(this).AutoReverse)(
                ::windows::core::Vtable::as_raw(this),
                result__.as_mut_ptr(),
            )
            .from_abi::<bool>(result__)
        }
    }
    pub fn SetAutoReverse(&self, value: bool) -> ::windows::core::Result<()> {
        let this = &::windows::core::Interface::cast::<ITimeline>(self)?;
        unsafe {
            (::windows::core::Vtable::vtable(this).SetAutoReverse)(
                ::windows::core::Vtable::as_raw(this),
                value,
            )
            .ok()
        }
    }
    pub fn BeginTime(
        &self,
    ) -> ::windows::core::Result<::windows::Foundation::IReference<::windows::Foundation::TimeSpan>>
    {
        let this = &::windows::core::Interface::cast::<ITimeline>(self)?;
        unsafe {
            let mut result__ = ::core::mem::MaybeUninit::zeroed();
            (::windows::core::Vtable::vtable(this).BeginTime)(
                ::windows::core::Vtable::as_raw(this),
                result__.as_mut_ptr(),
            )
            .from_abi::<::windows::Foundation::IReference<::windows::Foundation::TimeSpan>>(
                result__,
            )
        }
    }
    pub fn SetBeginTime<'a, P0, E0>(&self, value: P0) -> ::windows::core::Result<()>
    where
        P0: ::std::convert::TryInto<
            ::windows::core::InParam<
                'a,
                ::windows::Foundation::IReference<::windows::Foundation::TimeSpan>,
            >,
            Error = E0,
        >,
        E0: ::std::convert::Into<::windows::core::Error>,
    {
        let this = &::windows::core::Interface::cast::<ITimeline>(self)?;
        unsafe {
            (::windows::core::Vtable::vtable(this).SetBeginTime)(
                ::windows::core::Vtable::as_raw(this),
                value.try_into().map_err(|e| e.into())?.abi(),
            )
            .ok()
        }
    }
    pub fn Duration(&self) -> ::windows::core::Result<super::super::Duration> {
        let this = &::windows::core::Interface::cast::<ITimeline>(self)?;
        unsafe {
            let mut result__ = ::core::mem::MaybeUninit::zeroed();
            (::windows::core::Vtable::vtable(this).Duration)(
                ::windows::core::Vtable::as_raw(this),
                result__.as_mut_ptr(),
            )
            .from_abi::<super::super::Duration>(result__)
        }
    }
    pub fn SetDuration(&self, value: super::super::Duration) -> ::windows::core::Result<()> {
        let this = &::windows::core::Interface::cast::<ITimeline>(self)?;
        unsafe {
            (::windows::core::Vtable::vtable(this).SetDuration)(
                ::windows::core::Vtable::as_raw(this),
                value,
            )
            .ok()
        }
    }
    pub fn SpeedRatio(&self) -> ::windows::core::Result<f64> {
        let this = &::windows::core::Interface::cast::<ITimeline>(self)?;
        unsafe {
            let mut result__ = ::core::mem::MaybeUninit::zeroed();
            (::windows::core::Vtable::vtable(this).SpeedRatio)(
                ::windows::core::Vtable::as_raw(this),
                result__.as_mut_ptr(),
            )
            .from_abi::<f64>(result__)
        }
    }
    pub fn SetSpeedRatio(&self, value: f64) -> ::windows::core::Result<()> {
        let this = &::windows::core::Interface::cast::<ITimeline>(self)?;
        unsafe {
            (::windows::core::Vtable::vtable(this).SetSpeedRatio)(
                ::windows::core::Vtable::as_raw(this),
                value,
            )
            .ok()
        }
    }
    pub fn FillBehavior(&self) -> ::windows::core::Result<FillBehavior> {
        let this = &::windows::core::Interface::cast::<ITimeline>(self)?;
        unsafe {
            let mut result__ = ::core::mem::MaybeUninit::zeroed();
            (::windows::core::Vtable::vtable(this).FillBehavior)(
                ::windows::core::Vtable::as_raw(this),
                result__.as_mut_ptr(),
            )
            .from_abi::<FillBehavior>(result__)
        }
    }
    pub fn SetFillBehavior(&self, value: FillBehavior) -> ::windows::core::Result<()> {
        let this = &::windows::core::Interface::cast::<ITimeline>(self)?;
        unsafe {
            (::windows::core::Vtable::vtable(this).SetFillBehavior)(
                ::windows::core::Vtable::as_raw(this),
                value,
            )
            .ok()
        }
    }
    pub fn RepeatBehavior(&self) -> ::windows::core::Result<RepeatBehavior> {
        let this = &::windows::core::Interface::cast::<ITimeline>(self)?;
        unsafe {
            let mut result__ = ::core::mem::MaybeUninit::zeroed();
            (::windows::core::Vtable::vtable(this).RepeatBehavior)(
                ::windows::core::Vtable::as_raw(this),
                result__.as_mut_ptr(),
            )
            .from_abi::<RepeatBehavior>(result__)
        }
    }
    pub fn SetRepeatBehavior(&self, value: RepeatBehavior) -> ::windows::core::Result<()> {
        let this = &::windows::core::Interface::cast::<ITimeline>(self)?;
        unsafe {
            (::windows::core::Vtable::vtable(this).SetRepeatBehavior)(
                ::windows::core::Vtable::as_raw(this),
                value,
            )
            .ok()
        }
    }
    pub fn Completed(
        &self,
        handler: &::windows::Foundation::EventHandler<::windows::core::IInspectable>,
    ) -> ::windows::core::Result<::windows::Foundation::EventRegistrationToken> {
        let this = &::windows::core::Interface::cast::<ITimeline>(self)?;
        unsafe {
            let mut result__ = ::core::mem::MaybeUninit::zeroed();
            (::windows::core::Vtable::vtable(this).Completed)(
                ::windows::core::Vtable::as_raw(this),
                ::core::mem::transmute_copy(handler),
                result__.as_mut_ptr(),
            )
            .from_abi::<::windows::Foundation::EventRegistrationToken>(result__)
        }
    }
    pub fn RemoveCompleted(
        &self,
        token: ::windows::Foundation::EventRegistrationToken,
    ) -> ::windows::core::Result<()> {
        let this = &::windows::core::Interface::cast::<ITimeline>(self)?;
        unsafe {
            (::windows::core::Vtable::vtable(this).RemoveCompleted)(
                ::windows::core::Vtable::as_raw(this),
                token,
            )
            .ok()
        }
    }
    #[doc(hidden)]
    pub fn IPopInThemeAnimationStatics<
        R,
        F: FnOnce(&IPopInThemeAnimationStatics) -> ::windows::core::Result<R>,
    >(
        callback: F,
    ) -> ::windows::core::Result<R> {
        static SHARED: ::windows::core::FactoryCache<
            PopInThemeAnimation,
            IPopInThemeAnimationStatics,
        > = ::windows::core::FactoryCache::new();
        SHARED.call(callback)
    }
}
impl ::core::clone::Clone for PopInThemeAnimation {
    fn clone(&self) -> Self {
        Self(self.0.clone())
    }
}
impl ::core::cmp::PartialEq for PopInThemeAnimation {
    fn eq(&self, other: &Self) -> bool {
        self.0 == other.0
    }
}
impl ::core::cmp::Eq for PopInThemeAnimation {}
impl ::core::fmt::Debug for PopInThemeAnimation {
    fn fmt(&self, f: &mut ::core::fmt::Formatter<'_>) -> ::core::fmt::Result {
        f.debug_tuple("PopInThemeAnimation").field(&self.0).finish()
    }
}
unsafe impl ::windows::core::RuntimeType for PopInThemeAnimation {
    const SIGNATURE : ::windows::core::ConstBuffer = ::windows::core::ConstBuffer::from_slice ( b"rc(Microsoft.UI.Xaml.Media.Animation.PopInThemeAnimation;{20136388-b4e4-5cbb-9cb2-df2ea7e6c44b})" ) ;
    type DefaultType = ::core::option::Option<Self>;
    fn from_default(from: &Self::DefaultType) -> ::windows::core::Result<Self> {
        from.as_ref().cloned().ok_or(::windows::core::Error::OK)
    }
}
unsafe impl ::windows::core::Vtable for PopInThemeAnimation {
    type Vtable = IPopInThemeAnimation_Vtbl;
}
unsafe impl ::windows::core::Interface for PopInThemeAnimation {
    const IID: ::windows::core::GUID = <IPopInThemeAnimation as ::windows::core::Interface>::IID;
}
impl ::windows::core::RuntimeName for PopInThemeAnimation {
    const NAME: &'static str = "Microsoft.UI.Xaml.Media.Animation.PopInThemeAnimation";
}
::windows::core::interface_hierarchy!(
    PopInThemeAnimation,
    ::windows::core::IUnknown,
    ::windows::core::IInspectable
);
impl ::core::convert::From<PopInThemeAnimation> for Timeline {
    fn from(value: PopInThemeAnimation) -> Self {
        ::core::convert::From::from(&value)
    }
}
impl ::core::convert::From<&PopInThemeAnimation> for Timeline {
    fn from(value: &PopInThemeAnimation) -> Self {
        ::windows::core::Interface::cast(value).unwrap()
    }
}
impl<'a> ::core::convert::From<&PopInThemeAnimation> for ::windows::core::InParam<'a, Timeline> {
    fn from(value: &PopInThemeAnimation) -> Self {
        ::windows::core::InParam::owned(value.into())
    }
}
impl ::core::convert::From<PopInThemeAnimation> for super::super::DependencyObject {
    fn from(value: PopInThemeAnimation) -> Self {
        ::core::convert::From::from(&value)
    }
}
impl ::core::convert::From<&PopInThemeAnimation> for super::super::DependencyObject {
    fn from(value: &PopInThemeAnimation) -> Self {
        ::windows::core::Interface::cast(value).unwrap()
    }
}
impl<'a> ::core::convert::From<&PopInThemeAnimation>
    for ::windows::core::InParam<'a, super::super::DependencyObject>
{
    fn from(value: &PopInThemeAnimation) -> Self {
        ::windows::core::InParam::owned(value.into())
    }
}
unsafe impl ::core::marker::Send for PopInThemeAnimation {}
unsafe impl ::core::marker::Sync for PopInThemeAnimation {}
#[doc = "*Required features: `\"UI_Xaml_Media_Animation\"`*"]
#[repr(transparent)]
pub struct PopOutThemeAnimation(::windows::core::IUnknown);
impl PopOutThemeAnimation {
    pub fn new() -> ::windows::core::Result<Self> {
        Self::IActivationFactory(|f| f.ActivateInstance::<Self>())
    }
    fn IActivationFactory<
        R,
        F: FnOnce(&::windows::core::IGenericFactory) -> ::windows::core::Result<R>,
    >(
        callback: F,
    ) -> ::windows::core::Result<R> {
        static SHARED: ::windows::core::FactoryCache<
            PopOutThemeAnimation,
            ::windows::core::IGenericFactory,
        > = ::windows::core::FactoryCache::new();
        SHARED.call(callback)
    }
    pub fn GetValue(
        &self,
        dp: &super::super::DependencyProperty,
    ) -> ::windows::core::Result<::windows::core::IInspectable> {
        let this = &::windows::core::Interface::cast::<super::super::IDependencyObject>(self)?;
        unsafe {
            let mut result__ = ::core::mem::MaybeUninit::zeroed();
            (::windows::core::Vtable::vtable(this).GetValue)(
                ::windows::core::Vtable::as_raw(this),
                ::core::mem::transmute_copy(dp),
                result__.as_mut_ptr(),
            )
            .from_abi::<::windows::core::IInspectable>(result__)
        }
    }
    pub fn SetValue<'a, P0>(
        &self,
        dp: &super::super::DependencyProperty,
        value: P0,
    ) -> ::windows::core::Result<()>
    where
        P0: ::std::convert::Into<::windows::core::InParam<'a, ::windows::core::IInspectable>>,
    {
        let this = &::windows::core::Interface::cast::<super::super::IDependencyObject>(self)?;
        unsafe {
            (::windows::core::Vtable::vtable(this).SetValue)(
                ::windows::core::Vtable::as_raw(this),
                ::core::mem::transmute_copy(dp),
                value.into().abi(),
            )
            .ok()
        }
    }
    pub fn ClearValue(&self, dp: &super::super::DependencyProperty) -> ::windows::core::Result<()> {
        let this = &::windows::core::Interface::cast::<super::super::IDependencyObject>(self)?;
        unsafe {
            (::windows::core::Vtable::vtable(this).ClearValue)(
                ::windows::core::Vtable::as_raw(this),
                ::core::mem::transmute_copy(dp),
            )
            .ok()
        }
    }
    pub fn ReadLocalValue(
        &self,
        dp: &super::super::DependencyProperty,
    ) -> ::windows::core::Result<::windows::core::IInspectable> {
        let this = &::windows::core::Interface::cast::<super::super::IDependencyObject>(self)?;
        unsafe {
            let mut result__ = ::core::mem::MaybeUninit::zeroed();
            (::windows::core::Vtable::vtable(this).ReadLocalValue)(
                ::windows::core::Vtable::as_raw(this),
                ::core::mem::transmute_copy(dp),
                result__.as_mut_ptr(),
            )
            .from_abi::<::windows::core::IInspectable>(result__)
        }
    }
    pub fn GetAnimationBaseValue(
        &self,
        dp: &super::super::DependencyProperty,
    ) -> ::windows::core::Result<::windows::core::IInspectable> {
        let this = &::windows::core::Interface::cast::<super::super::IDependencyObject>(self)?;
        unsafe {
            let mut result__ = ::core::mem::MaybeUninit::zeroed();
            (::windows::core::Vtable::vtable(this).GetAnimationBaseValue)(
                ::windows::core::Vtable::as_raw(this),
                ::core::mem::transmute_copy(dp),
                result__.as_mut_ptr(),
            )
            .from_abi::<::windows::core::IInspectable>(result__)
        }
    }
    pub fn RegisterPropertyChangedCallback(
        &self,
        dp: &super::super::DependencyProperty,
        callback: &super::super::DependencyPropertyChangedCallback,
    ) -> ::windows::core::Result<i64> {
        let this = &::windows::core::Interface::cast::<super::super::IDependencyObject>(self)?;
        unsafe {
            let mut result__ = ::core::mem::MaybeUninit::zeroed();
            (::windows::core::Vtable::vtable(this).RegisterPropertyChangedCallback)(
                ::windows::core::Vtable::as_raw(this),
                ::core::mem::transmute_copy(dp),
                ::core::mem::transmute_copy(callback),
                result__.as_mut_ptr(),
            )
            .from_abi::<i64>(result__)
        }
    }
    pub fn UnregisterPropertyChangedCallback(
        &self,
        dp: &super::super::DependencyProperty,
        token: i64,
    ) -> ::windows::core::Result<()> {
        let this = &::windows::core::Interface::cast::<super::super::IDependencyObject>(self)?;
        unsafe {
            (::windows::core::Vtable::vtable(this).UnregisterPropertyChangedCallback)(
                ::windows::core::Vtable::as_raw(this),
                ::core::mem::transmute_copy(dp),
                token,
            )
            .ok()
        }
    }
    pub fn Dispatcher(&self) -> ::windows::core::Result<::windows::UI::Core::CoreDispatcher> {
        let this = &::windows::core::Interface::cast::<super::super::IDependencyObject>(self)?;
        unsafe {
            let mut result__ = ::core::mem::MaybeUninit::zeroed();
            (::windows::core::Vtable::vtable(this).Dispatcher)(
                ::windows::core::Vtable::as_raw(this),
                result__.as_mut_ptr(),
            )
            .from_abi::<::windows::UI::Core::CoreDispatcher>(result__)
        }
    }
    #[doc = "*Required features: `\"UI_Dispatching\"`*"]
    #[cfg(feature = "UI_Dispatching")]
    pub fn DispatcherQueue(
        &self,
    ) -> ::windows::core::Result<super::super::super::Dispatching::DispatcherQueue> {
        let this = &::windows::core::Interface::cast::<super::super::IDependencyObject>(self)?;
        unsafe {
            let mut result__ = ::core::mem::MaybeUninit::zeroed();
            (::windows::core::Vtable::vtable(this).DispatcherQueue)(
                ::windows::core::Vtable::as_raw(this),
                result__.as_mut_ptr(),
            )
            .from_abi::<super::super::super::Dispatching::DispatcherQueue>(result__)
        }
    }
    pub fn TargetName(&self) -> ::windows::core::Result<::windows::core::HSTRING> {
        let this = self;
        unsafe {
            let mut result__ = ::core::mem::MaybeUninit::zeroed();
            (::windows::core::Vtable::vtable(this).TargetName)(
                ::windows::core::Vtable::as_raw(this),
                result__.as_mut_ptr(),
            )
            .from_abi::<::windows::core::HSTRING>(result__)
        }
    }
    pub fn SetTargetName(&self, value: &::windows::core::HSTRING) -> ::windows::core::Result<()> {
        let this = self;
        unsafe {
            (::windows::core::Vtable::vtable(this).SetTargetName)(
                ::windows::core::Vtable::as_raw(this),
                ::core::mem::transmute_copy(value),
            )
            .ok()
        }
    }
    pub fn TargetNameProperty() -> ::windows::core::Result<super::super::DependencyProperty> {
        Self::IPopOutThemeAnimationStatics(|this| unsafe {
            let mut result__ = ::core::mem::MaybeUninit::zeroed();
            (::windows::core::Vtable::vtable(this).TargetNameProperty)(
                ::windows::core::Vtable::as_raw(this),
                result__.as_mut_ptr(),
            )
            .from_abi::<super::super::DependencyProperty>(result__)
        })
    }
    pub fn AutoReverse(&self) -> ::windows::core::Result<bool> {
        let this = &::windows::core::Interface::cast::<ITimeline>(self)?;
        unsafe {
            let mut result__ = ::core::mem::MaybeUninit::zeroed();
            (::windows::core::Vtable::vtable(this).AutoReverse)(
                ::windows::core::Vtable::as_raw(this),
                result__.as_mut_ptr(),
            )
            .from_abi::<bool>(result__)
        }
    }
    pub fn SetAutoReverse(&self, value: bool) -> ::windows::core::Result<()> {
        let this = &::windows::core::Interface::cast::<ITimeline>(self)?;
        unsafe {
            (::windows::core::Vtable::vtable(this).SetAutoReverse)(
                ::windows::core::Vtable::as_raw(this),
                value,
            )
            .ok()
        }
    }
    pub fn BeginTime(
        &self,
    ) -> ::windows::core::Result<::windows::Foundation::IReference<::windows::Foundation::TimeSpan>>
    {
        let this = &::windows::core::Interface::cast::<ITimeline>(self)?;
        unsafe {
            let mut result__ = ::core::mem::MaybeUninit::zeroed();
            (::windows::core::Vtable::vtable(this).BeginTime)(
                ::windows::core::Vtable::as_raw(this),
                result__.as_mut_ptr(),
            )
            .from_abi::<::windows::Foundation::IReference<::windows::Foundation::TimeSpan>>(
                result__,
            )
        }
    }
    pub fn SetBeginTime<'a, P0, E0>(&self, value: P0) -> ::windows::core::Result<()>
    where
        P0: ::std::convert::TryInto<
            ::windows::core::InParam<
                'a,
                ::windows::Foundation::IReference<::windows::Foundation::TimeSpan>,
            >,
            Error = E0,
        >,
        E0: ::std::convert::Into<::windows::core::Error>,
    {
        let this = &::windows::core::Interface::cast::<ITimeline>(self)?;
        unsafe {
            (::windows::core::Vtable::vtable(this).SetBeginTime)(
                ::windows::core::Vtable::as_raw(this),
                value.try_into().map_err(|e| e.into())?.abi(),
            )
            .ok()
        }
    }
    pub fn Duration(&self) -> ::windows::core::Result<super::super::Duration> {
        let this = &::windows::core::Interface::cast::<ITimeline>(self)?;
        unsafe {
            let mut result__ = ::core::mem::MaybeUninit::zeroed();
            (::windows::core::Vtable::vtable(this).Duration)(
                ::windows::core::Vtable::as_raw(this),
                result__.as_mut_ptr(),
            )
            .from_abi::<super::super::Duration>(result__)
        }
    }
    pub fn SetDuration(&self, value: super::super::Duration) -> ::windows::core::Result<()> {
        let this = &::windows::core::Interface::cast::<ITimeline>(self)?;
        unsafe {
            (::windows::core::Vtable::vtable(this).SetDuration)(
                ::windows::core::Vtable::as_raw(this),
                value,
            )
            .ok()
        }
    }
    pub fn SpeedRatio(&self) -> ::windows::core::Result<f64> {
        let this = &::windows::core::Interface::cast::<ITimeline>(self)?;
        unsafe {
            let mut result__ = ::core::mem::MaybeUninit::zeroed();
            (::windows::core::Vtable::vtable(this).SpeedRatio)(
                ::windows::core::Vtable::as_raw(this),
                result__.as_mut_ptr(),
            )
            .from_abi::<f64>(result__)
        }
    }
    pub fn SetSpeedRatio(&self, value: f64) -> ::windows::core::Result<()> {
        let this = &::windows::core::Interface::cast::<ITimeline>(self)?;
        unsafe {
            (::windows::core::Vtable::vtable(this).SetSpeedRatio)(
                ::windows::core::Vtable::as_raw(this),
                value,
            )
            .ok()
        }
    }
    pub fn FillBehavior(&self) -> ::windows::core::Result<FillBehavior> {
        let this = &::windows::core::Interface::cast::<ITimeline>(self)?;
        unsafe {
            let mut result__ = ::core::mem::MaybeUninit::zeroed();
            (::windows::core::Vtable::vtable(this).FillBehavior)(
                ::windows::core::Vtable::as_raw(this),
                result__.as_mut_ptr(),
            )
            .from_abi::<FillBehavior>(result__)
        }
    }
    pub fn SetFillBehavior(&self, value: FillBehavior) -> ::windows::core::Result<()> {
        let this = &::windows::core::Interface::cast::<ITimeline>(self)?;
        unsafe {
            (::windows::core::Vtable::vtable(this).SetFillBehavior)(
                ::windows::core::Vtable::as_raw(this),
                value,
            )
            .ok()
        }
    }
    pub fn RepeatBehavior(&self) -> ::windows::core::Result<RepeatBehavior> {
        let this = &::windows::core::Interface::cast::<ITimeline>(self)?;
        unsafe {
            let mut result__ = ::core::mem::MaybeUninit::zeroed();
            (::windows::core::Vtable::vtable(this).RepeatBehavior)(
                ::windows::core::Vtable::as_raw(this),
                result__.as_mut_ptr(),
            )
            .from_abi::<RepeatBehavior>(result__)
        }
    }
    pub fn SetRepeatBehavior(&self, value: RepeatBehavior) -> ::windows::core::Result<()> {
        let this = &::windows::core::Interface::cast::<ITimeline>(self)?;
        unsafe {
            (::windows::core::Vtable::vtable(this).SetRepeatBehavior)(
                ::windows::core::Vtable::as_raw(this),
                value,
            )
            .ok()
        }
    }
    pub fn Completed(
        &self,
        handler: &::windows::Foundation::EventHandler<::windows::core::IInspectable>,
    ) -> ::windows::core::Result<::windows::Foundation::EventRegistrationToken> {
        let this = &::windows::core::Interface::cast::<ITimeline>(self)?;
        unsafe {
            let mut result__ = ::core::mem::MaybeUninit::zeroed();
            (::windows::core::Vtable::vtable(this).Completed)(
                ::windows::core::Vtable::as_raw(this),
                ::core::mem::transmute_copy(handler),
                result__.as_mut_ptr(),
            )
            .from_abi::<::windows::Foundation::EventRegistrationToken>(result__)
        }
    }
    pub fn RemoveCompleted(
        &self,
        token: ::windows::Foundation::EventRegistrationToken,
    ) -> ::windows::core::Result<()> {
        let this = &::windows::core::Interface::cast::<ITimeline>(self)?;
        unsafe {
            (::windows::core::Vtable::vtable(this).RemoveCompleted)(
                ::windows::core::Vtable::as_raw(this),
                token,
            )
            .ok()
        }
    }
    #[doc(hidden)]
    pub fn IPopOutThemeAnimationStatics<
        R,
        F: FnOnce(&IPopOutThemeAnimationStatics) -> ::windows::core::Result<R>,
    >(
        callback: F,
    ) -> ::windows::core::Result<R> {
        static SHARED: ::windows::core::FactoryCache<
            PopOutThemeAnimation,
            IPopOutThemeAnimationStatics,
        > = ::windows::core::FactoryCache::new();
        SHARED.call(callback)
    }
}
impl ::core::clone::Clone for PopOutThemeAnimation {
    fn clone(&self) -> Self {
        Self(self.0.clone())
    }
}
impl ::core::cmp::PartialEq for PopOutThemeAnimation {
    fn eq(&self, other: &Self) -> bool {
        self.0 == other.0
    }
}
impl ::core::cmp::Eq for PopOutThemeAnimation {}
impl ::core::fmt::Debug for PopOutThemeAnimation {
    fn fmt(&self, f: &mut ::core::fmt::Formatter<'_>) -> ::core::fmt::Result {
        f.debug_tuple("PopOutThemeAnimation").field(&self.0).finish()
    }
}
unsafe impl ::windows::core::RuntimeType for PopOutThemeAnimation {
    const SIGNATURE : ::windows::core::ConstBuffer = ::windows::core::ConstBuffer::from_slice ( b"rc(Microsoft.UI.Xaml.Media.Animation.PopOutThemeAnimation;{1bb20dd3-5648-541a-a0c9-37a955db10a6})" ) ;
    type DefaultType = ::core::option::Option<Self>;
    fn from_default(from: &Self::DefaultType) -> ::windows::core::Result<Self> {
        from.as_ref().cloned().ok_or(::windows::core::Error::OK)
    }
}
unsafe impl ::windows::core::Vtable for PopOutThemeAnimation {
    type Vtable = IPopOutThemeAnimation_Vtbl;
}
unsafe impl ::windows::core::Interface for PopOutThemeAnimation {
    const IID: ::windows::core::GUID = <IPopOutThemeAnimation as ::windows::core::Interface>::IID;
}
impl ::windows::core::RuntimeName for PopOutThemeAnimation {
    const NAME: &'static str = "Microsoft.UI.Xaml.Media.Animation.PopOutThemeAnimation";
}
::windows::core::interface_hierarchy!(
    PopOutThemeAnimation,
    ::windows::core::IUnknown,
    ::windows::core::IInspectable
);
impl ::core::convert::From<PopOutThemeAnimation> for Timeline {
    fn from(value: PopOutThemeAnimation) -> Self {
        ::core::convert::From::from(&value)
    }
}
impl ::core::convert::From<&PopOutThemeAnimation> for Timeline {
    fn from(value: &PopOutThemeAnimation) -> Self {
        ::windows::core::Interface::cast(value).unwrap()
    }
}
impl<'a> ::core::convert::From<&PopOutThemeAnimation> for ::windows::core::InParam<'a, Timeline> {
    fn from(value: &PopOutThemeAnimation) -> Self {
        ::windows::core::InParam::owned(value.into())
    }
}
impl ::core::convert::From<PopOutThemeAnimation> for super::super::DependencyObject {
    fn from(value: PopOutThemeAnimation) -> Self {
        ::core::convert::From::from(&value)
    }
}
impl ::core::convert::From<&PopOutThemeAnimation> for super::super::DependencyObject {
    fn from(value: &PopOutThemeAnimation) -> Self {
        ::windows::core::Interface::cast(value).unwrap()
    }
}
impl<'a> ::core::convert::From<&PopOutThemeAnimation>
    for ::windows::core::InParam<'a, super::super::DependencyObject>
{
    fn from(value: &PopOutThemeAnimation) -> Self {
        ::windows::core::InParam::owned(value.into())
    }
}
unsafe impl ::core::marker::Send for PopOutThemeAnimation {}
unsafe impl ::core::marker::Sync for PopOutThemeAnimation {}
#[doc = "*Required features: `\"UI_Xaml_Media_Animation\"`*"]
#[repr(transparent)]
pub struct PopupThemeTransition(::windows::core::IUnknown);
impl PopupThemeTransition {
    pub fn new() -> ::windows::core::Result<Self> {
        Self::IActivationFactory(|f| f.ActivateInstance::<Self>())
    }
    fn IActivationFactory<
        R,
        F: FnOnce(&::windows::core::IGenericFactory) -> ::windows::core::Result<R>,
    >(
        callback: F,
    ) -> ::windows::core::Result<R> {
        static SHARED: ::windows::core::FactoryCache<
            PopupThemeTransition,
            ::windows::core::IGenericFactory,
        > = ::windows::core::FactoryCache::new();
        SHARED.call(callback)
    }
    pub fn GetValue(
        &self,
        dp: &super::super::DependencyProperty,
    ) -> ::windows::core::Result<::windows::core::IInspectable> {
        let this = &::windows::core::Interface::cast::<super::super::IDependencyObject>(self)?;
        unsafe {
            let mut result__ = ::core::mem::MaybeUninit::zeroed();
            (::windows::core::Vtable::vtable(this).GetValue)(
                ::windows::core::Vtable::as_raw(this),
                ::core::mem::transmute_copy(dp),
                result__.as_mut_ptr(),
            )
            .from_abi::<::windows::core::IInspectable>(result__)
        }
    }
    pub fn SetValue<'a, P0>(
        &self,
        dp: &super::super::DependencyProperty,
        value: P0,
    ) -> ::windows::core::Result<()>
    where
        P0: ::std::convert::Into<::windows::core::InParam<'a, ::windows::core::IInspectable>>,
    {
        let this = &::windows::core::Interface::cast::<super::super::IDependencyObject>(self)?;
        unsafe {
            (::windows::core::Vtable::vtable(this).SetValue)(
                ::windows::core::Vtable::as_raw(this),
                ::core::mem::transmute_copy(dp),
                value.into().abi(),
            )
            .ok()
        }
    }
    pub fn ClearValue(&self, dp: &super::super::DependencyProperty) -> ::windows::core::Result<()> {
        let this = &::windows::core::Interface::cast::<super::super::IDependencyObject>(self)?;
        unsafe {
            (::windows::core::Vtable::vtable(this).ClearValue)(
                ::windows::core::Vtable::as_raw(this),
                ::core::mem::transmute_copy(dp),
            )
            .ok()
        }
    }
    pub fn ReadLocalValue(
        &self,
        dp: &super::super::DependencyProperty,
    ) -> ::windows::core::Result<::windows::core::IInspectable> {
        let this = &::windows::core::Interface::cast::<super::super::IDependencyObject>(self)?;
        unsafe {
            let mut result__ = ::core::mem::MaybeUninit::zeroed();
            (::windows::core::Vtable::vtable(this).ReadLocalValue)(
                ::windows::core::Vtable::as_raw(this),
                ::core::mem::transmute_copy(dp),
                result__.as_mut_ptr(),
            )
            .from_abi::<::windows::core::IInspectable>(result__)
        }
    }
    pub fn GetAnimationBaseValue(
        &self,
        dp: &super::super::DependencyProperty,
    ) -> ::windows::core::Result<::windows::core::IInspectable> {
        let this = &::windows::core::Interface::cast::<super::super::IDependencyObject>(self)?;
        unsafe {
            let mut result__ = ::core::mem::MaybeUninit::zeroed();
            (::windows::core::Vtable::vtable(this).GetAnimationBaseValue)(
                ::windows::core::Vtable::as_raw(this),
                ::core::mem::transmute_copy(dp),
                result__.as_mut_ptr(),
            )
            .from_abi::<::windows::core::IInspectable>(result__)
        }
    }
    pub fn RegisterPropertyChangedCallback(
        &self,
        dp: &super::super::DependencyProperty,
        callback: &super::super::DependencyPropertyChangedCallback,
    ) -> ::windows::core::Result<i64> {
        let this = &::windows::core::Interface::cast::<super::super::IDependencyObject>(self)?;
        unsafe {
            let mut result__ = ::core::mem::MaybeUninit::zeroed();
            (::windows::core::Vtable::vtable(this).RegisterPropertyChangedCallback)(
                ::windows::core::Vtable::as_raw(this),
                ::core::mem::transmute_copy(dp),
                ::core::mem::transmute_copy(callback),
                result__.as_mut_ptr(),
            )
            .from_abi::<i64>(result__)
        }
    }
    pub fn UnregisterPropertyChangedCallback(
        &self,
        dp: &super::super::DependencyProperty,
        token: i64,
    ) -> ::windows::core::Result<()> {
        let this = &::windows::core::Interface::cast::<super::super::IDependencyObject>(self)?;
        unsafe {
            (::windows::core::Vtable::vtable(this).UnregisterPropertyChangedCallback)(
                ::windows::core::Vtable::as_raw(this),
                ::core::mem::transmute_copy(dp),
                token,
            )
            .ok()
        }
    }
    pub fn Dispatcher(&self) -> ::windows::core::Result<::windows::UI::Core::CoreDispatcher> {
        let this = &::windows::core::Interface::cast::<super::super::IDependencyObject>(self)?;
        unsafe {
            let mut result__ = ::core::mem::MaybeUninit::zeroed();
            (::windows::core::Vtable::vtable(this).Dispatcher)(
                ::windows::core::Vtable::as_raw(this),
                result__.as_mut_ptr(),
            )
            .from_abi::<::windows::UI::Core::CoreDispatcher>(result__)
        }
    }
    #[doc = "*Required features: `\"UI_Dispatching\"`*"]
    #[cfg(feature = "UI_Dispatching")]
    pub fn DispatcherQueue(
        &self,
    ) -> ::windows::core::Result<super::super::super::Dispatching::DispatcherQueue> {
        let this = &::windows::core::Interface::cast::<super::super::IDependencyObject>(self)?;
        unsafe {
            let mut result__ = ::core::mem::MaybeUninit::zeroed();
            (::windows::core::Vtable::vtable(this).DispatcherQueue)(
                ::windows::core::Vtable::as_raw(this),
                result__.as_mut_ptr(),
            )
            .from_abi::<super::super::super::Dispatching::DispatcherQueue>(result__)
        }
    }
    pub fn FromHorizontalOffset(&self) -> ::windows::core::Result<f64> {
        let this = self;
        unsafe {
            let mut result__ = ::core::mem::MaybeUninit::zeroed();
            (::windows::core::Vtable::vtable(this).FromHorizontalOffset)(
                ::windows::core::Vtable::as_raw(this),
                result__.as_mut_ptr(),
            )
            .from_abi::<f64>(result__)
        }
    }
    pub fn SetFromHorizontalOffset(&self, value: f64) -> ::windows::core::Result<()> {
        let this = self;
        unsafe {
            (::windows::core::Vtable::vtable(this).SetFromHorizontalOffset)(
                ::windows::core::Vtable::as_raw(this),
                value,
            )
            .ok()
        }
    }
    pub fn FromVerticalOffset(&self) -> ::windows::core::Result<f64> {
        let this = self;
        unsafe {
            let mut result__ = ::core::mem::MaybeUninit::zeroed();
            (::windows::core::Vtable::vtable(this).FromVerticalOffset)(
                ::windows::core::Vtable::as_raw(this),
                result__.as_mut_ptr(),
            )
            .from_abi::<f64>(result__)
        }
    }
    pub fn SetFromVerticalOffset(&self, value: f64) -> ::windows::core::Result<()> {
        let this = self;
        unsafe {
            (::windows::core::Vtable::vtable(this).SetFromVerticalOffset)(
                ::windows::core::Vtable::as_raw(this),
                value,
            )
            .ok()
        }
    }
    pub fn FromHorizontalOffsetProperty(
    ) -> ::windows::core::Result<super::super::DependencyProperty> {
        Self::IPopupThemeTransitionStatics(|this| unsafe {
            let mut result__ = ::core::mem::MaybeUninit::zeroed();
            (::windows::core::Vtable::vtable(this).FromHorizontalOffsetProperty)(
                ::windows::core::Vtable::as_raw(this),
                result__.as_mut_ptr(),
            )
            .from_abi::<super::super::DependencyProperty>(result__)
        })
    }
    pub fn FromVerticalOffsetProperty() -> ::windows::core::Result<super::super::DependencyProperty>
    {
        Self::IPopupThemeTransitionStatics(|this| unsafe {
            let mut result__ = ::core::mem::MaybeUninit::zeroed();
            (::windows::core::Vtable::vtable(this).FromVerticalOffsetProperty)(
                ::windows::core::Vtable::as_raw(this),
                result__.as_mut_ptr(),
            )
            .from_abi::<super::super::DependencyProperty>(result__)
        })
    }
    #[doc(hidden)]
    pub fn IPopupThemeTransitionStatics<
        R,
        F: FnOnce(&IPopupThemeTransitionStatics) -> ::windows::core::Result<R>,
    >(
        callback: F,
    ) -> ::windows::core::Result<R> {
        static SHARED: ::windows::core::FactoryCache<
            PopupThemeTransition,
            IPopupThemeTransitionStatics,
        > = ::windows::core::FactoryCache::new();
        SHARED.call(callback)
    }
}
impl ::core::clone::Clone for PopupThemeTransition {
    fn clone(&self) -> Self {
        Self(self.0.clone())
    }
}
impl ::core::cmp::PartialEq for PopupThemeTransition {
    fn eq(&self, other: &Self) -> bool {
        self.0 == other.0
    }
}
impl ::core::cmp::Eq for PopupThemeTransition {}
impl ::core::fmt::Debug for PopupThemeTransition {
    fn fmt(&self, f: &mut ::core::fmt::Formatter<'_>) -> ::core::fmt::Result {
        f.debug_tuple("PopupThemeTransition").field(&self.0).finish()
    }
}
unsafe impl ::windows::core::RuntimeType for PopupThemeTransition {
    const SIGNATURE : ::windows::core::ConstBuffer = ::windows::core::ConstBuffer::from_slice ( b"rc(Microsoft.UI.Xaml.Media.Animation.PopupThemeTransition;{e1fa6b8a-add3-5299-a000-121d6dbacc80})" ) ;
    type DefaultType = ::core::option::Option<Self>;
    fn from_default(from: &Self::DefaultType) -> ::windows::core::Result<Self> {
        from.as_ref().cloned().ok_or(::windows::core::Error::OK)
    }
}
unsafe impl ::windows::core::Vtable for PopupThemeTransition {
    type Vtable = IPopupThemeTransition_Vtbl;
}
unsafe impl ::windows::core::Interface for PopupThemeTransition {
    const IID: ::windows::core::GUID = <IPopupThemeTransition as ::windows::core::Interface>::IID;
}
impl ::windows::core::RuntimeName for PopupThemeTransition {
    const NAME: &'static str = "Microsoft.UI.Xaml.Media.Animation.PopupThemeTransition";
}
::windows::core::interface_hierarchy!(
    PopupThemeTransition,
    ::windows::core::IUnknown,
    ::windows::core::IInspectable
);
impl ::core::convert::From<PopupThemeTransition> for Transition {
    fn from(value: PopupThemeTransition) -> Self {
        ::core::convert::From::from(&value)
    }
}
impl ::core::convert::From<&PopupThemeTransition> for Transition {
    fn from(value: &PopupThemeTransition) -> Self {
        ::windows::core::Interface::cast(value).unwrap()
    }
}
impl<'a> ::core::convert::From<&PopupThemeTransition> for ::windows::core::InParam<'a, Transition> {
    fn from(value: &PopupThemeTransition) -> Self {
        ::windows::core::InParam::owned(value.into())
    }
}
impl ::core::convert::From<PopupThemeTransition> for super::super::DependencyObject {
    fn from(value: PopupThemeTransition) -> Self {
        ::core::convert::From::from(&value)
    }
}
impl ::core::convert::From<&PopupThemeTransition> for super::super::DependencyObject {
    fn from(value: &PopupThemeTransition) -> Self {
        ::windows::core::Interface::cast(value).unwrap()
    }
}
impl<'a> ::core::convert::From<&PopupThemeTransition>
    for ::windows::core::InParam<'a, super::super::DependencyObject>
{
    fn from(value: &PopupThemeTransition) -> Self {
        ::windows::core::InParam::owned(value.into())
    }
}
unsafe impl ::core::marker::Send for PopupThemeTransition {}
unsafe impl ::core::marker::Sync for PopupThemeTransition {}
#[doc = "*Required features: `\"UI_Xaml_Media_Animation\"`*"]
#[repr(transparent)]
pub struct PowerEase(::windows::core::IUnknown);
impl PowerEase {
    pub fn new() -> ::windows::core::Result<Self> {
        Self::IActivationFactory(|f| f.ActivateInstance::<Self>())
    }
    fn IActivationFactory<
        R,
        F: FnOnce(&::windows::core::IGenericFactory) -> ::windows::core::Result<R>,
    >(
        callback: F,
    ) -> ::windows::core::Result<R> {
        static SHARED: ::windows::core::FactoryCache<PowerEase, ::windows::core::IGenericFactory> =
            ::windows::core::FactoryCache::new();
        SHARED.call(callback)
    }
    pub fn GetValue(
        &self,
        dp: &super::super::DependencyProperty,
    ) -> ::windows::core::Result<::windows::core::IInspectable> {
        let this = &::windows::core::Interface::cast::<super::super::IDependencyObject>(self)?;
        unsafe {
            let mut result__ = ::core::mem::MaybeUninit::zeroed();
            (::windows::core::Vtable::vtable(this).GetValue)(
                ::windows::core::Vtable::as_raw(this),
                ::core::mem::transmute_copy(dp),
                result__.as_mut_ptr(),
            )
            .from_abi::<::windows::core::IInspectable>(result__)
        }
    }
    pub fn SetValue<'a, P0>(
        &self,
        dp: &super::super::DependencyProperty,
        value: P0,
    ) -> ::windows::core::Result<()>
    where
        P0: ::std::convert::Into<::windows::core::InParam<'a, ::windows::core::IInspectable>>,
    {
        let this = &::windows::core::Interface::cast::<super::super::IDependencyObject>(self)?;
        unsafe {
            (::windows::core::Vtable::vtable(this).SetValue)(
                ::windows::core::Vtable::as_raw(this),
                ::core::mem::transmute_copy(dp),
                value.into().abi(),
            )
            .ok()
        }
    }
    pub fn ClearValue(&self, dp: &super::super::DependencyProperty) -> ::windows::core::Result<()> {
        let this = &::windows::core::Interface::cast::<super::super::IDependencyObject>(self)?;
        unsafe {
            (::windows::core::Vtable::vtable(this).ClearValue)(
                ::windows::core::Vtable::as_raw(this),
                ::core::mem::transmute_copy(dp),
            )
            .ok()
        }
    }
    pub fn ReadLocalValue(
        &self,
        dp: &super::super::DependencyProperty,
    ) -> ::windows::core::Result<::windows::core::IInspectable> {
        let this = &::windows::core::Interface::cast::<super::super::IDependencyObject>(self)?;
        unsafe {
            let mut result__ = ::core::mem::MaybeUninit::zeroed();
            (::windows::core::Vtable::vtable(this).ReadLocalValue)(
                ::windows::core::Vtable::as_raw(this),
                ::core::mem::transmute_copy(dp),
                result__.as_mut_ptr(),
            )
            .from_abi::<::windows::core::IInspectable>(result__)
        }
    }
    pub fn GetAnimationBaseValue(
        &self,
        dp: &super::super::DependencyProperty,
    ) -> ::windows::core::Result<::windows::core::IInspectable> {
        let this = &::windows::core::Interface::cast::<super::super::IDependencyObject>(self)?;
        unsafe {
            let mut result__ = ::core::mem::MaybeUninit::zeroed();
            (::windows::core::Vtable::vtable(this).GetAnimationBaseValue)(
                ::windows::core::Vtable::as_raw(this),
                ::core::mem::transmute_copy(dp),
                result__.as_mut_ptr(),
            )
            .from_abi::<::windows::core::IInspectable>(result__)
        }
    }
    pub fn RegisterPropertyChangedCallback(
        &self,
        dp: &super::super::DependencyProperty,
        callback: &super::super::DependencyPropertyChangedCallback,
    ) -> ::windows::core::Result<i64> {
        let this = &::windows::core::Interface::cast::<super::super::IDependencyObject>(self)?;
        unsafe {
            let mut result__ = ::core::mem::MaybeUninit::zeroed();
            (::windows::core::Vtable::vtable(this).RegisterPropertyChangedCallback)(
                ::windows::core::Vtable::as_raw(this),
                ::core::mem::transmute_copy(dp),
                ::core::mem::transmute_copy(callback),
                result__.as_mut_ptr(),
            )
            .from_abi::<i64>(result__)
        }
    }
    pub fn UnregisterPropertyChangedCallback(
        &self,
        dp: &super::super::DependencyProperty,
        token: i64,
    ) -> ::windows::core::Result<()> {
        let this = &::windows::core::Interface::cast::<super::super::IDependencyObject>(self)?;
        unsafe {
            (::windows::core::Vtable::vtable(this).UnregisterPropertyChangedCallback)(
                ::windows::core::Vtable::as_raw(this),
                ::core::mem::transmute_copy(dp),
                token,
            )
            .ok()
        }
    }
    pub fn Dispatcher(&self) -> ::windows::core::Result<::windows::UI::Core::CoreDispatcher> {
        let this = &::windows::core::Interface::cast::<super::super::IDependencyObject>(self)?;
        unsafe {
            let mut result__ = ::core::mem::MaybeUninit::zeroed();
            (::windows::core::Vtable::vtable(this).Dispatcher)(
                ::windows::core::Vtable::as_raw(this),
                result__.as_mut_ptr(),
            )
            .from_abi::<::windows::UI::Core::CoreDispatcher>(result__)
        }
    }
    #[doc = "*Required features: `\"UI_Dispatching\"`*"]
    #[cfg(feature = "UI_Dispatching")]
    pub fn DispatcherQueue(
        &self,
    ) -> ::windows::core::Result<super::super::super::Dispatching::DispatcherQueue> {
        let this = &::windows::core::Interface::cast::<super::super::IDependencyObject>(self)?;
        unsafe {
            let mut result__ = ::core::mem::MaybeUninit::zeroed();
            (::windows::core::Vtable::vtable(this).DispatcherQueue)(
                ::windows::core::Vtable::as_raw(this),
                result__.as_mut_ptr(),
            )
            .from_abi::<super::super::super::Dispatching::DispatcherQueue>(result__)
        }
    }
    pub fn EasingMode(&self) -> ::windows::core::Result<EasingMode> {
        let this = &::windows::core::Interface::cast::<IEasingFunctionBase>(self)?;
        unsafe {
            let mut result__ = ::core::mem::MaybeUninit::zeroed();
            (::windows::core::Vtable::vtable(this).EasingMode)(
                ::windows::core::Vtable::as_raw(this),
                result__.as_mut_ptr(),
            )
            .from_abi::<EasingMode>(result__)
        }
    }
    pub fn SetEasingMode(&self, value: EasingMode) -> ::windows::core::Result<()> {
        let this = &::windows::core::Interface::cast::<IEasingFunctionBase>(self)?;
        unsafe {
            (::windows::core::Vtable::vtable(this).SetEasingMode)(
                ::windows::core::Vtable::as_raw(this),
                value,
            )
            .ok()
        }
    }
    pub fn Ease(&self, normalizedtime: f64) -> ::windows::core::Result<f64> {
        let this = &::windows::core::Interface::cast::<IEasingFunctionBase>(self)?;
        unsafe {
            let mut result__ = ::core::mem::MaybeUninit::zeroed();
            (::windows::core::Vtable::vtable(this).Ease)(
                ::windows::core::Vtable::as_raw(this),
                normalizedtime,
                result__.as_mut_ptr(),
            )
            .from_abi::<f64>(result__)
        }
    }
    pub fn Power(&self) -> ::windows::core::Result<f64> {
        let this = self;
        unsafe {
            let mut result__ = ::core::mem::MaybeUninit::zeroed();
            (::windows::core::Vtable::vtable(this).Power)(
                ::windows::core::Vtable::as_raw(this),
                result__.as_mut_ptr(),
            )
            .from_abi::<f64>(result__)
        }
    }
    pub fn SetPower(&self, value: f64) -> ::windows::core::Result<()> {
        let this = self;
        unsafe {
            (::windows::core::Vtable::vtable(this).SetPower)(
                ::windows::core::Vtable::as_raw(this),
                value,
            )
            .ok()
        }
    }
    pub fn PowerProperty() -> ::windows::core::Result<super::super::DependencyProperty> {
        Self::IPowerEaseStatics(|this| unsafe {
            let mut result__ = ::core::mem::MaybeUninit::zeroed();
            (::windows::core::Vtable::vtable(this).PowerProperty)(
                ::windows::core::Vtable::as_raw(this),
                result__.as_mut_ptr(),
            )
            .from_abi::<super::super::DependencyProperty>(result__)
        })
    }
    #[doc(hidden)]
    pub fn IPowerEaseStatics<R, F: FnOnce(&IPowerEaseStatics) -> ::windows::core::Result<R>>(
        callback: F,
    ) -> ::windows::core::Result<R> {
        static SHARED: ::windows::core::FactoryCache<PowerEase, IPowerEaseStatics> =
            ::windows::core::FactoryCache::new();
        SHARED.call(callback)
    }
}
impl ::core::clone::Clone for PowerEase {
    fn clone(&self) -> Self {
        Self(self.0.clone())
    }
}
impl ::core::cmp::PartialEq for PowerEase {
    fn eq(&self, other: &Self) -> bool {
        self.0 == other.0
    }
}
impl ::core::cmp::Eq for PowerEase {}
impl ::core::fmt::Debug for PowerEase {
    fn fmt(&self, f: &mut ::core::fmt::Formatter<'_>) -> ::core::fmt::Result {
        f.debug_tuple("PowerEase").field(&self.0).finish()
    }
}
unsafe impl ::windows::core::RuntimeType for PowerEase {
    const SIGNATURE: ::windows::core::ConstBuffer = ::windows::core::ConstBuffer::from_slice(
        b"rc(Microsoft.UI.Xaml.Media.Animation.PowerEase;{372dfad0-5177-5df9-8e1e-920962468714})",
    );
    type DefaultType = ::core::option::Option<Self>;
    fn from_default(from: &Self::DefaultType) -> ::windows::core::Result<Self> {
        from.as_ref().cloned().ok_or(::windows::core::Error::OK)
    }
}
unsafe impl ::windows::core::Vtable for PowerEase {
    type Vtable = IPowerEase_Vtbl;
}
unsafe impl ::windows::core::Interface for PowerEase {
    const IID: ::windows::core::GUID = <IPowerEase as ::windows::core::Interface>::IID;
}
impl ::windows::core::RuntimeName for PowerEase {
    const NAME: &'static str = "Microsoft.UI.Xaml.Media.Animation.PowerEase";
}
::windows::core::interface_hierarchy!(
    PowerEase,
    ::windows::core::IUnknown,
    ::windows::core::IInspectable
);
impl ::core::convert::From<PowerEase> for EasingFunctionBase {
    fn from(value: PowerEase) -> Self {
        ::core::convert::From::from(&value)
    }
}
impl ::core::convert::From<&PowerEase> for EasingFunctionBase {
    fn from(value: &PowerEase) -> Self {
        ::windows::core::Interface::cast(value).unwrap()
    }
}
impl<'a> ::core::convert::From<&PowerEase> for ::windows::core::InParam<'a, EasingFunctionBase> {
    fn from(value: &PowerEase) -> Self {
        ::windows::core::InParam::owned(value.into())
    }
}
impl ::core::convert::From<PowerEase> for super::super::DependencyObject {
    fn from(value: PowerEase) -> Self {
        ::core::convert::From::from(&value)
    }
}
impl ::core::convert::From<&PowerEase> for super::super::DependencyObject {
    fn from(value: &PowerEase) -> Self {
        ::windows::core::Interface::cast(value).unwrap()
    }
}
impl<'a> ::core::convert::From<&PowerEase>
    for ::windows::core::InParam<'a, super::super::DependencyObject>
{
    fn from(value: &PowerEase) -> Self {
        ::windows::core::InParam::owned(value.into())
    }
}
unsafe impl ::core::marker::Send for PowerEase {}
unsafe impl ::core::marker::Sync for PowerEase {}
#[doc = "*Required features: `\"UI_Xaml_Media_Animation\"`*"]
#[repr(transparent)]
pub struct QuadraticEase(::windows::core::IUnknown);
impl QuadraticEase {
    pub fn new() -> ::windows::core::Result<Self> {
        Self::IActivationFactory(|f| f.ActivateInstance::<Self>())
    }
    fn IActivationFactory<
        R,
        F: FnOnce(&::windows::core::IGenericFactory) -> ::windows::core::Result<R>,
    >(
        callback: F,
    ) -> ::windows::core::Result<R> {
        static SHARED: ::windows::core::FactoryCache<
            QuadraticEase,
            ::windows::core::IGenericFactory,
        > = ::windows::core::FactoryCache::new();
        SHARED.call(callback)
    }
    pub fn GetValue(
        &self,
        dp: &super::super::DependencyProperty,
    ) -> ::windows::core::Result<::windows::core::IInspectable> {
        let this = &::windows::core::Interface::cast::<super::super::IDependencyObject>(self)?;
        unsafe {
            let mut result__ = ::core::mem::MaybeUninit::zeroed();
            (::windows::core::Vtable::vtable(this).GetValue)(
                ::windows::core::Vtable::as_raw(this),
                ::core::mem::transmute_copy(dp),
                result__.as_mut_ptr(),
            )
            .from_abi::<::windows::core::IInspectable>(result__)
        }
    }
    pub fn SetValue<'a, P0>(
        &self,
        dp: &super::super::DependencyProperty,
        value: P0,
    ) -> ::windows::core::Result<()>
    where
        P0: ::std::convert::Into<::windows::core::InParam<'a, ::windows::core::IInspectable>>,
    {
        let this = &::windows::core::Interface::cast::<super::super::IDependencyObject>(self)?;
        unsafe {
            (::windows::core::Vtable::vtable(this).SetValue)(
                ::windows::core::Vtable::as_raw(this),
                ::core::mem::transmute_copy(dp),
                value.into().abi(),
            )
            .ok()
        }
    }
    pub fn ClearValue(&self, dp: &super::super::DependencyProperty) -> ::windows::core::Result<()> {
        let this = &::windows::core::Interface::cast::<super::super::IDependencyObject>(self)?;
        unsafe {
            (::windows::core::Vtable::vtable(this).ClearValue)(
                ::windows::core::Vtable::as_raw(this),
                ::core::mem::transmute_copy(dp),
            )
            .ok()
        }
    }
    pub fn ReadLocalValue(
        &self,
        dp: &super::super::DependencyProperty,
    ) -> ::windows::core::Result<::windows::core::IInspectable> {
        let this = &::windows::core::Interface::cast::<super::super::IDependencyObject>(self)?;
        unsafe {
            let mut result__ = ::core::mem::MaybeUninit::zeroed();
            (::windows::core::Vtable::vtable(this).ReadLocalValue)(
                ::windows::core::Vtable::as_raw(this),
                ::core::mem::transmute_copy(dp),
                result__.as_mut_ptr(),
            )
            .from_abi::<::windows::core::IInspectable>(result__)
        }
    }
    pub fn GetAnimationBaseValue(
        &self,
        dp: &super::super::DependencyProperty,
    ) -> ::windows::core::Result<::windows::core::IInspectable> {
        let this = &::windows::core::Interface::cast::<super::super::IDependencyObject>(self)?;
        unsafe {
            let mut result__ = ::core::mem::MaybeUninit::zeroed();
            (::windows::core::Vtable::vtable(this).GetAnimationBaseValue)(
                ::windows::core::Vtable::as_raw(this),
                ::core::mem::transmute_copy(dp),
                result__.as_mut_ptr(),
            )
            .from_abi::<::windows::core::IInspectable>(result__)
        }
    }
    pub fn RegisterPropertyChangedCallback(
        &self,
        dp: &super::super::DependencyProperty,
        callback: &super::super::DependencyPropertyChangedCallback,
    ) -> ::windows::core::Result<i64> {
        let this = &::windows::core::Interface::cast::<super::super::IDependencyObject>(self)?;
        unsafe {
            let mut result__ = ::core::mem::MaybeUninit::zeroed();
            (::windows::core::Vtable::vtable(this).RegisterPropertyChangedCallback)(
                ::windows::core::Vtable::as_raw(this),
                ::core::mem::transmute_copy(dp),
                ::core::mem::transmute_copy(callback),
                result__.as_mut_ptr(),
            )
            .from_abi::<i64>(result__)
        }
    }
    pub fn UnregisterPropertyChangedCallback(
        &self,
        dp: &super::super::DependencyProperty,
        token: i64,
    ) -> ::windows::core::Result<()> {
        let this = &::windows::core::Interface::cast::<super::super::IDependencyObject>(self)?;
        unsafe {
            (::windows::core::Vtable::vtable(this).UnregisterPropertyChangedCallback)(
                ::windows::core::Vtable::as_raw(this),
                ::core::mem::transmute_copy(dp),
                token,
            )
            .ok()
        }
    }
    pub fn Dispatcher(&self) -> ::windows::core::Result<::windows::UI::Core::CoreDispatcher> {
        let this = &::windows::core::Interface::cast::<super::super::IDependencyObject>(self)?;
        unsafe {
            let mut result__ = ::core::mem::MaybeUninit::zeroed();
            (::windows::core::Vtable::vtable(this).Dispatcher)(
                ::windows::core::Vtable::as_raw(this),
                result__.as_mut_ptr(),
            )
            .from_abi::<::windows::UI::Core::CoreDispatcher>(result__)
        }
    }
    #[doc = "*Required features: `\"UI_Dispatching\"`*"]
    #[cfg(feature = "UI_Dispatching")]
    pub fn DispatcherQueue(
        &self,
    ) -> ::windows::core::Result<super::super::super::Dispatching::DispatcherQueue> {
        let this = &::windows::core::Interface::cast::<super::super::IDependencyObject>(self)?;
        unsafe {
            let mut result__ = ::core::mem::MaybeUninit::zeroed();
            (::windows::core::Vtable::vtable(this).DispatcherQueue)(
                ::windows::core::Vtable::as_raw(this),
                result__.as_mut_ptr(),
            )
            .from_abi::<super::super::super::Dispatching::DispatcherQueue>(result__)
        }
    }
    pub fn EasingMode(&self) -> ::windows::core::Result<EasingMode> {
        let this = &::windows::core::Interface::cast::<IEasingFunctionBase>(self)?;
        unsafe {
            let mut result__ = ::core::mem::MaybeUninit::zeroed();
            (::windows::core::Vtable::vtable(this).EasingMode)(
                ::windows::core::Vtable::as_raw(this),
                result__.as_mut_ptr(),
            )
            .from_abi::<EasingMode>(result__)
        }
    }
    pub fn SetEasingMode(&self, value: EasingMode) -> ::windows::core::Result<()> {
        let this = &::windows::core::Interface::cast::<IEasingFunctionBase>(self)?;
        unsafe {
            (::windows::core::Vtable::vtable(this).SetEasingMode)(
                ::windows::core::Vtable::as_raw(this),
                value,
            )
            .ok()
        }
    }
    pub fn Ease(&self, normalizedtime: f64) -> ::windows::core::Result<f64> {
        let this = &::windows::core::Interface::cast::<IEasingFunctionBase>(self)?;
        unsafe {
            let mut result__ = ::core::mem::MaybeUninit::zeroed();
            (::windows::core::Vtable::vtable(this).Ease)(
                ::windows::core::Vtable::as_raw(this),
                normalizedtime,
                result__.as_mut_ptr(),
            )
            .from_abi::<f64>(result__)
        }
    }
}
impl ::core::clone::Clone for QuadraticEase {
    fn clone(&self) -> Self {
        Self(self.0.clone())
    }
}
impl ::core::cmp::PartialEq for QuadraticEase {
    fn eq(&self, other: &Self) -> bool {
        self.0 == other.0
    }
}
impl ::core::cmp::Eq for QuadraticEase {}
impl ::core::fmt::Debug for QuadraticEase {
    fn fmt(&self, f: &mut ::core::fmt::Formatter<'_>) -> ::core::fmt::Result {
        f.debug_tuple("QuadraticEase").field(&self.0).finish()
    }
}
unsafe impl ::windows::core::RuntimeType for QuadraticEase {
    const SIGNATURE : ::windows::core::ConstBuffer = ::windows::core::ConstBuffer::from_slice ( b"rc(Microsoft.UI.Xaml.Media.Animation.QuadraticEase;{db85fda1-03b7-57cd-a1ef-8855cbf62191})" ) ;
    type DefaultType = ::core::option::Option<Self>;
    fn from_default(from: &Self::DefaultType) -> ::windows::core::Result<Self> {
        from.as_ref().cloned().ok_or(::windows::core::Error::OK)
    }
}
unsafe impl ::windows::core::Vtable for QuadraticEase {
    type Vtable = IQuadraticEase_Vtbl;
}
unsafe impl ::windows::core::Interface for QuadraticEase {
    const IID: ::windows::core::GUID = <IQuadraticEase as ::windows::core::Interface>::IID;
}
impl ::windows::core::RuntimeName for QuadraticEase {
    const NAME: &'static str = "Microsoft.UI.Xaml.Media.Animation.QuadraticEase";
}
::windows::core::interface_hierarchy!(
    QuadraticEase,
    ::windows::core::IUnknown,
    ::windows::core::IInspectable
);
impl ::core::convert::From<QuadraticEase> for EasingFunctionBase {
    fn from(value: QuadraticEase) -> Self {
        ::core::convert::From::from(&value)
    }
}
impl ::core::convert::From<&QuadraticEase> for EasingFunctionBase {
    fn from(value: &QuadraticEase) -> Self {
        ::windows::core::Interface::cast(value).unwrap()
    }
}
impl<'a> ::core::convert::From<&QuadraticEase>
    for ::windows::core::InParam<'a, EasingFunctionBase>
{
    fn from(value: &QuadraticEase) -> Self {
        ::windows::core::InParam::owned(value.into())
    }
}
impl ::core::convert::From<QuadraticEase> for super::super::DependencyObject {
    fn from(value: QuadraticEase) -> Self {
        ::core::convert::From::from(&value)
    }
}
impl ::core::convert::From<&QuadraticEase> for super::super::DependencyObject {
    fn from(value: &QuadraticEase) -> Self {
        ::windows::core::Interface::cast(value).unwrap()
    }
}
impl<'a> ::core::convert::From<&QuadraticEase>
    for ::windows::core::InParam<'a, super::super::DependencyObject>
{
    fn from(value: &QuadraticEase) -> Self {
        ::windows::core::InParam::owned(value.into())
    }
}
unsafe impl ::core::marker::Send for QuadraticEase {}
unsafe impl ::core::marker::Sync for QuadraticEase {}
#[doc = "*Required features: `\"UI_Xaml_Media_Animation\"`*"]
#[repr(transparent)]
pub struct QuarticEase(::windows::core::IUnknown);
impl QuarticEase {
    pub fn new() -> ::windows::core::Result<Self> {
        Self::IActivationFactory(|f| f.ActivateInstance::<Self>())
    }
    fn IActivationFactory<
        R,
        F: FnOnce(&::windows::core::IGenericFactory) -> ::windows::core::Result<R>,
    >(
        callback: F,
    ) -> ::windows::core::Result<R> {
        static SHARED: ::windows::core::FactoryCache<
            QuarticEase,
            ::windows::core::IGenericFactory,
        > = ::windows::core::FactoryCache::new();
        SHARED.call(callback)
    }
    pub fn GetValue(
        &self,
        dp: &super::super::DependencyProperty,
    ) -> ::windows::core::Result<::windows::core::IInspectable> {
        let this = &::windows::core::Interface::cast::<super::super::IDependencyObject>(self)?;
        unsafe {
            let mut result__ = ::core::mem::MaybeUninit::zeroed();
            (::windows::core::Vtable::vtable(this).GetValue)(
                ::windows::core::Vtable::as_raw(this),
                ::core::mem::transmute_copy(dp),
                result__.as_mut_ptr(),
            )
            .from_abi::<::windows::core::IInspectable>(result__)
        }
    }
    pub fn SetValue<'a, P0>(
        &self,
        dp: &super::super::DependencyProperty,
        value: P0,
    ) -> ::windows::core::Result<()>
    where
        P0: ::std::convert::Into<::windows::core::InParam<'a, ::windows::core::IInspectable>>,
    {
        let this = &::windows::core::Interface::cast::<super::super::IDependencyObject>(self)?;
        unsafe {
            (::windows::core::Vtable::vtable(this).SetValue)(
                ::windows::core::Vtable::as_raw(this),
                ::core::mem::transmute_copy(dp),
                value.into().abi(),
            )
            .ok()
        }
    }
    pub fn ClearValue(&self, dp: &super::super::DependencyProperty) -> ::windows::core::Result<()> {
        let this = &::windows::core::Interface::cast::<super::super::IDependencyObject>(self)?;
        unsafe {
            (::windows::core::Vtable::vtable(this).ClearValue)(
                ::windows::core::Vtable::as_raw(this),
                ::core::mem::transmute_copy(dp),
            )
            .ok()
        }
    }
    pub fn ReadLocalValue(
        &self,
        dp: &super::super::DependencyProperty,
    ) -> ::windows::core::Result<::windows::core::IInspectable> {
        let this = &::windows::core::Interface::cast::<super::super::IDependencyObject>(self)?;
        unsafe {
            let mut result__ = ::core::mem::MaybeUninit::zeroed();
            (::windows::core::Vtable::vtable(this).ReadLocalValue)(
                ::windows::core::Vtable::as_raw(this),
                ::core::mem::transmute_copy(dp),
                result__.as_mut_ptr(),
            )
            .from_abi::<::windows::core::IInspectable>(result__)
        }
    }
    pub fn GetAnimationBaseValue(
        &self,
        dp: &super::super::DependencyProperty,
    ) -> ::windows::core::Result<::windows::core::IInspectable> {
        let this = &::windows::core::Interface::cast::<super::super::IDependencyObject>(self)?;
        unsafe {
            let mut result__ = ::core::mem::MaybeUninit::zeroed();
            (::windows::core::Vtable::vtable(this).GetAnimationBaseValue)(
                ::windows::core::Vtable::as_raw(this),
                ::core::mem::transmute_copy(dp),
                result__.as_mut_ptr(),
            )
            .from_abi::<::windows::core::IInspectable>(result__)
        }
    }
    pub fn RegisterPropertyChangedCallback(
        &self,
        dp: &super::super::DependencyProperty,
        callback: &super::super::DependencyPropertyChangedCallback,
    ) -> ::windows::core::Result<i64> {
        let this = &::windows::core::Interface::cast::<super::super::IDependencyObject>(self)?;
        unsafe {
            let mut result__ = ::core::mem::MaybeUninit::zeroed();
            (::windows::core::Vtable::vtable(this).RegisterPropertyChangedCallback)(
                ::windows::core::Vtable::as_raw(this),
                ::core::mem::transmute_copy(dp),
                ::core::mem::transmute_copy(callback),
                result__.as_mut_ptr(),
            )
            .from_abi::<i64>(result__)
        }
    }
    pub fn UnregisterPropertyChangedCallback(
        &self,
        dp: &super::super::DependencyProperty,
        token: i64,
    ) -> ::windows::core::Result<()> {
        let this = &::windows::core::Interface::cast::<super::super::IDependencyObject>(self)?;
        unsafe {
            (::windows::core::Vtable::vtable(this).UnregisterPropertyChangedCallback)(
                ::windows::core::Vtable::as_raw(this),
                ::core::mem::transmute_copy(dp),
                token,
            )
            .ok()
        }
    }
    pub fn Dispatcher(&self) -> ::windows::core::Result<::windows::UI::Core::CoreDispatcher> {
        let this = &::windows::core::Interface::cast::<super::super::IDependencyObject>(self)?;
        unsafe {
            let mut result__ = ::core::mem::MaybeUninit::zeroed();
            (::windows::core::Vtable::vtable(this).Dispatcher)(
                ::windows::core::Vtable::as_raw(this),
                result__.as_mut_ptr(),
            )
            .from_abi::<::windows::UI::Core::CoreDispatcher>(result__)
        }
    }
    #[doc = "*Required features: `\"UI_Dispatching\"`*"]
    #[cfg(feature = "UI_Dispatching")]
    pub fn DispatcherQueue(
        &self,
    ) -> ::windows::core::Result<super::super::super::Dispatching::DispatcherQueue> {
        let this = &::windows::core::Interface::cast::<super::super::IDependencyObject>(self)?;
        unsafe {
            let mut result__ = ::core::mem::MaybeUninit::zeroed();
            (::windows::core::Vtable::vtable(this).DispatcherQueue)(
                ::windows::core::Vtable::as_raw(this),
                result__.as_mut_ptr(),
            )
            .from_abi::<super::super::super::Dispatching::DispatcherQueue>(result__)
        }
    }
    pub fn EasingMode(&self) -> ::windows::core::Result<EasingMode> {
        let this = &::windows::core::Interface::cast::<IEasingFunctionBase>(self)?;
        unsafe {
            let mut result__ = ::core::mem::MaybeUninit::zeroed();
            (::windows::core::Vtable::vtable(this).EasingMode)(
                ::windows::core::Vtable::as_raw(this),
                result__.as_mut_ptr(),
            )
            .from_abi::<EasingMode>(result__)
        }
    }
    pub fn SetEasingMode(&self, value: EasingMode) -> ::windows::core::Result<()> {
        let this = &::windows::core::Interface::cast::<IEasingFunctionBase>(self)?;
        unsafe {
            (::windows::core::Vtable::vtable(this).SetEasingMode)(
                ::windows::core::Vtable::as_raw(this),
                value,
            )
            .ok()
        }
    }
    pub fn Ease(&self, normalizedtime: f64) -> ::windows::core::Result<f64> {
        let this = &::windows::core::Interface::cast::<IEasingFunctionBase>(self)?;
        unsafe {
            let mut result__ = ::core::mem::MaybeUninit::zeroed();
            (::windows::core::Vtable::vtable(this).Ease)(
                ::windows::core::Vtable::as_raw(this),
                normalizedtime,
                result__.as_mut_ptr(),
            )
            .from_abi::<f64>(result__)
        }
    }
}
impl ::core::clone::Clone for QuarticEase {
    fn clone(&self) -> Self {
        Self(self.0.clone())
    }
}
impl ::core::cmp::PartialEq for QuarticEase {
    fn eq(&self, other: &Self) -> bool {
        self.0 == other.0
    }
}
impl ::core::cmp::Eq for QuarticEase {}
impl ::core::fmt::Debug for QuarticEase {
    fn fmt(&self, f: &mut ::core::fmt::Formatter<'_>) -> ::core::fmt::Result {
        f.debug_tuple("QuarticEase").field(&self.0).finish()
    }
}
unsafe impl ::windows::core::RuntimeType for QuarticEase {
    const SIGNATURE: ::windows::core::ConstBuffer = ::windows::core::ConstBuffer::from_slice(
        b"rc(Microsoft.UI.Xaml.Media.Animation.QuarticEase;{48215273-05f1-58aa-bade-0b71d7bd0484})",
    );
    type DefaultType = ::core::option::Option<Self>;
    fn from_default(from: &Self::DefaultType) -> ::windows::core::Result<Self> {
        from.as_ref().cloned().ok_or(::windows::core::Error::OK)
    }
}
unsafe impl ::windows::core::Vtable for QuarticEase {
    type Vtable = IQuarticEase_Vtbl;
}
unsafe impl ::windows::core::Interface for QuarticEase {
    const IID: ::windows::core::GUID = <IQuarticEase as ::windows::core::Interface>::IID;
}
impl ::windows::core::RuntimeName for QuarticEase {
    const NAME: &'static str = "Microsoft.UI.Xaml.Media.Animation.QuarticEase";
}
::windows::core::interface_hierarchy!(
    QuarticEase,
    ::windows::core::IUnknown,
    ::windows::core::IInspectable
);
impl ::core::convert::From<QuarticEase> for EasingFunctionBase {
    fn from(value: QuarticEase) -> Self {
        ::core::convert::From::from(&value)
    }
}
impl ::core::convert::From<&QuarticEase> for EasingFunctionBase {
    fn from(value: &QuarticEase) -> Self {
        ::windows::core::Interface::cast(value).unwrap()
    }
}
impl<'a> ::core::convert::From<&QuarticEase> for ::windows::core::InParam<'a, EasingFunctionBase> {
    fn from(value: &QuarticEase) -> Self {
        ::windows::core::InParam::owned(value.into())
    }
}
impl ::core::convert::From<QuarticEase> for super::super::DependencyObject {
    fn from(value: QuarticEase) -> Self {
        ::core::convert::From::from(&value)
    }
}
impl ::core::convert::From<&QuarticEase> for super::super::DependencyObject {
    fn from(value: &QuarticEase) -> Self {
        ::windows::core::Interface::cast(value).unwrap()
    }
}
impl<'a> ::core::convert::From<&QuarticEase>
    for ::windows::core::InParam<'a, super::super::DependencyObject>
{
    fn from(value: &QuarticEase) -> Self {
        ::windows::core::InParam::owned(value.into())
    }
}
unsafe impl ::core::marker::Send for QuarticEase {}
unsafe impl ::core::marker::Sync for QuarticEase {}
#[doc = "*Required features: `\"UI_Xaml_Media_Animation\"`*"]
#[repr(transparent)]
pub struct QuinticEase(::windows::core::IUnknown);
impl QuinticEase {
    pub fn new() -> ::windows::core::Result<Self> {
        Self::IActivationFactory(|f| f.ActivateInstance::<Self>())
    }
    fn IActivationFactory<
        R,
        F: FnOnce(&::windows::core::IGenericFactory) -> ::windows::core::Result<R>,
    >(
        callback: F,
    ) -> ::windows::core::Result<R> {
        static SHARED: ::windows::core::FactoryCache<
            QuinticEase,
            ::windows::core::IGenericFactory,
        > = ::windows::core::FactoryCache::new();
        SHARED.call(callback)
    }
    pub fn GetValue(
        &self,
        dp: &super::super::DependencyProperty,
    ) -> ::windows::core::Result<::windows::core::IInspectable> {
        let this = &::windows::core::Interface::cast::<super::super::IDependencyObject>(self)?;
        unsafe {
            let mut result__ = ::core::mem::MaybeUninit::zeroed();
            (::windows::core::Vtable::vtable(this).GetValue)(
                ::windows::core::Vtable::as_raw(this),
                ::core::mem::transmute_copy(dp),
                result__.as_mut_ptr(),
            )
            .from_abi::<::windows::core::IInspectable>(result__)
        }
    }
    pub fn SetValue<'a, P0>(
        &self,
        dp: &super::super::DependencyProperty,
        value: P0,
    ) -> ::windows::core::Result<()>
    where
        P0: ::std::convert::Into<::windows::core::InParam<'a, ::windows::core::IInspectable>>,
    {
        let this = &::windows::core::Interface::cast::<super::super::IDependencyObject>(self)?;
        unsafe {
            (::windows::core::Vtable::vtable(this).SetValue)(
                ::windows::core::Vtable::as_raw(this),
                ::core::mem::transmute_copy(dp),
                value.into().abi(),
            )
            .ok()
        }
    }
    pub fn ClearValue(&self, dp: &super::super::DependencyProperty) -> ::windows::core::Result<()> {
        let this = &::windows::core::Interface::cast::<super::super::IDependencyObject>(self)?;
        unsafe {
            (::windows::core::Vtable::vtable(this).ClearValue)(
                ::windows::core::Vtable::as_raw(this),
                ::core::mem::transmute_copy(dp),
            )
            .ok()
        }
    }
    pub fn ReadLocalValue(
        &self,
        dp: &super::super::DependencyProperty,
    ) -> ::windows::core::Result<::windows::core::IInspectable> {
        let this = &::windows::core::Interface::cast::<super::super::IDependencyObject>(self)?;
        unsafe {
            let mut result__ = ::core::mem::MaybeUninit::zeroed();
            (::windows::core::Vtable::vtable(this).ReadLocalValue)(
                ::windows::core::Vtable::as_raw(this),
                ::core::mem::transmute_copy(dp),
                result__.as_mut_ptr(),
            )
            .from_abi::<::windows::core::IInspectable>(result__)
        }
    }
    pub fn GetAnimationBaseValue(
        &self,
        dp: &super::super::DependencyProperty,
    ) -> ::windows::core::Result<::windows::core::IInspectable> {
        let this = &::windows::core::Interface::cast::<super::super::IDependencyObject>(self)?;
        unsafe {
            let mut result__ = ::core::mem::MaybeUninit::zeroed();
            (::windows::core::Vtable::vtable(this).GetAnimationBaseValue)(
                ::windows::core::Vtable::as_raw(this),
                ::core::mem::transmute_copy(dp),
                result__.as_mut_ptr(),
            )
            .from_abi::<::windows::core::IInspectable>(result__)
        }
    }
    pub fn RegisterPropertyChangedCallback(
        &self,
        dp: &super::super::DependencyProperty,
        callback: &super::super::DependencyPropertyChangedCallback,
    ) -> ::windows::core::Result<i64> {
        let this = &::windows::core::Interface::cast::<super::super::IDependencyObject>(self)?;
        unsafe {
            let mut result__ = ::core::mem::MaybeUninit::zeroed();
            (::windows::core::Vtable::vtable(this).RegisterPropertyChangedCallback)(
                ::windows::core::Vtable::as_raw(this),
                ::core::mem::transmute_copy(dp),
                ::core::mem::transmute_copy(callback),
                result__.as_mut_ptr(),
            )
            .from_abi::<i64>(result__)
        }
    }
    pub fn UnregisterPropertyChangedCallback(
        &self,
        dp: &super::super::DependencyProperty,
        token: i64,
    ) -> ::windows::core::Result<()> {
        let this = &::windows::core::Interface::cast::<super::super::IDependencyObject>(self)?;
        unsafe {
            (::windows::core::Vtable::vtable(this).UnregisterPropertyChangedCallback)(
                ::windows::core::Vtable::as_raw(this),
                ::core::mem::transmute_copy(dp),
                token,
            )
            .ok()
        }
    }
    pub fn Dispatcher(&self) -> ::windows::core::Result<::windows::UI::Core::CoreDispatcher> {
        let this = &::windows::core::Interface::cast::<super::super::IDependencyObject>(self)?;
        unsafe {
            let mut result__ = ::core::mem::MaybeUninit::zeroed();
            (::windows::core::Vtable::vtable(this).Dispatcher)(
                ::windows::core::Vtable::as_raw(this),
                result__.as_mut_ptr(),
            )
            .from_abi::<::windows::UI::Core::CoreDispatcher>(result__)
        }
    }
    #[doc = "*Required features: `\"UI_Dispatching\"`*"]
    #[cfg(feature = "UI_Dispatching")]
    pub fn DispatcherQueue(
        &self,
    ) -> ::windows::core::Result<super::super::super::Dispatching::DispatcherQueue> {
        let this = &::windows::core::Interface::cast::<super::super::IDependencyObject>(self)?;
        unsafe {
            let mut result__ = ::core::mem::MaybeUninit::zeroed();
            (::windows::core::Vtable::vtable(this).DispatcherQueue)(
                ::windows::core::Vtable::as_raw(this),
                result__.as_mut_ptr(),
            )
            .from_abi::<super::super::super::Dispatching::DispatcherQueue>(result__)
        }
    }
    pub fn EasingMode(&self) -> ::windows::core::Result<EasingMode> {
        let this = &::windows::core::Interface::cast::<IEasingFunctionBase>(self)?;
        unsafe {
            let mut result__ = ::core::mem::MaybeUninit::zeroed();
            (::windows::core::Vtable::vtable(this).EasingMode)(
                ::windows::core::Vtable::as_raw(this),
                result__.as_mut_ptr(),
            )
            .from_abi::<EasingMode>(result__)
        }
    }
    pub fn SetEasingMode(&self, value: EasingMode) -> ::windows::core::Result<()> {
        let this = &::windows::core::Interface::cast::<IEasingFunctionBase>(self)?;
        unsafe {
            (::windows::core::Vtable::vtable(this).SetEasingMode)(
                ::windows::core::Vtable::as_raw(this),
                value,
            )
            .ok()
        }
    }
    pub fn Ease(&self, normalizedtime: f64) -> ::windows::core::Result<f64> {
        let this = &::windows::core::Interface::cast::<IEasingFunctionBase>(self)?;
        unsafe {
            let mut result__ = ::core::mem::MaybeUninit::zeroed();
            (::windows::core::Vtable::vtable(this).Ease)(
                ::windows::core::Vtable::as_raw(this),
                normalizedtime,
                result__.as_mut_ptr(),
            )
            .from_abi::<f64>(result__)
        }
    }
}
impl ::core::clone::Clone for QuinticEase {
    fn clone(&self) -> Self {
        Self(self.0.clone())
    }
}
impl ::core::cmp::PartialEq for QuinticEase {
    fn eq(&self, other: &Self) -> bool {
        self.0 == other.0
    }
}
impl ::core::cmp::Eq for QuinticEase {}
impl ::core::fmt::Debug for QuinticEase {
    fn fmt(&self, f: &mut ::core::fmt::Formatter<'_>) -> ::core::fmt::Result {
        f.debug_tuple("QuinticEase").field(&self.0).finish()
    }
}
unsafe impl ::windows::core::RuntimeType for QuinticEase {
    const SIGNATURE: ::windows::core::ConstBuffer = ::windows::core::ConstBuffer::from_slice(
        b"rc(Microsoft.UI.Xaml.Media.Animation.QuinticEase;{dc2f05d5-a3ac-5dce-9b85-753a0c800fc2})",
    );
    type DefaultType = ::core::option::Option<Self>;
    fn from_default(from: &Self::DefaultType) -> ::windows::core::Result<Self> {
        from.as_ref().cloned().ok_or(::windows::core::Error::OK)
    }
}
unsafe impl ::windows::core::Vtable for QuinticEase {
    type Vtable = IQuinticEase_Vtbl;
}
unsafe impl ::windows::core::Interface for QuinticEase {
    const IID: ::windows::core::GUID = <IQuinticEase as ::windows::core::Interface>::IID;
}
impl ::windows::core::RuntimeName for QuinticEase {
    const NAME: &'static str = "Microsoft.UI.Xaml.Media.Animation.QuinticEase";
}
::windows::core::interface_hierarchy!(
    QuinticEase,
    ::windows::core::IUnknown,
    ::windows::core::IInspectable
);
impl ::core::convert::From<QuinticEase> for EasingFunctionBase {
    fn from(value: QuinticEase) -> Self {
        ::core::convert::From::from(&value)
    }
}
impl ::core::convert::From<&QuinticEase> for EasingFunctionBase {
    fn from(value: &QuinticEase) -> Self {
        ::windows::core::Interface::cast(value).unwrap()
    }
}
impl<'a> ::core::convert::From<&QuinticEase> for ::windows::core::InParam<'a, EasingFunctionBase> {
    fn from(value: &QuinticEase) -> Self {
        ::windows::core::InParam::owned(value.into())
    }
}
impl ::core::convert::From<QuinticEase> for super::super::DependencyObject {
    fn from(value: QuinticEase) -> Self {
        ::core::convert::From::from(&value)
    }
}
impl ::core::convert::From<&QuinticEase> for super::super::DependencyObject {
    fn from(value: &QuinticEase) -> Self {
        ::windows::core::Interface::cast(value).unwrap()
    }
}
impl<'a> ::core::convert::From<&QuinticEase>
    for ::windows::core::InParam<'a, super::super::DependencyObject>
{
    fn from(value: &QuinticEase) -> Self {
        ::windows::core::InParam::owned(value.into())
    }
}
unsafe impl ::core::marker::Send for QuinticEase {}
unsafe impl ::core::marker::Sync for QuinticEase {}
#[doc = "*Required features: `\"UI_Xaml_Media_Animation\"`*"]
#[repr(transparent)]
pub struct ReorderThemeTransition(::windows::core::IUnknown);
impl ReorderThemeTransition {
    pub fn new() -> ::windows::core::Result<Self> {
        Self::IActivationFactory(|f| f.ActivateInstance::<Self>())
    }
    fn IActivationFactory<
        R,
        F: FnOnce(&::windows::core::IGenericFactory) -> ::windows::core::Result<R>,
    >(
        callback: F,
    ) -> ::windows::core::Result<R> {
        static SHARED: ::windows::core::FactoryCache<
            ReorderThemeTransition,
            ::windows::core::IGenericFactory,
        > = ::windows::core::FactoryCache::new();
        SHARED.call(callback)
    }
    pub fn GetValue(
        &self,
        dp: &super::super::DependencyProperty,
    ) -> ::windows::core::Result<::windows::core::IInspectable> {
        let this = &::windows::core::Interface::cast::<super::super::IDependencyObject>(self)?;
        unsafe {
            let mut result__ = ::core::mem::MaybeUninit::zeroed();
            (::windows::core::Vtable::vtable(this).GetValue)(
                ::windows::core::Vtable::as_raw(this),
                ::core::mem::transmute_copy(dp),
                result__.as_mut_ptr(),
            )
            .from_abi::<::windows::core::IInspectable>(result__)
        }
    }
    pub fn SetValue<'a, P0>(
        &self,
        dp: &super::super::DependencyProperty,
        value: P0,
    ) -> ::windows::core::Result<()>
    where
        P0: ::std::convert::Into<::windows::core::InParam<'a, ::windows::core::IInspectable>>,
    {
        let this = &::windows::core::Interface::cast::<super::super::IDependencyObject>(self)?;
        unsafe {
            (::windows::core::Vtable::vtable(this).SetValue)(
                ::windows::core::Vtable::as_raw(this),
                ::core::mem::transmute_copy(dp),
                value.into().abi(),
            )
            .ok()
        }
    }
    pub fn ClearValue(&self, dp: &super::super::DependencyProperty) -> ::windows::core::Result<()> {
        let this = &::windows::core::Interface::cast::<super::super::IDependencyObject>(self)?;
        unsafe {
            (::windows::core::Vtable::vtable(this).ClearValue)(
                ::windows::core::Vtable::as_raw(this),
                ::core::mem::transmute_copy(dp),
            )
            .ok()
        }
    }
    pub fn ReadLocalValue(
        &self,
        dp: &super::super::DependencyProperty,
    ) -> ::windows::core::Result<::windows::core::IInspectable> {
        let this = &::windows::core::Interface::cast::<super::super::IDependencyObject>(self)?;
        unsafe {
            let mut result__ = ::core::mem::MaybeUninit::zeroed();
            (::windows::core::Vtable::vtable(this).ReadLocalValue)(
                ::windows::core::Vtable::as_raw(this),
                ::core::mem::transmute_copy(dp),
                result__.as_mut_ptr(),
            )
            .from_abi::<::windows::core::IInspectable>(result__)
        }
    }
    pub fn GetAnimationBaseValue(
        &self,
        dp: &super::super::DependencyProperty,
    ) -> ::windows::core::Result<::windows::core::IInspectable> {
        let this = &::windows::core::Interface::cast::<super::super::IDependencyObject>(self)?;
        unsafe {
            let mut result__ = ::core::mem::MaybeUninit::zeroed();
            (::windows::core::Vtable::vtable(this).GetAnimationBaseValue)(
                ::windows::core::Vtable::as_raw(this),
                ::core::mem::transmute_copy(dp),
                result__.as_mut_ptr(),
            )
            .from_abi::<::windows::core::IInspectable>(result__)
        }
    }
    pub fn RegisterPropertyChangedCallback(
        &self,
        dp: &super::super::DependencyProperty,
        callback: &super::super::DependencyPropertyChangedCallback,
    ) -> ::windows::core::Result<i64> {
        let this = &::windows::core::Interface::cast::<super::super::IDependencyObject>(self)?;
        unsafe {
            let mut result__ = ::core::mem::MaybeUninit::zeroed();
            (::windows::core::Vtable::vtable(this).RegisterPropertyChangedCallback)(
                ::windows::core::Vtable::as_raw(this),
                ::core::mem::transmute_copy(dp),
                ::core::mem::transmute_copy(callback),
                result__.as_mut_ptr(),
            )
            .from_abi::<i64>(result__)
        }
    }
    pub fn UnregisterPropertyChangedCallback(
        &self,
        dp: &super::super::DependencyProperty,
        token: i64,
    ) -> ::windows::core::Result<()> {
        let this = &::windows::core::Interface::cast::<super::super::IDependencyObject>(self)?;
        unsafe {
            (::windows::core::Vtable::vtable(this).UnregisterPropertyChangedCallback)(
                ::windows::core::Vtable::as_raw(this),
                ::core::mem::transmute_copy(dp),
                token,
            )
            .ok()
        }
    }
    pub fn Dispatcher(&self) -> ::windows::core::Result<::windows::UI::Core::CoreDispatcher> {
        let this = &::windows::core::Interface::cast::<super::super::IDependencyObject>(self)?;
        unsafe {
            let mut result__ = ::core::mem::MaybeUninit::zeroed();
            (::windows::core::Vtable::vtable(this).Dispatcher)(
                ::windows::core::Vtable::as_raw(this),
                result__.as_mut_ptr(),
            )
            .from_abi::<::windows::UI::Core::CoreDispatcher>(result__)
        }
    }
    #[doc = "*Required features: `\"UI_Dispatching\"`*"]
    #[cfg(feature = "UI_Dispatching")]
    pub fn DispatcherQueue(
        &self,
    ) -> ::windows::core::Result<super::super::super::Dispatching::DispatcherQueue> {
        let this = &::windows::core::Interface::cast::<super::super::IDependencyObject>(self)?;
        unsafe {
            let mut result__ = ::core::mem::MaybeUninit::zeroed();
            (::windows::core::Vtable::vtable(this).DispatcherQueue)(
                ::windows::core::Vtable::as_raw(this),
                result__.as_mut_ptr(),
            )
            .from_abi::<super::super::super::Dispatching::DispatcherQueue>(result__)
        }
    }
}
impl ::core::clone::Clone for ReorderThemeTransition {
    fn clone(&self) -> Self {
        Self(self.0.clone())
    }
}
impl ::core::cmp::PartialEq for ReorderThemeTransition {
    fn eq(&self, other: &Self) -> bool {
        self.0 == other.0
    }
}
impl ::core::cmp::Eq for ReorderThemeTransition {}
impl ::core::fmt::Debug for ReorderThemeTransition {
    fn fmt(&self, f: &mut ::core::fmt::Formatter<'_>) -> ::core::fmt::Result {
        f.debug_tuple("ReorderThemeTransition").field(&self.0).finish()
    }
}
unsafe impl ::windows::core::RuntimeType for ReorderThemeTransition {
    const SIGNATURE : ::windows::core::ConstBuffer = ::windows::core::ConstBuffer::from_slice ( b"rc(Microsoft.UI.Xaml.Media.Animation.ReorderThemeTransition;{0d5a0874-1df5-5379-b626-74721759438a})" ) ;
    type DefaultType = ::core::option::Option<Self>;
    fn from_default(from: &Self::DefaultType) -> ::windows::core::Result<Self> {
        from.as_ref().cloned().ok_or(::windows::core::Error::OK)
    }
}
unsafe impl ::windows::core::Vtable for ReorderThemeTransition {
    type Vtable = IReorderThemeTransition_Vtbl;
}
unsafe impl ::windows::core::Interface for ReorderThemeTransition {
    const IID: ::windows::core::GUID = <IReorderThemeTransition as ::windows::core::Interface>::IID;
}
impl ::windows::core::RuntimeName for ReorderThemeTransition {
    const NAME: &'static str = "Microsoft.UI.Xaml.Media.Animation.ReorderThemeTransition";
}
::windows::core::interface_hierarchy!(
    ReorderThemeTransition,
    ::windows::core::IUnknown,
    ::windows::core::IInspectable
);
impl ::core::convert::From<ReorderThemeTransition> for Transition {
    fn from(value: ReorderThemeTransition) -> Self {
        ::core::convert::From::from(&value)
    }
}
impl ::core::convert::From<&ReorderThemeTransition> for Transition {
    fn from(value: &ReorderThemeTransition) -> Self {
        ::windows::core::Interface::cast(value).unwrap()
    }
}
impl<'a> ::core::convert::From<&ReorderThemeTransition>
    for ::windows::core::InParam<'a, Transition>
{
    fn from(value: &ReorderThemeTransition) -> Self {
        ::windows::core::InParam::owned(value.into())
    }
}
impl ::core::convert::From<ReorderThemeTransition> for super::super::DependencyObject {
    fn from(value: ReorderThemeTransition) -> Self {
        ::core::convert::From::from(&value)
    }
}
impl ::core::convert::From<&ReorderThemeTransition> for super::super::DependencyObject {
    fn from(value: &ReorderThemeTransition) -> Self {
        ::windows::core::Interface::cast(value).unwrap()
    }
}
impl<'a> ::core::convert::From<&ReorderThemeTransition>
    for ::windows::core::InParam<'a, super::super::DependencyObject>
{
    fn from(value: &ReorderThemeTransition) -> Self {
        ::windows::core::InParam::owned(value.into())
    }
}
unsafe impl ::core::marker::Send for ReorderThemeTransition {}
unsafe impl ::core::marker::Sync for ReorderThemeTransition {}
#[doc = "*Required features: `\"UI_Xaml_Media_Animation\"`*"]
#[repr(transparent)]
pub struct RepeatBehaviorHelper(::windows::core::IUnknown);
impl RepeatBehaviorHelper {
    pub fn Forever() -> ::windows::core::Result<RepeatBehavior> {
        Self::IRepeatBehaviorHelperStatics(|this| unsafe {
            let mut result__ = ::core::mem::MaybeUninit::zeroed();
            (::windows::core::Vtable::vtable(this).Forever)(
                ::windows::core::Vtable::as_raw(this),
                result__.as_mut_ptr(),
            )
            .from_abi::<RepeatBehavior>(result__)
        })
    }
    pub fn FromCount(count: f64) -> ::windows::core::Result<RepeatBehavior> {
        Self::IRepeatBehaviorHelperStatics(|this| unsafe {
            let mut result__ = ::core::mem::MaybeUninit::zeroed();
            (::windows::core::Vtable::vtable(this).FromCount)(
                ::windows::core::Vtable::as_raw(this),
                count,
                result__.as_mut_ptr(),
            )
            .from_abi::<RepeatBehavior>(result__)
        })
    }
    pub fn FromDuration(
        duration: ::windows::Foundation::TimeSpan,
    ) -> ::windows::core::Result<RepeatBehavior> {
        Self::IRepeatBehaviorHelperStatics(|this| unsafe {
            let mut result__ = ::core::mem::MaybeUninit::zeroed();
            (::windows::core::Vtable::vtable(this).FromDuration)(
                ::windows::core::Vtable::as_raw(this),
                duration,
                result__.as_mut_ptr(),
            )
            .from_abi::<RepeatBehavior>(result__)
        })
    }
    pub fn GetHasCount(target: RepeatBehavior) -> ::windows::core::Result<bool> {
        Self::IRepeatBehaviorHelperStatics(|this| unsafe {
            let mut result__ = ::core::mem::MaybeUninit::zeroed();
            (::windows::core::Vtable::vtable(this).GetHasCount)(
                ::windows::core::Vtable::as_raw(this),
                target,
                result__.as_mut_ptr(),
            )
            .from_abi::<bool>(result__)
        })
    }
    pub fn GetHasDuration(target: RepeatBehavior) -> ::windows::core::Result<bool> {
        Self::IRepeatBehaviorHelperStatics(|this| unsafe {
            let mut result__ = ::core::mem::MaybeUninit::zeroed();
            (::windows::core::Vtable::vtable(this).GetHasDuration)(
                ::windows::core::Vtable::as_raw(this),
                target,
                result__.as_mut_ptr(),
            )
            .from_abi::<bool>(result__)
        })
    }
    pub fn Equals(target: RepeatBehavior, value: RepeatBehavior) -> ::windows::core::Result<bool> {
        Self::IRepeatBehaviorHelperStatics(|this| unsafe {
            let mut result__ = ::core::mem::MaybeUninit::zeroed();
            (::windows::core::Vtable::vtable(this).Equals)(
                ::windows::core::Vtable::as_raw(this),
                target,
                value,
                result__.as_mut_ptr(),
            )
            .from_abi::<bool>(result__)
        })
    }
    #[doc(hidden)]
    pub fn IRepeatBehaviorHelperStatics<
        R,
        F: FnOnce(&IRepeatBehaviorHelperStatics) -> ::windows::core::Result<R>,
    >(
        callback: F,
    ) -> ::windows::core::Result<R> {
        static SHARED: ::windows::core::FactoryCache<
            RepeatBehaviorHelper,
            IRepeatBehaviorHelperStatics,
        > = ::windows::core::FactoryCache::new();
        SHARED.call(callback)
    }
}
impl ::core::clone::Clone for RepeatBehaviorHelper {
    fn clone(&self) -> Self {
        Self(self.0.clone())
    }
}
impl ::core::cmp::PartialEq for RepeatBehaviorHelper {
    fn eq(&self, other: &Self) -> bool {
        self.0 == other.0
    }
}
impl ::core::cmp::Eq for RepeatBehaviorHelper {}
impl ::core::fmt::Debug for RepeatBehaviorHelper {
    fn fmt(&self, f: &mut ::core::fmt::Formatter<'_>) -> ::core::fmt::Result {
        f.debug_tuple("RepeatBehaviorHelper").field(&self.0).finish()
    }
}
unsafe impl ::windows::core::RuntimeType for RepeatBehaviorHelper {
    const SIGNATURE : ::windows::core::ConstBuffer = ::windows::core::ConstBuffer::from_slice ( b"rc(Microsoft.UI.Xaml.Media.Animation.RepeatBehaviorHelper;{4643f139-ffef-5c6a-8de6-142b41cd51a5})" ) ;
    type DefaultType = ::core::option::Option<Self>;
    fn from_default(from: &Self::DefaultType) -> ::windows::core::Result<Self> {
        from.as_ref().cloned().ok_or(::windows::core::Error::OK)
    }
}
unsafe impl ::windows::core::Vtable for RepeatBehaviorHelper {
    type Vtable = IRepeatBehaviorHelper_Vtbl;
}
unsafe impl ::windows::core::Interface for RepeatBehaviorHelper {
    const IID: ::windows::core::GUID = <IRepeatBehaviorHelper as ::windows::core::Interface>::IID;
}
impl ::windows::core::RuntimeName for RepeatBehaviorHelper {
    const NAME: &'static str = "Microsoft.UI.Xaml.Media.Animation.RepeatBehaviorHelper";
}
::windows::core::interface_hierarchy!(
    RepeatBehaviorHelper,
    ::windows::core::IUnknown,
    ::windows::core::IInspectable
);
unsafe impl ::core::marker::Send for RepeatBehaviorHelper {}
unsafe impl ::core::marker::Sync for RepeatBehaviorHelper {}
#[doc = "*Required features: `\"UI_Xaml_Media_Animation\"`*"]
#[repr(transparent)]
pub struct RepositionThemeAnimation(::windows::core::IUnknown);
impl RepositionThemeAnimation {
    pub fn new() -> ::windows::core::Result<Self> {
        Self::IActivationFactory(|f| f.ActivateInstance::<Self>())
    }
    fn IActivationFactory<
        R,
        F: FnOnce(&::windows::core::IGenericFactory) -> ::windows::core::Result<R>,
    >(
        callback: F,
    ) -> ::windows::core::Result<R> {
        static SHARED: ::windows::core::FactoryCache<
            RepositionThemeAnimation,
            ::windows::core::IGenericFactory,
        > = ::windows::core::FactoryCache::new();
        SHARED.call(callback)
    }
    pub fn GetValue(
        &self,
        dp: &super::super::DependencyProperty,
    ) -> ::windows::core::Result<::windows::core::IInspectable> {
        let this = &::windows::core::Interface::cast::<super::super::IDependencyObject>(self)?;
        unsafe {
            let mut result__ = ::core::mem::MaybeUninit::zeroed();
            (::windows::core::Vtable::vtable(this).GetValue)(
                ::windows::core::Vtable::as_raw(this),
                ::core::mem::transmute_copy(dp),
                result__.as_mut_ptr(),
            )
            .from_abi::<::windows::core::IInspectable>(result__)
        }
    }
    pub fn SetValue<'a, P0>(
        &self,
        dp: &super::super::DependencyProperty,
        value: P0,
    ) -> ::windows::core::Result<()>
    where
        P0: ::std::convert::Into<::windows::core::InParam<'a, ::windows::core::IInspectable>>,
    {
        let this = &::windows::core::Interface::cast::<super::super::IDependencyObject>(self)?;
        unsafe {
            (::windows::core::Vtable::vtable(this).SetValue)(
                ::windows::core::Vtable::as_raw(this),
                ::core::mem::transmute_copy(dp),
                value.into().abi(),
            )
            .ok()
        }
    }
    pub fn ClearValue(&self, dp: &super::super::DependencyProperty) -> ::windows::core::Result<()> {
        let this = &::windows::core::Interface::cast::<super::super::IDependencyObject>(self)?;
        unsafe {
            (::windows::core::Vtable::vtable(this).ClearValue)(
                ::windows::core::Vtable::as_raw(this),
                ::core::mem::transmute_copy(dp),
            )
            .ok()
        }
    }
    pub fn ReadLocalValue(
        &self,
        dp: &super::super::DependencyProperty,
    ) -> ::windows::core::Result<::windows::core::IInspectable> {
        let this = &::windows::core::Interface::cast::<super::super::IDependencyObject>(self)?;
        unsafe {
            let mut result__ = ::core::mem::MaybeUninit::zeroed();
            (::windows::core::Vtable::vtable(this).ReadLocalValue)(
                ::windows::core::Vtable::as_raw(this),
                ::core::mem::transmute_copy(dp),
                result__.as_mut_ptr(),
            )
            .from_abi::<::windows::core::IInspectable>(result__)
        }
    }
    pub fn GetAnimationBaseValue(
        &self,
        dp: &super::super::DependencyProperty,
    ) -> ::windows::core::Result<::windows::core::IInspectable> {
        let this = &::windows::core::Interface::cast::<super::super::IDependencyObject>(self)?;
        unsafe {
            let mut result__ = ::core::mem::MaybeUninit::zeroed();
            (::windows::core::Vtable::vtable(this).GetAnimationBaseValue)(
                ::windows::core::Vtable::as_raw(this),
                ::core::mem::transmute_copy(dp),
                result__.as_mut_ptr(),
            )
            .from_abi::<::windows::core::IInspectable>(result__)
        }
    }
    pub fn RegisterPropertyChangedCallback(
        &self,
        dp: &super::super::DependencyProperty,
        callback: &super::super::DependencyPropertyChangedCallback,
    ) -> ::windows::core::Result<i64> {
        let this = &::windows::core::Interface::cast::<super::super::IDependencyObject>(self)?;
        unsafe {
            let mut result__ = ::core::mem::MaybeUninit::zeroed();
            (::windows::core::Vtable::vtable(this).RegisterPropertyChangedCallback)(
                ::windows::core::Vtable::as_raw(this),
                ::core::mem::transmute_copy(dp),
                ::core::mem::transmute_copy(callback),
                result__.as_mut_ptr(),
            )
            .from_abi::<i64>(result__)
        }
    }
    pub fn UnregisterPropertyChangedCallback(
        &self,
        dp: &super::super::DependencyProperty,
        token: i64,
    ) -> ::windows::core::Result<()> {
        let this = &::windows::core::Interface::cast::<super::super::IDependencyObject>(self)?;
        unsafe {
            (::windows::core::Vtable::vtable(this).UnregisterPropertyChangedCallback)(
                ::windows::core::Vtable::as_raw(this),
                ::core::mem::transmute_copy(dp),
                token,
            )
            .ok()
        }
    }
    pub fn Dispatcher(&self) -> ::windows::core::Result<::windows::UI::Core::CoreDispatcher> {
        let this = &::windows::core::Interface::cast::<super::super::IDependencyObject>(self)?;
        unsafe {
            let mut result__ = ::core::mem::MaybeUninit::zeroed();
            (::windows::core::Vtable::vtable(this).Dispatcher)(
                ::windows::core::Vtable::as_raw(this),
                result__.as_mut_ptr(),
            )
            .from_abi::<::windows::UI::Core::CoreDispatcher>(result__)
        }
    }
    #[doc = "*Required features: `\"UI_Dispatching\"`*"]
    #[cfg(feature = "UI_Dispatching")]
    pub fn DispatcherQueue(
        &self,
    ) -> ::windows::core::Result<super::super::super::Dispatching::DispatcherQueue> {
        let this = &::windows::core::Interface::cast::<super::super::IDependencyObject>(self)?;
        unsafe {
            let mut result__ = ::core::mem::MaybeUninit::zeroed();
            (::windows::core::Vtable::vtable(this).DispatcherQueue)(
                ::windows::core::Vtable::as_raw(this),
                result__.as_mut_ptr(),
            )
            .from_abi::<super::super::super::Dispatching::DispatcherQueue>(result__)
        }
    }
    pub fn TargetName(&self) -> ::windows::core::Result<::windows::core::HSTRING> {
        let this = self;
        unsafe {
            let mut result__ = ::core::mem::MaybeUninit::zeroed();
            (::windows::core::Vtable::vtable(this).TargetName)(
                ::windows::core::Vtable::as_raw(this),
                result__.as_mut_ptr(),
            )
            .from_abi::<::windows::core::HSTRING>(result__)
        }
    }
    pub fn SetTargetName(&self, value: &::windows::core::HSTRING) -> ::windows::core::Result<()> {
        let this = self;
        unsafe {
            (::windows::core::Vtable::vtable(this).SetTargetName)(
                ::windows::core::Vtable::as_raw(this),
                ::core::mem::transmute_copy(value),
            )
            .ok()
        }
    }
    pub fn FromHorizontalOffset(&self) -> ::windows::core::Result<f64> {
        let this = self;
        unsafe {
            let mut result__ = ::core::mem::MaybeUninit::zeroed();
            (::windows::core::Vtable::vtable(this).FromHorizontalOffset)(
                ::windows::core::Vtable::as_raw(this),
                result__.as_mut_ptr(),
            )
            .from_abi::<f64>(result__)
        }
    }
    pub fn SetFromHorizontalOffset(&self, value: f64) -> ::windows::core::Result<()> {
        let this = self;
        unsafe {
            (::windows::core::Vtable::vtable(this).SetFromHorizontalOffset)(
                ::windows::core::Vtable::as_raw(this),
                value,
            )
            .ok()
        }
    }
    pub fn FromVerticalOffset(&self) -> ::windows::core::Result<f64> {
        let this = self;
        unsafe {
            let mut result__ = ::core::mem::MaybeUninit::zeroed();
            (::windows::core::Vtable::vtable(this).FromVerticalOffset)(
                ::windows::core::Vtable::as_raw(this),
                result__.as_mut_ptr(),
            )
            .from_abi::<f64>(result__)
        }
    }
    pub fn SetFromVerticalOffset(&self, value: f64) -> ::windows::core::Result<()> {
        let this = self;
        unsafe {
            (::windows::core::Vtable::vtable(this).SetFromVerticalOffset)(
                ::windows::core::Vtable::as_raw(this),
                value,
            )
            .ok()
        }
    }
    pub fn TargetNameProperty() -> ::windows::core::Result<super::super::DependencyProperty> {
        Self::IRepositionThemeAnimationStatics(|this| unsafe {
            let mut result__ = ::core::mem::MaybeUninit::zeroed();
            (::windows::core::Vtable::vtable(this).TargetNameProperty)(
                ::windows::core::Vtable::as_raw(this),
                result__.as_mut_ptr(),
            )
            .from_abi::<super::super::DependencyProperty>(result__)
        })
    }
    pub fn FromHorizontalOffsetProperty(
    ) -> ::windows::core::Result<super::super::DependencyProperty> {
        Self::IRepositionThemeAnimationStatics(|this| unsafe {
            let mut result__ = ::core::mem::MaybeUninit::zeroed();
            (::windows::core::Vtable::vtable(this).FromHorizontalOffsetProperty)(
                ::windows::core::Vtable::as_raw(this),
                result__.as_mut_ptr(),
            )
            .from_abi::<super::super::DependencyProperty>(result__)
        })
    }
    pub fn FromVerticalOffsetProperty() -> ::windows::core::Result<super::super::DependencyProperty>
    {
        Self::IRepositionThemeAnimationStatics(|this| unsafe {
            let mut result__ = ::core::mem::MaybeUninit::zeroed();
            (::windows::core::Vtable::vtable(this).FromVerticalOffsetProperty)(
                ::windows::core::Vtable::as_raw(this),
                result__.as_mut_ptr(),
            )
            .from_abi::<super::super::DependencyProperty>(result__)
        })
    }
    pub fn AutoReverse(&self) -> ::windows::core::Result<bool> {
        let this = &::windows::core::Interface::cast::<ITimeline>(self)?;
        unsafe {
            let mut result__ = ::core::mem::MaybeUninit::zeroed();
            (::windows::core::Vtable::vtable(this).AutoReverse)(
                ::windows::core::Vtable::as_raw(this),
                result__.as_mut_ptr(),
            )
            .from_abi::<bool>(result__)
        }
    }
    pub fn SetAutoReverse(&self, value: bool) -> ::windows::core::Result<()> {
        let this = &::windows::core::Interface::cast::<ITimeline>(self)?;
        unsafe {
            (::windows::core::Vtable::vtable(this).SetAutoReverse)(
                ::windows::core::Vtable::as_raw(this),
                value,
            )
            .ok()
        }
    }
    pub fn BeginTime(
        &self,
    ) -> ::windows::core::Result<::windows::Foundation::IReference<::windows::Foundation::TimeSpan>>
    {
        let this = &::windows::core::Interface::cast::<ITimeline>(self)?;
        unsafe {
            let mut result__ = ::core::mem::MaybeUninit::zeroed();
            (::windows::core::Vtable::vtable(this).BeginTime)(
                ::windows::core::Vtable::as_raw(this),
                result__.as_mut_ptr(),
            )
            .from_abi::<::windows::Foundation::IReference<::windows::Foundation::TimeSpan>>(
                result__,
            )
        }
    }
    pub fn SetBeginTime<'a, P0, E0>(&self, value: P0) -> ::windows::core::Result<()>
    where
        P0: ::std::convert::TryInto<
            ::windows::core::InParam<
                'a,
                ::windows::Foundation::IReference<::windows::Foundation::TimeSpan>,
            >,
            Error = E0,
        >,
        E0: ::std::convert::Into<::windows::core::Error>,
    {
        let this = &::windows::core::Interface::cast::<ITimeline>(self)?;
        unsafe {
            (::windows::core::Vtable::vtable(this).SetBeginTime)(
                ::windows::core::Vtable::as_raw(this),
                value.try_into().map_err(|e| e.into())?.abi(),
            )
            .ok()
        }
    }
    pub fn Duration(&self) -> ::windows::core::Result<super::super::Duration> {
        let this = &::windows::core::Interface::cast::<ITimeline>(self)?;
        unsafe {
            let mut result__ = ::core::mem::MaybeUninit::zeroed();
            (::windows::core::Vtable::vtable(this).Duration)(
                ::windows::core::Vtable::as_raw(this),
                result__.as_mut_ptr(),
            )
            .from_abi::<super::super::Duration>(result__)
        }
    }
    pub fn SetDuration(&self, value: super::super::Duration) -> ::windows::core::Result<()> {
        let this = &::windows::core::Interface::cast::<ITimeline>(self)?;
        unsafe {
            (::windows::core::Vtable::vtable(this).SetDuration)(
                ::windows::core::Vtable::as_raw(this),
                value,
            )
            .ok()
        }
    }
    pub fn SpeedRatio(&self) -> ::windows::core::Result<f64> {
        let this = &::windows::core::Interface::cast::<ITimeline>(self)?;
        unsafe {
            let mut result__ = ::core::mem::MaybeUninit::zeroed();
            (::windows::core::Vtable::vtable(this).SpeedRatio)(
                ::windows::core::Vtable::as_raw(this),
                result__.as_mut_ptr(),
            )
            .from_abi::<f64>(result__)
        }
    }
    pub fn SetSpeedRatio(&self, value: f64) -> ::windows::core::Result<()> {
        let this = &::windows::core::Interface::cast::<ITimeline>(self)?;
        unsafe {
            (::windows::core::Vtable::vtable(this).SetSpeedRatio)(
                ::windows::core::Vtable::as_raw(this),
                value,
            )
            .ok()
        }
    }
    pub fn FillBehavior(&self) -> ::windows::core::Result<FillBehavior> {
        let this = &::windows::core::Interface::cast::<ITimeline>(self)?;
        unsafe {
            let mut result__ = ::core::mem::MaybeUninit::zeroed();
            (::windows::core::Vtable::vtable(this).FillBehavior)(
                ::windows::core::Vtable::as_raw(this),
                result__.as_mut_ptr(),
            )
            .from_abi::<FillBehavior>(result__)
        }
    }
    pub fn SetFillBehavior(&self, value: FillBehavior) -> ::windows::core::Result<()> {
        let this = &::windows::core::Interface::cast::<ITimeline>(self)?;
        unsafe {
            (::windows::core::Vtable::vtable(this).SetFillBehavior)(
                ::windows::core::Vtable::as_raw(this),
                value,
            )
            .ok()
        }
    }
    pub fn RepeatBehavior(&self) -> ::windows::core::Result<RepeatBehavior> {
        let this = &::windows::core::Interface::cast::<ITimeline>(self)?;
        unsafe {
            let mut result__ = ::core::mem::MaybeUninit::zeroed();
            (::windows::core::Vtable::vtable(this).RepeatBehavior)(
                ::windows::core::Vtable::as_raw(this),
                result__.as_mut_ptr(),
            )
            .from_abi::<RepeatBehavior>(result__)
        }
    }
    pub fn SetRepeatBehavior(&self, value: RepeatBehavior) -> ::windows::core::Result<()> {
        let this = &::windows::core::Interface::cast::<ITimeline>(self)?;
        unsafe {
            (::windows::core::Vtable::vtable(this).SetRepeatBehavior)(
                ::windows::core::Vtable::as_raw(this),
                value,
            )
            .ok()
        }
    }
    pub fn Completed(
        &self,
        handler: &::windows::Foundation::EventHandler<::windows::core::IInspectable>,
    ) -> ::windows::core::Result<::windows::Foundation::EventRegistrationToken> {
        let this = &::windows::core::Interface::cast::<ITimeline>(self)?;
        unsafe {
            let mut result__ = ::core::mem::MaybeUninit::zeroed();
            (::windows::core::Vtable::vtable(this).Completed)(
                ::windows::core::Vtable::as_raw(this),
                ::core::mem::transmute_copy(handler),
                result__.as_mut_ptr(),
            )
            .from_abi::<::windows::Foundation::EventRegistrationToken>(result__)
        }
    }
    pub fn RemoveCompleted(
        &self,
        token: ::windows::Foundation::EventRegistrationToken,
    ) -> ::windows::core::Result<()> {
        let this = &::windows::core::Interface::cast::<ITimeline>(self)?;
        unsafe {
            (::windows::core::Vtable::vtable(this).RemoveCompleted)(
                ::windows::core::Vtable::as_raw(this),
                token,
            )
            .ok()
        }
    }
    #[doc(hidden)]
    pub fn IRepositionThemeAnimationStatics<
        R,
        F: FnOnce(&IRepositionThemeAnimationStatics) -> ::windows::core::Result<R>,
    >(
        callback: F,
    ) -> ::windows::core::Result<R> {
        static SHARED: ::windows::core::FactoryCache<
            RepositionThemeAnimation,
            IRepositionThemeAnimationStatics,
        > = ::windows::core::FactoryCache::new();
        SHARED.call(callback)
    }
}
impl ::core::clone::Clone for RepositionThemeAnimation {
    fn clone(&self) -> Self {
        Self(self.0.clone())
    }
}
impl ::core::cmp::PartialEq for RepositionThemeAnimation {
    fn eq(&self, other: &Self) -> bool {
        self.0 == other.0
    }
}
impl ::core::cmp::Eq for RepositionThemeAnimation {}
impl ::core::fmt::Debug for RepositionThemeAnimation {
    fn fmt(&self, f: &mut ::core::fmt::Formatter<'_>) -> ::core::fmt::Result {
        f.debug_tuple("RepositionThemeAnimation").field(&self.0).finish()
    }
}
unsafe impl ::windows::core::RuntimeType for RepositionThemeAnimation {
    const SIGNATURE : ::windows::core::ConstBuffer = ::windows::core::ConstBuffer::from_slice ( b"rc(Microsoft.UI.Xaml.Media.Animation.RepositionThemeAnimation;{36f7e025-23c1-53de-8df9-7dc1e9c788fd})" ) ;
    type DefaultType = ::core::option::Option<Self>;
    fn from_default(from: &Self::DefaultType) -> ::windows::core::Result<Self> {
        from.as_ref().cloned().ok_or(::windows::core::Error::OK)
    }
}
unsafe impl ::windows::core::Vtable for RepositionThemeAnimation {
    type Vtable = IRepositionThemeAnimation_Vtbl;
}
unsafe impl ::windows::core::Interface for RepositionThemeAnimation {
    const IID: ::windows::core::GUID =
        <IRepositionThemeAnimation as ::windows::core::Interface>::IID;
}
impl ::windows::core::RuntimeName for RepositionThemeAnimation {
    const NAME: &'static str = "Microsoft.UI.Xaml.Media.Animation.RepositionThemeAnimation";
}
::windows::core::interface_hierarchy!(
    RepositionThemeAnimation,
    ::windows::core::IUnknown,
    ::windows::core::IInspectable
);
impl ::core::convert::From<RepositionThemeAnimation> for Timeline {
    fn from(value: RepositionThemeAnimation) -> Self {
        ::core::convert::From::from(&value)
    }
}
impl ::core::convert::From<&RepositionThemeAnimation> for Timeline {
    fn from(value: &RepositionThemeAnimation) -> Self {
        ::windows::core::Interface::cast(value).unwrap()
    }
}
impl<'a> ::core::convert::From<&RepositionThemeAnimation>
    for ::windows::core::InParam<'a, Timeline>
{
    fn from(value: &RepositionThemeAnimation) -> Self {
        ::windows::core::InParam::owned(value.into())
    }
}
impl ::core::convert::From<RepositionThemeAnimation> for super::super::DependencyObject {
    fn from(value: RepositionThemeAnimation) -> Self {
        ::core::convert::From::from(&value)
    }
}
impl ::core::convert::From<&RepositionThemeAnimation> for super::super::DependencyObject {
    fn from(value: &RepositionThemeAnimation) -> Self {
        ::windows::core::Interface::cast(value).unwrap()
    }
}
impl<'a> ::core::convert::From<&RepositionThemeAnimation>
    for ::windows::core::InParam<'a, super::super::DependencyObject>
{
    fn from(value: &RepositionThemeAnimation) -> Self {
        ::windows::core::InParam::owned(value.into())
    }
}
unsafe impl ::core::marker::Send for RepositionThemeAnimation {}
unsafe impl ::core::marker::Sync for RepositionThemeAnimation {}
#[doc = "*Required features: `\"UI_Xaml_Media_Animation\"`*"]
#[repr(transparent)]
pub struct RepositionThemeTransition(::windows::core::IUnknown);
impl RepositionThemeTransition {
    pub fn new() -> ::windows::core::Result<Self> {
        Self::IActivationFactory(|f| f.ActivateInstance::<Self>())
    }
    fn IActivationFactory<
        R,
        F: FnOnce(&::windows::core::IGenericFactory) -> ::windows::core::Result<R>,
    >(
        callback: F,
    ) -> ::windows::core::Result<R> {
        static SHARED: ::windows::core::FactoryCache<
            RepositionThemeTransition,
            ::windows::core::IGenericFactory,
        > = ::windows::core::FactoryCache::new();
        SHARED.call(callback)
    }
    pub fn GetValue(
        &self,
        dp: &super::super::DependencyProperty,
    ) -> ::windows::core::Result<::windows::core::IInspectable> {
        let this = &::windows::core::Interface::cast::<super::super::IDependencyObject>(self)?;
        unsafe {
            let mut result__ = ::core::mem::MaybeUninit::zeroed();
            (::windows::core::Vtable::vtable(this).GetValue)(
                ::windows::core::Vtable::as_raw(this),
                ::core::mem::transmute_copy(dp),
                result__.as_mut_ptr(),
            )
            .from_abi::<::windows::core::IInspectable>(result__)
        }
    }
    pub fn SetValue<'a, P0>(
        &self,
        dp: &super::super::DependencyProperty,
        value: P0,
    ) -> ::windows::core::Result<()>
    where
        P0: ::std::convert::Into<::windows::core::InParam<'a, ::windows::core::IInspectable>>,
    {
        let this = &::windows::core::Interface::cast::<super::super::IDependencyObject>(self)?;
        unsafe {
            (::windows::core::Vtable::vtable(this).SetValue)(
                ::windows::core::Vtable::as_raw(this),
                ::core::mem::transmute_copy(dp),
                value.into().abi(),
            )
            .ok()
        }
    }
    pub fn ClearValue(&self, dp: &super::super::DependencyProperty) -> ::windows::core::Result<()> {
        let this = &::windows::core::Interface::cast::<super::super::IDependencyObject>(self)?;
        unsafe {
            (::windows::core::Vtable::vtable(this).ClearValue)(
                ::windows::core::Vtable::as_raw(this),
                ::core::mem::transmute_copy(dp),
            )
            .ok()
        }
    }
    pub fn ReadLocalValue(
        &self,
        dp: &super::super::DependencyProperty,
    ) -> ::windows::core::Result<::windows::core::IInspectable> {
        let this = &::windows::core::Interface::cast::<super::super::IDependencyObject>(self)?;
        unsafe {
            let mut result__ = ::core::mem::MaybeUninit::zeroed();
            (::windows::core::Vtable::vtable(this).ReadLocalValue)(
                ::windows::core::Vtable::as_raw(this),
                ::core::mem::transmute_copy(dp),
                result__.as_mut_ptr(),
            )
            .from_abi::<::windows::core::IInspectable>(result__)
        }
    }
    pub fn GetAnimationBaseValue(
        &self,
        dp: &super::super::DependencyProperty,
    ) -> ::windows::core::Result<::windows::core::IInspectable> {
        let this = &::windows::core::Interface::cast::<super::super::IDependencyObject>(self)?;
        unsafe {
            let mut result__ = ::core::mem::MaybeUninit::zeroed();
            (::windows::core::Vtable::vtable(this).GetAnimationBaseValue)(
                ::windows::core::Vtable::as_raw(this),
                ::core::mem::transmute_copy(dp),
                result__.as_mut_ptr(),
            )
            .from_abi::<::windows::core::IInspectable>(result__)
        }
    }
    pub fn RegisterPropertyChangedCallback(
        &self,
        dp: &super::super::DependencyProperty,
        callback: &super::super::DependencyPropertyChangedCallback,
    ) -> ::windows::core::Result<i64> {
        let this = &::windows::core::Interface::cast::<super::super::IDependencyObject>(self)?;
        unsafe {
            let mut result__ = ::core::mem::MaybeUninit::zeroed();
            (::windows::core::Vtable::vtable(this).RegisterPropertyChangedCallback)(
                ::windows::core::Vtable::as_raw(this),
                ::core::mem::transmute_copy(dp),
                ::core::mem::transmute_copy(callback),
                result__.as_mut_ptr(),
            )
            .from_abi::<i64>(result__)
        }
    }
    pub fn UnregisterPropertyChangedCallback(
        &self,
        dp: &super::super::DependencyProperty,
        token: i64,
    ) -> ::windows::core::Result<()> {
        let this = &::windows::core::Interface::cast::<super::super::IDependencyObject>(self)?;
        unsafe {
            (::windows::core::Vtable::vtable(this).UnregisterPropertyChangedCallback)(
                ::windows::core::Vtable::as_raw(this),
                ::core::mem::transmute_copy(dp),
                token,
            )
            .ok()
        }
    }
    pub fn Dispatcher(&self) -> ::windows::core::Result<::windows::UI::Core::CoreDispatcher> {
        let this = &::windows::core::Interface::cast::<super::super::IDependencyObject>(self)?;
        unsafe {
            let mut result__ = ::core::mem::MaybeUninit::zeroed();
            (::windows::core::Vtable::vtable(this).Dispatcher)(
                ::windows::core::Vtable::as_raw(this),
                result__.as_mut_ptr(),
            )
            .from_abi::<::windows::UI::Core::CoreDispatcher>(result__)
        }
    }
    #[doc = "*Required features: `\"UI_Dispatching\"`*"]
    #[cfg(feature = "UI_Dispatching")]
    pub fn DispatcherQueue(
        &self,
    ) -> ::windows::core::Result<super::super::super::Dispatching::DispatcherQueue> {
        let this = &::windows::core::Interface::cast::<super::super::IDependencyObject>(self)?;
        unsafe {
            let mut result__ = ::core::mem::MaybeUninit::zeroed();
            (::windows::core::Vtable::vtable(this).DispatcherQueue)(
                ::windows::core::Vtable::as_raw(this),
                result__.as_mut_ptr(),
            )
            .from_abi::<super::super::super::Dispatching::DispatcherQueue>(result__)
        }
    }
    pub fn IsStaggeringEnabled(&self) -> ::windows::core::Result<bool> {
        let this = self;
        unsafe {
            let mut result__ = ::core::mem::MaybeUninit::zeroed();
            (::windows::core::Vtable::vtable(this).IsStaggeringEnabled)(
                ::windows::core::Vtable::as_raw(this),
                result__.as_mut_ptr(),
            )
            .from_abi::<bool>(result__)
        }
    }
    pub fn SetIsStaggeringEnabled(&self, value: bool) -> ::windows::core::Result<()> {
        let this = self;
        unsafe {
            (::windows::core::Vtable::vtable(this).SetIsStaggeringEnabled)(
                ::windows::core::Vtable::as_raw(this),
                value,
            )
            .ok()
        }
    }
    pub fn IsStaggeringEnabledProperty() -> ::windows::core::Result<super::super::DependencyProperty>
    {
        Self::IRepositionThemeTransitionStatics(|this| unsafe {
            let mut result__ = ::core::mem::MaybeUninit::zeroed();
            (::windows::core::Vtable::vtable(this).IsStaggeringEnabledProperty)(
                ::windows::core::Vtable::as_raw(this),
                result__.as_mut_ptr(),
            )
            .from_abi::<super::super::DependencyProperty>(result__)
        })
    }
    #[doc(hidden)]
    pub fn IRepositionThemeTransitionStatics<
        R,
        F: FnOnce(&IRepositionThemeTransitionStatics) -> ::windows::core::Result<R>,
    >(
        callback: F,
    ) -> ::windows::core::Result<R> {
        static SHARED: ::windows::core::FactoryCache<
            RepositionThemeTransition,
            IRepositionThemeTransitionStatics,
        > = ::windows::core::FactoryCache::new();
        SHARED.call(callback)
    }
}
impl ::core::clone::Clone for RepositionThemeTransition {
    fn clone(&self) -> Self {
        Self(self.0.clone())
    }
}
impl ::core::cmp::PartialEq for RepositionThemeTransition {
    fn eq(&self, other: &Self) -> bool {
        self.0 == other.0
    }
}
impl ::core::cmp::Eq for RepositionThemeTransition {}
impl ::core::fmt::Debug for RepositionThemeTransition {
    fn fmt(&self, f: &mut ::core::fmt::Formatter<'_>) -> ::core::fmt::Result {
        f.debug_tuple("RepositionThemeTransition").field(&self.0).finish()
    }
}
unsafe impl ::windows::core::RuntimeType for RepositionThemeTransition {
    const SIGNATURE : ::windows::core::ConstBuffer = ::windows::core::ConstBuffer::from_slice ( b"rc(Microsoft.UI.Xaml.Media.Animation.RepositionThemeTransition;{7728e3f0-24b1-5484-824a-c0b41c2745d5})" ) ;
    type DefaultType = ::core::option::Option<Self>;
    fn from_default(from: &Self::DefaultType) -> ::windows::core::Result<Self> {
        from.as_ref().cloned().ok_or(::windows::core::Error::OK)
    }
}
unsafe impl ::windows::core::Vtable for RepositionThemeTransition {
    type Vtable = IRepositionThemeTransition_Vtbl;
}
unsafe impl ::windows::core::Interface for RepositionThemeTransition {
    const IID: ::windows::core::GUID =
        <IRepositionThemeTransition as ::windows::core::Interface>::IID;
}
impl ::windows::core::RuntimeName for RepositionThemeTransition {
    const NAME: &'static str = "Microsoft.UI.Xaml.Media.Animation.RepositionThemeTransition";
}
::windows::core::interface_hierarchy!(
    RepositionThemeTransition,
    ::windows::core::IUnknown,
    ::windows::core::IInspectable
);
impl ::core::convert::From<RepositionThemeTransition> for Transition {
    fn from(value: RepositionThemeTransition) -> Self {
        ::core::convert::From::from(&value)
    }
}
impl ::core::convert::From<&RepositionThemeTransition> for Transition {
    fn from(value: &RepositionThemeTransition) -> Self {
        ::windows::core::Interface::cast(value).unwrap()
    }
}
impl<'a> ::core::convert::From<&RepositionThemeTransition>
    for ::windows::core::InParam<'a, Transition>
{
    fn from(value: &RepositionThemeTransition) -> Self {
        ::windows::core::InParam::owned(value.into())
    }
}
impl ::core::convert::From<RepositionThemeTransition> for super::super::DependencyObject {
    fn from(value: RepositionThemeTransition) -> Self {
        ::core::convert::From::from(&value)
    }
}
impl ::core::convert::From<&RepositionThemeTransition> for super::super::DependencyObject {
    fn from(value: &RepositionThemeTransition) -> Self {
        ::windows::core::Interface::cast(value).unwrap()
    }
}
impl<'a> ::core::convert::From<&RepositionThemeTransition>
    for ::windows::core::InParam<'a, super::super::DependencyObject>
{
    fn from(value: &RepositionThemeTransition) -> Self {
        ::windows::core::InParam::owned(value.into())
    }
}
unsafe impl ::core::marker::Send for RepositionThemeTransition {}
unsafe impl ::core::marker::Sync for RepositionThemeTransition {}
#[doc = "*Required features: `\"UI_Xaml_Media_Animation\"`*"]
#[repr(transparent)]
pub struct SineEase(::windows::core::IUnknown);
impl SineEase {
    pub fn new() -> ::windows::core::Result<Self> {
        Self::IActivationFactory(|f| f.ActivateInstance::<Self>())
    }
    fn IActivationFactory<
        R,
        F: FnOnce(&::windows::core::IGenericFactory) -> ::windows::core::Result<R>,
    >(
        callback: F,
    ) -> ::windows::core::Result<R> {
        static SHARED: ::windows::core::FactoryCache<SineEase, ::windows::core::IGenericFactory> =
            ::windows::core::FactoryCache::new();
        SHARED.call(callback)
    }
    pub fn GetValue(
        &self,
        dp: &super::super::DependencyProperty,
    ) -> ::windows::core::Result<::windows::core::IInspectable> {
        let this = &::windows::core::Interface::cast::<super::super::IDependencyObject>(self)?;
        unsafe {
            let mut result__ = ::core::mem::MaybeUninit::zeroed();
            (::windows::core::Vtable::vtable(this).GetValue)(
                ::windows::core::Vtable::as_raw(this),
                ::core::mem::transmute_copy(dp),
                result__.as_mut_ptr(),
            )
            .from_abi::<::windows::core::IInspectable>(result__)
        }
    }
    pub fn SetValue<'a, P0>(
        &self,
        dp: &super::super::DependencyProperty,
        value: P0,
    ) -> ::windows::core::Result<()>
    where
        P0: ::std::convert::Into<::windows::core::InParam<'a, ::windows::core::IInspectable>>,
    {
        let this = &::windows::core::Interface::cast::<super::super::IDependencyObject>(self)?;
        unsafe {
            (::windows::core::Vtable::vtable(this).SetValue)(
                ::windows::core::Vtable::as_raw(this),
                ::core::mem::transmute_copy(dp),
                value.into().abi(),
            )
            .ok()
        }
    }
    pub fn ClearValue(&self, dp: &super::super::DependencyProperty) -> ::windows::core::Result<()> {
        let this = &::windows::core::Interface::cast::<super::super::IDependencyObject>(self)?;
        unsafe {
            (::windows::core::Vtable::vtable(this).ClearValue)(
                ::windows::core::Vtable::as_raw(this),
                ::core::mem::transmute_copy(dp),
            )
            .ok()
        }
    }
    pub fn ReadLocalValue(
        &self,
        dp: &super::super::DependencyProperty,
    ) -> ::windows::core::Result<::windows::core::IInspectable> {
        let this = &::windows::core::Interface::cast::<super::super::IDependencyObject>(self)?;
        unsafe {
            let mut result__ = ::core::mem::MaybeUninit::zeroed();
            (::windows::core::Vtable::vtable(this).ReadLocalValue)(
                ::windows::core::Vtable::as_raw(this),
                ::core::mem::transmute_copy(dp),
                result__.as_mut_ptr(),
            )
            .from_abi::<::windows::core::IInspectable>(result__)
        }
    }
    pub fn GetAnimationBaseValue(
        &self,
        dp: &super::super::DependencyProperty,
    ) -> ::windows::core::Result<::windows::core::IInspectable> {
        let this = &::windows::core::Interface::cast::<super::super::IDependencyObject>(self)?;
        unsafe {
            let mut result__ = ::core::mem::MaybeUninit::zeroed();
            (::windows::core::Vtable::vtable(this).GetAnimationBaseValue)(
                ::windows::core::Vtable::as_raw(this),
                ::core::mem::transmute_copy(dp),
                result__.as_mut_ptr(),
            )
            .from_abi::<::windows::core::IInspectable>(result__)
        }
    }
    pub fn RegisterPropertyChangedCallback(
        &self,
        dp: &super::super::DependencyProperty,
        callback: &super::super::DependencyPropertyChangedCallback,
    ) -> ::windows::core::Result<i64> {
        let this = &::windows::core::Interface::cast::<super::super::IDependencyObject>(self)?;
        unsafe {
            let mut result__ = ::core::mem::MaybeUninit::zeroed();
            (::windows::core::Vtable::vtable(this).RegisterPropertyChangedCallback)(
                ::windows::core::Vtable::as_raw(this),
                ::core::mem::transmute_copy(dp),
                ::core::mem::transmute_copy(callback),
                result__.as_mut_ptr(),
            )
            .from_abi::<i64>(result__)
        }
    }
    pub fn UnregisterPropertyChangedCallback(
        &self,
        dp: &super::super::DependencyProperty,
        token: i64,
    ) -> ::windows::core::Result<()> {
        let this = &::windows::core::Interface::cast::<super::super::IDependencyObject>(self)?;
        unsafe {
            (::windows::core::Vtable::vtable(this).UnregisterPropertyChangedCallback)(
                ::windows::core::Vtable::as_raw(this),
                ::core::mem::transmute_copy(dp),
                token,
            )
            .ok()
        }
    }
    pub fn Dispatcher(&self) -> ::windows::core::Result<::windows::UI::Core::CoreDispatcher> {
        let this = &::windows::core::Interface::cast::<super::super::IDependencyObject>(self)?;
        unsafe {
            let mut result__ = ::core::mem::MaybeUninit::zeroed();
            (::windows::core::Vtable::vtable(this).Dispatcher)(
                ::windows::core::Vtable::as_raw(this),
                result__.as_mut_ptr(),
            )
            .from_abi::<::windows::UI::Core::CoreDispatcher>(result__)
        }
    }
    #[doc = "*Required features: `\"UI_Dispatching\"`*"]
    #[cfg(feature = "UI_Dispatching")]
    pub fn DispatcherQueue(
        &self,
    ) -> ::windows::core::Result<super::super::super::Dispatching::DispatcherQueue> {
        let this = &::windows::core::Interface::cast::<super::super::IDependencyObject>(self)?;
        unsafe {
            let mut result__ = ::core::mem::MaybeUninit::zeroed();
            (::windows::core::Vtable::vtable(this).DispatcherQueue)(
                ::windows::core::Vtable::as_raw(this),
                result__.as_mut_ptr(),
            )
            .from_abi::<super::super::super::Dispatching::DispatcherQueue>(result__)
        }
    }
    pub fn EasingMode(&self) -> ::windows::core::Result<EasingMode> {
        let this = &::windows::core::Interface::cast::<IEasingFunctionBase>(self)?;
        unsafe {
            let mut result__ = ::core::mem::MaybeUninit::zeroed();
            (::windows::core::Vtable::vtable(this).EasingMode)(
                ::windows::core::Vtable::as_raw(this),
                result__.as_mut_ptr(),
            )
            .from_abi::<EasingMode>(result__)
        }
    }
    pub fn SetEasingMode(&self, value: EasingMode) -> ::windows::core::Result<()> {
        let this = &::windows::core::Interface::cast::<IEasingFunctionBase>(self)?;
        unsafe {
            (::windows::core::Vtable::vtable(this).SetEasingMode)(
                ::windows::core::Vtable::as_raw(this),
                value,
            )
            .ok()
        }
    }
    pub fn Ease(&self, normalizedtime: f64) -> ::windows::core::Result<f64> {
        let this = &::windows::core::Interface::cast::<IEasingFunctionBase>(self)?;
        unsafe {
            let mut result__ = ::core::mem::MaybeUninit::zeroed();
            (::windows::core::Vtable::vtable(this).Ease)(
                ::windows::core::Vtable::as_raw(this),
                normalizedtime,
                result__.as_mut_ptr(),
            )
            .from_abi::<f64>(result__)
        }
    }
}
impl ::core::clone::Clone for SineEase {
    fn clone(&self) -> Self {
        Self(self.0.clone())
    }
}
impl ::core::cmp::PartialEq for SineEase {
    fn eq(&self, other: &Self) -> bool {
        self.0 == other.0
    }
}
impl ::core::cmp::Eq for SineEase {}
impl ::core::fmt::Debug for SineEase {
    fn fmt(&self, f: &mut ::core::fmt::Formatter<'_>) -> ::core::fmt::Result {
        f.debug_tuple("SineEase").field(&self.0).finish()
    }
}
unsafe impl ::windows::core::RuntimeType for SineEase {
    const SIGNATURE: ::windows::core::ConstBuffer = ::windows::core::ConstBuffer::from_slice(
        b"rc(Microsoft.UI.Xaml.Media.Animation.SineEase;{6115539b-663d-5131-b7c2-74bb5fdc6a1d})",
    );
    type DefaultType = ::core::option::Option<Self>;
    fn from_default(from: &Self::DefaultType) -> ::windows::core::Result<Self> {
        from.as_ref().cloned().ok_or(::windows::core::Error::OK)
    }
}
unsafe impl ::windows::core::Vtable for SineEase {
    type Vtable = ISineEase_Vtbl;
}
unsafe impl ::windows::core::Interface for SineEase {
    const IID: ::windows::core::GUID = <ISineEase as ::windows::core::Interface>::IID;
}
impl ::windows::core::RuntimeName for SineEase {
    const NAME: &'static str = "Microsoft.UI.Xaml.Media.Animation.SineEase";
}
::windows::core::interface_hierarchy!(
    SineEase,
    ::windows::core::IUnknown,
    ::windows::core::IInspectable
);
impl ::core::convert::From<SineEase> for EasingFunctionBase {
    fn from(value: SineEase) -> Self {
        ::core::convert::From::from(&value)
    }
}
impl ::core::convert::From<&SineEase> for EasingFunctionBase {
    fn from(value: &SineEase) -> Self {
        ::windows::core::Interface::cast(value).unwrap()
    }
}
impl<'a> ::core::convert::From<&SineEase> for ::windows::core::InParam<'a, EasingFunctionBase> {
    fn from(value: &SineEase) -> Self {
        ::windows::core::InParam::owned(value.into())
    }
}
impl ::core::convert::From<SineEase> for super::super::DependencyObject {
    fn from(value: SineEase) -> Self {
        ::core::convert::From::from(&value)
    }
}
impl ::core::convert::From<&SineEase> for super::super::DependencyObject {
    fn from(value: &SineEase) -> Self {
        ::windows::core::Interface::cast(value).unwrap()
    }
}
impl<'a> ::core::convert::From<&SineEase>
    for ::windows::core::InParam<'a, super::super::DependencyObject>
{
    fn from(value: &SineEase) -> Self {
        ::windows::core::InParam::owned(value.into())
    }
}
unsafe impl ::core::marker::Send for SineEase {}
unsafe impl ::core::marker::Sync for SineEase {}
#[doc = "*Required features: `\"UI_Xaml_Media_Animation\"`*"]
#[repr(transparent)]
pub struct SlideNavigationTransitionInfo(::windows::core::IUnknown);
impl SlideNavigationTransitionInfo {
    pub fn new() -> ::windows::core::Result<Self> {
        Self::IActivationFactory(|f| f.ActivateInstance::<Self>())
    }
    fn IActivationFactory<
        R,
        F: FnOnce(&::windows::core::IGenericFactory) -> ::windows::core::Result<R>,
    >(
        callback: F,
    ) -> ::windows::core::Result<R> {
        static SHARED: ::windows::core::FactoryCache<
            SlideNavigationTransitionInfo,
            ::windows::core::IGenericFactory,
        > = ::windows::core::FactoryCache::new();
        SHARED.call(callback)
    }
    pub fn GetValue(
        &self,
        dp: &super::super::DependencyProperty,
    ) -> ::windows::core::Result<::windows::core::IInspectable> {
        let this = &::windows::core::Interface::cast::<super::super::IDependencyObject>(self)?;
        unsafe {
            let mut result__ = ::core::mem::MaybeUninit::zeroed();
            (::windows::core::Vtable::vtable(this).GetValue)(
                ::windows::core::Vtable::as_raw(this),
                ::core::mem::transmute_copy(dp),
                result__.as_mut_ptr(),
            )
            .from_abi::<::windows::core::IInspectable>(result__)
        }
    }
    pub fn SetValue<'a, P0>(
        &self,
        dp: &super::super::DependencyProperty,
        value: P0,
    ) -> ::windows::core::Result<()>
    where
        P0: ::std::convert::Into<::windows::core::InParam<'a, ::windows::core::IInspectable>>,
    {
        let this = &::windows::core::Interface::cast::<super::super::IDependencyObject>(self)?;
        unsafe {
            (::windows::core::Vtable::vtable(this).SetValue)(
                ::windows::core::Vtable::as_raw(this),
                ::core::mem::transmute_copy(dp),
                value.into().abi(),
            )
            .ok()
        }
    }
    pub fn ClearValue(&self, dp: &super::super::DependencyProperty) -> ::windows::core::Result<()> {
        let this = &::windows::core::Interface::cast::<super::super::IDependencyObject>(self)?;
        unsafe {
            (::windows::core::Vtable::vtable(this).ClearValue)(
                ::windows::core::Vtable::as_raw(this),
                ::core::mem::transmute_copy(dp),
            )
            .ok()
        }
    }
    pub fn ReadLocalValue(
        &self,
        dp: &super::super::DependencyProperty,
    ) -> ::windows::core::Result<::windows::core::IInspectable> {
        let this = &::windows::core::Interface::cast::<super::super::IDependencyObject>(self)?;
        unsafe {
            let mut result__ = ::core::mem::MaybeUninit::zeroed();
            (::windows::core::Vtable::vtable(this).ReadLocalValue)(
                ::windows::core::Vtable::as_raw(this),
                ::core::mem::transmute_copy(dp),
                result__.as_mut_ptr(),
            )
            .from_abi::<::windows::core::IInspectable>(result__)
        }
    }
    pub fn GetAnimationBaseValue(
        &self,
        dp: &super::super::DependencyProperty,
    ) -> ::windows::core::Result<::windows::core::IInspectable> {
        let this = &::windows::core::Interface::cast::<super::super::IDependencyObject>(self)?;
        unsafe {
            let mut result__ = ::core::mem::MaybeUninit::zeroed();
            (::windows::core::Vtable::vtable(this).GetAnimationBaseValue)(
                ::windows::core::Vtable::as_raw(this),
                ::core::mem::transmute_copy(dp),
                result__.as_mut_ptr(),
            )
            .from_abi::<::windows::core::IInspectable>(result__)
        }
    }
    pub fn RegisterPropertyChangedCallback(
        &self,
        dp: &super::super::DependencyProperty,
        callback: &super::super::DependencyPropertyChangedCallback,
    ) -> ::windows::core::Result<i64> {
        let this = &::windows::core::Interface::cast::<super::super::IDependencyObject>(self)?;
        unsafe {
            let mut result__ = ::core::mem::MaybeUninit::zeroed();
            (::windows::core::Vtable::vtable(this).RegisterPropertyChangedCallback)(
                ::windows::core::Vtable::as_raw(this),
                ::core::mem::transmute_copy(dp),
                ::core::mem::transmute_copy(callback),
                result__.as_mut_ptr(),
            )
            .from_abi::<i64>(result__)
        }
    }
    pub fn UnregisterPropertyChangedCallback(
        &self,
        dp: &super::super::DependencyProperty,
        token: i64,
    ) -> ::windows::core::Result<()> {
        let this = &::windows::core::Interface::cast::<super::super::IDependencyObject>(self)?;
        unsafe {
            (::windows::core::Vtable::vtable(this).UnregisterPropertyChangedCallback)(
                ::windows::core::Vtable::as_raw(this),
                ::core::mem::transmute_copy(dp),
                token,
            )
            .ok()
        }
    }
    pub fn Dispatcher(&self) -> ::windows::core::Result<::windows::UI::Core::CoreDispatcher> {
        let this = &::windows::core::Interface::cast::<super::super::IDependencyObject>(self)?;
        unsafe {
            let mut result__ = ::core::mem::MaybeUninit::zeroed();
            (::windows::core::Vtable::vtable(this).Dispatcher)(
                ::windows::core::Vtable::as_raw(this),
                result__.as_mut_ptr(),
            )
            .from_abi::<::windows::UI::Core::CoreDispatcher>(result__)
        }
    }
    #[doc = "*Required features: `\"UI_Dispatching\"`*"]
    #[cfg(feature = "UI_Dispatching")]
    pub fn DispatcherQueue(
        &self,
    ) -> ::windows::core::Result<super::super::super::Dispatching::DispatcherQueue> {
        let this = &::windows::core::Interface::cast::<super::super::IDependencyObject>(self)?;
        unsafe {
            let mut result__ = ::core::mem::MaybeUninit::zeroed();
            (::windows::core::Vtable::vtable(this).DispatcherQueue)(
                ::windows::core::Vtable::as_raw(this),
                result__.as_mut_ptr(),
            )
            .from_abi::<super::super::super::Dispatching::DispatcherQueue>(result__)
        }
    }
    pub fn Effect(&self) -> ::windows::core::Result<SlideNavigationTransitionEffect> {
        let this = self;
        unsafe {
            let mut result__ = ::core::mem::MaybeUninit::zeroed();
            (::windows::core::Vtable::vtable(this).Effect)(
                ::windows::core::Vtable::as_raw(this),
                result__.as_mut_ptr(),
            )
            .from_abi::<SlideNavigationTransitionEffect>(result__)
        }
    }
    pub fn SetEffect(&self, value: SlideNavigationTransitionEffect) -> ::windows::core::Result<()> {
        let this = self;
        unsafe {
            (::windows::core::Vtable::vtable(this).SetEffect)(
                ::windows::core::Vtable::as_raw(this),
                value,
            )
            .ok()
        }
    }
    pub fn EffectProperty() -> ::windows::core::Result<super::super::DependencyProperty> {
        Self::ISlideNavigationTransitionInfoStatics(|this| unsafe {
            let mut result__ = ::core::mem::MaybeUninit::zeroed();
            (::windows::core::Vtable::vtable(this).EffectProperty)(
                ::windows::core::Vtable::as_raw(this),
                result__.as_mut_ptr(),
            )
            .from_abi::<super::super::DependencyProperty>(result__)
        })
    }
    #[doc(hidden)]
    pub fn ISlideNavigationTransitionInfoStatics<
        R,
        F: FnOnce(&ISlideNavigationTransitionInfoStatics) -> ::windows::core::Result<R>,
    >(
        callback: F,
    ) -> ::windows::core::Result<R> {
        static SHARED: ::windows::core::FactoryCache<
            SlideNavigationTransitionInfo,
            ISlideNavigationTransitionInfoStatics,
        > = ::windows::core::FactoryCache::new();
        SHARED.call(callback)
    }
}
impl ::core::clone::Clone for SlideNavigationTransitionInfo {
    fn clone(&self) -> Self {
        Self(self.0.clone())
    }
}
impl ::core::cmp::PartialEq for SlideNavigationTransitionInfo {
    fn eq(&self, other: &Self) -> bool {
        self.0 == other.0
    }
}
impl ::core::cmp::Eq for SlideNavigationTransitionInfo {}
impl ::core::fmt::Debug for SlideNavigationTransitionInfo {
    fn fmt(&self, f: &mut ::core::fmt::Formatter<'_>) -> ::core::fmt::Result {
        f.debug_tuple("SlideNavigationTransitionInfo").field(&self.0).finish()
    }
}
unsafe impl ::windows::core::RuntimeType for SlideNavigationTransitionInfo {
    const SIGNATURE : ::windows::core::ConstBuffer = ::windows::core::ConstBuffer::from_slice ( b"rc(Microsoft.UI.Xaml.Media.Animation.SlideNavigationTransitionInfo;{53eade0e-6b01-511f-a563-6f5724a6c1c1})" ) ;
    type DefaultType = ::core::option::Option<Self>;
    fn from_default(from: &Self::DefaultType) -> ::windows::core::Result<Self> {
        from.as_ref().cloned().ok_or(::windows::core::Error::OK)
    }
}
unsafe impl ::windows::core::Vtable for SlideNavigationTransitionInfo {
    type Vtable = ISlideNavigationTransitionInfo_Vtbl;
}
unsafe impl ::windows::core::Interface for SlideNavigationTransitionInfo {
    const IID: ::windows::core::GUID =
        <ISlideNavigationTransitionInfo as ::windows::core::Interface>::IID;
}
impl ::windows::core::RuntimeName for SlideNavigationTransitionInfo {
    const NAME: &'static str = "Microsoft.UI.Xaml.Media.Animation.SlideNavigationTransitionInfo";
}
::windows::core::interface_hierarchy!(
    SlideNavigationTransitionInfo,
    ::windows::core::IUnknown,
    ::windows::core::IInspectable
);
impl ::core::convert::From<SlideNavigationTransitionInfo> for NavigationTransitionInfo {
    fn from(value: SlideNavigationTransitionInfo) -> Self {
        ::core::convert::From::from(&value)
    }
}
impl ::core::convert::From<&SlideNavigationTransitionInfo> for NavigationTransitionInfo {
    fn from(value: &SlideNavigationTransitionInfo) -> Self {
        ::windows::core::Interface::cast(value).unwrap()
    }
}
impl<'a> ::core::convert::From<&SlideNavigationTransitionInfo>
    for ::windows::core::InParam<'a, NavigationTransitionInfo>
{
    fn from(value: &SlideNavigationTransitionInfo) -> Self {
        ::windows::core::InParam::owned(value.into())
    }
}
impl ::core::convert::From<SlideNavigationTransitionInfo> for super::super::DependencyObject {
    fn from(value: SlideNavigationTransitionInfo) -> Self {
        ::core::convert::From::from(&value)
    }
}
impl ::core::convert::From<&SlideNavigationTransitionInfo> for super::super::DependencyObject {
    fn from(value: &SlideNavigationTransitionInfo) -> Self {
        ::windows::core::Interface::cast(value).unwrap()
    }
}
impl<'a> ::core::convert::From<&SlideNavigationTransitionInfo>
    for ::windows::core::InParam<'a, super::super::DependencyObject>
{
    fn from(value: &SlideNavigationTransitionInfo) -> Self {
        ::windows::core::InParam::owned(value.into())
    }
}
unsafe impl ::core::marker::Send for SlideNavigationTransitionInfo {}
unsafe impl ::core::marker::Sync for SlideNavigationTransitionInfo {}
#[doc = "*Required features: `\"UI_Xaml_Media_Animation\"`*"]
#[repr(transparent)]
pub struct SplineColorKeyFrame(::windows::core::IUnknown);
impl SplineColorKeyFrame {
    pub fn new() -> ::windows::core::Result<Self> {
        Self::IActivationFactory(|f| f.ActivateInstance::<Self>())
    }
    fn IActivationFactory<
        R,
        F: FnOnce(&::windows::core::IGenericFactory) -> ::windows::core::Result<R>,
    >(
        callback: F,
    ) -> ::windows::core::Result<R> {
        static SHARED: ::windows::core::FactoryCache<
            SplineColorKeyFrame,
            ::windows::core::IGenericFactory,
        > = ::windows::core::FactoryCache::new();
        SHARED.call(callback)
    }
    pub fn Value(&self) -> ::windows::core::Result<::windows::UI::Color> {
        let this = &::windows::core::Interface::cast::<IColorKeyFrame>(self)?;
        unsafe {
            let mut result__ = ::core::mem::MaybeUninit::zeroed();
            (::windows::core::Vtable::vtable(this).Value)(
                ::windows::core::Vtable::as_raw(this),
                result__.as_mut_ptr(),
            )
            .from_abi::<::windows::UI::Color>(result__)
        }
    }
    pub fn SetValue(&self, value: ::windows::UI::Color) -> ::windows::core::Result<()> {
        let this = &::windows::core::Interface::cast::<IColorKeyFrame>(self)?;
        unsafe {
            (::windows::core::Vtable::vtable(this).SetValue)(
                ::windows::core::Vtable::as_raw(this),
                value,
            )
            .ok()
        }
    }
    pub fn KeyTime(&self) -> ::windows::core::Result<KeyTime> {
        let this = &::windows::core::Interface::cast::<IColorKeyFrame>(self)?;
        unsafe {
            let mut result__ = ::core::mem::MaybeUninit::zeroed();
            (::windows::core::Vtable::vtable(this).KeyTime)(
                ::windows::core::Vtable::as_raw(this),
                result__.as_mut_ptr(),
            )
            .from_abi::<KeyTime>(result__)
        }
    }
    pub fn SetKeyTime(&self, value: KeyTime) -> ::windows::core::Result<()> {
        let this = &::windows::core::Interface::cast::<IColorKeyFrame>(self)?;
        unsafe {
            (::windows::core::Vtable::vtable(this).SetKeyTime)(
                ::windows::core::Vtable::as_raw(this),
                value,
            )
            .ok()
        }
    }
    pub fn GetValue(
        &self,
        dp: &super::super::DependencyProperty,
    ) -> ::windows::core::Result<::windows::core::IInspectable> {
        let this = &::windows::core::Interface::cast::<super::super::IDependencyObject>(self)?;
        unsafe {
            let mut result__ = ::core::mem::MaybeUninit::zeroed();
            (::windows::core::Vtable::vtable(this).GetValue)(
                ::windows::core::Vtable::as_raw(this),
                ::core::mem::transmute_copy(dp),
                result__.as_mut_ptr(),
            )
            .from_abi::<::windows::core::IInspectable>(result__)
        }
    }
    pub fn SetValue2<'a, P0>(
        &self,
        dp: &super::super::DependencyProperty,
        value: P0,
    ) -> ::windows::core::Result<()>
    where
        P0: ::std::convert::Into<::windows::core::InParam<'a, ::windows::core::IInspectable>>,
    {
        let this = &::windows::core::Interface::cast::<super::super::IDependencyObject>(self)?;
        unsafe {
            (::windows::core::Vtable::vtable(this).SetValue)(
                ::windows::core::Vtable::as_raw(this),
                ::core::mem::transmute_copy(dp),
                value.into().abi(),
            )
            .ok()
        }
    }
    pub fn ClearValue(&self, dp: &super::super::DependencyProperty) -> ::windows::core::Result<()> {
        let this = &::windows::core::Interface::cast::<super::super::IDependencyObject>(self)?;
        unsafe {
            (::windows::core::Vtable::vtable(this).ClearValue)(
                ::windows::core::Vtable::as_raw(this),
                ::core::mem::transmute_copy(dp),
            )
            .ok()
        }
    }
    pub fn ReadLocalValue(
        &self,
        dp: &super::super::DependencyProperty,
    ) -> ::windows::core::Result<::windows::core::IInspectable> {
        let this = &::windows::core::Interface::cast::<super::super::IDependencyObject>(self)?;
        unsafe {
            let mut result__ = ::core::mem::MaybeUninit::zeroed();
            (::windows::core::Vtable::vtable(this).ReadLocalValue)(
                ::windows::core::Vtable::as_raw(this),
                ::core::mem::transmute_copy(dp),
                result__.as_mut_ptr(),
            )
            .from_abi::<::windows::core::IInspectable>(result__)
        }
    }
    pub fn GetAnimationBaseValue(
        &self,
        dp: &super::super::DependencyProperty,
    ) -> ::windows::core::Result<::windows::core::IInspectable> {
        let this = &::windows::core::Interface::cast::<super::super::IDependencyObject>(self)?;
        unsafe {
            let mut result__ = ::core::mem::MaybeUninit::zeroed();
            (::windows::core::Vtable::vtable(this).GetAnimationBaseValue)(
                ::windows::core::Vtable::as_raw(this),
                ::core::mem::transmute_copy(dp),
                result__.as_mut_ptr(),
            )
            .from_abi::<::windows::core::IInspectable>(result__)
        }
    }
    pub fn RegisterPropertyChangedCallback(
        &self,
        dp: &super::super::DependencyProperty,
        callback: &super::super::DependencyPropertyChangedCallback,
    ) -> ::windows::core::Result<i64> {
        let this = &::windows::core::Interface::cast::<super::super::IDependencyObject>(self)?;
        unsafe {
            let mut result__ = ::core::mem::MaybeUninit::zeroed();
            (::windows::core::Vtable::vtable(this).RegisterPropertyChangedCallback)(
                ::windows::core::Vtable::as_raw(this),
                ::core::mem::transmute_copy(dp),
                ::core::mem::transmute_copy(callback),
                result__.as_mut_ptr(),
            )
            .from_abi::<i64>(result__)
        }
    }
    pub fn UnregisterPropertyChangedCallback(
        &self,
        dp: &super::super::DependencyProperty,
        token: i64,
    ) -> ::windows::core::Result<()> {
        let this = &::windows::core::Interface::cast::<super::super::IDependencyObject>(self)?;
        unsafe {
            (::windows::core::Vtable::vtable(this).UnregisterPropertyChangedCallback)(
                ::windows::core::Vtable::as_raw(this),
                ::core::mem::transmute_copy(dp),
                token,
            )
            .ok()
        }
    }
    pub fn Dispatcher(&self) -> ::windows::core::Result<::windows::UI::Core::CoreDispatcher> {
        let this = &::windows::core::Interface::cast::<super::super::IDependencyObject>(self)?;
        unsafe {
            let mut result__ = ::core::mem::MaybeUninit::zeroed();
            (::windows::core::Vtable::vtable(this).Dispatcher)(
                ::windows::core::Vtable::as_raw(this),
                result__.as_mut_ptr(),
            )
            .from_abi::<::windows::UI::Core::CoreDispatcher>(result__)
        }
    }
    #[doc = "*Required features: `\"UI_Dispatching\"`*"]
    #[cfg(feature = "UI_Dispatching")]
    pub fn DispatcherQueue(
        &self,
    ) -> ::windows::core::Result<super::super::super::Dispatching::DispatcherQueue> {
        let this = &::windows::core::Interface::cast::<super::super::IDependencyObject>(self)?;
        unsafe {
            let mut result__ = ::core::mem::MaybeUninit::zeroed();
            (::windows::core::Vtable::vtable(this).DispatcherQueue)(
                ::windows::core::Vtable::as_raw(this),
                result__.as_mut_ptr(),
            )
            .from_abi::<super::super::super::Dispatching::DispatcherQueue>(result__)
        }
    }
    pub fn KeySpline(&self) -> ::windows::core::Result<KeySpline> {
        let this = self;
        unsafe {
            let mut result__ = ::core::mem::MaybeUninit::zeroed();
            (::windows::core::Vtable::vtable(this).KeySpline)(
                ::windows::core::Vtable::as_raw(this),
                result__.as_mut_ptr(),
            )
            .from_abi::<KeySpline>(result__)
        }
    }
    pub fn SetKeySpline(&self, value: &KeySpline) -> ::windows::core::Result<()> {
        let this = self;
        unsafe {
            (::windows::core::Vtable::vtable(this).SetKeySpline)(
                ::windows::core::Vtable::as_raw(this),
                ::core::mem::transmute_copy(value),
            )
            .ok()
        }
    }
    pub fn KeySplineProperty() -> ::windows::core::Result<super::super::DependencyProperty> {
        Self::ISplineColorKeyFrameStatics(|this| unsafe {
            let mut result__ = ::core::mem::MaybeUninit::zeroed();
            (::windows::core::Vtable::vtable(this).KeySplineProperty)(
                ::windows::core::Vtable::as_raw(this),
                result__.as_mut_ptr(),
            )
            .from_abi::<super::super::DependencyProperty>(result__)
        })
    }
    #[doc(hidden)]
    pub fn ISplineColorKeyFrameStatics<
        R,
        F: FnOnce(&ISplineColorKeyFrameStatics) -> ::windows::core::Result<R>,
    >(
        callback: F,
    ) -> ::windows::core::Result<R> {
        static SHARED: ::windows::core::FactoryCache<
            SplineColorKeyFrame,
            ISplineColorKeyFrameStatics,
        > = ::windows::core::FactoryCache::new();
        SHARED.call(callback)
    }
}
impl ::core::clone::Clone for SplineColorKeyFrame {
    fn clone(&self) -> Self {
        Self(self.0.clone())
    }
}
impl ::core::cmp::PartialEq for SplineColorKeyFrame {
    fn eq(&self, other: &Self) -> bool {
        self.0 == other.0
    }
}
impl ::core::cmp::Eq for SplineColorKeyFrame {}
impl ::core::fmt::Debug for SplineColorKeyFrame {
    fn fmt(&self, f: &mut ::core::fmt::Formatter<'_>) -> ::core::fmt::Result {
        f.debug_tuple("SplineColorKeyFrame").field(&self.0).finish()
    }
}
unsafe impl ::windows::core::RuntimeType for SplineColorKeyFrame {
    const SIGNATURE : ::windows::core::ConstBuffer = ::windows::core::ConstBuffer::from_slice ( b"rc(Microsoft.UI.Xaml.Media.Animation.SplineColorKeyFrame;{60c5905f-4343-504d-a2c6-64b8d924b438})" ) ;
    type DefaultType = ::core::option::Option<Self>;
    fn from_default(from: &Self::DefaultType) -> ::windows::core::Result<Self> {
        from.as_ref().cloned().ok_or(::windows::core::Error::OK)
    }
}
unsafe impl ::windows::core::Vtable for SplineColorKeyFrame {
    type Vtable = ISplineColorKeyFrame_Vtbl;
}
unsafe impl ::windows::core::Interface for SplineColorKeyFrame {
    const IID: ::windows::core::GUID = <ISplineColorKeyFrame as ::windows::core::Interface>::IID;
}
impl ::windows::core::RuntimeName for SplineColorKeyFrame {
    const NAME: &'static str = "Microsoft.UI.Xaml.Media.Animation.SplineColorKeyFrame";
}
::windows::core::interface_hierarchy!(
    SplineColorKeyFrame,
    ::windows::core::IUnknown,
    ::windows::core::IInspectable
);
impl ::core::convert::From<SplineColorKeyFrame> for ColorKeyFrame {
    fn from(value: SplineColorKeyFrame) -> Self {
        ::core::convert::From::from(&value)
    }
}
impl ::core::convert::From<&SplineColorKeyFrame> for ColorKeyFrame {
    fn from(value: &SplineColorKeyFrame) -> Self {
        ::windows::core::Interface::cast(value).unwrap()
    }
}
impl<'a> ::core::convert::From<&SplineColorKeyFrame>
    for ::windows::core::InParam<'a, ColorKeyFrame>
{
    fn from(value: &SplineColorKeyFrame) -> Self {
        ::windows::core::InParam::owned(value.into())
    }
}
impl ::core::convert::From<SplineColorKeyFrame> for super::super::DependencyObject {
    fn from(value: SplineColorKeyFrame) -> Self {
        ::core::convert::From::from(&value)
    }
}
impl ::core::convert::From<&SplineColorKeyFrame> for super::super::DependencyObject {
    fn from(value: &SplineColorKeyFrame) -> Self {
        ::windows::core::Interface::cast(value).unwrap()
    }
}
impl<'a> ::core::convert::From<&SplineColorKeyFrame>
    for ::windows::core::InParam<'a, super::super::DependencyObject>
{
    fn from(value: &SplineColorKeyFrame) -> Self {
        ::windows::core::InParam::owned(value.into())
    }
}
unsafe impl ::core::marker::Send for SplineColorKeyFrame {}
unsafe impl ::core::marker::Sync for SplineColorKeyFrame {}
#[doc = "*Required features: `\"UI_Xaml_Media_Animation\"`*"]
#[repr(transparent)]
pub struct SplineDoubleKeyFrame(::windows::core::IUnknown);
impl SplineDoubleKeyFrame {
    pub fn new() -> ::windows::core::Result<Self> {
        Self::IActivationFactory(|f| f.ActivateInstance::<Self>())
    }
    fn IActivationFactory<
        R,
        F: FnOnce(&::windows::core::IGenericFactory) -> ::windows::core::Result<R>,
    >(
        callback: F,
    ) -> ::windows::core::Result<R> {
        static SHARED: ::windows::core::FactoryCache<
            SplineDoubleKeyFrame,
            ::windows::core::IGenericFactory,
        > = ::windows::core::FactoryCache::new();
        SHARED.call(callback)
    }
    pub fn GetValue(
        &self,
        dp: &super::super::DependencyProperty,
    ) -> ::windows::core::Result<::windows::core::IInspectable> {
        let this = &::windows::core::Interface::cast::<super::super::IDependencyObject>(self)?;
        unsafe {
            let mut result__ = ::core::mem::MaybeUninit::zeroed();
            (::windows::core::Vtable::vtable(this).GetValue)(
                ::windows::core::Vtable::as_raw(this),
                ::core::mem::transmute_copy(dp),
                result__.as_mut_ptr(),
            )
            .from_abi::<::windows::core::IInspectable>(result__)
        }
    }
    pub fn SetValue<'a, P0>(
        &self,
        dp: &super::super::DependencyProperty,
        value: P0,
    ) -> ::windows::core::Result<()>
    where
        P0: ::std::convert::Into<::windows::core::InParam<'a, ::windows::core::IInspectable>>,
    {
        let this = &::windows::core::Interface::cast::<super::super::IDependencyObject>(self)?;
        unsafe {
            (::windows::core::Vtable::vtable(this).SetValue)(
                ::windows::core::Vtable::as_raw(this),
                ::core::mem::transmute_copy(dp),
                value.into().abi(),
            )
            .ok()
        }
    }
    pub fn ClearValue(&self, dp: &super::super::DependencyProperty) -> ::windows::core::Result<()> {
        let this = &::windows::core::Interface::cast::<super::super::IDependencyObject>(self)?;
        unsafe {
            (::windows::core::Vtable::vtable(this).ClearValue)(
                ::windows::core::Vtable::as_raw(this),
                ::core::mem::transmute_copy(dp),
            )
            .ok()
        }
    }
    pub fn ReadLocalValue(
        &self,
        dp: &super::super::DependencyProperty,
    ) -> ::windows::core::Result<::windows::core::IInspectable> {
        let this = &::windows::core::Interface::cast::<super::super::IDependencyObject>(self)?;
        unsafe {
            let mut result__ = ::core::mem::MaybeUninit::zeroed();
            (::windows::core::Vtable::vtable(this).ReadLocalValue)(
                ::windows::core::Vtable::as_raw(this),
                ::core::mem::transmute_copy(dp),
                result__.as_mut_ptr(),
            )
            .from_abi::<::windows::core::IInspectable>(result__)
        }
    }
    pub fn GetAnimationBaseValue(
        &self,
        dp: &super::super::DependencyProperty,
    ) -> ::windows::core::Result<::windows::core::IInspectable> {
        let this = &::windows::core::Interface::cast::<super::super::IDependencyObject>(self)?;
        unsafe {
            let mut result__ = ::core::mem::MaybeUninit::zeroed();
            (::windows::core::Vtable::vtable(this).GetAnimationBaseValue)(
                ::windows::core::Vtable::as_raw(this),
                ::core::mem::transmute_copy(dp),
                result__.as_mut_ptr(),
            )
            .from_abi::<::windows::core::IInspectable>(result__)
        }
    }
    pub fn RegisterPropertyChangedCallback(
        &self,
        dp: &super::super::DependencyProperty,
        callback: &super::super::DependencyPropertyChangedCallback,
    ) -> ::windows::core::Result<i64> {
        let this = &::windows::core::Interface::cast::<super::super::IDependencyObject>(self)?;
        unsafe {
            let mut result__ = ::core::mem::MaybeUninit::zeroed();
            (::windows::core::Vtable::vtable(this).RegisterPropertyChangedCallback)(
                ::windows::core::Vtable::as_raw(this),
                ::core::mem::transmute_copy(dp),
                ::core::mem::transmute_copy(callback),
                result__.as_mut_ptr(),
            )
            .from_abi::<i64>(result__)
        }
    }
    pub fn UnregisterPropertyChangedCallback(
        &self,
        dp: &super::super::DependencyProperty,
        token: i64,
    ) -> ::windows::core::Result<()> {
        let this = &::windows::core::Interface::cast::<super::super::IDependencyObject>(self)?;
        unsafe {
            (::windows::core::Vtable::vtable(this).UnregisterPropertyChangedCallback)(
                ::windows::core::Vtable::as_raw(this),
                ::core::mem::transmute_copy(dp),
                token,
            )
            .ok()
        }
    }
    pub fn Dispatcher(&self) -> ::windows::core::Result<::windows::UI::Core::CoreDispatcher> {
        let this = &::windows::core::Interface::cast::<super::super::IDependencyObject>(self)?;
        unsafe {
            let mut result__ = ::core::mem::MaybeUninit::zeroed();
            (::windows::core::Vtable::vtable(this).Dispatcher)(
                ::windows::core::Vtable::as_raw(this),
                result__.as_mut_ptr(),
            )
            .from_abi::<::windows::UI::Core::CoreDispatcher>(result__)
        }
    }
    #[doc = "*Required features: `\"UI_Dispatching\"`*"]
    #[cfg(feature = "UI_Dispatching")]
    pub fn DispatcherQueue(
        &self,
    ) -> ::windows::core::Result<super::super::super::Dispatching::DispatcherQueue> {
        let this = &::windows::core::Interface::cast::<super::super::IDependencyObject>(self)?;
        unsafe {
            let mut result__ = ::core::mem::MaybeUninit::zeroed();
            (::windows::core::Vtable::vtable(this).DispatcherQueue)(
                ::windows::core::Vtable::as_raw(this),
                result__.as_mut_ptr(),
            )
            .from_abi::<super::super::super::Dispatching::DispatcherQueue>(result__)
        }
    }
    pub fn Value(&self) -> ::windows::core::Result<f64> {
        let this = &::windows::core::Interface::cast::<IDoubleKeyFrame>(self)?;
        unsafe {
            let mut result__ = ::core::mem::MaybeUninit::zeroed();
            (::windows::core::Vtable::vtable(this).Value)(
                ::windows::core::Vtable::as_raw(this),
                result__.as_mut_ptr(),
            )
            .from_abi::<f64>(result__)
        }
    }
    pub fn SetValue2(&self, value: f64) -> ::windows::core::Result<()> {
        let this = &::windows::core::Interface::cast::<IDoubleKeyFrame>(self)?;
        unsafe {
            (::windows::core::Vtable::vtable(this).SetValue)(
                ::windows::core::Vtable::as_raw(this),
                value,
            )
            .ok()
        }
    }
    pub fn KeyTime(&self) -> ::windows::core::Result<KeyTime> {
        let this = &::windows::core::Interface::cast::<IDoubleKeyFrame>(self)?;
        unsafe {
            let mut result__ = ::core::mem::MaybeUninit::zeroed();
            (::windows::core::Vtable::vtable(this).KeyTime)(
                ::windows::core::Vtable::as_raw(this),
                result__.as_mut_ptr(),
            )
            .from_abi::<KeyTime>(result__)
        }
    }
    pub fn SetKeyTime(&self, value: KeyTime) -> ::windows::core::Result<()> {
        let this = &::windows::core::Interface::cast::<IDoubleKeyFrame>(self)?;
        unsafe {
            (::windows::core::Vtable::vtable(this).SetKeyTime)(
                ::windows::core::Vtable::as_raw(this),
                value,
            )
            .ok()
        }
    }
    pub fn KeySpline(&self) -> ::windows::core::Result<KeySpline> {
        let this = self;
        unsafe {
            let mut result__ = ::core::mem::MaybeUninit::zeroed();
            (::windows::core::Vtable::vtable(this).KeySpline)(
                ::windows::core::Vtable::as_raw(this),
                result__.as_mut_ptr(),
            )
            .from_abi::<KeySpline>(result__)
        }
    }
    pub fn SetKeySpline(&self, value: &KeySpline) -> ::windows::core::Result<()> {
        let this = self;
        unsafe {
            (::windows::core::Vtable::vtable(this).SetKeySpline)(
                ::windows::core::Vtable::as_raw(this),
                ::core::mem::transmute_copy(value),
            )
            .ok()
        }
    }
    pub fn KeySplineProperty() -> ::windows::core::Result<super::super::DependencyProperty> {
        Self::ISplineDoubleKeyFrameStatics(|this| unsafe {
            let mut result__ = ::core::mem::MaybeUninit::zeroed();
            (::windows::core::Vtable::vtable(this).KeySplineProperty)(
                ::windows::core::Vtable::as_raw(this),
                result__.as_mut_ptr(),
            )
            .from_abi::<super::super::DependencyProperty>(result__)
        })
    }
    #[doc(hidden)]
    pub fn ISplineDoubleKeyFrameStatics<
        R,
        F: FnOnce(&ISplineDoubleKeyFrameStatics) -> ::windows::core::Result<R>,
    >(
        callback: F,
    ) -> ::windows::core::Result<R> {
        static SHARED: ::windows::core::FactoryCache<
            SplineDoubleKeyFrame,
            ISplineDoubleKeyFrameStatics,
        > = ::windows::core::FactoryCache::new();
        SHARED.call(callback)
    }
}
impl ::core::clone::Clone for SplineDoubleKeyFrame {
    fn clone(&self) -> Self {
        Self(self.0.clone())
    }
}
impl ::core::cmp::PartialEq for SplineDoubleKeyFrame {
    fn eq(&self, other: &Self) -> bool {
        self.0 == other.0
    }
}
impl ::core::cmp::Eq for SplineDoubleKeyFrame {}
impl ::core::fmt::Debug for SplineDoubleKeyFrame {
    fn fmt(&self, f: &mut ::core::fmt::Formatter<'_>) -> ::core::fmt::Result {
        f.debug_tuple("SplineDoubleKeyFrame").field(&self.0).finish()
    }
}
unsafe impl ::windows::core::RuntimeType for SplineDoubleKeyFrame {
    const SIGNATURE : ::windows::core::ConstBuffer = ::windows::core::ConstBuffer::from_slice ( b"rc(Microsoft.UI.Xaml.Media.Animation.SplineDoubleKeyFrame;{aea80957-bb56-59b6-bb7a-6295f94bc961})" ) ;
    type DefaultType = ::core::option::Option<Self>;
    fn from_default(from: &Self::DefaultType) -> ::windows::core::Result<Self> {
        from.as_ref().cloned().ok_or(::windows::core::Error::OK)
    }
}
unsafe impl ::windows::core::Vtable for SplineDoubleKeyFrame {
    type Vtable = ISplineDoubleKeyFrame_Vtbl;
}
unsafe impl ::windows::core::Interface for SplineDoubleKeyFrame {
    const IID: ::windows::core::GUID = <ISplineDoubleKeyFrame as ::windows::core::Interface>::IID;
}
impl ::windows::core::RuntimeName for SplineDoubleKeyFrame {
    const NAME: &'static str = "Microsoft.UI.Xaml.Media.Animation.SplineDoubleKeyFrame";
}
::windows::core::interface_hierarchy!(
    SplineDoubleKeyFrame,
    ::windows::core::IUnknown,
    ::windows::core::IInspectable
);
impl ::core::convert::From<SplineDoubleKeyFrame> for DoubleKeyFrame {
    fn from(value: SplineDoubleKeyFrame) -> Self {
        ::core::convert::From::from(&value)
    }
}
impl ::core::convert::From<&SplineDoubleKeyFrame> for DoubleKeyFrame {
    fn from(value: &SplineDoubleKeyFrame) -> Self {
        ::windows::core::Interface::cast(value).unwrap()
    }
}
impl<'a> ::core::convert::From<&SplineDoubleKeyFrame>
    for ::windows::core::InParam<'a, DoubleKeyFrame>
{
    fn from(value: &SplineDoubleKeyFrame) -> Self {
        ::windows::core::InParam::owned(value.into())
    }
}
impl ::core::convert::From<SplineDoubleKeyFrame> for super::super::DependencyObject {
    fn from(value: SplineDoubleKeyFrame) -> Self {
        ::core::convert::From::from(&value)
    }
}
impl ::core::convert::From<&SplineDoubleKeyFrame> for super::super::DependencyObject {
    fn from(value: &SplineDoubleKeyFrame) -> Self {
        ::windows::core::Interface::cast(value).unwrap()
    }
}
impl<'a> ::core::convert::From<&SplineDoubleKeyFrame>
    for ::windows::core::InParam<'a, super::super::DependencyObject>
{
    fn from(value: &SplineDoubleKeyFrame) -> Self {
        ::windows::core::InParam::owned(value.into())
    }
}
unsafe impl ::core::marker::Send for SplineDoubleKeyFrame {}
unsafe impl ::core::marker::Sync for SplineDoubleKeyFrame {}
#[doc = "*Required features: `\"UI_Xaml_Media_Animation\"`*"]
#[repr(transparent)]
pub struct SplinePointKeyFrame(::windows::core::IUnknown);
impl SplinePointKeyFrame {
    pub fn new() -> ::windows::core::Result<Self> {
        Self::IActivationFactory(|f| f.ActivateInstance::<Self>())
    }
    fn IActivationFactory<
        R,
        F: FnOnce(&::windows::core::IGenericFactory) -> ::windows::core::Result<R>,
    >(
        callback: F,
    ) -> ::windows::core::Result<R> {
        static SHARED: ::windows::core::FactoryCache<
            SplinePointKeyFrame,
            ::windows::core::IGenericFactory,
        > = ::windows::core::FactoryCache::new();
        SHARED.call(callback)
    }
    pub fn GetValue(
        &self,
        dp: &super::super::DependencyProperty,
    ) -> ::windows::core::Result<::windows::core::IInspectable> {
        let this = &::windows::core::Interface::cast::<super::super::IDependencyObject>(self)?;
        unsafe {
            let mut result__ = ::core::mem::MaybeUninit::zeroed();
            (::windows::core::Vtable::vtable(this).GetValue)(
                ::windows::core::Vtable::as_raw(this),
                ::core::mem::transmute_copy(dp),
                result__.as_mut_ptr(),
            )
            .from_abi::<::windows::core::IInspectable>(result__)
        }
    }
    pub fn SetValue<'a, P0>(
        &self,
        dp: &super::super::DependencyProperty,
        value: P0,
    ) -> ::windows::core::Result<()>
    where
        P0: ::std::convert::Into<::windows::core::InParam<'a, ::windows::core::IInspectable>>,
    {
        let this = &::windows::core::Interface::cast::<super::super::IDependencyObject>(self)?;
        unsafe {
            (::windows::core::Vtable::vtable(this).SetValue)(
                ::windows::core::Vtable::as_raw(this),
                ::core::mem::transmute_copy(dp),
                value.into().abi(),
            )
            .ok()
        }
    }
    pub fn ClearValue(&self, dp: &super::super::DependencyProperty) -> ::windows::core::Result<()> {
        let this = &::windows::core::Interface::cast::<super::super::IDependencyObject>(self)?;
        unsafe {
            (::windows::core::Vtable::vtable(this).ClearValue)(
                ::windows::core::Vtable::as_raw(this),
                ::core::mem::transmute_copy(dp),
            )
            .ok()
        }
    }
    pub fn ReadLocalValue(
        &self,
        dp: &super::super::DependencyProperty,
    ) -> ::windows::core::Result<::windows::core::IInspectable> {
        let this = &::windows::core::Interface::cast::<super::super::IDependencyObject>(self)?;
        unsafe {
            let mut result__ = ::core::mem::MaybeUninit::zeroed();
            (::windows::core::Vtable::vtable(this).ReadLocalValue)(
                ::windows::core::Vtable::as_raw(this),
                ::core::mem::transmute_copy(dp),
                result__.as_mut_ptr(),
            )
            .from_abi::<::windows::core::IInspectable>(result__)
        }
    }
    pub fn GetAnimationBaseValue(
        &self,
        dp: &super::super::DependencyProperty,
    ) -> ::windows::core::Result<::windows::core::IInspectable> {
        let this = &::windows::core::Interface::cast::<super::super::IDependencyObject>(self)?;
        unsafe {
            let mut result__ = ::core::mem::MaybeUninit::zeroed();
            (::windows::core::Vtable::vtable(this).GetAnimationBaseValue)(
                ::windows::core::Vtable::as_raw(this),
                ::core::mem::transmute_copy(dp),
                result__.as_mut_ptr(),
            )
            .from_abi::<::windows::core::IInspectable>(result__)
        }
    }
    pub fn RegisterPropertyChangedCallback(
        &self,
        dp: &super::super::DependencyProperty,
        callback: &super::super::DependencyPropertyChangedCallback,
    ) -> ::windows::core::Result<i64> {
        let this = &::windows::core::Interface::cast::<super::super::IDependencyObject>(self)?;
        unsafe {
            let mut result__ = ::core::mem::MaybeUninit::zeroed();
            (::windows::core::Vtable::vtable(this).RegisterPropertyChangedCallback)(
                ::windows::core::Vtable::as_raw(this),
                ::core::mem::transmute_copy(dp),
                ::core::mem::transmute_copy(callback),
                result__.as_mut_ptr(),
            )
            .from_abi::<i64>(result__)
        }
    }
    pub fn UnregisterPropertyChangedCallback(
        &self,
        dp: &super::super::DependencyProperty,
        token: i64,
    ) -> ::windows::core::Result<()> {
        let this = &::windows::core::Interface::cast::<super::super::IDependencyObject>(self)?;
        unsafe {
            (::windows::core::Vtable::vtable(this).UnregisterPropertyChangedCallback)(
                ::windows::core::Vtable::as_raw(this),
                ::core::mem::transmute_copy(dp),
                token,
            )
            .ok()
        }
    }
    pub fn Dispatcher(&self) -> ::windows::core::Result<::windows::UI::Core::CoreDispatcher> {
        let this = &::windows::core::Interface::cast::<super::super::IDependencyObject>(self)?;
        unsafe {
            let mut result__ = ::core::mem::MaybeUninit::zeroed();
            (::windows::core::Vtable::vtable(this).Dispatcher)(
                ::windows::core::Vtable::as_raw(this),
                result__.as_mut_ptr(),
            )
            .from_abi::<::windows::UI::Core::CoreDispatcher>(result__)
        }
    }
    #[doc = "*Required features: `\"UI_Dispatching\"`*"]
    #[cfg(feature = "UI_Dispatching")]
    pub fn DispatcherQueue(
        &self,
    ) -> ::windows::core::Result<super::super::super::Dispatching::DispatcherQueue> {
        let this = &::windows::core::Interface::cast::<super::super::IDependencyObject>(self)?;
        unsafe {
            let mut result__ = ::core::mem::MaybeUninit::zeroed();
            (::windows::core::Vtable::vtable(this).DispatcherQueue)(
                ::windows::core::Vtable::as_raw(this),
                result__.as_mut_ptr(),
            )
            .from_abi::<super::super::super::Dispatching::DispatcherQueue>(result__)
        }
    }
    pub fn Value(&self) -> ::windows::core::Result<::windows::Foundation::Point> {
        let this = &::windows::core::Interface::cast::<IPointKeyFrame>(self)?;
        unsafe {
            let mut result__ = ::core::mem::MaybeUninit::zeroed();
            (::windows::core::Vtable::vtable(this).Value)(
                ::windows::core::Vtable::as_raw(this),
                result__.as_mut_ptr(),
            )
            .from_abi::<::windows::Foundation::Point>(result__)
        }
    }
    pub fn SetValue2(&self, value: ::windows::Foundation::Point) -> ::windows::core::Result<()> {
        let this = &::windows::core::Interface::cast::<IPointKeyFrame>(self)?;
        unsafe {
            (::windows::core::Vtable::vtable(this).SetValue)(
                ::windows::core::Vtable::as_raw(this),
                value,
            )
            .ok()
        }
    }
    pub fn KeyTime(&self) -> ::windows::core::Result<KeyTime> {
        let this = &::windows::core::Interface::cast::<IPointKeyFrame>(self)?;
        unsafe {
            let mut result__ = ::core::mem::MaybeUninit::zeroed();
            (::windows::core::Vtable::vtable(this).KeyTime)(
                ::windows::core::Vtable::as_raw(this),
                result__.as_mut_ptr(),
            )
            .from_abi::<KeyTime>(result__)
        }
    }
    pub fn SetKeyTime(&self, value: KeyTime) -> ::windows::core::Result<()> {
        let this = &::windows::core::Interface::cast::<IPointKeyFrame>(self)?;
        unsafe {
            (::windows::core::Vtable::vtable(this).SetKeyTime)(
                ::windows::core::Vtable::as_raw(this),
                value,
            )
            .ok()
        }
    }
    pub fn KeySpline(&self) -> ::windows::core::Result<KeySpline> {
        let this = self;
        unsafe {
            let mut result__ = ::core::mem::MaybeUninit::zeroed();
            (::windows::core::Vtable::vtable(this).KeySpline)(
                ::windows::core::Vtable::as_raw(this),
                result__.as_mut_ptr(),
            )
            .from_abi::<KeySpline>(result__)
        }
    }
    pub fn SetKeySpline(&self, value: &KeySpline) -> ::windows::core::Result<()> {
        let this = self;
        unsafe {
            (::windows::core::Vtable::vtable(this).SetKeySpline)(
                ::windows::core::Vtable::as_raw(this),
                ::core::mem::transmute_copy(value),
            )
            .ok()
        }
    }
    pub fn KeySplineProperty() -> ::windows::core::Result<super::super::DependencyProperty> {
        Self::ISplinePointKeyFrameStatics(|this| unsafe {
            let mut result__ = ::core::mem::MaybeUninit::zeroed();
            (::windows::core::Vtable::vtable(this).KeySplineProperty)(
                ::windows::core::Vtable::as_raw(this),
                result__.as_mut_ptr(),
            )
            .from_abi::<super::super::DependencyProperty>(result__)
        })
    }
    #[doc(hidden)]
    pub fn ISplinePointKeyFrameStatics<
        R,
        F: FnOnce(&ISplinePointKeyFrameStatics) -> ::windows::core::Result<R>,
    >(
        callback: F,
    ) -> ::windows::core::Result<R> {
        static SHARED: ::windows::core::FactoryCache<
            SplinePointKeyFrame,
            ISplinePointKeyFrameStatics,
        > = ::windows::core::FactoryCache::new();
        SHARED.call(callback)
    }
}
impl ::core::clone::Clone for SplinePointKeyFrame {
    fn clone(&self) -> Self {
        Self(self.0.clone())
    }
}
impl ::core::cmp::PartialEq for SplinePointKeyFrame {
    fn eq(&self, other: &Self) -> bool {
        self.0 == other.0
    }
}
impl ::core::cmp::Eq for SplinePointKeyFrame {}
impl ::core::fmt::Debug for SplinePointKeyFrame {
    fn fmt(&self, f: &mut ::core::fmt::Formatter<'_>) -> ::core::fmt::Result {
        f.debug_tuple("SplinePointKeyFrame").field(&self.0).finish()
    }
}
unsafe impl ::windows::core::RuntimeType for SplinePointKeyFrame {
    const SIGNATURE : ::windows::core::ConstBuffer = ::windows::core::ConstBuffer::from_slice ( b"rc(Microsoft.UI.Xaml.Media.Animation.SplinePointKeyFrame;{2b7eb049-708c-5220-a178-a25dbc14ffbe})" ) ;
    type DefaultType = ::core::option::Option<Self>;
    fn from_default(from: &Self::DefaultType) -> ::windows::core::Result<Self> {
        from.as_ref().cloned().ok_or(::windows::core::Error::OK)
    }
}
unsafe impl ::windows::core::Vtable for SplinePointKeyFrame {
    type Vtable = ISplinePointKeyFrame_Vtbl;
}
unsafe impl ::windows::core::Interface for SplinePointKeyFrame {
    const IID: ::windows::core::GUID = <ISplinePointKeyFrame as ::windows::core::Interface>::IID;
}
impl ::windows::core::RuntimeName for SplinePointKeyFrame {
    const NAME: &'static str = "Microsoft.UI.Xaml.Media.Animation.SplinePointKeyFrame";
}
::windows::core::interface_hierarchy!(
    SplinePointKeyFrame,
    ::windows::core::IUnknown,
    ::windows::core::IInspectable
);
impl ::core::convert::From<SplinePointKeyFrame> for PointKeyFrame {
    fn from(value: SplinePointKeyFrame) -> Self {
        ::core::convert::From::from(&value)
    }
}
impl ::core::convert::From<&SplinePointKeyFrame> for PointKeyFrame {
    fn from(value: &SplinePointKeyFrame) -> Self {
        ::windows::core::Interface::cast(value).unwrap()
    }
}
impl<'a> ::core::convert::From<&SplinePointKeyFrame>
    for ::windows::core::InParam<'a, PointKeyFrame>
{
    fn from(value: &SplinePointKeyFrame) -> Self {
        ::windows::core::InParam::owned(value.into())
    }
}
impl ::core::convert::From<SplinePointKeyFrame> for super::super::DependencyObject {
    fn from(value: SplinePointKeyFrame) -> Self {
        ::core::convert::From::from(&value)
    }
}
impl ::core::convert::From<&SplinePointKeyFrame> for super::super::DependencyObject {
    fn from(value: &SplinePointKeyFrame) -> Self {
        ::windows::core::Interface::cast(value).unwrap()
    }
}
impl<'a> ::core::convert::From<&SplinePointKeyFrame>
    for ::windows::core::InParam<'a, super::super::DependencyObject>
{
    fn from(value: &SplinePointKeyFrame) -> Self {
        ::windows::core::InParam::owned(value.into())
    }
}
unsafe impl ::core::marker::Send for SplinePointKeyFrame {}
unsafe impl ::core::marker::Sync for SplinePointKeyFrame {}
#[doc = "*Required features: `\"UI_Xaml_Media_Animation\"`*"]
#[repr(transparent)]
pub struct SplitCloseThemeAnimation(::windows::core::IUnknown);
impl SplitCloseThemeAnimation {
    pub fn new() -> ::windows::core::Result<Self> {
        Self::IActivationFactory(|f| f.ActivateInstance::<Self>())
    }
    fn IActivationFactory<
        R,
        F: FnOnce(&::windows::core::IGenericFactory) -> ::windows::core::Result<R>,
    >(
        callback: F,
    ) -> ::windows::core::Result<R> {
        static SHARED: ::windows::core::FactoryCache<
            SplitCloseThemeAnimation,
            ::windows::core::IGenericFactory,
        > = ::windows::core::FactoryCache::new();
        SHARED.call(callback)
    }
    pub fn GetValue(
        &self,
        dp: &super::super::DependencyProperty,
    ) -> ::windows::core::Result<::windows::core::IInspectable> {
        let this = &::windows::core::Interface::cast::<super::super::IDependencyObject>(self)?;
        unsafe {
            let mut result__ = ::core::mem::MaybeUninit::zeroed();
            (::windows::core::Vtable::vtable(this).GetValue)(
                ::windows::core::Vtable::as_raw(this),
                ::core::mem::transmute_copy(dp),
                result__.as_mut_ptr(),
            )
            .from_abi::<::windows::core::IInspectable>(result__)
        }
    }
    pub fn SetValue<'a, P0>(
        &self,
        dp: &super::super::DependencyProperty,
        value: P0,
    ) -> ::windows::core::Result<()>
    where
        P0: ::std::convert::Into<::windows::core::InParam<'a, ::windows::core::IInspectable>>,
    {
        let this = &::windows::core::Interface::cast::<super::super::IDependencyObject>(self)?;
        unsafe {
            (::windows::core::Vtable::vtable(this).SetValue)(
                ::windows::core::Vtable::as_raw(this),
                ::core::mem::transmute_copy(dp),
                value.into().abi(),
            )
            .ok()
        }
    }
    pub fn ClearValue(&self, dp: &super::super::DependencyProperty) -> ::windows::core::Result<()> {
        let this = &::windows::core::Interface::cast::<super::super::IDependencyObject>(self)?;
        unsafe {
            (::windows::core::Vtable::vtable(this).ClearValue)(
                ::windows::core::Vtable::as_raw(this),
                ::core::mem::transmute_copy(dp),
            )
            .ok()
        }
    }
    pub fn ReadLocalValue(
        &self,
        dp: &super::super::DependencyProperty,
    ) -> ::windows::core::Result<::windows::core::IInspectable> {
        let this = &::windows::core::Interface::cast::<super::super::IDependencyObject>(self)?;
        unsafe {
            let mut result__ = ::core::mem::MaybeUninit::zeroed();
            (::windows::core::Vtable::vtable(this).ReadLocalValue)(
                ::windows::core::Vtable::as_raw(this),
                ::core::mem::transmute_copy(dp),
                result__.as_mut_ptr(),
            )
            .from_abi::<::windows::core::IInspectable>(result__)
        }
    }
    pub fn GetAnimationBaseValue(
        &self,
        dp: &super::super::DependencyProperty,
    ) -> ::windows::core::Result<::windows::core::IInspectable> {
        let this = &::windows::core::Interface::cast::<super::super::IDependencyObject>(self)?;
        unsafe {
            let mut result__ = ::core::mem::MaybeUninit::zeroed();
            (::windows::core::Vtable::vtable(this).GetAnimationBaseValue)(
                ::windows::core::Vtable::as_raw(this),
                ::core::mem::transmute_copy(dp),
                result__.as_mut_ptr(),
            )
            .from_abi::<::windows::core::IInspectable>(result__)
        }
    }
    pub fn RegisterPropertyChangedCallback(
        &self,
        dp: &super::super::DependencyProperty,
        callback: &super::super::DependencyPropertyChangedCallback,
    ) -> ::windows::core::Result<i64> {
        let this = &::windows::core::Interface::cast::<super::super::IDependencyObject>(self)?;
        unsafe {
            let mut result__ = ::core::mem::MaybeUninit::zeroed();
            (::windows::core::Vtable::vtable(this).RegisterPropertyChangedCallback)(
                ::windows::core::Vtable::as_raw(this),
                ::core::mem::transmute_copy(dp),
                ::core::mem::transmute_copy(callback),
                result__.as_mut_ptr(),
            )
            .from_abi::<i64>(result__)
        }
    }
    pub fn UnregisterPropertyChangedCallback(
        &self,
        dp: &super::super::DependencyProperty,
        token: i64,
    ) -> ::windows::core::Result<()> {
        let this = &::windows::core::Interface::cast::<super::super::IDependencyObject>(self)?;
        unsafe {
            (::windows::core::Vtable::vtable(this).UnregisterPropertyChangedCallback)(
                ::windows::core::Vtable::as_raw(this),
                ::core::mem::transmute_copy(dp),
                token,
            )
            .ok()
        }
    }
    pub fn Dispatcher(&self) -> ::windows::core::Result<::windows::UI::Core::CoreDispatcher> {
        let this = &::windows::core::Interface::cast::<super::super::IDependencyObject>(self)?;
        unsafe {
            let mut result__ = ::core::mem::MaybeUninit::zeroed();
            (::windows::core::Vtable::vtable(this).Dispatcher)(
                ::windows::core::Vtable::as_raw(this),
                result__.as_mut_ptr(),
            )
            .from_abi::<::windows::UI::Core::CoreDispatcher>(result__)
        }
    }
    #[doc = "*Required features: `\"UI_Dispatching\"`*"]
    #[cfg(feature = "UI_Dispatching")]
    pub fn DispatcherQueue(
        &self,
    ) -> ::windows::core::Result<super::super::super::Dispatching::DispatcherQueue> {
        let this = &::windows::core::Interface::cast::<super::super::IDependencyObject>(self)?;
        unsafe {
            let mut result__ = ::core::mem::MaybeUninit::zeroed();
            (::windows::core::Vtable::vtable(this).DispatcherQueue)(
                ::windows::core::Vtable::as_raw(this),
                result__.as_mut_ptr(),
            )
            .from_abi::<super::super::super::Dispatching::DispatcherQueue>(result__)
        }
    }
    pub fn OpenedTargetName(&self) -> ::windows::core::Result<::windows::core::HSTRING> {
        let this = self;
        unsafe {
            let mut result__ = ::core::mem::MaybeUninit::zeroed();
            (::windows::core::Vtable::vtable(this).OpenedTargetName)(
                ::windows::core::Vtable::as_raw(this),
                result__.as_mut_ptr(),
            )
            .from_abi::<::windows::core::HSTRING>(result__)
        }
    }
    pub fn SetOpenedTargetName(
        &self,
        value: &::windows::core::HSTRING,
    ) -> ::windows::core::Result<()> {
        let this = self;
        unsafe {
            (::windows::core::Vtable::vtable(this).SetOpenedTargetName)(
                ::windows::core::Vtable::as_raw(this),
                ::core::mem::transmute_copy(value),
            )
            .ok()
        }
    }
    pub fn OpenedTarget(&self) -> ::windows::core::Result<super::super::DependencyObject> {
        let this = self;
        unsafe {
            let mut result__ = ::core::mem::MaybeUninit::zeroed();
            (::windows::core::Vtable::vtable(this).OpenedTarget)(
                ::windows::core::Vtable::as_raw(this),
                result__.as_mut_ptr(),
            )
            .from_abi::<super::super::DependencyObject>(result__)
        }
    }
    pub fn SetOpenedTarget<'a, P0>(&self, value: P0) -> ::windows::core::Result<()>
    where
        P0: ::std::convert::Into<::windows::core::InParam<'a, super::super::DependencyObject>>,
    {
        let this = self;
        unsafe {
            (::windows::core::Vtable::vtable(this).SetOpenedTarget)(
                ::windows::core::Vtable::as_raw(this),
                value.into().abi(),
            )
            .ok()
        }
    }
    pub fn ClosedTargetName(&self) -> ::windows::core::Result<::windows::core::HSTRING> {
        let this = self;
        unsafe {
            let mut result__ = ::core::mem::MaybeUninit::zeroed();
            (::windows::core::Vtable::vtable(this).ClosedTargetName)(
                ::windows::core::Vtable::as_raw(this),
                result__.as_mut_ptr(),
            )
            .from_abi::<::windows::core::HSTRING>(result__)
        }
    }
    pub fn SetClosedTargetName(
        &self,
        value: &::windows::core::HSTRING,
    ) -> ::windows::core::Result<()> {
        let this = self;
        unsafe {
            (::windows::core::Vtable::vtable(this).SetClosedTargetName)(
                ::windows::core::Vtable::as_raw(this),
                ::core::mem::transmute_copy(value),
            )
            .ok()
        }
    }
    pub fn ClosedTarget(&self) -> ::windows::core::Result<super::super::DependencyObject> {
        let this = self;
        unsafe {
            let mut result__ = ::core::mem::MaybeUninit::zeroed();
            (::windows::core::Vtable::vtable(this).ClosedTarget)(
                ::windows::core::Vtable::as_raw(this),
                result__.as_mut_ptr(),
            )
            .from_abi::<super::super::DependencyObject>(result__)
        }
    }
    pub fn SetClosedTarget<'a, P0>(&self, value: P0) -> ::windows::core::Result<()>
    where
        P0: ::std::convert::Into<::windows::core::InParam<'a, super::super::DependencyObject>>,
    {
        let this = self;
        unsafe {
            (::windows::core::Vtable::vtable(this).SetClosedTarget)(
                ::windows::core::Vtable::as_raw(this),
                value.into().abi(),
            )
            .ok()
        }
    }
    pub fn ContentTargetName(&self) -> ::windows::core::Result<::windows::core::HSTRING> {
        let this = self;
        unsafe {
            let mut result__ = ::core::mem::MaybeUninit::zeroed();
            (::windows::core::Vtable::vtable(this).ContentTargetName)(
                ::windows::core::Vtable::as_raw(this),
                result__.as_mut_ptr(),
            )
            .from_abi::<::windows::core::HSTRING>(result__)
        }
    }
    pub fn SetContentTargetName(
        &self,
        value: &::windows::core::HSTRING,
    ) -> ::windows::core::Result<()> {
        let this = self;
        unsafe {
            (::windows::core::Vtable::vtable(this).SetContentTargetName)(
                ::windows::core::Vtable::as_raw(this),
                ::core::mem::transmute_copy(value),
            )
            .ok()
        }
    }
    pub fn ContentTarget(&self) -> ::windows::core::Result<super::super::DependencyObject> {
        let this = self;
        unsafe {
            let mut result__ = ::core::mem::MaybeUninit::zeroed();
            (::windows::core::Vtable::vtable(this).ContentTarget)(
                ::windows::core::Vtable::as_raw(this),
                result__.as_mut_ptr(),
            )
            .from_abi::<super::super::DependencyObject>(result__)
        }
    }
    pub fn SetContentTarget<'a, P0>(&self, value: P0) -> ::windows::core::Result<()>
    where
        P0: ::std::convert::Into<::windows::core::InParam<'a, super::super::DependencyObject>>,
    {
        let this = self;
        unsafe {
            (::windows::core::Vtable::vtable(this).SetContentTarget)(
                ::windows::core::Vtable::as_raw(this),
                value.into().abi(),
            )
            .ok()
        }
    }
    pub fn OpenedLength(&self) -> ::windows::core::Result<f64> {
        let this = self;
        unsafe {
            let mut result__ = ::core::mem::MaybeUninit::zeroed();
            (::windows::core::Vtable::vtable(this).OpenedLength)(
                ::windows::core::Vtable::as_raw(this),
                result__.as_mut_ptr(),
            )
            .from_abi::<f64>(result__)
        }
    }
    pub fn SetOpenedLength(&self, value: f64) -> ::windows::core::Result<()> {
        let this = self;
        unsafe {
            (::windows::core::Vtable::vtable(this).SetOpenedLength)(
                ::windows::core::Vtable::as_raw(this),
                value,
            )
            .ok()
        }
    }
    pub fn ClosedLength(&self) -> ::windows::core::Result<f64> {
        let this = self;
        unsafe {
            let mut result__ = ::core::mem::MaybeUninit::zeroed();
            (::windows::core::Vtable::vtable(this).ClosedLength)(
                ::windows::core::Vtable::as_raw(this),
                result__.as_mut_ptr(),
            )
            .from_abi::<f64>(result__)
        }
    }
    pub fn SetClosedLength(&self, value: f64) -> ::windows::core::Result<()> {
        let this = self;
        unsafe {
            (::windows::core::Vtable::vtable(this).SetClosedLength)(
                ::windows::core::Vtable::as_raw(this),
                value,
            )
            .ok()
        }
    }
    pub fn OffsetFromCenter(&self) -> ::windows::core::Result<f64> {
        let this = self;
        unsafe {
            let mut result__ = ::core::mem::MaybeUninit::zeroed();
            (::windows::core::Vtable::vtable(this).OffsetFromCenter)(
                ::windows::core::Vtable::as_raw(this),
                result__.as_mut_ptr(),
            )
            .from_abi::<f64>(result__)
        }
    }
    pub fn SetOffsetFromCenter(&self, value: f64) -> ::windows::core::Result<()> {
        let this = self;
        unsafe {
            (::windows::core::Vtable::vtable(this).SetOffsetFromCenter)(
                ::windows::core::Vtable::as_raw(this),
                value,
            )
            .ok()
        }
    }
    #[doc = "*Required features: `\"UI_Xaml_Controls_Primitives\"`*"]
    #[cfg(feature = "UI_Xaml_Controls_Primitives")]
    pub fn ContentTranslationDirection(
        &self,
    ) -> ::windows::core::Result<super::super::Controls::Primitives::AnimationDirection> {
        let this = self;
        unsafe {
            let mut result__ = ::core::mem::MaybeUninit::zeroed();
            (::windows::core::Vtable::vtable(this).ContentTranslationDirection)(
                ::windows::core::Vtable::as_raw(this),
                result__.as_mut_ptr(),
            )
            .from_abi::<super::super::Controls::Primitives::AnimationDirection>(result__)
        }
    }
    #[doc = "*Required features: `\"UI_Xaml_Controls_Primitives\"`*"]
    #[cfg(feature = "UI_Xaml_Controls_Primitives")]
    pub fn SetContentTranslationDirection(
        &self,
        value: super::super::Controls::Primitives::AnimationDirection,
    ) -> ::windows::core::Result<()> {
        let this = self;
        unsafe {
            (::windows::core::Vtable::vtable(this).SetContentTranslationDirection)(
                ::windows::core::Vtable::as_raw(this),
                value,
            )
            .ok()
        }
    }
    pub fn ContentTranslationOffset(&self) -> ::windows::core::Result<f64> {
        let this = self;
        unsafe {
            let mut result__ = ::core::mem::MaybeUninit::zeroed();
            (::windows::core::Vtable::vtable(this).ContentTranslationOffset)(
                ::windows::core::Vtable::as_raw(this),
                result__.as_mut_ptr(),
            )
            .from_abi::<f64>(result__)
        }
    }
    pub fn SetContentTranslationOffset(&self, value: f64) -> ::windows::core::Result<()> {
        let this = self;
        unsafe {
            (::windows::core::Vtable::vtable(this).SetContentTranslationOffset)(
                ::windows::core::Vtable::as_raw(this),
                value,
            )
            .ok()
        }
    }
    pub fn OpenedTargetNameProperty() -> ::windows::core::Result<super::super::DependencyProperty> {
        Self::ISplitCloseThemeAnimationStatics(|this| unsafe {
            let mut result__ = ::core::mem::MaybeUninit::zeroed();
            (::windows::core::Vtable::vtable(this).OpenedTargetNameProperty)(
                ::windows::core::Vtable::as_raw(this),
                result__.as_mut_ptr(),
            )
            .from_abi::<super::super::DependencyProperty>(result__)
        })
    }
    pub fn OpenedTargetProperty() -> ::windows::core::Result<super::super::DependencyProperty> {
        Self::ISplitCloseThemeAnimationStatics(|this| unsafe {
            let mut result__ = ::core::mem::MaybeUninit::zeroed();
            (::windows::core::Vtable::vtable(this).OpenedTargetProperty)(
                ::windows::core::Vtable::as_raw(this),
                result__.as_mut_ptr(),
            )
            .from_abi::<super::super::DependencyProperty>(result__)
        })
    }
    pub fn ClosedTargetNameProperty() -> ::windows::core::Result<super::super::DependencyProperty> {
        Self::ISplitCloseThemeAnimationStatics(|this| unsafe {
            let mut result__ = ::core::mem::MaybeUninit::zeroed();
            (::windows::core::Vtable::vtable(this).ClosedTargetNameProperty)(
                ::windows::core::Vtable::as_raw(this),
                result__.as_mut_ptr(),
            )
            .from_abi::<super::super::DependencyProperty>(result__)
        })
    }
    pub fn ClosedTargetProperty() -> ::windows::core::Result<super::super::DependencyProperty> {
        Self::ISplitCloseThemeAnimationStatics(|this| unsafe {
            let mut result__ = ::core::mem::MaybeUninit::zeroed();
            (::windows::core::Vtable::vtable(this).ClosedTargetProperty)(
                ::windows::core::Vtable::as_raw(this),
                result__.as_mut_ptr(),
            )
            .from_abi::<super::super::DependencyProperty>(result__)
        })
    }
    pub fn ContentTargetNameProperty() -> ::windows::core::Result<super::super::DependencyProperty>
    {
        Self::ISplitCloseThemeAnimationStatics(|this| unsafe {
            let mut result__ = ::core::mem::MaybeUninit::zeroed();
            (::windows::core::Vtable::vtable(this).ContentTargetNameProperty)(
                ::windows::core::Vtable::as_raw(this),
                result__.as_mut_ptr(),
            )
            .from_abi::<super::super::DependencyProperty>(result__)
        })
    }
    pub fn ContentTargetProperty() -> ::windows::core::Result<super::super::DependencyProperty> {
        Self::ISplitCloseThemeAnimationStatics(|this| unsafe {
            let mut result__ = ::core::mem::MaybeUninit::zeroed();
            (::windows::core::Vtable::vtable(this).ContentTargetProperty)(
                ::windows::core::Vtable::as_raw(this),
                result__.as_mut_ptr(),
            )
            .from_abi::<super::super::DependencyProperty>(result__)
        })
    }
    pub fn OpenedLengthProperty() -> ::windows::core::Result<super::super::DependencyProperty> {
        Self::ISplitCloseThemeAnimationStatics(|this| unsafe {
            let mut result__ = ::core::mem::MaybeUninit::zeroed();
            (::windows::core::Vtable::vtable(this).OpenedLengthProperty)(
                ::windows::core::Vtable::as_raw(this),
                result__.as_mut_ptr(),
            )
            .from_abi::<super::super::DependencyProperty>(result__)
        })
    }
    pub fn ClosedLengthProperty() -> ::windows::core::Result<super::super::DependencyProperty> {
        Self::ISplitCloseThemeAnimationStatics(|this| unsafe {
            let mut result__ = ::core::mem::MaybeUninit::zeroed();
            (::windows::core::Vtable::vtable(this).ClosedLengthProperty)(
                ::windows::core::Vtable::as_raw(this),
                result__.as_mut_ptr(),
            )
            .from_abi::<super::super::DependencyProperty>(result__)
        })
    }
    pub fn OffsetFromCenterProperty() -> ::windows::core::Result<super::super::DependencyProperty> {
        Self::ISplitCloseThemeAnimationStatics(|this| unsafe {
            let mut result__ = ::core::mem::MaybeUninit::zeroed();
            (::windows::core::Vtable::vtable(this).OffsetFromCenterProperty)(
                ::windows::core::Vtable::as_raw(this),
                result__.as_mut_ptr(),
            )
            .from_abi::<super::super::DependencyProperty>(result__)
        })
    }
    pub fn ContentTranslationDirectionProperty(
    ) -> ::windows::core::Result<super::super::DependencyProperty> {
        Self::ISplitCloseThemeAnimationStatics(|this| unsafe {
            let mut result__ = ::core::mem::MaybeUninit::zeroed();
            (::windows::core::Vtable::vtable(this).ContentTranslationDirectionProperty)(
                ::windows::core::Vtable::as_raw(this),
                result__.as_mut_ptr(),
            )
            .from_abi::<super::super::DependencyProperty>(result__)
        })
    }
    pub fn ContentTranslationOffsetProperty(
    ) -> ::windows::core::Result<super::super::DependencyProperty> {
        Self::ISplitCloseThemeAnimationStatics(|this| unsafe {
            let mut result__ = ::core::mem::MaybeUninit::zeroed();
            (::windows::core::Vtable::vtable(this).ContentTranslationOffsetProperty)(
                ::windows::core::Vtable::as_raw(this),
                result__.as_mut_ptr(),
            )
            .from_abi::<super::super::DependencyProperty>(result__)
        })
    }
    pub fn AutoReverse(&self) -> ::windows::core::Result<bool> {
        let this = &::windows::core::Interface::cast::<ITimeline>(self)?;
        unsafe {
            let mut result__ = ::core::mem::MaybeUninit::zeroed();
            (::windows::core::Vtable::vtable(this).AutoReverse)(
                ::windows::core::Vtable::as_raw(this),
                result__.as_mut_ptr(),
            )
            .from_abi::<bool>(result__)
        }
    }
    pub fn SetAutoReverse(&self, value: bool) -> ::windows::core::Result<()> {
        let this = &::windows::core::Interface::cast::<ITimeline>(self)?;
        unsafe {
            (::windows::core::Vtable::vtable(this).SetAutoReverse)(
                ::windows::core::Vtable::as_raw(this),
                value,
            )
            .ok()
        }
    }
    pub fn BeginTime(
        &self,
    ) -> ::windows::core::Result<::windows::Foundation::IReference<::windows::Foundation::TimeSpan>>
    {
        let this = &::windows::core::Interface::cast::<ITimeline>(self)?;
        unsafe {
            let mut result__ = ::core::mem::MaybeUninit::zeroed();
            (::windows::core::Vtable::vtable(this).BeginTime)(
                ::windows::core::Vtable::as_raw(this),
                result__.as_mut_ptr(),
            )
            .from_abi::<::windows::Foundation::IReference<::windows::Foundation::TimeSpan>>(
                result__,
            )
        }
    }
    pub fn SetBeginTime<'a, P0, E0>(&self, value: P0) -> ::windows::core::Result<()>
    where
        P0: ::std::convert::TryInto<
            ::windows::core::InParam<
                'a,
                ::windows::Foundation::IReference<::windows::Foundation::TimeSpan>,
            >,
            Error = E0,
        >,
        E0: ::std::convert::Into<::windows::core::Error>,
    {
        let this = &::windows::core::Interface::cast::<ITimeline>(self)?;
        unsafe {
            (::windows::core::Vtable::vtable(this).SetBeginTime)(
                ::windows::core::Vtable::as_raw(this),
                value.try_into().map_err(|e| e.into())?.abi(),
            )
            .ok()
        }
    }
    pub fn Duration(&self) -> ::windows::core::Result<super::super::Duration> {
        let this = &::windows::core::Interface::cast::<ITimeline>(self)?;
        unsafe {
            let mut result__ = ::core::mem::MaybeUninit::zeroed();
            (::windows::core::Vtable::vtable(this).Duration)(
                ::windows::core::Vtable::as_raw(this),
                result__.as_mut_ptr(),
            )
            .from_abi::<super::super::Duration>(result__)
        }
    }
    pub fn SetDuration(&self, value: super::super::Duration) -> ::windows::core::Result<()> {
        let this = &::windows::core::Interface::cast::<ITimeline>(self)?;
        unsafe {
            (::windows::core::Vtable::vtable(this).SetDuration)(
                ::windows::core::Vtable::as_raw(this),
                value,
            )
            .ok()
        }
    }
    pub fn SpeedRatio(&self) -> ::windows::core::Result<f64> {
        let this = &::windows::core::Interface::cast::<ITimeline>(self)?;
        unsafe {
            let mut result__ = ::core::mem::MaybeUninit::zeroed();
            (::windows::core::Vtable::vtable(this).SpeedRatio)(
                ::windows::core::Vtable::as_raw(this),
                result__.as_mut_ptr(),
            )
            .from_abi::<f64>(result__)
        }
    }
    pub fn SetSpeedRatio(&self, value: f64) -> ::windows::core::Result<()> {
        let this = &::windows::core::Interface::cast::<ITimeline>(self)?;
        unsafe {
            (::windows::core::Vtable::vtable(this).SetSpeedRatio)(
                ::windows::core::Vtable::as_raw(this),
                value,
            )
            .ok()
        }
    }
    pub fn FillBehavior(&self) -> ::windows::core::Result<FillBehavior> {
        let this = &::windows::core::Interface::cast::<ITimeline>(self)?;
        unsafe {
            let mut result__ = ::core::mem::MaybeUninit::zeroed();
            (::windows::core::Vtable::vtable(this).FillBehavior)(
                ::windows::core::Vtable::as_raw(this),
                result__.as_mut_ptr(),
            )
            .from_abi::<FillBehavior>(result__)
        }
    }
    pub fn SetFillBehavior(&self, value: FillBehavior) -> ::windows::core::Result<()> {
        let this = &::windows::core::Interface::cast::<ITimeline>(self)?;
        unsafe {
            (::windows::core::Vtable::vtable(this).SetFillBehavior)(
                ::windows::core::Vtable::as_raw(this),
                value,
            )
            .ok()
        }
    }
    pub fn RepeatBehavior(&self) -> ::windows::core::Result<RepeatBehavior> {
        let this = &::windows::core::Interface::cast::<ITimeline>(self)?;
        unsafe {
            let mut result__ = ::core::mem::MaybeUninit::zeroed();
            (::windows::core::Vtable::vtable(this).RepeatBehavior)(
                ::windows::core::Vtable::as_raw(this),
                result__.as_mut_ptr(),
            )
            .from_abi::<RepeatBehavior>(result__)
        }
    }
    pub fn SetRepeatBehavior(&self, value: RepeatBehavior) -> ::windows::core::Result<()> {
        let this = &::windows::core::Interface::cast::<ITimeline>(self)?;
        unsafe {
            (::windows::core::Vtable::vtable(this).SetRepeatBehavior)(
                ::windows::core::Vtable::as_raw(this),
                value,
            )
            .ok()
        }
    }
    pub fn Completed(
        &self,
        handler: &::windows::Foundation::EventHandler<::windows::core::IInspectable>,
    ) -> ::windows::core::Result<::windows::Foundation::EventRegistrationToken> {
        let this = &::windows::core::Interface::cast::<ITimeline>(self)?;
        unsafe {
            let mut result__ = ::core::mem::MaybeUninit::zeroed();
            (::windows::core::Vtable::vtable(this).Completed)(
                ::windows::core::Vtable::as_raw(this),
                ::core::mem::transmute_copy(handler),
                result__.as_mut_ptr(),
            )
            .from_abi::<::windows::Foundation::EventRegistrationToken>(result__)
        }
    }
    pub fn RemoveCompleted(
        &self,
        token: ::windows::Foundation::EventRegistrationToken,
    ) -> ::windows::core::Result<()> {
        let this = &::windows::core::Interface::cast::<ITimeline>(self)?;
        unsafe {
            (::windows::core::Vtable::vtable(this).RemoveCompleted)(
                ::windows::core::Vtable::as_raw(this),
                token,
            )
            .ok()
        }
    }
    #[doc(hidden)]
    pub fn ISplitCloseThemeAnimationStatics<
        R,
        F: FnOnce(&ISplitCloseThemeAnimationStatics) -> ::windows::core::Result<R>,
    >(
        callback: F,
    ) -> ::windows::core::Result<R> {
        static SHARED: ::windows::core::FactoryCache<
            SplitCloseThemeAnimation,
            ISplitCloseThemeAnimationStatics,
        > = ::windows::core::FactoryCache::new();
        SHARED.call(callback)
    }
}
impl ::core::clone::Clone for SplitCloseThemeAnimation {
    fn clone(&self) -> Self {
        Self(self.0.clone())
    }
}
impl ::core::cmp::PartialEq for SplitCloseThemeAnimation {
    fn eq(&self, other: &Self) -> bool {
        self.0 == other.0
    }
}
impl ::core::cmp::Eq for SplitCloseThemeAnimation {}
impl ::core::fmt::Debug for SplitCloseThemeAnimation {
    fn fmt(&self, f: &mut ::core::fmt::Formatter<'_>) -> ::core::fmt::Result {
        f.debug_tuple("SplitCloseThemeAnimation").field(&self.0).finish()
    }
}
unsafe impl ::windows::core::RuntimeType for SplitCloseThemeAnimation {
    const SIGNATURE : ::windows::core::ConstBuffer = ::windows::core::ConstBuffer::from_slice ( b"rc(Microsoft.UI.Xaml.Media.Animation.SplitCloseThemeAnimation;{b0dd1490-f646-5c18-b3ef-02f9b17f57df})" ) ;
    type DefaultType = ::core::option::Option<Self>;
    fn from_default(from: &Self::DefaultType) -> ::windows::core::Result<Self> {
        from.as_ref().cloned().ok_or(::windows::core::Error::OK)
    }
}
unsafe impl ::windows::core::Vtable for SplitCloseThemeAnimation {
    type Vtable = ISplitCloseThemeAnimation_Vtbl;
}
unsafe impl ::windows::core::Interface for SplitCloseThemeAnimation {
    const IID: ::windows::core::GUID =
        <ISplitCloseThemeAnimation as ::windows::core::Interface>::IID;
}
impl ::windows::core::RuntimeName for SplitCloseThemeAnimation {
    const NAME: &'static str = "Microsoft.UI.Xaml.Media.Animation.SplitCloseThemeAnimation";
}
::windows::core::interface_hierarchy!(
    SplitCloseThemeAnimation,
    ::windows::core::IUnknown,
    ::windows::core::IInspectable
);
impl ::core::convert::From<SplitCloseThemeAnimation> for Timeline {
    fn from(value: SplitCloseThemeAnimation) -> Self {
        ::core::convert::From::from(&value)
    }
}
impl ::core::convert::From<&SplitCloseThemeAnimation> for Timeline {
    fn from(value: &SplitCloseThemeAnimation) -> Self {
        ::windows::core::Interface::cast(value).unwrap()
    }
}
impl<'a> ::core::convert::From<&SplitCloseThemeAnimation>
    for ::windows::core::InParam<'a, Timeline>
{
    fn from(value: &SplitCloseThemeAnimation) -> Self {
        ::windows::core::InParam::owned(value.into())
    }
}
impl ::core::convert::From<SplitCloseThemeAnimation> for super::super::DependencyObject {
    fn from(value: SplitCloseThemeAnimation) -> Self {
        ::core::convert::From::from(&value)
    }
}
impl ::core::convert::From<&SplitCloseThemeAnimation> for super::super::DependencyObject {
    fn from(value: &SplitCloseThemeAnimation) -> Self {
        ::windows::core::Interface::cast(value).unwrap()
    }
}
impl<'a> ::core::convert::From<&SplitCloseThemeAnimation>
    for ::windows::core::InParam<'a, super::super::DependencyObject>
{
    fn from(value: &SplitCloseThemeAnimation) -> Self {
        ::windows::core::InParam::owned(value.into())
    }
}
unsafe impl ::core::marker::Send for SplitCloseThemeAnimation {}
unsafe impl ::core::marker::Sync for SplitCloseThemeAnimation {}
#[doc = "*Required features: `\"UI_Xaml_Media_Animation\"`*"]
#[repr(transparent)]
pub struct SplitOpenThemeAnimation(::windows::core::IUnknown);
impl SplitOpenThemeAnimation {
    pub fn new() -> ::windows::core::Result<Self> {
        Self::IActivationFactory(|f| f.ActivateInstance::<Self>())
    }
    fn IActivationFactory<
        R,
        F: FnOnce(&::windows::core::IGenericFactory) -> ::windows::core::Result<R>,
    >(
        callback: F,
    ) -> ::windows::core::Result<R> {
        static SHARED: ::windows::core::FactoryCache<
            SplitOpenThemeAnimation,
            ::windows::core::IGenericFactory,
        > = ::windows::core::FactoryCache::new();
        SHARED.call(callback)
    }
    pub fn GetValue(
        &self,
        dp: &super::super::DependencyProperty,
    ) -> ::windows::core::Result<::windows::core::IInspectable> {
        let this = &::windows::core::Interface::cast::<super::super::IDependencyObject>(self)?;
        unsafe {
            let mut result__ = ::core::mem::MaybeUninit::zeroed();
            (::windows::core::Vtable::vtable(this).GetValue)(
                ::windows::core::Vtable::as_raw(this),
                ::core::mem::transmute_copy(dp),
                result__.as_mut_ptr(),
            )
            .from_abi::<::windows::core::IInspectable>(result__)
        }
    }
    pub fn SetValue<'a, P0>(
        &self,
        dp: &super::super::DependencyProperty,
        value: P0,
    ) -> ::windows::core::Result<()>
    where
        P0: ::std::convert::Into<::windows::core::InParam<'a, ::windows::core::IInspectable>>,
    {
        let this = &::windows::core::Interface::cast::<super::super::IDependencyObject>(self)?;
        unsafe {
            (::windows::core::Vtable::vtable(this).SetValue)(
                ::windows::core::Vtable::as_raw(this),
                ::core::mem::transmute_copy(dp),
                value.into().abi(),
            )
            .ok()
        }
    }
    pub fn ClearValue(&self, dp: &super::super::DependencyProperty) -> ::windows::core::Result<()> {
        let this = &::windows::core::Interface::cast::<super::super::IDependencyObject>(self)?;
        unsafe {
            (::windows::core::Vtable::vtable(this).ClearValue)(
                ::windows::core::Vtable::as_raw(this),
                ::core::mem::transmute_copy(dp),
            )
            .ok()
        }
    }
    pub fn ReadLocalValue(
        &self,
        dp: &super::super::DependencyProperty,
    ) -> ::windows::core::Result<::windows::core::IInspectable> {
        let this = &::windows::core::Interface::cast::<super::super::IDependencyObject>(self)?;
        unsafe {
            let mut result__ = ::core::mem::MaybeUninit::zeroed();
            (::windows::core::Vtable::vtable(this).ReadLocalValue)(
                ::windows::core::Vtable::as_raw(this),
                ::core::mem::transmute_copy(dp),
                result__.as_mut_ptr(),
            )
            .from_abi::<::windows::core::IInspectable>(result__)
        }
    }
    pub fn GetAnimationBaseValue(
        &self,
        dp: &super::super::DependencyProperty,
    ) -> ::windows::core::Result<::windows::core::IInspectable> {
        let this = &::windows::core::Interface::cast::<super::super::IDependencyObject>(self)?;
        unsafe {
            let mut result__ = ::core::mem::MaybeUninit::zeroed();
            (::windows::core::Vtable::vtable(this).GetAnimationBaseValue)(
                ::windows::core::Vtable::as_raw(this),
                ::core::mem::transmute_copy(dp),
                result__.as_mut_ptr(),
            )
            .from_abi::<::windows::core::IInspectable>(result__)
        }
    }
    pub fn RegisterPropertyChangedCallback(
        &self,
        dp: &super::super::DependencyProperty,
        callback: &super::super::DependencyPropertyChangedCallback,
    ) -> ::windows::core::Result<i64> {
        let this = &::windows::core::Interface::cast::<super::super::IDependencyObject>(self)?;
        unsafe {
            let mut result__ = ::core::mem::MaybeUninit::zeroed();
            (::windows::core::Vtable::vtable(this).RegisterPropertyChangedCallback)(
                ::windows::core::Vtable::as_raw(this),
                ::core::mem::transmute_copy(dp),
                ::core::mem::transmute_copy(callback),
                result__.as_mut_ptr(),
            )
            .from_abi::<i64>(result__)
        }
    }
    pub fn UnregisterPropertyChangedCallback(
        &self,
        dp: &super::super::DependencyProperty,
        token: i64,
    ) -> ::windows::core::Result<()> {
        let this = &::windows::core::Interface::cast::<super::super::IDependencyObject>(self)?;
        unsafe {
            (::windows::core::Vtable::vtable(this).UnregisterPropertyChangedCallback)(
                ::windows::core::Vtable::as_raw(this),
                ::core::mem::transmute_copy(dp),
                token,
            )
            .ok()
        }
    }
    pub fn Dispatcher(&self) -> ::windows::core::Result<::windows::UI::Core::CoreDispatcher> {
        let this = &::windows::core::Interface::cast::<super::super::IDependencyObject>(self)?;
        unsafe {
            let mut result__ = ::core::mem::MaybeUninit::zeroed();
            (::windows::core::Vtable::vtable(this).Dispatcher)(
                ::windows::core::Vtable::as_raw(this),
                result__.as_mut_ptr(),
            )
            .from_abi::<::windows::UI::Core::CoreDispatcher>(result__)
        }
    }
    #[doc = "*Required features: `\"UI_Dispatching\"`*"]
    #[cfg(feature = "UI_Dispatching")]
    pub fn DispatcherQueue(
        &self,
    ) -> ::windows::core::Result<super::super::super::Dispatching::DispatcherQueue> {
        let this = &::windows::core::Interface::cast::<super::super::IDependencyObject>(self)?;
        unsafe {
            let mut result__ = ::core::mem::MaybeUninit::zeroed();
            (::windows::core::Vtable::vtable(this).DispatcherQueue)(
                ::windows::core::Vtable::as_raw(this),
                result__.as_mut_ptr(),
            )
            .from_abi::<super::super::super::Dispatching::DispatcherQueue>(result__)
        }
    }
    pub fn OpenedTargetName(&self) -> ::windows::core::Result<::windows::core::HSTRING> {
        let this = self;
        unsafe {
            let mut result__ = ::core::mem::MaybeUninit::zeroed();
            (::windows::core::Vtable::vtable(this).OpenedTargetName)(
                ::windows::core::Vtable::as_raw(this),
                result__.as_mut_ptr(),
            )
            .from_abi::<::windows::core::HSTRING>(result__)
        }
    }
    pub fn SetOpenedTargetName(
        &self,
        value: &::windows::core::HSTRING,
    ) -> ::windows::core::Result<()> {
        let this = self;
        unsafe {
            (::windows::core::Vtable::vtable(this).SetOpenedTargetName)(
                ::windows::core::Vtable::as_raw(this),
                ::core::mem::transmute_copy(value),
            )
            .ok()
        }
    }
    pub fn OpenedTarget(&self) -> ::windows::core::Result<super::super::DependencyObject> {
        let this = self;
        unsafe {
            let mut result__ = ::core::mem::MaybeUninit::zeroed();
            (::windows::core::Vtable::vtable(this).OpenedTarget)(
                ::windows::core::Vtable::as_raw(this),
                result__.as_mut_ptr(),
            )
            .from_abi::<super::super::DependencyObject>(result__)
        }
    }
    pub fn SetOpenedTarget<'a, P0>(&self, value: P0) -> ::windows::core::Result<()>
    where
        P0: ::std::convert::Into<::windows::core::InParam<'a, super::super::DependencyObject>>,
    {
        let this = self;
        unsafe {
            (::windows::core::Vtable::vtable(this).SetOpenedTarget)(
                ::windows::core::Vtable::as_raw(this),
                value.into().abi(),
            )
            .ok()
        }
    }
    pub fn ClosedTargetName(&self) -> ::windows::core::Result<::windows::core::HSTRING> {
        let this = self;
        unsafe {
            let mut result__ = ::core::mem::MaybeUninit::zeroed();
            (::windows::core::Vtable::vtable(this).ClosedTargetName)(
                ::windows::core::Vtable::as_raw(this),
                result__.as_mut_ptr(),
            )
            .from_abi::<::windows::core::HSTRING>(result__)
        }
    }
    pub fn SetClosedTargetName(
        &self,
        value: &::windows::core::HSTRING,
    ) -> ::windows::core::Result<()> {
        let this = self;
        unsafe {
            (::windows::core::Vtable::vtable(this).SetClosedTargetName)(
                ::windows::core::Vtable::as_raw(this),
                ::core::mem::transmute_copy(value),
            )
            .ok()
        }
    }
    pub fn ClosedTarget(&self) -> ::windows::core::Result<super::super::DependencyObject> {
        let this = self;
        unsafe {
            let mut result__ = ::core::mem::MaybeUninit::zeroed();
            (::windows::core::Vtable::vtable(this).ClosedTarget)(
                ::windows::core::Vtable::as_raw(this),
                result__.as_mut_ptr(),
            )
            .from_abi::<super::super::DependencyObject>(result__)
        }
    }
    pub fn SetClosedTarget<'a, P0>(&self, value: P0) -> ::windows::core::Result<()>
    where
        P0: ::std::convert::Into<::windows::core::InParam<'a, super::super::DependencyObject>>,
    {
        let this = self;
        unsafe {
            (::windows::core::Vtable::vtable(this).SetClosedTarget)(
                ::windows::core::Vtable::as_raw(this),
                value.into().abi(),
            )
            .ok()
        }
    }
    pub fn ContentTargetName(&self) -> ::windows::core::Result<::windows::core::HSTRING> {
        let this = self;
        unsafe {
            let mut result__ = ::core::mem::MaybeUninit::zeroed();
            (::windows::core::Vtable::vtable(this).ContentTargetName)(
                ::windows::core::Vtable::as_raw(this),
                result__.as_mut_ptr(),
            )
            .from_abi::<::windows::core::HSTRING>(result__)
        }
    }
    pub fn SetContentTargetName(
        &self,
        value: &::windows::core::HSTRING,
    ) -> ::windows::core::Result<()> {
        let this = self;
        unsafe {
            (::windows::core::Vtable::vtable(this).SetContentTargetName)(
                ::windows::core::Vtable::as_raw(this),
                ::core::mem::transmute_copy(value),
            )
            .ok()
        }
    }
    pub fn ContentTarget(&self) -> ::windows::core::Result<super::super::DependencyObject> {
        let this = self;
        unsafe {
            let mut result__ = ::core::mem::MaybeUninit::zeroed();
            (::windows::core::Vtable::vtable(this).ContentTarget)(
                ::windows::core::Vtable::as_raw(this),
                result__.as_mut_ptr(),
            )
            .from_abi::<super::super::DependencyObject>(result__)
        }
    }
    pub fn SetContentTarget<'a, P0>(&self, value: P0) -> ::windows::core::Result<()>
    where
        P0: ::std::convert::Into<::windows::core::InParam<'a, super::super::DependencyObject>>,
    {
        let this = self;
        unsafe {
            (::windows::core::Vtable::vtable(this).SetContentTarget)(
                ::windows::core::Vtable::as_raw(this),
                value.into().abi(),
            )
            .ok()
        }
    }
    pub fn OpenedLength(&self) -> ::windows::core::Result<f64> {
        let this = self;
        unsafe {
            let mut result__ = ::core::mem::MaybeUninit::zeroed();
            (::windows::core::Vtable::vtable(this).OpenedLength)(
                ::windows::core::Vtable::as_raw(this),
                result__.as_mut_ptr(),
            )
            .from_abi::<f64>(result__)
        }
    }
    pub fn SetOpenedLength(&self, value: f64) -> ::windows::core::Result<()> {
        let this = self;
        unsafe {
            (::windows::core::Vtable::vtable(this).SetOpenedLength)(
                ::windows::core::Vtable::as_raw(this),
                value,
            )
            .ok()
        }
    }
    pub fn ClosedLength(&self) -> ::windows::core::Result<f64> {
        let this = self;
        unsafe {
            let mut result__ = ::core::mem::MaybeUninit::zeroed();
            (::windows::core::Vtable::vtable(this).ClosedLength)(
                ::windows::core::Vtable::as_raw(this),
                result__.as_mut_ptr(),
            )
            .from_abi::<f64>(result__)
        }
    }
    pub fn SetClosedLength(&self, value: f64) -> ::windows::core::Result<()> {
        let this = self;
        unsafe {
            (::windows::core::Vtable::vtable(this).SetClosedLength)(
                ::windows::core::Vtable::as_raw(this),
                value,
            )
            .ok()
        }
    }
    pub fn OffsetFromCenter(&self) -> ::windows::core::Result<f64> {
        let this = self;
        unsafe {
            let mut result__ = ::core::mem::MaybeUninit::zeroed();
            (::windows::core::Vtable::vtable(this).OffsetFromCenter)(
                ::windows::core::Vtable::as_raw(this),
                result__.as_mut_ptr(),
            )
            .from_abi::<f64>(result__)
        }
    }
    pub fn SetOffsetFromCenter(&self, value: f64) -> ::windows::core::Result<()> {
        let this = self;
        unsafe {
            (::windows::core::Vtable::vtable(this).SetOffsetFromCenter)(
                ::windows::core::Vtable::as_raw(this),
                value,
            )
            .ok()
        }
    }
    #[doc = "*Required features: `\"UI_Xaml_Controls_Primitives\"`*"]
    #[cfg(feature = "UI_Xaml_Controls_Primitives")]
    pub fn ContentTranslationDirection(
        &self,
    ) -> ::windows::core::Result<super::super::Controls::Primitives::AnimationDirection> {
        let this = self;
        unsafe {
            let mut result__ = ::core::mem::MaybeUninit::zeroed();
            (::windows::core::Vtable::vtable(this).ContentTranslationDirection)(
                ::windows::core::Vtable::as_raw(this),
                result__.as_mut_ptr(),
            )
            .from_abi::<super::super::Controls::Primitives::AnimationDirection>(result__)
        }
    }
    #[doc = "*Required features: `\"UI_Xaml_Controls_Primitives\"`*"]
    #[cfg(feature = "UI_Xaml_Controls_Primitives")]
    pub fn SetContentTranslationDirection(
        &self,
        value: super::super::Controls::Primitives::AnimationDirection,
    ) -> ::windows::core::Result<()> {
        let this = self;
        unsafe {
            (::windows::core::Vtable::vtable(this).SetContentTranslationDirection)(
                ::windows::core::Vtable::as_raw(this),
                value,
            )
            .ok()
        }
    }
    pub fn ContentTranslationOffset(&self) -> ::windows::core::Result<f64> {
        let this = self;
        unsafe {
            let mut result__ = ::core::mem::MaybeUninit::zeroed();
            (::windows::core::Vtable::vtable(this).ContentTranslationOffset)(
                ::windows::core::Vtable::as_raw(this),
                result__.as_mut_ptr(),
            )
            .from_abi::<f64>(result__)
        }
    }
    pub fn SetContentTranslationOffset(&self, value: f64) -> ::windows::core::Result<()> {
        let this = self;
        unsafe {
            (::windows::core::Vtable::vtable(this).SetContentTranslationOffset)(
                ::windows::core::Vtable::as_raw(this),
                value,
            )
            .ok()
        }
    }
    pub fn OpenedTargetNameProperty() -> ::windows::core::Result<super::super::DependencyProperty> {
        Self::ISplitOpenThemeAnimationStatics(|this| unsafe {
            let mut result__ = ::core::mem::MaybeUninit::zeroed();
            (::windows::core::Vtable::vtable(this).OpenedTargetNameProperty)(
                ::windows::core::Vtable::as_raw(this),
                result__.as_mut_ptr(),
            )
            .from_abi::<super::super::DependencyProperty>(result__)
        })
    }
    pub fn OpenedTargetProperty() -> ::windows::core::Result<super::super::DependencyProperty> {
        Self::ISplitOpenThemeAnimationStatics(|this| unsafe {
            let mut result__ = ::core::mem::MaybeUninit::zeroed();
            (::windows::core::Vtable::vtable(this).OpenedTargetProperty)(
                ::windows::core::Vtable::as_raw(this),
                result__.as_mut_ptr(),
            )
            .from_abi::<super::super::DependencyProperty>(result__)
        })
    }
    pub fn ClosedTargetNameProperty() -> ::windows::core::Result<super::super::DependencyProperty> {
        Self::ISplitOpenThemeAnimationStatics(|this| unsafe {
            let mut result__ = ::core::mem::MaybeUninit::zeroed();
            (::windows::core::Vtable::vtable(this).ClosedTargetNameProperty)(
                ::windows::core::Vtable::as_raw(this),
                result__.as_mut_ptr(),
            )
            .from_abi::<super::super::DependencyProperty>(result__)
        })
    }
    pub fn ClosedTargetProperty() -> ::windows::core::Result<super::super::DependencyProperty> {
        Self::ISplitOpenThemeAnimationStatics(|this| unsafe {
            let mut result__ = ::core::mem::MaybeUninit::zeroed();
            (::windows::core::Vtable::vtable(this).ClosedTargetProperty)(
                ::windows::core::Vtable::as_raw(this),
                result__.as_mut_ptr(),
            )
            .from_abi::<super::super::DependencyProperty>(result__)
        })
    }
    pub fn ContentTargetNameProperty() -> ::windows::core::Result<super::super::DependencyProperty>
    {
        Self::ISplitOpenThemeAnimationStatics(|this| unsafe {
            let mut result__ = ::core::mem::MaybeUninit::zeroed();
            (::windows::core::Vtable::vtable(this).ContentTargetNameProperty)(
                ::windows::core::Vtable::as_raw(this),
                result__.as_mut_ptr(),
            )
            .from_abi::<super::super::DependencyProperty>(result__)
        })
    }
    pub fn ContentTargetProperty() -> ::windows::core::Result<super::super::DependencyProperty> {
        Self::ISplitOpenThemeAnimationStatics(|this| unsafe {
            let mut result__ = ::core::mem::MaybeUninit::zeroed();
            (::windows::core::Vtable::vtable(this).ContentTargetProperty)(
                ::windows::core::Vtable::as_raw(this),
                result__.as_mut_ptr(),
            )
            .from_abi::<super::super::DependencyProperty>(result__)
        })
    }
    pub fn OpenedLengthProperty() -> ::windows::core::Result<super::super::DependencyProperty> {
        Self::ISplitOpenThemeAnimationStatics(|this| unsafe {
            let mut result__ = ::core::mem::MaybeUninit::zeroed();
            (::windows::core::Vtable::vtable(this).OpenedLengthProperty)(
                ::windows::core::Vtable::as_raw(this),
                result__.as_mut_ptr(),
            )
            .from_abi::<super::super::DependencyProperty>(result__)
        })
    }
    pub fn ClosedLengthProperty() -> ::windows::core::Result<super::super::DependencyProperty> {
        Self::ISplitOpenThemeAnimationStatics(|this| unsafe {
            let mut result__ = ::core::mem::MaybeUninit::zeroed();
            (::windows::core::Vtable::vtable(this).ClosedLengthProperty)(
                ::windows::core::Vtable::as_raw(this),
                result__.as_mut_ptr(),
            )
            .from_abi::<super::super::DependencyProperty>(result__)
        })
    }
    pub fn OffsetFromCenterProperty() -> ::windows::core::Result<super::super::DependencyProperty> {
        Self::ISplitOpenThemeAnimationStatics(|this| unsafe {
            let mut result__ = ::core::mem::MaybeUninit::zeroed();
            (::windows::core::Vtable::vtable(this).OffsetFromCenterProperty)(
                ::windows::core::Vtable::as_raw(this),
                result__.as_mut_ptr(),
            )
            .from_abi::<super::super::DependencyProperty>(result__)
        })
    }
    pub fn ContentTranslationDirectionProperty(
    ) -> ::windows::core::Result<super::super::DependencyProperty> {
        Self::ISplitOpenThemeAnimationStatics(|this| unsafe {
            let mut result__ = ::core::mem::MaybeUninit::zeroed();
            (::windows::core::Vtable::vtable(this).ContentTranslationDirectionProperty)(
                ::windows::core::Vtable::as_raw(this),
                result__.as_mut_ptr(),
            )
            .from_abi::<super::super::DependencyProperty>(result__)
        })
    }
    pub fn ContentTranslationOffsetProperty(
    ) -> ::windows::core::Result<super::super::DependencyProperty> {
        Self::ISplitOpenThemeAnimationStatics(|this| unsafe {
            let mut result__ = ::core::mem::MaybeUninit::zeroed();
            (::windows::core::Vtable::vtable(this).ContentTranslationOffsetProperty)(
                ::windows::core::Vtable::as_raw(this),
                result__.as_mut_ptr(),
            )
            .from_abi::<super::super::DependencyProperty>(result__)
        })
    }
    pub fn AutoReverse(&self) -> ::windows::core::Result<bool> {
        let this = &::windows::core::Interface::cast::<ITimeline>(self)?;
        unsafe {
            let mut result__ = ::core::mem::MaybeUninit::zeroed();
            (::windows::core::Vtable::vtable(this).AutoReverse)(
                ::windows::core::Vtable::as_raw(this),
                result__.as_mut_ptr(),
            )
            .from_abi::<bool>(result__)
        }
    }
    pub fn SetAutoReverse(&self, value: bool) -> ::windows::core::Result<()> {
        let this = &::windows::core::Interface::cast::<ITimeline>(self)?;
        unsafe {
            (::windows::core::Vtable::vtable(this).SetAutoReverse)(
                ::windows::core::Vtable::as_raw(this),
                value,
            )
            .ok()
        }
    }
    pub fn BeginTime(
        &self,
    ) -> ::windows::core::Result<::windows::Foundation::IReference<::windows::Foundation::TimeSpan>>
    {
        let this = &::windows::core::Interface::cast::<ITimeline>(self)?;
        unsafe {
            let mut result__ = ::core::mem::MaybeUninit::zeroed();
            (::windows::core::Vtable::vtable(this).BeginTime)(
                ::windows::core::Vtable::as_raw(this),
                result__.as_mut_ptr(),
            )
            .from_abi::<::windows::Foundation::IReference<::windows::Foundation::TimeSpan>>(
                result__,
            )
        }
    }
    pub fn SetBeginTime<'a, P0, E0>(&self, value: P0) -> ::windows::core::Result<()>
    where
        P0: ::std::convert::TryInto<
            ::windows::core::InParam<
                'a,
                ::windows::Foundation::IReference<::windows::Foundation::TimeSpan>,
            >,
            Error = E0,
        >,
        E0: ::std::convert::Into<::windows::core::Error>,
    {
        let this = &::windows::core::Interface::cast::<ITimeline>(self)?;
        unsafe {
            (::windows::core::Vtable::vtable(this).SetBeginTime)(
                ::windows::core::Vtable::as_raw(this),
                value.try_into().map_err(|e| e.into())?.abi(),
            )
            .ok()
        }
    }
    pub fn Duration(&self) -> ::windows::core::Result<super::super::Duration> {
        let this = &::windows::core::Interface::cast::<ITimeline>(self)?;
        unsafe {
            let mut result__ = ::core::mem::MaybeUninit::zeroed();
            (::windows::core::Vtable::vtable(this).Duration)(
                ::windows::core::Vtable::as_raw(this),
                result__.as_mut_ptr(),
            )
            .from_abi::<super::super::Duration>(result__)
        }
    }
    pub fn SetDuration(&self, value: super::super::Duration) -> ::windows::core::Result<()> {
        let this = &::windows::core::Interface::cast::<ITimeline>(self)?;
        unsafe {
            (::windows::core::Vtable::vtable(this).SetDuration)(
                ::windows::core::Vtable::as_raw(this),
                value,
            )
            .ok()
        }
    }
    pub fn SpeedRatio(&self) -> ::windows::core::Result<f64> {
        let this = &::windows::core::Interface::cast::<ITimeline>(self)?;
        unsafe {
            let mut result__ = ::core::mem::MaybeUninit::zeroed();
            (::windows::core::Vtable::vtable(this).SpeedRatio)(
                ::windows::core::Vtable::as_raw(this),
                result__.as_mut_ptr(),
            )
            .from_abi::<f64>(result__)
        }
    }
    pub fn SetSpeedRatio(&self, value: f64) -> ::windows::core::Result<()> {
        let this = &::windows::core::Interface::cast::<ITimeline>(self)?;
        unsafe {
            (::windows::core::Vtable::vtable(this).SetSpeedRatio)(
                ::windows::core::Vtable::as_raw(this),
                value,
            )
            .ok()
        }
    }
    pub fn FillBehavior(&self) -> ::windows::core::Result<FillBehavior> {
        let this = &::windows::core::Interface::cast::<ITimeline>(self)?;
        unsafe {
            let mut result__ = ::core::mem::MaybeUninit::zeroed();
            (::windows::core::Vtable::vtable(this).FillBehavior)(
                ::windows::core::Vtable::as_raw(this),
                result__.as_mut_ptr(),
            )
            .from_abi::<FillBehavior>(result__)
        }
    }
    pub fn SetFillBehavior(&self, value: FillBehavior) -> ::windows::core::Result<()> {
        let this = &::windows::core::Interface::cast::<ITimeline>(self)?;
        unsafe {
            (::windows::core::Vtable::vtable(this).SetFillBehavior)(
                ::windows::core::Vtable::as_raw(this),
                value,
            )
            .ok()
        }
    }
    pub fn RepeatBehavior(&self) -> ::windows::core::Result<RepeatBehavior> {
        let this = &::windows::core::Interface::cast::<ITimeline>(self)?;
        unsafe {
            let mut result__ = ::core::mem::MaybeUninit::zeroed();
            (::windows::core::Vtable::vtable(this).RepeatBehavior)(
                ::windows::core::Vtable::as_raw(this),
                result__.as_mut_ptr(),
            )
            .from_abi::<RepeatBehavior>(result__)
        }
    }
    pub fn SetRepeatBehavior(&self, value: RepeatBehavior) -> ::windows::core::Result<()> {
        let this = &::windows::core::Interface::cast::<ITimeline>(self)?;
        unsafe {
            (::windows::core::Vtable::vtable(this).SetRepeatBehavior)(
                ::windows::core::Vtable::as_raw(this),
                value,
            )
            .ok()
        }
    }
    pub fn Completed(
        &self,
        handler: &::windows::Foundation::EventHandler<::windows::core::IInspectable>,
    ) -> ::windows::core::Result<::windows::Foundation::EventRegistrationToken> {
        let this = &::windows::core::Interface::cast::<ITimeline>(self)?;
        unsafe {
            let mut result__ = ::core::mem::MaybeUninit::zeroed();
            (::windows::core::Vtable::vtable(this).Completed)(
                ::windows::core::Vtable::as_raw(this),
                ::core::mem::transmute_copy(handler),
                result__.as_mut_ptr(),
            )
            .from_abi::<::windows::Foundation::EventRegistrationToken>(result__)
        }
    }
    pub fn RemoveCompleted(
        &self,
        token: ::windows::Foundation::EventRegistrationToken,
    ) -> ::windows::core::Result<()> {
        let this = &::windows::core::Interface::cast::<ITimeline>(self)?;
        unsafe {
            (::windows::core::Vtable::vtable(this).RemoveCompleted)(
                ::windows::core::Vtable::as_raw(this),
                token,
            )
            .ok()
        }
    }
    #[doc(hidden)]
    pub fn ISplitOpenThemeAnimationStatics<
        R,
        F: FnOnce(&ISplitOpenThemeAnimationStatics) -> ::windows::core::Result<R>,
    >(
        callback: F,
    ) -> ::windows::core::Result<R> {
        static SHARED: ::windows::core::FactoryCache<
            SplitOpenThemeAnimation,
            ISplitOpenThemeAnimationStatics,
        > = ::windows::core::FactoryCache::new();
        SHARED.call(callback)
    }
}
impl ::core::clone::Clone for SplitOpenThemeAnimation {
    fn clone(&self) -> Self {
        Self(self.0.clone())
    }
}
impl ::core::cmp::PartialEq for SplitOpenThemeAnimation {
    fn eq(&self, other: &Self) -> bool {
        self.0 == other.0
    }
}
impl ::core::cmp::Eq for SplitOpenThemeAnimation {}
impl ::core::fmt::Debug for SplitOpenThemeAnimation {
    fn fmt(&self, f: &mut ::core::fmt::Formatter<'_>) -> ::core::fmt::Result {
        f.debug_tuple("SplitOpenThemeAnimation").field(&self.0).finish()
    }
}
unsafe impl ::windows::core::RuntimeType for SplitOpenThemeAnimation {
    const SIGNATURE : ::windows::core::ConstBuffer = ::windows::core::ConstBuffer::from_slice ( b"rc(Microsoft.UI.Xaml.Media.Animation.SplitOpenThemeAnimation;{79fdfaca-4245-53f0-b5c7-da1ce2b0b851})" ) ;
    type DefaultType = ::core::option::Option<Self>;
    fn from_default(from: &Self::DefaultType) -> ::windows::core::Result<Self> {
        from.as_ref().cloned().ok_or(::windows::core::Error::OK)
    }
}
unsafe impl ::windows::core::Vtable for SplitOpenThemeAnimation {
    type Vtable = ISplitOpenThemeAnimation_Vtbl;
}
unsafe impl ::windows::core::Interface for SplitOpenThemeAnimation {
    const IID: ::windows::core::GUID =
        <ISplitOpenThemeAnimation as ::windows::core::Interface>::IID;
}
impl ::windows::core::RuntimeName for SplitOpenThemeAnimation {
    const NAME: &'static str = "Microsoft.UI.Xaml.Media.Animation.SplitOpenThemeAnimation";
}
::windows::core::interface_hierarchy!(
    SplitOpenThemeAnimation,
    ::windows::core::IUnknown,
    ::windows::core::IInspectable
);
impl ::core::convert::From<SplitOpenThemeAnimation> for Timeline {
    fn from(value: SplitOpenThemeAnimation) -> Self {
        ::core::convert::From::from(&value)
    }
}
impl ::core::convert::From<&SplitOpenThemeAnimation> for Timeline {
    fn from(value: &SplitOpenThemeAnimation) -> Self {
        ::windows::core::Interface::cast(value).unwrap()
    }
}
impl<'a> ::core::convert::From<&SplitOpenThemeAnimation>
    for ::windows::core::InParam<'a, Timeline>
{
    fn from(value: &SplitOpenThemeAnimation) -> Self {
        ::windows::core::InParam::owned(value.into())
    }
}
impl ::core::convert::From<SplitOpenThemeAnimation> for super::super::DependencyObject {
    fn from(value: SplitOpenThemeAnimation) -> Self {
        ::core::convert::From::from(&value)
    }
}
impl ::core::convert::From<&SplitOpenThemeAnimation> for super::super::DependencyObject {
    fn from(value: &SplitOpenThemeAnimation) -> Self {
        ::windows::core::Interface::cast(value).unwrap()
    }
}
impl<'a> ::core::convert::From<&SplitOpenThemeAnimation>
    for ::windows::core::InParam<'a, super::super::DependencyObject>
{
    fn from(value: &SplitOpenThemeAnimation) -> Self {
        ::windows::core::InParam::owned(value.into())
    }
}
unsafe impl ::core::marker::Send for SplitOpenThemeAnimation {}
unsafe impl ::core::marker::Sync for SplitOpenThemeAnimation {}
#[doc = "*Required features: `\"UI_Xaml_Media_Animation\"`*"]
#[repr(transparent)]
pub struct Storyboard(::windows::core::IUnknown);
impl Storyboard {
    pub fn new() -> ::windows::core::Result<Self> {
        Self::IActivationFactory(|f| f.ActivateInstance::<Self>())
    }
    fn IActivationFactory<
        R,
        F: FnOnce(&::windows::core::IGenericFactory) -> ::windows::core::Result<R>,
    >(
        callback: F,
    ) -> ::windows::core::Result<R> {
        static SHARED: ::windows::core::FactoryCache<Storyboard, ::windows::core::IGenericFactory> =
            ::windows::core::FactoryCache::new();
        SHARED.call(callback)
    }
    pub fn GetValue(
        &self,
        dp: &super::super::DependencyProperty,
    ) -> ::windows::core::Result<::windows::core::IInspectable> {
        let this = &::windows::core::Interface::cast::<super::super::IDependencyObject>(self)?;
        unsafe {
            let mut result__ = ::core::mem::MaybeUninit::zeroed();
            (::windows::core::Vtable::vtable(this).GetValue)(
                ::windows::core::Vtable::as_raw(this),
                ::core::mem::transmute_copy(dp),
                result__.as_mut_ptr(),
            )
            .from_abi::<::windows::core::IInspectable>(result__)
        }
    }
    pub fn SetValue<'a, P0>(
        &self,
        dp: &super::super::DependencyProperty,
        value: P0,
    ) -> ::windows::core::Result<()>
    where
        P0: ::std::convert::Into<::windows::core::InParam<'a, ::windows::core::IInspectable>>,
    {
        let this = &::windows::core::Interface::cast::<super::super::IDependencyObject>(self)?;
        unsafe {
            (::windows::core::Vtable::vtable(this).SetValue)(
                ::windows::core::Vtable::as_raw(this),
                ::core::mem::transmute_copy(dp),
                value.into().abi(),
            )
            .ok()
        }
    }
    pub fn ClearValue(&self, dp: &super::super::DependencyProperty) -> ::windows::core::Result<()> {
        let this = &::windows::core::Interface::cast::<super::super::IDependencyObject>(self)?;
        unsafe {
            (::windows::core::Vtable::vtable(this).ClearValue)(
                ::windows::core::Vtable::as_raw(this),
                ::core::mem::transmute_copy(dp),
            )
            .ok()
        }
    }
    pub fn ReadLocalValue(
        &self,
        dp: &super::super::DependencyProperty,
    ) -> ::windows::core::Result<::windows::core::IInspectable> {
        let this = &::windows::core::Interface::cast::<super::super::IDependencyObject>(self)?;
        unsafe {
            let mut result__ = ::core::mem::MaybeUninit::zeroed();
            (::windows::core::Vtable::vtable(this).ReadLocalValue)(
                ::windows::core::Vtable::as_raw(this),
                ::core::mem::transmute_copy(dp),
                result__.as_mut_ptr(),
            )
            .from_abi::<::windows::core::IInspectable>(result__)
        }
    }
    pub fn GetAnimationBaseValue(
        &self,
        dp: &super::super::DependencyProperty,
    ) -> ::windows::core::Result<::windows::core::IInspectable> {
        let this = &::windows::core::Interface::cast::<super::super::IDependencyObject>(self)?;
        unsafe {
            let mut result__ = ::core::mem::MaybeUninit::zeroed();
            (::windows::core::Vtable::vtable(this).GetAnimationBaseValue)(
                ::windows::core::Vtable::as_raw(this),
                ::core::mem::transmute_copy(dp),
                result__.as_mut_ptr(),
            )
            .from_abi::<::windows::core::IInspectable>(result__)
        }
    }
    pub fn RegisterPropertyChangedCallback(
        &self,
        dp: &super::super::DependencyProperty,
        callback: &super::super::DependencyPropertyChangedCallback,
    ) -> ::windows::core::Result<i64> {
        let this = &::windows::core::Interface::cast::<super::super::IDependencyObject>(self)?;
        unsafe {
            let mut result__ = ::core::mem::MaybeUninit::zeroed();
            (::windows::core::Vtable::vtable(this).RegisterPropertyChangedCallback)(
                ::windows::core::Vtable::as_raw(this),
                ::core::mem::transmute_copy(dp),
                ::core::mem::transmute_copy(callback),
                result__.as_mut_ptr(),
            )
            .from_abi::<i64>(result__)
        }
    }
    pub fn UnregisterPropertyChangedCallback(
        &self,
        dp: &super::super::DependencyProperty,
        token: i64,
    ) -> ::windows::core::Result<()> {
        let this = &::windows::core::Interface::cast::<super::super::IDependencyObject>(self)?;
        unsafe {
            (::windows::core::Vtable::vtable(this).UnregisterPropertyChangedCallback)(
                ::windows::core::Vtable::as_raw(this),
                ::core::mem::transmute_copy(dp),
                token,
            )
            .ok()
        }
    }
    pub fn Dispatcher(&self) -> ::windows::core::Result<::windows::UI::Core::CoreDispatcher> {
        let this = &::windows::core::Interface::cast::<super::super::IDependencyObject>(self)?;
        unsafe {
            let mut result__ = ::core::mem::MaybeUninit::zeroed();
            (::windows::core::Vtable::vtable(this).Dispatcher)(
                ::windows::core::Vtable::as_raw(this),
                result__.as_mut_ptr(),
            )
            .from_abi::<::windows::UI::Core::CoreDispatcher>(result__)
        }
    }
    #[doc = "*Required features: `\"UI_Dispatching\"`*"]
    #[cfg(feature = "UI_Dispatching")]
    pub fn DispatcherQueue(
        &self,
    ) -> ::windows::core::Result<super::super::super::Dispatching::DispatcherQueue> {
        let this = &::windows::core::Interface::cast::<super::super::IDependencyObject>(self)?;
        unsafe {
            let mut result__ = ::core::mem::MaybeUninit::zeroed();
            (::windows::core::Vtable::vtable(this).DispatcherQueue)(
                ::windows::core::Vtable::as_raw(this),
                result__.as_mut_ptr(),
            )
            .from_abi::<super::super::super::Dispatching::DispatcherQueue>(result__)
        }
    }
    pub fn Children(&self) -> ::windows::core::Result<TimelineCollection> {
        let this = self;
        unsafe {
            let mut result__ = ::core::mem::MaybeUninit::zeroed();
            (::windows::core::Vtable::vtable(this).Children)(
                ::windows::core::Vtable::as_raw(this),
                result__.as_mut_ptr(),
            )
            .from_abi::<TimelineCollection>(result__)
        }
    }
    pub fn Seek(&self, offset: ::windows::Foundation::TimeSpan) -> ::windows::core::Result<()> {
        let this = self;
        unsafe {
            (::windows::core::Vtable::vtable(this).Seek)(
                ::windows::core::Vtable::as_raw(this),
                offset,
            )
            .ok()
        }
    }
    pub fn Stop(&self) -> ::windows::core::Result<()> {
        let this = self;
        unsafe {
            (::windows::core::Vtable::vtable(this).Stop)(::windows::core::Vtable::as_raw(this)).ok()
        }
    }
    pub fn Begin(&self) -> ::windows::core::Result<()> {
        let this = self;
        unsafe {
            (::windows::core::Vtable::vtable(this).Begin)(::windows::core::Vtable::as_raw(this))
                .ok()
        }
    }
    pub fn Pause(&self) -> ::windows::core::Result<()> {
        let this = self;
        unsafe {
            (::windows::core::Vtable::vtable(this).Pause)(::windows::core::Vtable::as_raw(this))
                .ok()
        }
    }
    pub fn Resume(&self) -> ::windows::core::Result<()> {
        let this = self;
        unsafe {
            (::windows::core::Vtable::vtable(this).Resume)(::windows::core::Vtable::as_raw(this))
                .ok()
        }
    }
    pub fn GetCurrentState(&self) -> ::windows::core::Result<ClockState> {
        let this = self;
        unsafe {
            let mut result__ = ::core::mem::MaybeUninit::zeroed();
            (::windows::core::Vtable::vtable(this).GetCurrentState)(
                ::windows::core::Vtable::as_raw(this),
                result__.as_mut_ptr(),
            )
            .from_abi::<ClockState>(result__)
        }
    }
    pub fn GetCurrentTime(&self) -> ::windows::core::Result<::windows::Foundation::TimeSpan> {
        let this = self;
        unsafe {
            let mut result__ = ::core::mem::MaybeUninit::zeroed();
            (::windows::core::Vtable::vtable(this).GetCurrentTime)(
                ::windows::core::Vtable::as_raw(this),
                result__.as_mut_ptr(),
            )
            .from_abi::<::windows::Foundation::TimeSpan>(result__)
        }
    }
    pub fn SeekAlignedToLastTick(
        &self,
        offset: ::windows::Foundation::TimeSpan,
    ) -> ::windows::core::Result<()> {
        let this = self;
        unsafe {
            (::windows::core::Vtable::vtable(this).SeekAlignedToLastTick)(
                ::windows::core::Vtable::as_raw(this),
                offset,
            )
            .ok()
        }
    }
    pub fn SkipToFill(&self) -> ::windows::core::Result<()> {
        let this = self;
        unsafe {
            (::windows::core::Vtable::vtable(this).SkipToFill)(::windows::core::Vtable::as_raw(
                this,
            ))
            .ok()
        }
    }
    pub fn TargetPropertyProperty() -> ::windows::core::Result<super::super::DependencyProperty> {
        Self::IStoryboardStatics(|this| unsafe {
            let mut result__ = ::core::mem::MaybeUninit::zeroed();
            (::windows::core::Vtable::vtable(this).TargetPropertyProperty)(
                ::windows::core::Vtable::as_raw(this),
                result__.as_mut_ptr(),
            )
            .from_abi::<super::super::DependencyProperty>(result__)
        })
    }
    pub fn GetTargetProperty<'a, P0>(
        element: P0,
    ) -> ::windows::core::Result<::windows::core::HSTRING>
    where
        P0: ::std::convert::Into<::windows::core::InParam<'a, Timeline>>,
    {
        Self::IStoryboardStatics(|this| unsafe {
            let mut result__ = ::core::mem::MaybeUninit::zeroed();
            (::windows::core::Vtable::vtable(this).GetTargetProperty)(
                ::windows::core::Vtable::as_raw(this),
                element.into().abi(),
                result__.as_mut_ptr(),
            )
            .from_abi::<::windows::core::HSTRING>(result__)
        })
    }
    pub fn SetTargetProperty<'a, P0>(
        element: P0,
        path: &::windows::core::HSTRING,
    ) -> ::windows::core::Result<()>
    where
        P0: ::std::convert::Into<::windows::core::InParam<'a, Timeline>>,
    {
        Self::IStoryboardStatics(|this| unsafe {
            (::windows::core::Vtable::vtable(this).SetTargetProperty)(
                ::windows::core::Vtable::as_raw(this),
                element.into().abi(),
                ::core::mem::transmute_copy(path),
            )
            .ok()
        })
    }
    pub fn TargetNameProperty() -> ::windows::core::Result<super::super::DependencyProperty> {
        Self::IStoryboardStatics(|this| unsafe {
            let mut result__ = ::core::mem::MaybeUninit::zeroed();
            (::windows::core::Vtable::vtable(this).TargetNameProperty)(
                ::windows::core::Vtable::as_raw(this),
                result__.as_mut_ptr(),
            )
            .from_abi::<super::super::DependencyProperty>(result__)
        })
    }
    pub fn GetTargetName<'a, P0>(element: P0) -> ::windows::core::Result<::windows::core::HSTRING>
    where
        P0: ::std::convert::Into<::windows::core::InParam<'a, Timeline>>,
    {
        Self::IStoryboardStatics(|this| unsafe {
            let mut result__ = ::core::mem::MaybeUninit::zeroed();
            (::windows::core::Vtable::vtable(this).GetTargetName)(
                ::windows::core::Vtable::as_raw(this),
                element.into().abi(),
                result__.as_mut_ptr(),
            )
            .from_abi::<::windows::core::HSTRING>(result__)
        })
    }
    pub fn SetTargetName<'a, P0>(
        element: P0,
        name: &::windows::core::HSTRING,
    ) -> ::windows::core::Result<()>
    where
        P0: ::std::convert::Into<::windows::core::InParam<'a, Timeline>>,
    {
        Self::IStoryboardStatics(|this| unsafe {
            (::windows::core::Vtable::vtable(this).SetTargetName)(
                ::windows::core::Vtable::as_raw(this),
                element.into().abi(),
                ::core::mem::transmute_copy(name),
            )
            .ok()
        })
    }
    pub fn SetTarget<'a, P0, P1>(timeline: P0, target: P1) -> ::windows::core::Result<()>
    where
        P0: ::std::convert::Into<::windows::core::InParam<'a, Timeline>>,
        P1: ::std::convert::Into<::windows::core::InParam<'a, super::super::DependencyObject>>,
    {
        Self::IStoryboardStatics(|this| unsafe {
            (::windows::core::Vtable::vtable(this).SetTarget)(
                ::windows::core::Vtable::as_raw(this),
                timeline.into().abi(),
                target.into().abi(),
            )
            .ok()
        })
    }
    pub fn AutoReverse(&self) -> ::windows::core::Result<bool> {
        let this = &::windows::core::Interface::cast::<ITimeline>(self)?;
        unsafe {
            let mut result__ = ::core::mem::MaybeUninit::zeroed();
            (::windows::core::Vtable::vtable(this).AutoReverse)(
                ::windows::core::Vtable::as_raw(this),
                result__.as_mut_ptr(),
            )
            .from_abi::<bool>(result__)
        }
    }
    pub fn SetAutoReverse(&self, value: bool) -> ::windows::core::Result<()> {
        let this = &::windows::core::Interface::cast::<ITimeline>(self)?;
        unsafe {
            (::windows::core::Vtable::vtable(this).SetAutoReverse)(
                ::windows::core::Vtable::as_raw(this),
                value,
            )
            .ok()
        }
    }
    pub fn BeginTime(
        &self,
    ) -> ::windows::core::Result<::windows::Foundation::IReference<::windows::Foundation::TimeSpan>>
    {
        let this = &::windows::core::Interface::cast::<ITimeline>(self)?;
        unsafe {
            let mut result__ = ::core::mem::MaybeUninit::zeroed();
            (::windows::core::Vtable::vtable(this).BeginTime)(
                ::windows::core::Vtable::as_raw(this),
                result__.as_mut_ptr(),
            )
            .from_abi::<::windows::Foundation::IReference<::windows::Foundation::TimeSpan>>(
                result__,
            )
        }
    }
    pub fn SetBeginTime<'a, P0, E0>(&self, value: P0) -> ::windows::core::Result<()>
    where
        P0: ::std::convert::TryInto<
            ::windows::core::InParam<
                'a,
                ::windows::Foundation::IReference<::windows::Foundation::TimeSpan>,
            >,
            Error = E0,
        >,
        E0: ::std::convert::Into<::windows::core::Error>,
    {
        let this = &::windows::core::Interface::cast::<ITimeline>(self)?;
        unsafe {
            (::windows::core::Vtable::vtable(this).SetBeginTime)(
                ::windows::core::Vtable::as_raw(this),
                value.try_into().map_err(|e| e.into())?.abi(),
            )
            .ok()
        }
    }
    pub fn Duration(&self) -> ::windows::core::Result<super::super::Duration> {
        let this = &::windows::core::Interface::cast::<ITimeline>(self)?;
        unsafe {
            let mut result__ = ::core::mem::MaybeUninit::zeroed();
            (::windows::core::Vtable::vtable(this).Duration)(
                ::windows::core::Vtable::as_raw(this),
                result__.as_mut_ptr(),
            )
            .from_abi::<super::super::Duration>(result__)
        }
    }
    pub fn SetDuration(&self, value: super::super::Duration) -> ::windows::core::Result<()> {
        let this = &::windows::core::Interface::cast::<ITimeline>(self)?;
        unsafe {
            (::windows::core::Vtable::vtable(this).SetDuration)(
                ::windows::core::Vtable::as_raw(this),
                value,
            )
            .ok()
        }
    }
    pub fn SpeedRatio(&self) -> ::windows::core::Result<f64> {
        let this = &::windows::core::Interface::cast::<ITimeline>(self)?;
        unsafe {
            let mut result__ = ::core::mem::MaybeUninit::zeroed();
            (::windows::core::Vtable::vtable(this).SpeedRatio)(
                ::windows::core::Vtable::as_raw(this),
                result__.as_mut_ptr(),
            )
            .from_abi::<f64>(result__)
        }
    }
    pub fn SetSpeedRatio(&self, value: f64) -> ::windows::core::Result<()> {
        let this = &::windows::core::Interface::cast::<ITimeline>(self)?;
        unsafe {
            (::windows::core::Vtable::vtable(this).SetSpeedRatio)(
                ::windows::core::Vtable::as_raw(this),
                value,
            )
            .ok()
        }
    }
    pub fn FillBehavior(&self) -> ::windows::core::Result<FillBehavior> {
        let this = &::windows::core::Interface::cast::<ITimeline>(self)?;
        unsafe {
            let mut result__ = ::core::mem::MaybeUninit::zeroed();
            (::windows::core::Vtable::vtable(this).FillBehavior)(
                ::windows::core::Vtable::as_raw(this),
                result__.as_mut_ptr(),
            )
            .from_abi::<FillBehavior>(result__)
        }
    }
    pub fn SetFillBehavior(&self, value: FillBehavior) -> ::windows::core::Result<()> {
        let this = &::windows::core::Interface::cast::<ITimeline>(self)?;
        unsafe {
            (::windows::core::Vtable::vtable(this).SetFillBehavior)(
                ::windows::core::Vtable::as_raw(this),
                value,
            )
            .ok()
        }
    }
    pub fn RepeatBehavior(&self) -> ::windows::core::Result<RepeatBehavior> {
        let this = &::windows::core::Interface::cast::<ITimeline>(self)?;
        unsafe {
            let mut result__ = ::core::mem::MaybeUninit::zeroed();
            (::windows::core::Vtable::vtable(this).RepeatBehavior)(
                ::windows::core::Vtable::as_raw(this),
                result__.as_mut_ptr(),
            )
            .from_abi::<RepeatBehavior>(result__)
        }
    }
    pub fn SetRepeatBehavior(&self, value: RepeatBehavior) -> ::windows::core::Result<()> {
        let this = &::windows::core::Interface::cast::<ITimeline>(self)?;
        unsafe {
            (::windows::core::Vtable::vtable(this).SetRepeatBehavior)(
                ::windows::core::Vtable::as_raw(this),
                value,
            )
            .ok()
        }
    }
    pub fn Completed(
        &self,
        handler: &::windows::Foundation::EventHandler<::windows::core::IInspectable>,
    ) -> ::windows::core::Result<::windows::Foundation::EventRegistrationToken> {
        let this = &::windows::core::Interface::cast::<ITimeline>(self)?;
        unsafe {
            let mut result__ = ::core::mem::MaybeUninit::zeroed();
            (::windows::core::Vtable::vtable(this).Completed)(
                ::windows::core::Vtable::as_raw(this),
                ::core::mem::transmute_copy(handler),
                result__.as_mut_ptr(),
            )
            .from_abi::<::windows::Foundation::EventRegistrationToken>(result__)
        }
    }
    pub fn RemoveCompleted(
        &self,
        token: ::windows::Foundation::EventRegistrationToken,
    ) -> ::windows::core::Result<()> {
        let this = &::windows::core::Interface::cast::<ITimeline>(self)?;
        unsafe {
            (::windows::core::Vtable::vtable(this).RemoveCompleted)(
                ::windows::core::Vtable::as_raw(this),
                token,
            )
            .ok()
        }
    }
    #[doc(hidden)]
    pub fn IStoryboardStatics<R, F: FnOnce(&IStoryboardStatics) -> ::windows::core::Result<R>>(
        callback: F,
    ) -> ::windows::core::Result<R> {
        static SHARED: ::windows::core::FactoryCache<Storyboard, IStoryboardStatics> =
            ::windows::core::FactoryCache::new();
        SHARED.call(callback)
    }
}
impl ::core::clone::Clone for Storyboard {
    fn clone(&self) -> Self {
        Self(self.0.clone())
    }
}
impl ::core::cmp::PartialEq for Storyboard {
    fn eq(&self, other: &Self) -> bool {
        self.0 == other.0
    }
}
impl ::core::cmp::Eq for Storyboard {}
impl ::core::fmt::Debug for Storyboard {
    fn fmt(&self, f: &mut ::core::fmt::Formatter<'_>) -> ::core::fmt::Result {
        f.debug_tuple("Storyboard").field(&self.0).finish()
    }
}
unsafe impl ::windows::core::RuntimeType for Storyboard {
    const SIGNATURE: ::windows::core::ConstBuffer = ::windows::core::ConstBuffer::from_slice(
        b"rc(Microsoft.UI.Xaml.Media.Animation.Storyboard;{04d41bb3-8721-519e-8e53-fb8b34920305})",
    );
    type DefaultType = ::core::option::Option<Self>;
    fn from_default(from: &Self::DefaultType) -> ::windows::core::Result<Self> {
        from.as_ref().cloned().ok_or(::windows::core::Error::OK)
    }
}
unsafe impl ::windows::core::Vtable for Storyboard {
    type Vtable = IStoryboard_Vtbl;
}
unsafe impl ::windows::core::Interface for Storyboard {
    const IID: ::windows::core::GUID = <IStoryboard as ::windows::core::Interface>::IID;
}
impl ::windows::core::RuntimeName for Storyboard {
    const NAME: &'static str = "Microsoft.UI.Xaml.Media.Animation.Storyboard";
}
::windows::core::interface_hierarchy!(
    Storyboard,
    ::windows::core::IUnknown,
    ::windows::core::IInspectable
);
impl ::core::convert::From<Storyboard> for Timeline {
    fn from(value: Storyboard) -> Self {
        ::core::convert::From::from(&value)
    }
}
impl ::core::convert::From<&Storyboard> for Timeline {
    fn from(value: &Storyboard) -> Self {
        ::windows::core::Interface::cast(value).unwrap()
    }
}
impl<'a> ::core::convert::From<&Storyboard> for ::windows::core::InParam<'a, Timeline> {
    fn from(value: &Storyboard) -> Self {
        ::windows::core::InParam::owned(value.into())
    }
}
impl ::core::convert::From<Storyboard> for super::super::DependencyObject {
    fn from(value: Storyboard) -> Self {
        ::core::convert::From::from(&value)
    }
}
impl ::core::convert::From<&Storyboard> for super::super::DependencyObject {
    fn from(value: &Storyboard) -> Self {
        ::windows::core::Interface::cast(value).unwrap()
    }
}
impl<'a> ::core::convert::From<&Storyboard>
    for ::windows::core::InParam<'a, super::super::DependencyObject>
{
    fn from(value: &Storyboard) -> Self {
        ::windows::core::InParam::owned(value.into())
    }
}
unsafe impl ::core::marker::Send for Storyboard {}
unsafe impl ::core::marker::Sync for Storyboard {}
#[doc = "*Required features: `\"UI_Xaml_Media_Animation\"`*"]
#[repr(transparent)]
pub struct SuppressNavigationTransitionInfo(::windows::core::IUnknown);
impl SuppressNavigationTransitionInfo {
    pub fn new() -> ::windows::core::Result<Self> {
        Self::IActivationFactory(|f| f.ActivateInstance::<Self>())
    }
    fn IActivationFactory<
        R,
        F: FnOnce(&::windows::core::IGenericFactory) -> ::windows::core::Result<R>,
    >(
        callback: F,
    ) -> ::windows::core::Result<R> {
        static SHARED: ::windows::core::FactoryCache<
            SuppressNavigationTransitionInfo,
            ::windows::core::IGenericFactory,
        > = ::windows::core::FactoryCache::new();
        SHARED.call(callback)
    }
    pub fn GetValue(
        &self,
        dp: &super::super::DependencyProperty,
    ) -> ::windows::core::Result<::windows::core::IInspectable> {
        let this = &::windows::core::Interface::cast::<super::super::IDependencyObject>(self)?;
        unsafe {
            let mut result__ = ::core::mem::MaybeUninit::zeroed();
            (::windows::core::Vtable::vtable(this).GetValue)(
                ::windows::core::Vtable::as_raw(this),
                ::core::mem::transmute_copy(dp),
                result__.as_mut_ptr(),
            )
            .from_abi::<::windows::core::IInspectable>(result__)
        }
    }
    pub fn SetValue<'a, P0>(
        &self,
        dp: &super::super::DependencyProperty,
        value: P0,
    ) -> ::windows::core::Result<()>
    where
        P0: ::std::convert::Into<::windows::core::InParam<'a, ::windows::core::IInspectable>>,
    {
        let this = &::windows::core::Interface::cast::<super::super::IDependencyObject>(self)?;
        unsafe {
            (::windows::core::Vtable::vtable(this).SetValue)(
                ::windows::core::Vtable::as_raw(this),
                ::core::mem::transmute_copy(dp),
                value.into().abi(),
            )
            .ok()
        }
    }
    pub fn ClearValue(&self, dp: &super::super::DependencyProperty) -> ::windows::core::Result<()> {
        let this = &::windows::core::Interface::cast::<super::super::IDependencyObject>(self)?;
        unsafe {
            (::windows::core::Vtable::vtable(this).ClearValue)(
                ::windows::core::Vtable::as_raw(this),
                ::core::mem::transmute_copy(dp),
            )
            .ok()
        }
    }
    pub fn ReadLocalValue(
        &self,
        dp: &super::super::DependencyProperty,
    ) -> ::windows::core::Result<::windows::core::IInspectable> {
        let this = &::windows::core::Interface::cast::<super::super::IDependencyObject>(self)?;
        unsafe {
            let mut result__ = ::core::mem::MaybeUninit::zeroed();
            (::windows::core::Vtable::vtable(this).ReadLocalValue)(
                ::windows::core::Vtable::as_raw(this),
                ::core::mem::transmute_copy(dp),
                result__.as_mut_ptr(),
            )
            .from_abi::<::windows::core::IInspectable>(result__)
        }
    }
    pub fn GetAnimationBaseValue(
        &self,
        dp: &super::super::DependencyProperty,
    ) -> ::windows::core::Result<::windows::core::IInspectable> {
        let this = &::windows::core::Interface::cast::<super::super::IDependencyObject>(self)?;
        unsafe {
            let mut result__ = ::core::mem::MaybeUninit::zeroed();
            (::windows::core::Vtable::vtable(this).GetAnimationBaseValue)(
                ::windows::core::Vtable::as_raw(this),
                ::core::mem::transmute_copy(dp),
                result__.as_mut_ptr(),
            )
            .from_abi::<::windows::core::IInspectable>(result__)
        }
    }
    pub fn RegisterPropertyChangedCallback(
        &self,
        dp: &super::super::DependencyProperty,
        callback: &super::super::DependencyPropertyChangedCallback,
    ) -> ::windows::core::Result<i64> {
        let this = &::windows::core::Interface::cast::<super::super::IDependencyObject>(self)?;
        unsafe {
            let mut result__ = ::core::mem::MaybeUninit::zeroed();
            (::windows::core::Vtable::vtable(this).RegisterPropertyChangedCallback)(
                ::windows::core::Vtable::as_raw(this),
                ::core::mem::transmute_copy(dp),
                ::core::mem::transmute_copy(callback),
                result__.as_mut_ptr(),
            )
            .from_abi::<i64>(result__)
        }
    }
    pub fn UnregisterPropertyChangedCallback(
        &self,
        dp: &super::super::DependencyProperty,
        token: i64,
    ) -> ::windows::core::Result<()> {
        let this = &::windows::core::Interface::cast::<super::super::IDependencyObject>(self)?;
        unsafe {
            (::windows::core::Vtable::vtable(this).UnregisterPropertyChangedCallback)(
                ::windows::core::Vtable::as_raw(this),
                ::core::mem::transmute_copy(dp),
                token,
            )
            .ok()
        }
    }
    pub fn Dispatcher(&self) -> ::windows::core::Result<::windows::UI::Core::CoreDispatcher> {
        let this = &::windows::core::Interface::cast::<super::super::IDependencyObject>(self)?;
        unsafe {
            let mut result__ = ::core::mem::MaybeUninit::zeroed();
            (::windows::core::Vtable::vtable(this).Dispatcher)(
                ::windows::core::Vtable::as_raw(this),
                result__.as_mut_ptr(),
            )
            .from_abi::<::windows::UI::Core::CoreDispatcher>(result__)
        }
    }
    #[doc = "*Required features: `\"UI_Dispatching\"`*"]
    #[cfg(feature = "UI_Dispatching")]
    pub fn DispatcherQueue(
        &self,
    ) -> ::windows::core::Result<super::super::super::Dispatching::DispatcherQueue> {
        let this = &::windows::core::Interface::cast::<super::super::IDependencyObject>(self)?;
        unsafe {
            let mut result__ = ::core::mem::MaybeUninit::zeroed();
            (::windows::core::Vtable::vtable(this).DispatcherQueue)(
                ::windows::core::Vtable::as_raw(this),
                result__.as_mut_ptr(),
            )
            .from_abi::<super::super::super::Dispatching::DispatcherQueue>(result__)
        }
    }
}
impl ::core::clone::Clone for SuppressNavigationTransitionInfo {
    fn clone(&self) -> Self {
        Self(self.0.clone())
    }
}
impl ::core::cmp::PartialEq for SuppressNavigationTransitionInfo {
    fn eq(&self, other: &Self) -> bool {
        self.0 == other.0
    }
}
impl ::core::cmp::Eq for SuppressNavigationTransitionInfo {}
impl ::core::fmt::Debug for SuppressNavigationTransitionInfo {
    fn fmt(&self, f: &mut ::core::fmt::Formatter<'_>) -> ::core::fmt::Result {
        f.debug_tuple("SuppressNavigationTransitionInfo").field(&self.0).finish()
    }
}
unsafe impl ::windows::core::RuntimeType for SuppressNavigationTransitionInfo {
    const SIGNATURE : ::windows::core::ConstBuffer = ::windows::core::ConstBuffer::from_slice ( b"rc(Microsoft.UI.Xaml.Media.Animation.SuppressNavigationTransitionInfo;{3ecd2bd1-9805-5f51-bb9e-051fea8dc355})" ) ;
    type DefaultType = ::core::option::Option<Self>;
    fn from_default(from: &Self::DefaultType) -> ::windows::core::Result<Self> {
        from.as_ref().cloned().ok_or(::windows::core::Error::OK)
    }
}
unsafe impl ::windows::core::Vtable for SuppressNavigationTransitionInfo {
    type Vtable = ISuppressNavigationTransitionInfo_Vtbl;
}
unsafe impl ::windows::core::Interface for SuppressNavigationTransitionInfo {
    const IID: ::windows::core::GUID =
        <ISuppressNavigationTransitionInfo as ::windows::core::Interface>::IID;
}
impl ::windows::core::RuntimeName for SuppressNavigationTransitionInfo {
    const NAME: &'static str = "Microsoft.UI.Xaml.Media.Animation.SuppressNavigationTransitionInfo";
}
::windows::core::interface_hierarchy!(
    SuppressNavigationTransitionInfo,
    ::windows::core::IUnknown,
    ::windows::core::IInspectable
);
impl ::core::convert::From<SuppressNavigationTransitionInfo> for NavigationTransitionInfo {
    fn from(value: SuppressNavigationTransitionInfo) -> Self {
        ::core::convert::From::from(&value)
    }
}
impl ::core::convert::From<&SuppressNavigationTransitionInfo> for NavigationTransitionInfo {
    fn from(value: &SuppressNavigationTransitionInfo) -> Self {
        ::windows::core::Interface::cast(value).unwrap()
    }
}
impl<'a> ::core::convert::From<&SuppressNavigationTransitionInfo>
    for ::windows::core::InParam<'a, NavigationTransitionInfo>
{
    fn from(value: &SuppressNavigationTransitionInfo) -> Self {
        ::windows::core::InParam::owned(value.into())
    }
}
impl ::core::convert::From<SuppressNavigationTransitionInfo> for super::super::DependencyObject {
    fn from(value: SuppressNavigationTransitionInfo) -> Self {
        ::core::convert::From::from(&value)
    }
}
impl ::core::convert::From<&SuppressNavigationTransitionInfo> for super::super::DependencyObject {
    fn from(value: &SuppressNavigationTransitionInfo) -> Self {
        ::windows::core::Interface::cast(value).unwrap()
    }
}
impl<'a> ::core::convert::From<&SuppressNavigationTransitionInfo>
    for ::windows::core::InParam<'a, super::super::DependencyObject>
{
    fn from(value: &SuppressNavigationTransitionInfo) -> Self {
        ::windows::core::InParam::owned(value.into())
    }
}
unsafe impl ::core::marker::Send for SuppressNavigationTransitionInfo {}
unsafe impl ::core::marker::Sync for SuppressNavigationTransitionInfo {}
#[doc = "*Required features: `\"UI_Xaml_Media_Animation\"`*"]
#[repr(transparent)]
pub struct SwipeBackThemeAnimation(::windows::core::IUnknown);
impl SwipeBackThemeAnimation {
    pub fn new() -> ::windows::core::Result<Self> {
        Self::IActivationFactory(|f| f.ActivateInstance::<Self>())
    }
    fn IActivationFactory<
        R,
        F: FnOnce(&::windows::core::IGenericFactory) -> ::windows::core::Result<R>,
    >(
        callback: F,
    ) -> ::windows::core::Result<R> {
        static SHARED: ::windows::core::FactoryCache<
            SwipeBackThemeAnimation,
            ::windows::core::IGenericFactory,
        > = ::windows::core::FactoryCache::new();
        SHARED.call(callback)
    }
    pub fn GetValue(
        &self,
        dp: &super::super::DependencyProperty,
    ) -> ::windows::core::Result<::windows::core::IInspectable> {
        let this = &::windows::core::Interface::cast::<super::super::IDependencyObject>(self)?;
        unsafe {
            let mut result__ = ::core::mem::MaybeUninit::zeroed();
            (::windows::core::Vtable::vtable(this).GetValue)(
                ::windows::core::Vtable::as_raw(this),
                ::core::mem::transmute_copy(dp),
                result__.as_mut_ptr(),
            )
            .from_abi::<::windows::core::IInspectable>(result__)
        }
    }
    pub fn SetValue<'a, P0>(
        &self,
        dp: &super::super::DependencyProperty,
        value: P0,
    ) -> ::windows::core::Result<()>
    where
        P0: ::std::convert::Into<::windows::core::InParam<'a, ::windows::core::IInspectable>>,
    {
        let this = &::windows::core::Interface::cast::<super::super::IDependencyObject>(self)?;
        unsafe {
            (::windows::core::Vtable::vtable(this).SetValue)(
                ::windows::core::Vtable::as_raw(this),
                ::core::mem::transmute_copy(dp),
                value.into().abi(),
            )
            .ok()
        }
    }
    pub fn ClearValue(&self, dp: &super::super::DependencyProperty) -> ::windows::core::Result<()> {
        let this = &::windows::core::Interface::cast::<super::super::IDependencyObject>(self)?;
        unsafe {
            (::windows::core::Vtable::vtable(this).ClearValue)(
                ::windows::core::Vtable::as_raw(this),
                ::core::mem::transmute_copy(dp),
            )
            .ok()
        }
    }
    pub fn ReadLocalValue(
        &self,
        dp: &super::super::DependencyProperty,
    ) -> ::windows::core::Result<::windows::core::IInspectable> {
        let this = &::windows::core::Interface::cast::<super::super::IDependencyObject>(self)?;
        unsafe {
            let mut result__ = ::core::mem::MaybeUninit::zeroed();
            (::windows::core::Vtable::vtable(this).ReadLocalValue)(
                ::windows::core::Vtable::as_raw(this),
                ::core::mem::transmute_copy(dp),
                result__.as_mut_ptr(),
            )
            .from_abi::<::windows::core::IInspectable>(result__)
        }
    }
    pub fn GetAnimationBaseValue(
        &self,
        dp: &super::super::DependencyProperty,
    ) -> ::windows::core::Result<::windows::core::IInspectable> {
        let this = &::windows::core::Interface::cast::<super::super::IDependencyObject>(self)?;
        unsafe {
            let mut result__ = ::core::mem::MaybeUninit::zeroed();
            (::windows::core::Vtable::vtable(this).GetAnimationBaseValue)(
                ::windows::core::Vtable::as_raw(this),
                ::core::mem::transmute_copy(dp),
                result__.as_mut_ptr(),
            )
            .from_abi::<::windows::core::IInspectable>(result__)
        }
    }
    pub fn RegisterPropertyChangedCallback(
        &self,
        dp: &super::super::DependencyProperty,
        callback: &super::super::DependencyPropertyChangedCallback,
    ) -> ::windows::core::Result<i64> {
        let this = &::windows::core::Interface::cast::<super::super::IDependencyObject>(self)?;
        unsafe {
            let mut result__ = ::core::mem::MaybeUninit::zeroed();
            (::windows::core::Vtable::vtable(this).RegisterPropertyChangedCallback)(
                ::windows::core::Vtable::as_raw(this),
                ::core::mem::transmute_copy(dp),
                ::core::mem::transmute_copy(callback),
                result__.as_mut_ptr(),
            )
            .from_abi::<i64>(result__)
        }
    }
    pub fn UnregisterPropertyChangedCallback(
        &self,
        dp: &super::super::DependencyProperty,
        token: i64,
    ) -> ::windows::core::Result<()> {
        let this = &::windows::core::Interface::cast::<super::super::IDependencyObject>(self)?;
        unsafe {
            (::windows::core::Vtable::vtable(this).UnregisterPropertyChangedCallback)(
                ::windows::core::Vtable::as_raw(this),
                ::core::mem::transmute_copy(dp),
                token,
            )
            .ok()
        }
    }
    pub fn Dispatcher(&self) -> ::windows::core::Result<::windows::UI::Core::CoreDispatcher> {
        let this = &::windows::core::Interface::cast::<super::super::IDependencyObject>(self)?;
        unsafe {
            let mut result__ = ::core::mem::MaybeUninit::zeroed();
            (::windows::core::Vtable::vtable(this).Dispatcher)(
                ::windows::core::Vtable::as_raw(this),
                result__.as_mut_ptr(),
            )
            .from_abi::<::windows::UI::Core::CoreDispatcher>(result__)
        }
    }
    #[doc = "*Required features: `\"UI_Dispatching\"`*"]
    #[cfg(feature = "UI_Dispatching")]
    pub fn DispatcherQueue(
        &self,
    ) -> ::windows::core::Result<super::super::super::Dispatching::DispatcherQueue> {
        let this = &::windows::core::Interface::cast::<super::super::IDependencyObject>(self)?;
        unsafe {
            let mut result__ = ::core::mem::MaybeUninit::zeroed();
            (::windows::core::Vtable::vtable(this).DispatcherQueue)(
                ::windows::core::Vtable::as_raw(this),
                result__.as_mut_ptr(),
            )
            .from_abi::<super::super::super::Dispatching::DispatcherQueue>(result__)
        }
    }
    pub fn TargetName(&self) -> ::windows::core::Result<::windows::core::HSTRING> {
        let this = self;
        unsafe {
            let mut result__ = ::core::mem::MaybeUninit::zeroed();
            (::windows::core::Vtable::vtable(this).TargetName)(
                ::windows::core::Vtable::as_raw(this),
                result__.as_mut_ptr(),
            )
            .from_abi::<::windows::core::HSTRING>(result__)
        }
    }
    pub fn SetTargetName(&self, value: &::windows::core::HSTRING) -> ::windows::core::Result<()> {
        let this = self;
        unsafe {
            (::windows::core::Vtable::vtable(this).SetTargetName)(
                ::windows::core::Vtable::as_raw(this),
                ::core::mem::transmute_copy(value),
            )
            .ok()
        }
    }
    pub fn FromHorizontalOffset(&self) -> ::windows::core::Result<f64> {
        let this = self;
        unsafe {
            let mut result__ = ::core::mem::MaybeUninit::zeroed();
            (::windows::core::Vtable::vtable(this).FromHorizontalOffset)(
                ::windows::core::Vtable::as_raw(this),
                result__.as_mut_ptr(),
            )
            .from_abi::<f64>(result__)
        }
    }
    pub fn SetFromHorizontalOffset(&self, value: f64) -> ::windows::core::Result<()> {
        let this = self;
        unsafe {
            (::windows::core::Vtable::vtable(this).SetFromHorizontalOffset)(
                ::windows::core::Vtable::as_raw(this),
                value,
            )
            .ok()
        }
    }
    pub fn FromVerticalOffset(&self) -> ::windows::core::Result<f64> {
        let this = self;
        unsafe {
            let mut result__ = ::core::mem::MaybeUninit::zeroed();
            (::windows::core::Vtable::vtable(this).FromVerticalOffset)(
                ::windows::core::Vtable::as_raw(this),
                result__.as_mut_ptr(),
            )
            .from_abi::<f64>(result__)
        }
    }
    pub fn SetFromVerticalOffset(&self, value: f64) -> ::windows::core::Result<()> {
        let this = self;
        unsafe {
            (::windows::core::Vtable::vtable(this).SetFromVerticalOffset)(
                ::windows::core::Vtable::as_raw(this),
                value,
            )
            .ok()
        }
    }
    pub fn TargetNameProperty() -> ::windows::core::Result<super::super::DependencyProperty> {
        Self::ISwipeBackThemeAnimationStatics(|this| unsafe {
            let mut result__ = ::core::mem::MaybeUninit::zeroed();
            (::windows::core::Vtable::vtable(this).TargetNameProperty)(
                ::windows::core::Vtable::as_raw(this),
                result__.as_mut_ptr(),
            )
            .from_abi::<super::super::DependencyProperty>(result__)
        })
    }
    pub fn FromHorizontalOffsetProperty(
    ) -> ::windows::core::Result<super::super::DependencyProperty> {
        Self::ISwipeBackThemeAnimationStatics(|this| unsafe {
            let mut result__ = ::core::mem::MaybeUninit::zeroed();
            (::windows::core::Vtable::vtable(this).FromHorizontalOffsetProperty)(
                ::windows::core::Vtable::as_raw(this),
                result__.as_mut_ptr(),
            )
            .from_abi::<super::super::DependencyProperty>(result__)
        })
    }
    pub fn FromVerticalOffsetProperty() -> ::windows::core::Result<super::super::DependencyProperty>
    {
        Self::ISwipeBackThemeAnimationStatics(|this| unsafe {
            let mut result__ = ::core::mem::MaybeUninit::zeroed();
            (::windows::core::Vtable::vtable(this).FromVerticalOffsetProperty)(
                ::windows::core::Vtable::as_raw(this),
                result__.as_mut_ptr(),
            )
            .from_abi::<super::super::DependencyProperty>(result__)
        })
    }
    pub fn AutoReverse(&self) -> ::windows::core::Result<bool> {
        let this = &::windows::core::Interface::cast::<ITimeline>(self)?;
        unsafe {
            let mut result__ = ::core::mem::MaybeUninit::zeroed();
            (::windows::core::Vtable::vtable(this).AutoReverse)(
                ::windows::core::Vtable::as_raw(this),
                result__.as_mut_ptr(),
            )
            .from_abi::<bool>(result__)
        }
    }
    pub fn SetAutoReverse(&self, value: bool) -> ::windows::core::Result<()> {
        let this = &::windows::core::Interface::cast::<ITimeline>(self)?;
        unsafe {
            (::windows::core::Vtable::vtable(this).SetAutoReverse)(
                ::windows::core::Vtable::as_raw(this),
                value,
            )
            .ok()
        }
    }
    pub fn BeginTime(
        &self,
    ) -> ::windows::core::Result<::windows::Foundation::IReference<::windows::Foundation::TimeSpan>>
    {
        let this = &::windows::core::Interface::cast::<ITimeline>(self)?;
        unsafe {
            let mut result__ = ::core::mem::MaybeUninit::zeroed();
            (::windows::core::Vtable::vtable(this).BeginTime)(
                ::windows::core::Vtable::as_raw(this),
                result__.as_mut_ptr(),
            )
            .from_abi::<::windows::Foundation::IReference<::windows::Foundation::TimeSpan>>(
                result__,
            )
        }
    }
    pub fn SetBeginTime<'a, P0, E0>(&self, value: P0) -> ::windows::core::Result<()>
    where
        P0: ::std::convert::TryInto<
            ::windows::core::InParam<
                'a,
                ::windows::Foundation::IReference<::windows::Foundation::TimeSpan>,
            >,
            Error = E0,
        >,
        E0: ::std::convert::Into<::windows::core::Error>,
    {
        let this = &::windows::core::Interface::cast::<ITimeline>(self)?;
        unsafe {
            (::windows::core::Vtable::vtable(this).SetBeginTime)(
                ::windows::core::Vtable::as_raw(this),
                value.try_into().map_err(|e| e.into())?.abi(),
            )
            .ok()
        }
    }
    pub fn Duration(&self) -> ::windows::core::Result<super::super::Duration> {
        let this = &::windows::core::Interface::cast::<ITimeline>(self)?;
        unsafe {
            let mut result__ = ::core::mem::MaybeUninit::zeroed();
            (::windows::core::Vtable::vtable(this).Duration)(
                ::windows::core::Vtable::as_raw(this),
                result__.as_mut_ptr(),
            )
            .from_abi::<super::super::Duration>(result__)
        }
    }
    pub fn SetDuration(&self, value: super::super::Duration) -> ::windows::core::Result<()> {
        let this = &::windows::core::Interface::cast::<ITimeline>(self)?;
        unsafe {
            (::windows::core::Vtable::vtable(this).SetDuration)(
                ::windows::core::Vtable::as_raw(this),
                value,
            )
            .ok()
        }
    }
    pub fn SpeedRatio(&self) -> ::windows::core::Result<f64> {
        let this = &::windows::core::Interface::cast::<ITimeline>(self)?;
        unsafe {
            let mut result__ = ::core::mem::MaybeUninit::zeroed();
            (::windows::core::Vtable::vtable(this).SpeedRatio)(
                ::windows::core::Vtable::as_raw(this),
                result__.as_mut_ptr(),
            )
            .from_abi::<f64>(result__)
        }
    }
    pub fn SetSpeedRatio(&self, value: f64) -> ::windows::core::Result<()> {
        let this = &::windows::core::Interface::cast::<ITimeline>(self)?;
        unsafe {
            (::windows::core::Vtable::vtable(this).SetSpeedRatio)(
                ::windows::core::Vtable::as_raw(this),
                value,
            )
            .ok()
        }
    }
    pub fn FillBehavior(&self) -> ::windows::core::Result<FillBehavior> {
        let this = &::windows::core::Interface::cast::<ITimeline>(self)?;
        unsafe {
            let mut result__ = ::core::mem::MaybeUninit::zeroed();
            (::windows::core::Vtable::vtable(this).FillBehavior)(
                ::windows::core::Vtable::as_raw(this),
                result__.as_mut_ptr(),
            )
            .from_abi::<FillBehavior>(result__)
        }
    }
    pub fn SetFillBehavior(&self, value: FillBehavior) -> ::windows::core::Result<()> {
        let this = &::windows::core::Interface::cast::<ITimeline>(self)?;
        unsafe {
            (::windows::core::Vtable::vtable(this).SetFillBehavior)(
                ::windows::core::Vtable::as_raw(this),
                value,
            )
            .ok()
        }
    }
    pub fn RepeatBehavior(&self) -> ::windows::core::Result<RepeatBehavior> {
        let this = &::windows::core::Interface::cast::<ITimeline>(self)?;
        unsafe {
            let mut result__ = ::core::mem::MaybeUninit::zeroed();
            (::windows::core::Vtable::vtable(this).RepeatBehavior)(
                ::windows::core::Vtable::as_raw(this),
                result__.as_mut_ptr(),
            )
            .from_abi::<RepeatBehavior>(result__)
        }
    }
    pub fn SetRepeatBehavior(&self, value: RepeatBehavior) -> ::windows::core::Result<()> {
        let this = &::windows::core::Interface::cast::<ITimeline>(self)?;
        unsafe {
            (::windows::core::Vtable::vtable(this).SetRepeatBehavior)(
                ::windows::core::Vtable::as_raw(this),
                value,
            )
            .ok()
        }
    }
    pub fn Completed(
        &self,
        handler: &::windows::Foundation::EventHandler<::windows::core::IInspectable>,
    ) -> ::windows::core::Result<::windows::Foundation::EventRegistrationToken> {
        let this = &::windows::core::Interface::cast::<ITimeline>(self)?;
        unsafe {
            let mut result__ = ::core::mem::MaybeUninit::zeroed();
            (::windows::core::Vtable::vtable(this).Completed)(
                ::windows::core::Vtable::as_raw(this),
                ::core::mem::transmute_copy(handler),
                result__.as_mut_ptr(),
            )
            .from_abi::<::windows::Foundation::EventRegistrationToken>(result__)
        }
    }
    pub fn RemoveCompleted(
        &self,
        token: ::windows::Foundation::EventRegistrationToken,
    ) -> ::windows::core::Result<()> {
        let this = &::windows::core::Interface::cast::<ITimeline>(self)?;
        unsafe {
            (::windows::core::Vtable::vtable(this).RemoveCompleted)(
                ::windows::core::Vtable::as_raw(this),
                token,
            )
            .ok()
        }
    }
    #[doc(hidden)]
    pub fn ISwipeBackThemeAnimationStatics<
        R,
        F: FnOnce(&ISwipeBackThemeAnimationStatics) -> ::windows::core::Result<R>,
    >(
        callback: F,
    ) -> ::windows::core::Result<R> {
        static SHARED: ::windows::core::FactoryCache<
            SwipeBackThemeAnimation,
            ISwipeBackThemeAnimationStatics,
        > = ::windows::core::FactoryCache::new();
        SHARED.call(callback)
    }
}
impl ::core::clone::Clone for SwipeBackThemeAnimation {
    fn clone(&self) -> Self {
        Self(self.0.clone())
    }
}
impl ::core::cmp::PartialEq for SwipeBackThemeAnimation {
    fn eq(&self, other: &Self) -> bool {
        self.0 == other.0
    }
}
impl ::core::cmp::Eq for SwipeBackThemeAnimation {}
impl ::core::fmt::Debug for SwipeBackThemeAnimation {
    fn fmt(&self, f: &mut ::core::fmt::Formatter<'_>) -> ::core::fmt::Result {
        f.debug_tuple("SwipeBackThemeAnimation").field(&self.0).finish()
    }
}
unsafe impl ::windows::core::RuntimeType for SwipeBackThemeAnimation {
    const SIGNATURE : ::windows::core::ConstBuffer = ::windows::core::ConstBuffer::from_slice ( b"rc(Microsoft.UI.Xaml.Media.Animation.SwipeBackThemeAnimation;{f095d058-bc9e-58ee-8877-e084723b4333})" ) ;
    type DefaultType = ::core::option::Option<Self>;
    fn from_default(from: &Self::DefaultType) -> ::windows::core::Result<Self> {
        from.as_ref().cloned().ok_or(::windows::core::Error::OK)
    }
}
unsafe impl ::windows::core::Vtable for SwipeBackThemeAnimation {
    type Vtable = ISwipeBackThemeAnimation_Vtbl;
}
unsafe impl ::windows::core::Interface for SwipeBackThemeAnimation {
    const IID: ::windows::core::GUID =
        <ISwipeBackThemeAnimation as ::windows::core::Interface>::IID;
}
impl ::windows::core::RuntimeName for SwipeBackThemeAnimation {
    const NAME: &'static str = "Microsoft.UI.Xaml.Media.Animation.SwipeBackThemeAnimation";
}
::windows::core::interface_hierarchy!(
    SwipeBackThemeAnimation,
    ::windows::core::IUnknown,
    ::windows::core::IInspectable
);
impl ::core::convert::From<SwipeBackThemeAnimation> for Timeline {
    fn from(value: SwipeBackThemeAnimation) -> Self {
        ::core::convert::From::from(&value)
    }
}
impl ::core::convert::From<&SwipeBackThemeAnimation> for Timeline {
    fn from(value: &SwipeBackThemeAnimation) -> Self {
        ::windows::core::Interface::cast(value).unwrap()
    }
}
impl<'a> ::core::convert::From<&SwipeBackThemeAnimation>
    for ::windows::core::InParam<'a, Timeline>
{
    fn from(value: &SwipeBackThemeAnimation) -> Self {
        ::windows::core::InParam::owned(value.into())
    }
}
impl ::core::convert::From<SwipeBackThemeAnimation> for super::super::DependencyObject {
    fn from(value: SwipeBackThemeAnimation) -> Self {
        ::core::convert::From::from(&value)
    }
}
impl ::core::convert::From<&SwipeBackThemeAnimation> for super::super::DependencyObject {
    fn from(value: &SwipeBackThemeAnimation) -> Self {
        ::windows::core::Interface::cast(value).unwrap()
    }
}
impl<'a> ::core::convert::From<&SwipeBackThemeAnimation>
    for ::windows::core::InParam<'a, super::super::DependencyObject>
{
    fn from(value: &SwipeBackThemeAnimation) -> Self {
        ::windows::core::InParam::owned(value.into())
    }
}
unsafe impl ::core::marker::Send for SwipeBackThemeAnimation {}
unsafe impl ::core::marker::Sync for SwipeBackThemeAnimation {}
#[doc = "*Required features: `\"UI_Xaml_Media_Animation\"`*"]
#[repr(transparent)]
pub struct SwipeHintThemeAnimation(::windows::core::IUnknown);
impl SwipeHintThemeAnimation {
    pub fn new() -> ::windows::core::Result<Self> {
        Self::IActivationFactory(|f| f.ActivateInstance::<Self>())
    }
    fn IActivationFactory<
        R,
        F: FnOnce(&::windows::core::IGenericFactory) -> ::windows::core::Result<R>,
    >(
        callback: F,
    ) -> ::windows::core::Result<R> {
        static SHARED: ::windows::core::FactoryCache<
            SwipeHintThemeAnimation,
            ::windows::core::IGenericFactory,
        > = ::windows::core::FactoryCache::new();
        SHARED.call(callback)
    }
    pub fn GetValue(
        &self,
        dp: &super::super::DependencyProperty,
    ) -> ::windows::core::Result<::windows::core::IInspectable> {
        let this = &::windows::core::Interface::cast::<super::super::IDependencyObject>(self)?;
        unsafe {
            let mut result__ = ::core::mem::MaybeUninit::zeroed();
            (::windows::core::Vtable::vtable(this).GetValue)(
                ::windows::core::Vtable::as_raw(this),
                ::core::mem::transmute_copy(dp),
                result__.as_mut_ptr(),
            )
            .from_abi::<::windows::core::IInspectable>(result__)
        }
    }
    pub fn SetValue<'a, P0>(
        &self,
        dp: &super::super::DependencyProperty,
        value: P0,
    ) -> ::windows::core::Result<()>
    where
        P0: ::std::convert::Into<::windows::core::InParam<'a, ::windows::core::IInspectable>>,
    {
        let this = &::windows::core::Interface::cast::<super::super::IDependencyObject>(self)?;
        unsafe {
            (::windows::core::Vtable::vtable(this).SetValue)(
                ::windows::core::Vtable::as_raw(this),
                ::core::mem::transmute_copy(dp),
                value.into().abi(),
            )
            .ok()
        }
    }
    pub fn ClearValue(&self, dp: &super::super::DependencyProperty) -> ::windows::core::Result<()> {
        let this = &::windows::core::Interface::cast::<super::super::IDependencyObject>(self)?;
        unsafe {
            (::windows::core::Vtable::vtable(this).ClearValue)(
                ::windows::core::Vtable::as_raw(this),
                ::core::mem::transmute_copy(dp),
            )
            .ok()
        }
    }
    pub fn ReadLocalValue(
        &self,
        dp: &super::super::DependencyProperty,
    ) -> ::windows::core::Result<::windows::core::IInspectable> {
        let this = &::windows::core::Interface::cast::<super::super::IDependencyObject>(self)?;
        unsafe {
            let mut result__ = ::core::mem::MaybeUninit::zeroed();
            (::windows::core::Vtable::vtable(this).ReadLocalValue)(
                ::windows::core::Vtable::as_raw(this),
                ::core::mem::transmute_copy(dp),
                result__.as_mut_ptr(),
            )
            .from_abi::<::windows::core::IInspectable>(result__)
        }
    }
    pub fn GetAnimationBaseValue(
        &self,
        dp: &super::super::DependencyProperty,
    ) -> ::windows::core::Result<::windows::core::IInspectable> {
        let this = &::windows::core::Interface::cast::<super::super::IDependencyObject>(self)?;
        unsafe {
            let mut result__ = ::core::mem::MaybeUninit::zeroed();
            (::windows::core::Vtable::vtable(this).GetAnimationBaseValue)(
                ::windows::core::Vtable::as_raw(this),
                ::core::mem::transmute_copy(dp),
                result__.as_mut_ptr(),
            )
            .from_abi::<::windows::core::IInspectable>(result__)
        }
    }
    pub fn RegisterPropertyChangedCallback(
        &self,
        dp: &super::super::DependencyProperty,
        callback: &super::super::DependencyPropertyChangedCallback,
    ) -> ::windows::core::Result<i64> {
        let this = &::windows::core::Interface::cast::<super::super::IDependencyObject>(self)?;
        unsafe {
            let mut result__ = ::core::mem::MaybeUninit::zeroed();
            (::windows::core::Vtable::vtable(this).RegisterPropertyChangedCallback)(
                ::windows::core::Vtable::as_raw(this),
                ::core::mem::transmute_copy(dp),
                ::core::mem::transmute_copy(callback),
                result__.as_mut_ptr(),
            )
            .from_abi::<i64>(result__)
        }
    }
    pub fn UnregisterPropertyChangedCallback(
        &self,
        dp: &super::super::DependencyProperty,
        token: i64,
    ) -> ::windows::core::Result<()> {
        let this = &::windows::core::Interface::cast::<super::super::IDependencyObject>(self)?;
        unsafe {
            (::windows::core::Vtable::vtable(this).UnregisterPropertyChangedCallback)(
                ::windows::core::Vtable::as_raw(this),
                ::core::mem::transmute_copy(dp),
                token,
            )
            .ok()
        }
    }
    pub fn Dispatcher(&self) -> ::windows::core::Result<::windows::UI::Core::CoreDispatcher> {
        let this = &::windows::core::Interface::cast::<super::super::IDependencyObject>(self)?;
        unsafe {
            let mut result__ = ::core::mem::MaybeUninit::zeroed();
            (::windows::core::Vtable::vtable(this).Dispatcher)(
                ::windows::core::Vtable::as_raw(this),
                result__.as_mut_ptr(),
            )
            .from_abi::<::windows::UI::Core::CoreDispatcher>(result__)
        }
    }
    #[doc = "*Required features: `\"UI_Dispatching\"`*"]
    #[cfg(feature = "UI_Dispatching")]
    pub fn DispatcherQueue(
        &self,
    ) -> ::windows::core::Result<super::super::super::Dispatching::DispatcherQueue> {
        let this = &::windows::core::Interface::cast::<super::super::IDependencyObject>(self)?;
        unsafe {
            let mut result__ = ::core::mem::MaybeUninit::zeroed();
            (::windows::core::Vtable::vtable(this).DispatcherQueue)(
                ::windows::core::Vtable::as_raw(this),
                result__.as_mut_ptr(),
            )
            .from_abi::<super::super::super::Dispatching::DispatcherQueue>(result__)
        }
    }
    pub fn TargetName(&self) -> ::windows::core::Result<::windows::core::HSTRING> {
        let this = self;
        unsafe {
            let mut result__ = ::core::mem::MaybeUninit::zeroed();
            (::windows::core::Vtable::vtable(this).TargetName)(
                ::windows::core::Vtable::as_raw(this),
                result__.as_mut_ptr(),
            )
            .from_abi::<::windows::core::HSTRING>(result__)
        }
    }
    pub fn SetTargetName(&self, value: &::windows::core::HSTRING) -> ::windows::core::Result<()> {
        let this = self;
        unsafe {
            (::windows::core::Vtable::vtable(this).SetTargetName)(
                ::windows::core::Vtable::as_raw(this),
                ::core::mem::transmute_copy(value),
            )
            .ok()
        }
    }
    pub fn ToHorizontalOffset(&self) -> ::windows::core::Result<f64> {
        let this = self;
        unsafe {
            let mut result__ = ::core::mem::MaybeUninit::zeroed();
            (::windows::core::Vtable::vtable(this).ToHorizontalOffset)(
                ::windows::core::Vtable::as_raw(this),
                result__.as_mut_ptr(),
            )
            .from_abi::<f64>(result__)
        }
    }
    pub fn SetToHorizontalOffset(&self, value: f64) -> ::windows::core::Result<()> {
        let this = self;
        unsafe {
            (::windows::core::Vtable::vtable(this).SetToHorizontalOffset)(
                ::windows::core::Vtable::as_raw(this),
                value,
            )
            .ok()
        }
    }
    pub fn ToVerticalOffset(&self) -> ::windows::core::Result<f64> {
        let this = self;
        unsafe {
            let mut result__ = ::core::mem::MaybeUninit::zeroed();
            (::windows::core::Vtable::vtable(this).ToVerticalOffset)(
                ::windows::core::Vtable::as_raw(this),
                result__.as_mut_ptr(),
            )
            .from_abi::<f64>(result__)
        }
    }
    pub fn SetToVerticalOffset(&self, value: f64) -> ::windows::core::Result<()> {
        let this = self;
        unsafe {
            (::windows::core::Vtable::vtable(this).SetToVerticalOffset)(
                ::windows::core::Vtable::as_raw(this),
                value,
            )
            .ok()
        }
    }
    pub fn TargetNameProperty() -> ::windows::core::Result<super::super::DependencyProperty> {
        Self::ISwipeHintThemeAnimationStatics(|this| unsafe {
            let mut result__ = ::core::mem::MaybeUninit::zeroed();
            (::windows::core::Vtable::vtable(this).TargetNameProperty)(
                ::windows::core::Vtable::as_raw(this),
                result__.as_mut_ptr(),
            )
            .from_abi::<super::super::DependencyProperty>(result__)
        })
    }
    pub fn ToHorizontalOffsetProperty() -> ::windows::core::Result<super::super::DependencyProperty>
    {
        Self::ISwipeHintThemeAnimationStatics(|this| unsafe {
            let mut result__ = ::core::mem::MaybeUninit::zeroed();
            (::windows::core::Vtable::vtable(this).ToHorizontalOffsetProperty)(
                ::windows::core::Vtable::as_raw(this),
                result__.as_mut_ptr(),
            )
            .from_abi::<super::super::DependencyProperty>(result__)
        })
    }
    pub fn ToVerticalOffsetProperty() -> ::windows::core::Result<super::super::DependencyProperty> {
        Self::ISwipeHintThemeAnimationStatics(|this| unsafe {
            let mut result__ = ::core::mem::MaybeUninit::zeroed();
            (::windows::core::Vtable::vtable(this).ToVerticalOffsetProperty)(
                ::windows::core::Vtable::as_raw(this),
                result__.as_mut_ptr(),
            )
            .from_abi::<super::super::DependencyProperty>(result__)
        })
    }
    pub fn AutoReverse(&self) -> ::windows::core::Result<bool> {
        let this = &::windows::core::Interface::cast::<ITimeline>(self)?;
        unsafe {
            let mut result__ = ::core::mem::MaybeUninit::zeroed();
            (::windows::core::Vtable::vtable(this).AutoReverse)(
                ::windows::core::Vtable::as_raw(this),
                result__.as_mut_ptr(),
            )
            .from_abi::<bool>(result__)
        }
    }
    pub fn SetAutoReverse(&self, value: bool) -> ::windows::core::Result<()> {
        let this = &::windows::core::Interface::cast::<ITimeline>(self)?;
        unsafe {
            (::windows::core::Vtable::vtable(this).SetAutoReverse)(
                ::windows::core::Vtable::as_raw(this),
                value,
            )
            .ok()
        }
    }
    pub fn BeginTime(
        &self,
    ) -> ::windows::core::Result<::windows::Foundation::IReference<::windows::Foundation::TimeSpan>>
    {
        let this = &::windows::core::Interface::cast::<ITimeline>(self)?;
        unsafe {
            let mut result__ = ::core::mem::MaybeUninit::zeroed();
            (::windows::core::Vtable::vtable(this).BeginTime)(
                ::windows::core::Vtable::as_raw(this),
                result__.as_mut_ptr(),
            )
            .from_abi::<::windows::Foundation::IReference<::windows::Foundation::TimeSpan>>(
                result__,
            )
        }
    }
    pub fn SetBeginTime<'a, P0, E0>(&self, value: P0) -> ::windows::core::Result<()>
    where
        P0: ::std::convert::TryInto<
            ::windows::core::InParam<
                'a,
                ::windows::Foundation::IReference<::windows::Foundation::TimeSpan>,
            >,
            Error = E0,
        >,
        E0: ::std::convert::Into<::windows::core::Error>,
    {
        let this = &::windows::core::Interface::cast::<ITimeline>(self)?;
        unsafe {
            (::windows::core::Vtable::vtable(this).SetBeginTime)(
                ::windows::core::Vtable::as_raw(this),
                value.try_into().map_err(|e| e.into())?.abi(),
            )
            .ok()
        }
    }
    pub fn Duration(&self) -> ::windows::core::Result<super::super::Duration> {
        let this = &::windows::core::Interface::cast::<ITimeline>(self)?;
        unsafe {
            let mut result__ = ::core::mem::MaybeUninit::zeroed();
            (::windows::core::Vtable::vtable(this).Duration)(
                ::windows::core::Vtable::as_raw(this),
                result__.as_mut_ptr(),
            )
            .from_abi::<super::super::Duration>(result__)
        }
    }
    pub fn SetDuration(&self, value: super::super::Duration) -> ::windows::core::Result<()> {
        let this = &::windows::core::Interface::cast::<ITimeline>(self)?;
        unsafe {
            (::windows::core::Vtable::vtable(this).SetDuration)(
                ::windows::core::Vtable::as_raw(this),
                value,
            )
            .ok()
        }
    }
    pub fn SpeedRatio(&self) -> ::windows::core::Result<f64> {
        let this = &::windows::core::Interface::cast::<ITimeline>(self)?;
        unsafe {
            let mut result__ = ::core::mem::MaybeUninit::zeroed();
            (::windows::core::Vtable::vtable(this).SpeedRatio)(
                ::windows::core::Vtable::as_raw(this),
                result__.as_mut_ptr(),
            )
            .from_abi::<f64>(result__)
        }
    }
    pub fn SetSpeedRatio(&self, value: f64) -> ::windows::core::Result<()> {
        let this = &::windows::core::Interface::cast::<ITimeline>(self)?;
        unsafe {
            (::windows::core::Vtable::vtable(this).SetSpeedRatio)(
                ::windows::core::Vtable::as_raw(this),
                value,
            )
            .ok()
        }
    }
    pub fn FillBehavior(&self) -> ::windows::core::Result<FillBehavior> {
        let this = &::windows::core::Interface::cast::<ITimeline>(self)?;
        unsafe {
            let mut result__ = ::core::mem::MaybeUninit::zeroed();
            (::windows::core::Vtable::vtable(this).FillBehavior)(
                ::windows::core::Vtable::as_raw(this),
                result__.as_mut_ptr(),
            )
            .from_abi::<FillBehavior>(result__)
        }
    }
    pub fn SetFillBehavior(&self, value: FillBehavior) -> ::windows::core::Result<()> {
        let this = &::windows::core::Interface::cast::<ITimeline>(self)?;
        unsafe {
            (::windows::core::Vtable::vtable(this).SetFillBehavior)(
                ::windows::core::Vtable::as_raw(this),
                value,
            )
            .ok()
        }
    }
    pub fn RepeatBehavior(&self) -> ::windows::core::Result<RepeatBehavior> {
        let this = &::windows::core::Interface::cast::<ITimeline>(self)?;
        unsafe {
            let mut result__ = ::core::mem::MaybeUninit::zeroed();
            (::windows::core::Vtable::vtable(this).RepeatBehavior)(
                ::windows::core::Vtable::as_raw(this),
                result__.as_mut_ptr(),
            )
            .from_abi::<RepeatBehavior>(result__)
        }
    }
    pub fn SetRepeatBehavior(&self, value: RepeatBehavior) -> ::windows::core::Result<()> {
        let this = &::windows::core::Interface::cast::<ITimeline>(self)?;
        unsafe {
            (::windows::core::Vtable::vtable(this).SetRepeatBehavior)(
                ::windows::core::Vtable::as_raw(this),
                value,
            )
            .ok()
        }
    }
    pub fn Completed(
        &self,
        handler: &::windows::Foundation::EventHandler<::windows::core::IInspectable>,
    ) -> ::windows::core::Result<::windows::Foundation::EventRegistrationToken> {
        let this = &::windows::core::Interface::cast::<ITimeline>(self)?;
        unsafe {
            let mut result__ = ::core::mem::MaybeUninit::zeroed();
            (::windows::core::Vtable::vtable(this).Completed)(
                ::windows::core::Vtable::as_raw(this),
                ::core::mem::transmute_copy(handler),
                result__.as_mut_ptr(),
            )
            .from_abi::<::windows::Foundation::EventRegistrationToken>(result__)
        }
    }
    pub fn RemoveCompleted(
        &self,
        token: ::windows::Foundation::EventRegistrationToken,
    ) -> ::windows::core::Result<()> {
        let this = &::windows::core::Interface::cast::<ITimeline>(self)?;
        unsafe {
            (::windows::core::Vtable::vtable(this).RemoveCompleted)(
                ::windows::core::Vtable::as_raw(this),
                token,
            )
            .ok()
        }
    }
    #[doc(hidden)]
    pub fn ISwipeHintThemeAnimationStatics<
        R,
        F: FnOnce(&ISwipeHintThemeAnimationStatics) -> ::windows::core::Result<R>,
    >(
        callback: F,
    ) -> ::windows::core::Result<R> {
        static SHARED: ::windows::core::FactoryCache<
            SwipeHintThemeAnimation,
            ISwipeHintThemeAnimationStatics,
        > = ::windows::core::FactoryCache::new();
        SHARED.call(callback)
    }
}
impl ::core::clone::Clone for SwipeHintThemeAnimation {
    fn clone(&self) -> Self {
        Self(self.0.clone())
    }
}
impl ::core::cmp::PartialEq for SwipeHintThemeAnimation {
    fn eq(&self, other: &Self) -> bool {
        self.0 == other.0
    }
}
impl ::core::cmp::Eq for SwipeHintThemeAnimation {}
impl ::core::fmt::Debug for SwipeHintThemeAnimation {
    fn fmt(&self, f: &mut ::core::fmt::Formatter<'_>) -> ::core::fmt::Result {
        f.debug_tuple("SwipeHintThemeAnimation").field(&self.0).finish()
    }
}
unsafe impl ::windows::core::RuntimeType for SwipeHintThemeAnimation {
    const SIGNATURE : ::windows::core::ConstBuffer = ::windows::core::ConstBuffer::from_slice ( b"rc(Microsoft.UI.Xaml.Media.Animation.SwipeHintThemeAnimation;{09de03d7-4b8a-55e1-afad-5f60598733ea})" ) ;
    type DefaultType = ::core::option::Option<Self>;
    fn from_default(from: &Self::DefaultType) -> ::windows::core::Result<Self> {
        from.as_ref().cloned().ok_or(::windows::core::Error::OK)
    }
}
unsafe impl ::windows::core::Vtable for SwipeHintThemeAnimation {
    type Vtable = ISwipeHintThemeAnimation_Vtbl;
}
unsafe impl ::windows::core::Interface for SwipeHintThemeAnimation {
    const IID: ::windows::core::GUID =
        <ISwipeHintThemeAnimation as ::windows::core::Interface>::IID;
}
impl ::windows::core::RuntimeName for SwipeHintThemeAnimation {
    const NAME: &'static str = "Microsoft.UI.Xaml.Media.Animation.SwipeHintThemeAnimation";
}
::windows::core::interface_hierarchy!(
    SwipeHintThemeAnimation,
    ::windows::core::IUnknown,
    ::windows::core::IInspectable
);
impl ::core::convert::From<SwipeHintThemeAnimation> for Timeline {
    fn from(value: SwipeHintThemeAnimation) -> Self {
        ::core::convert::From::from(&value)
    }
}
impl ::core::convert::From<&SwipeHintThemeAnimation> for Timeline {
    fn from(value: &SwipeHintThemeAnimation) -> Self {
        ::windows::core::Interface::cast(value).unwrap()
    }
}
impl<'a> ::core::convert::From<&SwipeHintThemeAnimation>
    for ::windows::core::InParam<'a, Timeline>
{
    fn from(value: &SwipeHintThemeAnimation) -> Self {
        ::windows::core::InParam::owned(value.into())
    }
}
impl ::core::convert::From<SwipeHintThemeAnimation> for super::super::DependencyObject {
    fn from(value: SwipeHintThemeAnimation) -> Self {
        ::core::convert::From::from(&value)
    }
}
impl ::core::convert::From<&SwipeHintThemeAnimation> for super::super::DependencyObject {
    fn from(value: &SwipeHintThemeAnimation) -> Self {
        ::windows::core::Interface::cast(value).unwrap()
    }
}
impl<'a> ::core::convert::From<&SwipeHintThemeAnimation>
    for ::windows::core::InParam<'a, super::super::DependencyObject>
{
    fn from(value: &SwipeHintThemeAnimation) -> Self {
        ::windows::core::InParam::owned(value.into())
    }
}
unsafe impl ::core::marker::Send for SwipeHintThemeAnimation {}
unsafe impl ::core::marker::Sync for SwipeHintThemeAnimation {}
#[doc = "*Required features: `\"UI_Xaml_Media_Animation\"`*"]
#[repr(transparent)]
pub struct Timeline(::windows::core::IUnknown);
impl Timeline {
    pub fn GetValue(
        &self,
        dp: &super::super::DependencyProperty,
    ) -> ::windows::core::Result<::windows::core::IInspectable> {
        let this = &::windows::core::Interface::cast::<super::super::IDependencyObject>(self)?;
        unsafe {
            let mut result__ = ::core::mem::MaybeUninit::zeroed();
            (::windows::core::Vtable::vtable(this).GetValue)(
                ::windows::core::Vtable::as_raw(this),
                ::core::mem::transmute_copy(dp),
                result__.as_mut_ptr(),
            )
            .from_abi::<::windows::core::IInspectable>(result__)
        }
    }
    pub fn SetValue<'a, P0>(
        &self,
        dp: &super::super::DependencyProperty,
        value: P0,
    ) -> ::windows::core::Result<()>
    where
        P0: ::std::convert::Into<::windows::core::InParam<'a, ::windows::core::IInspectable>>,
    {
        let this = &::windows::core::Interface::cast::<super::super::IDependencyObject>(self)?;
        unsafe {
            (::windows::core::Vtable::vtable(this).SetValue)(
                ::windows::core::Vtable::as_raw(this),
                ::core::mem::transmute_copy(dp),
                value.into().abi(),
            )
            .ok()
        }
    }
    pub fn ClearValue(&self, dp: &super::super::DependencyProperty) -> ::windows::core::Result<()> {
        let this = &::windows::core::Interface::cast::<super::super::IDependencyObject>(self)?;
        unsafe {
            (::windows::core::Vtable::vtable(this).ClearValue)(
                ::windows::core::Vtable::as_raw(this),
                ::core::mem::transmute_copy(dp),
            )
            .ok()
        }
    }
    pub fn ReadLocalValue(
        &self,
        dp: &super::super::DependencyProperty,
    ) -> ::windows::core::Result<::windows::core::IInspectable> {
        let this = &::windows::core::Interface::cast::<super::super::IDependencyObject>(self)?;
        unsafe {
            let mut result__ = ::core::mem::MaybeUninit::zeroed();
            (::windows::core::Vtable::vtable(this).ReadLocalValue)(
                ::windows::core::Vtable::as_raw(this),
                ::core::mem::transmute_copy(dp),
                result__.as_mut_ptr(),
            )
            .from_abi::<::windows::core::IInspectable>(result__)
        }
    }
    pub fn GetAnimationBaseValue(
        &self,
        dp: &super::super::DependencyProperty,
    ) -> ::windows::core::Result<::windows::core::IInspectable> {
        let this = &::windows::core::Interface::cast::<super::super::IDependencyObject>(self)?;
        unsafe {
            let mut result__ = ::core::mem::MaybeUninit::zeroed();
            (::windows::core::Vtable::vtable(this).GetAnimationBaseValue)(
                ::windows::core::Vtable::as_raw(this),
                ::core::mem::transmute_copy(dp),
                result__.as_mut_ptr(),
            )
            .from_abi::<::windows::core::IInspectable>(result__)
        }
    }
    pub fn RegisterPropertyChangedCallback(
        &self,
        dp: &super::super::DependencyProperty,
        callback: &super::super::DependencyPropertyChangedCallback,
    ) -> ::windows::core::Result<i64> {
        let this = &::windows::core::Interface::cast::<super::super::IDependencyObject>(self)?;
        unsafe {
            let mut result__ = ::core::mem::MaybeUninit::zeroed();
            (::windows::core::Vtable::vtable(this).RegisterPropertyChangedCallback)(
                ::windows::core::Vtable::as_raw(this),
                ::core::mem::transmute_copy(dp),
                ::core::mem::transmute_copy(callback),
                result__.as_mut_ptr(),
            )
            .from_abi::<i64>(result__)
        }
    }
    pub fn UnregisterPropertyChangedCallback(
        &self,
        dp: &super::super::DependencyProperty,
        token: i64,
    ) -> ::windows::core::Result<()> {
        let this = &::windows::core::Interface::cast::<super::super::IDependencyObject>(self)?;
        unsafe {
            (::windows::core::Vtable::vtable(this).UnregisterPropertyChangedCallback)(
                ::windows::core::Vtable::as_raw(this),
                ::core::mem::transmute_copy(dp),
                token,
            )
            .ok()
        }
    }
    pub fn Dispatcher(&self) -> ::windows::core::Result<::windows::UI::Core::CoreDispatcher> {
        let this = &::windows::core::Interface::cast::<super::super::IDependencyObject>(self)?;
        unsafe {
            let mut result__ = ::core::mem::MaybeUninit::zeroed();
            (::windows::core::Vtable::vtable(this).Dispatcher)(
                ::windows::core::Vtable::as_raw(this),
                result__.as_mut_ptr(),
            )
            .from_abi::<::windows::UI::Core::CoreDispatcher>(result__)
        }
    }
    #[doc = "*Required features: `\"UI_Dispatching\"`*"]
    #[cfg(feature = "UI_Dispatching")]
    pub fn DispatcherQueue(
        &self,
    ) -> ::windows::core::Result<super::super::super::Dispatching::DispatcherQueue> {
        let this = &::windows::core::Interface::cast::<super::super::IDependencyObject>(self)?;
        unsafe {
            let mut result__ = ::core::mem::MaybeUninit::zeroed();
            (::windows::core::Vtable::vtable(this).DispatcherQueue)(
                ::windows::core::Vtable::as_raw(this),
                result__.as_mut_ptr(),
            )
            .from_abi::<super::super::super::Dispatching::DispatcherQueue>(result__)
        }
    }
    pub fn AutoReverse(&self) -> ::windows::core::Result<bool> {
        let this = self;
        unsafe {
            let mut result__ = ::core::mem::MaybeUninit::zeroed();
            (::windows::core::Vtable::vtable(this).AutoReverse)(
                ::windows::core::Vtable::as_raw(this),
                result__.as_mut_ptr(),
            )
            .from_abi::<bool>(result__)
        }
    }
    pub fn SetAutoReverse(&self, value: bool) -> ::windows::core::Result<()> {
        let this = self;
        unsafe {
            (::windows::core::Vtable::vtable(this).SetAutoReverse)(
                ::windows::core::Vtable::as_raw(this),
                value,
            )
            .ok()
        }
    }
    pub fn BeginTime(
        &self,
    ) -> ::windows::core::Result<::windows::Foundation::IReference<::windows::Foundation::TimeSpan>>
    {
        let this = self;
        unsafe {
            let mut result__ = ::core::mem::MaybeUninit::zeroed();
            (::windows::core::Vtable::vtable(this).BeginTime)(
                ::windows::core::Vtable::as_raw(this),
                result__.as_mut_ptr(),
            )
            .from_abi::<::windows::Foundation::IReference<::windows::Foundation::TimeSpan>>(
                result__,
            )
        }
    }
    pub fn SetBeginTime<'a, P0, E0>(&self, value: P0) -> ::windows::core::Result<()>
    where
        P0: ::std::convert::TryInto<
            ::windows::core::InParam<
                'a,
                ::windows::Foundation::IReference<::windows::Foundation::TimeSpan>,
            >,
            Error = E0,
        >,
        E0: ::std::convert::Into<::windows::core::Error>,
    {
        let this = self;
        unsafe {
            (::windows::core::Vtable::vtable(this).SetBeginTime)(
                ::windows::core::Vtable::as_raw(this),
                value.try_into().map_err(|e| e.into())?.abi(),
            )
            .ok()
        }
    }
    pub fn Duration(&self) -> ::windows::core::Result<super::super::Duration> {
        let this = self;
        unsafe {
            let mut result__ = ::core::mem::MaybeUninit::zeroed();
            (::windows::core::Vtable::vtable(this).Duration)(
                ::windows::core::Vtable::as_raw(this),
                result__.as_mut_ptr(),
            )
            .from_abi::<super::super::Duration>(result__)
        }
    }
    pub fn SetDuration(&self, value: super::super::Duration) -> ::windows::core::Result<()> {
        let this = self;
        unsafe {
            (::windows::core::Vtable::vtable(this).SetDuration)(
                ::windows::core::Vtable::as_raw(this),
                value,
            )
            .ok()
        }
    }
    pub fn SpeedRatio(&self) -> ::windows::core::Result<f64> {
        let this = self;
        unsafe {
            let mut result__ = ::core::mem::MaybeUninit::zeroed();
            (::windows::core::Vtable::vtable(this).SpeedRatio)(
                ::windows::core::Vtable::as_raw(this),
                result__.as_mut_ptr(),
            )
            .from_abi::<f64>(result__)
        }
    }
    pub fn SetSpeedRatio(&self, value: f64) -> ::windows::core::Result<()> {
        let this = self;
        unsafe {
            (::windows::core::Vtable::vtable(this).SetSpeedRatio)(
                ::windows::core::Vtable::as_raw(this),
                value,
            )
            .ok()
        }
    }
    pub fn FillBehavior(&self) -> ::windows::core::Result<FillBehavior> {
        let this = self;
        unsafe {
            let mut result__ = ::core::mem::MaybeUninit::zeroed();
            (::windows::core::Vtable::vtable(this).FillBehavior)(
                ::windows::core::Vtable::as_raw(this),
                result__.as_mut_ptr(),
            )
            .from_abi::<FillBehavior>(result__)
        }
    }
    pub fn SetFillBehavior(&self, value: FillBehavior) -> ::windows::core::Result<()> {
        let this = self;
        unsafe {
            (::windows::core::Vtable::vtable(this).SetFillBehavior)(
                ::windows::core::Vtable::as_raw(this),
                value,
            )
            .ok()
        }
    }
    pub fn RepeatBehavior(&self) -> ::windows::core::Result<RepeatBehavior> {
        let this = self;
        unsafe {
            let mut result__ = ::core::mem::MaybeUninit::zeroed();
            (::windows::core::Vtable::vtable(this).RepeatBehavior)(
                ::windows::core::Vtable::as_raw(this),
                result__.as_mut_ptr(),
            )
            .from_abi::<RepeatBehavior>(result__)
        }
    }
    pub fn SetRepeatBehavior(&self, value: RepeatBehavior) -> ::windows::core::Result<()> {
        let this = self;
        unsafe {
            (::windows::core::Vtable::vtable(this).SetRepeatBehavior)(
                ::windows::core::Vtable::as_raw(this),
                value,
            )
            .ok()
        }
    }
    pub fn Completed(
        &self,
        handler: &::windows::Foundation::EventHandler<::windows::core::IInspectable>,
    ) -> ::windows::core::Result<::windows::Foundation::EventRegistrationToken> {
        let this = self;
        unsafe {
            let mut result__ = ::core::mem::MaybeUninit::zeroed();
            (::windows::core::Vtable::vtable(this).Completed)(
                ::windows::core::Vtable::as_raw(this),
                ::core::mem::transmute_copy(handler),
                result__.as_mut_ptr(),
            )
            .from_abi::<::windows::Foundation::EventRegistrationToken>(result__)
        }
    }
    pub fn RemoveCompleted(
        &self,
        token: ::windows::Foundation::EventRegistrationToken,
    ) -> ::windows::core::Result<()> {
        let this = self;
        unsafe {
            (::windows::core::Vtable::vtable(this).RemoveCompleted)(
                ::windows::core::Vtable::as_raw(this),
                token,
            )
            .ok()
        }
    }
    pub fn AllowDependentAnimations() -> ::windows::core::Result<bool> {
        Self::ITimelineStatics(|this| unsafe {
            let mut result__ = ::core::mem::MaybeUninit::zeroed();
            (::windows::core::Vtable::vtable(this).AllowDependentAnimations)(
                ::windows::core::Vtable::as_raw(this),
                result__.as_mut_ptr(),
            )
            .from_abi::<bool>(result__)
        })
    }
    pub fn SetAllowDependentAnimations(value: bool) -> ::windows::core::Result<()> {
        Self::ITimelineStatics(|this| unsafe {
            (::windows::core::Vtable::vtable(this).SetAllowDependentAnimations)(
                ::windows::core::Vtable::as_raw(this),
                value,
            )
            .ok()
        })
    }
    pub fn AutoReverseProperty() -> ::windows::core::Result<super::super::DependencyProperty> {
        Self::ITimelineStatics(|this| unsafe {
            let mut result__ = ::core::mem::MaybeUninit::zeroed();
            (::windows::core::Vtable::vtable(this).AutoReverseProperty)(
                ::windows::core::Vtable::as_raw(this),
                result__.as_mut_ptr(),
            )
            .from_abi::<super::super::DependencyProperty>(result__)
        })
    }
    pub fn BeginTimeProperty() -> ::windows::core::Result<super::super::DependencyProperty> {
        Self::ITimelineStatics(|this| unsafe {
            let mut result__ = ::core::mem::MaybeUninit::zeroed();
            (::windows::core::Vtable::vtable(this).BeginTimeProperty)(
                ::windows::core::Vtable::as_raw(this),
                result__.as_mut_ptr(),
            )
            .from_abi::<super::super::DependencyProperty>(result__)
        })
    }
    pub fn DurationProperty() -> ::windows::core::Result<super::super::DependencyProperty> {
        Self::ITimelineStatics(|this| unsafe {
            let mut result__ = ::core::mem::MaybeUninit::zeroed();
            (::windows::core::Vtable::vtable(this).DurationProperty)(
                ::windows::core::Vtable::as_raw(this),
                result__.as_mut_ptr(),
            )
            .from_abi::<super::super::DependencyProperty>(result__)
        })
    }
    pub fn SpeedRatioProperty() -> ::windows::core::Result<super::super::DependencyProperty> {
        Self::ITimelineStatics(|this| unsafe {
            let mut result__ = ::core::mem::MaybeUninit::zeroed();
            (::windows::core::Vtable::vtable(this).SpeedRatioProperty)(
                ::windows::core::Vtable::as_raw(this),
                result__.as_mut_ptr(),
            )
            .from_abi::<super::super::DependencyProperty>(result__)
        })
    }
    pub fn FillBehaviorProperty() -> ::windows::core::Result<super::super::DependencyProperty> {
        Self::ITimelineStatics(|this| unsafe {
            let mut result__ = ::core::mem::MaybeUninit::zeroed();
            (::windows::core::Vtable::vtable(this).FillBehaviorProperty)(
                ::windows::core::Vtable::as_raw(this),
                result__.as_mut_ptr(),
            )
            .from_abi::<super::super::DependencyProperty>(result__)
        })
    }
    pub fn RepeatBehaviorProperty() -> ::windows::core::Result<super::super::DependencyProperty> {
        Self::ITimelineStatics(|this| unsafe {
            let mut result__ = ::core::mem::MaybeUninit::zeroed();
            (::windows::core::Vtable::vtable(this).RepeatBehaviorProperty)(
                ::windows::core::Vtable::as_raw(this),
                result__.as_mut_ptr(),
            )
            .from_abi::<super::super::DependencyProperty>(result__)
        })
    }
    #[doc(hidden)]
    pub fn ITimelineStatics<R, F: FnOnce(&ITimelineStatics) -> ::windows::core::Result<R>>(
        callback: F,
    ) -> ::windows::core::Result<R> {
        static SHARED: ::windows::core::FactoryCache<Timeline, ITimelineStatics> =
            ::windows::core::FactoryCache::new();
        SHARED.call(callback)
    }
}
impl ::core::clone::Clone for Timeline {
    fn clone(&self) -> Self {
        Self(self.0.clone())
    }
}
impl ::core::cmp::PartialEq for Timeline {
    fn eq(&self, other: &Self) -> bool {
        self.0 == other.0
    }
}
impl ::core::cmp::Eq for Timeline {}
impl ::core::fmt::Debug for Timeline {
    fn fmt(&self, f: &mut ::core::fmt::Formatter<'_>) -> ::core::fmt::Result {
        f.debug_tuple("Timeline").field(&self.0).finish()
    }
}
unsafe impl ::windows::core::RuntimeType for Timeline {
    const SIGNATURE: ::windows::core::ConstBuffer = ::windows::core::ConstBuffer::from_slice(
        b"rc(Microsoft.UI.Xaml.Media.Animation.Timeline;{d0f9b330-cc2a-5b05-9786-2da4c6584581})",
    );
    type DefaultType = ::core::option::Option<Self>;
    fn from_default(from: &Self::DefaultType) -> ::windows::core::Result<Self> {
        from.as_ref().cloned().ok_or(::windows::core::Error::OK)
    }
}
unsafe impl ::windows::core::Vtable for Timeline {
    type Vtable = ITimeline_Vtbl;
}
unsafe impl ::windows::core::Interface for Timeline {
    const IID: ::windows::core::GUID = <ITimeline as ::windows::core::Interface>::IID;
}
impl ::windows::core::RuntimeName for Timeline {
    const NAME: &'static str = "Microsoft.UI.Xaml.Media.Animation.Timeline";
}
::windows::core::interface_hierarchy!(
    Timeline,
    ::windows::core::IUnknown,
    ::windows::core::IInspectable
);
impl ::core::convert::From<Timeline> for super::super::DependencyObject {
    fn from(value: Timeline) -> Self {
        ::core::convert::From::from(&value)
    }
}
impl ::core::convert::From<&Timeline> for super::super::DependencyObject {
    fn from(value: &Timeline) -> Self {
        ::windows::core::Interface::cast(value).unwrap()
    }
}
impl<'a> ::core::convert::From<&Timeline>
    for ::windows::core::InParam<'a, super::super::DependencyObject>
{
    fn from(value: &Timeline) -> Self {
        ::windows::core::InParam::owned(value.into())
    }
}
unsafe impl ::core::marker::Send for Timeline {}
unsafe impl ::core::marker::Sync for Timeline {}
#[doc = "*Required features: `\"UI_Xaml_Media_Animation\"`*"]
#[repr(transparent)]
pub struct TimelineCollection(::windows::core::IUnknown);
impl TimelineCollection {
    pub fn new() -> ::windows::core::Result<Self> {
        Self::IActivationFactory(|f| f.ActivateInstance::<Self>())
    }
    fn IActivationFactory<
        R,
        F: FnOnce(&::windows::core::IGenericFactory) -> ::windows::core::Result<R>,
    >(
        callback: F,
    ) -> ::windows::core::Result<R> {
        static SHARED: ::windows::core::FactoryCache<
            TimelineCollection,
            ::windows::core::IGenericFactory,
        > = ::windows::core::FactoryCache::new();
        SHARED.call(callback)
    }
    pub fn First(
        &self,
    ) -> ::windows::core::Result<::windows::Foundation::Collections::IIterator<Timeline>> {
        let this = &::windows::core::Interface::cast::<
            ::windows::Foundation::Collections::IIterable<Timeline>,
        >(self)?;
        unsafe {
            let mut result__ = ::core::mem::MaybeUninit::zeroed();
            (::windows::core::Vtable::vtable(this).First)(
                ::windows::core::Vtable::as_raw(this),
                result__.as_mut_ptr(),
            )
            .from_abi::<::windows::Foundation::Collections::IIterator<Timeline>>(result__)
        }
    }
    pub fn GetAt(&self, index: u32) -> ::windows::core::Result<Timeline> {
        let this = self;
        unsafe {
            let mut result__ = ::core::mem::MaybeUninit::zeroed();
            (::windows::core::Vtable::vtable(this).GetAt)(
                ::windows::core::Vtable::as_raw(this),
                index,
                result__.as_mut_ptr(),
            )
            .from_abi::<Timeline>(result__)
        }
    }
    pub fn Size(&self) -> ::windows::core::Result<u32> {
        let this = self;
        unsafe {
            let mut result__ = ::core::mem::MaybeUninit::zeroed();
            (::windows::core::Vtable::vtable(this).Size)(
                ::windows::core::Vtable::as_raw(this),
                result__.as_mut_ptr(),
            )
            .from_abi::<u32>(result__)
        }
    }
    pub fn GetView(
        &self,
    ) -> ::windows::core::Result<::windows::Foundation::Collections::IVectorView<Timeline>> {
        let this = self;
        unsafe {
            let mut result__ = ::core::mem::MaybeUninit::zeroed();
            (::windows::core::Vtable::vtable(this).GetView)(
                ::windows::core::Vtable::as_raw(this),
                result__.as_mut_ptr(),
            )
            .from_abi::<::windows::Foundation::Collections::IVectorView<Timeline>>(result__)
        }
    }
    pub fn IndexOf<'a, P0>(&self, value: P0, index: &mut u32) -> ::windows::core::Result<bool>
    where
        P0: ::std::convert::Into<::windows::core::InParam<'a, Timeline>>,
    {
        let this = self;
        unsafe {
            let mut result__ = ::core::mem::MaybeUninit::zeroed();
            (::windows::core::Vtable::vtable(this).IndexOf)(
                ::windows::core::Vtable::as_raw(this),
                value.into().abi(),
                index,
                result__.as_mut_ptr(),
            )
            .from_abi::<bool>(result__)
        }
    }
    pub fn SetAt<'a, P0>(&self, index: u32, value: P0) -> ::windows::core::Result<()>
    where
        P0: ::std::convert::Into<::windows::core::InParam<'a, Timeline>>,
    {
        let this = self;
        unsafe {
            (::windows::core::Vtable::vtable(this).SetAt)(
                ::windows::core::Vtable::as_raw(this),
                index,
                value.into().abi(),
            )
            .ok()
        }
    }
    pub fn InsertAt<'a, P0>(&self, index: u32, value: P0) -> ::windows::core::Result<()>
    where
        P0: ::std::convert::Into<::windows::core::InParam<'a, Timeline>>,
    {
        let this = self;
        unsafe {
            (::windows::core::Vtable::vtable(this).InsertAt)(
                ::windows::core::Vtable::as_raw(this),
                index,
                value.into().abi(),
            )
            .ok()
        }
    }
    pub fn RemoveAt(&self, index: u32) -> ::windows::core::Result<()> {
        let this = self;
        unsafe {
            (::windows::core::Vtable::vtable(this).RemoveAt)(
                ::windows::core::Vtable::as_raw(this),
                index,
            )
            .ok()
        }
    }
    pub fn Append<'a, P0>(&self, value: P0) -> ::windows::core::Result<()>
    where
        P0: ::std::convert::Into<::windows::core::InParam<'a, Timeline>>,
    {
        let this = self;
        unsafe {
            (::windows::core::Vtable::vtable(this).Append)(
                ::windows::core::Vtable::as_raw(this),
                value.into().abi(),
            )
            .ok()
        }
    }
    pub fn RemoveAtEnd(&self) -> ::windows::core::Result<()> {
        let this = self;
        unsafe {
            (::windows::core::Vtable::vtable(this).RemoveAtEnd)(::windows::core::Vtable::as_raw(
                this,
            ))
            .ok()
        }
    }
    pub fn Clear(&self) -> ::windows::core::Result<()> {
        let this = self;
        unsafe {
            (::windows::core::Vtable::vtable(this).Clear)(::windows::core::Vtable::as_raw(this))
                .ok()
        }
    }
    pub fn GetMany(
        &self,
        startindex: u32,
        items: &mut [::core::option::Option<Timeline>],
    ) -> ::windows::core::Result<u32> {
        let this = self;
        unsafe {
            let mut result__ = ::core::mem::MaybeUninit::zeroed();
            (::windows::core::Vtable::vtable(this).GetMany)(
                ::windows::core::Vtable::as_raw(this),
                startindex,
                items.len() as u32,
                ::core::mem::transmute_copy(&items),
                result__.as_mut_ptr(),
            )
            .from_abi::<u32>(result__)
        }
    }
    pub fn ReplaceAll(
        &self,
        items: &[::core::option::Option<Timeline>],
    ) -> ::windows::core::Result<()> {
        let this = self;
        unsafe {
            (::windows::core::Vtable::vtable(this).ReplaceAll)(
                ::windows::core::Vtable::as_raw(this),
                items.len() as u32,
                ::core::mem::transmute(items.as_ptr()),
            )
            .ok()
        }
    }
}
impl ::core::clone::Clone for TimelineCollection {
    fn clone(&self) -> Self {
        Self(self.0.clone())
    }
}
impl ::core::cmp::PartialEq for TimelineCollection {
    fn eq(&self, other: &Self) -> bool {
        self.0 == other.0
    }
}
impl ::core::cmp::Eq for TimelineCollection {}
impl ::core::fmt::Debug for TimelineCollection {
    fn fmt(&self, f: &mut ::core::fmt::Formatter<'_>) -> ::core::fmt::Result {
        f.debug_tuple("TimelineCollection").field(&self.0).finish()
    }
}
unsafe impl ::windows::core::RuntimeType for TimelineCollection {
    const SIGNATURE : ::windows::core::ConstBuffer = ::windows::core::ConstBuffer::from_slice ( b"rc(Microsoft.UI.Xaml.Media.Animation.TimelineCollection;pinterface({913337e9-11a1-4345-a3a2-4e7f956e222d};rc(Microsoft.UI.Xaml.Media.Animation.Timeline;{d0f9b330-cc2a-5b05-9786-2da4c6584581})))" ) ;
    type DefaultType = ::core::option::Option<Self>;
    fn from_default(from: &Self::DefaultType) -> ::windows::core::Result<Self> {
        from.as_ref().cloned().ok_or(::windows::core::Error::OK)
    }
}
unsafe impl ::windows::core::Vtable for TimelineCollection {
    type Vtable = ::windows::Foundation::Collections::IVector_Vtbl<Timeline>;
}
unsafe impl ::windows::core::Interface for TimelineCollection {
    const IID: ::windows::core::GUID =
        <::windows::Foundation::Collections::IVector<Timeline> as ::windows::core::Interface>::IID;
}
impl ::windows::core::RuntimeName for TimelineCollection {
    const NAME: &'static str = "Microsoft.UI.Xaml.Media.Animation.TimelineCollection";
}
impl ::core::iter::IntoIterator for TimelineCollection {
    type Item = Timeline;
    type IntoIter = ::windows::Foundation::Collections::VectorIterator<Self::Item>;
    fn into_iter(self) -> Self::IntoIter {
        ::core::iter::IntoIterator::into_iter(&self)
    }
}
impl ::core::iter::IntoIterator for &TimelineCollection {
    type Item = Timeline;
    type IntoIter = ::windows::Foundation::Collections::VectorIterator<Self::Item>;
    fn into_iter(self) -> Self::IntoIter {
        ::windows::Foundation::Collections::VectorIterator::new(
            ::core::convert::TryInto::try_into(self).ok(),
        )
    }
}
::windows::core::interface_hierarchy!(
    TimelineCollection,
    ::windows::core::IUnknown,
    ::windows::core::IInspectable
);
impl ::core::convert::TryFrom<TimelineCollection>
    for ::windows::Foundation::Collections::IIterable<Timeline>
{
    type Error = ::windows::core::Error;
    fn try_from(value: TimelineCollection) -> ::windows::core::Result<Self> {
        ::core::convert::TryFrom::try_from(&value)
    }
}
impl ::core::convert::TryFrom<&TimelineCollection>
    for ::windows::Foundation::Collections::IIterable<Timeline>
{
    type Error = ::windows::core::Error;
    fn try_from(value: &TimelineCollection) -> ::windows::core::Result<Self> {
        ::windows::core::Interface::cast(value)
    }
}
impl<'a> ::core::convert::TryFrom<&TimelineCollection>
    for ::windows::core::InParam<'a, ::windows::Foundation::Collections::IIterable<Timeline>>
{
    type Error = ::windows::core::Error;
    fn try_from(value: &TimelineCollection) -> ::windows::core::Result<Self> {
        let item = ::std::convert::TryInto::try_into(value)?;
        Ok(::windows::core::InParam::owned(item))
    }
}
impl ::core::convert::TryFrom<TimelineCollection>
    for ::windows::Foundation::Collections::IVector<Timeline>
{
    type Error = ::windows::core::Error;
    fn try_from(value: TimelineCollection) -> ::windows::core::Result<Self> {
        ::core::convert::TryFrom::try_from(&value)
    }
}
impl ::core::convert::TryFrom<&TimelineCollection>
    for ::windows::Foundation::Collections::IVector<Timeline>
{
    type Error = ::windows::core::Error;
    fn try_from(value: &TimelineCollection) -> ::windows::core::Result<Self> {
        ::windows::core::Interface::cast(value)
    }
}
impl<'a> ::core::convert::TryFrom<&TimelineCollection>
    for ::windows::core::InParam<'a, ::windows::Foundation::Collections::IVector<Timeline>>
{
    type Error = ::windows::core::Error;
    fn try_from(value: &TimelineCollection) -> ::windows::core::Result<Self> {
        let item = ::std::convert::TryInto::try_into(value)?;
        Ok(::windows::core::InParam::owned(item))
    }
}
unsafe impl ::core::marker::Send for TimelineCollection {}
unsafe impl ::core::marker::Sync for TimelineCollection {}
#[doc = "*Required features: `\"UI_Xaml_Media_Animation\"`*"]
#[repr(transparent)]
pub struct Transition(::windows::core::IUnknown);
impl Transition {
    pub fn GetValue(
        &self,
        dp: &super::super::DependencyProperty,
    ) -> ::windows::core::Result<::windows::core::IInspectable> {
        let this = &::windows::core::Interface::cast::<super::super::IDependencyObject>(self)?;
        unsafe {
            let mut result__ = ::core::mem::MaybeUninit::zeroed();
            (::windows::core::Vtable::vtable(this).GetValue)(
                ::windows::core::Vtable::as_raw(this),
                ::core::mem::transmute_copy(dp),
                result__.as_mut_ptr(),
            )
            .from_abi::<::windows::core::IInspectable>(result__)
        }
    }
    pub fn SetValue<'a, P0>(
        &self,
        dp: &super::super::DependencyProperty,
        value: P0,
    ) -> ::windows::core::Result<()>
    where
        P0: ::std::convert::Into<::windows::core::InParam<'a, ::windows::core::IInspectable>>,
    {
        let this = &::windows::core::Interface::cast::<super::super::IDependencyObject>(self)?;
        unsafe {
            (::windows::core::Vtable::vtable(this).SetValue)(
                ::windows::core::Vtable::as_raw(this),
                ::core::mem::transmute_copy(dp),
                value.into().abi(),
            )
            .ok()
        }
    }
    pub fn ClearValue(&self, dp: &super::super::DependencyProperty) -> ::windows::core::Result<()> {
        let this = &::windows::core::Interface::cast::<super::super::IDependencyObject>(self)?;
        unsafe {
            (::windows::core::Vtable::vtable(this).ClearValue)(
                ::windows::core::Vtable::as_raw(this),
                ::core::mem::transmute_copy(dp),
            )
            .ok()
        }
    }
    pub fn ReadLocalValue(
        &self,
        dp: &super::super::DependencyProperty,
    ) -> ::windows::core::Result<::windows::core::IInspectable> {
        let this = &::windows::core::Interface::cast::<super::super::IDependencyObject>(self)?;
        unsafe {
            let mut result__ = ::core::mem::MaybeUninit::zeroed();
            (::windows::core::Vtable::vtable(this).ReadLocalValue)(
                ::windows::core::Vtable::as_raw(this),
                ::core::mem::transmute_copy(dp),
                result__.as_mut_ptr(),
            )
            .from_abi::<::windows::core::IInspectable>(result__)
        }
    }
    pub fn GetAnimationBaseValue(
        &self,
        dp: &super::super::DependencyProperty,
    ) -> ::windows::core::Result<::windows::core::IInspectable> {
        let this = &::windows::core::Interface::cast::<super::super::IDependencyObject>(self)?;
        unsafe {
            let mut result__ = ::core::mem::MaybeUninit::zeroed();
            (::windows::core::Vtable::vtable(this).GetAnimationBaseValue)(
                ::windows::core::Vtable::as_raw(this),
                ::core::mem::transmute_copy(dp),
                result__.as_mut_ptr(),
            )
            .from_abi::<::windows::core::IInspectable>(result__)
        }
    }
    pub fn RegisterPropertyChangedCallback(
        &self,
        dp: &super::super::DependencyProperty,
        callback: &super::super::DependencyPropertyChangedCallback,
    ) -> ::windows::core::Result<i64> {
        let this = &::windows::core::Interface::cast::<super::super::IDependencyObject>(self)?;
        unsafe {
            let mut result__ = ::core::mem::MaybeUninit::zeroed();
            (::windows::core::Vtable::vtable(this).RegisterPropertyChangedCallback)(
                ::windows::core::Vtable::as_raw(this),
                ::core::mem::transmute_copy(dp),
                ::core::mem::transmute_copy(callback),
                result__.as_mut_ptr(),
            )
            .from_abi::<i64>(result__)
        }
    }
    pub fn UnregisterPropertyChangedCallback(
        &self,
        dp: &super::super::DependencyProperty,
        token: i64,
    ) -> ::windows::core::Result<()> {
        let this = &::windows::core::Interface::cast::<super::super::IDependencyObject>(self)?;
        unsafe {
            (::windows::core::Vtable::vtable(this).UnregisterPropertyChangedCallback)(
                ::windows::core::Vtable::as_raw(this),
                ::core::mem::transmute_copy(dp),
                token,
            )
            .ok()
        }
    }
    pub fn Dispatcher(&self) -> ::windows::core::Result<::windows::UI::Core::CoreDispatcher> {
        let this = &::windows::core::Interface::cast::<super::super::IDependencyObject>(self)?;
        unsafe {
            let mut result__ = ::core::mem::MaybeUninit::zeroed();
            (::windows::core::Vtable::vtable(this).Dispatcher)(
                ::windows::core::Vtable::as_raw(this),
                result__.as_mut_ptr(),
            )
            .from_abi::<::windows::UI::Core::CoreDispatcher>(result__)
        }
    }
    #[doc = "*Required features: `\"UI_Dispatching\"`*"]
    #[cfg(feature = "UI_Dispatching")]
    pub fn DispatcherQueue(
        &self,
    ) -> ::windows::core::Result<super::super::super::Dispatching::DispatcherQueue> {
        let this = &::windows::core::Interface::cast::<super::super::IDependencyObject>(self)?;
        unsafe {
            let mut result__ = ::core::mem::MaybeUninit::zeroed();
            (::windows::core::Vtable::vtable(this).DispatcherQueue)(
                ::windows::core::Vtable::as_raw(this),
                result__.as_mut_ptr(),
            )
            .from_abi::<super::super::super::Dispatching::DispatcherQueue>(result__)
        }
    }
}
impl ::core::clone::Clone for Transition {
    fn clone(&self) -> Self {
        Self(self.0.clone())
    }
}
impl ::core::cmp::PartialEq for Transition {
    fn eq(&self, other: &Self) -> bool {
        self.0 == other.0
    }
}
impl ::core::cmp::Eq for Transition {}
impl ::core::fmt::Debug for Transition {
    fn fmt(&self, f: &mut ::core::fmt::Formatter<'_>) -> ::core::fmt::Result {
        f.debug_tuple("Transition").field(&self.0).finish()
    }
}
unsafe impl ::windows::core::RuntimeType for Transition {
    const SIGNATURE: ::windows::core::ConstBuffer = ::windows::core::ConstBuffer::from_slice(
        b"rc(Microsoft.UI.Xaml.Media.Animation.Transition;{e5b71956-8e44-5a38-b41e-274d706102bf})",
    );
    type DefaultType = ::core::option::Option<Self>;
    fn from_default(from: &Self::DefaultType) -> ::windows::core::Result<Self> {
        from.as_ref().cloned().ok_or(::windows::core::Error::OK)
    }
}
unsafe impl ::windows::core::Vtable for Transition {
    type Vtable = ITransition_Vtbl;
}
unsafe impl ::windows::core::Interface for Transition {
    const IID: ::windows::core::GUID = <ITransition as ::windows::core::Interface>::IID;
}
impl ::windows::core::RuntimeName for Transition {
    const NAME: &'static str = "Microsoft.UI.Xaml.Media.Animation.Transition";
}
::windows::core::interface_hierarchy!(
    Transition,
    ::windows::core::IUnknown,
    ::windows::core::IInspectable
);
impl ::core::convert::From<Transition> for super::super::DependencyObject {
    fn from(value: Transition) -> Self {
        ::core::convert::From::from(&value)
    }
}
impl ::core::convert::From<&Transition> for super::super::DependencyObject {
    fn from(value: &Transition) -> Self {
        ::windows::core::Interface::cast(value).unwrap()
    }
}
impl<'a> ::core::convert::From<&Transition>
    for ::windows::core::InParam<'a, super::super::DependencyObject>
{
    fn from(value: &Transition) -> Self {
        ::windows::core::InParam::owned(value.into())
    }
}
unsafe impl ::core::marker::Send for Transition {}
unsafe impl ::core::marker::Sync for Transition {}
#[doc = "*Required features: `\"UI_Xaml_Media_Animation\"`*"]
#[repr(transparent)]
pub struct TransitionCollection(::windows::core::IUnknown);
impl TransitionCollection {
    pub fn new() -> ::windows::core::Result<Self> {
        Self::IActivationFactory(|f| f.ActivateInstance::<Self>())
    }
    fn IActivationFactory<
        R,
        F: FnOnce(&::windows::core::IGenericFactory) -> ::windows::core::Result<R>,
    >(
        callback: F,
    ) -> ::windows::core::Result<R> {
        static SHARED: ::windows::core::FactoryCache<
            TransitionCollection,
            ::windows::core::IGenericFactory,
        > = ::windows::core::FactoryCache::new();
        SHARED.call(callback)
    }
    pub fn First(
        &self,
    ) -> ::windows::core::Result<::windows::Foundation::Collections::IIterator<Transition>> {
        let this = &::windows::core::Interface::cast::<
            ::windows::Foundation::Collections::IIterable<Transition>,
        >(self)?;
        unsafe {
            let mut result__ = ::core::mem::MaybeUninit::zeroed();
            (::windows::core::Vtable::vtable(this).First)(
                ::windows::core::Vtable::as_raw(this),
                result__.as_mut_ptr(),
            )
            .from_abi::<::windows::Foundation::Collections::IIterator<Transition>>(result__)
        }
    }
    pub fn GetAt(&self, index: u32) -> ::windows::core::Result<Transition> {
        let this = self;
        unsafe {
            let mut result__ = ::core::mem::MaybeUninit::zeroed();
            (::windows::core::Vtable::vtable(this).GetAt)(
                ::windows::core::Vtable::as_raw(this),
                index,
                result__.as_mut_ptr(),
            )
            .from_abi::<Transition>(result__)
        }
    }
    pub fn Size(&self) -> ::windows::core::Result<u32> {
        let this = self;
        unsafe {
            let mut result__ = ::core::mem::MaybeUninit::zeroed();
            (::windows::core::Vtable::vtable(this).Size)(
                ::windows::core::Vtable::as_raw(this),
                result__.as_mut_ptr(),
            )
            .from_abi::<u32>(result__)
        }
    }
    pub fn GetView(
        &self,
    ) -> ::windows::core::Result<::windows::Foundation::Collections::IVectorView<Transition>> {
        let this = self;
        unsafe {
            let mut result__ = ::core::mem::MaybeUninit::zeroed();
            (::windows::core::Vtable::vtable(this).GetView)(
                ::windows::core::Vtable::as_raw(this),
                result__.as_mut_ptr(),
            )
            .from_abi::<::windows::Foundation::Collections::IVectorView<Transition>>(result__)
        }
    }
    pub fn IndexOf<'a, P0>(&self, value: P0, index: &mut u32) -> ::windows::core::Result<bool>
    where
        P0: ::std::convert::Into<::windows::core::InParam<'a, Transition>>,
    {
        let this = self;
        unsafe {
            let mut result__ = ::core::mem::MaybeUninit::zeroed();
            (::windows::core::Vtable::vtable(this).IndexOf)(
                ::windows::core::Vtable::as_raw(this),
                value.into().abi(),
                index,
                result__.as_mut_ptr(),
            )
            .from_abi::<bool>(result__)
        }
    }
    pub fn SetAt<'a, P0>(&self, index: u32, value: P0) -> ::windows::core::Result<()>
    where
        P0: ::std::convert::Into<::windows::core::InParam<'a, Transition>>,
    {
        let this = self;
        unsafe {
            (::windows::core::Vtable::vtable(this).SetAt)(
                ::windows::core::Vtable::as_raw(this),
                index,
                value.into().abi(),
            )
            .ok()
        }
    }
    pub fn InsertAt<'a, P0>(&self, index: u32, value: P0) -> ::windows::core::Result<()>
    where
        P0: ::std::convert::Into<::windows::core::InParam<'a, Transition>>,
    {
        let this = self;
        unsafe {
            (::windows::core::Vtable::vtable(this).InsertAt)(
                ::windows::core::Vtable::as_raw(this),
                index,
                value.into().abi(),
            )
            .ok()
        }
    }
    pub fn RemoveAt(&self, index: u32) -> ::windows::core::Result<()> {
        let this = self;
        unsafe {
            (::windows::core::Vtable::vtable(this).RemoveAt)(
                ::windows::core::Vtable::as_raw(this),
                index,
            )
            .ok()
        }
    }
    pub fn Append<'a, P0>(&self, value: P0) -> ::windows::core::Result<()>
    where
        P0: ::std::convert::Into<::windows::core::InParam<'a, Transition>>,
    {
        let this = self;
        unsafe {
            (::windows::core::Vtable::vtable(this).Append)(
                ::windows::core::Vtable::as_raw(this),
                value.into().abi(),
            )
            .ok()
        }
    }
    pub fn RemoveAtEnd(&self) -> ::windows::core::Result<()> {
        let this = self;
        unsafe {
            (::windows::core::Vtable::vtable(this).RemoveAtEnd)(::windows::core::Vtable::as_raw(
                this,
            ))
            .ok()
        }
    }
    pub fn Clear(&self) -> ::windows::core::Result<()> {
        let this = self;
        unsafe {
            (::windows::core::Vtable::vtable(this).Clear)(::windows::core::Vtable::as_raw(this))
                .ok()
        }
    }
    pub fn GetMany(
        &self,
        startindex: u32,
        items: &mut [::core::option::Option<Transition>],
    ) -> ::windows::core::Result<u32> {
        let this = self;
        unsafe {
            let mut result__ = ::core::mem::MaybeUninit::zeroed();
            (::windows::core::Vtable::vtable(this).GetMany)(
                ::windows::core::Vtable::as_raw(this),
                startindex,
                items.len() as u32,
                ::core::mem::transmute_copy(&items),
                result__.as_mut_ptr(),
            )
            .from_abi::<u32>(result__)
        }
    }
    pub fn ReplaceAll(
        &self,
        items: &[::core::option::Option<Transition>],
    ) -> ::windows::core::Result<()> {
        let this = self;
        unsafe {
            (::windows::core::Vtable::vtable(this).ReplaceAll)(
                ::windows::core::Vtable::as_raw(this),
                items.len() as u32,
                ::core::mem::transmute(items.as_ptr()),
            )
            .ok()
        }
    }
}
impl ::core::clone::Clone for TransitionCollection {
    fn clone(&self) -> Self {
        Self(self.0.clone())
    }
}
impl ::core::cmp::PartialEq for TransitionCollection {
    fn eq(&self, other: &Self) -> bool {
        self.0 == other.0
    }
}
impl ::core::cmp::Eq for TransitionCollection {}
impl ::core::fmt::Debug for TransitionCollection {
    fn fmt(&self, f: &mut ::core::fmt::Formatter<'_>) -> ::core::fmt::Result {
        f.debug_tuple("TransitionCollection").field(&self.0).finish()
    }
}
unsafe impl ::windows::core::RuntimeType for TransitionCollection {
    const SIGNATURE : ::windows::core::ConstBuffer = ::windows::core::ConstBuffer::from_slice ( b"rc(Microsoft.UI.Xaml.Media.Animation.TransitionCollection;pinterface({913337e9-11a1-4345-a3a2-4e7f956e222d};rc(Microsoft.UI.Xaml.Media.Animation.Transition;{e5b71956-8e44-5a38-b41e-274d706102bf})))" ) ;
    type DefaultType = ::core::option::Option<Self>;
    fn from_default(from: &Self::DefaultType) -> ::windows::core::Result<Self> {
        from.as_ref().cloned().ok_or(::windows::core::Error::OK)
    }
}
unsafe impl ::windows::core::Vtable for TransitionCollection {
    type Vtable = ::windows::Foundation::Collections::IVector_Vtbl<Transition>;
}
unsafe impl ::windows::core::Interface for TransitionCollection {
    const IID : ::windows::core::GUID = < ::windows::Foundation::Collections:: IVector :: < Transition > as::windows::core::Interface >::IID ;
}
impl ::windows::core::RuntimeName for TransitionCollection {
    const NAME: &'static str = "Microsoft.UI.Xaml.Media.Animation.TransitionCollection";
}
impl ::core::iter::IntoIterator for TransitionCollection {
    type Item = Transition;
    type IntoIter = ::windows::Foundation::Collections::VectorIterator<Self::Item>;
    fn into_iter(self) -> Self::IntoIter {
        ::core::iter::IntoIterator::into_iter(&self)
    }
}
impl ::core::iter::IntoIterator for &TransitionCollection {
    type Item = Transition;
    type IntoIter = ::windows::Foundation::Collections::VectorIterator<Self::Item>;
    fn into_iter(self) -> Self::IntoIter {
        ::windows::Foundation::Collections::VectorIterator::new(
            ::core::convert::TryInto::try_into(self).ok(),
        )
    }
}
::windows::core::interface_hierarchy!(
    TransitionCollection,
    ::windows::core::IUnknown,
    ::windows::core::IInspectable
);
impl ::core::convert::TryFrom<TransitionCollection>
    for ::windows::Foundation::Collections::IIterable<Transition>
{
    type Error = ::windows::core::Error;
    fn try_from(value: TransitionCollection) -> ::windows::core::Result<Self> {
        ::core::convert::TryFrom::try_from(&value)
    }
}
impl ::core::convert::TryFrom<&TransitionCollection>
    for ::windows::Foundation::Collections::IIterable<Transition>
{
    type Error = ::windows::core::Error;
    fn try_from(value: &TransitionCollection) -> ::windows::core::Result<Self> {
        ::windows::core::Interface::cast(value)
    }
}
impl<'a> ::core::convert::TryFrom<&TransitionCollection>
    for ::windows::core::InParam<'a, ::windows::Foundation::Collections::IIterable<Transition>>
{
    type Error = ::windows::core::Error;
    fn try_from(value: &TransitionCollection) -> ::windows::core::Result<Self> {
        let item = ::std::convert::TryInto::try_into(value)?;
        Ok(::windows::core::InParam::owned(item))
    }
}
impl ::core::convert::TryFrom<TransitionCollection>
    for ::windows::Foundation::Collections::IVector<Transition>
{
    type Error = ::windows::core::Error;
    fn try_from(value: TransitionCollection) -> ::windows::core::Result<Self> {
        ::core::convert::TryFrom::try_from(&value)
    }
}
impl ::core::convert::TryFrom<&TransitionCollection>
    for ::windows::Foundation::Collections::IVector<Transition>
{
    type Error = ::windows::core::Error;
    fn try_from(value: &TransitionCollection) -> ::windows::core::Result<Self> {
        ::windows::core::Interface::cast(value)
    }
}
impl<'a> ::core::convert::TryFrom<&TransitionCollection>
    for ::windows::core::InParam<'a, ::windows::Foundation::Collections::IVector<Transition>>
{
    type Error = ::windows::core::Error;
    fn try_from(value: &TransitionCollection) -> ::windows::core::Result<Self> {
        let item = ::std::convert::TryInto::try_into(value)?;
        Ok(::windows::core::InParam::owned(item))
    }
}
unsafe impl ::core::marker::Send for TransitionCollection {}
unsafe impl ::core::marker::Sync for TransitionCollection {}
#[doc = "*Required features: `\"UI_Xaml_Media_Animation\"`*"]
#[repr(transparent)]
#[derive(::core::cmp::PartialEq, ::core::cmp::Eq)]
pub struct ClockState(pub i32);
impl ClockState {
    pub const Active: Self = Self(0i32);
    pub const Filling: Self = Self(1i32);
    pub const Stopped: Self = Self(2i32);
}
impl ::core::marker::Copy for ClockState {}
impl ::core::clone::Clone for ClockState {
    fn clone(&self) -> Self {
        *self
    }
}
impl ::core::default::Default for ClockState {
    fn default() -> Self {
        Self(0)
    }
}
unsafe impl ::windows::core::Abi for ClockState {
    type Abi = Self;
}
impl ::core::fmt::Debug for ClockState {
    fn fmt(&self, f: &mut ::core::fmt::Formatter<'_>) -> ::core::fmt::Result {
        f.debug_tuple("ClockState").field(&self.0).finish()
    }
}
unsafe impl ::windows::core::RuntimeType for ClockState {
    const SIGNATURE: ::windows::core::ConstBuffer = ::windows::core::ConstBuffer::from_slice(
        b"enum(Microsoft.UI.Xaml.Media.Animation.ClockState;i4)",
    );
    type DefaultType = Self;
    fn from_default(from: &Self::DefaultType) -> ::windows::core::Result<Self> {
        Ok(*from)
    }
}
#[doc = "*Required features: `\"UI_Xaml_Media_Animation\"`*"]
#[repr(transparent)]
#[derive(::core::cmp::PartialEq, ::core::cmp::Eq)]
pub struct ConnectedAnimationComponent(pub i32);
impl ConnectedAnimationComponent {
    pub const OffsetX: Self = Self(0i32);
    pub const OffsetY: Self = Self(1i32);
    pub const CrossFade: Self = Self(2i32);
    pub const Scale: Self = Self(3i32);
}
impl ::core::marker::Copy for ConnectedAnimationComponent {}
impl ::core::clone::Clone for ConnectedAnimationComponent {
    fn clone(&self) -> Self {
        *self
    }
}
impl ::core::default::Default for ConnectedAnimationComponent {
    fn default() -> Self {
        Self(0)
    }
}
unsafe impl ::windows::core::Abi for ConnectedAnimationComponent {
    type Abi = Self;
}
impl ::core::fmt::Debug for ConnectedAnimationComponent {
    fn fmt(&self, f: &mut ::core::fmt::Formatter<'_>) -> ::core::fmt::Result {
        f.debug_tuple("ConnectedAnimationComponent").field(&self.0).finish()
    }
}
unsafe impl ::windows::core::RuntimeType for ConnectedAnimationComponent {
    const SIGNATURE: ::windows::core::ConstBuffer = ::windows::core::ConstBuffer::from_slice(
        b"enum(Microsoft.UI.Xaml.Media.Animation.ConnectedAnimationComponent;i4)",
    );
    type DefaultType = Self;
    fn from_default(from: &Self::DefaultType) -> ::windows::core::Result<Self> {
        Ok(*from)
    }
}
#[doc = "*Required features: `\"UI_Xaml_Media_Animation\"`*"]
#[repr(transparent)]
#[derive(::core::cmp::PartialEq, ::core::cmp::Eq)]
pub struct EasingMode(pub i32);
impl EasingMode {
    pub const EaseOut: Self = Self(0i32);
    pub const EaseIn: Self = Self(1i32);
    pub const EaseInOut: Self = Self(2i32);
}
impl ::core::marker::Copy for EasingMode {}
impl ::core::clone::Clone for EasingMode {
    fn clone(&self) -> Self {
        *self
    }
}
impl ::core::default::Default for EasingMode {
    fn default() -> Self {
        Self(0)
    }
}
unsafe impl ::windows::core::Abi for EasingMode {
    type Abi = Self;
}
impl ::core::fmt::Debug for EasingMode {
    fn fmt(&self, f: &mut ::core::fmt::Formatter<'_>) -> ::core::fmt::Result {
        f.debug_tuple("EasingMode").field(&self.0).finish()
    }
}
unsafe impl ::windows::core::RuntimeType for EasingMode {
    const SIGNATURE: ::windows::core::ConstBuffer = ::windows::core::ConstBuffer::from_slice(
        b"enum(Microsoft.UI.Xaml.Media.Animation.EasingMode;i4)",
    );
    type DefaultType = Self;
    fn from_default(from: &Self::DefaultType) -> ::windows::core::Result<Self> {
        Ok(*from)
    }
}
#[doc = "*Required features: `\"UI_Xaml_Media_Animation\"`*"]
#[repr(transparent)]
#[derive(::core::cmp::PartialEq, ::core::cmp::Eq)]
pub struct FillBehavior(pub i32);
impl FillBehavior {
    pub const HoldEnd: Self = Self(0i32);
    pub const Stop: Self = Self(1i32);
}
impl ::core::marker::Copy for FillBehavior {}
impl ::core::clone::Clone for FillBehavior {
    fn clone(&self) -> Self {
        *self
    }
}
impl ::core::default::Default for FillBehavior {
    fn default() -> Self {
        Self(0)
    }
}
unsafe impl ::windows::core::Abi for FillBehavior {
    type Abi = Self;
}
impl ::core::fmt::Debug for FillBehavior {
    fn fmt(&self, f: &mut ::core::fmt::Formatter<'_>) -> ::core::fmt::Result {
        f.debug_tuple("FillBehavior").field(&self.0).finish()
    }
}
unsafe impl ::windows::core::RuntimeType for FillBehavior {
    const SIGNATURE: ::windows::core::ConstBuffer = ::windows::core::ConstBuffer::from_slice(
        b"enum(Microsoft.UI.Xaml.Media.Animation.FillBehavior;i4)",
    );
    type DefaultType = Self;
    fn from_default(from: &Self::DefaultType) -> ::windows::core::Result<Self> {
        Ok(*from)
    }
}
#[doc = "*Required features: `\"UI_Xaml_Media_Animation\"`*"]
#[repr(transparent)]
#[derive(::core::cmp::PartialEq, ::core::cmp::Eq)]
pub struct RepeatBehaviorType(pub i32);
impl RepeatBehaviorType {
    pub const Count: Self = Self(0i32);
    pub const Duration: Self = Self(1i32);
    pub const Forever: Self = Self(2i32);
}
impl ::core::marker::Copy for RepeatBehaviorType {}
impl ::core::clone::Clone for RepeatBehaviorType {
    fn clone(&self) -> Self {
        *self
    }
}
impl ::core::default::Default for RepeatBehaviorType {
    fn default() -> Self {
        Self(0)
    }
}
unsafe impl ::windows::core::Abi for RepeatBehaviorType {
    type Abi = Self;
}
impl ::core::fmt::Debug for RepeatBehaviorType {
    fn fmt(&self, f: &mut ::core::fmt::Formatter<'_>) -> ::core::fmt::Result {
        f.debug_tuple("RepeatBehaviorType").field(&self.0).finish()
    }
}
unsafe impl ::windows::core::RuntimeType for RepeatBehaviorType {
    const SIGNATURE: ::windows::core::ConstBuffer = ::windows::core::ConstBuffer::from_slice(
        b"enum(Microsoft.UI.Xaml.Media.Animation.RepeatBehaviorType;i4)",
    );
    type DefaultType = Self;
    fn from_default(from: &Self::DefaultType) -> ::windows::core::Result<Self> {
        Ok(*from)
    }
}
#[doc = "*Required features: `\"UI_Xaml_Media_Animation\"`*"]
#[repr(transparent)]
#[derive(::core::cmp::PartialEq, ::core::cmp::Eq)]
pub struct SlideNavigationTransitionEffect(pub i32);
impl SlideNavigationTransitionEffect {
    pub const FromBottom: Self = Self(0i32);
    pub const FromLeft: Self = Self(1i32);
    pub const FromRight: Self = Self(2i32);
}
impl ::core::marker::Copy for SlideNavigationTransitionEffect {}
impl ::core::clone::Clone for SlideNavigationTransitionEffect {
    fn clone(&self) -> Self {
        *self
    }
}
impl ::core::default::Default for SlideNavigationTransitionEffect {
    fn default() -> Self {
        Self(0)
    }
}
unsafe impl ::windows::core::Abi for SlideNavigationTransitionEffect {
    type Abi = Self;
}
impl ::core::fmt::Debug for SlideNavigationTransitionEffect {
    fn fmt(&self, f: &mut ::core::fmt::Formatter<'_>) -> ::core::fmt::Result {
        f.debug_tuple("SlideNavigationTransitionEffect").field(&self.0).finish()
    }
}
unsafe impl ::windows::core::RuntimeType for SlideNavigationTransitionEffect {
    const SIGNATURE: ::windows::core::ConstBuffer = ::windows::core::ConstBuffer::from_slice(
        b"enum(Microsoft.UI.Xaml.Media.Animation.SlideNavigationTransitionEffect;i4)",
    );
    type DefaultType = Self;
    fn from_default(from: &Self::DefaultType) -> ::windows::core::Result<Self> {
        Ok(*from)
    }
}
#[repr(C)]
#[doc = "*Required features: `\"UI_Xaml_Media_Animation\"`*"]
pub struct KeyTime {
    pub TimeSpan: ::windows::Foundation::TimeSpan,
}
impl ::core::marker::Copy for KeyTime {}
impl ::core::clone::Clone for KeyTime {
    fn clone(&self) -> Self {
        *self
    }
}
impl ::core::fmt::Debug for KeyTime {
    fn fmt(&self, f: &mut ::core::fmt::Formatter<'_>) -> ::core::fmt::Result {
        f.debug_struct("KeyTime").field("TimeSpan", &self.TimeSpan).finish()
    }
}
unsafe impl ::windows::core::Abi for KeyTime {
    type Abi = Self;
}
unsafe impl ::windows::core::RuntimeType for KeyTime {
    const SIGNATURE: ::windows::core::ConstBuffer = ::windows::core::ConstBuffer::from_slice(
        b"struct(Microsoft.UI.Xaml.Media.Animation.KeyTime;struct(Windows.Foundation.TimeSpan;i8))",
    );
    type DefaultType = Self;
    fn from_default(from: &Self::DefaultType) -> ::windows::core::Result<Self> {
        Ok(*from)
    }
}
impl ::core::cmp::PartialEq for KeyTime {
    fn eq(&self, other: &Self) -> bool {
        unsafe {
            ::windows::core::memcmp(
                self as *const _ as _,
                other as *const _ as _,
                core::mem::size_of::<KeyTime>(),
            ) == 0
        }
    }
}
impl ::core::cmp::Eq for KeyTime {}
impl ::core::default::Default for KeyTime {
    fn default() -> Self {
        unsafe { ::core::mem::zeroed() }
    }
}
#[repr(C)]
#[doc = "*Required features: `\"UI_Xaml_Media_Animation\"`*"]
pub struct RepeatBehavior {
    pub Count: f64,
    pub Duration: ::windows::Foundation::TimeSpan,
    pub Type: RepeatBehaviorType,
}
impl ::core::marker::Copy for RepeatBehavior {}
impl ::core::clone::Clone for RepeatBehavior {
    fn clone(&self) -> Self {
        *self
    }
}
impl ::core::fmt::Debug for RepeatBehavior {
    fn fmt(&self, f: &mut ::core::fmt::Formatter<'_>) -> ::core::fmt::Result {
        f.debug_struct("RepeatBehavior")
            .field("Count", &self.Count)
            .field("Duration", &self.Duration)
            .field("Type", &self.Type)
            .finish()
    }
}
unsafe impl ::windows::core::Abi for RepeatBehavior {
    type Abi = Self;
}
unsafe impl ::windows::core::RuntimeType for RepeatBehavior {
    const SIGNATURE : ::windows::core::ConstBuffer =::windows::core::ConstBuffer::from_slice ( b"struct(Microsoft.UI.Xaml.Media.Animation.RepeatBehavior;f8;struct(Windows.Foundation.TimeSpan;i8);enum(Microsoft.UI.Xaml.Media.Animation.RepeatBehaviorType;i4))" ) ;
    type DefaultType = Self;
    fn from_default(from: &Self::DefaultType) -> ::windows::core::Result<Self> {
        Ok(*from)
    }
}
impl ::core::cmp::PartialEq for RepeatBehavior {
    fn eq(&self, other: &Self) -> bool {
        unsafe {
            ::windows::core::memcmp(
                self as *const _ as _,
                other as *const _ as _,
                core::mem::size_of::<RepeatBehavior>(),
            ) == 0
        }
    }
}
impl ::core::cmp::Eq for RepeatBehavior {}
impl ::core::default::Default for RepeatBehavior {
    fn default() -> Self {
        unsafe { ::core::mem::zeroed() }
    }
}
#[cfg(feature = "implement")]
::core::include!("impl.rs");
