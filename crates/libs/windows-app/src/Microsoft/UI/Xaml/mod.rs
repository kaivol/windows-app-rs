#[cfg(feature = "Microsoft_UI_Xaml_Automation")]
#[doc = "Required features: `\"Microsoft_UI_Xaml_Automation\"`"]
pub mod Automation;
#[cfg(feature = "Microsoft_UI_Xaml_Controls")]
#[doc = "Required features: `\"Microsoft_UI_Xaml_Controls\"`"]
pub mod Controls;
#[cfg(feature = "Microsoft_UI_Xaml_Core")]
#[doc = "Required features: `\"Microsoft_UI_Xaml_Core\"`"]
pub mod Core;
#[cfg(feature = "Microsoft_UI_Xaml_CustomAttributes")]
#[doc = "Required features: `\"Microsoft_UI_Xaml_CustomAttributes\"`"]
pub mod CustomAttributes;
#[cfg(feature = "Microsoft_UI_Xaml_Data")]
#[doc = "Required features: `\"Microsoft_UI_Xaml_Data\"`"]
pub mod Data;
#[cfg(feature = "Microsoft_UI_Xaml_Documents")]
#[doc = "Required features: `\"Microsoft_UI_Xaml_Documents\"`"]
pub mod Documents;
#[cfg(feature = "Microsoft_UI_Xaml_Hosting")]
#[doc = "Required features: `\"Microsoft_UI_Xaml_Hosting\"`"]
pub mod Hosting;
#[cfg(feature = "Microsoft_UI_Xaml_Input")]
#[doc = "Required features: `\"Microsoft_UI_Xaml_Input\"`"]
pub mod Input;
#[cfg(feature = "Microsoft_UI_Xaml_Interop")]
#[doc = "Required features: `\"Microsoft_UI_Xaml_Interop\"`"]
pub mod Interop;
#[cfg(feature = "Microsoft_UI_Xaml_Markup")]
#[doc = "Required features: `\"Microsoft_UI_Xaml_Markup\"`"]
pub mod Markup;
#[cfg(feature = "Microsoft_UI_Xaml_Media")]
#[doc = "Required features: `\"Microsoft_UI_Xaml_Media\"`"]
pub mod Media;
#[cfg(feature = "Microsoft_UI_Xaml_Navigation")]
#[doc = "Required features: `\"Microsoft_UI_Xaml_Navigation\"`"]
pub mod Navigation;
#[cfg(feature = "Microsoft_UI_Xaml_Printing")]
#[doc = "Required features: `\"Microsoft_UI_Xaml_Printing\"`"]
pub mod Printing;
#[cfg(feature = "Microsoft_UI_Xaml_Resources")]
#[doc = "Required features: `\"Microsoft_UI_Xaml_Resources\"`"]
pub mod Resources;
#[cfg(feature = "Microsoft_UI_Xaml_Shapes")]
#[doc = "Required features: `\"Microsoft_UI_Xaml_Shapes\"`"]
pub mod Shapes;
#[cfg(feature = "Microsoft_UI_Xaml_XamlTypeInfo")]
#[doc = "Required features: `\"Microsoft_UI_Xaml_XamlTypeInfo\"`"]
pub mod XamlTypeInfo;
#[doc(hidden)]
#[repr(transparent)]
#[derive(::core::cmp::PartialEq, ::core::cmp::Eq, ::core::fmt::Debug, ::core::clone::Clone)]
pub struct IAdaptiveTrigger(::windows_core::IUnknown);
unsafe impl ::windows_core::Interface for IAdaptiveTrigger {
    type Vtable = IAdaptiveTrigger_Vtbl;
}
unsafe impl ::windows_core::ComInterface for IAdaptiveTrigger {
    const IID: ::windows_core::GUID =
        ::windows_core::GUID::from_u128(0xb2b18ae8_48d9_5a1d_a555_6685ddd4da80);
}
#[repr(C)]
#[doc(hidden)]
pub struct IAdaptiveTrigger_Vtbl {
    pub base__: ::windows_core::IInspectable_Vtbl,
    pub MinWindowWidth: unsafe extern "system" fn(
        this: *mut ::core::ffi::c_void,
        result__: *mut f64,
    ) -> ::windows_core::HRESULT,
    pub SetMinWindowWidth: unsafe extern "system" fn(
        this: *mut ::core::ffi::c_void,
        value: f64,
    ) -> ::windows_core::HRESULT,
    pub MinWindowHeight: unsafe extern "system" fn(
        this: *mut ::core::ffi::c_void,
        result__: *mut f64,
    ) -> ::windows_core::HRESULT,
    pub SetMinWindowHeight: unsafe extern "system" fn(
        this: *mut ::core::ffi::c_void,
        value: f64,
    ) -> ::windows_core::HRESULT,
}
#[doc(hidden)]
#[repr(transparent)]
#[derive(::core::cmp::PartialEq, ::core::cmp::Eq, ::core::fmt::Debug, ::core::clone::Clone)]
pub struct IAdaptiveTriggerFactory(::windows_core::IUnknown);
unsafe impl ::windows_core::Interface for IAdaptiveTriggerFactory {
    type Vtable = IAdaptiveTriggerFactory_Vtbl;
}
unsafe impl ::windows_core::ComInterface for IAdaptiveTriggerFactory {
    const IID: ::windows_core::GUID =
        ::windows_core::GUID::from_u128(0x9c9560bb_4099_5175_9250_45a15e753da8);
}
#[repr(C)]
#[doc(hidden)]
pub struct IAdaptiveTriggerFactory_Vtbl {
    pub base__: ::windows_core::IInspectable_Vtbl,
    pub CreateInstance: unsafe extern "system" fn(
        this: *mut ::core::ffi::c_void,
        baseinterface: *mut ::core::ffi::c_void,
        innerinterface: *mut *mut ::core::ffi::c_void,
        result__: *mut *mut ::core::ffi::c_void,
    ) -> ::windows_core::HRESULT,
}
#[doc(hidden)]
#[repr(transparent)]
#[derive(::core::cmp::PartialEq, ::core::cmp::Eq, ::core::fmt::Debug, ::core::clone::Clone)]
pub struct IAdaptiveTriggerStatics(::windows_core::IUnknown);
unsafe impl ::windows_core::Interface for IAdaptiveTriggerStatics {
    type Vtable = IAdaptiveTriggerStatics_Vtbl;
}
unsafe impl ::windows_core::ComInterface for IAdaptiveTriggerStatics {
    const IID: ::windows_core::GUID =
        ::windows_core::GUID::from_u128(0xe7a3547f_c077_5f20_aab1_d16c30d9d37f);
}
#[repr(C)]
#[doc(hidden)]
pub struct IAdaptiveTriggerStatics_Vtbl {
    pub base__: ::windows_core::IInspectable_Vtbl,
    pub MinWindowWidthProperty: unsafe extern "system" fn(
        this: *mut ::core::ffi::c_void,
        result__: *mut *mut ::core::ffi::c_void,
    ) -> ::windows_core::HRESULT,
    pub MinWindowHeightProperty: unsafe extern "system" fn(
        this: *mut ::core::ffi::c_void,
        result__: *mut *mut ::core::ffi::c_void,
    ) -> ::windows_core::HRESULT,
}
#[doc(hidden)]
#[repr(transparent)]
#[derive(::core::cmp::PartialEq, ::core::cmp::Eq, ::core::fmt::Debug, ::core::clone::Clone)]
pub struct IApplication(::windows_core::IUnknown);
unsafe impl ::windows_core::Interface for IApplication {
    type Vtable = IApplication_Vtbl;
}
unsafe impl ::windows_core::ComInterface for IApplication {
    const IID: ::windows_core::GUID =
        ::windows_core::GUID::from_u128(0x06a8f4e7_1146_55af_820d_ebd55643b021);
}
#[repr(C)]
#[doc(hidden)]
pub struct IApplication_Vtbl {
    pub base__: ::windows_core::IInspectable_Vtbl,
    pub Resources: unsafe extern "system" fn(
        this: *mut ::core::ffi::c_void,
        result__: *mut *mut ::core::ffi::c_void,
    ) -> ::windows_core::HRESULT,
    pub SetResources: unsafe extern "system" fn(
        this: *mut ::core::ffi::c_void,
        value: *mut ::core::ffi::c_void,
    ) -> ::windows_core::HRESULT,
    pub DebugSettings: unsafe extern "system" fn(
        this: *mut ::core::ffi::c_void,
        result__: *mut *mut ::core::ffi::c_void,
    ) -> ::windows_core::HRESULT,
    pub RequestedTheme: unsafe extern "system" fn(
        this: *mut ::core::ffi::c_void,
        result__: *mut ApplicationTheme,
    ) -> ::windows_core::HRESULT,
    pub SetRequestedTheme: unsafe extern "system" fn(
        this: *mut ::core::ffi::c_void,
        value: ApplicationTheme,
    ) -> ::windows_core::HRESULT,
    pub FocusVisualKind: unsafe extern "system" fn(
        this: *mut ::core::ffi::c_void,
        result__: *mut FocusVisualKind,
    ) -> ::windows_core::HRESULT,
    pub SetFocusVisualKind: unsafe extern "system" fn(
        this: *mut ::core::ffi::c_void,
        value: FocusVisualKind,
    ) -> ::windows_core::HRESULT,
    pub HighContrastAdjustment: unsafe extern "system" fn(
        this: *mut ::core::ffi::c_void,
        result__: *mut ApplicationHighContrastAdjustment,
    ) -> ::windows_core::HRESULT,
    pub SetHighContrastAdjustment: unsafe extern "system" fn(
        this: *mut ::core::ffi::c_void,
        value: ApplicationHighContrastAdjustment,
    ) -> ::windows_core::HRESULT,
    #[cfg(feature = "Windows_Foundation")]
    pub UnhandledException: unsafe extern "system" fn(
        this: *mut ::core::ffi::c_void,
        handler: *mut ::core::ffi::c_void,
        result__: *mut ::windows::Foundation::EventRegistrationToken,
    ) -> ::windows_core::HRESULT,
    #[cfg(not(feature = "Windows_Foundation"))]
    UnhandledException: usize,
    #[cfg(feature = "Windows_Foundation")]
    pub RemoveUnhandledException: unsafe extern "system" fn(
        this: *mut ::core::ffi::c_void,
        token: ::windows::Foundation::EventRegistrationToken,
    ) -> ::windows_core::HRESULT,
    #[cfg(not(feature = "Windows_Foundation"))]
    RemoveUnhandledException: usize,
    pub Exit: unsafe extern "system" fn(this: *mut ::core::ffi::c_void) -> ::windows_core::HRESULT,
}
#[doc(hidden)]
#[repr(transparent)]
#[derive(::core::cmp::PartialEq, ::core::cmp::Eq, ::core::fmt::Debug, ::core::clone::Clone)]
pub struct IApplication2(::windows_core::IUnknown);
unsafe impl ::windows_core::Interface for IApplication2 {
    type Vtable = IApplication2_Vtbl;
}
unsafe impl ::windows_core::ComInterface for IApplication2 {
    const IID: ::windows_core::GUID =
        ::windows_core::GUID::from_u128(0x469e6d36_2e11_5b06_9e0a_c5eef0cf8f12);
}
#[repr(C)]
#[doc(hidden)]
pub struct IApplication2_Vtbl {
    pub base__: ::windows_core::IInspectable_Vtbl,
    #[cfg(feature = "Windows_Foundation")]
    pub ResourceManagerRequested: unsafe extern "system" fn(
        this: *mut ::core::ffi::c_void,
        handler: *mut ::core::ffi::c_void,
        result__: *mut ::windows::Foundation::EventRegistrationToken,
    ) -> ::windows_core::HRESULT,
    #[cfg(not(feature = "Windows_Foundation"))]
    ResourceManagerRequested: usize,
    #[cfg(feature = "Windows_Foundation")]
    pub RemoveResourceManagerRequested: unsafe extern "system" fn(
        this: *mut ::core::ffi::c_void,
        token: ::windows::Foundation::EventRegistrationToken,
    ) -> ::windows_core::HRESULT,
    #[cfg(not(feature = "Windows_Foundation"))]
    RemoveResourceManagerRequested: usize,
}
#[doc(hidden)]
#[repr(transparent)]
#[derive(::core::cmp::PartialEq, ::core::cmp::Eq, ::core::fmt::Debug, ::core::clone::Clone)]
pub struct IApplicationFactory(::windows_core::IUnknown);
unsafe impl ::windows_core::Interface for IApplicationFactory {
    type Vtable = IApplicationFactory_Vtbl;
}
unsafe impl ::windows_core::ComInterface for IApplicationFactory {
    const IID: ::windows_core::GUID =
        ::windows_core::GUID::from_u128(0x9fd96657_5294_5a65_a1db_4fea143597da);
}
#[repr(C)]
#[doc(hidden)]
pub struct IApplicationFactory_Vtbl {
    pub base__: ::windows_core::IInspectable_Vtbl,
    pub CreateInstance: unsafe extern "system" fn(
        this: *mut ::core::ffi::c_void,
        baseinterface: *mut ::core::ffi::c_void,
        innerinterface: *mut *mut ::core::ffi::c_void,
        result__: *mut *mut ::core::ffi::c_void,
    ) -> ::windows_core::HRESULT,
}
#[doc(hidden)]
#[repr(transparent)]
#[derive(::core::cmp::PartialEq, ::core::cmp::Eq, ::core::fmt::Debug, ::core::clone::Clone)]
pub struct IApplicationInitializationCallbackParams(::windows_core::IUnknown);
unsafe impl ::windows_core::Interface for IApplicationInitializationCallbackParams {
    type Vtable = IApplicationInitializationCallbackParams_Vtbl;
}
unsafe impl ::windows_core::ComInterface for IApplicationInitializationCallbackParams {
    const IID: ::windows_core::GUID =
        ::windows_core::GUID::from_u128(0x1b1906ea_5b7b_5876_81ab_7c2281ac3d20);
}
#[repr(C)]
#[doc(hidden)]
pub struct IApplicationInitializationCallbackParams_Vtbl {
    pub base__: ::windows_core::IInspectable_Vtbl,
}
#[doc(hidden)]
#[repr(transparent)]
#[derive(::core::cmp::PartialEq, ::core::cmp::Eq, ::core::fmt::Debug, ::core::clone::Clone)]
pub struct IApplicationOverrides(::windows_core::IUnknown);
unsafe impl ::windows_core::Interface for IApplicationOverrides {
    type Vtable = IApplicationOverrides_Vtbl;
}
unsafe impl ::windows_core::ComInterface for IApplicationOverrides {
    const IID: ::windows_core::GUID =
        ::windows_core::GUID::from_u128(0xa33e81ef_c665_503b_8827_d27ef1720a06);
}
#[repr(C)]
#[doc(hidden)]
pub struct IApplicationOverrides_Vtbl {
    pub base__: ::windows_core::IInspectable_Vtbl,
    pub OnLaunched: unsafe extern "system" fn(
        this: *mut ::core::ffi::c_void,
        args: *mut ::core::ffi::c_void,
    ) -> ::windows_core::HRESULT,
}
#[doc(hidden)]
#[repr(transparent)]
#[derive(::core::cmp::PartialEq, ::core::cmp::Eq, ::core::fmt::Debug, ::core::clone::Clone)]
pub struct IApplicationStatics(::windows_core::IUnknown);
unsafe impl ::windows_core::Interface for IApplicationStatics {
    type Vtable = IApplicationStatics_Vtbl;
}
unsafe impl ::windows_core::ComInterface for IApplicationStatics {
    const IID: ::windows_core::GUID =
        ::windows_core::GUID::from_u128(0x4e0d09f5_4358_512c_a987_503b52848e95);
}
#[repr(C)]
#[doc(hidden)]
pub struct IApplicationStatics_Vtbl {
    pub base__: ::windows_core::IInspectable_Vtbl,
    pub Current: unsafe extern "system" fn(
        this: *mut ::core::ffi::c_void,
        result__: *mut *mut ::core::ffi::c_void,
    ) -> ::windows_core::HRESULT,
    pub Start: unsafe extern "system" fn(
        this: *mut ::core::ffi::c_void,
        callback: *mut ::core::ffi::c_void,
    ) -> ::windows_core::HRESULT,
    #[cfg(feature = "Windows_Foundation")]
    pub LoadComponent: unsafe extern "system" fn(
        this: *mut ::core::ffi::c_void,
        component: *mut ::core::ffi::c_void,
        resourcelocator: *mut ::core::ffi::c_void,
    ) -> ::windows_core::HRESULT,
    #[cfg(not(feature = "Windows_Foundation"))]
    LoadComponent: usize,
    #[cfg(all(
        feature = "Microsoft_UI_Xaml_Controls_Primitives",
        feature = "Windows_Foundation"
    ))]
    pub LoadComponentWithResourceLocation: unsafe extern "system" fn(
        this: *mut ::core::ffi::c_void,
        component: *mut ::core::ffi::c_void,
        resourcelocator: *mut ::core::ffi::c_void,
        componentresourcelocation: Controls::Primitives::ComponentResourceLocation,
    )
        -> ::windows_core::HRESULT,
    #[cfg(not(all(
        feature = "Microsoft_UI_Xaml_Controls_Primitives",
        feature = "Windows_Foundation"
    )))]
    LoadComponentWithResourceLocation: usize,
}
#[doc(hidden)]
#[repr(transparent)]
#[derive(::core::cmp::PartialEq, ::core::cmp::Eq, ::core::fmt::Debug, ::core::clone::Clone)]
pub struct IBindingFailedEventArgs(::windows_core::IUnknown);
unsafe impl ::windows_core::Interface for IBindingFailedEventArgs {
    type Vtable = IBindingFailedEventArgs_Vtbl;
}
unsafe impl ::windows_core::ComInterface for IBindingFailedEventArgs {
    const IID: ::windows_core::GUID =
        ::windows_core::GUID::from_u128(0xa7bf50f3_dbc0_5b44_be74_56e8f80fd716);
}
#[repr(C)]
#[doc(hidden)]
pub struct IBindingFailedEventArgs_Vtbl {
    pub base__: ::windows_core::IInspectable_Vtbl,
    pub Message: unsafe extern "system" fn(
        this: *mut ::core::ffi::c_void,
        result__: *mut ::std::mem::MaybeUninit<::windows_core::HSTRING>,
    ) -> ::windows_core::HRESULT,
}
#[doc(hidden)]
#[repr(transparent)]
#[derive(::core::cmp::PartialEq, ::core::cmp::Eq, ::core::fmt::Debug, ::core::clone::Clone)]
pub struct IBringIntoViewOptions(::windows_core::IUnknown);
unsafe impl ::windows_core::Interface for IBringIntoViewOptions {
    type Vtable = IBringIntoViewOptions_Vtbl;
}
unsafe impl ::windows_core::ComInterface for IBringIntoViewOptions {
    const IID: ::windows_core::GUID =
        ::windows_core::GUID::from_u128(0xeeb4a447_eb9e_5003_a479_b9e3a886b708);
}
#[repr(C)]
#[doc(hidden)]
pub struct IBringIntoViewOptions_Vtbl {
    pub base__: ::windows_core::IInspectable_Vtbl,
    pub AnimationDesired: unsafe extern "system" fn(
        this: *mut ::core::ffi::c_void,
        result__: *mut bool,
    ) -> ::windows_core::HRESULT,
    pub SetAnimationDesired: unsafe extern "system" fn(
        this: *mut ::core::ffi::c_void,
        value: bool,
    ) -> ::windows_core::HRESULT,
    #[cfg(feature = "Windows_Foundation")]
    pub TargetRect: unsafe extern "system" fn(
        this: *mut ::core::ffi::c_void,
        result__: *mut *mut ::core::ffi::c_void,
    ) -> ::windows_core::HRESULT,
    #[cfg(not(feature = "Windows_Foundation"))]
    TargetRect: usize,
    #[cfg(feature = "Windows_Foundation")]
    pub SetTargetRect: unsafe extern "system" fn(
        this: *mut ::core::ffi::c_void,
        value: *mut ::core::ffi::c_void,
    ) -> ::windows_core::HRESULT,
    #[cfg(not(feature = "Windows_Foundation"))]
    SetTargetRect: usize,
    pub HorizontalAlignmentRatio: unsafe extern "system" fn(
        this: *mut ::core::ffi::c_void,
        result__: *mut f64,
    ) -> ::windows_core::HRESULT,
    pub SetHorizontalAlignmentRatio: unsafe extern "system" fn(
        this: *mut ::core::ffi::c_void,
        value: f64,
    ) -> ::windows_core::HRESULT,
    pub VerticalAlignmentRatio: unsafe extern "system" fn(
        this: *mut ::core::ffi::c_void,
        result__: *mut f64,
    ) -> ::windows_core::HRESULT,
    pub SetVerticalAlignmentRatio: unsafe extern "system" fn(
        this: *mut ::core::ffi::c_void,
        value: f64,
    ) -> ::windows_core::HRESULT,
    pub HorizontalOffset: unsafe extern "system" fn(
        this: *mut ::core::ffi::c_void,
        result__: *mut f64,
    ) -> ::windows_core::HRESULT,
    pub SetHorizontalOffset: unsafe extern "system" fn(
        this: *mut ::core::ffi::c_void,
        value: f64,
    ) -> ::windows_core::HRESULT,
    pub VerticalOffset: unsafe extern "system" fn(
        this: *mut ::core::ffi::c_void,
        result__: *mut f64,
    ) -> ::windows_core::HRESULT,
    pub SetVerticalOffset: unsafe extern "system" fn(
        this: *mut ::core::ffi::c_void,
        value: f64,
    ) -> ::windows_core::HRESULT,
}
#[doc(hidden)]
#[repr(transparent)]
#[derive(::core::cmp::PartialEq, ::core::cmp::Eq, ::core::fmt::Debug, ::core::clone::Clone)]
pub struct IBringIntoViewRequestedEventArgs(::windows_core::IUnknown);
unsafe impl ::windows_core::Interface for IBringIntoViewRequestedEventArgs {
    type Vtable = IBringIntoViewRequestedEventArgs_Vtbl;
}
unsafe impl ::windows_core::ComInterface for IBringIntoViewRequestedEventArgs {
    const IID: ::windows_core::GUID =
        ::windows_core::GUID::from_u128(0x807de8f9_b1dc_5a63_8101_5ee966841a27);
}
#[repr(C)]
#[doc(hidden)]
pub struct IBringIntoViewRequestedEventArgs_Vtbl {
    pub base__: ::windows_core::IInspectable_Vtbl,
    pub TargetElement: unsafe extern "system" fn(
        this: *mut ::core::ffi::c_void,
        result__: *mut *mut ::core::ffi::c_void,
    ) -> ::windows_core::HRESULT,
    pub SetTargetElement: unsafe extern "system" fn(
        this: *mut ::core::ffi::c_void,
        value: *mut ::core::ffi::c_void,
    ) -> ::windows_core::HRESULT,
    pub AnimationDesired: unsafe extern "system" fn(
        this: *mut ::core::ffi::c_void,
        result__: *mut bool,
    ) -> ::windows_core::HRESULT,
    pub SetAnimationDesired: unsafe extern "system" fn(
        this: *mut ::core::ffi::c_void,
        value: bool,
    ) -> ::windows_core::HRESULT,
    #[cfg(feature = "Windows_Foundation")]
    pub TargetRect: unsafe extern "system" fn(
        this: *mut ::core::ffi::c_void,
        result__: *mut ::windows::Foundation::Rect,
    ) -> ::windows_core::HRESULT,
    #[cfg(not(feature = "Windows_Foundation"))]
    TargetRect: usize,
    #[cfg(feature = "Windows_Foundation")]
    pub SetTargetRect: unsafe extern "system" fn(
        this: *mut ::core::ffi::c_void,
        value: ::windows::Foundation::Rect,
    ) -> ::windows_core::HRESULT,
    #[cfg(not(feature = "Windows_Foundation"))]
    SetTargetRect: usize,
    pub HorizontalAlignmentRatio: unsafe extern "system" fn(
        this: *mut ::core::ffi::c_void,
        result__: *mut f64,
    ) -> ::windows_core::HRESULT,
    pub VerticalAlignmentRatio: unsafe extern "system" fn(
        this: *mut ::core::ffi::c_void,
        result__: *mut f64,
    ) -> ::windows_core::HRESULT,
    pub HorizontalOffset: unsafe extern "system" fn(
        this: *mut ::core::ffi::c_void,
        result__: *mut f64,
    ) -> ::windows_core::HRESULT,
    pub SetHorizontalOffset: unsafe extern "system" fn(
        this: *mut ::core::ffi::c_void,
        value: f64,
    ) -> ::windows_core::HRESULT,
    pub VerticalOffset: unsafe extern "system" fn(
        this: *mut ::core::ffi::c_void,
        result__: *mut f64,
    ) -> ::windows_core::HRESULT,
    pub SetVerticalOffset: unsafe extern "system" fn(
        this: *mut ::core::ffi::c_void,
        value: f64,
    ) -> ::windows_core::HRESULT,
    pub Handled: unsafe extern "system" fn(
        this: *mut ::core::ffi::c_void,
        result__: *mut bool,
    ) -> ::windows_core::HRESULT,
    pub SetHandled: unsafe extern "system" fn(
        this: *mut ::core::ffi::c_void,
        value: bool,
    ) -> ::windows_core::HRESULT,
}
#[doc(hidden)]
#[repr(transparent)]
#[derive(::core::cmp::PartialEq, ::core::cmp::Eq, ::core::fmt::Debug, ::core::clone::Clone)]
pub struct IBrushTransition(::windows_core::IUnknown);
unsafe impl ::windows_core::Interface for IBrushTransition {
    type Vtable = IBrushTransition_Vtbl;
}
unsafe impl ::windows_core::ComInterface for IBrushTransition {
    const IID: ::windows_core::GUID =
        ::windows_core::GUID::from_u128(0xa996a7ba_4567_5963_a112_76e3c0000204);
}
#[repr(C)]
#[doc(hidden)]
pub struct IBrushTransition_Vtbl {
    pub base__: ::windows_core::IInspectable_Vtbl,
    #[cfg(feature = "Windows_Foundation")]
    pub Duration: unsafe extern "system" fn(
        this: *mut ::core::ffi::c_void,
        result__: *mut ::windows::Foundation::TimeSpan,
    ) -> ::windows_core::HRESULT,
    #[cfg(not(feature = "Windows_Foundation"))]
    Duration: usize,
    #[cfg(feature = "Windows_Foundation")]
    pub SetDuration: unsafe extern "system" fn(
        this: *mut ::core::ffi::c_void,
        value: ::windows::Foundation::TimeSpan,
    ) -> ::windows_core::HRESULT,
    #[cfg(not(feature = "Windows_Foundation"))]
    SetDuration: usize,
}
#[doc(hidden)]
#[repr(transparent)]
#[derive(::core::cmp::PartialEq, ::core::cmp::Eq, ::core::fmt::Debug, ::core::clone::Clone)]
pub struct IBrushTransitionFactory(::windows_core::IUnknown);
unsafe impl ::windows_core::Interface for IBrushTransitionFactory {
    type Vtable = IBrushTransitionFactory_Vtbl;
}
unsafe impl ::windows_core::ComInterface for IBrushTransitionFactory {
    const IID: ::windows_core::GUID =
        ::windows_core::GUID::from_u128(0x13735998_c3b6_5c24_b40a_7b166a6ffc2c);
}
#[repr(C)]
#[doc(hidden)]
pub struct IBrushTransitionFactory_Vtbl {
    pub base__: ::windows_core::IInspectable_Vtbl,
    pub CreateInstance: unsafe extern "system" fn(
        this: *mut ::core::ffi::c_void,
        baseinterface: *mut ::core::ffi::c_void,
        innerinterface: *mut *mut ::core::ffi::c_void,
        result__: *mut *mut ::core::ffi::c_void,
    ) -> ::windows_core::HRESULT,
}
#[doc(hidden)]
#[repr(transparent)]
#[derive(::core::cmp::PartialEq, ::core::cmp::Eq, ::core::fmt::Debug, ::core::clone::Clone)]
pub struct IColorPaletteResources(::windows_core::IUnknown);
unsafe impl ::windows_core::Interface for IColorPaletteResources {
    type Vtable = IColorPaletteResources_Vtbl;
}
unsafe impl ::windows_core::ComInterface for IColorPaletteResources {
    const IID: ::windows_core::GUID =
        ::windows_core::GUID::from_u128(0x1903a03c_1750_54fe_a434_14b227cbe701);
}
#[repr(C)]
#[doc(hidden)]
pub struct IColorPaletteResources_Vtbl {
    pub base__: ::windows_core::IInspectable_Vtbl,
    #[cfg(all(feature = "Windows_Foundation", feature = "Windows_UI"))]
    pub AltHigh: unsafe extern "system" fn(
        this: *mut ::core::ffi::c_void,
        result__: *mut *mut ::core::ffi::c_void,
    ) -> ::windows_core::HRESULT,
    #[cfg(not(all(feature = "Windows_Foundation", feature = "Windows_UI")))]
    AltHigh: usize,
    #[cfg(all(feature = "Windows_Foundation", feature = "Windows_UI"))]
    pub SetAltHigh: unsafe extern "system" fn(
        this: *mut ::core::ffi::c_void,
        value: *mut ::core::ffi::c_void,
    ) -> ::windows_core::HRESULT,
    #[cfg(not(all(feature = "Windows_Foundation", feature = "Windows_UI")))]
    SetAltHigh: usize,
    #[cfg(all(feature = "Windows_Foundation", feature = "Windows_UI"))]
    pub AltLow: unsafe extern "system" fn(
        this: *mut ::core::ffi::c_void,
        result__: *mut *mut ::core::ffi::c_void,
    ) -> ::windows_core::HRESULT,
    #[cfg(not(all(feature = "Windows_Foundation", feature = "Windows_UI")))]
    AltLow: usize,
    #[cfg(all(feature = "Windows_Foundation", feature = "Windows_UI"))]
    pub SetAltLow: unsafe extern "system" fn(
        this: *mut ::core::ffi::c_void,
        value: *mut ::core::ffi::c_void,
    ) -> ::windows_core::HRESULT,
    #[cfg(not(all(feature = "Windows_Foundation", feature = "Windows_UI")))]
    SetAltLow: usize,
    #[cfg(all(feature = "Windows_Foundation", feature = "Windows_UI"))]
    pub AltMedium: unsafe extern "system" fn(
        this: *mut ::core::ffi::c_void,
        result__: *mut *mut ::core::ffi::c_void,
    ) -> ::windows_core::HRESULT,
    #[cfg(not(all(feature = "Windows_Foundation", feature = "Windows_UI")))]
    AltMedium: usize,
    #[cfg(all(feature = "Windows_Foundation", feature = "Windows_UI"))]
    pub SetAltMedium: unsafe extern "system" fn(
        this: *mut ::core::ffi::c_void,
        value: *mut ::core::ffi::c_void,
    ) -> ::windows_core::HRESULT,
    #[cfg(not(all(feature = "Windows_Foundation", feature = "Windows_UI")))]
    SetAltMedium: usize,
    #[cfg(all(feature = "Windows_Foundation", feature = "Windows_UI"))]
    pub AltMediumHigh: unsafe extern "system" fn(
        this: *mut ::core::ffi::c_void,
        result__: *mut *mut ::core::ffi::c_void,
    ) -> ::windows_core::HRESULT,
    #[cfg(not(all(feature = "Windows_Foundation", feature = "Windows_UI")))]
    AltMediumHigh: usize,
    #[cfg(all(feature = "Windows_Foundation", feature = "Windows_UI"))]
    pub SetAltMediumHigh: unsafe extern "system" fn(
        this: *mut ::core::ffi::c_void,
        value: *mut ::core::ffi::c_void,
    ) -> ::windows_core::HRESULT,
    #[cfg(not(all(feature = "Windows_Foundation", feature = "Windows_UI")))]
    SetAltMediumHigh: usize,
    #[cfg(all(feature = "Windows_Foundation", feature = "Windows_UI"))]
    pub AltMediumLow: unsafe extern "system" fn(
        this: *mut ::core::ffi::c_void,
        result__: *mut *mut ::core::ffi::c_void,
    ) -> ::windows_core::HRESULT,
    #[cfg(not(all(feature = "Windows_Foundation", feature = "Windows_UI")))]
    AltMediumLow: usize,
    #[cfg(all(feature = "Windows_Foundation", feature = "Windows_UI"))]
    pub SetAltMediumLow: unsafe extern "system" fn(
        this: *mut ::core::ffi::c_void,
        value: *mut ::core::ffi::c_void,
    ) -> ::windows_core::HRESULT,
    #[cfg(not(all(feature = "Windows_Foundation", feature = "Windows_UI")))]
    SetAltMediumLow: usize,
    #[cfg(all(feature = "Windows_Foundation", feature = "Windows_UI"))]
    pub BaseHigh: unsafe extern "system" fn(
        this: *mut ::core::ffi::c_void,
        result__: *mut *mut ::core::ffi::c_void,
    ) -> ::windows_core::HRESULT,
    #[cfg(not(all(feature = "Windows_Foundation", feature = "Windows_UI")))]
    BaseHigh: usize,
    #[cfg(all(feature = "Windows_Foundation", feature = "Windows_UI"))]
    pub SetBaseHigh: unsafe extern "system" fn(
        this: *mut ::core::ffi::c_void,
        value: *mut ::core::ffi::c_void,
    ) -> ::windows_core::HRESULT,
    #[cfg(not(all(feature = "Windows_Foundation", feature = "Windows_UI")))]
    SetBaseHigh: usize,
    #[cfg(all(feature = "Windows_Foundation", feature = "Windows_UI"))]
    pub BaseLow: unsafe extern "system" fn(
        this: *mut ::core::ffi::c_void,
        result__: *mut *mut ::core::ffi::c_void,
    ) -> ::windows_core::HRESULT,
    #[cfg(not(all(feature = "Windows_Foundation", feature = "Windows_UI")))]
    BaseLow: usize,
    #[cfg(all(feature = "Windows_Foundation", feature = "Windows_UI"))]
    pub SetBaseLow: unsafe extern "system" fn(
        this: *mut ::core::ffi::c_void,
        value: *mut ::core::ffi::c_void,
    ) -> ::windows_core::HRESULT,
    #[cfg(not(all(feature = "Windows_Foundation", feature = "Windows_UI")))]
    SetBaseLow: usize,
    #[cfg(all(feature = "Windows_Foundation", feature = "Windows_UI"))]
    pub BaseMedium: unsafe extern "system" fn(
        this: *mut ::core::ffi::c_void,
        result__: *mut *mut ::core::ffi::c_void,
    ) -> ::windows_core::HRESULT,
    #[cfg(not(all(feature = "Windows_Foundation", feature = "Windows_UI")))]
    BaseMedium: usize,
    #[cfg(all(feature = "Windows_Foundation", feature = "Windows_UI"))]
    pub SetBaseMedium: unsafe extern "system" fn(
        this: *mut ::core::ffi::c_void,
        value: *mut ::core::ffi::c_void,
    ) -> ::windows_core::HRESULT,
    #[cfg(not(all(feature = "Windows_Foundation", feature = "Windows_UI")))]
    SetBaseMedium: usize,
    #[cfg(all(feature = "Windows_Foundation", feature = "Windows_UI"))]
    pub BaseMediumHigh: unsafe extern "system" fn(
        this: *mut ::core::ffi::c_void,
        result__: *mut *mut ::core::ffi::c_void,
    ) -> ::windows_core::HRESULT,
    #[cfg(not(all(feature = "Windows_Foundation", feature = "Windows_UI")))]
    BaseMediumHigh: usize,
    #[cfg(all(feature = "Windows_Foundation", feature = "Windows_UI"))]
    pub SetBaseMediumHigh: unsafe extern "system" fn(
        this: *mut ::core::ffi::c_void,
        value: *mut ::core::ffi::c_void,
    ) -> ::windows_core::HRESULT,
    #[cfg(not(all(feature = "Windows_Foundation", feature = "Windows_UI")))]
    SetBaseMediumHigh: usize,
    #[cfg(all(feature = "Windows_Foundation", feature = "Windows_UI"))]
    pub BaseMediumLow: unsafe extern "system" fn(
        this: *mut ::core::ffi::c_void,
        result__: *mut *mut ::core::ffi::c_void,
    ) -> ::windows_core::HRESULT,
    #[cfg(not(all(feature = "Windows_Foundation", feature = "Windows_UI")))]
    BaseMediumLow: usize,
    #[cfg(all(feature = "Windows_Foundation", feature = "Windows_UI"))]
    pub SetBaseMediumLow: unsafe extern "system" fn(
        this: *mut ::core::ffi::c_void,
        value: *mut ::core::ffi::c_void,
    ) -> ::windows_core::HRESULT,
    #[cfg(not(all(feature = "Windows_Foundation", feature = "Windows_UI")))]
    SetBaseMediumLow: usize,
    #[cfg(all(feature = "Windows_Foundation", feature = "Windows_UI"))]
    pub ChromeAltLow: unsafe extern "system" fn(
        this: *mut ::core::ffi::c_void,
        result__: *mut *mut ::core::ffi::c_void,
    ) -> ::windows_core::HRESULT,
    #[cfg(not(all(feature = "Windows_Foundation", feature = "Windows_UI")))]
    ChromeAltLow: usize,
    #[cfg(all(feature = "Windows_Foundation", feature = "Windows_UI"))]
    pub SetChromeAltLow: unsafe extern "system" fn(
        this: *mut ::core::ffi::c_void,
        value: *mut ::core::ffi::c_void,
    ) -> ::windows_core::HRESULT,
    #[cfg(not(all(feature = "Windows_Foundation", feature = "Windows_UI")))]
    SetChromeAltLow: usize,
    #[cfg(all(feature = "Windows_Foundation", feature = "Windows_UI"))]
    pub ChromeBlackHigh: unsafe extern "system" fn(
        this: *mut ::core::ffi::c_void,
        result__: *mut *mut ::core::ffi::c_void,
    ) -> ::windows_core::HRESULT,
    #[cfg(not(all(feature = "Windows_Foundation", feature = "Windows_UI")))]
    ChromeBlackHigh: usize,
    #[cfg(all(feature = "Windows_Foundation", feature = "Windows_UI"))]
    pub SetChromeBlackHigh: unsafe extern "system" fn(
        this: *mut ::core::ffi::c_void,
        value: *mut ::core::ffi::c_void,
    ) -> ::windows_core::HRESULT,
    #[cfg(not(all(feature = "Windows_Foundation", feature = "Windows_UI")))]
    SetChromeBlackHigh: usize,
    #[cfg(all(feature = "Windows_Foundation", feature = "Windows_UI"))]
    pub ChromeBlackLow: unsafe extern "system" fn(
        this: *mut ::core::ffi::c_void,
        result__: *mut *mut ::core::ffi::c_void,
    ) -> ::windows_core::HRESULT,
    #[cfg(not(all(feature = "Windows_Foundation", feature = "Windows_UI")))]
    ChromeBlackLow: usize,
    #[cfg(all(feature = "Windows_Foundation", feature = "Windows_UI"))]
    pub SetChromeBlackLow: unsafe extern "system" fn(
        this: *mut ::core::ffi::c_void,
        value: *mut ::core::ffi::c_void,
    ) -> ::windows_core::HRESULT,
    #[cfg(not(all(feature = "Windows_Foundation", feature = "Windows_UI")))]
    SetChromeBlackLow: usize,
    #[cfg(all(feature = "Windows_Foundation", feature = "Windows_UI"))]
    pub ChromeBlackMediumLow: unsafe extern "system" fn(
        this: *mut ::core::ffi::c_void,
        result__: *mut *mut ::core::ffi::c_void,
    ) -> ::windows_core::HRESULT,
    #[cfg(not(all(feature = "Windows_Foundation", feature = "Windows_UI")))]
    ChromeBlackMediumLow: usize,
    #[cfg(all(feature = "Windows_Foundation", feature = "Windows_UI"))]
    pub SetChromeBlackMediumLow: unsafe extern "system" fn(
        this: *mut ::core::ffi::c_void,
        value: *mut ::core::ffi::c_void,
    ) -> ::windows_core::HRESULT,
    #[cfg(not(all(feature = "Windows_Foundation", feature = "Windows_UI")))]
    SetChromeBlackMediumLow: usize,
    #[cfg(all(feature = "Windows_Foundation", feature = "Windows_UI"))]
    pub ChromeBlackMedium: unsafe extern "system" fn(
        this: *mut ::core::ffi::c_void,
        result__: *mut *mut ::core::ffi::c_void,
    ) -> ::windows_core::HRESULT,
    #[cfg(not(all(feature = "Windows_Foundation", feature = "Windows_UI")))]
    ChromeBlackMedium: usize,
    #[cfg(all(feature = "Windows_Foundation", feature = "Windows_UI"))]
    pub SetChromeBlackMedium: unsafe extern "system" fn(
        this: *mut ::core::ffi::c_void,
        value: *mut ::core::ffi::c_void,
    ) -> ::windows_core::HRESULT,
    #[cfg(not(all(feature = "Windows_Foundation", feature = "Windows_UI")))]
    SetChromeBlackMedium: usize,
    #[cfg(all(feature = "Windows_Foundation", feature = "Windows_UI"))]
    pub ChromeDisabledHigh: unsafe extern "system" fn(
        this: *mut ::core::ffi::c_void,
        result__: *mut *mut ::core::ffi::c_void,
    ) -> ::windows_core::HRESULT,
    #[cfg(not(all(feature = "Windows_Foundation", feature = "Windows_UI")))]
    ChromeDisabledHigh: usize,
    #[cfg(all(feature = "Windows_Foundation", feature = "Windows_UI"))]
    pub SetChromeDisabledHigh: unsafe extern "system" fn(
        this: *mut ::core::ffi::c_void,
        value: *mut ::core::ffi::c_void,
    ) -> ::windows_core::HRESULT,
    #[cfg(not(all(feature = "Windows_Foundation", feature = "Windows_UI")))]
    SetChromeDisabledHigh: usize,
    #[cfg(all(feature = "Windows_Foundation", feature = "Windows_UI"))]
    pub ChromeDisabledLow: unsafe extern "system" fn(
        this: *mut ::core::ffi::c_void,
        result__: *mut *mut ::core::ffi::c_void,
    ) -> ::windows_core::HRESULT,
    #[cfg(not(all(feature = "Windows_Foundation", feature = "Windows_UI")))]
    ChromeDisabledLow: usize,
    #[cfg(all(feature = "Windows_Foundation", feature = "Windows_UI"))]
    pub SetChromeDisabledLow: unsafe extern "system" fn(
        this: *mut ::core::ffi::c_void,
        value: *mut ::core::ffi::c_void,
    ) -> ::windows_core::HRESULT,
    #[cfg(not(all(feature = "Windows_Foundation", feature = "Windows_UI")))]
    SetChromeDisabledLow: usize,
    #[cfg(all(feature = "Windows_Foundation", feature = "Windows_UI"))]
    pub ChromeHigh: unsafe extern "system" fn(
        this: *mut ::core::ffi::c_void,
        result__: *mut *mut ::core::ffi::c_void,
    ) -> ::windows_core::HRESULT,
    #[cfg(not(all(feature = "Windows_Foundation", feature = "Windows_UI")))]
    ChromeHigh: usize,
    #[cfg(all(feature = "Windows_Foundation", feature = "Windows_UI"))]
    pub SetChromeHigh: unsafe extern "system" fn(
        this: *mut ::core::ffi::c_void,
        value: *mut ::core::ffi::c_void,
    ) -> ::windows_core::HRESULT,
    #[cfg(not(all(feature = "Windows_Foundation", feature = "Windows_UI")))]
    SetChromeHigh: usize,
    #[cfg(all(feature = "Windows_Foundation", feature = "Windows_UI"))]
    pub ChromeLow: unsafe extern "system" fn(
        this: *mut ::core::ffi::c_void,
        result__: *mut *mut ::core::ffi::c_void,
    ) -> ::windows_core::HRESULT,
    #[cfg(not(all(feature = "Windows_Foundation", feature = "Windows_UI")))]
    ChromeLow: usize,
    #[cfg(all(feature = "Windows_Foundation", feature = "Windows_UI"))]
    pub SetChromeLow: unsafe extern "system" fn(
        this: *mut ::core::ffi::c_void,
        value: *mut ::core::ffi::c_void,
    ) -> ::windows_core::HRESULT,
    #[cfg(not(all(feature = "Windows_Foundation", feature = "Windows_UI")))]
    SetChromeLow: usize,
    #[cfg(all(feature = "Windows_Foundation", feature = "Windows_UI"))]
    pub ChromeMedium: unsafe extern "system" fn(
        this: *mut ::core::ffi::c_void,
        result__: *mut *mut ::core::ffi::c_void,
    ) -> ::windows_core::HRESULT,
    #[cfg(not(all(feature = "Windows_Foundation", feature = "Windows_UI")))]
    ChromeMedium: usize,
    #[cfg(all(feature = "Windows_Foundation", feature = "Windows_UI"))]
    pub SetChromeMedium: unsafe extern "system" fn(
        this: *mut ::core::ffi::c_void,
        value: *mut ::core::ffi::c_void,
    ) -> ::windows_core::HRESULT,
    #[cfg(not(all(feature = "Windows_Foundation", feature = "Windows_UI")))]
    SetChromeMedium: usize,
    #[cfg(all(feature = "Windows_Foundation", feature = "Windows_UI"))]
    pub ChromeMediumLow: unsafe extern "system" fn(
        this: *mut ::core::ffi::c_void,
        result__: *mut *mut ::core::ffi::c_void,
    ) -> ::windows_core::HRESULT,
    #[cfg(not(all(feature = "Windows_Foundation", feature = "Windows_UI")))]
    ChromeMediumLow: usize,
    #[cfg(all(feature = "Windows_Foundation", feature = "Windows_UI"))]
    pub SetChromeMediumLow: unsafe extern "system" fn(
        this: *mut ::core::ffi::c_void,
        value: *mut ::core::ffi::c_void,
    ) -> ::windows_core::HRESULT,
    #[cfg(not(all(feature = "Windows_Foundation", feature = "Windows_UI")))]
    SetChromeMediumLow: usize,
    #[cfg(all(feature = "Windows_Foundation", feature = "Windows_UI"))]
    pub ChromeWhite: unsafe extern "system" fn(
        this: *mut ::core::ffi::c_void,
        result__: *mut *mut ::core::ffi::c_void,
    ) -> ::windows_core::HRESULT,
    #[cfg(not(all(feature = "Windows_Foundation", feature = "Windows_UI")))]
    ChromeWhite: usize,
    #[cfg(all(feature = "Windows_Foundation", feature = "Windows_UI"))]
    pub SetChromeWhite: unsafe extern "system" fn(
        this: *mut ::core::ffi::c_void,
        value: *mut ::core::ffi::c_void,
    ) -> ::windows_core::HRESULT,
    #[cfg(not(all(feature = "Windows_Foundation", feature = "Windows_UI")))]
    SetChromeWhite: usize,
    #[cfg(all(feature = "Windows_Foundation", feature = "Windows_UI"))]
    pub ChromeGray: unsafe extern "system" fn(
        this: *mut ::core::ffi::c_void,
        result__: *mut *mut ::core::ffi::c_void,
    ) -> ::windows_core::HRESULT,
    #[cfg(not(all(feature = "Windows_Foundation", feature = "Windows_UI")))]
    ChromeGray: usize,
    #[cfg(all(feature = "Windows_Foundation", feature = "Windows_UI"))]
    pub SetChromeGray: unsafe extern "system" fn(
        this: *mut ::core::ffi::c_void,
        value: *mut ::core::ffi::c_void,
    ) -> ::windows_core::HRESULT,
    #[cfg(not(all(feature = "Windows_Foundation", feature = "Windows_UI")))]
    SetChromeGray: usize,
    #[cfg(all(feature = "Windows_Foundation", feature = "Windows_UI"))]
    pub ListLow: unsafe extern "system" fn(
        this: *mut ::core::ffi::c_void,
        result__: *mut *mut ::core::ffi::c_void,
    ) -> ::windows_core::HRESULT,
    #[cfg(not(all(feature = "Windows_Foundation", feature = "Windows_UI")))]
    ListLow: usize,
    #[cfg(all(feature = "Windows_Foundation", feature = "Windows_UI"))]
    pub SetListLow: unsafe extern "system" fn(
        this: *mut ::core::ffi::c_void,
        value: *mut ::core::ffi::c_void,
    ) -> ::windows_core::HRESULT,
    #[cfg(not(all(feature = "Windows_Foundation", feature = "Windows_UI")))]
    SetListLow: usize,
    #[cfg(all(feature = "Windows_Foundation", feature = "Windows_UI"))]
    pub ListMedium: unsafe extern "system" fn(
        this: *mut ::core::ffi::c_void,
        result__: *mut *mut ::core::ffi::c_void,
    ) -> ::windows_core::HRESULT,
    #[cfg(not(all(feature = "Windows_Foundation", feature = "Windows_UI")))]
    ListMedium: usize,
    #[cfg(all(feature = "Windows_Foundation", feature = "Windows_UI"))]
    pub SetListMedium: unsafe extern "system" fn(
        this: *mut ::core::ffi::c_void,
        value: *mut ::core::ffi::c_void,
    ) -> ::windows_core::HRESULT,
    #[cfg(not(all(feature = "Windows_Foundation", feature = "Windows_UI")))]
    SetListMedium: usize,
    #[cfg(all(feature = "Windows_Foundation", feature = "Windows_UI"))]
    pub ErrorText: unsafe extern "system" fn(
        this: *mut ::core::ffi::c_void,
        result__: *mut *mut ::core::ffi::c_void,
    ) -> ::windows_core::HRESULT,
    #[cfg(not(all(feature = "Windows_Foundation", feature = "Windows_UI")))]
    ErrorText: usize,
    #[cfg(all(feature = "Windows_Foundation", feature = "Windows_UI"))]
    pub SetErrorText: unsafe extern "system" fn(
        this: *mut ::core::ffi::c_void,
        value: *mut ::core::ffi::c_void,
    ) -> ::windows_core::HRESULT,
    #[cfg(not(all(feature = "Windows_Foundation", feature = "Windows_UI")))]
    SetErrorText: usize,
    #[cfg(all(feature = "Windows_Foundation", feature = "Windows_UI"))]
    pub Accent: unsafe extern "system" fn(
        this: *mut ::core::ffi::c_void,
        result__: *mut *mut ::core::ffi::c_void,
    ) -> ::windows_core::HRESULT,
    #[cfg(not(all(feature = "Windows_Foundation", feature = "Windows_UI")))]
    Accent: usize,
    #[cfg(all(feature = "Windows_Foundation", feature = "Windows_UI"))]
    pub SetAccent: unsafe extern "system" fn(
        this: *mut ::core::ffi::c_void,
        value: *mut ::core::ffi::c_void,
    ) -> ::windows_core::HRESULT,
    #[cfg(not(all(feature = "Windows_Foundation", feature = "Windows_UI")))]
    SetAccent: usize,
}
#[doc(hidden)]
#[repr(transparent)]
#[derive(::core::cmp::PartialEq, ::core::cmp::Eq, ::core::fmt::Debug, ::core::clone::Clone)]
pub struct IColorPaletteResourcesFactory(::windows_core::IUnknown);
unsafe impl ::windows_core::Interface for IColorPaletteResourcesFactory {
    type Vtable = IColorPaletteResourcesFactory_Vtbl;
}
unsafe impl ::windows_core::ComInterface for IColorPaletteResourcesFactory {
    const IID: ::windows_core::GUID =
        ::windows_core::GUID::from_u128(0x32fde185_8544_59c0_9e0a_e6e0bad9edcf);
}
#[repr(C)]
#[doc(hidden)]
pub struct IColorPaletteResourcesFactory_Vtbl {
    pub base__: ::windows_core::IInspectable_Vtbl,
    pub CreateInstance: unsafe extern "system" fn(
        this: *mut ::core::ffi::c_void,
        baseinterface: *mut ::core::ffi::c_void,
        innerinterface: *mut *mut ::core::ffi::c_void,
        result__: *mut *mut ::core::ffi::c_void,
    ) -> ::windows_core::HRESULT,
}
#[doc(hidden)]
#[repr(transparent)]
#[derive(::core::cmp::PartialEq, ::core::cmp::Eq, ::core::fmt::Debug, ::core::clone::Clone)]
pub struct ICornerRadiusHelper(::windows_core::IUnknown);
unsafe impl ::windows_core::Interface for ICornerRadiusHelper {
    type Vtable = ICornerRadiusHelper_Vtbl;
}
unsafe impl ::windows_core::ComInterface for ICornerRadiusHelper {
    const IID: ::windows_core::GUID =
        ::windows_core::GUID::from_u128(0xdfcc382d_cfa8_5614_a35a_4091d1a81c9e);
}
#[repr(C)]
#[doc(hidden)]
pub struct ICornerRadiusHelper_Vtbl {
    pub base__: ::windows_core::IInspectable_Vtbl,
}
#[doc(hidden)]
#[repr(transparent)]
#[derive(::core::cmp::PartialEq, ::core::cmp::Eq, ::core::fmt::Debug, ::core::clone::Clone)]
pub struct ICornerRadiusHelperStatics(::windows_core::IUnknown);
unsafe impl ::windows_core::Interface for ICornerRadiusHelperStatics {
    type Vtable = ICornerRadiusHelperStatics_Vtbl;
}
unsafe impl ::windows_core::ComInterface for ICornerRadiusHelperStatics {
    const IID: ::windows_core::GUID =
        ::windows_core::GUID::from_u128(0x77352882_894b_5ded_b54c_a86105e4e068);
}
#[repr(C)]
#[doc(hidden)]
pub struct ICornerRadiusHelperStatics_Vtbl {
    pub base__: ::windows_core::IInspectable_Vtbl,
    pub FromRadii: unsafe extern "system" fn(
        this: *mut ::core::ffi::c_void,
        topleft: f64,
        topright: f64,
        bottomright: f64,
        bottomleft: f64,
        result__: *mut CornerRadius,
    ) -> ::windows_core::HRESULT,
    pub FromUniformRadius: unsafe extern "system" fn(
        this: *mut ::core::ffi::c_void,
        uniformradius: f64,
        result__: *mut CornerRadius,
    ) -> ::windows_core::HRESULT,
}
#[doc(hidden)]
#[repr(transparent)]
#[derive(::core::cmp::PartialEq, ::core::cmp::Eq, ::core::fmt::Debug, ::core::clone::Clone)]
pub struct IDataContextChangedEventArgs(::windows_core::IUnknown);
unsafe impl ::windows_core::Interface for IDataContextChangedEventArgs {
    type Vtable = IDataContextChangedEventArgs_Vtbl;
}
unsafe impl ::windows_core::ComInterface for IDataContextChangedEventArgs {
    const IID: ::windows_core::GUID =
        ::windows_core::GUID::from_u128(0xa1be80f4_cf83_5022_b113_9233f1d4fafa);
}
#[repr(C)]
#[doc(hidden)]
pub struct IDataContextChangedEventArgs_Vtbl {
    pub base__: ::windows_core::IInspectable_Vtbl,
    pub NewValue: unsafe extern "system" fn(
        this: *mut ::core::ffi::c_void,
        result__: *mut *mut ::core::ffi::c_void,
    ) -> ::windows_core::HRESULT,
    pub Handled: unsafe extern "system" fn(
        this: *mut ::core::ffi::c_void,
        result__: *mut bool,
    ) -> ::windows_core::HRESULT,
    pub SetHandled: unsafe extern "system" fn(
        this: *mut ::core::ffi::c_void,
        value: bool,
    ) -> ::windows_core::HRESULT,
}
#[doc(hidden)]
#[repr(transparent)]
#[derive(::core::cmp::PartialEq, ::core::cmp::Eq, ::core::fmt::Debug, ::core::clone::Clone)]
pub struct IDataTemplate(::windows_core::IUnknown);
unsafe impl ::windows_core::Interface for IDataTemplate {
    type Vtable = IDataTemplate_Vtbl;
}
unsafe impl ::windows_core::ComInterface for IDataTemplate {
    const IID: ::windows_core::GUID =
        ::windows_core::GUID::from_u128(0x08fa70fa_ee75_5e92_a101_f52d0e1e9fab);
}
#[repr(C)]
#[doc(hidden)]
pub struct IDataTemplate_Vtbl {
    pub base__: ::windows_core::IInspectable_Vtbl,
    pub LoadContent: unsafe extern "system" fn(
        this: *mut ::core::ffi::c_void,
        result__: *mut *mut ::core::ffi::c_void,
    ) -> ::windows_core::HRESULT,
}
#[repr(transparent)]
#[derive(::core::cmp::PartialEq, ::core::cmp::Eq, ::core::fmt::Debug, ::core::clone::Clone)]
pub struct IDataTemplateExtension(::windows_core::IUnknown);
impl IDataTemplateExtension {
    pub fn ResetTemplate(&self) -> ::windows_core::Result<()> {
        let this = self;
        unsafe {
            (::windows_core::Interface::vtable(this).ResetTemplate)(
                ::windows_core::Interface::as_raw(this),
            )
            .ok()
        }
    }
    pub fn ProcessBinding(&self, phase: u32) -> ::windows_core::Result<bool> {
        let this = self;
        unsafe {
            let mut result__ = ::std::mem::zeroed();
            (::windows_core::Interface::vtable(this).ProcessBinding)(
                ::windows_core::Interface::as_raw(this),
                phase,
                &mut result__,
            )
            .from_abi(result__)
        }
    }
    #[doc = "Required features: `\"Microsoft_UI_Xaml_Controls\"`"]
    #[cfg(feature = "Microsoft_UI_Xaml_Controls")]
    pub fn ProcessBindings<P0>(&self, arg: P0) -> ::windows_core::Result<i32>
    where
        P0: ::windows_core::IntoParam<Controls::ContainerContentChangingEventArgs>,
    {
        let this = self;
        unsafe {
            let mut result__ = ::std::mem::zeroed();
            (::windows_core::Interface::vtable(this).ProcessBindings)(
                ::windows_core::Interface::as_raw(this),
                arg.into_param().abi(),
                &mut result__,
            )
            .from_abi(result__)
        }
    }
}
::windows_core::imp::interface_hierarchy!(
    IDataTemplateExtension,
    ::windows_core::IUnknown,
    ::windows_core::IInspectable
);
impl ::windows_core::RuntimeType for IDataTemplateExtension {
    const SIGNATURE: ::windows_core::imp::ConstBuffer =
        ::windows_core::imp::ConstBuffer::for_interface::<Self>();
}
unsafe impl ::windows_core::Interface for IDataTemplateExtension {
    type Vtable = IDataTemplateExtension_Vtbl;
}
unsafe impl ::windows_core::ComInterface for IDataTemplateExtension {
    const IID: ::windows_core::GUID =
        ::windows_core::GUID::from_u128(0x351e63c4_8fa3_5cc3_b073_7f84baa6485d);
}
#[repr(C)]
#[doc(hidden)]
pub struct IDataTemplateExtension_Vtbl {
    pub base__: ::windows_core::IInspectable_Vtbl,
    pub ResetTemplate:
        unsafe extern "system" fn(this: *mut ::core::ffi::c_void) -> ::windows_core::HRESULT,
    pub ProcessBinding: unsafe extern "system" fn(
        this: *mut ::core::ffi::c_void,
        phase: u32,
        result__: *mut bool,
    ) -> ::windows_core::HRESULT,
    #[cfg(feature = "Microsoft_UI_Xaml_Controls")]
    pub ProcessBindings: unsafe extern "system" fn(
        this: *mut ::core::ffi::c_void,
        arg: *mut ::core::ffi::c_void,
        result__: *mut i32,
    ) -> ::windows_core::HRESULT,
    #[cfg(not(feature = "Microsoft_UI_Xaml_Controls"))]
    ProcessBindings: usize,
}
#[doc(hidden)]
#[repr(transparent)]
#[derive(::core::cmp::PartialEq, ::core::cmp::Eq, ::core::fmt::Debug, ::core::clone::Clone)]
pub struct IDataTemplateFactory(::windows_core::IUnknown);
unsafe impl ::windows_core::Interface for IDataTemplateFactory {
    type Vtable = IDataTemplateFactory_Vtbl;
}
unsafe impl ::windows_core::ComInterface for IDataTemplateFactory {
    const IID: ::windows_core::GUID =
        ::windows_core::GUID::from_u128(0xd8e8249d_305b_5ca5_acf8_3e1beffd0219);
}
#[repr(C)]
#[doc(hidden)]
pub struct IDataTemplateFactory_Vtbl {
    pub base__: ::windows_core::IInspectable_Vtbl,
    pub CreateInstance: unsafe extern "system" fn(
        this: *mut ::core::ffi::c_void,
        baseinterface: *mut ::core::ffi::c_void,
        innerinterface: *mut *mut ::core::ffi::c_void,
        result__: *mut *mut ::core::ffi::c_void,
    ) -> ::windows_core::HRESULT,
}
#[doc(hidden)]
#[repr(transparent)]
#[derive(::core::cmp::PartialEq, ::core::cmp::Eq, ::core::fmt::Debug, ::core::clone::Clone)]
pub struct IDataTemplateKey(::windows_core::IUnknown);
unsafe impl ::windows_core::Interface for IDataTemplateKey {
    type Vtable = IDataTemplateKey_Vtbl;
}
unsafe impl ::windows_core::ComInterface for IDataTemplateKey {
    const IID: ::windows_core::GUID =
        ::windows_core::GUID::from_u128(0x6e704a95_4b2f_5ba8_ada5_1261c832baed);
}
#[repr(C)]
#[doc(hidden)]
pub struct IDataTemplateKey_Vtbl {
    pub base__: ::windows_core::IInspectable_Vtbl,
    pub DataType: unsafe extern "system" fn(
        this: *mut ::core::ffi::c_void,
        result__: *mut *mut ::core::ffi::c_void,
    ) -> ::windows_core::HRESULT,
    pub SetDataType: unsafe extern "system" fn(
        this: *mut ::core::ffi::c_void,
        value: *mut ::core::ffi::c_void,
    ) -> ::windows_core::HRESULT,
}
#[doc(hidden)]
#[repr(transparent)]
#[derive(::core::cmp::PartialEq, ::core::cmp::Eq, ::core::fmt::Debug, ::core::clone::Clone)]
pub struct IDataTemplateKeyFactory(::windows_core::IUnknown);
unsafe impl ::windows_core::Interface for IDataTemplateKeyFactory {
    type Vtable = IDataTemplateKeyFactory_Vtbl;
}
unsafe impl ::windows_core::ComInterface for IDataTemplateKeyFactory {
    const IID: ::windows_core::GUID =
        ::windows_core::GUID::from_u128(0x13b2f604_eebc_5daa_8a5b_460c4fabdeb7);
}
#[repr(C)]
#[doc(hidden)]
pub struct IDataTemplateKeyFactory_Vtbl {
    pub base__: ::windows_core::IInspectable_Vtbl,
    pub CreateInstance: unsafe extern "system" fn(
        this: *mut ::core::ffi::c_void,
        baseinterface: *mut ::core::ffi::c_void,
        innerinterface: *mut *mut ::core::ffi::c_void,
        result__: *mut *mut ::core::ffi::c_void,
    ) -> ::windows_core::HRESULT,
    pub CreateInstanceWithType: unsafe extern "system" fn(
        this: *mut ::core::ffi::c_void,
        datatype: *mut ::core::ffi::c_void,
        baseinterface: *mut ::core::ffi::c_void,
        innerinterface: *mut *mut ::core::ffi::c_void,
        result__: *mut *mut ::core::ffi::c_void,
    ) -> ::windows_core::HRESULT,
}
#[doc(hidden)]
#[repr(transparent)]
#[derive(::core::cmp::PartialEq, ::core::cmp::Eq, ::core::fmt::Debug, ::core::clone::Clone)]
pub struct IDataTemplateStatics(::windows_core::IUnknown);
unsafe impl ::windows_core::Interface for IDataTemplateStatics {
    type Vtable = IDataTemplateStatics_Vtbl;
}
unsafe impl ::windows_core::ComInterface for IDataTemplateStatics {
    const IID: ::windows_core::GUID =
        ::windows_core::GUID::from_u128(0xcf6ada69_4bf1_5f2d_8bdb_09ea1a26f975);
}
#[repr(C)]
#[doc(hidden)]
pub struct IDataTemplateStatics_Vtbl {
    pub base__: ::windows_core::IInspectable_Vtbl,
    pub ExtensionInstanceProperty: unsafe extern "system" fn(
        this: *mut ::core::ffi::c_void,
        result__: *mut *mut ::core::ffi::c_void,
    ) -> ::windows_core::HRESULT,
    pub GetExtensionInstance: unsafe extern "system" fn(
        this: *mut ::core::ffi::c_void,
        element: *mut ::core::ffi::c_void,
        result__: *mut *mut ::core::ffi::c_void,
    ) -> ::windows_core::HRESULT,
    pub SetExtensionInstance: unsafe extern "system" fn(
        this: *mut ::core::ffi::c_void,
        element: *mut ::core::ffi::c_void,
        value: *mut ::core::ffi::c_void,
    ) -> ::windows_core::HRESULT,
}
#[doc(hidden)]
#[repr(transparent)]
#[derive(::core::cmp::PartialEq, ::core::cmp::Eq, ::core::fmt::Debug, ::core::clone::Clone)]
pub struct IDebugSettings(::windows_core::IUnknown);
unsafe impl ::windows_core::Interface for IDebugSettings {
    type Vtable = IDebugSettings_Vtbl;
}
unsafe impl ::windows_core::ComInterface for IDebugSettings {
    const IID: ::windows_core::GUID =
        ::windows_core::GUID::from_u128(0x4004943b_2509_5476_bba2_3fe05ecf615d);
}
#[repr(C)]
#[doc(hidden)]
pub struct IDebugSettings_Vtbl {
    pub base__: ::windows_core::IInspectable_Vtbl,
    pub EnableFrameRateCounter: unsafe extern "system" fn(
        this: *mut ::core::ffi::c_void,
        result__: *mut bool,
    ) -> ::windows_core::HRESULT,
    pub SetEnableFrameRateCounter: unsafe extern "system" fn(
        this: *mut ::core::ffi::c_void,
        value: bool,
    ) -> ::windows_core::HRESULT,
    pub IsBindingTracingEnabled: unsafe extern "system" fn(
        this: *mut ::core::ffi::c_void,
        result__: *mut bool,
    ) -> ::windows_core::HRESULT,
    pub SetIsBindingTracingEnabled: unsafe extern "system" fn(
        this: *mut ::core::ffi::c_void,
        value: bool,
    ) -> ::windows_core::HRESULT,
    pub IsTextPerformanceVisualizationEnabled: unsafe extern "system" fn(
        this: *mut ::core::ffi::c_void,
        result__: *mut bool,
    )
        -> ::windows_core::HRESULT,
    pub SetIsTextPerformanceVisualizationEnabled:
        unsafe extern "system" fn(
            this: *mut ::core::ffi::c_void,
            value: bool,
        ) -> ::windows_core::HRESULT,
    pub FailFastOnErrors: unsafe extern "system" fn(
        this: *mut ::core::ffi::c_void,
        result__: *mut bool,
    ) -> ::windows_core::HRESULT,
    pub SetFailFastOnErrors: unsafe extern "system" fn(
        this: *mut ::core::ffi::c_void,
        value: bool,
    ) -> ::windows_core::HRESULT,
    #[cfg(feature = "Windows_Foundation")]
    pub BindingFailed: unsafe extern "system" fn(
        this: *mut ::core::ffi::c_void,
        handler: *mut ::core::ffi::c_void,
        result__: *mut ::windows::Foundation::EventRegistrationToken,
    ) -> ::windows_core::HRESULT,
    #[cfg(not(feature = "Windows_Foundation"))]
    BindingFailed: usize,
    #[cfg(feature = "Windows_Foundation")]
    pub RemoveBindingFailed: unsafe extern "system" fn(
        this: *mut ::core::ffi::c_void,
        token: ::windows::Foundation::EventRegistrationToken,
    ) -> ::windows_core::HRESULT,
    #[cfg(not(feature = "Windows_Foundation"))]
    RemoveBindingFailed: usize,
}
#[doc(hidden)]
#[repr(transparent)]
#[derive(::core::cmp::PartialEq, ::core::cmp::Eq, ::core::fmt::Debug, ::core::clone::Clone)]
pub struct IDebugSettings2(::windows_core::IUnknown);
unsafe impl ::windows_core::Interface for IDebugSettings2 {
    type Vtable = IDebugSettings2_Vtbl;
}
unsafe impl ::windows_core::ComInterface for IDebugSettings2 {
    const IID: ::windows_core::GUID =
        ::windows_core::GUID::from_u128(0x6dfb6f51_d2f8_59c4_8bca_4410929577d0);
}
#[repr(C)]
#[doc(hidden)]
pub struct IDebugSettings2_Vtbl {
    pub base__: ::windows_core::IInspectable_Vtbl,
    pub IsXamlResourceReferenceTracingEnabled: unsafe extern "system" fn(
        this: *mut ::core::ffi::c_void,
        result__: *mut bool,
    )
        -> ::windows_core::HRESULT,
    pub SetIsXamlResourceReferenceTracingEnabled:
        unsafe extern "system" fn(
            this: *mut ::core::ffi::c_void,
            value: bool,
        ) -> ::windows_core::HRESULT,
    #[cfg(feature = "Windows_Foundation")]
    pub XamlResourceReferenceFailed: unsafe extern "system" fn(
        this: *mut ::core::ffi::c_void,
        handler: *mut ::core::ffi::c_void,
        result__: *mut ::windows::Foundation::EventRegistrationToken,
    ) -> ::windows_core::HRESULT,
    #[cfg(not(feature = "Windows_Foundation"))]
    XamlResourceReferenceFailed: usize,
    #[cfg(feature = "Windows_Foundation")]
    pub RemoveXamlResourceReferenceFailed: unsafe extern "system" fn(
        this: *mut ::core::ffi::c_void,
        token: ::windows::Foundation::EventRegistrationToken,
    )
        -> ::windows_core::HRESULT,
    #[cfg(not(feature = "Windows_Foundation"))]
    RemoveXamlResourceReferenceFailed: usize,
}
#[doc(hidden)]
#[repr(transparent)]
#[derive(::core::cmp::PartialEq, ::core::cmp::Eq, ::core::fmt::Debug, ::core::clone::Clone)]
pub struct IDependencyObject(::windows_core::IUnknown);
unsafe impl ::windows_core::Interface for IDependencyObject {
    type Vtable = IDependencyObject_Vtbl;
}
unsafe impl ::windows_core::ComInterface for IDependencyObject {
    const IID: ::windows_core::GUID =
        ::windows_core::GUID::from_u128(0xe7beaee7_160e_50f7_8789_d63463f979fa);
}
#[repr(C)]
#[doc(hidden)]
pub struct IDependencyObject_Vtbl {
    pub base__: ::windows_core::IInspectable_Vtbl,
    pub GetValue: unsafe extern "system" fn(
        this: *mut ::core::ffi::c_void,
        dp: *mut ::core::ffi::c_void,
        result__: *mut *mut ::core::ffi::c_void,
    ) -> ::windows_core::HRESULT,
    pub SetValue: unsafe extern "system" fn(
        this: *mut ::core::ffi::c_void,
        dp: *mut ::core::ffi::c_void,
        value: *mut ::core::ffi::c_void,
    ) -> ::windows_core::HRESULT,
    pub ClearValue: unsafe extern "system" fn(
        this: *mut ::core::ffi::c_void,
        dp: *mut ::core::ffi::c_void,
    ) -> ::windows_core::HRESULT,
    pub ReadLocalValue: unsafe extern "system" fn(
        this: *mut ::core::ffi::c_void,
        dp: *mut ::core::ffi::c_void,
        result__: *mut *mut ::core::ffi::c_void,
    ) -> ::windows_core::HRESULT,
    pub GetAnimationBaseValue: unsafe extern "system" fn(
        this: *mut ::core::ffi::c_void,
        dp: *mut ::core::ffi::c_void,
        result__: *mut *mut ::core::ffi::c_void,
    ) -> ::windows_core::HRESULT,
    pub RegisterPropertyChangedCallback: unsafe extern "system" fn(
        this: *mut ::core::ffi::c_void,
        dp: *mut ::core::ffi::c_void,
        callback: *mut ::core::ffi::c_void,
        result__: *mut i64,
    ) -> ::windows_core::HRESULT,
    pub UnregisterPropertyChangedCallback: unsafe extern "system" fn(
        this: *mut ::core::ffi::c_void,
        dp: *mut ::core::ffi::c_void,
        token: i64,
    )
        -> ::windows_core::HRESULT,
    #[cfg(feature = "Windows_UI_Core")]
    pub Dispatcher: unsafe extern "system" fn(
        this: *mut ::core::ffi::c_void,
        result__: *mut *mut ::core::ffi::c_void,
    ) -> ::windows_core::HRESULT,
    #[cfg(not(feature = "Windows_UI_Core"))]
    Dispatcher: usize,
    #[cfg(feature = "Microsoft_UI_Dispatching")]
    pub DispatcherQueue: unsafe extern "system" fn(
        this: *mut ::core::ffi::c_void,
        result__: *mut *mut ::core::ffi::c_void,
    ) -> ::windows_core::HRESULT,
    #[cfg(not(feature = "Microsoft_UI_Dispatching"))]
    DispatcherQueue: usize,
}
#[doc(hidden)]
#[repr(transparent)]
#[derive(::core::cmp::PartialEq, ::core::cmp::Eq, ::core::fmt::Debug, ::core::clone::Clone)]
pub struct IDependencyObjectCollectionFactory(::windows_core::IUnknown);
unsafe impl ::windows_core::Interface for IDependencyObjectCollectionFactory {
    type Vtable = IDependencyObjectCollectionFactory_Vtbl;
}
unsafe impl ::windows_core::ComInterface for IDependencyObjectCollectionFactory {
    const IID: ::windows_core::GUID =
        ::windows_core::GUID::from_u128(0x2a74ee43_90fd_5d61_9383_584ea8422b39);
}
#[repr(C)]
#[doc(hidden)]
pub struct IDependencyObjectCollectionFactory_Vtbl {
    pub base__: ::windows_core::IInspectable_Vtbl,
    #[cfg(feature = "Windows_Foundation_Collections")]
    pub CreateInstance: unsafe extern "system" fn(
        this: *mut ::core::ffi::c_void,
        baseinterface: *mut ::core::ffi::c_void,
        innerinterface: *mut *mut ::core::ffi::c_void,
        result__: *mut *mut ::core::ffi::c_void,
    ) -> ::windows_core::HRESULT,
    #[cfg(not(feature = "Windows_Foundation_Collections"))]
    CreateInstance: usize,
}
#[doc(hidden)]
#[repr(transparent)]
#[derive(::core::cmp::PartialEq, ::core::cmp::Eq, ::core::fmt::Debug, ::core::clone::Clone)]
pub struct IDependencyObjectFactory(::windows_core::IUnknown);
unsafe impl ::windows_core::Interface for IDependencyObjectFactory {
    type Vtable = IDependencyObjectFactory_Vtbl;
}
unsafe impl ::windows_core::ComInterface for IDependencyObjectFactory {
    const IID: ::windows_core::GUID =
        ::windows_core::GUID::from_u128(0x936b614c_475f_5d7d_b3f7_bf1fbea28126);
}
#[repr(C)]
#[doc(hidden)]
pub struct IDependencyObjectFactory_Vtbl {
    pub base__: ::windows_core::IInspectable_Vtbl,
    pub CreateInstance: unsafe extern "system" fn(
        this: *mut ::core::ffi::c_void,
        baseinterface: *mut ::core::ffi::c_void,
        innerinterface: *mut *mut ::core::ffi::c_void,
        result__: *mut *mut ::core::ffi::c_void,
    ) -> ::windows_core::HRESULT,
}
#[doc(hidden)]
#[repr(transparent)]
#[derive(::core::cmp::PartialEq, ::core::cmp::Eq, ::core::fmt::Debug, ::core::clone::Clone)]
pub struct IDependencyProperty(::windows_core::IUnknown);
unsafe impl ::windows_core::Interface for IDependencyProperty {
    type Vtable = IDependencyProperty_Vtbl;
}
unsafe impl ::windows_core::ComInterface for IDependencyProperty {
    const IID: ::windows_core::GUID =
        ::windows_core::GUID::from_u128(0x960eab49_9672_58a0_995b_3a42e5ea6278);
}
#[repr(C)]
#[doc(hidden)]
pub struct IDependencyProperty_Vtbl {
    pub base__: ::windows_core::IInspectable_Vtbl,
    #[cfg(feature = "Windows_UI_Xaml_Interop")]
    pub GetMetadata: unsafe extern "system" fn(
        this: *mut ::core::ffi::c_void,
        fortype: ::std::mem::MaybeUninit<super::super::super::Windows::UI::Xaml::Interop::TypeName>,
        result__: *mut *mut ::core::ffi::c_void,
    ) -> ::windows_core::HRESULT,
    #[cfg(not(feature = "Windows_UI_Xaml_Interop"))]
    GetMetadata: usize,
}
#[doc(hidden)]
#[repr(transparent)]
#[derive(::core::cmp::PartialEq, ::core::cmp::Eq, ::core::fmt::Debug, ::core::clone::Clone)]
pub struct IDependencyPropertyChangedEventArgs(::windows_core::IUnknown);
unsafe impl ::windows_core::Interface for IDependencyPropertyChangedEventArgs {
    type Vtable = IDependencyPropertyChangedEventArgs_Vtbl;
}
unsafe impl ::windows_core::ComInterface for IDependencyPropertyChangedEventArgs {
    const IID: ::windows_core::GUID =
        ::windows_core::GUID::from_u128(0x84ead020_7849_5e98_8030_488a80d164ec);
}
#[repr(C)]
#[doc(hidden)]
pub struct IDependencyPropertyChangedEventArgs_Vtbl {
    pub base__: ::windows_core::IInspectable_Vtbl,
    pub Property: unsafe extern "system" fn(
        this: *mut ::core::ffi::c_void,
        result__: *mut *mut ::core::ffi::c_void,
    ) -> ::windows_core::HRESULT,
    pub OldValue: unsafe extern "system" fn(
        this: *mut ::core::ffi::c_void,
        result__: *mut *mut ::core::ffi::c_void,
    ) -> ::windows_core::HRESULT,
    pub NewValue: unsafe extern "system" fn(
        this: *mut ::core::ffi::c_void,
        result__: *mut *mut ::core::ffi::c_void,
    ) -> ::windows_core::HRESULT,
}
#[doc(hidden)]
#[repr(transparent)]
#[derive(::core::cmp::PartialEq, ::core::cmp::Eq, ::core::fmt::Debug, ::core::clone::Clone)]
pub struct IDependencyPropertyStatics(::windows_core::IUnknown);
unsafe impl ::windows_core::Interface for IDependencyPropertyStatics {
    type Vtable = IDependencyPropertyStatics_Vtbl;
}
unsafe impl ::windows_core::ComInterface for IDependencyPropertyStatics {
    const IID: ::windows_core::GUID =
        ::windows_core::GUID::from_u128(0x61ddc651_0383_5d6f_98ce_5c046aaaaa8f);
}
#[repr(C)]
#[doc(hidden)]
pub struct IDependencyPropertyStatics_Vtbl {
    pub base__: ::windows_core::IInspectable_Vtbl,
    pub UnsetValue: unsafe extern "system" fn(
        this: *mut ::core::ffi::c_void,
        result__: *mut *mut ::core::ffi::c_void,
    ) -> ::windows_core::HRESULT,
    #[cfg(feature = "Windows_UI_Xaml_Interop")]
    pub Register: unsafe extern "system" fn(
        this: *mut ::core::ffi::c_void,
        name: ::std::mem::MaybeUninit<::windows_core::HSTRING>,
        propertytype: ::std::mem::MaybeUninit<
            super::super::super::Windows::UI::Xaml::Interop::TypeName,
        >,
        ownertype: ::std::mem::MaybeUninit<
            super::super::super::Windows::UI::Xaml::Interop::TypeName,
        >,
        typemetadata: *mut ::core::ffi::c_void,
        result__: *mut *mut ::core::ffi::c_void,
    ) -> ::windows_core::HRESULT,
    #[cfg(not(feature = "Windows_UI_Xaml_Interop"))]
    Register: usize,
    #[cfg(feature = "Windows_UI_Xaml_Interop")]
    pub RegisterAttached: unsafe extern "system" fn(
        this: *mut ::core::ffi::c_void,
        name: ::std::mem::MaybeUninit<::windows_core::HSTRING>,
        propertytype: ::std::mem::MaybeUninit<
            super::super::super::Windows::UI::Xaml::Interop::TypeName,
        >,
        ownertype: ::std::mem::MaybeUninit<
            super::super::super::Windows::UI::Xaml::Interop::TypeName,
        >,
        defaultmetadata: *mut ::core::ffi::c_void,
        result__: *mut *mut ::core::ffi::c_void,
    ) -> ::windows_core::HRESULT,
    #[cfg(not(feature = "Windows_UI_Xaml_Interop"))]
    RegisterAttached: usize,
}
#[doc(hidden)]
#[repr(transparent)]
#[derive(::core::cmp::PartialEq, ::core::cmp::Eq, ::core::fmt::Debug, ::core::clone::Clone)]
pub struct IDispatcherTimer(::windows_core::IUnknown);
unsafe impl ::windows_core::Interface for IDispatcherTimer {
    type Vtable = IDispatcherTimer_Vtbl;
}
unsafe impl ::windows_core::ComInterface for IDispatcherTimer {
    const IID: ::windows_core::GUID =
        ::windows_core::GUID::from_u128(0x58a4abf1_a4a3_53dd_ae21_08f43231e817);
}
#[repr(C)]
#[doc(hidden)]
pub struct IDispatcherTimer_Vtbl {
    pub base__: ::windows_core::IInspectable_Vtbl,
    #[cfg(feature = "Windows_Foundation")]
    pub Interval: unsafe extern "system" fn(
        this: *mut ::core::ffi::c_void,
        result__: *mut ::windows::Foundation::TimeSpan,
    ) -> ::windows_core::HRESULT,
    #[cfg(not(feature = "Windows_Foundation"))]
    Interval: usize,
    #[cfg(feature = "Windows_Foundation")]
    pub SetInterval: unsafe extern "system" fn(
        this: *mut ::core::ffi::c_void,
        value: ::windows::Foundation::TimeSpan,
    ) -> ::windows_core::HRESULT,
    #[cfg(not(feature = "Windows_Foundation"))]
    SetInterval: usize,
    pub IsEnabled: unsafe extern "system" fn(
        this: *mut ::core::ffi::c_void,
        result__: *mut bool,
    ) -> ::windows_core::HRESULT,
    #[cfg(feature = "Windows_Foundation")]
    pub Tick: unsafe extern "system" fn(
        this: *mut ::core::ffi::c_void,
        handler: *mut ::core::ffi::c_void,
        result__: *mut ::windows::Foundation::EventRegistrationToken,
    ) -> ::windows_core::HRESULT,
    #[cfg(not(feature = "Windows_Foundation"))]
    Tick: usize,
    #[cfg(feature = "Windows_Foundation")]
    pub RemoveTick: unsafe extern "system" fn(
        this: *mut ::core::ffi::c_void,
        token: ::windows::Foundation::EventRegistrationToken,
    ) -> ::windows_core::HRESULT,
    #[cfg(not(feature = "Windows_Foundation"))]
    RemoveTick: usize,
    pub Start: unsafe extern "system" fn(this: *mut ::core::ffi::c_void) -> ::windows_core::HRESULT,
    pub Stop: unsafe extern "system" fn(this: *mut ::core::ffi::c_void) -> ::windows_core::HRESULT,
}
#[doc(hidden)]
#[repr(transparent)]
#[derive(::core::cmp::PartialEq, ::core::cmp::Eq, ::core::fmt::Debug, ::core::clone::Clone)]
pub struct IDispatcherTimerFactory(::windows_core::IUnknown);
unsafe impl ::windows_core::Interface for IDispatcherTimerFactory {
    type Vtable = IDispatcherTimerFactory_Vtbl;
}
unsafe impl ::windows_core::ComInterface for IDispatcherTimerFactory {
    const IID: ::windows_core::GUID =
        ::windows_core::GUID::from_u128(0x1bcb3166_22e4_50bf_a5a2_b78ca4377bd0);
}
#[repr(C)]
#[doc(hidden)]
pub struct IDispatcherTimerFactory_Vtbl {
    pub base__: ::windows_core::IInspectable_Vtbl,
    pub CreateInstance: unsafe extern "system" fn(
        this: *mut ::core::ffi::c_void,
        baseinterface: *mut ::core::ffi::c_void,
        innerinterface: *mut *mut ::core::ffi::c_void,
        result__: *mut *mut ::core::ffi::c_void,
    ) -> ::windows_core::HRESULT,
}
#[doc(hidden)]
#[repr(transparent)]
#[derive(::core::cmp::PartialEq, ::core::cmp::Eq, ::core::fmt::Debug, ::core::clone::Clone)]
pub struct IDragEventArgs(::windows_core::IUnknown);
unsafe impl ::windows_core::Interface for IDragEventArgs {
    type Vtable = IDragEventArgs_Vtbl;
}
unsafe impl ::windows_core::ComInterface for IDragEventArgs {
    const IID: ::windows_core::GUID =
        ::windows_core::GUID::from_u128(0x47ac5757_e4bc_52ba_8ab9_1bf81aad7900);
}
#[repr(C)]
#[doc(hidden)]
pub struct IDragEventArgs_Vtbl {
    pub base__: ::windows_core::IInspectable_Vtbl,
    pub Handled: unsafe extern "system" fn(
        this: *mut ::core::ffi::c_void,
        result__: *mut bool,
    ) -> ::windows_core::HRESULT,
    pub SetHandled: unsafe extern "system" fn(
        this: *mut ::core::ffi::c_void,
        value: bool,
    ) -> ::windows_core::HRESULT,
    #[cfg(feature = "Windows_ApplicationModel_DataTransfer")]
    pub Data: unsafe extern "system" fn(
        this: *mut ::core::ffi::c_void,
        result__: *mut *mut ::core::ffi::c_void,
    ) -> ::windows_core::HRESULT,
    #[cfg(not(feature = "Windows_ApplicationModel_DataTransfer"))]
    Data: usize,
    #[cfg(feature = "Windows_ApplicationModel_DataTransfer")]
    pub SetData: unsafe extern "system" fn(
        this: *mut ::core::ffi::c_void,
        value: *mut ::core::ffi::c_void,
    ) -> ::windows_core::HRESULT,
    #[cfg(not(feature = "Windows_ApplicationModel_DataTransfer"))]
    SetData: usize,
    #[cfg(feature = "Windows_ApplicationModel_DataTransfer")]
    pub DataView: unsafe extern "system" fn(
        this: *mut ::core::ffi::c_void,
        result__: *mut *mut ::core::ffi::c_void,
    ) -> ::windows_core::HRESULT,
    #[cfg(not(feature = "Windows_ApplicationModel_DataTransfer"))]
    DataView: usize,
    pub DragUIOverride: unsafe extern "system" fn(
        this: *mut ::core::ffi::c_void,
        result__: *mut *mut ::core::ffi::c_void,
    ) -> ::windows_core::HRESULT,
    #[cfg(feature = "Windows_ApplicationModel_DataTransfer_DragDrop")]
    pub Modifiers: unsafe extern "system" fn(
        this: *mut ::core::ffi::c_void,
        result__: *mut ::windows::ApplicationModel::DataTransfer::DragDrop::DragDropModifiers,
    ) -> ::windows_core::HRESULT,
    #[cfg(not(feature = "Windows_ApplicationModel_DataTransfer_DragDrop"))]
    Modifiers: usize,
    #[cfg(feature = "Windows_ApplicationModel_DataTransfer")]
    pub AcceptedOperation: unsafe extern "system" fn(
        this: *mut ::core::ffi::c_void,
        result__: *mut ::windows::ApplicationModel::DataTransfer::DataPackageOperation,
    ) -> ::windows_core::HRESULT,
    #[cfg(not(feature = "Windows_ApplicationModel_DataTransfer"))]
    AcceptedOperation: usize,
    #[cfg(feature = "Windows_ApplicationModel_DataTransfer")]
    pub SetAcceptedOperation: unsafe extern "system" fn(
        this: *mut ::core::ffi::c_void,
        value: ::windows::ApplicationModel::DataTransfer::DataPackageOperation,
    ) -> ::windows_core::HRESULT,
    #[cfg(not(feature = "Windows_ApplicationModel_DataTransfer"))]
    SetAcceptedOperation: usize,
    #[cfg(feature = "Windows_ApplicationModel_DataTransfer")]
    pub AllowedOperations: unsafe extern "system" fn(
        this: *mut ::core::ffi::c_void,
        result__: *mut ::windows::ApplicationModel::DataTransfer::DataPackageOperation,
    ) -> ::windows_core::HRESULT,
    #[cfg(not(feature = "Windows_ApplicationModel_DataTransfer"))]
    AllowedOperations: usize,
    pub GetDeferral: unsafe extern "system" fn(
        this: *mut ::core::ffi::c_void,
        result__: *mut *mut ::core::ffi::c_void,
    ) -> ::windows_core::HRESULT,
    #[cfg(feature = "Windows_Foundation")]
    pub GetPosition: unsafe extern "system" fn(
        this: *mut ::core::ffi::c_void,
        relativeto: *mut ::core::ffi::c_void,
        result__: *mut ::windows::Foundation::Point,
    ) -> ::windows_core::HRESULT,
    #[cfg(not(feature = "Windows_Foundation"))]
    GetPosition: usize,
}
#[doc(hidden)]
#[repr(transparent)]
#[derive(::core::cmp::PartialEq, ::core::cmp::Eq, ::core::fmt::Debug, ::core::clone::Clone)]
pub struct IDragOperationDeferral(::windows_core::IUnknown);
unsafe impl ::windows_core::Interface for IDragOperationDeferral {
    type Vtable = IDragOperationDeferral_Vtbl;
}
unsafe impl ::windows_core::ComInterface for IDragOperationDeferral {
    const IID: ::windows_core::GUID =
        ::windows_core::GUID::from_u128(0x462c1880_fc6a_5035_8abf_564bacb78158);
}
#[repr(C)]
#[doc(hidden)]
pub struct IDragOperationDeferral_Vtbl {
    pub base__: ::windows_core::IInspectable_Vtbl,
    pub Complete:
        unsafe extern "system" fn(this: *mut ::core::ffi::c_void) -> ::windows_core::HRESULT,
}
#[doc(hidden)]
#[repr(transparent)]
#[derive(::core::cmp::PartialEq, ::core::cmp::Eq, ::core::fmt::Debug, ::core::clone::Clone)]
pub struct IDragStartingEventArgs(::windows_core::IUnknown);
unsafe impl ::windows_core::Interface for IDragStartingEventArgs {
    type Vtable = IDragStartingEventArgs_Vtbl;
}
unsafe impl ::windows_core::ComInterface for IDragStartingEventArgs {
    const IID: ::windows_core::GUID =
        ::windows_core::GUID::from_u128(0xad17bace_9613_5666_a31b_79a73fba77cf);
}
#[repr(C)]
#[doc(hidden)]
pub struct IDragStartingEventArgs_Vtbl {
    pub base__: ::windows_core::IInspectable_Vtbl,
    pub Cancel: unsafe extern "system" fn(
        this: *mut ::core::ffi::c_void,
        result__: *mut bool,
    ) -> ::windows_core::HRESULT,
    pub SetCancel: unsafe extern "system" fn(
        this: *mut ::core::ffi::c_void,
        value: bool,
    ) -> ::windows_core::HRESULT,
    #[cfg(feature = "Windows_ApplicationModel_DataTransfer")]
    pub Data: unsafe extern "system" fn(
        this: *mut ::core::ffi::c_void,
        result__: *mut *mut ::core::ffi::c_void,
    ) -> ::windows_core::HRESULT,
    #[cfg(not(feature = "Windows_ApplicationModel_DataTransfer"))]
    Data: usize,
    pub DragUI: unsafe extern "system" fn(
        this: *mut ::core::ffi::c_void,
        result__: *mut *mut ::core::ffi::c_void,
    ) -> ::windows_core::HRESULT,
    #[cfg(feature = "Windows_ApplicationModel_DataTransfer")]
    pub AllowedOperations: unsafe extern "system" fn(
        this: *mut ::core::ffi::c_void,
        result__: *mut ::windows::ApplicationModel::DataTransfer::DataPackageOperation,
    ) -> ::windows_core::HRESULT,
    #[cfg(not(feature = "Windows_ApplicationModel_DataTransfer"))]
    AllowedOperations: usize,
    #[cfg(feature = "Windows_ApplicationModel_DataTransfer")]
    pub SetAllowedOperations: unsafe extern "system" fn(
        this: *mut ::core::ffi::c_void,
        value: ::windows::ApplicationModel::DataTransfer::DataPackageOperation,
    ) -> ::windows_core::HRESULT,
    #[cfg(not(feature = "Windows_ApplicationModel_DataTransfer"))]
    SetAllowedOperations: usize,
    pub GetDeferral: unsafe extern "system" fn(
        this: *mut ::core::ffi::c_void,
        result__: *mut *mut ::core::ffi::c_void,
    ) -> ::windows_core::HRESULT,
    #[cfg(feature = "Windows_Foundation")]
    pub GetPosition: unsafe extern "system" fn(
        this: *mut ::core::ffi::c_void,
        relativeto: *mut ::core::ffi::c_void,
        result__: *mut ::windows::Foundation::Point,
    ) -> ::windows_core::HRESULT,
    #[cfg(not(feature = "Windows_Foundation"))]
    GetPosition: usize,
}
#[doc(hidden)]
#[repr(transparent)]
#[derive(::core::cmp::PartialEq, ::core::cmp::Eq, ::core::fmt::Debug, ::core::clone::Clone)]
pub struct IDragUI(::windows_core::IUnknown);
unsafe impl ::windows_core::Interface for IDragUI {
    type Vtable = IDragUI_Vtbl;
}
unsafe impl ::windows_core::ComInterface for IDragUI {
    const IID: ::windows_core::GUID =
        ::windows_core::GUID::from_u128(0x35f170e0_93bf_58da_877a_8ec77d8d9f00);
}
#[repr(C)]
#[doc(hidden)]
pub struct IDragUI_Vtbl {
    pub base__: ::windows_core::IInspectable_Vtbl,
    #[cfg(feature = "Microsoft_UI_Xaml_Media_Imaging")]
    pub SetContentFromBitmapImage: unsafe extern "system" fn(
        this: *mut ::core::ffi::c_void,
        bitmapimage: *mut ::core::ffi::c_void,
    ) -> ::windows_core::HRESULT,
    #[cfg(not(feature = "Microsoft_UI_Xaml_Media_Imaging"))]
    SetContentFromBitmapImage: usize,
    #[cfg(all(
        feature = "Microsoft_UI_Xaml_Media_Imaging",
        feature = "Windows_Foundation"
    ))]
    pub SetContentFromBitmapImageWithAnchorPoint:
        unsafe extern "system" fn(
            this: *mut ::core::ffi::c_void,
            bitmapimage: *mut ::core::ffi::c_void,
            anchorpoint: ::windows::Foundation::Point,
        ) -> ::windows_core::HRESULT,
    #[cfg(not(all(
        feature = "Microsoft_UI_Xaml_Media_Imaging",
        feature = "Windows_Foundation"
    )))]
    SetContentFromBitmapImageWithAnchorPoint: usize,
    #[cfg(feature = "Windows_Graphics_Imaging")]
    pub SetContentFromSoftwareBitmap: unsafe extern "system" fn(
        this: *mut ::core::ffi::c_void,
        softwarebitmap: *mut ::core::ffi::c_void,
    ) -> ::windows_core::HRESULT,
    #[cfg(not(feature = "Windows_Graphics_Imaging"))]
    SetContentFromSoftwareBitmap: usize,
    #[cfg(all(feature = "Windows_Foundation", feature = "Windows_Graphics_Imaging"))]
    pub SetContentFromSoftwareBitmapWithAnchorPoint:
        unsafe extern "system" fn(
            this: *mut ::core::ffi::c_void,
            softwarebitmap: *mut ::core::ffi::c_void,
            anchorpoint: ::windows::Foundation::Point,
        ) -> ::windows_core::HRESULT,
    #[cfg(not(all(feature = "Windows_Foundation", feature = "Windows_Graphics_Imaging")))]
    SetContentFromSoftwareBitmapWithAnchorPoint: usize,
    pub SetContentFromDataPackage:
        unsafe extern "system" fn(this: *mut ::core::ffi::c_void) -> ::windows_core::HRESULT,
}
#[doc(hidden)]
#[repr(transparent)]
#[derive(::core::cmp::PartialEq, ::core::cmp::Eq, ::core::fmt::Debug, ::core::clone::Clone)]
pub struct IDragUIOverride(::windows_core::IUnknown);
unsafe impl ::windows_core::Interface for IDragUIOverride {
    type Vtable = IDragUIOverride_Vtbl;
}
unsafe impl ::windows_core::ComInterface for IDragUIOverride {
    const IID: ::windows_core::GUID =
        ::windows_core::GUID::from_u128(0x3260b18b_70df_5df2_b98a_56beb0601f79);
}
#[repr(C)]
#[doc(hidden)]
pub struct IDragUIOverride_Vtbl {
    pub base__: ::windows_core::IInspectable_Vtbl,
    pub Caption: unsafe extern "system" fn(
        this: *mut ::core::ffi::c_void,
        result__: *mut ::std::mem::MaybeUninit<::windows_core::HSTRING>,
    ) -> ::windows_core::HRESULT,
    pub SetCaption: unsafe extern "system" fn(
        this: *mut ::core::ffi::c_void,
        value: ::std::mem::MaybeUninit<::windows_core::HSTRING>,
    ) -> ::windows_core::HRESULT,
    pub IsContentVisible: unsafe extern "system" fn(
        this: *mut ::core::ffi::c_void,
        result__: *mut bool,
    ) -> ::windows_core::HRESULT,
    pub SetIsContentVisible: unsafe extern "system" fn(
        this: *mut ::core::ffi::c_void,
        value: bool,
    ) -> ::windows_core::HRESULT,
    pub IsCaptionVisible: unsafe extern "system" fn(
        this: *mut ::core::ffi::c_void,
        result__: *mut bool,
    ) -> ::windows_core::HRESULT,
    pub SetIsCaptionVisible: unsafe extern "system" fn(
        this: *mut ::core::ffi::c_void,
        value: bool,
    ) -> ::windows_core::HRESULT,
    pub IsGlyphVisible: unsafe extern "system" fn(
        this: *mut ::core::ffi::c_void,
        result__: *mut bool,
    ) -> ::windows_core::HRESULT,
    pub SetIsGlyphVisible: unsafe extern "system" fn(
        this: *mut ::core::ffi::c_void,
        value: bool,
    ) -> ::windows_core::HRESULT,
    pub Clear: unsafe extern "system" fn(this: *mut ::core::ffi::c_void) -> ::windows_core::HRESULT,
    #[cfg(feature = "Microsoft_UI_Xaml_Media_Imaging")]
    pub SetContentFromBitmapImage: unsafe extern "system" fn(
        this: *mut ::core::ffi::c_void,
        bitmapimage: *mut ::core::ffi::c_void,
    ) -> ::windows_core::HRESULT,
    #[cfg(not(feature = "Microsoft_UI_Xaml_Media_Imaging"))]
    SetContentFromBitmapImage: usize,
    #[cfg(all(
        feature = "Microsoft_UI_Xaml_Media_Imaging",
        feature = "Windows_Foundation"
    ))]
    pub SetContentFromBitmapImageWithAnchorPoint:
        unsafe extern "system" fn(
            this: *mut ::core::ffi::c_void,
            bitmapimage: *mut ::core::ffi::c_void,
            anchorpoint: ::windows::Foundation::Point,
        ) -> ::windows_core::HRESULT,
    #[cfg(not(all(
        feature = "Microsoft_UI_Xaml_Media_Imaging",
        feature = "Windows_Foundation"
    )))]
    SetContentFromBitmapImageWithAnchorPoint: usize,
    #[cfg(feature = "Windows_Graphics_Imaging")]
    pub SetContentFromSoftwareBitmap: unsafe extern "system" fn(
        this: *mut ::core::ffi::c_void,
        softwarebitmap: *mut ::core::ffi::c_void,
    ) -> ::windows_core::HRESULT,
    #[cfg(not(feature = "Windows_Graphics_Imaging"))]
    SetContentFromSoftwareBitmap: usize,
    #[cfg(all(feature = "Windows_Foundation", feature = "Windows_Graphics_Imaging"))]
    pub SetContentFromSoftwareBitmapWithAnchorPoint:
        unsafe extern "system" fn(
            this: *mut ::core::ffi::c_void,
            softwarebitmap: *mut ::core::ffi::c_void,
            anchorpoint: ::windows::Foundation::Point,
        ) -> ::windows_core::HRESULT,
    #[cfg(not(all(feature = "Windows_Foundation", feature = "Windows_Graphics_Imaging")))]
    SetContentFromSoftwareBitmapWithAnchorPoint: usize,
}
#[doc(hidden)]
#[repr(transparent)]
#[derive(::core::cmp::PartialEq, ::core::cmp::Eq, ::core::fmt::Debug, ::core::clone::Clone)]
pub struct IDropCompletedEventArgs(::windows_core::IUnknown);
unsafe impl ::windows_core::Interface for IDropCompletedEventArgs {
    type Vtable = IDropCompletedEventArgs_Vtbl;
}
unsafe impl ::windows_core::ComInterface for IDropCompletedEventArgs {
    const IID: ::windows_core::GUID =
        ::windows_core::GUID::from_u128(0xe700082d_c640_5d44_b23a_f213dfbeb245);
}
#[repr(C)]
#[doc(hidden)]
pub struct IDropCompletedEventArgs_Vtbl {
    pub base__: ::windows_core::IInspectable_Vtbl,
    #[cfg(feature = "Windows_ApplicationModel_DataTransfer")]
    pub DropResult: unsafe extern "system" fn(
        this: *mut ::core::ffi::c_void,
        result__: *mut ::windows::ApplicationModel::DataTransfer::DataPackageOperation,
    ) -> ::windows_core::HRESULT,
    #[cfg(not(feature = "Windows_ApplicationModel_DataTransfer"))]
    DropResult: usize,
}
#[doc(hidden)]
#[repr(transparent)]
#[derive(::core::cmp::PartialEq, ::core::cmp::Eq, ::core::fmt::Debug, ::core::clone::Clone)]
pub struct IDurationHelper(::windows_core::IUnknown);
unsafe impl ::windows_core::Interface for IDurationHelper {
    type Vtable = IDurationHelper_Vtbl;
}
unsafe impl ::windows_core::ComInterface for IDurationHelper {
    const IID: ::windows_core::GUID =
        ::windows_core::GUID::from_u128(0xcc1089ab_8041_5c3e_b753_8397e7358cc6);
}
#[repr(C)]
#[doc(hidden)]
pub struct IDurationHelper_Vtbl {
    pub base__: ::windows_core::IInspectable_Vtbl,
}
#[doc(hidden)]
#[repr(transparent)]
#[derive(::core::cmp::PartialEq, ::core::cmp::Eq, ::core::fmt::Debug, ::core::clone::Clone)]
pub struct IDurationHelperStatics(::windows_core::IUnknown);
unsafe impl ::windows_core::Interface for IDurationHelperStatics {
    type Vtable = IDurationHelperStatics_Vtbl;
}
unsafe impl ::windows_core::ComInterface for IDurationHelperStatics {
    const IID: ::windows_core::GUID =
        ::windows_core::GUID::from_u128(0x491feb2c_3475_5f89_b15c_49c236eb514c);
}
#[repr(C)]
#[doc(hidden)]
pub struct IDurationHelperStatics_Vtbl {
    pub base__: ::windows_core::IInspectable_Vtbl,
    #[cfg(feature = "Windows_Foundation")]
    pub Automatic: unsafe extern "system" fn(
        this: *mut ::core::ffi::c_void,
        result__: *mut Duration,
    ) -> ::windows_core::HRESULT,
    #[cfg(not(feature = "Windows_Foundation"))]
    Automatic: usize,
    #[cfg(feature = "Windows_Foundation")]
    pub Forever: unsafe extern "system" fn(
        this: *mut ::core::ffi::c_void,
        result__: *mut Duration,
    ) -> ::windows_core::HRESULT,
    #[cfg(not(feature = "Windows_Foundation"))]
    Forever: usize,
    #[cfg(feature = "Windows_Foundation")]
    pub Compare: unsafe extern "system" fn(
        this: *mut ::core::ffi::c_void,
        duration1: Duration,
        duration2: Duration,
        result__: *mut i32,
    ) -> ::windows_core::HRESULT,
    #[cfg(not(feature = "Windows_Foundation"))]
    Compare: usize,
    #[cfg(feature = "Windows_Foundation")]
    pub FromTimeSpan: unsafe extern "system" fn(
        this: *mut ::core::ffi::c_void,
        timespan: ::windows::Foundation::TimeSpan,
        result__: *mut Duration,
    ) -> ::windows_core::HRESULT,
    #[cfg(not(feature = "Windows_Foundation"))]
    FromTimeSpan: usize,
    #[cfg(feature = "Windows_Foundation")]
    pub GetHasTimeSpan: unsafe extern "system" fn(
        this: *mut ::core::ffi::c_void,
        target: Duration,
        result__: *mut bool,
    ) -> ::windows_core::HRESULT,
    #[cfg(not(feature = "Windows_Foundation"))]
    GetHasTimeSpan: usize,
    #[cfg(feature = "Windows_Foundation")]
    pub Add: unsafe extern "system" fn(
        this: *mut ::core::ffi::c_void,
        target: Duration,
        duration: Duration,
        result__: *mut Duration,
    ) -> ::windows_core::HRESULT,
    #[cfg(not(feature = "Windows_Foundation"))]
    Add: usize,
    #[cfg(feature = "Windows_Foundation")]
    pub Equals: unsafe extern "system" fn(
        this: *mut ::core::ffi::c_void,
        target: Duration,
        value: Duration,
        result__: *mut bool,
    ) -> ::windows_core::HRESULT,
    #[cfg(not(feature = "Windows_Foundation"))]
    Equals: usize,
    #[cfg(feature = "Windows_Foundation")]
    pub Subtract: unsafe extern "system" fn(
        this: *mut ::core::ffi::c_void,
        target: Duration,
        duration: Duration,
        result__: *mut Duration,
    ) -> ::windows_core::HRESULT,
    #[cfg(not(feature = "Windows_Foundation"))]
    Subtract: usize,
}
#[doc(hidden)]
#[repr(transparent)]
#[derive(::core::cmp::PartialEq, ::core::cmp::Eq, ::core::fmt::Debug, ::core::clone::Clone)]
pub struct IEffectiveViewportChangedEventArgs(::windows_core::IUnknown);
unsafe impl ::windows_core::Interface for IEffectiveViewportChangedEventArgs {
    type Vtable = IEffectiveViewportChangedEventArgs_Vtbl;
}
unsafe impl ::windows_core::ComInterface for IEffectiveViewportChangedEventArgs {
    const IID: ::windows_core::GUID =
        ::windows_core::GUID::from_u128(0x636e8159_2d82_538a_8483_cd576e41d0df);
}
#[repr(C)]
#[doc(hidden)]
pub struct IEffectiveViewportChangedEventArgs_Vtbl {
    pub base__: ::windows_core::IInspectable_Vtbl,
    #[cfg(feature = "Windows_Foundation")]
    pub EffectiveViewport: unsafe extern "system" fn(
        this: *mut ::core::ffi::c_void,
        result__: *mut ::windows::Foundation::Rect,
    ) -> ::windows_core::HRESULT,
    #[cfg(not(feature = "Windows_Foundation"))]
    EffectiveViewport: usize,
    #[cfg(feature = "Windows_Foundation")]
    pub MaxViewport: unsafe extern "system" fn(
        this: *mut ::core::ffi::c_void,
        result__: *mut ::windows::Foundation::Rect,
    ) -> ::windows_core::HRESULT,
    #[cfg(not(feature = "Windows_Foundation"))]
    MaxViewport: usize,
    pub BringIntoViewDistanceX: unsafe extern "system" fn(
        this: *mut ::core::ffi::c_void,
        result__: *mut f64,
    ) -> ::windows_core::HRESULT,
    pub BringIntoViewDistanceY: unsafe extern "system" fn(
        this: *mut ::core::ffi::c_void,
        result__: *mut f64,
    ) -> ::windows_core::HRESULT,
}
#[repr(transparent)]
#[derive(::core::cmp::PartialEq, ::core::cmp::Eq, ::core::fmt::Debug, ::core::clone::Clone)]
pub struct IElementFactory(::windows_core::IUnknown);
impl IElementFactory {
    pub fn GetElement<P0>(&self, args: P0) -> ::windows_core::Result<UIElement>
    where
        P0: ::windows_core::TryIntoParam<ElementFactoryGetArgs>,
    {
        let this = self;
        unsafe {
            let mut result__ = ::std::mem::zeroed();
            (::windows_core::Interface::vtable(this).GetElement)(
                ::windows_core::Interface::as_raw(this),
                args.try_into_param()?.abi(),
                &mut result__,
            )
            .from_abi(result__)
        }
    }
    pub fn RecycleElement<P0>(&self, args: P0) -> ::windows_core::Result<()>
    where
        P0: ::windows_core::TryIntoParam<ElementFactoryRecycleArgs>,
    {
        let this = self;
        unsafe {
            (::windows_core::Interface::vtable(this).RecycleElement)(
                ::windows_core::Interface::as_raw(this),
                args.try_into_param()?.abi(),
            )
            .ok()
        }
    }
}
::windows_core::imp::interface_hierarchy!(
    IElementFactory,
    ::windows_core::IUnknown,
    ::windows_core::IInspectable
);
impl ::windows_core::RuntimeType for IElementFactory {
    const SIGNATURE: ::windows_core::imp::ConstBuffer =
        ::windows_core::imp::ConstBuffer::for_interface::<Self>();
}
unsafe impl ::windows_core::Interface for IElementFactory {
    type Vtable = IElementFactory_Vtbl;
}
unsafe impl ::windows_core::ComInterface for IElementFactory {
    const IID: ::windows_core::GUID =
        ::windows_core::GUID::from_u128(0x75faba47_2cf2_54ae_91e6_0581556fddaa);
}
#[repr(C)]
#[doc(hidden)]
pub struct IElementFactory_Vtbl {
    pub base__: ::windows_core::IInspectable_Vtbl,
    pub GetElement: unsafe extern "system" fn(
        this: *mut ::core::ffi::c_void,
        args: *mut ::core::ffi::c_void,
        result__: *mut *mut ::core::ffi::c_void,
    ) -> ::windows_core::HRESULT,
    pub RecycleElement: unsafe extern "system" fn(
        this: *mut ::core::ffi::c_void,
        args: *mut ::core::ffi::c_void,
    ) -> ::windows_core::HRESULT,
}
#[doc(hidden)]
#[repr(transparent)]
#[derive(::core::cmp::PartialEq, ::core::cmp::Eq, ::core::fmt::Debug, ::core::clone::Clone)]
pub struct IElementFactoryGetArgs(::windows_core::IUnknown);
unsafe impl ::windows_core::Interface for IElementFactoryGetArgs {
    type Vtable = IElementFactoryGetArgs_Vtbl;
}
unsafe impl ::windows_core::ComInterface for IElementFactoryGetArgs {
    const IID: ::windows_core::GUID =
        ::windows_core::GUID::from_u128(0xb7017d68_ec9e_5435_b078_be6f906f0953);
}
#[repr(C)]
#[doc(hidden)]
pub struct IElementFactoryGetArgs_Vtbl {
    pub base__: ::windows_core::IInspectable_Vtbl,
    pub Data: unsafe extern "system" fn(
        this: *mut ::core::ffi::c_void,
        result__: *mut *mut ::core::ffi::c_void,
    ) -> ::windows_core::HRESULT,
    pub SetData: unsafe extern "system" fn(
        this: *mut ::core::ffi::c_void,
        value: *mut ::core::ffi::c_void,
    ) -> ::windows_core::HRESULT,
    pub Parent: unsafe extern "system" fn(
        this: *mut ::core::ffi::c_void,
        result__: *mut *mut ::core::ffi::c_void,
    ) -> ::windows_core::HRESULT,
    pub SetParent: unsafe extern "system" fn(
        this: *mut ::core::ffi::c_void,
        value: *mut ::core::ffi::c_void,
    ) -> ::windows_core::HRESULT,
}
#[doc(hidden)]
#[repr(transparent)]
#[derive(::core::cmp::PartialEq, ::core::cmp::Eq, ::core::fmt::Debug, ::core::clone::Clone)]
pub struct IElementFactoryGetArgsFactory(::windows_core::IUnknown);
unsafe impl ::windows_core::Interface for IElementFactoryGetArgsFactory {
    type Vtable = IElementFactoryGetArgsFactory_Vtbl;
}
unsafe impl ::windows_core::ComInterface for IElementFactoryGetArgsFactory {
    const IID: ::windows_core::GUID =
        ::windows_core::GUID::from_u128(0xa88e401b_9fe5_5960_87a3_89a3cfe2531c);
}
#[repr(C)]
#[doc(hidden)]
pub struct IElementFactoryGetArgsFactory_Vtbl {
    pub base__: ::windows_core::IInspectable_Vtbl,
    pub CreateInstance: unsafe extern "system" fn(
        this: *mut ::core::ffi::c_void,
        baseinterface: *mut ::core::ffi::c_void,
        innerinterface: *mut *mut ::core::ffi::c_void,
        result__: *mut *mut ::core::ffi::c_void,
    ) -> ::windows_core::HRESULT,
}
#[doc(hidden)]
#[repr(transparent)]
#[derive(::core::cmp::PartialEq, ::core::cmp::Eq, ::core::fmt::Debug, ::core::clone::Clone)]
pub struct IElementFactoryRecycleArgs(::windows_core::IUnknown);
unsafe impl ::windows_core::Interface for IElementFactoryRecycleArgs {
    type Vtable = IElementFactoryRecycleArgs_Vtbl;
}
unsafe impl ::windows_core::ComInterface for IElementFactoryRecycleArgs {
    const IID: ::windows_core::GUID =
        ::windows_core::GUID::from_u128(0x46e444f7_05d3_5c5e_9b7a_5541f63e4ef9);
}
#[repr(C)]
#[doc(hidden)]
pub struct IElementFactoryRecycleArgs_Vtbl {
    pub base__: ::windows_core::IInspectable_Vtbl,
    pub Element: unsafe extern "system" fn(
        this: *mut ::core::ffi::c_void,
        result__: *mut *mut ::core::ffi::c_void,
    ) -> ::windows_core::HRESULT,
    pub SetElement: unsafe extern "system" fn(
        this: *mut ::core::ffi::c_void,
        value: *mut ::core::ffi::c_void,
    ) -> ::windows_core::HRESULT,
    pub Parent: unsafe extern "system" fn(
        this: *mut ::core::ffi::c_void,
        result__: *mut *mut ::core::ffi::c_void,
    ) -> ::windows_core::HRESULT,
    pub SetParent: unsafe extern "system" fn(
        this: *mut ::core::ffi::c_void,
        value: *mut ::core::ffi::c_void,
    ) -> ::windows_core::HRESULT,
}
#[doc(hidden)]
#[repr(transparent)]
#[derive(::core::cmp::PartialEq, ::core::cmp::Eq, ::core::fmt::Debug, ::core::clone::Clone)]
pub struct IElementFactoryRecycleArgsFactory(::windows_core::IUnknown);
unsafe impl ::windows_core::Interface for IElementFactoryRecycleArgsFactory {
    type Vtable = IElementFactoryRecycleArgsFactory_Vtbl;
}
unsafe impl ::windows_core::ComInterface for IElementFactoryRecycleArgsFactory {
    const IID: ::windows_core::GUID =
        ::windows_core::GUID::from_u128(0x30ee194a_fe4d_53e7_a84a_cd34fab0d4ef);
}
#[repr(C)]
#[doc(hidden)]
pub struct IElementFactoryRecycleArgsFactory_Vtbl {
    pub base__: ::windows_core::IInspectable_Vtbl,
    pub CreateInstance: unsafe extern "system" fn(
        this: *mut ::core::ffi::c_void,
        baseinterface: *mut ::core::ffi::c_void,
        innerinterface: *mut *mut ::core::ffi::c_void,
        result__: *mut *mut ::core::ffi::c_void,
    ) -> ::windows_core::HRESULT,
}
#[doc(hidden)]
#[repr(transparent)]
#[derive(::core::cmp::PartialEq, ::core::cmp::Eq, ::core::fmt::Debug, ::core::clone::Clone)]
pub struct IElementSoundPlayer(::windows_core::IUnknown);
unsafe impl ::windows_core::Interface for IElementSoundPlayer {
    type Vtable = IElementSoundPlayer_Vtbl;
}
unsafe impl ::windows_core::ComInterface for IElementSoundPlayer {
    const IID: ::windows_core::GUID =
        ::windows_core::GUID::from_u128(0x0ea67e68_937c_5c00_b609_53b63d9a5d42);
}
#[repr(C)]
#[doc(hidden)]
pub struct IElementSoundPlayer_Vtbl {
    pub base__: ::windows_core::IInspectable_Vtbl,
}
#[doc(hidden)]
#[repr(transparent)]
#[derive(::core::cmp::PartialEq, ::core::cmp::Eq, ::core::fmt::Debug, ::core::clone::Clone)]
pub struct IElementSoundPlayerStatics(::windows_core::IUnknown);
unsafe impl ::windows_core::Interface for IElementSoundPlayerStatics {
    type Vtable = IElementSoundPlayerStatics_Vtbl;
}
unsafe impl ::windows_core::ComInterface for IElementSoundPlayerStatics {
    const IID: ::windows_core::GUID =
        ::windows_core::GUID::from_u128(0x5a5a20c3_1c9b_5d61_9d63_487c8bf16ecb);
}
#[repr(C)]
#[doc(hidden)]
pub struct IElementSoundPlayerStatics_Vtbl {
    pub base__: ::windows_core::IInspectable_Vtbl,
    pub Volume: unsafe extern "system" fn(
        this: *mut ::core::ffi::c_void,
        result__: *mut f64,
    ) -> ::windows_core::HRESULT,
    pub SetVolume: unsafe extern "system" fn(
        this: *mut ::core::ffi::c_void,
        value: f64,
    ) -> ::windows_core::HRESULT,
    pub State: unsafe extern "system" fn(
        this: *mut ::core::ffi::c_void,
        result__: *mut ElementSoundPlayerState,
    ) -> ::windows_core::HRESULT,
    pub SetState: unsafe extern "system" fn(
        this: *mut ::core::ffi::c_void,
        value: ElementSoundPlayerState,
    ) -> ::windows_core::HRESULT,
    pub SpatialAudioMode: unsafe extern "system" fn(
        this: *mut ::core::ffi::c_void,
        result__: *mut ElementSpatialAudioMode,
    ) -> ::windows_core::HRESULT,
    pub SetSpatialAudioMode: unsafe extern "system" fn(
        this: *mut ::core::ffi::c_void,
        value: ElementSpatialAudioMode,
    ) -> ::windows_core::HRESULT,
    pub Play: unsafe extern "system" fn(
        this: *mut ::core::ffi::c_void,
        sound: ElementSoundKind,
    ) -> ::windows_core::HRESULT,
}
#[doc(hidden)]
#[repr(transparent)]
#[derive(::core::cmp::PartialEq, ::core::cmp::Eq, ::core::fmt::Debug, ::core::clone::Clone)]
pub struct IEventTrigger(::windows_core::IUnknown);
unsafe impl ::windows_core::Interface for IEventTrigger {
    type Vtable = IEventTrigger_Vtbl;
}
unsafe impl ::windows_core::ComInterface for IEventTrigger {
    const IID: ::windows_core::GUID =
        ::windows_core::GUID::from_u128(0x8c6f0541_c6ac_5f27_9d45_cf8bdbdfabe6);
}
#[repr(C)]
#[doc(hidden)]
pub struct IEventTrigger_Vtbl {
    pub base__: ::windows_core::IInspectable_Vtbl,
    pub RoutedEvent: unsafe extern "system" fn(
        this: *mut ::core::ffi::c_void,
        result__: *mut *mut ::core::ffi::c_void,
    ) -> ::windows_core::HRESULT,
    pub SetRoutedEvent: unsafe extern "system" fn(
        this: *mut ::core::ffi::c_void,
        value: *mut ::core::ffi::c_void,
    ) -> ::windows_core::HRESULT,
    #[cfg(feature = "Windows_Foundation_Collections")]
    pub Actions: unsafe extern "system" fn(
        this: *mut ::core::ffi::c_void,
        result__: *mut *mut ::core::ffi::c_void,
    ) -> ::windows_core::HRESULT,
    #[cfg(not(feature = "Windows_Foundation_Collections"))]
    Actions: usize,
}
#[doc(hidden)]
#[repr(transparent)]
#[derive(::core::cmp::PartialEq, ::core::cmp::Eq, ::core::fmt::Debug, ::core::clone::Clone)]
pub struct IExceptionRoutedEventArgs(::windows_core::IUnknown);
unsafe impl ::windows_core::Interface for IExceptionRoutedEventArgs {
    type Vtable = IExceptionRoutedEventArgs_Vtbl;
}
unsafe impl ::windows_core::ComInterface for IExceptionRoutedEventArgs {
    const IID: ::windows_core::GUID =
        ::windows_core::GUID::from_u128(0xe8bcb6d2_d3f5_5393_a84f_dfcd44a2df34);
}
#[repr(C)]
#[doc(hidden)]
pub struct IExceptionRoutedEventArgs_Vtbl {
    pub base__: ::windows_core::IInspectable_Vtbl,
    pub ErrorMessage: unsafe extern "system" fn(
        this: *mut ::core::ffi::c_void,
        result__: *mut ::std::mem::MaybeUninit<::windows_core::HSTRING>,
    ) -> ::windows_core::HRESULT,
}
#[doc(hidden)]
#[repr(transparent)]
#[derive(::core::cmp::PartialEq, ::core::cmp::Eq, ::core::fmt::Debug, ::core::clone::Clone)]
pub struct IExceptionRoutedEventArgsFactory(::windows_core::IUnknown);
unsafe impl ::windows_core::Interface for IExceptionRoutedEventArgsFactory {
    type Vtable = IExceptionRoutedEventArgsFactory_Vtbl;
}
unsafe impl ::windows_core::ComInterface for IExceptionRoutedEventArgsFactory {
    const IID: ::windows_core::GUID =
        ::windows_core::GUID::from_u128(0xe1e71fb6_2ad0_5189_8d96_33bae488c5fb);
}
#[repr(C)]
#[doc(hidden)]
pub struct IExceptionRoutedEventArgsFactory_Vtbl {
    pub base__: ::windows_core::IInspectable_Vtbl,
}
#[doc(hidden)]
#[repr(transparent)]
#[derive(::core::cmp::PartialEq, ::core::cmp::Eq, ::core::fmt::Debug, ::core::clone::Clone)]
pub struct IFrameworkElement(::windows_core::IUnknown);
unsafe impl ::windows_core::Interface for IFrameworkElement {
    type Vtable = IFrameworkElement_Vtbl;
}
unsafe impl ::windows_core::ComInterface for IFrameworkElement {
    const IID: ::windows_core::GUID =
        ::windows_core::GUID::from_u128(0xfe08f13d_dc6a_5495_ad44_c2d8d21863b0);
}
#[repr(C)]
#[doc(hidden)]
pub struct IFrameworkElement_Vtbl {
    pub base__: ::windows_core::IInspectable_Vtbl,
    #[cfg(feature = "Windows_Foundation_Collections")]
    pub Triggers: unsafe extern "system" fn(
        this: *mut ::core::ffi::c_void,
        result__: *mut *mut ::core::ffi::c_void,
    ) -> ::windows_core::HRESULT,
    #[cfg(not(feature = "Windows_Foundation_Collections"))]
    Triggers: usize,
    pub Resources: unsafe extern "system" fn(
        this: *mut ::core::ffi::c_void,
        result__: *mut *mut ::core::ffi::c_void,
    ) -> ::windows_core::HRESULT,
    pub SetResources: unsafe extern "system" fn(
        this: *mut ::core::ffi::c_void,
        value: *mut ::core::ffi::c_void,
    ) -> ::windows_core::HRESULT,
    pub Tag: unsafe extern "system" fn(
        this: *mut ::core::ffi::c_void,
        result__: *mut *mut ::core::ffi::c_void,
    ) -> ::windows_core::HRESULT,
    pub SetTag: unsafe extern "system" fn(
        this: *mut ::core::ffi::c_void,
        value: *mut ::core::ffi::c_void,
    ) -> ::windows_core::HRESULT,
    pub Language: unsafe extern "system" fn(
        this: *mut ::core::ffi::c_void,
        result__: *mut ::std::mem::MaybeUninit<::windows_core::HSTRING>,
    ) -> ::windows_core::HRESULT,
    pub SetLanguage: unsafe extern "system" fn(
        this: *mut ::core::ffi::c_void,
        value: ::std::mem::MaybeUninit<::windows_core::HSTRING>,
    ) -> ::windows_core::HRESULT,
    pub ActualWidth: unsafe extern "system" fn(
        this: *mut ::core::ffi::c_void,
        result__: *mut f64,
    ) -> ::windows_core::HRESULT,
    pub ActualHeight: unsafe extern "system" fn(
        this: *mut ::core::ffi::c_void,
        result__: *mut f64,
    ) -> ::windows_core::HRESULT,
    pub Width: unsafe extern "system" fn(
        this: *mut ::core::ffi::c_void,
        result__: *mut f64,
    ) -> ::windows_core::HRESULT,
    pub SetWidth: unsafe extern "system" fn(
        this: *mut ::core::ffi::c_void,
        value: f64,
    ) -> ::windows_core::HRESULT,
    pub Height: unsafe extern "system" fn(
        this: *mut ::core::ffi::c_void,
        result__: *mut f64,
    ) -> ::windows_core::HRESULT,
    pub SetHeight: unsafe extern "system" fn(
        this: *mut ::core::ffi::c_void,
        value: f64,
    ) -> ::windows_core::HRESULT,
    pub MinWidth: unsafe extern "system" fn(
        this: *mut ::core::ffi::c_void,
        result__: *mut f64,
    ) -> ::windows_core::HRESULT,
    pub SetMinWidth: unsafe extern "system" fn(
        this: *mut ::core::ffi::c_void,
        value: f64,
    ) -> ::windows_core::HRESULT,
    pub MaxWidth: unsafe extern "system" fn(
        this: *mut ::core::ffi::c_void,
        result__: *mut f64,
    ) -> ::windows_core::HRESULT,
    pub SetMaxWidth: unsafe extern "system" fn(
        this: *mut ::core::ffi::c_void,
        value: f64,
    ) -> ::windows_core::HRESULT,
    pub MinHeight: unsafe extern "system" fn(
        this: *mut ::core::ffi::c_void,
        result__: *mut f64,
    ) -> ::windows_core::HRESULT,
    pub SetMinHeight: unsafe extern "system" fn(
        this: *mut ::core::ffi::c_void,
        value: f64,
    ) -> ::windows_core::HRESULT,
    pub MaxHeight: unsafe extern "system" fn(
        this: *mut ::core::ffi::c_void,
        result__: *mut f64,
    ) -> ::windows_core::HRESULT,
    pub SetMaxHeight: unsafe extern "system" fn(
        this: *mut ::core::ffi::c_void,
        value: f64,
    ) -> ::windows_core::HRESULT,
    pub HorizontalAlignment: unsafe extern "system" fn(
        this: *mut ::core::ffi::c_void,
        result__: *mut HorizontalAlignment,
    ) -> ::windows_core::HRESULT,
    pub SetHorizontalAlignment: unsafe extern "system" fn(
        this: *mut ::core::ffi::c_void,
        value: HorizontalAlignment,
    ) -> ::windows_core::HRESULT,
    pub VerticalAlignment: unsafe extern "system" fn(
        this: *mut ::core::ffi::c_void,
        result__: *mut VerticalAlignment,
    ) -> ::windows_core::HRESULT,
    pub SetVerticalAlignment: unsafe extern "system" fn(
        this: *mut ::core::ffi::c_void,
        value: VerticalAlignment,
    ) -> ::windows_core::HRESULT,
    pub Margin: unsafe extern "system" fn(
        this: *mut ::core::ffi::c_void,
        result__: *mut Thickness,
    ) -> ::windows_core::HRESULT,
    pub SetMargin: unsafe extern "system" fn(
        this: *mut ::core::ffi::c_void,
        value: Thickness,
    ) -> ::windows_core::HRESULT,
    pub Name: unsafe extern "system" fn(
        this: *mut ::core::ffi::c_void,
        result__: *mut ::std::mem::MaybeUninit<::windows_core::HSTRING>,
    ) -> ::windows_core::HRESULT,
    pub SetName: unsafe extern "system" fn(
        this: *mut ::core::ffi::c_void,
        value: ::std::mem::MaybeUninit<::windows_core::HSTRING>,
    ) -> ::windows_core::HRESULT,
    #[cfg(feature = "Windows_Foundation")]
    pub BaseUri: unsafe extern "system" fn(
        this: *mut ::core::ffi::c_void,
        result__: *mut *mut ::core::ffi::c_void,
    ) -> ::windows_core::HRESULT,
    #[cfg(not(feature = "Windows_Foundation"))]
    BaseUri: usize,
    pub DataContext: unsafe extern "system" fn(
        this: *mut ::core::ffi::c_void,
        result__: *mut *mut ::core::ffi::c_void,
    ) -> ::windows_core::HRESULT,
    pub SetDataContext: unsafe extern "system" fn(
        this: *mut ::core::ffi::c_void,
        value: *mut ::core::ffi::c_void,
    ) -> ::windows_core::HRESULT,
    pub AllowFocusOnInteraction: unsafe extern "system" fn(
        this: *mut ::core::ffi::c_void,
        result__: *mut bool,
    ) -> ::windows_core::HRESULT,
    pub SetAllowFocusOnInteraction: unsafe extern "system" fn(
        this: *mut ::core::ffi::c_void,
        value: bool,
    ) -> ::windows_core::HRESULT,
    pub FocusVisualMargin: unsafe extern "system" fn(
        this: *mut ::core::ffi::c_void,
        result__: *mut Thickness,
    ) -> ::windows_core::HRESULT,
    pub SetFocusVisualMargin: unsafe extern "system" fn(
        this: *mut ::core::ffi::c_void,
        value: Thickness,
    ) -> ::windows_core::HRESULT,
    pub FocusVisualSecondaryThickness: unsafe extern "system" fn(
        this: *mut ::core::ffi::c_void,
        result__: *mut Thickness,
    ) -> ::windows_core::HRESULT,
    pub SetFocusVisualSecondaryThickness: unsafe extern "system" fn(
        this: *mut ::core::ffi::c_void,
        value: Thickness,
    ) -> ::windows_core::HRESULT,
    pub FocusVisualPrimaryThickness: unsafe extern "system" fn(
        this: *mut ::core::ffi::c_void,
        result__: *mut Thickness,
    ) -> ::windows_core::HRESULT,
    pub SetFocusVisualPrimaryThickness: unsafe extern "system" fn(
        this: *mut ::core::ffi::c_void,
        value: Thickness,
    ) -> ::windows_core::HRESULT,
    #[cfg(feature = "Microsoft_UI_Xaml_Media")]
    pub FocusVisualSecondaryBrush: unsafe extern "system" fn(
        this: *mut ::core::ffi::c_void,
        result__: *mut *mut ::core::ffi::c_void,
    ) -> ::windows_core::HRESULT,
    #[cfg(not(feature = "Microsoft_UI_Xaml_Media"))]
    FocusVisualSecondaryBrush: usize,
    #[cfg(feature = "Microsoft_UI_Xaml_Media")]
    pub SetFocusVisualSecondaryBrush: unsafe extern "system" fn(
        this: *mut ::core::ffi::c_void,
        value: *mut ::core::ffi::c_void,
    ) -> ::windows_core::HRESULT,
    #[cfg(not(feature = "Microsoft_UI_Xaml_Media"))]
    SetFocusVisualSecondaryBrush: usize,
    #[cfg(feature = "Microsoft_UI_Xaml_Media")]
    pub FocusVisualPrimaryBrush: unsafe extern "system" fn(
        this: *mut ::core::ffi::c_void,
        result__: *mut *mut ::core::ffi::c_void,
    ) -> ::windows_core::HRESULT,
    #[cfg(not(feature = "Microsoft_UI_Xaml_Media"))]
    FocusVisualPrimaryBrush: usize,
    #[cfg(feature = "Microsoft_UI_Xaml_Media")]
    pub SetFocusVisualPrimaryBrush: unsafe extern "system" fn(
        this: *mut ::core::ffi::c_void,
        value: *mut ::core::ffi::c_void,
    ) -> ::windows_core::HRESULT,
    #[cfg(not(feature = "Microsoft_UI_Xaml_Media"))]
    SetFocusVisualPrimaryBrush: usize,
    pub AllowFocusWhenDisabled: unsafe extern "system" fn(
        this: *mut ::core::ffi::c_void,
        result__: *mut bool,
    ) -> ::windows_core::HRESULT,
    pub SetAllowFocusWhenDisabled: unsafe extern "system" fn(
        this: *mut ::core::ffi::c_void,
        value: bool,
    ) -> ::windows_core::HRESULT,
    pub Style: unsafe extern "system" fn(
        this: *mut ::core::ffi::c_void,
        result__: *mut *mut ::core::ffi::c_void,
    ) -> ::windows_core::HRESULT,
    pub SetStyle: unsafe extern "system" fn(
        this: *mut ::core::ffi::c_void,
        value: *mut ::core::ffi::c_void,
    ) -> ::windows_core::HRESULT,
    pub Parent: unsafe extern "system" fn(
        this: *mut ::core::ffi::c_void,
        result__: *mut *mut ::core::ffi::c_void,
    ) -> ::windows_core::HRESULT,
    pub FlowDirection: unsafe extern "system" fn(
        this: *mut ::core::ffi::c_void,
        result__: *mut FlowDirection,
    ) -> ::windows_core::HRESULT,
    pub SetFlowDirection: unsafe extern "system" fn(
        this: *mut ::core::ffi::c_void,
        value: FlowDirection,
    ) -> ::windows_core::HRESULT,
    pub RequestedTheme: unsafe extern "system" fn(
        this: *mut ::core::ffi::c_void,
        result__: *mut ElementTheme,
    ) -> ::windows_core::HRESULT,
    pub SetRequestedTheme: unsafe extern "system" fn(
        this: *mut ::core::ffi::c_void,
        value: ElementTheme,
    ) -> ::windows_core::HRESULT,
    pub IsLoaded: unsafe extern "system" fn(
        this: *mut ::core::ffi::c_void,
        result__: *mut bool,
    ) -> ::windows_core::HRESULT,
    pub ActualTheme: unsafe extern "system" fn(
        this: *mut ::core::ffi::c_void,
        result__: *mut ElementTheme,
    ) -> ::windows_core::HRESULT,
    #[cfg(feature = "Windows_Foundation")]
    pub Loaded: unsafe extern "system" fn(
        this: *mut ::core::ffi::c_void,
        handler: *mut ::core::ffi::c_void,
        result__: *mut ::windows::Foundation::EventRegistrationToken,
    ) -> ::windows_core::HRESULT,
    #[cfg(not(feature = "Windows_Foundation"))]
    Loaded: usize,
    #[cfg(feature = "Windows_Foundation")]
    pub RemoveLoaded: unsafe extern "system" fn(
        this: *mut ::core::ffi::c_void,
        token: ::windows::Foundation::EventRegistrationToken,
    ) -> ::windows_core::HRESULT,
    #[cfg(not(feature = "Windows_Foundation"))]
    RemoveLoaded: usize,
    #[cfg(feature = "Windows_Foundation")]
    pub Unloaded: unsafe extern "system" fn(
        this: *mut ::core::ffi::c_void,
        handler: *mut ::core::ffi::c_void,
        result__: *mut ::windows::Foundation::EventRegistrationToken,
    ) -> ::windows_core::HRESULT,
    #[cfg(not(feature = "Windows_Foundation"))]
    Unloaded: usize,
    #[cfg(feature = "Windows_Foundation")]
    pub RemoveUnloaded: unsafe extern "system" fn(
        this: *mut ::core::ffi::c_void,
        token: ::windows::Foundation::EventRegistrationToken,
    ) -> ::windows_core::HRESULT,
    #[cfg(not(feature = "Windows_Foundation"))]
    RemoveUnloaded: usize,
    #[cfg(feature = "Windows_Foundation")]
    pub DataContextChanged: unsafe extern "system" fn(
        this: *mut ::core::ffi::c_void,
        handler: *mut ::core::ffi::c_void,
        result__: *mut ::windows::Foundation::EventRegistrationToken,
    ) -> ::windows_core::HRESULT,
    #[cfg(not(feature = "Windows_Foundation"))]
    DataContextChanged: usize,
    #[cfg(feature = "Windows_Foundation")]
    pub RemoveDataContextChanged: unsafe extern "system" fn(
        this: *mut ::core::ffi::c_void,
        token: ::windows::Foundation::EventRegistrationToken,
    ) -> ::windows_core::HRESULT,
    #[cfg(not(feature = "Windows_Foundation"))]
    RemoveDataContextChanged: usize,
    #[cfg(feature = "Windows_Foundation")]
    pub SizeChanged: unsafe extern "system" fn(
        this: *mut ::core::ffi::c_void,
        handler: *mut ::core::ffi::c_void,
        result__: *mut ::windows::Foundation::EventRegistrationToken,
    ) -> ::windows_core::HRESULT,
    #[cfg(not(feature = "Windows_Foundation"))]
    SizeChanged: usize,
    #[cfg(feature = "Windows_Foundation")]
    pub RemoveSizeChanged: unsafe extern "system" fn(
        this: *mut ::core::ffi::c_void,
        token: ::windows::Foundation::EventRegistrationToken,
    ) -> ::windows_core::HRESULT,
    #[cfg(not(feature = "Windows_Foundation"))]
    RemoveSizeChanged: usize,
    #[cfg(feature = "Windows_Foundation")]
    pub LayoutUpdated: unsafe extern "system" fn(
        this: *mut ::core::ffi::c_void,
        handler: *mut ::core::ffi::c_void,
        result__: *mut ::windows::Foundation::EventRegistrationToken,
    ) -> ::windows_core::HRESULT,
    #[cfg(not(feature = "Windows_Foundation"))]
    LayoutUpdated: usize,
    #[cfg(feature = "Windows_Foundation")]
    pub RemoveLayoutUpdated: unsafe extern "system" fn(
        this: *mut ::core::ffi::c_void,
        token: ::windows::Foundation::EventRegistrationToken,
    ) -> ::windows_core::HRESULT,
    #[cfg(not(feature = "Windows_Foundation"))]
    RemoveLayoutUpdated: usize,
    #[cfg(feature = "Windows_Foundation")]
    pub Loading: unsafe extern "system" fn(
        this: *mut ::core::ffi::c_void,
        handler: *mut ::core::ffi::c_void,
        result__: *mut ::windows::Foundation::EventRegistrationToken,
    ) -> ::windows_core::HRESULT,
    #[cfg(not(feature = "Windows_Foundation"))]
    Loading: usize,
    #[cfg(feature = "Windows_Foundation")]
    pub RemoveLoading: unsafe extern "system" fn(
        this: *mut ::core::ffi::c_void,
        token: ::windows::Foundation::EventRegistrationToken,
    ) -> ::windows_core::HRESULT,
    #[cfg(not(feature = "Windows_Foundation"))]
    RemoveLoading: usize,
    #[cfg(feature = "Windows_Foundation")]
    pub ActualThemeChanged: unsafe extern "system" fn(
        this: *mut ::core::ffi::c_void,
        handler: *mut ::core::ffi::c_void,
        result__: *mut ::windows::Foundation::EventRegistrationToken,
    ) -> ::windows_core::HRESULT,
    #[cfg(not(feature = "Windows_Foundation"))]
    ActualThemeChanged: usize,
    #[cfg(feature = "Windows_Foundation")]
    pub RemoveActualThemeChanged: unsafe extern "system" fn(
        this: *mut ::core::ffi::c_void,
        token: ::windows::Foundation::EventRegistrationToken,
    ) -> ::windows_core::HRESULT,
    #[cfg(not(feature = "Windows_Foundation"))]
    RemoveActualThemeChanged: usize,
    #[cfg(feature = "Windows_Foundation")]
    pub EffectiveViewportChanged: unsafe extern "system" fn(
        this: *mut ::core::ffi::c_void,
        handler: *mut ::core::ffi::c_void,
        result__: *mut ::windows::Foundation::EventRegistrationToken,
    ) -> ::windows_core::HRESULT,
    #[cfg(not(feature = "Windows_Foundation"))]
    EffectiveViewportChanged: usize,
    #[cfg(feature = "Windows_Foundation")]
    pub RemoveEffectiveViewportChanged: unsafe extern "system" fn(
        this: *mut ::core::ffi::c_void,
        token: ::windows::Foundation::EventRegistrationToken,
    ) -> ::windows_core::HRESULT,
    #[cfg(not(feature = "Windows_Foundation"))]
    RemoveEffectiveViewportChanged: usize,
    pub FindName: unsafe extern "system" fn(
        this: *mut ::core::ffi::c_void,
        name: ::std::mem::MaybeUninit<::windows_core::HSTRING>,
        result__: *mut *mut ::core::ffi::c_void,
    ) -> ::windows_core::HRESULT,
    #[cfg(feature = "Microsoft_UI_Xaml_Data")]
    pub SetBinding: unsafe extern "system" fn(
        this: *mut ::core::ffi::c_void,
        dp: *mut ::core::ffi::c_void,
        binding: *mut ::core::ffi::c_void,
    ) -> ::windows_core::HRESULT,
    #[cfg(not(feature = "Microsoft_UI_Xaml_Data"))]
    SetBinding: usize,
    #[cfg(feature = "Microsoft_UI_Xaml_Data")]
    pub GetBindingExpression: unsafe extern "system" fn(
        this: *mut ::core::ffi::c_void,
        dp: *mut ::core::ffi::c_void,
        result__: *mut *mut ::core::ffi::c_void,
    ) -> ::windows_core::HRESULT,
    #[cfg(not(feature = "Microsoft_UI_Xaml_Data"))]
    GetBindingExpression: usize,
}
#[doc(hidden)]
#[repr(transparent)]
#[derive(::core::cmp::PartialEq, ::core::cmp::Eq, ::core::fmt::Debug, ::core::clone::Clone)]
pub struct IFrameworkElementFactory(::windows_core::IUnknown);
unsafe impl ::windows_core::Interface for IFrameworkElementFactory {
    type Vtable = IFrameworkElementFactory_Vtbl;
}
unsafe impl ::windows_core::ComInterface for IFrameworkElementFactory {
    const IID: ::windows_core::GUID =
        ::windows_core::GUID::from_u128(0xbd3f2272_3efa_5f92_b759_90b1cc3e784c);
}
#[repr(C)]
#[doc(hidden)]
pub struct IFrameworkElementFactory_Vtbl {
    pub base__: ::windows_core::IInspectable_Vtbl,
    pub CreateInstance: unsafe extern "system" fn(
        this: *mut ::core::ffi::c_void,
        baseinterface: *mut ::core::ffi::c_void,
        innerinterface: *mut *mut ::core::ffi::c_void,
        result__: *mut *mut ::core::ffi::c_void,
    ) -> ::windows_core::HRESULT,
}
#[doc(hidden)]
#[repr(transparent)]
#[derive(::core::cmp::PartialEq, ::core::cmp::Eq, ::core::fmt::Debug, ::core::clone::Clone)]
pub struct IFrameworkElementOverrides(::windows_core::IUnknown);
unsafe impl ::windows_core::Interface for IFrameworkElementOverrides {
    type Vtable = IFrameworkElementOverrides_Vtbl;
}
unsafe impl ::windows_core::ComInterface for IFrameworkElementOverrides {
    const IID: ::windows_core::GUID =
        ::windows_core::GUID::from_u128(0xffc6fd98_f38c_5904_9ce4_97a3427cf4ba);
}
#[repr(C)]
#[doc(hidden)]
pub struct IFrameworkElementOverrides_Vtbl {
    pub base__: ::windows_core::IInspectable_Vtbl,
    #[cfg(feature = "Windows_Foundation")]
    pub MeasureOverride: unsafe extern "system" fn(
        this: *mut ::core::ffi::c_void,
        availablesize: ::windows::Foundation::Size,
        result__: *mut ::windows::Foundation::Size,
    ) -> ::windows_core::HRESULT,
    #[cfg(not(feature = "Windows_Foundation"))]
    MeasureOverride: usize,
    #[cfg(feature = "Windows_Foundation")]
    pub ArrangeOverride: unsafe extern "system" fn(
        this: *mut ::core::ffi::c_void,
        finalsize: ::windows::Foundation::Size,
        result__: *mut ::windows::Foundation::Size,
    ) -> ::windows_core::HRESULT,
    #[cfg(not(feature = "Windows_Foundation"))]
    ArrangeOverride: usize,
    pub OnApplyTemplate:
        unsafe extern "system" fn(this: *mut ::core::ffi::c_void) -> ::windows_core::HRESULT,
    pub GoToElementStateCore: unsafe extern "system" fn(
        this: *mut ::core::ffi::c_void,
        statename: ::std::mem::MaybeUninit<::windows_core::HSTRING>,
        usetransitions: bool,
        result__: *mut bool,
    ) -> ::windows_core::HRESULT,
}
#[doc(hidden)]
#[repr(transparent)]
#[derive(::core::cmp::PartialEq, ::core::cmp::Eq, ::core::fmt::Debug, ::core::clone::Clone)]
pub struct IFrameworkElementProtected(::windows_core::IUnknown);
unsafe impl ::windows_core::Interface for IFrameworkElementProtected {
    type Vtable = IFrameworkElementProtected_Vtbl;
}
unsafe impl ::windows_core::ComInterface for IFrameworkElementProtected {
    const IID: ::windows_core::GUID =
        ::windows_core::GUID::from_u128(0xe59a3db0_91e5_5903_9caf_d1bb9f458bf2);
}
#[repr(C)]
#[doc(hidden)]
pub struct IFrameworkElementProtected_Vtbl {
    pub base__: ::windows_core::IInspectable_Vtbl,
    pub InvalidateViewport:
        unsafe extern "system" fn(this: *mut ::core::ffi::c_void) -> ::windows_core::HRESULT,
}
#[doc(hidden)]
#[repr(transparent)]
#[derive(::core::cmp::PartialEq, ::core::cmp::Eq, ::core::fmt::Debug, ::core::clone::Clone)]
pub struct IFrameworkElementStatics(::windows_core::IUnknown);
unsafe impl ::windows_core::Interface for IFrameworkElementStatics {
    type Vtable = IFrameworkElementStatics_Vtbl;
}
unsafe impl ::windows_core::ComInterface for IFrameworkElementStatics {
    const IID: ::windows_core::GUID =
        ::windows_core::GUID::from_u128(0x894e2704_14e7_569a_b21e_afc7df7145a1);
}
#[repr(C)]
#[doc(hidden)]
pub struct IFrameworkElementStatics_Vtbl {
    pub base__: ::windows_core::IInspectable_Vtbl,
    pub TagProperty: unsafe extern "system" fn(
        this: *mut ::core::ffi::c_void,
        result__: *mut *mut ::core::ffi::c_void,
    ) -> ::windows_core::HRESULT,
    pub LanguageProperty: unsafe extern "system" fn(
        this: *mut ::core::ffi::c_void,
        result__: *mut *mut ::core::ffi::c_void,
    ) -> ::windows_core::HRESULT,
    pub ActualWidthProperty: unsafe extern "system" fn(
        this: *mut ::core::ffi::c_void,
        result__: *mut *mut ::core::ffi::c_void,
    ) -> ::windows_core::HRESULT,
    pub ActualHeightProperty: unsafe extern "system" fn(
        this: *mut ::core::ffi::c_void,
        result__: *mut *mut ::core::ffi::c_void,
    ) -> ::windows_core::HRESULT,
    pub WidthProperty: unsafe extern "system" fn(
        this: *mut ::core::ffi::c_void,
        result__: *mut *mut ::core::ffi::c_void,
    ) -> ::windows_core::HRESULT,
    pub HeightProperty: unsafe extern "system" fn(
        this: *mut ::core::ffi::c_void,
        result__: *mut *mut ::core::ffi::c_void,
    ) -> ::windows_core::HRESULT,
    pub MinWidthProperty: unsafe extern "system" fn(
        this: *mut ::core::ffi::c_void,
        result__: *mut *mut ::core::ffi::c_void,
    ) -> ::windows_core::HRESULT,
    pub MaxWidthProperty: unsafe extern "system" fn(
        this: *mut ::core::ffi::c_void,
        result__: *mut *mut ::core::ffi::c_void,
    ) -> ::windows_core::HRESULT,
    pub MinHeightProperty: unsafe extern "system" fn(
        this: *mut ::core::ffi::c_void,
        result__: *mut *mut ::core::ffi::c_void,
    ) -> ::windows_core::HRESULT,
    pub MaxHeightProperty: unsafe extern "system" fn(
        this: *mut ::core::ffi::c_void,
        result__: *mut *mut ::core::ffi::c_void,
    ) -> ::windows_core::HRESULT,
    pub HorizontalAlignmentProperty: unsafe extern "system" fn(
        this: *mut ::core::ffi::c_void,
        result__: *mut *mut ::core::ffi::c_void,
    ) -> ::windows_core::HRESULT,
    pub VerticalAlignmentProperty: unsafe extern "system" fn(
        this: *mut ::core::ffi::c_void,
        result__: *mut *mut ::core::ffi::c_void,
    ) -> ::windows_core::HRESULT,
    pub MarginProperty: unsafe extern "system" fn(
        this: *mut ::core::ffi::c_void,
        result__: *mut *mut ::core::ffi::c_void,
    ) -> ::windows_core::HRESULT,
    pub NameProperty: unsafe extern "system" fn(
        this: *mut ::core::ffi::c_void,
        result__: *mut *mut ::core::ffi::c_void,
    ) -> ::windows_core::HRESULT,
    pub DataContextProperty: unsafe extern "system" fn(
        this: *mut ::core::ffi::c_void,
        result__: *mut *mut ::core::ffi::c_void,
    ) -> ::windows_core::HRESULT,
    pub AllowFocusOnInteractionProperty: unsafe extern "system" fn(
        this: *mut ::core::ffi::c_void,
        result__: *mut *mut ::core::ffi::c_void,
    ) -> ::windows_core::HRESULT,
    pub FocusVisualMarginProperty: unsafe extern "system" fn(
        this: *mut ::core::ffi::c_void,
        result__: *mut *mut ::core::ffi::c_void,
    ) -> ::windows_core::HRESULT,
    pub FocusVisualSecondaryThicknessProperty: unsafe extern "system" fn(
        this: *mut ::core::ffi::c_void,
        result__: *mut *mut ::core::ffi::c_void,
    )
        -> ::windows_core::HRESULT,
    pub FocusVisualPrimaryThicknessProperty: unsafe extern "system" fn(
        this: *mut ::core::ffi::c_void,
        result__: *mut *mut ::core::ffi::c_void,
    )
        -> ::windows_core::HRESULT,
    pub FocusVisualSecondaryBrushProperty: unsafe extern "system" fn(
        this: *mut ::core::ffi::c_void,
        result__: *mut *mut ::core::ffi::c_void,
    )
        -> ::windows_core::HRESULT,
    pub FocusVisualPrimaryBrushProperty: unsafe extern "system" fn(
        this: *mut ::core::ffi::c_void,
        result__: *mut *mut ::core::ffi::c_void,
    ) -> ::windows_core::HRESULT,
    pub AllowFocusWhenDisabledProperty: unsafe extern "system" fn(
        this: *mut ::core::ffi::c_void,
        result__: *mut *mut ::core::ffi::c_void,
    ) -> ::windows_core::HRESULT,
    pub StyleProperty: unsafe extern "system" fn(
        this: *mut ::core::ffi::c_void,
        result__: *mut *mut ::core::ffi::c_void,
    ) -> ::windows_core::HRESULT,
    pub FlowDirectionProperty: unsafe extern "system" fn(
        this: *mut ::core::ffi::c_void,
        result__: *mut *mut ::core::ffi::c_void,
    ) -> ::windows_core::HRESULT,
    pub RequestedThemeProperty: unsafe extern "system" fn(
        this: *mut ::core::ffi::c_void,
        result__: *mut *mut ::core::ffi::c_void,
    ) -> ::windows_core::HRESULT,
    pub ActualThemeProperty: unsafe extern "system" fn(
        this: *mut ::core::ffi::c_void,
        result__: *mut *mut ::core::ffi::c_void,
    ) -> ::windows_core::HRESULT,
    pub DeferTree: unsafe extern "system" fn(
        this: *mut ::core::ffi::c_void,
        element: *mut ::core::ffi::c_void,
    ) -> ::windows_core::HRESULT,
}
#[doc(hidden)]
#[repr(transparent)]
#[derive(::core::cmp::PartialEq, ::core::cmp::Eq, ::core::fmt::Debug, ::core::clone::Clone)]
pub struct IFrameworkTemplate(::windows_core::IUnknown);
unsafe impl ::windows_core::Interface for IFrameworkTemplate {
    type Vtable = IFrameworkTemplate_Vtbl;
}
unsafe impl ::windows_core::ComInterface for IFrameworkTemplate {
    const IID: ::windows_core::GUID =
        ::windows_core::GUID::from_u128(0x0084c7c2_de48_5b0b_8a5a_e4fb76b7f7d1);
}
#[repr(C)]
#[doc(hidden)]
pub struct IFrameworkTemplate_Vtbl {
    pub base__: ::windows_core::IInspectable_Vtbl,
}
#[doc(hidden)]
#[repr(transparent)]
#[derive(::core::cmp::PartialEq, ::core::cmp::Eq, ::core::fmt::Debug, ::core::clone::Clone)]
pub struct IFrameworkTemplateFactory(::windows_core::IUnknown);
unsafe impl ::windows_core::Interface for IFrameworkTemplateFactory {
    type Vtable = IFrameworkTemplateFactory_Vtbl;
}
unsafe impl ::windows_core::ComInterface for IFrameworkTemplateFactory {
    const IID: ::windows_core::GUID =
        ::windows_core::GUID::from_u128(0x616dd6db_b064_561d_b162_46ceb45dc562);
}
#[repr(C)]
#[doc(hidden)]
pub struct IFrameworkTemplateFactory_Vtbl {
    pub base__: ::windows_core::IInspectable_Vtbl,
    pub CreateInstance: unsafe extern "system" fn(
        this: *mut ::core::ffi::c_void,
        baseinterface: *mut ::core::ffi::c_void,
        innerinterface: *mut *mut ::core::ffi::c_void,
        result__: *mut *mut ::core::ffi::c_void,
    ) -> ::windows_core::HRESULT,
}
#[doc(hidden)]
#[repr(transparent)]
#[derive(::core::cmp::PartialEq, ::core::cmp::Eq, ::core::fmt::Debug, ::core::clone::Clone)]
pub struct IFrameworkView(::windows_core::IUnknown);
unsafe impl ::windows_core::Interface for IFrameworkView {
    type Vtable = IFrameworkView_Vtbl;
}
unsafe impl ::windows_core::ComInterface for IFrameworkView {
    const IID: ::windows_core::GUID =
        ::windows_core::GUID::from_u128(0xe60094c3_45af_5a8f_9511_1781d7df1799);
}
#[repr(C)]
#[doc(hidden)]
pub struct IFrameworkView_Vtbl {
    pub base__: ::windows_core::IInspectable_Vtbl,
}
#[doc(hidden)]
#[repr(transparent)]
#[derive(::core::cmp::PartialEq, ::core::cmp::Eq, ::core::fmt::Debug, ::core::clone::Clone)]
pub struct IFrameworkViewSource(::windows_core::IUnknown);
unsafe impl ::windows_core::Interface for IFrameworkViewSource {
    type Vtable = IFrameworkViewSource_Vtbl;
}
unsafe impl ::windows_core::ComInterface for IFrameworkViewSource {
    const IID: ::windows_core::GUID =
        ::windows_core::GUID::from_u128(0x52b5d975_6fa6_5b66_a248_d17443b2bca0);
}
#[repr(C)]
#[doc(hidden)]
pub struct IFrameworkViewSource_Vtbl {
    pub base__: ::windows_core::IInspectable_Vtbl,
}
#[doc(hidden)]
#[repr(transparent)]
#[derive(::core::cmp::PartialEq, ::core::cmp::Eq, ::core::fmt::Debug, ::core::clone::Clone)]
pub struct IGridLengthHelper(::windows_core::IUnknown);
unsafe impl ::windows_core::Interface for IGridLengthHelper {
    type Vtable = IGridLengthHelper_Vtbl;
}
unsafe impl ::windows_core::ComInterface for IGridLengthHelper {
    const IID: ::windows_core::GUID =
        ::windows_core::GUID::from_u128(0x592b4fd5_6564_54e0_87d6_1c41939ed499);
}
#[repr(C)]
#[doc(hidden)]
pub struct IGridLengthHelper_Vtbl {
    pub base__: ::windows_core::IInspectable_Vtbl,
}
#[doc(hidden)]
#[repr(transparent)]
#[derive(::core::cmp::PartialEq, ::core::cmp::Eq, ::core::fmt::Debug, ::core::clone::Clone)]
pub struct IGridLengthHelperStatics(::windows_core::IUnknown);
unsafe impl ::windows_core::Interface for IGridLengthHelperStatics {
    type Vtable = IGridLengthHelperStatics_Vtbl;
}
unsafe impl ::windows_core::ComInterface for IGridLengthHelperStatics {
    const IID: ::windows_core::GUID =
        ::windows_core::GUID::from_u128(0xcea8881b_4e64_535d_9fcd_b4828d3979b0);
}
#[repr(C)]
#[doc(hidden)]
pub struct IGridLengthHelperStatics_Vtbl {
    pub base__: ::windows_core::IInspectable_Vtbl,
    pub Auto: unsafe extern "system" fn(
        this: *mut ::core::ffi::c_void,
        result__: *mut GridLength,
    ) -> ::windows_core::HRESULT,
    pub FromPixels: unsafe extern "system" fn(
        this: *mut ::core::ffi::c_void,
        pixels: f64,
        result__: *mut GridLength,
    ) -> ::windows_core::HRESULT,
    pub FromValueAndType: unsafe extern "system" fn(
        this: *mut ::core::ffi::c_void,
        value: f64,
        r#type: GridUnitType,
        result__: *mut GridLength,
    ) -> ::windows_core::HRESULT,
    pub GetIsAbsolute: unsafe extern "system" fn(
        this: *mut ::core::ffi::c_void,
        target: GridLength,
        result__: *mut bool,
    ) -> ::windows_core::HRESULT,
    pub GetIsAuto: unsafe extern "system" fn(
        this: *mut ::core::ffi::c_void,
        target: GridLength,
        result__: *mut bool,
    ) -> ::windows_core::HRESULT,
    pub GetIsStar: unsafe extern "system" fn(
        this: *mut ::core::ffi::c_void,
        target: GridLength,
        result__: *mut bool,
    ) -> ::windows_core::HRESULT,
    pub Equals: unsafe extern "system" fn(
        this: *mut ::core::ffi::c_void,
        target: GridLength,
        value: GridLength,
        result__: *mut bool,
    ) -> ::windows_core::HRESULT,
}
#[doc(hidden)]
#[repr(transparent)]
#[derive(::core::cmp::PartialEq, ::core::cmp::Eq, ::core::fmt::Debug, ::core::clone::Clone)]
pub struct ILaunchActivatedEventArgs(::windows_core::IUnknown);
unsafe impl ::windows_core::Interface for ILaunchActivatedEventArgs {
    type Vtable = ILaunchActivatedEventArgs_Vtbl;
}
unsafe impl ::windows_core::ComInterface for ILaunchActivatedEventArgs {
    const IID: ::windows_core::GUID =
        ::windows_core::GUID::from_u128(0xd505cea9_1bcb_5b29_a8be_944e00f06f78);
}
#[repr(C)]
#[doc(hidden)]
pub struct ILaunchActivatedEventArgs_Vtbl {
    pub base__: ::windows_core::IInspectable_Vtbl,
    pub Arguments: unsafe extern "system" fn(
        this: *mut ::core::ffi::c_void,
        result__: *mut ::std::mem::MaybeUninit<::windows_core::HSTRING>,
    ) -> ::windows_core::HRESULT,
    #[cfg(feature = "Windows_ApplicationModel_Activation")]
    pub UWPLaunchActivatedEventArgs: unsafe extern "system" fn(
        this: *mut ::core::ffi::c_void,
        result__: *mut *mut ::core::ffi::c_void,
    ) -> ::windows_core::HRESULT,
    #[cfg(not(feature = "Windows_ApplicationModel_Activation"))]
    UWPLaunchActivatedEventArgs: usize,
}
#[doc(hidden)]
#[repr(transparent)]
#[derive(::core::cmp::PartialEq, ::core::cmp::Eq, ::core::fmt::Debug, ::core::clone::Clone)]
pub struct IMediaFailedRoutedEventArgs(::windows_core::IUnknown);
unsafe impl ::windows_core::Interface for IMediaFailedRoutedEventArgs {
    type Vtable = IMediaFailedRoutedEventArgs_Vtbl;
}
unsafe impl ::windows_core::ComInterface for IMediaFailedRoutedEventArgs {
    const IID: ::windows_core::GUID =
        ::windows_core::GUID::from_u128(0xa1dce737_539b_5e54_99af_75ece428bf9b);
}
#[repr(C)]
#[doc(hidden)]
pub struct IMediaFailedRoutedEventArgs_Vtbl {
    pub base__: ::windows_core::IInspectable_Vtbl,
    pub ErrorTrace: unsafe extern "system" fn(
        this: *mut ::core::ffi::c_void,
        result__: *mut ::std::mem::MaybeUninit<::windows_core::HSTRING>,
    ) -> ::windows_core::HRESULT,
}
#[doc(hidden)]
#[repr(transparent)]
#[derive(::core::cmp::PartialEq, ::core::cmp::Eq, ::core::fmt::Debug, ::core::clone::Clone)]
pub struct IPointHelper(::windows_core::IUnknown);
unsafe impl ::windows_core::Interface for IPointHelper {
    type Vtable = IPointHelper_Vtbl;
}
unsafe impl ::windows_core::ComInterface for IPointHelper {
    const IID: ::windows_core::GUID =
        ::windows_core::GUID::from_u128(0x06fcc7a4_6099_5f2e_83a5_f3be0e2c90aa);
}
#[repr(C)]
#[doc(hidden)]
pub struct IPointHelper_Vtbl {
    pub base__: ::windows_core::IInspectable_Vtbl,
}
#[doc(hidden)]
#[repr(transparent)]
#[derive(::core::cmp::PartialEq, ::core::cmp::Eq, ::core::fmt::Debug, ::core::clone::Clone)]
pub struct IPointHelperStatics(::windows_core::IUnknown);
unsafe impl ::windows_core::Interface for IPointHelperStatics {
    type Vtable = IPointHelperStatics_Vtbl;
}
unsafe impl ::windows_core::ComInterface for IPointHelperStatics {
    const IID: ::windows_core::GUID =
        ::windows_core::GUID::from_u128(0xb0b2bd44_600b_51b3_a42c_3fd36c1ab042);
}
#[repr(C)]
#[doc(hidden)]
pub struct IPointHelperStatics_Vtbl {
    pub base__: ::windows_core::IInspectable_Vtbl,
    #[cfg(feature = "Windows_Foundation")]
    pub FromCoordinates: unsafe extern "system" fn(
        this: *mut ::core::ffi::c_void,
        x: f32,
        y: f32,
        result__: *mut ::windows::Foundation::Point,
    ) -> ::windows_core::HRESULT,
    #[cfg(not(feature = "Windows_Foundation"))]
    FromCoordinates: usize,
}
#[doc(hidden)]
#[repr(transparent)]
#[derive(::core::cmp::PartialEq, ::core::cmp::Eq, ::core::fmt::Debug, ::core::clone::Clone)]
pub struct IPropertyMetadata(::windows_core::IUnknown);
unsafe impl ::windows_core::Interface for IPropertyMetadata {
    type Vtable = IPropertyMetadata_Vtbl;
}
unsafe impl ::windows_core::ComInterface for IPropertyMetadata {
    const IID: ::windows_core::GUID =
        ::windows_core::GUID::from_u128(0xb3644425_9464_5434_b0ae_aff8d3159fe1);
}
#[repr(C)]
#[doc(hidden)]
pub struct IPropertyMetadata_Vtbl {
    pub base__: ::windows_core::IInspectable_Vtbl,
    pub DefaultValue: unsafe extern "system" fn(
        this: *mut ::core::ffi::c_void,
        result__: *mut *mut ::core::ffi::c_void,
    ) -> ::windows_core::HRESULT,
    pub CreateDefaultValueCallback: unsafe extern "system" fn(
        this: *mut ::core::ffi::c_void,
        result__: *mut *mut ::core::ffi::c_void,
    ) -> ::windows_core::HRESULT,
}
#[doc(hidden)]
#[repr(transparent)]
#[derive(::core::cmp::PartialEq, ::core::cmp::Eq, ::core::fmt::Debug, ::core::clone::Clone)]
pub struct IPropertyMetadataFactory(::windows_core::IUnknown);
unsafe impl ::windows_core::Interface for IPropertyMetadataFactory {
    type Vtable = IPropertyMetadataFactory_Vtbl;
}
unsafe impl ::windows_core::ComInterface for IPropertyMetadataFactory {
    const IID: ::windows_core::GUID =
        ::windows_core::GUID::from_u128(0x9f420906_111a_5465_91ee_bed14b3e7fec);
}
#[repr(C)]
#[doc(hidden)]
pub struct IPropertyMetadataFactory_Vtbl {
    pub base__: ::windows_core::IInspectable_Vtbl,
    pub CreateInstanceWithDefaultValue: unsafe extern "system" fn(
        this: *mut ::core::ffi::c_void,
        defaultvalue: *mut ::core::ffi::c_void,
        baseinterface: *mut ::core::ffi::c_void,
        innerinterface: *mut *mut ::core::ffi::c_void,
        result__: *mut *mut ::core::ffi::c_void,
    ) -> ::windows_core::HRESULT,
    pub CreateInstanceWithDefaultValueAndCallback:
        unsafe extern "system" fn(
            this: *mut ::core::ffi::c_void,
            defaultvalue: *mut ::core::ffi::c_void,
            propertychangedcallback: *mut ::core::ffi::c_void,
            baseinterface: *mut ::core::ffi::c_void,
            innerinterface: *mut *mut ::core::ffi::c_void,
            result__: *mut *mut ::core::ffi::c_void,
        ) -> ::windows_core::HRESULT,
}
#[doc(hidden)]
#[repr(transparent)]
#[derive(::core::cmp::PartialEq, ::core::cmp::Eq, ::core::fmt::Debug, ::core::clone::Clone)]
pub struct IPropertyMetadataStatics(::windows_core::IUnknown);
unsafe impl ::windows_core::Interface for IPropertyMetadataStatics {
    type Vtable = IPropertyMetadataStatics_Vtbl;
}
unsafe impl ::windows_core::ComInterface for IPropertyMetadataStatics {
    const IID: ::windows_core::GUID =
        ::windows_core::GUID::from_u128(0x37b8add4_7a4a_5cf7_a174_235182cd082e);
}
#[repr(C)]
#[doc(hidden)]
pub struct IPropertyMetadataStatics_Vtbl {
    pub base__: ::windows_core::IInspectable_Vtbl,
    pub CreateWithDefaultValue: unsafe extern "system" fn(
        this: *mut ::core::ffi::c_void,
        defaultvalue: *mut ::core::ffi::c_void,
        result__: *mut *mut ::core::ffi::c_void,
    ) -> ::windows_core::HRESULT,
    pub CreateWithDefaultValueAndCallback: unsafe extern "system" fn(
        this: *mut ::core::ffi::c_void,
        defaultvalue: *mut ::core::ffi::c_void,
        propertychangedcallback: *mut ::core::ffi::c_void,
        result__: *mut *mut ::core::ffi::c_void,
    )
        -> ::windows_core::HRESULT,
    pub CreateWithFactory: unsafe extern "system" fn(
        this: *mut ::core::ffi::c_void,
        createdefaultvaluecallback: *mut ::core::ffi::c_void,
        result__: *mut *mut ::core::ffi::c_void,
    ) -> ::windows_core::HRESULT,
    pub CreateWithFactoryAndCallback: unsafe extern "system" fn(
        this: *mut ::core::ffi::c_void,
        createdefaultvaluecallback: *mut ::core::ffi::c_void,
        propertychangedcallback: *mut ::core::ffi::c_void,
        result__: *mut *mut ::core::ffi::c_void,
    ) -> ::windows_core::HRESULT,
}
#[doc(hidden)]
#[repr(transparent)]
#[derive(::core::cmp::PartialEq, ::core::cmp::Eq, ::core::fmt::Debug, ::core::clone::Clone)]
pub struct IPropertyPath(::windows_core::IUnknown);
unsafe impl ::windows_core::Interface for IPropertyPath {
    type Vtable = IPropertyPath_Vtbl;
}
unsafe impl ::windows_core::ComInterface for IPropertyPath {
    const IID: ::windows_core::GUID =
        ::windows_core::GUID::from_u128(0x8b0712f6_9e57_53b0_80b1_966a79f60b96);
}
#[repr(C)]
#[doc(hidden)]
pub struct IPropertyPath_Vtbl {
    pub base__: ::windows_core::IInspectable_Vtbl,
    pub Path: unsafe extern "system" fn(
        this: *mut ::core::ffi::c_void,
        result__: *mut ::std::mem::MaybeUninit<::windows_core::HSTRING>,
    ) -> ::windows_core::HRESULT,
}
#[doc(hidden)]
#[repr(transparent)]
#[derive(::core::cmp::PartialEq, ::core::cmp::Eq, ::core::fmt::Debug, ::core::clone::Clone)]
pub struct IPropertyPathFactory(::windows_core::IUnknown);
unsafe impl ::windows_core::Interface for IPropertyPathFactory {
    type Vtable = IPropertyPathFactory_Vtbl;
}
unsafe impl ::windows_core::ComInterface for IPropertyPathFactory {
    const IID: ::windows_core::GUID =
        ::windows_core::GUID::from_u128(0x08a8ccab_7ff8_5cec_bd3c_72c98804d989);
}
#[repr(C)]
#[doc(hidden)]
pub struct IPropertyPathFactory_Vtbl {
    pub base__: ::windows_core::IInspectable_Vtbl,
    pub CreateInstance: unsafe extern "system" fn(
        this: *mut ::core::ffi::c_void,
        path: ::std::mem::MaybeUninit<::windows_core::HSTRING>,
        result__: *mut *mut ::core::ffi::c_void,
    ) -> ::windows_core::HRESULT,
}
#[doc(hidden)]
#[repr(transparent)]
#[derive(::core::cmp::PartialEq, ::core::cmp::Eq, ::core::fmt::Debug, ::core::clone::Clone)]
pub struct IRectHelper(::windows_core::IUnknown);
unsafe impl ::windows_core::Interface for IRectHelper {
    type Vtable = IRectHelper_Vtbl;
}
unsafe impl ::windows_core::ComInterface for IRectHelper {
    const IID: ::windows_core::GUID =
        ::windows_core::GUID::from_u128(0x5fece92a_a3d2_5bc0_aca1_e9e1fa86ae9d);
}
#[repr(C)]
#[doc(hidden)]
pub struct IRectHelper_Vtbl {
    pub base__: ::windows_core::IInspectable_Vtbl,
}
#[doc(hidden)]
#[repr(transparent)]
#[derive(::core::cmp::PartialEq, ::core::cmp::Eq, ::core::fmt::Debug, ::core::clone::Clone)]
pub struct IRectHelperStatics(::windows_core::IUnknown);
unsafe impl ::windows_core::Interface for IRectHelperStatics {
    type Vtable = IRectHelperStatics_Vtbl;
}
unsafe impl ::windows_core::ComInterface for IRectHelperStatics {
    const IID: ::windows_core::GUID =
        ::windows_core::GUID::from_u128(0xa9cf37ad_5430_5086_a39f_74f0d1ed1072);
}
#[repr(C)]
#[doc(hidden)]
pub struct IRectHelperStatics_Vtbl {
    pub base__: ::windows_core::IInspectable_Vtbl,
    #[cfg(feature = "Windows_Foundation")]
    pub Empty: unsafe extern "system" fn(
        this: *mut ::core::ffi::c_void,
        result__: *mut ::windows::Foundation::Rect,
    ) -> ::windows_core::HRESULT,
    #[cfg(not(feature = "Windows_Foundation"))]
    Empty: usize,
    #[cfg(feature = "Windows_Foundation")]
    pub FromCoordinatesAndDimensions: unsafe extern "system" fn(
        this: *mut ::core::ffi::c_void,
        x: f32,
        y: f32,
        width: f32,
        height: f32,
        result__: *mut ::windows::Foundation::Rect,
    ) -> ::windows_core::HRESULT,
    #[cfg(not(feature = "Windows_Foundation"))]
    FromCoordinatesAndDimensions: usize,
    #[cfg(feature = "Windows_Foundation")]
    pub FromPoints: unsafe extern "system" fn(
        this: *mut ::core::ffi::c_void,
        point1: ::windows::Foundation::Point,
        point2: ::windows::Foundation::Point,
        result__: *mut ::windows::Foundation::Rect,
    ) -> ::windows_core::HRESULT,
    #[cfg(not(feature = "Windows_Foundation"))]
    FromPoints: usize,
    #[cfg(feature = "Windows_Foundation")]
    pub FromLocationAndSize: unsafe extern "system" fn(
        this: *mut ::core::ffi::c_void,
        location: ::windows::Foundation::Point,
        size: ::windows::Foundation::Size,
        result__: *mut ::windows::Foundation::Rect,
    ) -> ::windows_core::HRESULT,
    #[cfg(not(feature = "Windows_Foundation"))]
    FromLocationAndSize: usize,
    #[cfg(feature = "Windows_Foundation")]
    pub GetIsEmpty: unsafe extern "system" fn(
        this: *mut ::core::ffi::c_void,
        target: ::windows::Foundation::Rect,
        result__: *mut bool,
    ) -> ::windows_core::HRESULT,
    #[cfg(not(feature = "Windows_Foundation"))]
    GetIsEmpty: usize,
    #[cfg(feature = "Windows_Foundation")]
    pub GetBottom: unsafe extern "system" fn(
        this: *mut ::core::ffi::c_void,
        target: ::windows::Foundation::Rect,
        result__: *mut f32,
    ) -> ::windows_core::HRESULT,
    #[cfg(not(feature = "Windows_Foundation"))]
    GetBottom: usize,
    #[cfg(feature = "Windows_Foundation")]
    pub GetLeft: unsafe extern "system" fn(
        this: *mut ::core::ffi::c_void,
        target: ::windows::Foundation::Rect,
        result__: *mut f32,
    ) -> ::windows_core::HRESULT,
    #[cfg(not(feature = "Windows_Foundation"))]
    GetLeft: usize,
    #[cfg(feature = "Windows_Foundation")]
    pub GetRight: unsafe extern "system" fn(
        this: *mut ::core::ffi::c_void,
        target: ::windows::Foundation::Rect,
        result__: *mut f32,
    ) -> ::windows_core::HRESULT,
    #[cfg(not(feature = "Windows_Foundation"))]
    GetRight: usize,
    #[cfg(feature = "Windows_Foundation")]
    pub GetTop: unsafe extern "system" fn(
        this: *mut ::core::ffi::c_void,
        target: ::windows::Foundation::Rect,
        result__: *mut f32,
    ) -> ::windows_core::HRESULT,
    #[cfg(not(feature = "Windows_Foundation"))]
    GetTop: usize,
    #[cfg(feature = "Windows_Foundation")]
    pub Contains: unsafe extern "system" fn(
        this: *mut ::core::ffi::c_void,
        target: ::windows::Foundation::Rect,
        point: ::windows::Foundation::Point,
        result__: *mut bool,
    ) -> ::windows_core::HRESULT,
    #[cfg(not(feature = "Windows_Foundation"))]
    Contains: usize,
    #[cfg(feature = "Windows_Foundation")]
    pub Equals: unsafe extern "system" fn(
        this: *mut ::core::ffi::c_void,
        target: ::windows::Foundation::Rect,
        value: ::windows::Foundation::Rect,
        result__: *mut bool,
    ) -> ::windows_core::HRESULT,
    #[cfg(not(feature = "Windows_Foundation"))]
    Equals: usize,
    #[cfg(feature = "Windows_Foundation")]
    pub Intersect: unsafe extern "system" fn(
        this: *mut ::core::ffi::c_void,
        target: ::windows::Foundation::Rect,
        rect: ::windows::Foundation::Rect,
        result__: *mut ::windows::Foundation::Rect,
    ) -> ::windows_core::HRESULT,
    #[cfg(not(feature = "Windows_Foundation"))]
    Intersect: usize,
    #[cfg(feature = "Windows_Foundation")]
    pub UnionWithPoint: unsafe extern "system" fn(
        this: *mut ::core::ffi::c_void,
        target: ::windows::Foundation::Rect,
        point: ::windows::Foundation::Point,
        result__: *mut ::windows::Foundation::Rect,
    ) -> ::windows_core::HRESULT,
    #[cfg(not(feature = "Windows_Foundation"))]
    UnionWithPoint: usize,
    #[cfg(feature = "Windows_Foundation")]
    pub UnionWithRect: unsafe extern "system" fn(
        this: *mut ::core::ffi::c_void,
        target: ::windows::Foundation::Rect,
        rect: ::windows::Foundation::Rect,
        result__: *mut ::windows::Foundation::Rect,
    ) -> ::windows_core::HRESULT,
    #[cfg(not(feature = "Windows_Foundation"))]
    UnionWithRect: usize,
}
#[doc(hidden)]
#[repr(transparent)]
#[derive(::core::cmp::PartialEq, ::core::cmp::Eq, ::core::fmt::Debug, ::core::clone::Clone)]
pub struct IResourceDictionary(::windows_core::IUnknown);
unsafe impl ::windows_core::Interface for IResourceDictionary {
    type Vtable = IResourceDictionary_Vtbl;
}
unsafe impl ::windows_core::ComInterface for IResourceDictionary {
    const IID: ::windows_core::GUID =
        ::windows_core::GUID::from_u128(0x1b690975_a710_5783_a6e1_15836f6186c2);
}
#[repr(C)]
#[doc(hidden)]
pub struct IResourceDictionary_Vtbl {
    pub base__: ::windows_core::IInspectable_Vtbl,
    #[cfg(feature = "Windows_Foundation")]
    pub Source: unsafe extern "system" fn(
        this: *mut ::core::ffi::c_void,
        result__: *mut *mut ::core::ffi::c_void,
    ) -> ::windows_core::HRESULT,
    #[cfg(not(feature = "Windows_Foundation"))]
    Source: usize,
    #[cfg(feature = "Windows_Foundation")]
    pub SetSource: unsafe extern "system" fn(
        this: *mut ::core::ffi::c_void,
        value: *mut ::core::ffi::c_void,
    ) -> ::windows_core::HRESULT,
    #[cfg(not(feature = "Windows_Foundation"))]
    SetSource: usize,
    #[cfg(feature = "Windows_Foundation_Collections")]
    pub MergedDictionaries: unsafe extern "system" fn(
        this: *mut ::core::ffi::c_void,
        result__: *mut *mut ::core::ffi::c_void,
    ) -> ::windows_core::HRESULT,
    #[cfg(not(feature = "Windows_Foundation_Collections"))]
    MergedDictionaries: usize,
    #[cfg(feature = "Windows_Foundation_Collections")]
    pub ThemeDictionaries: unsafe extern "system" fn(
        this: *mut ::core::ffi::c_void,
        result__: *mut *mut ::core::ffi::c_void,
    ) -> ::windows_core::HRESULT,
    #[cfg(not(feature = "Windows_Foundation_Collections"))]
    ThemeDictionaries: usize,
}
#[doc(hidden)]
#[repr(transparent)]
#[derive(::core::cmp::PartialEq, ::core::cmp::Eq, ::core::fmt::Debug, ::core::clone::Clone)]
pub struct IResourceDictionaryFactory(::windows_core::IUnknown);
unsafe impl ::windows_core::Interface for IResourceDictionaryFactory {
    type Vtable = IResourceDictionaryFactory_Vtbl;
}
unsafe impl ::windows_core::ComInterface for IResourceDictionaryFactory {
    const IID: ::windows_core::GUID =
        ::windows_core::GUID::from_u128(0xea22a48f_ab71_56f6_a392_d82310c8aa7b);
}
#[repr(C)]
#[doc(hidden)]
pub struct IResourceDictionaryFactory_Vtbl {
    pub base__: ::windows_core::IInspectable_Vtbl,
    pub CreateInstance: unsafe extern "system" fn(
        this: *mut ::core::ffi::c_void,
        baseinterface: *mut ::core::ffi::c_void,
        innerinterface: *mut *mut ::core::ffi::c_void,
        result__: *mut *mut ::core::ffi::c_void,
    ) -> ::windows_core::HRESULT,
}
#[doc(hidden)]
#[repr(transparent)]
#[derive(::core::cmp::PartialEq, ::core::cmp::Eq, ::core::fmt::Debug, ::core::clone::Clone)]
pub struct IResourceManagerRequestedEventArgs(::windows_core::IUnknown);
unsafe impl ::windows_core::Interface for IResourceManagerRequestedEventArgs {
    type Vtable = IResourceManagerRequestedEventArgs_Vtbl;
}
unsafe impl ::windows_core::ComInterface for IResourceManagerRequestedEventArgs {
    const IID: ::windows_core::GUID =
        ::windows_core::GUID::from_u128(0xc35f4cf1_fcd6_5c6b_9be2_4cfaefb68b2a);
}
#[repr(C)]
#[doc(hidden)]
pub struct IResourceManagerRequestedEventArgs_Vtbl {
    pub base__: ::windows_core::IInspectable_Vtbl,
    #[cfg(feature = "Microsoft_Windows_ApplicationModel_Resources")]
    pub CustomResourceManager: unsafe extern "system" fn(
        this: *mut ::core::ffi::c_void,
        result__: *mut *mut ::core::ffi::c_void,
    ) -> ::windows_core::HRESULT,
    #[cfg(not(feature = "Microsoft_Windows_ApplicationModel_Resources"))]
    CustomResourceManager: usize,
    #[cfg(feature = "Microsoft_Windows_ApplicationModel_Resources")]
    pub SetCustomResourceManager: unsafe extern "system" fn(
        this: *mut ::core::ffi::c_void,
        value: *mut ::core::ffi::c_void,
    ) -> ::windows_core::HRESULT,
    #[cfg(not(feature = "Microsoft_Windows_ApplicationModel_Resources"))]
    SetCustomResourceManager: usize,
}
#[doc(hidden)]
#[repr(transparent)]
#[derive(::core::cmp::PartialEq, ::core::cmp::Eq, ::core::fmt::Debug, ::core::clone::Clone)]
pub struct IRoutedEvent(::windows_core::IUnknown);
unsafe impl ::windows_core::Interface for IRoutedEvent {
    type Vtable = IRoutedEvent_Vtbl;
}
unsafe impl ::windows_core::ComInterface for IRoutedEvent {
    const IID: ::windows_core::GUID =
        ::windows_core::GUID::from_u128(0xb2b432bc_efca_575e_9d2a_703f8b9c380f);
}
#[repr(C)]
#[doc(hidden)]
pub struct IRoutedEvent_Vtbl {
    pub base__: ::windows_core::IInspectable_Vtbl,
}
#[doc(hidden)]
#[repr(transparent)]
#[derive(::core::cmp::PartialEq, ::core::cmp::Eq, ::core::fmt::Debug, ::core::clone::Clone)]
pub struct IRoutedEventArgs(::windows_core::IUnknown);
unsafe impl ::windows_core::Interface for IRoutedEventArgs {
    type Vtable = IRoutedEventArgs_Vtbl;
}
unsafe impl ::windows_core::ComInterface for IRoutedEventArgs {
    const IID: ::windows_core::GUID =
        ::windows_core::GUID::from_u128(0x0908c407_1c7d_5de3_9c50_d971c62ec8ec);
}
#[repr(C)]
#[doc(hidden)]
pub struct IRoutedEventArgs_Vtbl {
    pub base__: ::windows_core::IInspectable_Vtbl,
    pub OriginalSource: unsafe extern "system" fn(
        this: *mut ::core::ffi::c_void,
        result__: *mut *mut ::core::ffi::c_void,
    ) -> ::windows_core::HRESULT,
}
#[doc(hidden)]
#[repr(transparent)]
#[derive(::core::cmp::PartialEq, ::core::cmp::Eq, ::core::fmt::Debug, ::core::clone::Clone)]
pub struct IRoutedEventArgsFactory(::windows_core::IUnknown);
unsafe impl ::windows_core::Interface for IRoutedEventArgsFactory {
    type Vtable = IRoutedEventArgsFactory_Vtbl;
}
unsafe impl ::windows_core::ComInterface for IRoutedEventArgsFactory {
    const IID: ::windows_core::GUID =
        ::windows_core::GUID::from_u128(0x914b02c7_076b_5b89_98e7_6c373379e9af);
}
#[repr(C)]
#[doc(hidden)]
pub struct IRoutedEventArgsFactory_Vtbl {
    pub base__: ::windows_core::IInspectable_Vtbl,
    pub CreateInstance: unsafe extern "system" fn(
        this: *mut ::core::ffi::c_void,
        baseinterface: *mut ::core::ffi::c_void,
        innerinterface: *mut *mut ::core::ffi::c_void,
        result__: *mut *mut ::core::ffi::c_void,
    ) -> ::windows_core::HRESULT,
}
#[doc(hidden)]
#[repr(transparent)]
#[derive(::core::cmp::PartialEq, ::core::cmp::Eq, ::core::fmt::Debug, ::core::clone::Clone)]
pub struct IScalarTransition(::windows_core::IUnknown);
unsafe impl ::windows_core::Interface for IScalarTransition {
    type Vtable = IScalarTransition_Vtbl;
}
unsafe impl ::windows_core::ComInterface for IScalarTransition {
    const IID: ::windows_core::GUID =
        ::windows_core::GUID::from_u128(0xc2da2ac8_814c_5889_b2f4_4ebe4b001ee3);
}
#[repr(C)]
#[doc(hidden)]
pub struct IScalarTransition_Vtbl {
    pub base__: ::windows_core::IInspectable_Vtbl,
    #[cfg(feature = "Windows_Foundation")]
    pub Duration: unsafe extern "system" fn(
        this: *mut ::core::ffi::c_void,
        result__: *mut ::windows::Foundation::TimeSpan,
    ) -> ::windows_core::HRESULT,
    #[cfg(not(feature = "Windows_Foundation"))]
    Duration: usize,
    #[cfg(feature = "Windows_Foundation")]
    pub SetDuration: unsafe extern "system" fn(
        this: *mut ::core::ffi::c_void,
        value: ::windows::Foundation::TimeSpan,
    ) -> ::windows_core::HRESULT,
    #[cfg(not(feature = "Windows_Foundation"))]
    SetDuration: usize,
}
#[doc(hidden)]
#[repr(transparent)]
#[derive(::core::cmp::PartialEq, ::core::cmp::Eq, ::core::fmt::Debug, ::core::clone::Clone)]
pub struct IScalarTransitionFactory(::windows_core::IUnknown);
unsafe impl ::windows_core::Interface for IScalarTransitionFactory {
    type Vtable = IScalarTransitionFactory_Vtbl;
}
unsafe impl ::windows_core::ComInterface for IScalarTransitionFactory {
    const IID: ::windows_core::GUID =
        ::windows_core::GUID::from_u128(0xa1650cf8_a15b_54fc_b595_c52491318f58);
}
#[repr(C)]
#[doc(hidden)]
pub struct IScalarTransitionFactory_Vtbl {
    pub base__: ::windows_core::IInspectable_Vtbl,
    pub CreateInstance: unsafe extern "system" fn(
        this: *mut ::core::ffi::c_void,
        baseinterface: *mut ::core::ffi::c_void,
        innerinterface: *mut *mut ::core::ffi::c_void,
        result__: *mut *mut ::core::ffi::c_void,
    ) -> ::windows_core::HRESULT,
}
#[doc(hidden)]
#[repr(transparent)]
#[derive(::core::cmp::PartialEq, ::core::cmp::Eq, ::core::fmt::Debug, ::core::clone::Clone)]
pub struct ISetter(::windows_core::IUnknown);
unsafe impl ::windows_core::Interface for ISetter {
    type Vtable = ISetter_Vtbl;
}
unsafe impl ::windows_core::ComInterface for ISetter {
    const IID: ::windows_core::GUID =
        ::windows_core::GUID::from_u128(0xbbd6074d_686f_5ae1_b8de_5f16aa30b80a);
}
#[repr(C)]
#[doc(hidden)]
pub struct ISetter_Vtbl {
    pub base__: ::windows_core::IInspectable_Vtbl,
    pub Property: unsafe extern "system" fn(
        this: *mut ::core::ffi::c_void,
        result__: *mut *mut ::core::ffi::c_void,
    ) -> ::windows_core::HRESULT,
    pub SetProperty: unsafe extern "system" fn(
        this: *mut ::core::ffi::c_void,
        value: *mut ::core::ffi::c_void,
    ) -> ::windows_core::HRESULT,
    pub Value: unsafe extern "system" fn(
        this: *mut ::core::ffi::c_void,
        result__: *mut *mut ::core::ffi::c_void,
    ) -> ::windows_core::HRESULT,
    pub SetValue: unsafe extern "system" fn(
        this: *mut ::core::ffi::c_void,
        value: *mut ::core::ffi::c_void,
    ) -> ::windows_core::HRESULT,
    pub Target: unsafe extern "system" fn(
        this: *mut ::core::ffi::c_void,
        result__: *mut *mut ::core::ffi::c_void,
    ) -> ::windows_core::HRESULT,
    pub SetTarget: unsafe extern "system" fn(
        this: *mut ::core::ffi::c_void,
        value: *mut ::core::ffi::c_void,
    ) -> ::windows_core::HRESULT,
}
#[doc(hidden)]
#[repr(transparent)]
#[derive(::core::cmp::PartialEq, ::core::cmp::Eq, ::core::fmt::Debug, ::core::clone::Clone)]
pub struct ISetterBase(::windows_core::IUnknown);
unsafe impl ::windows_core::Interface for ISetterBase {
    type Vtable = ISetterBase_Vtbl;
}
unsafe impl ::windows_core::ComInterface for ISetterBase {
    const IID: ::windows_core::GUID =
        ::windows_core::GUID::from_u128(0x5a7c1347_cda3_55be_bfef_5c7582213980);
}
#[repr(C)]
#[doc(hidden)]
pub struct ISetterBase_Vtbl {
    pub base__: ::windows_core::IInspectable_Vtbl,
    pub IsSealed: unsafe extern "system" fn(
        this: *mut ::core::ffi::c_void,
        result__: *mut bool,
    ) -> ::windows_core::HRESULT,
}
#[doc(hidden)]
#[repr(transparent)]
#[derive(::core::cmp::PartialEq, ::core::cmp::Eq, ::core::fmt::Debug, ::core::clone::Clone)]
pub struct ISetterBaseCollection(::windows_core::IUnknown);
unsafe impl ::windows_core::Interface for ISetterBaseCollection {
    type Vtable = ISetterBaseCollection_Vtbl;
}
unsafe impl ::windows_core::ComInterface for ISetterBaseCollection {
    const IID: ::windows_core::GUID =
        ::windows_core::GUID::from_u128(0x63bf7c0f_b290_5c0c_9185_3338cd350d7f);
}
#[repr(C)]
#[doc(hidden)]
pub struct ISetterBaseCollection_Vtbl {
    pub base__: ::windows_core::IInspectable_Vtbl,
    pub IsSealed: unsafe extern "system" fn(
        this: *mut ::core::ffi::c_void,
        result__: *mut bool,
    ) -> ::windows_core::HRESULT,
}
#[doc(hidden)]
#[repr(transparent)]
#[derive(::core::cmp::PartialEq, ::core::cmp::Eq, ::core::fmt::Debug, ::core::clone::Clone)]
pub struct ISetterBaseFactory(::windows_core::IUnknown);
unsafe impl ::windows_core::Interface for ISetterBaseFactory {
    type Vtable = ISetterBaseFactory_Vtbl;
}
unsafe impl ::windows_core::ComInterface for ISetterBaseFactory {
    const IID: ::windows_core::GUID =
        ::windows_core::GUID::from_u128(0x780a1d2f_c4be_5707_8a8a_4550dc22583e);
}
#[repr(C)]
#[doc(hidden)]
pub struct ISetterBaseFactory_Vtbl {
    pub base__: ::windows_core::IInspectable_Vtbl,
}
#[doc(hidden)]
#[repr(transparent)]
#[derive(::core::cmp::PartialEq, ::core::cmp::Eq, ::core::fmt::Debug, ::core::clone::Clone)]
pub struct ISetterFactory(::windows_core::IUnknown);
unsafe impl ::windows_core::Interface for ISetterFactory {
    type Vtable = ISetterFactory_Vtbl;
}
unsafe impl ::windows_core::ComInterface for ISetterFactory {
    const IID: ::windows_core::GUID =
        ::windows_core::GUID::from_u128(0x13910a06_a327_5407_ae91_b9d2cc3a7ab5);
}
#[repr(C)]
#[doc(hidden)]
pub struct ISetterFactory_Vtbl {
    pub base__: ::windows_core::IInspectable_Vtbl,
    pub CreateInstance: unsafe extern "system" fn(
        this: *mut ::core::ffi::c_void,
        targetproperty: *mut ::core::ffi::c_void,
        value: *mut ::core::ffi::c_void,
        result__: *mut *mut ::core::ffi::c_void,
    ) -> ::windows_core::HRESULT,
}
#[doc(hidden)]
#[repr(transparent)]
#[derive(::core::cmp::PartialEq, ::core::cmp::Eq, ::core::fmt::Debug, ::core::clone::Clone)]
pub struct ISizeChangedEventArgs(::windows_core::IUnknown);
unsafe impl ::windows_core::Interface for ISizeChangedEventArgs {
    type Vtable = ISizeChangedEventArgs_Vtbl;
}
unsafe impl ::windows_core::ComInterface for ISizeChangedEventArgs {
    const IID: ::windows_core::GUID =
        ::windows_core::GUID::from_u128(0xfe76324e_6dfb_58b1_9dcd_886ca8f9a2ea);
}
#[repr(C)]
#[doc(hidden)]
pub struct ISizeChangedEventArgs_Vtbl {
    pub base__: ::windows_core::IInspectable_Vtbl,
    #[cfg(feature = "Windows_Foundation")]
    pub PreviousSize: unsafe extern "system" fn(
        this: *mut ::core::ffi::c_void,
        result__: *mut ::windows::Foundation::Size,
    ) -> ::windows_core::HRESULT,
    #[cfg(not(feature = "Windows_Foundation"))]
    PreviousSize: usize,
    #[cfg(feature = "Windows_Foundation")]
    pub NewSize: unsafe extern "system" fn(
        this: *mut ::core::ffi::c_void,
        result__: *mut ::windows::Foundation::Size,
    ) -> ::windows_core::HRESULT,
    #[cfg(not(feature = "Windows_Foundation"))]
    NewSize: usize,
}
#[doc(hidden)]
#[repr(transparent)]
#[derive(::core::cmp::PartialEq, ::core::cmp::Eq, ::core::fmt::Debug, ::core::clone::Clone)]
pub struct ISizeHelper(::windows_core::IUnknown);
unsafe impl ::windows_core::Interface for ISizeHelper {
    type Vtable = ISizeHelper_Vtbl;
}
unsafe impl ::windows_core::ComInterface for ISizeHelper {
    const IID: ::windows_core::GUID =
        ::windows_core::GUID::from_u128(0x5df9eee1_a2a8_5e55_8668_afedc0b36deb);
}
#[repr(C)]
#[doc(hidden)]
pub struct ISizeHelper_Vtbl {
    pub base__: ::windows_core::IInspectable_Vtbl,
}
#[doc(hidden)]
#[repr(transparent)]
#[derive(::core::cmp::PartialEq, ::core::cmp::Eq, ::core::fmt::Debug, ::core::clone::Clone)]
pub struct ISizeHelperStatics(::windows_core::IUnknown);
unsafe impl ::windows_core::Interface for ISizeHelperStatics {
    type Vtable = ISizeHelperStatics_Vtbl;
}
unsafe impl ::windows_core::ComInterface for ISizeHelperStatics {
    const IID: ::windows_core::GUID =
        ::windows_core::GUID::from_u128(0xcff1b27f_84f1_5b14_9459_764af5714fe5);
}
#[repr(C)]
#[doc(hidden)]
pub struct ISizeHelperStatics_Vtbl {
    pub base__: ::windows_core::IInspectable_Vtbl,
    #[cfg(feature = "Windows_Foundation")]
    pub Empty: unsafe extern "system" fn(
        this: *mut ::core::ffi::c_void,
        result__: *mut ::windows::Foundation::Size,
    ) -> ::windows_core::HRESULT,
    #[cfg(not(feature = "Windows_Foundation"))]
    Empty: usize,
    #[cfg(feature = "Windows_Foundation")]
    pub FromDimensions: unsafe extern "system" fn(
        this: *mut ::core::ffi::c_void,
        width: f32,
        height: f32,
        result__: *mut ::windows::Foundation::Size,
    ) -> ::windows_core::HRESULT,
    #[cfg(not(feature = "Windows_Foundation"))]
    FromDimensions: usize,
    #[cfg(feature = "Windows_Foundation")]
    pub GetIsEmpty: unsafe extern "system" fn(
        this: *mut ::core::ffi::c_void,
        target: ::windows::Foundation::Size,
        result__: *mut bool,
    ) -> ::windows_core::HRESULT,
    #[cfg(not(feature = "Windows_Foundation"))]
    GetIsEmpty: usize,
    #[cfg(feature = "Windows_Foundation")]
    pub Equals: unsafe extern "system" fn(
        this: *mut ::core::ffi::c_void,
        target: ::windows::Foundation::Size,
        value: ::windows::Foundation::Size,
        result__: *mut bool,
    ) -> ::windows_core::HRESULT,
    #[cfg(not(feature = "Windows_Foundation"))]
    Equals: usize,
}
#[doc(hidden)]
#[repr(transparent)]
#[derive(::core::cmp::PartialEq, ::core::cmp::Eq, ::core::fmt::Debug, ::core::clone::Clone)]
pub struct IStateTrigger(::windows_core::IUnknown);
unsafe impl ::windows_core::Interface for IStateTrigger {
    type Vtable = IStateTrigger_Vtbl;
}
unsafe impl ::windows_core::ComInterface for IStateTrigger {
    const IID: ::windows_core::GUID =
        ::windows_core::GUID::from_u128(0x7b098126_1dab_5b58_aca7_f2b7de2e1033);
}
#[repr(C)]
#[doc(hidden)]
pub struct IStateTrigger_Vtbl {
    pub base__: ::windows_core::IInspectable_Vtbl,
    pub IsActive: unsafe extern "system" fn(
        this: *mut ::core::ffi::c_void,
        result__: *mut bool,
    ) -> ::windows_core::HRESULT,
    pub SetIsActive: unsafe extern "system" fn(
        this: *mut ::core::ffi::c_void,
        value: bool,
    ) -> ::windows_core::HRESULT,
}
#[doc(hidden)]
#[repr(transparent)]
#[derive(::core::cmp::PartialEq, ::core::cmp::Eq, ::core::fmt::Debug, ::core::clone::Clone)]
pub struct IStateTriggerBase(::windows_core::IUnknown);
unsafe impl ::windows_core::Interface for IStateTriggerBase {
    type Vtable = IStateTriggerBase_Vtbl;
}
unsafe impl ::windows_core::ComInterface for IStateTriggerBase {
    const IID: ::windows_core::GUID =
        ::windows_core::GUID::from_u128(0xf07b0f7b_5b94_58ae_8717_22ab093bc131);
}
#[repr(C)]
#[doc(hidden)]
pub struct IStateTriggerBase_Vtbl {
    pub base__: ::windows_core::IInspectable_Vtbl,
}
#[doc(hidden)]
#[repr(transparent)]
#[derive(::core::cmp::PartialEq, ::core::cmp::Eq, ::core::fmt::Debug, ::core::clone::Clone)]
pub struct IStateTriggerBaseFactory(::windows_core::IUnknown);
unsafe impl ::windows_core::Interface for IStateTriggerBaseFactory {
    type Vtable = IStateTriggerBaseFactory_Vtbl;
}
unsafe impl ::windows_core::ComInterface for IStateTriggerBaseFactory {
    const IID: ::windows_core::GUID =
        ::windows_core::GUID::from_u128(0xe7724d65_fc7e_5c67_bb84_b4c7b020adc3);
}
#[repr(C)]
#[doc(hidden)]
pub struct IStateTriggerBaseFactory_Vtbl {
    pub base__: ::windows_core::IInspectable_Vtbl,
    pub CreateInstance: unsafe extern "system" fn(
        this: *mut ::core::ffi::c_void,
        baseinterface: *mut ::core::ffi::c_void,
        innerinterface: *mut *mut ::core::ffi::c_void,
        result__: *mut *mut ::core::ffi::c_void,
    ) -> ::windows_core::HRESULT,
}
#[doc(hidden)]
#[repr(transparent)]
#[derive(::core::cmp::PartialEq, ::core::cmp::Eq, ::core::fmt::Debug, ::core::clone::Clone)]
pub struct IStateTriggerBaseProtected(::windows_core::IUnknown);
unsafe impl ::windows_core::Interface for IStateTriggerBaseProtected {
    type Vtable = IStateTriggerBaseProtected_Vtbl;
}
unsafe impl ::windows_core::ComInterface for IStateTriggerBaseProtected {
    const IID: ::windows_core::GUID =
        ::windows_core::GUID::from_u128(0x2f695047_335b_5c00_a0d4_2a8fa54544c6);
}
#[repr(C)]
#[doc(hidden)]
pub struct IStateTriggerBaseProtected_Vtbl {
    pub base__: ::windows_core::IInspectable_Vtbl,
    pub SetActive: unsafe extern "system" fn(
        this: *mut ::core::ffi::c_void,
        isactive: bool,
    ) -> ::windows_core::HRESULT,
}
#[doc(hidden)]
#[repr(transparent)]
#[derive(::core::cmp::PartialEq, ::core::cmp::Eq, ::core::fmt::Debug, ::core::clone::Clone)]
pub struct IStateTriggerStatics(::windows_core::IUnknown);
unsafe impl ::windows_core::Interface for IStateTriggerStatics {
    type Vtable = IStateTriggerStatics_Vtbl;
}
unsafe impl ::windows_core::ComInterface for IStateTriggerStatics {
    const IID: ::windows_core::GUID =
        ::windows_core::GUID::from_u128(0xbd60c019_833b_5432_a41d_89d72410eb47);
}
#[repr(C)]
#[doc(hidden)]
pub struct IStateTriggerStatics_Vtbl {
    pub base__: ::windows_core::IInspectable_Vtbl,
    pub IsActiveProperty: unsafe extern "system" fn(
        this: *mut ::core::ffi::c_void,
        result__: *mut *mut ::core::ffi::c_void,
    ) -> ::windows_core::HRESULT,
}
#[doc(hidden)]
#[repr(transparent)]
#[derive(::core::cmp::PartialEq, ::core::cmp::Eq, ::core::fmt::Debug, ::core::clone::Clone)]
pub struct IStyle(::windows_core::IUnknown);
unsafe impl ::windows_core::Interface for IStyle {
    type Vtable = IStyle_Vtbl;
}
unsafe impl ::windows_core::ComInterface for IStyle {
    const IID: ::windows_core::GUID =
        ::windows_core::GUID::from_u128(0x65e1d164_572f_5b0e_a80f_9c02441fac49);
}
#[repr(C)]
#[doc(hidden)]
pub struct IStyle_Vtbl {
    pub base__: ::windows_core::IInspectable_Vtbl,
    pub IsSealed: unsafe extern "system" fn(
        this: *mut ::core::ffi::c_void,
        result__: *mut bool,
    ) -> ::windows_core::HRESULT,
    pub Setters: unsafe extern "system" fn(
        this: *mut ::core::ffi::c_void,
        result__: *mut *mut ::core::ffi::c_void,
    ) -> ::windows_core::HRESULT,
    #[cfg(feature = "Windows_UI_Xaml_Interop")]
    pub TargetType: unsafe extern "system" fn(
        this: *mut ::core::ffi::c_void,
        result__: *mut ::std::mem::MaybeUninit<
            super::super::super::Windows::UI::Xaml::Interop::TypeName,
        >,
    ) -> ::windows_core::HRESULT,
    #[cfg(not(feature = "Windows_UI_Xaml_Interop"))]
    TargetType: usize,
    #[cfg(feature = "Windows_UI_Xaml_Interop")]
    pub SetTargetType: unsafe extern "system" fn(
        this: *mut ::core::ffi::c_void,
        value: ::std::mem::MaybeUninit<super::super::super::Windows::UI::Xaml::Interop::TypeName>,
    ) -> ::windows_core::HRESULT,
    #[cfg(not(feature = "Windows_UI_Xaml_Interop"))]
    SetTargetType: usize,
    pub BasedOn: unsafe extern "system" fn(
        this: *mut ::core::ffi::c_void,
        result__: *mut *mut ::core::ffi::c_void,
    ) -> ::windows_core::HRESULT,
    pub SetBasedOn: unsafe extern "system" fn(
        this: *mut ::core::ffi::c_void,
        value: *mut ::core::ffi::c_void,
    ) -> ::windows_core::HRESULT,
    pub Seal: unsafe extern "system" fn(this: *mut ::core::ffi::c_void) -> ::windows_core::HRESULT,
}
#[doc(hidden)]
#[repr(transparent)]
#[derive(::core::cmp::PartialEq, ::core::cmp::Eq, ::core::fmt::Debug, ::core::clone::Clone)]
pub struct IStyleFactory(::windows_core::IUnknown);
unsafe impl ::windows_core::Interface for IStyleFactory {
    type Vtable = IStyleFactory_Vtbl;
}
unsafe impl ::windows_core::ComInterface for IStyleFactory {
    const IID: ::windows_core::GUID =
        ::windows_core::GUID::from_u128(0xc2d924a2_3862_517c_b083_9a9120d7302d);
}
#[repr(C)]
#[doc(hidden)]
pub struct IStyleFactory_Vtbl {
    pub base__: ::windows_core::IInspectable_Vtbl,
    #[cfg(feature = "Windows_UI_Xaml_Interop")]
    pub CreateInstance: unsafe extern "system" fn(
        this: *mut ::core::ffi::c_void,
        targettype: ::std::mem::MaybeUninit<
            super::super::super::Windows::UI::Xaml::Interop::TypeName,
        >,
        result__: *mut *mut ::core::ffi::c_void,
    ) -> ::windows_core::HRESULT,
    #[cfg(not(feature = "Windows_UI_Xaml_Interop"))]
    CreateInstance: usize,
}
#[doc(hidden)]
#[repr(transparent)]
#[derive(::core::cmp::PartialEq, ::core::cmp::Eq, ::core::fmt::Debug, ::core::clone::Clone)]
pub struct ITargetPropertyPath(::windows_core::IUnknown);
unsafe impl ::windows_core::Interface for ITargetPropertyPath {
    type Vtable = ITargetPropertyPath_Vtbl;
}
unsafe impl ::windows_core::ComInterface for ITargetPropertyPath {
    const IID: ::windows_core::GUID =
        ::windows_core::GUID::from_u128(0xb1442f0e_f66b_531c_979b_193fd344e2a8);
}
#[repr(C)]
#[doc(hidden)]
pub struct ITargetPropertyPath_Vtbl {
    pub base__: ::windows_core::IInspectable_Vtbl,
    pub Path: unsafe extern "system" fn(
        this: *mut ::core::ffi::c_void,
        result__: *mut *mut ::core::ffi::c_void,
    ) -> ::windows_core::HRESULT,
    pub SetPath: unsafe extern "system" fn(
        this: *mut ::core::ffi::c_void,
        value: *mut ::core::ffi::c_void,
    ) -> ::windows_core::HRESULT,
    pub Target: unsafe extern "system" fn(
        this: *mut ::core::ffi::c_void,
        result__: *mut *mut ::core::ffi::c_void,
    ) -> ::windows_core::HRESULT,
    pub SetTarget: unsafe extern "system" fn(
        this: *mut ::core::ffi::c_void,
        value: *mut ::core::ffi::c_void,
    ) -> ::windows_core::HRESULT,
}
#[doc(hidden)]
#[repr(transparent)]
#[derive(::core::cmp::PartialEq, ::core::cmp::Eq, ::core::fmt::Debug, ::core::clone::Clone)]
pub struct ITargetPropertyPathFactory(::windows_core::IUnknown);
unsafe impl ::windows_core::Interface for ITargetPropertyPathFactory {
    type Vtable = ITargetPropertyPathFactory_Vtbl;
}
unsafe impl ::windows_core::ComInterface for ITargetPropertyPathFactory {
    const IID: ::windows_core::GUID =
        ::windows_core::GUID::from_u128(0x894cb11d_5c16_555b_b661_f41b29fd9b21);
}
#[repr(C)]
#[doc(hidden)]
pub struct ITargetPropertyPathFactory_Vtbl {
    pub base__: ::windows_core::IInspectable_Vtbl,
    pub CreateInstance: unsafe extern "system" fn(
        this: *mut ::core::ffi::c_void,
        targetproperty: *mut ::core::ffi::c_void,
        result__: *mut *mut ::core::ffi::c_void,
    ) -> ::windows_core::HRESULT,
}
#[doc(hidden)]
#[repr(transparent)]
#[derive(::core::cmp::PartialEq, ::core::cmp::Eq, ::core::fmt::Debug, ::core::clone::Clone)]
pub struct IThicknessHelper(::windows_core::IUnknown);
unsafe impl ::windows_core::Interface for IThicknessHelper {
    type Vtable = IThicknessHelper_Vtbl;
}
unsafe impl ::windows_core::ComInterface for IThicknessHelper {
    const IID: ::windows_core::GUID =
        ::windows_core::GUID::from_u128(0x5e496347_3c49_55ee_b442_530789b42b6f);
}
#[repr(C)]
#[doc(hidden)]
pub struct IThicknessHelper_Vtbl {
    pub base__: ::windows_core::IInspectable_Vtbl,
}
#[doc(hidden)]
#[repr(transparent)]
#[derive(::core::cmp::PartialEq, ::core::cmp::Eq, ::core::fmt::Debug, ::core::clone::Clone)]
pub struct IThicknessHelperStatics(::windows_core::IUnknown);
unsafe impl ::windows_core::Interface for IThicknessHelperStatics {
    type Vtable = IThicknessHelperStatics_Vtbl;
}
unsafe impl ::windows_core::ComInterface for IThicknessHelperStatics {
    const IID: ::windows_core::GUID =
        ::windows_core::GUID::from_u128(0x0e3b81ce_d278_577f_98ea_1b6010f86d7f);
}
#[repr(C)]
#[doc(hidden)]
pub struct IThicknessHelperStatics_Vtbl {
    pub base__: ::windows_core::IInspectable_Vtbl,
    pub FromLengths: unsafe extern "system" fn(
        this: *mut ::core::ffi::c_void,
        left: f64,
        top: f64,
        right: f64,
        bottom: f64,
        result__: *mut Thickness,
    ) -> ::windows_core::HRESULT,
    pub FromUniformLength: unsafe extern "system" fn(
        this: *mut ::core::ffi::c_void,
        uniformlength: f64,
        result__: *mut Thickness,
    ) -> ::windows_core::HRESULT,
}
#[doc(hidden)]
#[repr(transparent)]
#[derive(::core::cmp::PartialEq, ::core::cmp::Eq, ::core::fmt::Debug, ::core::clone::Clone)]
pub struct ITriggerAction(::windows_core::IUnknown);
unsafe impl ::windows_core::Interface for ITriggerAction {
    type Vtable = ITriggerAction_Vtbl;
}
unsafe impl ::windows_core::ComInterface for ITriggerAction {
    const IID: ::windows_core::GUID =
        ::windows_core::GUID::from_u128(0x1fa35464_a690_586c_aedf_6c88cac7d14a);
}
#[repr(C)]
#[doc(hidden)]
pub struct ITriggerAction_Vtbl {
    pub base__: ::windows_core::IInspectable_Vtbl,
}
#[doc(hidden)]
#[repr(transparent)]
#[derive(::core::cmp::PartialEq, ::core::cmp::Eq, ::core::fmt::Debug, ::core::clone::Clone)]
pub struct ITriggerActionFactory(::windows_core::IUnknown);
unsafe impl ::windows_core::Interface for ITriggerActionFactory {
    type Vtable = ITriggerActionFactory_Vtbl;
}
unsafe impl ::windows_core::ComInterface for ITriggerActionFactory {
    const IID: ::windows_core::GUID =
        ::windows_core::GUID::from_u128(0x1e1faf1a_f614_554a_822a_d98fe46575d1);
}
#[repr(C)]
#[doc(hidden)]
pub struct ITriggerActionFactory_Vtbl {
    pub base__: ::windows_core::IInspectable_Vtbl,
}
#[doc(hidden)]
#[repr(transparent)]
#[derive(::core::cmp::PartialEq, ::core::cmp::Eq, ::core::fmt::Debug, ::core::clone::Clone)]
pub struct ITriggerBase(::windows_core::IUnknown);
unsafe impl ::windows_core::Interface for ITriggerBase {
    type Vtable = ITriggerBase_Vtbl;
}
unsafe impl ::windows_core::ComInterface for ITriggerBase {
    const IID: ::windows_core::GUID =
        ::windows_core::GUID::from_u128(0xd37da89d_0d71_58cf_a901_99a7d3e5e434);
}
#[repr(C)]
#[doc(hidden)]
pub struct ITriggerBase_Vtbl {
    pub base__: ::windows_core::IInspectable_Vtbl,
}
#[doc(hidden)]
#[repr(transparent)]
#[derive(::core::cmp::PartialEq, ::core::cmp::Eq, ::core::fmt::Debug, ::core::clone::Clone)]
pub struct ITriggerBaseFactory(::windows_core::IUnknown);
unsafe impl ::windows_core::Interface for ITriggerBaseFactory {
    type Vtable = ITriggerBaseFactory_Vtbl;
}
unsafe impl ::windows_core::ComInterface for ITriggerBaseFactory {
    const IID: ::windows_core::GUID =
        ::windows_core::GUID::from_u128(0x23088eaa_17ec_51b2_b181_5bedfa8b8fa4);
}
#[repr(C)]
#[doc(hidden)]
pub struct ITriggerBaseFactory_Vtbl {
    pub base__: ::windows_core::IInspectable_Vtbl,
}
#[doc(hidden)]
#[repr(transparent)]
#[derive(::core::cmp::PartialEq, ::core::cmp::Eq, ::core::fmt::Debug, ::core::clone::Clone)]
pub struct IUIElement(::windows_core::IUnknown);
unsafe impl ::windows_core::Interface for IUIElement {
    type Vtable = IUIElement_Vtbl;
}
unsafe impl ::windows_core::ComInterface for IUIElement {
    const IID: ::windows_core::GUID =
        ::windows_core::GUID::from_u128(0xc3c01020_320c_5cf6_9d24_d396bbfa4d8b);
}
#[repr(C)]
#[doc(hidden)]
pub struct IUIElement_Vtbl {
    pub base__: ::windows_core::IInspectable_Vtbl,
    #[cfg(feature = "Windows_Foundation")]
    pub DesiredSize: unsafe extern "system" fn(
        this: *mut ::core::ffi::c_void,
        result__: *mut ::windows::Foundation::Size,
    ) -> ::windows_core::HRESULT,
    #[cfg(not(feature = "Windows_Foundation"))]
    DesiredSize: usize,
    pub AllowDrop: unsafe extern "system" fn(
        this: *mut ::core::ffi::c_void,
        result__: *mut bool,
    ) -> ::windows_core::HRESULT,
    pub SetAllowDrop: unsafe extern "system" fn(
        this: *mut ::core::ffi::c_void,
        value: bool,
    ) -> ::windows_core::HRESULT,
    pub Opacity: unsafe extern "system" fn(
        this: *mut ::core::ffi::c_void,
        result__: *mut f64,
    ) -> ::windows_core::HRESULT,
    pub SetOpacity: unsafe extern "system" fn(
        this: *mut ::core::ffi::c_void,
        value: f64,
    ) -> ::windows_core::HRESULT,
    #[cfg(feature = "Microsoft_UI_Xaml_Media")]
    pub Clip: unsafe extern "system" fn(
        this: *mut ::core::ffi::c_void,
        result__: *mut *mut ::core::ffi::c_void,
    ) -> ::windows_core::HRESULT,
    #[cfg(not(feature = "Microsoft_UI_Xaml_Media"))]
    Clip: usize,
    #[cfg(feature = "Microsoft_UI_Xaml_Media")]
    pub SetClip: unsafe extern "system" fn(
        this: *mut ::core::ffi::c_void,
        value: *mut ::core::ffi::c_void,
    ) -> ::windows_core::HRESULT,
    #[cfg(not(feature = "Microsoft_UI_Xaml_Media"))]
    SetClip: usize,
    #[cfg(feature = "Microsoft_UI_Xaml_Media")]
    pub RenderTransform: unsafe extern "system" fn(
        this: *mut ::core::ffi::c_void,
        result__: *mut *mut ::core::ffi::c_void,
    ) -> ::windows_core::HRESULT,
    #[cfg(not(feature = "Microsoft_UI_Xaml_Media"))]
    RenderTransform: usize,
    #[cfg(feature = "Microsoft_UI_Xaml_Media")]
    pub SetRenderTransform: unsafe extern "system" fn(
        this: *mut ::core::ffi::c_void,
        value: *mut ::core::ffi::c_void,
    ) -> ::windows_core::HRESULT,
    #[cfg(not(feature = "Microsoft_UI_Xaml_Media"))]
    SetRenderTransform: usize,
    #[cfg(feature = "Microsoft_UI_Xaml_Media")]
    pub Projection: unsafe extern "system" fn(
        this: *mut ::core::ffi::c_void,
        result__: *mut *mut ::core::ffi::c_void,
    ) -> ::windows_core::HRESULT,
    #[cfg(not(feature = "Microsoft_UI_Xaml_Media"))]
    Projection: usize,
    #[cfg(feature = "Microsoft_UI_Xaml_Media")]
    pub SetProjection: unsafe extern "system" fn(
        this: *mut ::core::ffi::c_void,
        value: *mut ::core::ffi::c_void,
    ) -> ::windows_core::HRESULT,
    #[cfg(not(feature = "Microsoft_UI_Xaml_Media"))]
    SetProjection: usize,
    #[cfg(feature = "Microsoft_UI_Xaml_Media_Media3D")]
    pub Transform3D: unsafe extern "system" fn(
        this: *mut ::core::ffi::c_void,
        result__: *mut *mut ::core::ffi::c_void,
    ) -> ::windows_core::HRESULT,
    #[cfg(not(feature = "Microsoft_UI_Xaml_Media_Media3D"))]
    Transform3D: usize,
    #[cfg(feature = "Microsoft_UI_Xaml_Media_Media3D")]
    pub SetTransform3D: unsafe extern "system" fn(
        this: *mut ::core::ffi::c_void,
        value: *mut ::core::ffi::c_void,
    ) -> ::windows_core::HRESULT,
    #[cfg(not(feature = "Microsoft_UI_Xaml_Media_Media3D"))]
    SetTransform3D: usize,
    #[cfg(feature = "Windows_Foundation")]
    pub RenderTransformOrigin: unsafe extern "system" fn(
        this: *mut ::core::ffi::c_void,
        result__: *mut ::windows::Foundation::Point,
    ) -> ::windows_core::HRESULT,
    #[cfg(not(feature = "Windows_Foundation"))]
    RenderTransformOrigin: usize,
    #[cfg(feature = "Windows_Foundation")]
    pub SetRenderTransformOrigin: unsafe extern "system" fn(
        this: *mut ::core::ffi::c_void,
        value: ::windows::Foundation::Point,
    ) -> ::windows_core::HRESULT,
    #[cfg(not(feature = "Windows_Foundation"))]
    SetRenderTransformOrigin: usize,
    pub IsHitTestVisible: unsafe extern "system" fn(
        this: *mut ::core::ffi::c_void,
        result__: *mut bool,
    ) -> ::windows_core::HRESULT,
    pub SetIsHitTestVisible: unsafe extern "system" fn(
        this: *mut ::core::ffi::c_void,
        value: bool,
    ) -> ::windows_core::HRESULT,
    pub Visibility: unsafe extern "system" fn(
        this: *mut ::core::ffi::c_void,
        result__: *mut Visibility,
    ) -> ::windows_core::HRESULT,
    pub SetVisibility: unsafe extern "system" fn(
        this: *mut ::core::ffi::c_void,
        value: Visibility,
    ) -> ::windows_core::HRESULT,
    #[cfg(feature = "Windows_Foundation")]
    pub RenderSize: unsafe extern "system" fn(
        this: *mut ::core::ffi::c_void,
        result__: *mut ::windows::Foundation::Size,
    ) -> ::windows_core::HRESULT,
    #[cfg(not(feature = "Windows_Foundation"))]
    RenderSize: usize,
    pub UseLayoutRounding: unsafe extern "system" fn(
        this: *mut ::core::ffi::c_void,
        result__: *mut bool,
    ) -> ::windows_core::HRESULT,
    pub SetUseLayoutRounding: unsafe extern "system" fn(
        this: *mut ::core::ffi::c_void,
        value: bool,
    ) -> ::windows_core::HRESULT,
    #[cfg(all(
        feature = "Microsoft_UI_Xaml_Media_Animation",
        feature = "Windows_Foundation_Collections"
    ))]
    pub Transitions: unsafe extern "system" fn(
        this: *mut ::core::ffi::c_void,
        result__: *mut *mut ::core::ffi::c_void,
    ) -> ::windows_core::HRESULT,
    #[cfg(not(all(
        feature = "Microsoft_UI_Xaml_Media_Animation",
        feature = "Windows_Foundation_Collections"
    )))]
    Transitions: usize,
    #[cfg(all(
        feature = "Microsoft_UI_Xaml_Media_Animation",
        feature = "Windows_Foundation_Collections"
    ))]
    pub SetTransitions: unsafe extern "system" fn(
        this: *mut ::core::ffi::c_void,
        value: *mut ::core::ffi::c_void,
    ) -> ::windows_core::HRESULT,
    #[cfg(not(all(
        feature = "Microsoft_UI_Xaml_Media_Animation",
        feature = "Windows_Foundation_Collections"
    )))]
    SetTransitions: usize,
    #[cfg(feature = "Microsoft_UI_Xaml_Media")]
    pub CacheMode: unsafe extern "system" fn(
        this: *mut ::core::ffi::c_void,
        result__: *mut *mut ::core::ffi::c_void,
    ) -> ::windows_core::HRESULT,
    #[cfg(not(feature = "Microsoft_UI_Xaml_Media"))]
    CacheMode: usize,
    #[cfg(feature = "Microsoft_UI_Xaml_Media")]
    pub SetCacheMode: unsafe extern "system" fn(
        this: *mut ::core::ffi::c_void,
        value: *mut ::core::ffi::c_void,
    ) -> ::windows_core::HRESULT,
    #[cfg(not(feature = "Microsoft_UI_Xaml_Media"))]
    SetCacheMode: usize,
    pub IsTapEnabled: unsafe extern "system" fn(
        this: *mut ::core::ffi::c_void,
        result__: *mut bool,
    ) -> ::windows_core::HRESULT,
    pub SetIsTapEnabled: unsafe extern "system" fn(
        this: *mut ::core::ffi::c_void,
        value: bool,
    ) -> ::windows_core::HRESULT,
    pub IsDoubleTapEnabled: unsafe extern "system" fn(
        this: *mut ::core::ffi::c_void,
        result__: *mut bool,
    ) -> ::windows_core::HRESULT,
    pub SetIsDoubleTapEnabled: unsafe extern "system" fn(
        this: *mut ::core::ffi::c_void,
        value: bool,
    ) -> ::windows_core::HRESULT,
    pub CanDrag: unsafe extern "system" fn(
        this: *mut ::core::ffi::c_void,
        result__: *mut bool,
    ) -> ::windows_core::HRESULT,
    pub SetCanDrag: unsafe extern "system" fn(
        this: *mut ::core::ffi::c_void,
        value: bool,
    ) -> ::windows_core::HRESULT,
    pub IsRightTapEnabled: unsafe extern "system" fn(
        this: *mut ::core::ffi::c_void,
        result__: *mut bool,
    ) -> ::windows_core::HRESULT,
    pub SetIsRightTapEnabled: unsafe extern "system" fn(
        this: *mut ::core::ffi::c_void,
        value: bool,
    ) -> ::windows_core::HRESULT,
    pub IsHoldingEnabled: unsafe extern "system" fn(
        this: *mut ::core::ffi::c_void,
        result__: *mut bool,
    ) -> ::windows_core::HRESULT,
    pub SetIsHoldingEnabled: unsafe extern "system" fn(
        this: *mut ::core::ffi::c_void,
        value: bool,
    ) -> ::windows_core::HRESULT,
    #[cfg(feature = "Microsoft_UI_Xaml_Input")]
    pub ManipulationMode: unsafe extern "system" fn(
        this: *mut ::core::ffi::c_void,
        result__: *mut Input::ManipulationModes,
    ) -> ::windows_core::HRESULT,
    #[cfg(not(feature = "Microsoft_UI_Xaml_Input"))]
    ManipulationMode: usize,
    #[cfg(feature = "Microsoft_UI_Xaml_Input")]
    pub SetManipulationMode: unsafe extern "system" fn(
        this: *mut ::core::ffi::c_void,
        value: Input::ManipulationModes,
    ) -> ::windows_core::HRESULT,
    #[cfg(not(feature = "Microsoft_UI_Xaml_Input"))]
    SetManipulationMode: usize,
    #[cfg(all(
        feature = "Microsoft_UI_Xaml_Input",
        feature = "Windows_Foundation_Collections"
    ))]
    pub PointerCaptures: unsafe extern "system" fn(
        this: *mut ::core::ffi::c_void,
        result__: *mut *mut ::core::ffi::c_void,
    ) -> ::windows_core::HRESULT,
    #[cfg(not(all(
        feature = "Microsoft_UI_Xaml_Input",
        feature = "Windows_Foundation_Collections"
    )))]
    PointerCaptures: usize,
    #[cfg(feature = "Microsoft_UI_Xaml_Controls_Primitives")]
    pub ContextFlyout: unsafe extern "system" fn(
        this: *mut ::core::ffi::c_void,
        result__: *mut *mut ::core::ffi::c_void,
    ) -> ::windows_core::HRESULT,
    #[cfg(not(feature = "Microsoft_UI_Xaml_Controls_Primitives"))]
    ContextFlyout: usize,
    #[cfg(feature = "Microsoft_UI_Xaml_Controls_Primitives")]
    pub SetContextFlyout: unsafe extern "system" fn(
        this: *mut ::core::ffi::c_void,
        value: *mut ::core::ffi::c_void,
    ) -> ::windows_core::HRESULT,
    #[cfg(not(feature = "Microsoft_UI_Xaml_Controls_Primitives"))]
    SetContextFlyout: usize,
    #[cfg(feature = "Microsoft_UI_Xaml_Media")]
    pub CompositeMode: unsafe extern "system" fn(
        this: *mut ::core::ffi::c_void,
        result__: *mut Media::ElementCompositeMode,
    ) -> ::windows_core::HRESULT,
    #[cfg(not(feature = "Microsoft_UI_Xaml_Media"))]
    CompositeMode: usize,
    #[cfg(feature = "Microsoft_UI_Xaml_Media")]
    pub SetCompositeMode: unsafe extern "system" fn(
        this: *mut ::core::ffi::c_void,
        value: Media::ElementCompositeMode,
    ) -> ::windows_core::HRESULT,
    #[cfg(not(feature = "Microsoft_UI_Xaml_Media"))]
    SetCompositeMode: usize,
    #[cfg(all(
        feature = "Microsoft_UI_Xaml_Media",
        feature = "Windows_Foundation_Collections"
    ))]
    pub Lights: unsafe extern "system" fn(
        this: *mut ::core::ffi::c_void,
        result__: *mut *mut ::core::ffi::c_void,
    ) -> ::windows_core::HRESULT,
    #[cfg(not(all(
        feature = "Microsoft_UI_Xaml_Media",
        feature = "Windows_Foundation_Collections"
    )))]
    Lights: usize,
    pub CanBeScrollAnchor: unsafe extern "system" fn(
        this: *mut ::core::ffi::c_void,
        result__: *mut bool,
    ) -> ::windows_core::HRESULT,
    pub SetCanBeScrollAnchor: unsafe extern "system" fn(
        this: *mut ::core::ffi::c_void,
        value: bool,
    ) -> ::windows_core::HRESULT,
    pub ExitDisplayModeOnAccessKeyInvoked: unsafe extern "system" fn(
        this: *mut ::core::ffi::c_void,
        result__: *mut bool,
    )
        -> ::windows_core::HRESULT,
    pub SetExitDisplayModeOnAccessKeyInvoked: unsafe extern "system" fn(
        this: *mut ::core::ffi::c_void,
        value: bool,
    )
        -> ::windows_core::HRESULT,
    pub IsAccessKeyScope: unsafe extern "system" fn(
        this: *mut ::core::ffi::c_void,
        result__: *mut bool,
    ) -> ::windows_core::HRESULT,
    pub SetIsAccessKeyScope: unsafe extern "system" fn(
        this: *mut ::core::ffi::c_void,
        value: bool,
    ) -> ::windows_core::HRESULT,
    pub AccessKeyScopeOwner: unsafe extern "system" fn(
        this: *mut ::core::ffi::c_void,
        result__: *mut *mut ::core::ffi::c_void,
    ) -> ::windows_core::HRESULT,
    pub SetAccessKeyScopeOwner: unsafe extern "system" fn(
        this: *mut ::core::ffi::c_void,
        value: *mut ::core::ffi::c_void,
    ) -> ::windows_core::HRESULT,
    pub AccessKey: unsafe extern "system" fn(
        this: *mut ::core::ffi::c_void,
        result__: *mut ::std::mem::MaybeUninit<::windows_core::HSTRING>,
    ) -> ::windows_core::HRESULT,
    pub SetAccessKey: unsafe extern "system" fn(
        this: *mut ::core::ffi::c_void,
        value: ::std::mem::MaybeUninit<::windows_core::HSTRING>,
    ) -> ::windows_core::HRESULT,
    #[cfg(feature = "Microsoft_UI_Xaml_Input")]
    pub KeyTipPlacementMode: unsafe extern "system" fn(
        this: *mut ::core::ffi::c_void,
        result__: *mut Input::KeyTipPlacementMode,
    ) -> ::windows_core::HRESULT,
    #[cfg(not(feature = "Microsoft_UI_Xaml_Input"))]
    KeyTipPlacementMode: usize,
    #[cfg(feature = "Microsoft_UI_Xaml_Input")]
    pub SetKeyTipPlacementMode: unsafe extern "system" fn(
        this: *mut ::core::ffi::c_void,
        value: Input::KeyTipPlacementMode,
    ) -> ::windows_core::HRESULT,
    #[cfg(not(feature = "Microsoft_UI_Xaml_Input"))]
    SetKeyTipPlacementMode: usize,
    pub KeyTipHorizontalOffset: unsafe extern "system" fn(
        this: *mut ::core::ffi::c_void,
        result__: *mut f64,
    ) -> ::windows_core::HRESULT,
    pub SetKeyTipHorizontalOffset: unsafe extern "system" fn(
        this: *mut ::core::ffi::c_void,
        value: f64,
    ) -> ::windows_core::HRESULT,
    pub KeyTipVerticalOffset: unsafe extern "system" fn(
        this: *mut ::core::ffi::c_void,
        result__: *mut f64,
    ) -> ::windows_core::HRESULT,
    pub SetKeyTipVerticalOffset: unsafe extern "system" fn(
        this: *mut ::core::ffi::c_void,
        value: f64,
    ) -> ::windows_core::HRESULT,
    pub KeyTipTarget: unsafe extern "system" fn(
        this: *mut ::core::ffi::c_void,
        result__: *mut *mut ::core::ffi::c_void,
    ) -> ::windows_core::HRESULT,
    pub SetKeyTipTarget: unsafe extern "system" fn(
        this: *mut ::core::ffi::c_void,
        value: *mut ::core::ffi::c_void,
    ) -> ::windows_core::HRESULT,
    #[cfg(feature = "Microsoft_UI_Xaml_Input")]
    pub XYFocusKeyboardNavigation: unsafe extern "system" fn(
        this: *mut ::core::ffi::c_void,
        result__: *mut Input::XYFocusKeyboardNavigationMode,
    ) -> ::windows_core::HRESULT,
    #[cfg(not(feature = "Microsoft_UI_Xaml_Input"))]
    XYFocusKeyboardNavigation: usize,
    #[cfg(feature = "Microsoft_UI_Xaml_Input")]
    pub SetXYFocusKeyboardNavigation: unsafe extern "system" fn(
        this: *mut ::core::ffi::c_void,
        value: Input::XYFocusKeyboardNavigationMode,
    ) -> ::windows_core::HRESULT,
    #[cfg(not(feature = "Microsoft_UI_Xaml_Input"))]
    SetXYFocusKeyboardNavigation: usize,
    #[cfg(feature = "Microsoft_UI_Xaml_Input")]
    pub XYFocusUpNavigationStrategy: unsafe extern "system" fn(
        this: *mut ::core::ffi::c_void,
        result__: *mut Input::XYFocusNavigationStrategy,
    ) -> ::windows_core::HRESULT,
    #[cfg(not(feature = "Microsoft_UI_Xaml_Input"))]
    XYFocusUpNavigationStrategy: usize,
    #[cfg(feature = "Microsoft_UI_Xaml_Input")]
    pub SetXYFocusUpNavigationStrategy: unsafe extern "system" fn(
        this: *mut ::core::ffi::c_void,
        value: Input::XYFocusNavigationStrategy,
    ) -> ::windows_core::HRESULT,
    #[cfg(not(feature = "Microsoft_UI_Xaml_Input"))]
    SetXYFocusUpNavigationStrategy: usize,
    #[cfg(feature = "Microsoft_UI_Xaml_Input")]
    pub XYFocusDownNavigationStrategy: unsafe extern "system" fn(
        this: *mut ::core::ffi::c_void,
        result__: *mut Input::XYFocusNavigationStrategy,
    ) -> ::windows_core::HRESULT,
    #[cfg(not(feature = "Microsoft_UI_Xaml_Input"))]
    XYFocusDownNavigationStrategy: usize,
    #[cfg(feature = "Microsoft_UI_Xaml_Input")]
    pub SetXYFocusDownNavigationStrategy: unsafe extern "system" fn(
        this: *mut ::core::ffi::c_void,
        value: Input::XYFocusNavigationStrategy,
    ) -> ::windows_core::HRESULT,
    #[cfg(not(feature = "Microsoft_UI_Xaml_Input"))]
    SetXYFocusDownNavigationStrategy: usize,
    #[cfg(feature = "Microsoft_UI_Xaml_Input")]
    pub XYFocusLeftNavigationStrategy: unsafe extern "system" fn(
        this: *mut ::core::ffi::c_void,
        result__: *mut Input::XYFocusNavigationStrategy,
    ) -> ::windows_core::HRESULT,
    #[cfg(not(feature = "Microsoft_UI_Xaml_Input"))]
    XYFocusLeftNavigationStrategy: usize,
    #[cfg(feature = "Microsoft_UI_Xaml_Input")]
    pub SetXYFocusLeftNavigationStrategy: unsafe extern "system" fn(
        this: *mut ::core::ffi::c_void,
        value: Input::XYFocusNavigationStrategy,
    ) -> ::windows_core::HRESULT,
    #[cfg(not(feature = "Microsoft_UI_Xaml_Input"))]
    SetXYFocusLeftNavigationStrategy: usize,
    #[cfg(feature = "Microsoft_UI_Xaml_Input")]
    pub XYFocusRightNavigationStrategy: unsafe extern "system" fn(
        this: *mut ::core::ffi::c_void,
        result__: *mut Input::XYFocusNavigationStrategy,
    ) -> ::windows_core::HRESULT,
    #[cfg(not(feature = "Microsoft_UI_Xaml_Input"))]
    XYFocusRightNavigationStrategy: usize,
    #[cfg(feature = "Microsoft_UI_Xaml_Input")]
    pub SetXYFocusRightNavigationStrategy: unsafe extern "system" fn(
        this: *mut ::core::ffi::c_void,
        value: Input::XYFocusNavigationStrategy,
    )
        -> ::windows_core::HRESULT,
    #[cfg(not(feature = "Microsoft_UI_Xaml_Input"))]
    SetXYFocusRightNavigationStrategy: usize,
    #[cfg(all(
        feature = "Microsoft_UI_Xaml_Input",
        feature = "Windows_Foundation_Collections"
    ))]
    pub KeyboardAccelerators: unsafe extern "system" fn(
        this: *mut ::core::ffi::c_void,
        result__: *mut *mut ::core::ffi::c_void,
    ) -> ::windows_core::HRESULT,
    #[cfg(not(all(
        feature = "Microsoft_UI_Xaml_Input",
        feature = "Windows_Foundation_Collections"
    )))]
    KeyboardAccelerators: usize,
    pub KeyboardAcceleratorPlacementTarget: unsafe extern "system" fn(
        this: *mut ::core::ffi::c_void,
        result__: *mut *mut ::core::ffi::c_void,
    )
        -> ::windows_core::HRESULT,
    pub SetKeyboardAcceleratorPlacementTarget: unsafe extern "system" fn(
        this: *mut ::core::ffi::c_void,
        value: *mut ::core::ffi::c_void,
    )
        -> ::windows_core::HRESULT,
    #[cfg(feature = "Microsoft_UI_Xaml_Input")]
    pub KeyboardAcceleratorPlacementMode: unsafe extern "system" fn(
        this: *mut ::core::ffi::c_void,
        result__: *mut Input::KeyboardAcceleratorPlacementMode,
    ) -> ::windows_core::HRESULT,
    #[cfg(not(feature = "Microsoft_UI_Xaml_Input"))]
    KeyboardAcceleratorPlacementMode: usize,
    #[cfg(feature = "Microsoft_UI_Xaml_Input")]
    pub SetKeyboardAcceleratorPlacementMode: unsafe extern "system" fn(
        this: *mut ::core::ffi::c_void,
        value: Input::KeyboardAcceleratorPlacementMode,
    )
        -> ::windows_core::HRESULT,
    #[cfg(not(feature = "Microsoft_UI_Xaml_Input"))]
    SetKeyboardAcceleratorPlacementMode: usize,
    pub HighContrastAdjustment: unsafe extern "system" fn(
        this: *mut ::core::ffi::c_void,
        result__: *mut ElementHighContrastAdjustment,
    ) -> ::windows_core::HRESULT,
    pub SetHighContrastAdjustment: unsafe extern "system" fn(
        this: *mut ::core::ffi::c_void,
        value: ElementHighContrastAdjustment,
    ) -> ::windows_core::HRESULT,
    #[cfg(feature = "Microsoft_UI_Xaml_Input")]
    pub TabFocusNavigation: unsafe extern "system" fn(
        this: *mut ::core::ffi::c_void,
        result__: *mut Input::KeyboardNavigationMode,
    ) -> ::windows_core::HRESULT,
    #[cfg(not(feature = "Microsoft_UI_Xaml_Input"))]
    TabFocusNavigation: usize,
    #[cfg(feature = "Microsoft_UI_Xaml_Input")]
    pub SetTabFocusNavigation: unsafe extern "system" fn(
        this: *mut ::core::ffi::c_void,
        value: Input::KeyboardNavigationMode,
    ) -> ::windows_core::HRESULT,
    #[cfg(not(feature = "Microsoft_UI_Xaml_Input"))]
    SetTabFocusNavigation: usize,
    pub OpacityTransition: unsafe extern "system" fn(
        this: *mut ::core::ffi::c_void,
        result__: *mut *mut ::core::ffi::c_void,
    ) -> ::windows_core::HRESULT,
    pub SetOpacityTransition: unsafe extern "system" fn(
        this: *mut ::core::ffi::c_void,
        value: *mut ::core::ffi::c_void,
    ) -> ::windows_core::HRESULT,
    #[cfg(feature = "Windows_Foundation_Numerics")]
    pub Translation: unsafe extern "system" fn(
        this: *mut ::core::ffi::c_void,
        result__: *mut ::windows::Foundation::Numerics::Vector3,
    ) -> ::windows_core::HRESULT,
    #[cfg(not(feature = "Windows_Foundation_Numerics"))]
    Translation: usize,
    #[cfg(feature = "Windows_Foundation_Numerics")]
    pub SetTranslation: unsafe extern "system" fn(
        this: *mut ::core::ffi::c_void,
        value: ::windows::Foundation::Numerics::Vector3,
    ) -> ::windows_core::HRESULT,
    #[cfg(not(feature = "Windows_Foundation_Numerics"))]
    SetTranslation: usize,
    pub TranslationTransition: unsafe extern "system" fn(
        this: *mut ::core::ffi::c_void,
        result__: *mut *mut ::core::ffi::c_void,
    ) -> ::windows_core::HRESULT,
    pub SetTranslationTransition: unsafe extern "system" fn(
        this: *mut ::core::ffi::c_void,
        value: *mut ::core::ffi::c_void,
    ) -> ::windows_core::HRESULT,
    pub Rotation: unsafe extern "system" fn(
        this: *mut ::core::ffi::c_void,
        result__: *mut f32,
    ) -> ::windows_core::HRESULT,
    pub SetRotation: unsafe extern "system" fn(
        this: *mut ::core::ffi::c_void,
        value: f32,
    ) -> ::windows_core::HRESULT,
    pub RotationTransition: unsafe extern "system" fn(
        this: *mut ::core::ffi::c_void,
        result__: *mut *mut ::core::ffi::c_void,
    ) -> ::windows_core::HRESULT,
    pub SetRotationTransition: unsafe extern "system" fn(
        this: *mut ::core::ffi::c_void,
        value: *mut ::core::ffi::c_void,
    ) -> ::windows_core::HRESULT,
    #[cfg(feature = "Windows_Foundation_Numerics")]
    pub Scale: unsafe extern "system" fn(
        this: *mut ::core::ffi::c_void,
        result__: *mut ::windows::Foundation::Numerics::Vector3,
    ) -> ::windows_core::HRESULT,
    #[cfg(not(feature = "Windows_Foundation_Numerics"))]
    Scale: usize,
    #[cfg(feature = "Windows_Foundation_Numerics")]
    pub SetScale: unsafe extern "system" fn(
        this: *mut ::core::ffi::c_void,
        value: ::windows::Foundation::Numerics::Vector3,
    ) -> ::windows_core::HRESULT,
    #[cfg(not(feature = "Windows_Foundation_Numerics"))]
    SetScale: usize,
    pub ScaleTransition: unsafe extern "system" fn(
        this: *mut ::core::ffi::c_void,
        result__: *mut *mut ::core::ffi::c_void,
    ) -> ::windows_core::HRESULT,
    pub SetScaleTransition: unsafe extern "system" fn(
        this: *mut ::core::ffi::c_void,
        value: *mut ::core::ffi::c_void,
    ) -> ::windows_core::HRESULT,
    #[cfg(feature = "Windows_Foundation_Numerics")]
    pub TransformMatrix: unsafe extern "system" fn(
        this: *mut ::core::ffi::c_void,
        result__: *mut ::windows::Foundation::Numerics::Matrix4x4,
    ) -> ::windows_core::HRESULT,
    #[cfg(not(feature = "Windows_Foundation_Numerics"))]
    TransformMatrix: usize,
    #[cfg(feature = "Windows_Foundation_Numerics")]
    pub SetTransformMatrix: unsafe extern "system" fn(
        this: *mut ::core::ffi::c_void,
        value: ::windows::Foundation::Numerics::Matrix4x4,
    ) -> ::windows_core::HRESULT,
    #[cfg(not(feature = "Windows_Foundation_Numerics"))]
    SetTransformMatrix: usize,
    #[cfg(feature = "Windows_Foundation_Numerics")]
    pub CenterPoint: unsafe extern "system" fn(
        this: *mut ::core::ffi::c_void,
        result__: *mut ::windows::Foundation::Numerics::Vector3,
    ) -> ::windows_core::HRESULT,
    #[cfg(not(feature = "Windows_Foundation_Numerics"))]
    CenterPoint: usize,
    #[cfg(feature = "Windows_Foundation_Numerics")]
    pub SetCenterPoint: unsafe extern "system" fn(
        this: *mut ::core::ffi::c_void,
        value: ::windows::Foundation::Numerics::Vector3,
    ) -> ::windows_core::HRESULT,
    #[cfg(not(feature = "Windows_Foundation_Numerics"))]
    SetCenterPoint: usize,
    #[cfg(feature = "Windows_Foundation_Numerics")]
    pub RotationAxis: unsafe extern "system" fn(
        this: *mut ::core::ffi::c_void,
        result__: *mut ::windows::Foundation::Numerics::Vector3,
    ) -> ::windows_core::HRESULT,
    #[cfg(not(feature = "Windows_Foundation_Numerics"))]
    RotationAxis: usize,
    #[cfg(feature = "Windows_Foundation_Numerics")]
    pub SetRotationAxis: unsafe extern "system" fn(
        this: *mut ::core::ffi::c_void,
        value: ::windows::Foundation::Numerics::Vector3,
    ) -> ::windows_core::HRESULT,
    #[cfg(not(feature = "Windows_Foundation_Numerics"))]
    SetRotationAxis: usize,
    #[cfg(feature = "Windows_Foundation_Numerics")]
    pub ActualOffset: unsafe extern "system" fn(
        this: *mut ::core::ffi::c_void,
        result__: *mut ::windows::Foundation::Numerics::Vector3,
    ) -> ::windows_core::HRESULT,
    #[cfg(not(feature = "Windows_Foundation_Numerics"))]
    ActualOffset: usize,
    #[cfg(feature = "Windows_Foundation_Numerics")]
    pub ActualSize: unsafe extern "system" fn(
        this: *mut ::core::ffi::c_void,
        result__: *mut ::windows::Foundation::Numerics::Vector2,
    ) -> ::windows_core::HRESULT,
    #[cfg(not(feature = "Windows_Foundation_Numerics"))]
    ActualSize: usize,
    pub XamlRoot: unsafe extern "system" fn(
        this: *mut ::core::ffi::c_void,
        result__: *mut *mut ::core::ffi::c_void,
    ) -> ::windows_core::HRESULT,
    pub SetXamlRoot: unsafe extern "system" fn(
        this: *mut ::core::ffi::c_void,
        value: *mut ::core::ffi::c_void,
    ) -> ::windows_core::HRESULT,
    #[cfg(feature = "Microsoft_UI_Xaml_Media")]
    pub Shadow: unsafe extern "system" fn(
        this: *mut ::core::ffi::c_void,
        result__: *mut *mut ::core::ffi::c_void,
    ) -> ::windows_core::HRESULT,
    #[cfg(not(feature = "Microsoft_UI_Xaml_Media"))]
    Shadow: usize,
    #[cfg(feature = "Microsoft_UI_Xaml_Media")]
    pub SetShadow: unsafe extern "system" fn(
        this: *mut ::core::ffi::c_void,
        value: *mut ::core::ffi::c_void,
    ) -> ::windows_core::HRESULT,
    #[cfg(not(feature = "Microsoft_UI_Xaml_Media"))]
    SetShadow: usize,
    pub RasterizationScale: unsafe extern "system" fn(
        this: *mut ::core::ffi::c_void,
        result__: *mut f64,
    ) -> ::windows_core::HRESULT,
    pub SetRasterizationScale: unsafe extern "system" fn(
        this: *mut ::core::ffi::c_void,
        value: f64,
    ) -> ::windows_core::HRESULT,
    pub FocusState: unsafe extern "system" fn(
        this: *mut ::core::ffi::c_void,
        result__: *mut FocusState,
    ) -> ::windows_core::HRESULT,
    pub UseSystemFocusVisuals: unsafe extern "system" fn(
        this: *mut ::core::ffi::c_void,
        result__: *mut bool,
    ) -> ::windows_core::HRESULT,
    pub SetUseSystemFocusVisuals: unsafe extern "system" fn(
        this: *mut ::core::ffi::c_void,
        value: bool,
    ) -> ::windows_core::HRESULT,
    pub XYFocusLeft: unsafe extern "system" fn(
        this: *mut ::core::ffi::c_void,
        result__: *mut *mut ::core::ffi::c_void,
    ) -> ::windows_core::HRESULT,
    pub SetXYFocusLeft: unsafe extern "system" fn(
        this: *mut ::core::ffi::c_void,
        value: *mut ::core::ffi::c_void,
    ) -> ::windows_core::HRESULT,
    pub XYFocusRight: unsafe extern "system" fn(
        this: *mut ::core::ffi::c_void,
        result__: *mut *mut ::core::ffi::c_void,
    ) -> ::windows_core::HRESULT,
    pub SetXYFocusRight: unsafe extern "system" fn(
        this: *mut ::core::ffi::c_void,
        value: *mut ::core::ffi::c_void,
    ) -> ::windows_core::HRESULT,
    pub XYFocusUp: unsafe extern "system" fn(
        this: *mut ::core::ffi::c_void,
        result__: *mut *mut ::core::ffi::c_void,
    ) -> ::windows_core::HRESULT,
    pub SetXYFocusUp: unsafe extern "system" fn(
        this: *mut ::core::ffi::c_void,
        value: *mut ::core::ffi::c_void,
    ) -> ::windows_core::HRESULT,
    pub XYFocusDown: unsafe extern "system" fn(
        this: *mut ::core::ffi::c_void,
        result__: *mut *mut ::core::ffi::c_void,
    ) -> ::windows_core::HRESULT,
    pub SetXYFocusDown: unsafe extern "system" fn(
        this: *mut ::core::ffi::c_void,
        value: *mut ::core::ffi::c_void,
    ) -> ::windows_core::HRESULT,
    pub IsTabStop: unsafe extern "system" fn(
        this: *mut ::core::ffi::c_void,
        result__: *mut bool,
    ) -> ::windows_core::HRESULT,
    pub SetIsTabStop: unsafe extern "system" fn(
        this: *mut ::core::ffi::c_void,
        value: bool,
    ) -> ::windows_core::HRESULT,
    pub TabIndex: unsafe extern "system" fn(
        this: *mut ::core::ffi::c_void,
        result__: *mut i32,
    ) -> ::windows_core::HRESULT,
    pub SetTabIndex: unsafe extern "system" fn(
        this: *mut ::core::ffi::c_void,
        value: i32,
    ) -> ::windows_core::HRESULT,
    #[cfg(all(feature = "Microsoft_UI_Xaml_Input", feature = "Windows_Foundation"))]
    pub KeyUp: unsafe extern "system" fn(
        this: *mut ::core::ffi::c_void,
        handler: *mut ::core::ffi::c_void,
        result__: *mut ::windows::Foundation::EventRegistrationToken,
    ) -> ::windows_core::HRESULT,
    #[cfg(not(all(feature = "Microsoft_UI_Xaml_Input", feature = "Windows_Foundation")))]
    KeyUp: usize,
    #[cfg(feature = "Windows_Foundation")]
    pub RemoveKeyUp: unsafe extern "system" fn(
        this: *mut ::core::ffi::c_void,
        token: ::windows::Foundation::EventRegistrationToken,
    ) -> ::windows_core::HRESULT,
    #[cfg(not(feature = "Windows_Foundation"))]
    RemoveKeyUp: usize,
    #[cfg(all(feature = "Microsoft_UI_Xaml_Input", feature = "Windows_Foundation"))]
    pub KeyDown: unsafe extern "system" fn(
        this: *mut ::core::ffi::c_void,
        handler: *mut ::core::ffi::c_void,
        result__: *mut ::windows::Foundation::EventRegistrationToken,
    ) -> ::windows_core::HRESULT,
    #[cfg(not(all(feature = "Microsoft_UI_Xaml_Input", feature = "Windows_Foundation")))]
    KeyDown: usize,
    #[cfg(feature = "Windows_Foundation")]
    pub RemoveKeyDown: unsafe extern "system" fn(
        this: *mut ::core::ffi::c_void,
        token: ::windows::Foundation::EventRegistrationToken,
    ) -> ::windows_core::HRESULT,
    #[cfg(not(feature = "Windows_Foundation"))]
    RemoveKeyDown: usize,
    #[cfg(feature = "Windows_Foundation")]
    pub GotFocus: unsafe extern "system" fn(
        this: *mut ::core::ffi::c_void,
        handler: *mut ::core::ffi::c_void,
        result__: *mut ::windows::Foundation::EventRegistrationToken,
    ) -> ::windows_core::HRESULT,
    #[cfg(not(feature = "Windows_Foundation"))]
    GotFocus: usize,
    #[cfg(feature = "Windows_Foundation")]
    pub RemoveGotFocus: unsafe extern "system" fn(
        this: *mut ::core::ffi::c_void,
        token: ::windows::Foundation::EventRegistrationToken,
    ) -> ::windows_core::HRESULT,
    #[cfg(not(feature = "Windows_Foundation"))]
    RemoveGotFocus: usize,
    #[cfg(feature = "Windows_Foundation")]
    pub LostFocus: unsafe extern "system" fn(
        this: *mut ::core::ffi::c_void,
        handler: *mut ::core::ffi::c_void,
        result__: *mut ::windows::Foundation::EventRegistrationToken,
    ) -> ::windows_core::HRESULT,
    #[cfg(not(feature = "Windows_Foundation"))]
    LostFocus: usize,
    #[cfg(feature = "Windows_Foundation")]
    pub RemoveLostFocus: unsafe extern "system" fn(
        this: *mut ::core::ffi::c_void,
        token: ::windows::Foundation::EventRegistrationToken,
    ) -> ::windows_core::HRESULT,
    #[cfg(not(feature = "Windows_Foundation"))]
    RemoveLostFocus: usize,
    #[cfg(feature = "Windows_Foundation")]
    pub DragStarting: unsafe extern "system" fn(
        this: *mut ::core::ffi::c_void,
        handler: *mut ::core::ffi::c_void,
        result__: *mut ::windows::Foundation::EventRegistrationToken,
    ) -> ::windows_core::HRESULT,
    #[cfg(not(feature = "Windows_Foundation"))]
    DragStarting: usize,
    #[cfg(feature = "Windows_Foundation")]
    pub RemoveDragStarting: unsafe extern "system" fn(
        this: *mut ::core::ffi::c_void,
        token: ::windows::Foundation::EventRegistrationToken,
    ) -> ::windows_core::HRESULT,
    #[cfg(not(feature = "Windows_Foundation"))]
    RemoveDragStarting: usize,
    #[cfg(feature = "Windows_Foundation")]
    pub DropCompleted: unsafe extern "system" fn(
        this: *mut ::core::ffi::c_void,
        handler: *mut ::core::ffi::c_void,
        result__: *mut ::windows::Foundation::EventRegistrationToken,
    ) -> ::windows_core::HRESULT,
    #[cfg(not(feature = "Windows_Foundation"))]
    DropCompleted: usize,
    #[cfg(feature = "Windows_Foundation")]
    pub RemoveDropCompleted: unsafe extern "system" fn(
        this: *mut ::core::ffi::c_void,
        token: ::windows::Foundation::EventRegistrationToken,
    ) -> ::windows_core::HRESULT,
    #[cfg(not(feature = "Windows_Foundation"))]
    RemoveDropCompleted: usize,
    #[cfg(all(feature = "Microsoft_UI_Xaml_Input", feature = "Windows_Foundation"))]
    pub CharacterReceived: unsafe extern "system" fn(
        this: *mut ::core::ffi::c_void,
        handler: *mut ::core::ffi::c_void,
        result__: *mut ::windows::Foundation::EventRegistrationToken,
    ) -> ::windows_core::HRESULT,
    #[cfg(not(all(feature = "Microsoft_UI_Xaml_Input", feature = "Windows_Foundation")))]
    CharacterReceived: usize,
    #[cfg(feature = "Windows_Foundation")]
    pub RemoveCharacterReceived: unsafe extern "system" fn(
        this: *mut ::core::ffi::c_void,
        token: ::windows::Foundation::EventRegistrationToken,
    ) -> ::windows_core::HRESULT,
    #[cfg(not(feature = "Windows_Foundation"))]
    RemoveCharacterReceived: usize,
    #[cfg(feature = "Windows_Foundation")]
    pub DragEnter: unsafe extern "system" fn(
        this: *mut ::core::ffi::c_void,
        handler: *mut ::core::ffi::c_void,
        result__: *mut ::windows::Foundation::EventRegistrationToken,
    ) -> ::windows_core::HRESULT,
    #[cfg(not(feature = "Windows_Foundation"))]
    DragEnter: usize,
    #[cfg(feature = "Windows_Foundation")]
    pub RemoveDragEnter: unsafe extern "system" fn(
        this: *mut ::core::ffi::c_void,
        token: ::windows::Foundation::EventRegistrationToken,
    ) -> ::windows_core::HRESULT,
    #[cfg(not(feature = "Windows_Foundation"))]
    RemoveDragEnter: usize,
    #[cfg(feature = "Windows_Foundation")]
    pub DragLeave: unsafe extern "system" fn(
        this: *mut ::core::ffi::c_void,
        handler: *mut ::core::ffi::c_void,
        result__: *mut ::windows::Foundation::EventRegistrationToken,
    ) -> ::windows_core::HRESULT,
    #[cfg(not(feature = "Windows_Foundation"))]
    DragLeave: usize,
    #[cfg(feature = "Windows_Foundation")]
    pub RemoveDragLeave: unsafe extern "system" fn(
        this: *mut ::core::ffi::c_void,
        token: ::windows::Foundation::EventRegistrationToken,
    ) -> ::windows_core::HRESULT,
    #[cfg(not(feature = "Windows_Foundation"))]
    RemoveDragLeave: usize,
    #[cfg(feature = "Windows_Foundation")]
    pub DragOver: unsafe extern "system" fn(
        this: *mut ::core::ffi::c_void,
        handler: *mut ::core::ffi::c_void,
        result__: *mut ::windows::Foundation::EventRegistrationToken,
    ) -> ::windows_core::HRESULT,
    #[cfg(not(feature = "Windows_Foundation"))]
    DragOver: usize,
    #[cfg(feature = "Windows_Foundation")]
    pub RemoveDragOver: unsafe extern "system" fn(
        this: *mut ::core::ffi::c_void,
        token: ::windows::Foundation::EventRegistrationToken,
    ) -> ::windows_core::HRESULT,
    #[cfg(not(feature = "Windows_Foundation"))]
    RemoveDragOver: usize,
    #[cfg(feature = "Windows_Foundation")]
    pub Drop: unsafe extern "system" fn(
        this: *mut ::core::ffi::c_void,
        handler: *mut ::core::ffi::c_void,
        result__: *mut ::windows::Foundation::EventRegistrationToken,
    ) -> ::windows_core::HRESULT,
    #[cfg(not(feature = "Windows_Foundation"))]
    Drop: usize,
    #[cfg(feature = "Windows_Foundation")]
    pub RemoveDrop: unsafe extern "system" fn(
        this: *mut ::core::ffi::c_void,
        token: ::windows::Foundation::EventRegistrationToken,
    ) -> ::windows_core::HRESULT,
    #[cfg(not(feature = "Windows_Foundation"))]
    RemoveDrop: usize,
    #[cfg(all(feature = "Microsoft_UI_Xaml_Input", feature = "Windows_Foundation"))]
    pub PointerPressed: unsafe extern "system" fn(
        this: *mut ::core::ffi::c_void,
        handler: *mut ::core::ffi::c_void,
        result__: *mut ::windows::Foundation::EventRegistrationToken,
    ) -> ::windows_core::HRESULT,
    #[cfg(not(all(feature = "Microsoft_UI_Xaml_Input", feature = "Windows_Foundation")))]
    PointerPressed: usize,
    #[cfg(feature = "Windows_Foundation")]
    pub RemovePointerPressed: unsafe extern "system" fn(
        this: *mut ::core::ffi::c_void,
        token: ::windows::Foundation::EventRegistrationToken,
    ) -> ::windows_core::HRESULT,
    #[cfg(not(feature = "Windows_Foundation"))]
    RemovePointerPressed: usize,
    #[cfg(all(feature = "Microsoft_UI_Xaml_Input", feature = "Windows_Foundation"))]
    pub PointerMoved: unsafe extern "system" fn(
        this: *mut ::core::ffi::c_void,
        handler: *mut ::core::ffi::c_void,
        result__: *mut ::windows::Foundation::EventRegistrationToken,
    ) -> ::windows_core::HRESULT,
    #[cfg(not(all(feature = "Microsoft_UI_Xaml_Input", feature = "Windows_Foundation")))]
    PointerMoved: usize,
    #[cfg(feature = "Windows_Foundation")]
    pub RemovePointerMoved: unsafe extern "system" fn(
        this: *mut ::core::ffi::c_void,
        token: ::windows::Foundation::EventRegistrationToken,
    ) -> ::windows_core::HRESULT,
    #[cfg(not(feature = "Windows_Foundation"))]
    RemovePointerMoved: usize,
    #[cfg(all(feature = "Microsoft_UI_Xaml_Input", feature = "Windows_Foundation"))]
    pub PointerReleased: unsafe extern "system" fn(
        this: *mut ::core::ffi::c_void,
        handler: *mut ::core::ffi::c_void,
        result__: *mut ::windows::Foundation::EventRegistrationToken,
    ) -> ::windows_core::HRESULT,
    #[cfg(not(all(feature = "Microsoft_UI_Xaml_Input", feature = "Windows_Foundation")))]
    PointerReleased: usize,
    #[cfg(feature = "Windows_Foundation")]
    pub RemovePointerReleased: unsafe extern "system" fn(
        this: *mut ::core::ffi::c_void,
        token: ::windows::Foundation::EventRegistrationToken,
    ) -> ::windows_core::HRESULT,
    #[cfg(not(feature = "Windows_Foundation"))]
    RemovePointerReleased: usize,
    #[cfg(all(feature = "Microsoft_UI_Xaml_Input", feature = "Windows_Foundation"))]
    pub PointerEntered: unsafe extern "system" fn(
        this: *mut ::core::ffi::c_void,
        handler: *mut ::core::ffi::c_void,
        result__: *mut ::windows::Foundation::EventRegistrationToken,
    ) -> ::windows_core::HRESULT,
    #[cfg(not(all(feature = "Microsoft_UI_Xaml_Input", feature = "Windows_Foundation")))]
    PointerEntered: usize,
    #[cfg(feature = "Windows_Foundation")]
    pub RemovePointerEntered: unsafe extern "system" fn(
        this: *mut ::core::ffi::c_void,
        token: ::windows::Foundation::EventRegistrationToken,
    ) -> ::windows_core::HRESULT,
    #[cfg(not(feature = "Windows_Foundation"))]
    RemovePointerEntered: usize,
    #[cfg(all(feature = "Microsoft_UI_Xaml_Input", feature = "Windows_Foundation"))]
    pub PointerExited: unsafe extern "system" fn(
        this: *mut ::core::ffi::c_void,
        handler: *mut ::core::ffi::c_void,
        result__: *mut ::windows::Foundation::EventRegistrationToken,
    ) -> ::windows_core::HRESULT,
    #[cfg(not(all(feature = "Microsoft_UI_Xaml_Input", feature = "Windows_Foundation")))]
    PointerExited: usize,
    #[cfg(feature = "Windows_Foundation")]
    pub RemovePointerExited: unsafe extern "system" fn(
        this: *mut ::core::ffi::c_void,
        token: ::windows::Foundation::EventRegistrationToken,
    ) -> ::windows_core::HRESULT,
    #[cfg(not(feature = "Windows_Foundation"))]
    RemovePointerExited: usize,
    #[cfg(all(feature = "Microsoft_UI_Xaml_Input", feature = "Windows_Foundation"))]
    pub PointerCaptureLost: unsafe extern "system" fn(
        this: *mut ::core::ffi::c_void,
        handler: *mut ::core::ffi::c_void,
        result__: *mut ::windows::Foundation::EventRegistrationToken,
    ) -> ::windows_core::HRESULT,
    #[cfg(not(all(feature = "Microsoft_UI_Xaml_Input", feature = "Windows_Foundation")))]
    PointerCaptureLost: usize,
    #[cfg(feature = "Windows_Foundation")]
    pub RemovePointerCaptureLost: unsafe extern "system" fn(
        this: *mut ::core::ffi::c_void,
        token: ::windows::Foundation::EventRegistrationToken,
    ) -> ::windows_core::HRESULT,
    #[cfg(not(feature = "Windows_Foundation"))]
    RemovePointerCaptureLost: usize,
    #[cfg(all(feature = "Microsoft_UI_Xaml_Input", feature = "Windows_Foundation"))]
    pub PointerCanceled: unsafe extern "system" fn(
        this: *mut ::core::ffi::c_void,
        handler: *mut ::core::ffi::c_void,
        result__: *mut ::windows::Foundation::EventRegistrationToken,
    ) -> ::windows_core::HRESULT,
    #[cfg(not(all(feature = "Microsoft_UI_Xaml_Input", feature = "Windows_Foundation")))]
    PointerCanceled: usize,
    #[cfg(feature = "Windows_Foundation")]
    pub RemovePointerCanceled: unsafe extern "system" fn(
        this: *mut ::core::ffi::c_void,
        token: ::windows::Foundation::EventRegistrationToken,
    ) -> ::windows_core::HRESULT,
    #[cfg(not(feature = "Windows_Foundation"))]
    RemovePointerCanceled: usize,
    #[cfg(all(feature = "Microsoft_UI_Xaml_Input", feature = "Windows_Foundation"))]
    pub PointerWheelChanged: unsafe extern "system" fn(
        this: *mut ::core::ffi::c_void,
        handler: *mut ::core::ffi::c_void,
        result__: *mut ::windows::Foundation::EventRegistrationToken,
    ) -> ::windows_core::HRESULT,
    #[cfg(not(all(feature = "Microsoft_UI_Xaml_Input", feature = "Windows_Foundation")))]
    PointerWheelChanged: usize,
    #[cfg(feature = "Windows_Foundation")]
    pub RemovePointerWheelChanged: unsafe extern "system" fn(
        this: *mut ::core::ffi::c_void,
        token: ::windows::Foundation::EventRegistrationToken,
    ) -> ::windows_core::HRESULT,
    #[cfg(not(feature = "Windows_Foundation"))]
    RemovePointerWheelChanged: usize,
    #[cfg(all(feature = "Microsoft_UI_Xaml_Input", feature = "Windows_Foundation"))]
    pub Tapped: unsafe extern "system" fn(
        this: *mut ::core::ffi::c_void,
        handler: *mut ::core::ffi::c_void,
        result__: *mut ::windows::Foundation::EventRegistrationToken,
    ) -> ::windows_core::HRESULT,
    #[cfg(not(all(feature = "Microsoft_UI_Xaml_Input", feature = "Windows_Foundation")))]
    Tapped: usize,
    #[cfg(feature = "Windows_Foundation")]
    pub RemoveTapped: unsafe extern "system" fn(
        this: *mut ::core::ffi::c_void,
        token: ::windows::Foundation::EventRegistrationToken,
    ) -> ::windows_core::HRESULT,
    #[cfg(not(feature = "Windows_Foundation"))]
    RemoveTapped: usize,
    #[cfg(all(feature = "Microsoft_UI_Xaml_Input", feature = "Windows_Foundation"))]
    pub DoubleTapped: unsafe extern "system" fn(
        this: *mut ::core::ffi::c_void,
        handler: *mut ::core::ffi::c_void,
        result__: *mut ::windows::Foundation::EventRegistrationToken,
    ) -> ::windows_core::HRESULT,
    #[cfg(not(all(feature = "Microsoft_UI_Xaml_Input", feature = "Windows_Foundation")))]
    DoubleTapped: usize,
    #[cfg(feature = "Windows_Foundation")]
    pub RemoveDoubleTapped: unsafe extern "system" fn(
        this: *mut ::core::ffi::c_void,
        token: ::windows::Foundation::EventRegistrationToken,
    ) -> ::windows_core::HRESULT,
    #[cfg(not(feature = "Windows_Foundation"))]
    RemoveDoubleTapped: usize,
    #[cfg(all(feature = "Microsoft_UI_Xaml_Input", feature = "Windows_Foundation"))]
    pub Holding: unsafe extern "system" fn(
        this: *mut ::core::ffi::c_void,
        handler: *mut ::core::ffi::c_void,
        result__: *mut ::windows::Foundation::EventRegistrationToken,
    ) -> ::windows_core::HRESULT,
    #[cfg(not(all(feature = "Microsoft_UI_Xaml_Input", feature = "Windows_Foundation")))]
    Holding: usize,
    #[cfg(feature = "Windows_Foundation")]
    pub RemoveHolding: unsafe extern "system" fn(
        this: *mut ::core::ffi::c_void,
        token: ::windows::Foundation::EventRegistrationToken,
    ) -> ::windows_core::HRESULT,
    #[cfg(not(feature = "Windows_Foundation"))]
    RemoveHolding: usize,
    #[cfg(all(feature = "Microsoft_UI_Xaml_Input", feature = "Windows_Foundation"))]
    pub ContextRequested: unsafe extern "system" fn(
        this: *mut ::core::ffi::c_void,
        handler: *mut ::core::ffi::c_void,
        result__: *mut ::windows::Foundation::EventRegistrationToken,
    ) -> ::windows_core::HRESULT,
    #[cfg(not(all(feature = "Microsoft_UI_Xaml_Input", feature = "Windows_Foundation")))]
    ContextRequested: usize,
    #[cfg(feature = "Windows_Foundation")]
    pub RemoveContextRequested: unsafe extern "system" fn(
        this: *mut ::core::ffi::c_void,
        token: ::windows::Foundation::EventRegistrationToken,
    ) -> ::windows_core::HRESULT,
    #[cfg(not(feature = "Windows_Foundation"))]
    RemoveContextRequested: usize,
    #[cfg(feature = "Windows_Foundation")]
    pub ContextCanceled: unsafe extern "system" fn(
        this: *mut ::core::ffi::c_void,
        handler: *mut ::core::ffi::c_void,
        result__: *mut ::windows::Foundation::EventRegistrationToken,
    ) -> ::windows_core::HRESULT,
    #[cfg(not(feature = "Windows_Foundation"))]
    ContextCanceled: usize,
    #[cfg(feature = "Windows_Foundation")]
    pub RemoveContextCanceled: unsafe extern "system" fn(
        this: *mut ::core::ffi::c_void,
        token: ::windows::Foundation::EventRegistrationToken,
    ) -> ::windows_core::HRESULT,
    #[cfg(not(feature = "Windows_Foundation"))]
    RemoveContextCanceled: usize,
    #[cfg(all(feature = "Microsoft_UI_Xaml_Input", feature = "Windows_Foundation"))]
    pub RightTapped: unsafe extern "system" fn(
        this: *mut ::core::ffi::c_void,
        handler: *mut ::core::ffi::c_void,
        result__: *mut ::windows::Foundation::EventRegistrationToken,
    ) -> ::windows_core::HRESULT,
    #[cfg(not(all(feature = "Microsoft_UI_Xaml_Input", feature = "Windows_Foundation")))]
    RightTapped: usize,
    #[cfg(feature = "Windows_Foundation")]
    pub RemoveRightTapped: unsafe extern "system" fn(
        this: *mut ::core::ffi::c_void,
        token: ::windows::Foundation::EventRegistrationToken,
    ) -> ::windows_core::HRESULT,
    #[cfg(not(feature = "Windows_Foundation"))]
    RemoveRightTapped: usize,
    #[cfg(all(feature = "Microsoft_UI_Xaml_Input", feature = "Windows_Foundation"))]
    pub ManipulationStarting: unsafe extern "system" fn(
        this: *mut ::core::ffi::c_void,
        handler: *mut ::core::ffi::c_void,
        result__: *mut ::windows::Foundation::EventRegistrationToken,
    ) -> ::windows_core::HRESULT,
    #[cfg(not(all(feature = "Microsoft_UI_Xaml_Input", feature = "Windows_Foundation")))]
    ManipulationStarting: usize,
    #[cfg(feature = "Windows_Foundation")]
    pub RemoveManipulationStarting: unsafe extern "system" fn(
        this: *mut ::core::ffi::c_void,
        token: ::windows::Foundation::EventRegistrationToken,
    ) -> ::windows_core::HRESULT,
    #[cfg(not(feature = "Windows_Foundation"))]
    RemoveManipulationStarting: usize,
    #[cfg(all(feature = "Microsoft_UI_Xaml_Input", feature = "Windows_Foundation"))]
    pub ManipulationInertiaStarting: unsafe extern "system" fn(
        this: *mut ::core::ffi::c_void,
        handler: *mut ::core::ffi::c_void,
        result__: *mut ::windows::Foundation::EventRegistrationToken,
    ) -> ::windows_core::HRESULT,
    #[cfg(not(all(feature = "Microsoft_UI_Xaml_Input", feature = "Windows_Foundation")))]
    ManipulationInertiaStarting: usize,
    #[cfg(feature = "Windows_Foundation")]
    pub RemoveManipulationInertiaStarting: unsafe extern "system" fn(
        this: *mut ::core::ffi::c_void,
        token: ::windows::Foundation::EventRegistrationToken,
    )
        -> ::windows_core::HRESULT,
    #[cfg(not(feature = "Windows_Foundation"))]
    RemoveManipulationInertiaStarting: usize,
    #[cfg(all(feature = "Microsoft_UI_Xaml_Input", feature = "Windows_Foundation"))]
    pub ManipulationStarted: unsafe extern "system" fn(
        this: *mut ::core::ffi::c_void,
        handler: *mut ::core::ffi::c_void,
        result__: *mut ::windows::Foundation::EventRegistrationToken,
    ) -> ::windows_core::HRESULT,
    #[cfg(not(all(feature = "Microsoft_UI_Xaml_Input", feature = "Windows_Foundation")))]
    ManipulationStarted: usize,
    #[cfg(feature = "Windows_Foundation")]
    pub RemoveManipulationStarted: unsafe extern "system" fn(
        this: *mut ::core::ffi::c_void,
        token: ::windows::Foundation::EventRegistrationToken,
    ) -> ::windows_core::HRESULT,
    #[cfg(not(feature = "Windows_Foundation"))]
    RemoveManipulationStarted: usize,
    #[cfg(all(feature = "Microsoft_UI_Xaml_Input", feature = "Windows_Foundation"))]
    pub ManipulationDelta: unsafe extern "system" fn(
        this: *mut ::core::ffi::c_void,
        handler: *mut ::core::ffi::c_void,
        result__: *mut ::windows::Foundation::EventRegistrationToken,
    ) -> ::windows_core::HRESULT,
    #[cfg(not(all(feature = "Microsoft_UI_Xaml_Input", feature = "Windows_Foundation")))]
    ManipulationDelta: usize,
    #[cfg(feature = "Windows_Foundation")]
    pub RemoveManipulationDelta: unsafe extern "system" fn(
        this: *mut ::core::ffi::c_void,
        token: ::windows::Foundation::EventRegistrationToken,
    ) -> ::windows_core::HRESULT,
    #[cfg(not(feature = "Windows_Foundation"))]
    RemoveManipulationDelta: usize,
    #[cfg(all(feature = "Microsoft_UI_Xaml_Input", feature = "Windows_Foundation"))]
    pub ManipulationCompleted: unsafe extern "system" fn(
        this: *mut ::core::ffi::c_void,
        handler: *mut ::core::ffi::c_void,
        result__: *mut ::windows::Foundation::EventRegistrationToken,
    ) -> ::windows_core::HRESULT,
    #[cfg(not(all(feature = "Microsoft_UI_Xaml_Input", feature = "Windows_Foundation")))]
    ManipulationCompleted: usize,
    #[cfg(feature = "Windows_Foundation")]
    pub RemoveManipulationCompleted: unsafe extern "system" fn(
        this: *mut ::core::ffi::c_void,
        token: ::windows::Foundation::EventRegistrationToken,
    ) -> ::windows_core::HRESULT,
    #[cfg(not(feature = "Windows_Foundation"))]
    RemoveManipulationCompleted: usize,
    #[cfg(all(feature = "Microsoft_UI_Xaml_Input", feature = "Windows_Foundation"))]
    pub AccessKeyDisplayRequested: unsafe extern "system" fn(
        this: *mut ::core::ffi::c_void,
        handler: *mut ::core::ffi::c_void,
        result__: *mut ::windows::Foundation::EventRegistrationToken,
    ) -> ::windows_core::HRESULT,
    #[cfg(not(all(feature = "Microsoft_UI_Xaml_Input", feature = "Windows_Foundation")))]
    AccessKeyDisplayRequested: usize,
    #[cfg(feature = "Windows_Foundation")]
    pub RemoveAccessKeyDisplayRequested: unsafe extern "system" fn(
        this: *mut ::core::ffi::c_void,
        token: ::windows::Foundation::EventRegistrationToken,
    ) -> ::windows_core::HRESULT,
    #[cfg(not(feature = "Windows_Foundation"))]
    RemoveAccessKeyDisplayRequested: usize,
    #[cfg(all(feature = "Microsoft_UI_Xaml_Input", feature = "Windows_Foundation"))]
    pub AccessKeyDisplayDismissed: unsafe extern "system" fn(
        this: *mut ::core::ffi::c_void,
        handler: *mut ::core::ffi::c_void,
        result__: *mut ::windows::Foundation::EventRegistrationToken,
    ) -> ::windows_core::HRESULT,
    #[cfg(not(all(feature = "Microsoft_UI_Xaml_Input", feature = "Windows_Foundation")))]
    AccessKeyDisplayDismissed: usize,
    #[cfg(feature = "Windows_Foundation")]
    pub RemoveAccessKeyDisplayDismissed: unsafe extern "system" fn(
        this: *mut ::core::ffi::c_void,
        token: ::windows::Foundation::EventRegistrationToken,
    ) -> ::windows_core::HRESULT,
    #[cfg(not(feature = "Windows_Foundation"))]
    RemoveAccessKeyDisplayDismissed: usize,
    #[cfg(all(feature = "Microsoft_UI_Xaml_Input", feature = "Windows_Foundation"))]
    pub AccessKeyInvoked: unsafe extern "system" fn(
        this: *mut ::core::ffi::c_void,
        handler: *mut ::core::ffi::c_void,
        result__: *mut ::windows::Foundation::EventRegistrationToken,
    ) -> ::windows_core::HRESULT,
    #[cfg(not(all(feature = "Microsoft_UI_Xaml_Input", feature = "Windows_Foundation")))]
    AccessKeyInvoked: usize,
    #[cfg(feature = "Windows_Foundation")]
    pub RemoveAccessKeyInvoked: unsafe extern "system" fn(
        this: *mut ::core::ffi::c_void,
        token: ::windows::Foundation::EventRegistrationToken,
    ) -> ::windows_core::HRESULT,
    #[cfg(not(feature = "Windows_Foundation"))]
    RemoveAccessKeyInvoked: usize,
    #[cfg(all(feature = "Microsoft_UI_Xaml_Input", feature = "Windows_Foundation"))]
    pub ProcessKeyboardAccelerators: unsafe extern "system" fn(
        this: *mut ::core::ffi::c_void,
        handler: *mut ::core::ffi::c_void,
        result__: *mut ::windows::Foundation::EventRegistrationToken,
    ) -> ::windows_core::HRESULT,
    #[cfg(not(all(feature = "Microsoft_UI_Xaml_Input", feature = "Windows_Foundation")))]
    ProcessKeyboardAccelerators: usize,
    #[cfg(feature = "Windows_Foundation")]
    pub RemoveProcessKeyboardAccelerators: unsafe extern "system" fn(
        this: *mut ::core::ffi::c_void,
        token: ::windows::Foundation::EventRegistrationToken,
    )
        -> ::windows_core::HRESULT,
    #[cfg(not(feature = "Windows_Foundation"))]
    RemoveProcessKeyboardAccelerators: usize,
    #[cfg(all(feature = "Microsoft_UI_Xaml_Input", feature = "Windows_Foundation"))]
    pub GettingFocus: unsafe extern "system" fn(
        this: *mut ::core::ffi::c_void,
        handler: *mut ::core::ffi::c_void,
        result__: *mut ::windows::Foundation::EventRegistrationToken,
    ) -> ::windows_core::HRESULT,
    #[cfg(not(all(feature = "Microsoft_UI_Xaml_Input", feature = "Windows_Foundation")))]
    GettingFocus: usize,
    #[cfg(feature = "Windows_Foundation")]
    pub RemoveGettingFocus: unsafe extern "system" fn(
        this: *mut ::core::ffi::c_void,
        token: ::windows::Foundation::EventRegistrationToken,
    ) -> ::windows_core::HRESULT,
    #[cfg(not(feature = "Windows_Foundation"))]
    RemoveGettingFocus: usize,
    #[cfg(all(feature = "Microsoft_UI_Xaml_Input", feature = "Windows_Foundation"))]
    pub LosingFocus: unsafe extern "system" fn(
        this: *mut ::core::ffi::c_void,
        handler: *mut ::core::ffi::c_void,
        result__: *mut ::windows::Foundation::EventRegistrationToken,
    ) -> ::windows_core::HRESULT,
    #[cfg(not(all(feature = "Microsoft_UI_Xaml_Input", feature = "Windows_Foundation")))]
    LosingFocus: usize,
    #[cfg(feature = "Windows_Foundation")]
    pub RemoveLosingFocus: unsafe extern "system" fn(
        this: *mut ::core::ffi::c_void,
        token: ::windows::Foundation::EventRegistrationToken,
    ) -> ::windows_core::HRESULT,
    #[cfg(not(feature = "Windows_Foundation"))]
    RemoveLosingFocus: usize,
    #[cfg(all(feature = "Microsoft_UI_Xaml_Input", feature = "Windows_Foundation"))]
    pub NoFocusCandidateFound: unsafe extern "system" fn(
        this: *mut ::core::ffi::c_void,
        handler: *mut ::core::ffi::c_void,
        result__: *mut ::windows::Foundation::EventRegistrationToken,
    ) -> ::windows_core::HRESULT,
    #[cfg(not(all(feature = "Microsoft_UI_Xaml_Input", feature = "Windows_Foundation")))]
    NoFocusCandidateFound: usize,
    #[cfg(feature = "Windows_Foundation")]
    pub RemoveNoFocusCandidateFound: unsafe extern "system" fn(
        this: *mut ::core::ffi::c_void,
        token: ::windows::Foundation::EventRegistrationToken,
    ) -> ::windows_core::HRESULT,
    #[cfg(not(feature = "Windows_Foundation"))]
    RemoveNoFocusCandidateFound: usize,
    #[cfg(all(feature = "Microsoft_UI_Xaml_Input", feature = "Windows_Foundation"))]
    pub PreviewKeyDown: unsafe extern "system" fn(
        this: *mut ::core::ffi::c_void,
        handler: *mut ::core::ffi::c_void,
        result__: *mut ::windows::Foundation::EventRegistrationToken,
    ) -> ::windows_core::HRESULT,
    #[cfg(not(all(feature = "Microsoft_UI_Xaml_Input", feature = "Windows_Foundation")))]
    PreviewKeyDown: usize,
    #[cfg(feature = "Windows_Foundation")]
    pub RemovePreviewKeyDown: unsafe extern "system" fn(
        this: *mut ::core::ffi::c_void,
        token: ::windows::Foundation::EventRegistrationToken,
    ) -> ::windows_core::HRESULT,
    #[cfg(not(feature = "Windows_Foundation"))]
    RemovePreviewKeyDown: usize,
    #[cfg(all(feature = "Microsoft_UI_Xaml_Input", feature = "Windows_Foundation"))]
    pub PreviewKeyUp: unsafe extern "system" fn(
        this: *mut ::core::ffi::c_void,
        handler: *mut ::core::ffi::c_void,
        result__: *mut ::windows::Foundation::EventRegistrationToken,
    ) -> ::windows_core::HRESULT,
    #[cfg(not(all(feature = "Microsoft_UI_Xaml_Input", feature = "Windows_Foundation")))]
    PreviewKeyUp: usize,
    #[cfg(feature = "Windows_Foundation")]
    pub RemovePreviewKeyUp: unsafe extern "system" fn(
        this: *mut ::core::ffi::c_void,
        token: ::windows::Foundation::EventRegistrationToken,
    ) -> ::windows_core::HRESULT,
    #[cfg(not(feature = "Windows_Foundation"))]
    RemovePreviewKeyUp: usize,
    #[cfg(feature = "Windows_Foundation")]
    pub BringIntoViewRequested: unsafe extern "system" fn(
        this: *mut ::core::ffi::c_void,
        handler: *mut ::core::ffi::c_void,
        result__: *mut ::windows::Foundation::EventRegistrationToken,
    ) -> ::windows_core::HRESULT,
    #[cfg(not(feature = "Windows_Foundation"))]
    BringIntoViewRequested: usize,
    #[cfg(feature = "Windows_Foundation")]
    pub RemoveBringIntoViewRequested: unsafe extern "system" fn(
        this: *mut ::core::ffi::c_void,
        token: ::windows::Foundation::EventRegistrationToken,
    ) -> ::windows_core::HRESULT,
    #[cfg(not(feature = "Windows_Foundation"))]
    RemoveBringIntoViewRequested: usize,
    #[cfg(feature = "Windows_Foundation")]
    pub Measure: unsafe extern "system" fn(
        this: *mut ::core::ffi::c_void,
        availablesize: ::windows::Foundation::Size,
    ) -> ::windows_core::HRESULT,
    #[cfg(not(feature = "Windows_Foundation"))]
    Measure: usize,
    #[cfg(feature = "Windows_Foundation")]
    pub Arrange: unsafe extern "system" fn(
        this: *mut ::core::ffi::c_void,
        finalrect: ::windows::Foundation::Rect,
    ) -> ::windows_core::HRESULT,
    #[cfg(not(feature = "Windows_Foundation"))]
    Arrange: usize,
    #[cfg(feature = "Microsoft_UI_Xaml_Input")]
    pub CapturePointer: unsafe extern "system" fn(
        this: *mut ::core::ffi::c_void,
        value: *mut ::core::ffi::c_void,
        result__: *mut bool,
    ) -> ::windows_core::HRESULT,
    #[cfg(not(feature = "Microsoft_UI_Xaml_Input"))]
    CapturePointer: usize,
    #[cfg(feature = "Microsoft_UI_Xaml_Input")]
    pub ReleasePointerCapture: unsafe extern "system" fn(
        this: *mut ::core::ffi::c_void,
        value: *mut ::core::ffi::c_void,
    ) -> ::windows_core::HRESULT,
    #[cfg(not(feature = "Microsoft_UI_Xaml_Input"))]
    ReleasePointerCapture: usize,
    pub ReleasePointerCaptures:
        unsafe extern "system" fn(this: *mut ::core::ffi::c_void) -> ::windows_core::HRESULT,
    pub AddHandler: unsafe extern "system" fn(
        this: *mut ::core::ffi::c_void,
        routedevent: *mut ::core::ffi::c_void,
        handler: *mut ::core::ffi::c_void,
        handledeventstoo: bool,
    ) -> ::windows_core::HRESULT,
    pub RemoveHandler: unsafe extern "system" fn(
        this: *mut ::core::ffi::c_void,
        routedevent: *mut ::core::ffi::c_void,
        handler: *mut ::core::ffi::c_void,
    ) -> ::windows_core::HRESULT,
    #[cfg(feature = "Microsoft_UI_Xaml_Media")]
    pub TransformToVisual: unsafe extern "system" fn(
        this: *mut ::core::ffi::c_void,
        visual: *mut ::core::ffi::c_void,
        result__: *mut *mut ::core::ffi::c_void,
    ) -> ::windows_core::HRESULT,
    #[cfg(not(feature = "Microsoft_UI_Xaml_Media"))]
    TransformToVisual: usize,
    pub InvalidateMeasure:
        unsafe extern "system" fn(this: *mut ::core::ffi::c_void) -> ::windows_core::HRESULT,
    pub InvalidateArrange:
        unsafe extern "system" fn(this: *mut ::core::ffi::c_void) -> ::windows_core::HRESULT,
    pub UpdateLayout:
        unsafe extern "system" fn(this: *mut ::core::ffi::c_void) -> ::windows_core::HRESULT,
    pub CancelDirectManipulations: unsafe extern "system" fn(
        this: *mut ::core::ffi::c_void,
        result__: *mut bool,
    ) -> ::windows_core::HRESULT,
    #[cfg(all(
        feature = "Microsoft_UI_Input",
        feature = "Windows_ApplicationModel_DataTransfer",
        feature = "Windows_Foundation"
    ))]
    pub StartDragAsync: unsafe extern "system" fn(
        this: *mut ::core::ffi::c_void,
        pointerpoint: *mut ::core::ffi::c_void,
        result__: *mut *mut ::core::ffi::c_void,
    ) -> ::windows_core::HRESULT,
    #[cfg(not(all(
        feature = "Microsoft_UI_Input",
        feature = "Windows_ApplicationModel_DataTransfer",
        feature = "Windows_Foundation"
    )))]
    StartDragAsync: usize,
    pub StartBringIntoView:
        unsafe extern "system" fn(this: *mut ::core::ffi::c_void) -> ::windows_core::HRESULT,
    pub StartBringIntoViewWithOptions: unsafe extern "system" fn(
        this: *mut ::core::ffi::c_void,
        options: *mut ::core::ffi::c_void,
    ) -> ::windows_core::HRESULT,
    #[cfg(feature = "Microsoft_UI_Xaml_Input")]
    pub TryInvokeKeyboardAccelerator: unsafe extern "system" fn(
        this: *mut ::core::ffi::c_void,
        args: *mut ::core::ffi::c_void,
    ) -> ::windows_core::HRESULT,
    #[cfg(not(feature = "Microsoft_UI_Xaml_Input"))]
    TryInvokeKeyboardAccelerator: usize,
    pub Focus: unsafe extern "system" fn(
        this: *mut ::core::ffi::c_void,
        value: FocusState,
        result__: *mut bool,
    ) -> ::windows_core::HRESULT,
    #[cfg(feature = "Microsoft_UI_Composition")]
    pub StartAnimation: unsafe extern "system" fn(
        this: *mut ::core::ffi::c_void,
        animation: *mut ::core::ffi::c_void,
    ) -> ::windows_core::HRESULT,
    #[cfg(not(feature = "Microsoft_UI_Composition"))]
    StartAnimation: usize,
    #[cfg(feature = "Microsoft_UI_Composition")]
    pub StopAnimation: unsafe extern "system" fn(
        this: *mut ::core::ffi::c_void,
        animation: *mut ::core::ffi::c_void,
    ) -> ::windows_core::HRESULT,
    #[cfg(not(feature = "Microsoft_UI_Composition"))]
    StopAnimation: usize,
}
#[doc(hidden)]
#[repr(transparent)]
#[derive(::core::cmp::PartialEq, ::core::cmp::Eq, ::core::fmt::Debug, ::core::clone::Clone)]
pub struct IUIElementFactory(::windows_core::IUnknown);
unsafe impl ::windows_core::Interface for IUIElementFactory {
    type Vtable = IUIElementFactory_Vtbl;
}
unsafe impl ::windows_core::ComInterface for IUIElementFactory {
    const IID: ::windows_core::GUID =
        ::windows_core::GUID::from_u128(0x14d1d309_add0_5ccb_b946_77488cd70f87);
}
#[repr(C)]
#[doc(hidden)]
pub struct IUIElementFactory_Vtbl {
    pub base__: ::windows_core::IInspectable_Vtbl,
}
#[doc(hidden)]
#[repr(transparent)]
#[derive(::core::cmp::PartialEq, ::core::cmp::Eq, ::core::fmt::Debug, ::core::clone::Clone)]
pub struct IUIElementOverrides(::windows_core::IUnknown);
unsafe impl ::windows_core::Interface for IUIElementOverrides {
    type Vtable = IUIElementOverrides_Vtbl;
}
unsafe impl ::windows_core::ComInterface for IUIElementOverrides {
    const IID: ::windows_core::GUID =
        ::windows_core::GUID::from_u128(0x9034f41e_ab7b_59e7_8168_50de6b689dde);
}
#[repr(C)]
#[doc(hidden)]
pub struct IUIElementOverrides_Vtbl {
    pub base__: ::windows_core::IInspectable_Vtbl,
    #[cfg(feature = "Microsoft_UI_Xaml_Automation_Peers")]
    pub OnCreateAutomationPeer: unsafe extern "system" fn(
        this: *mut ::core::ffi::c_void,
        result__: *mut *mut ::core::ffi::c_void,
    ) -> ::windows_core::HRESULT,
    #[cfg(not(feature = "Microsoft_UI_Xaml_Automation_Peers"))]
    OnCreateAutomationPeer: usize,
    pub OnDisconnectVisualChildren:
        unsafe extern "system" fn(this: *mut ::core::ffi::c_void) -> ::windows_core::HRESULT,
    #[cfg(feature = "Windows_Foundation_Collections")]
    pub FindSubElementsForTouchTargeting: unsafe extern "system" fn(
        this: *mut ::core::ffi::c_void,
        point: ::windows::Foundation::Point,
        boundingrect: ::windows::Foundation::Rect,
        result__: *mut *mut ::core::ffi::c_void,
    ) -> ::windows_core::HRESULT,
    #[cfg(not(feature = "Windows_Foundation_Collections"))]
    FindSubElementsForTouchTargeting: usize,
    #[cfg(feature = "Windows_Foundation_Collections")]
    pub GetChildrenInTabFocusOrder: unsafe extern "system" fn(
        this: *mut ::core::ffi::c_void,
        result__: *mut *mut ::core::ffi::c_void,
    ) -> ::windows_core::HRESULT,
    #[cfg(not(feature = "Windows_Foundation_Collections"))]
    GetChildrenInTabFocusOrder: usize,
    #[cfg(feature = "Microsoft_UI_Xaml_Input")]
    pub OnKeyboardAcceleratorInvoked: unsafe extern "system" fn(
        this: *mut ::core::ffi::c_void,
        args: *mut ::core::ffi::c_void,
    ) -> ::windows_core::HRESULT,
    #[cfg(not(feature = "Microsoft_UI_Xaml_Input"))]
    OnKeyboardAcceleratorInvoked: usize,
    #[cfg(feature = "Microsoft_UI_Xaml_Input")]
    pub OnProcessKeyboardAccelerators: unsafe extern "system" fn(
        this: *mut ::core::ffi::c_void,
        args: *mut ::core::ffi::c_void,
    ) -> ::windows_core::HRESULT,
    #[cfg(not(feature = "Microsoft_UI_Xaml_Input"))]
    OnProcessKeyboardAccelerators: usize,
    pub OnBringIntoViewRequested: unsafe extern "system" fn(
        this: *mut ::core::ffi::c_void,
        e: *mut ::core::ffi::c_void,
    ) -> ::windows_core::HRESULT,
    #[cfg(feature = "Microsoft_UI_Composition")]
    pub PopulatePropertyInfoOverride: unsafe extern "system" fn(
        this: *mut ::core::ffi::c_void,
        propertyname: ::std::mem::MaybeUninit<::windows_core::HSTRING>,
        animationpropertyinfo: *mut ::core::ffi::c_void,
    ) -> ::windows_core::HRESULT,
    #[cfg(not(feature = "Microsoft_UI_Composition"))]
    PopulatePropertyInfoOverride: usize,
}
#[doc(hidden)]
#[repr(transparent)]
#[derive(::core::cmp::PartialEq, ::core::cmp::Eq, ::core::fmt::Debug, ::core::clone::Clone)]
pub struct IUIElementProtected(::windows_core::IUnknown);
unsafe impl ::windows_core::Interface for IUIElementProtected {
    type Vtable = IUIElementProtected_Vtbl;
}
unsafe impl ::windows_core::ComInterface for IUIElementProtected {
    const IID: ::windows_core::GUID =
        ::windows_core::GUID::from_u128(0x8f69b9e9_1f00_5834_9bf1_a9257bed39f0);
}
#[repr(C)]
#[doc(hidden)]
pub struct IUIElementProtected_Vtbl {
    pub base__: ::windows_core::IInspectable_Vtbl,
    #[cfg(feature = "Microsoft_UI_Input")]
    pub ProtectedCursor: unsafe extern "system" fn(
        this: *mut ::core::ffi::c_void,
        result__: *mut *mut ::core::ffi::c_void,
    ) -> ::windows_core::HRESULT,
    #[cfg(not(feature = "Microsoft_UI_Input"))]
    ProtectedCursor: usize,
    #[cfg(feature = "Microsoft_UI_Input")]
    pub SetProtectedCursor: unsafe extern "system" fn(
        this: *mut ::core::ffi::c_void,
        value: *mut ::core::ffi::c_void,
    ) -> ::windows_core::HRESULT,
    #[cfg(not(feature = "Microsoft_UI_Input"))]
    SetProtectedCursor: usize,
}
#[doc(hidden)]
#[repr(transparent)]
#[derive(::core::cmp::PartialEq, ::core::cmp::Eq, ::core::fmt::Debug, ::core::clone::Clone)]
pub struct IUIElementStatics(::windows_core::IUnknown);
unsafe impl ::windows_core::Interface for IUIElementStatics {
    type Vtable = IUIElementStatics_Vtbl;
}
unsafe impl ::windows_core::ComInterface for IUIElementStatics {
    const IID: ::windows_core::GUID =
        ::windows_core::GUID::from_u128(0xd2921d87_3584_5e22_8a3a_c2c78dab4f6e);
}
#[repr(C)]
#[doc(hidden)]
pub struct IUIElementStatics_Vtbl {
    pub base__: ::windows_core::IInspectable_Vtbl,
    pub KeyDownEvent: unsafe extern "system" fn(
        this: *mut ::core::ffi::c_void,
        result__: *mut *mut ::core::ffi::c_void,
    ) -> ::windows_core::HRESULT,
    pub KeyUpEvent: unsafe extern "system" fn(
        this: *mut ::core::ffi::c_void,
        result__: *mut *mut ::core::ffi::c_void,
    ) -> ::windows_core::HRESULT,
    pub PointerEnteredEvent: unsafe extern "system" fn(
        this: *mut ::core::ffi::c_void,
        result__: *mut *mut ::core::ffi::c_void,
    ) -> ::windows_core::HRESULT,
    pub PointerPressedEvent: unsafe extern "system" fn(
        this: *mut ::core::ffi::c_void,
        result__: *mut *mut ::core::ffi::c_void,
    ) -> ::windows_core::HRESULT,
    pub PointerMovedEvent: unsafe extern "system" fn(
        this: *mut ::core::ffi::c_void,
        result__: *mut *mut ::core::ffi::c_void,
    ) -> ::windows_core::HRESULT,
    pub PointerReleasedEvent: unsafe extern "system" fn(
        this: *mut ::core::ffi::c_void,
        result__: *mut *mut ::core::ffi::c_void,
    ) -> ::windows_core::HRESULT,
    pub PointerExitedEvent: unsafe extern "system" fn(
        this: *mut ::core::ffi::c_void,
        result__: *mut *mut ::core::ffi::c_void,
    ) -> ::windows_core::HRESULT,
    pub PointerCaptureLostEvent: unsafe extern "system" fn(
        this: *mut ::core::ffi::c_void,
        result__: *mut *mut ::core::ffi::c_void,
    ) -> ::windows_core::HRESULT,
    pub PointerCanceledEvent: unsafe extern "system" fn(
        this: *mut ::core::ffi::c_void,
        result__: *mut *mut ::core::ffi::c_void,
    ) -> ::windows_core::HRESULT,
    pub PointerWheelChangedEvent: unsafe extern "system" fn(
        this: *mut ::core::ffi::c_void,
        result__: *mut *mut ::core::ffi::c_void,
    ) -> ::windows_core::HRESULT,
    pub TappedEvent: unsafe extern "system" fn(
        this: *mut ::core::ffi::c_void,
        result__: *mut *mut ::core::ffi::c_void,
    ) -> ::windows_core::HRESULT,
    pub DoubleTappedEvent: unsafe extern "system" fn(
        this: *mut ::core::ffi::c_void,
        result__: *mut *mut ::core::ffi::c_void,
    ) -> ::windows_core::HRESULT,
    pub HoldingEvent: unsafe extern "system" fn(
        this: *mut ::core::ffi::c_void,
        result__: *mut *mut ::core::ffi::c_void,
    ) -> ::windows_core::HRESULT,
    pub RightTappedEvent: unsafe extern "system" fn(
        this: *mut ::core::ffi::c_void,
        result__: *mut *mut ::core::ffi::c_void,
    ) -> ::windows_core::HRESULT,
    pub ManipulationStartingEvent: unsafe extern "system" fn(
        this: *mut ::core::ffi::c_void,
        result__: *mut *mut ::core::ffi::c_void,
    ) -> ::windows_core::HRESULT,
    pub ManipulationInertiaStartingEvent: unsafe extern "system" fn(
        this: *mut ::core::ffi::c_void,
        result__: *mut *mut ::core::ffi::c_void,
    ) -> ::windows_core::HRESULT,
    pub ManipulationStartedEvent: unsafe extern "system" fn(
        this: *mut ::core::ffi::c_void,
        result__: *mut *mut ::core::ffi::c_void,
    ) -> ::windows_core::HRESULT,
    pub ManipulationDeltaEvent: unsafe extern "system" fn(
        this: *mut ::core::ffi::c_void,
        result__: *mut *mut ::core::ffi::c_void,
    ) -> ::windows_core::HRESULT,
    pub ManipulationCompletedEvent: unsafe extern "system" fn(
        this: *mut ::core::ffi::c_void,
        result__: *mut *mut ::core::ffi::c_void,
    ) -> ::windows_core::HRESULT,
    pub DragEnterEvent: unsafe extern "system" fn(
        this: *mut ::core::ffi::c_void,
        result__: *mut *mut ::core::ffi::c_void,
    ) -> ::windows_core::HRESULT,
    pub DragLeaveEvent: unsafe extern "system" fn(
        this: *mut ::core::ffi::c_void,
        result__: *mut *mut ::core::ffi::c_void,
    ) -> ::windows_core::HRESULT,
    pub DragOverEvent: unsafe extern "system" fn(
        this: *mut ::core::ffi::c_void,
        result__: *mut *mut ::core::ffi::c_void,
    ) -> ::windows_core::HRESULT,
    pub DropEvent: unsafe extern "system" fn(
        this: *mut ::core::ffi::c_void,
        result__: *mut *mut ::core::ffi::c_void,
    ) -> ::windows_core::HRESULT,
    pub GettingFocusEvent: unsafe extern "system" fn(
        this: *mut ::core::ffi::c_void,
        result__: *mut *mut ::core::ffi::c_void,
    ) -> ::windows_core::HRESULT,
    pub LosingFocusEvent: unsafe extern "system" fn(
        this: *mut ::core::ffi::c_void,
        result__: *mut *mut ::core::ffi::c_void,
    ) -> ::windows_core::HRESULT,
    pub NoFocusCandidateFoundEvent: unsafe extern "system" fn(
        this: *mut ::core::ffi::c_void,
        result__: *mut *mut ::core::ffi::c_void,
    ) -> ::windows_core::HRESULT,
    pub PreviewKeyDownEvent: unsafe extern "system" fn(
        this: *mut ::core::ffi::c_void,
        result__: *mut *mut ::core::ffi::c_void,
    ) -> ::windows_core::HRESULT,
    pub CharacterReceivedEvent: unsafe extern "system" fn(
        this: *mut ::core::ffi::c_void,
        result__: *mut *mut ::core::ffi::c_void,
    ) -> ::windows_core::HRESULT,
    pub PreviewKeyUpEvent: unsafe extern "system" fn(
        this: *mut ::core::ffi::c_void,
        result__: *mut *mut ::core::ffi::c_void,
    ) -> ::windows_core::HRESULT,
    pub BringIntoViewRequestedEvent: unsafe extern "system" fn(
        this: *mut ::core::ffi::c_void,
        result__: *mut *mut ::core::ffi::c_void,
    ) -> ::windows_core::HRESULT,
    pub ContextRequestedEvent: unsafe extern "system" fn(
        this: *mut ::core::ffi::c_void,
        result__: *mut *mut ::core::ffi::c_void,
    ) -> ::windows_core::HRESULT,
    pub AllowDropProperty: unsafe extern "system" fn(
        this: *mut ::core::ffi::c_void,
        result__: *mut *mut ::core::ffi::c_void,
    ) -> ::windows_core::HRESULT,
    pub OpacityProperty: unsafe extern "system" fn(
        this: *mut ::core::ffi::c_void,
        result__: *mut *mut ::core::ffi::c_void,
    ) -> ::windows_core::HRESULT,
    pub ClipProperty: unsafe extern "system" fn(
        this: *mut ::core::ffi::c_void,
        result__: *mut *mut ::core::ffi::c_void,
    ) -> ::windows_core::HRESULT,
    pub RenderTransformProperty: unsafe extern "system" fn(
        this: *mut ::core::ffi::c_void,
        result__: *mut *mut ::core::ffi::c_void,
    ) -> ::windows_core::HRESULT,
    pub ProjectionProperty: unsafe extern "system" fn(
        this: *mut ::core::ffi::c_void,
        result__: *mut *mut ::core::ffi::c_void,
    ) -> ::windows_core::HRESULT,
    pub Transform3DProperty: unsafe extern "system" fn(
        this: *mut ::core::ffi::c_void,
        result__: *mut *mut ::core::ffi::c_void,
    ) -> ::windows_core::HRESULT,
    pub RenderTransformOriginProperty: unsafe extern "system" fn(
        this: *mut ::core::ffi::c_void,
        result__: *mut *mut ::core::ffi::c_void,
    ) -> ::windows_core::HRESULT,
    pub IsHitTestVisibleProperty: unsafe extern "system" fn(
        this: *mut ::core::ffi::c_void,
        result__: *mut *mut ::core::ffi::c_void,
    ) -> ::windows_core::HRESULT,
    pub VisibilityProperty: unsafe extern "system" fn(
        this: *mut ::core::ffi::c_void,
        result__: *mut *mut ::core::ffi::c_void,
    ) -> ::windows_core::HRESULT,
    pub UseLayoutRoundingProperty: unsafe extern "system" fn(
        this: *mut ::core::ffi::c_void,
        result__: *mut *mut ::core::ffi::c_void,
    ) -> ::windows_core::HRESULT,
    pub TransitionsProperty: unsafe extern "system" fn(
        this: *mut ::core::ffi::c_void,
        result__: *mut *mut ::core::ffi::c_void,
    ) -> ::windows_core::HRESULT,
    pub CacheModeProperty: unsafe extern "system" fn(
        this: *mut ::core::ffi::c_void,
        result__: *mut *mut ::core::ffi::c_void,
    ) -> ::windows_core::HRESULT,
    pub IsTapEnabledProperty: unsafe extern "system" fn(
        this: *mut ::core::ffi::c_void,
        result__: *mut *mut ::core::ffi::c_void,
    ) -> ::windows_core::HRESULT,
    pub IsDoubleTapEnabledProperty: unsafe extern "system" fn(
        this: *mut ::core::ffi::c_void,
        result__: *mut *mut ::core::ffi::c_void,
    ) -> ::windows_core::HRESULT,
    pub CanDragProperty: unsafe extern "system" fn(
        this: *mut ::core::ffi::c_void,
        result__: *mut *mut ::core::ffi::c_void,
    ) -> ::windows_core::HRESULT,
    pub IsRightTapEnabledProperty: unsafe extern "system" fn(
        this: *mut ::core::ffi::c_void,
        result__: *mut *mut ::core::ffi::c_void,
    ) -> ::windows_core::HRESULT,
    pub IsHoldingEnabledProperty: unsafe extern "system" fn(
        this: *mut ::core::ffi::c_void,
        result__: *mut *mut ::core::ffi::c_void,
    ) -> ::windows_core::HRESULT,
    pub ManipulationModeProperty: unsafe extern "system" fn(
        this: *mut ::core::ffi::c_void,
        result__: *mut *mut ::core::ffi::c_void,
    ) -> ::windows_core::HRESULT,
    pub PointerCapturesProperty: unsafe extern "system" fn(
        this: *mut ::core::ffi::c_void,
        result__: *mut *mut ::core::ffi::c_void,
    ) -> ::windows_core::HRESULT,
    pub ContextFlyoutProperty: unsafe extern "system" fn(
        this: *mut ::core::ffi::c_void,
        result__: *mut *mut ::core::ffi::c_void,
    ) -> ::windows_core::HRESULT,
    pub CompositeModeProperty: unsafe extern "system" fn(
        this: *mut ::core::ffi::c_void,
        result__: *mut *mut ::core::ffi::c_void,
    ) -> ::windows_core::HRESULT,
    pub LightsProperty: unsafe extern "system" fn(
        this: *mut ::core::ffi::c_void,
        result__: *mut *mut ::core::ffi::c_void,
    ) -> ::windows_core::HRESULT,
    pub CanBeScrollAnchorProperty: unsafe extern "system" fn(
        this: *mut ::core::ffi::c_void,
        result__: *mut *mut ::core::ffi::c_void,
    ) -> ::windows_core::HRESULT,
    pub ExitDisplayModeOnAccessKeyInvokedProperty:
        unsafe extern "system" fn(
            this: *mut ::core::ffi::c_void,
            result__: *mut *mut ::core::ffi::c_void,
        ) -> ::windows_core::HRESULT,
    pub IsAccessKeyScopeProperty: unsafe extern "system" fn(
        this: *mut ::core::ffi::c_void,
        result__: *mut *mut ::core::ffi::c_void,
    ) -> ::windows_core::HRESULT,
    pub AccessKeyScopeOwnerProperty: unsafe extern "system" fn(
        this: *mut ::core::ffi::c_void,
        result__: *mut *mut ::core::ffi::c_void,
    ) -> ::windows_core::HRESULT,
    pub AccessKeyProperty: unsafe extern "system" fn(
        this: *mut ::core::ffi::c_void,
        result__: *mut *mut ::core::ffi::c_void,
    ) -> ::windows_core::HRESULT,
    pub KeyTipPlacementModeProperty: unsafe extern "system" fn(
        this: *mut ::core::ffi::c_void,
        result__: *mut *mut ::core::ffi::c_void,
    ) -> ::windows_core::HRESULT,
    pub KeyTipHorizontalOffsetProperty: unsafe extern "system" fn(
        this: *mut ::core::ffi::c_void,
        result__: *mut *mut ::core::ffi::c_void,
    ) -> ::windows_core::HRESULT,
    pub KeyTipVerticalOffsetProperty: unsafe extern "system" fn(
        this: *mut ::core::ffi::c_void,
        result__: *mut *mut ::core::ffi::c_void,
    ) -> ::windows_core::HRESULT,
    pub KeyTipTargetProperty: unsafe extern "system" fn(
        this: *mut ::core::ffi::c_void,
        result__: *mut *mut ::core::ffi::c_void,
    ) -> ::windows_core::HRESULT,
    pub XYFocusKeyboardNavigationProperty: unsafe extern "system" fn(
        this: *mut ::core::ffi::c_void,
        result__: *mut *mut ::core::ffi::c_void,
    )
        -> ::windows_core::HRESULT,
    pub XYFocusUpNavigationStrategyProperty: unsafe extern "system" fn(
        this: *mut ::core::ffi::c_void,
        result__: *mut *mut ::core::ffi::c_void,
    )
        -> ::windows_core::HRESULT,
    pub XYFocusDownNavigationStrategyProperty: unsafe extern "system" fn(
        this: *mut ::core::ffi::c_void,
        result__: *mut *mut ::core::ffi::c_void,
    )
        -> ::windows_core::HRESULT,
    pub XYFocusLeftNavigationStrategyProperty: unsafe extern "system" fn(
        this: *mut ::core::ffi::c_void,
        result__: *mut *mut ::core::ffi::c_void,
    )
        -> ::windows_core::HRESULT,
    pub XYFocusRightNavigationStrategyProperty:
        unsafe extern "system" fn(
            this: *mut ::core::ffi::c_void,
            result__: *mut *mut ::core::ffi::c_void,
        ) -> ::windows_core::HRESULT,
    pub KeyboardAcceleratorPlacementTargetProperty:
        unsafe extern "system" fn(
            this: *mut ::core::ffi::c_void,
            result__: *mut *mut ::core::ffi::c_void,
        ) -> ::windows_core::HRESULT,
    pub KeyboardAcceleratorPlacementModeProperty:
        unsafe extern "system" fn(
            this: *mut ::core::ffi::c_void,
            result__: *mut *mut ::core::ffi::c_void,
        ) -> ::windows_core::HRESULT,
    pub HighContrastAdjustmentProperty: unsafe extern "system" fn(
        this: *mut ::core::ffi::c_void,
        result__: *mut *mut ::core::ffi::c_void,
    ) -> ::windows_core::HRESULT,
    pub TabFocusNavigationProperty: unsafe extern "system" fn(
        this: *mut ::core::ffi::c_void,
        result__: *mut *mut ::core::ffi::c_void,
    ) -> ::windows_core::HRESULT,
    pub ShadowProperty: unsafe extern "system" fn(
        this: *mut ::core::ffi::c_void,
        result__: *mut *mut ::core::ffi::c_void,
    ) -> ::windows_core::HRESULT,
    pub FocusStateProperty: unsafe extern "system" fn(
        this: *mut ::core::ffi::c_void,
        result__: *mut *mut ::core::ffi::c_void,
    ) -> ::windows_core::HRESULT,
    pub UseSystemFocusVisualsProperty: unsafe extern "system" fn(
        this: *mut ::core::ffi::c_void,
        result__: *mut *mut ::core::ffi::c_void,
    ) -> ::windows_core::HRESULT,
    pub XYFocusLeftProperty: unsafe extern "system" fn(
        this: *mut ::core::ffi::c_void,
        result__: *mut *mut ::core::ffi::c_void,
    ) -> ::windows_core::HRESULT,
    pub XYFocusRightProperty: unsafe extern "system" fn(
        this: *mut ::core::ffi::c_void,
        result__: *mut *mut ::core::ffi::c_void,
    ) -> ::windows_core::HRESULT,
    pub XYFocusUpProperty: unsafe extern "system" fn(
        this: *mut ::core::ffi::c_void,
        result__: *mut *mut ::core::ffi::c_void,
    ) -> ::windows_core::HRESULT,
    pub XYFocusDownProperty: unsafe extern "system" fn(
        this: *mut ::core::ffi::c_void,
        result__: *mut *mut ::core::ffi::c_void,
    ) -> ::windows_core::HRESULT,
    pub IsTabStopProperty: unsafe extern "system" fn(
        this: *mut ::core::ffi::c_void,
        result__: *mut *mut ::core::ffi::c_void,
    ) -> ::windows_core::HRESULT,
    pub TabIndexProperty: unsafe extern "system" fn(
        this: *mut ::core::ffi::c_void,
        result__: *mut *mut ::core::ffi::c_void,
    ) -> ::windows_core::HRESULT,
    #[cfg(feature = "Microsoft_UI_Xaml_Input")]
    pub TryStartDirectManipulation: unsafe extern "system" fn(
        this: *mut ::core::ffi::c_void,
        value: *mut ::core::ffi::c_void,
        result__: *mut bool,
    ) -> ::windows_core::HRESULT,
    #[cfg(not(feature = "Microsoft_UI_Xaml_Input"))]
    TryStartDirectManipulation: usize,
    pub RegisterAsScrollPort: unsafe extern "system" fn(
        this: *mut ::core::ffi::c_void,
        element: *mut ::core::ffi::c_void,
    ) -> ::windows_core::HRESULT,
}
#[doc(hidden)]
#[repr(transparent)]
#[derive(::core::cmp::PartialEq, ::core::cmp::Eq, ::core::fmt::Debug, ::core::clone::Clone)]
pub struct IUIElementWeakCollectionFactory(::windows_core::IUnknown);
unsafe impl ::windows_core::Interface for IUIElementWeakCollectionFactory {
    type Vtable = IUIElementWeakCollectionFactory_Vtbl;
}
unsafe impl ::windows_core::ComInterface for IUIElementWeakCollectionFactory {
    const IID: ::windows_core::GUID =
        ::windows_core::GUID::from_u128(0xb4d69f09_d494_5bc8_ae68_b6307d845049);
}
#[repr(C)]
#[doc(hidden)]
pub struct IUIElementWeakCollectionFactory_Vtbl {
    pub base__: ::windows_core::IInspectable_Vtbl,
    #[cfg(feature = "Windows_Foundation_Collections")]
    pub CreateInstance: unsafe extern "system" fn(
        this: *mut ::core::ffi::c_void,
        baseinterface: *mut ::core::ffi::c_void,
        innerinterface: *mut *mut ::core::ffi::c_void,
        result__: *mut *mut ::core::ffi::c_void,
    ) -> ::windows_core::HRESULT,
    #[cfg(not(feature = "Windows_Foundation_Collections"))]
    CreateInstance: usize,
}
#[doc(hidden)]
#[repr(transparent)]
#[derive(::core::cmp::PartialEq, ::core::cmp::Eq, ::core::fmt::Debug, ::core::clone::Clone)]
pub struct IUnhandledExceptionEventArgs(::windows_core::IUnknown);
unsafe impl ::windows_core::Interface for IUnhandledExceptionEventArgs {
    type Vtable = IUnhandledExceptionEventArgs_Vtbl;
}
unsafe impl ::windows_core::ComInterface for IUnhandledExceptionEventArgs {
    const IID: ::windows_core::GUID =
        ::windows_core::GUID::from_u128(0x59eaeba9_8f9c_5be7_9b3b_820960faa220);
}
#[repr(C)]
#[doc(hidden)]
pub struct IUnhandledExceptionEventArgs_Vtbl {
    pub base__: ::windows_core::IInspectable_Vtbl,
    pub Exception: unsafe extern "system" fn(
        this: *mut ::core::ffi::c_void,
        result__: *mut ::windows_core::HRESULT,
    ) -> ::windows_core::HRESULT,
    pub Message: unsafe extern "system" fn(
        this: *mut ::core::ffi::c_void,
        result__: *mut ::std::mem::MaybeUninit<::windows_core::HSTRING>,
    ) -> ::windows_core::HRESULT,
    pub Handled: unsafe extern "system" fn(
        this: *mut ::core::ffi::c_void,
        result__: *mut bool,
    ) -> ::windows_core::HRESULT,
    pub SetHandled: unsafe extern "system" fn(
        this: *mut ::core::ffi::c_void,
        value: bool,
    ) -> ::windows_core::HRESULT,
}
#[doc(hidden)]
#[repr(transparent)]
#[derive(::core::cmp::PartialEq, ::core::cmp::Eq, ::core::fmt::Debug, ::core::clone::Clone)]
pub struct IVector3Transition(::windows_core::IUnknown);
unsafe impl ::windows_core::Interface for IVector3Transition {
    type Vtable = IVector3Transition_Vtbl;
}
unsafe impl ::windows_core::ComInterface for IVector3Transition {
    const IID: ::windows_core::GUID =
        ::windows_core::GUID::from_u128(0x0c408bb9_f9a2_55d7_8aed_143d36d603f2);
}
#[repr(C)]
#[doc(hidden)]
pub struct IVector3Transition_Vtbl {
    pub base__: ::windows_core::IInspectable_Vtbl,
    #[cfg(feature = "Windows_Foundation")]
    pub Duration: unsafe extern "system" fn(
        this: *mut ::core::ffi::c_void,
        result__: *mut ::windows::Foundation::TimeSpan,
    ) -> ::windows_core::HRESULT,
    #[cfg(not(feature = "Windows_Foundation"))]
    Duration: usize,
    #[cfg(feature = "Windows_Foundation")]
    pub SetDuration: unsafe extern "system" fn(
        this: *mut ::core::ffi::c_void,
        value: ::windows::Foundation::TimeSpan,
    ) -> ::windows_core::HRESULT,
    #[cfg(not(feature = "Windows_Foundation"))]
    SetDuration: usize,
    pub Components: unsafe extern "system" fn(
        this: *mut ::core::ffi::c_void,
        result__: *mut Vector3TransitionComponents,
    ) -> ::windows_core::HRESULT,
    pub SetComponents: unsafe extern "system" fn(
        this: *mut ::core::ffi::c_void,
        value: Vector3TransitionComponents,
    ) -> ::windows_core::HRESULT,
}
#[doc(hidden)]
#[repr(transparent)]
#[derive(::core::cmp::PartialEq, ::core::cmp::Eq, ::core::fmt::Debug, ::core::clone::Clone)]
pub struct IVector3TransitionFactory(::windows_core::IUnknown);
unsafe impl ::windows_core::Interface for IVector3TransitionFactory {
    type Vtable = IVector3TransitionFactory_Vtbl;
}
unsafe impl ::windows_core::ComInterface for IVector3TransitionFactory {
    const IID: ::windows_core::GUID =
        ::windows_core::GUID::from_u128(0xa3a084fc_b965_534b_900f_78e288129232);
}
#[repr(C)]
#[doc(hidden)]
pub struct IVector3TransitionFactory_Vtbl {
    pub base__: ::windows_core::IInspectable_Vtbl,
    pub CreateInstance: unsafe extern "system" fn(
        this: *mut ::core::ffi::c_void,
        baseinterface: *mut ::core::ffi::c_void,
        innerinterface: *mut *mut ::core::ffi::c_void,
        result__: *mut *mut ::core::ffi::c_void,
    ) -> ::windows_core::HRESULT,
}
#[doc(hidden)]
#[repr(transparent)]
#[derive(::core::cmp::PartialEq, ::core::cmp::Eq, ::core::fmt::Debug, ::core::clone::Clone)]
pub struct IVisualState(::windows_core::IUnknown);
unsafe impl ::windows_core::Interface for IVisualState {
    type Vtable = IVisualState_Vtbl;
}
unsafe impl ::windows_core::ComInterface for IVisualState {
    const IID: ::windows_core::GUID =
        ::windows_core::GUID::from_u128(0x4bb32ae8_0e28_5521_a7f5_66b661372994);
}
#[repr(C)]
#[doc(hidden)]
pub struct IVisualState_Vtbl {
    pub base__: ::windows_core::IInspectable_Vtbl,
    pub Name: unsafe extern "system" fn(
        this: *mut ::core::ffi::c_void,
        result__: *mut ::std::mem::MaybeUninit<::windows_core::HSTRING>,
    ) -> ::windows_core::HRESULT,
    #[cfg(feature = "Microsoft_UI_Xaml_Media_Animation")]
    pub Storyboard: unsafe extern "system" fn(
        this: *mut ::core::ffi::c_void,
        result__: *mut *mut ::core::ffi::c_void,
    ) -> ::windows_core::HRESULT,
    #[cfg(not(feature = "Microsoft_UI_Xaml_Media_Animation"))]
    Storyboard: usize,
    #[cfg(feature = "Microsoft_UI_Xaml_Media_Animation")]
    pub SetStoryboard: unsafe extern "system" fn(
        this: *mut ::core::ffi::c_void,
        value: *mut ::core::ffi::c_void,
    ) -> ::windows_core::HRESULT,
    #[cfg(not(feature = "Microsoft_UI_Xaml_Media_Animation"))]
    SetStoryboard: usize,
    pub Setters: unsafe extern "system" fn(
        this: *mut ::core::ffi::c_void,
        result__: *mut *mut ::core::ffi::c_void,
    ) -> ::windows_core::HRESULT,
    #[cfg(feature = "Windows_Foundation_Collections")]
    pub StateTriggers: unsafe extern "system" fn(
        this: *mut ::core::ffi::c_void,
        result__: *mut *mut ::core::ffi::c_void,
    ) -> ::windows_core::HRESULT,
    #[cfg(not(feature = "Windows_Foundation_Collections"))]
    StateTriggers: usize,
}
#[doc(hidden)]
#[repr(transparent)]
#[derive(::core::cmp::PartialEq, ::core::cmp::Eq, ::core::fmt::Debug, ::core::clone::Clone)]
pub struct IVisualStateChangedEventArgs(::windows_core::IUnknown);
unsafe impl ::windows_core::Interface for IVisualStateChangedEventArgs {
    type Vtable = IVisualStateChangedEventArgs_Vtbl;
}
unsafe impl ::windows_core::ComInterface for IVisualStateChangedEventArgs {
    const IID: ::windows_core::GUID =
        ::windows_core::GUID::from_u128(0x11de9510_a195_577b_88c8_06391618868c);
}
#[repr(C)]
#[doc(hidden)]
pub struct IVisualStateChangedEventArgs_Vtbl {
    pub base__: ::windows_core::IInspectable_Vtbl,
    pub OldState: unsafe extern "system" fn(
        this: *mut ::core::ffi::c_void,
        result__: *mut *mut ::core::ffi::c_void,
    ) -> ::windows_core::HRESULT,
    pub SetOldState: unsafe extern "system" fn(
        this: *mut ::core::ffi::c_void,
        value: *mut ::core::ffi::c_void,
    ) -> ::windows_core::HRESULT,
    pub NewState: unsafe extern "system" fn(
        this: *mut ::core::ffi::c_void,
        result__: *mut *mut ::core::ffi::c_void,
    ) -> ::windows_core::HRESULT,
    pub SetNewState: unsafe extern "system" fn(
        this: *mut ::core::ffi::c_void,
        value: *mut ::core::ffi::c_void,
    ) -> ::windows_core::HRESULT,
    #[cfg(feature = "Microsoft_UI_Xaml_Controls")]
    pub Control: unsafe extern "system" fn(
        this: *mut ::core::ffi::c_void,
        result__: *mut *mut ::core::ffi::c_void,
    ) -> ::windows_core::HRESULT,
    #[cfg(not(feature = "Microsoft_UI_Xaml_Controls"))]
    Control: usize,
    #[cfg(feature = "Microsoft_UI_Xaml_Controls")]
    pub SetControl: unsafe extern "system" fn(
        this: *mut ::core::ffi::c_void,
        value: *mut ::core::ffi::c_void,
    ) -> ::windows_core::HRESULT,
    #[cfg(not(feature = "Microsoft_UI_Xaml_Controls"))]
    SetControl: usize,
}
#[doc(hidden)]
#[repr(transparent)]
#[derive(::core::cmp::PartialEq, ::core::cmp::Eq, ::core::fmt::Debug, ::core::clone::Clone)]
pub struct IVisualStateGroup(::windows_core::IUnknown);
unsafe impl ::windows_core::Interface for IVisualStateGroup {
    type Vtable = IVisualStateGroup_Vtbl;
}
unsafe impl ::windows_core::ComInterface for IVisualStateGroup {
    const IID: ::windows_core::GUID =
        ::windows_core::GUID::from_u128(0x8dfd691b_710c_5d6d_b71a_7a7f5ed54ac7);
}
#[repr(C)]
#[doc(hidden)]
pub struct IVisualStateGroup_Vtbl {
    pub base__: ::windows_core::IInspectable_Vtbl,
    pub Name: unsafe extern "system" fn(
        this: *mut ::core::ffi::c_void,
        result__: *mut ::std::mem::MaybeUninit<::windows_core::HSTRING>,
    ) -> ::windows_core::HRESULT,
    #[cfg(feature = "Windows_Foundation_Collections")]
    pub Transitions: unsafe extern "system" fn(
        this: *mut ::core::ffi::c_void,
        result__: *mut *mut ::core::ffi::c_void,
    ) -> ::windows_core::HRESULT,
    #[cfg(not(feature = "Windows_Foundation_Collections"))]
    Transitions: usize,
    #[cfg(feature = "Windows_Foundation_Collections")]
    pub States: unsafe extern "system" fn(
        this: *mut ::core::ffi::c_void,
        result__: *mut *mut ::core::ffi::c_void,
    ) -> ::windows_core::HRESULT,
    #[cfg(not(feature = "Windows_Foundation_Collections"))]
    States: usize,
    pub CurrentState: unsafe extern "system" fn(
        this: *mut ::core::ffi::c_void,
        result__: *mut *mut ::core::ffi::c_void,
    ) -> ::windows_core::HRESULT,
    #[cfg(feature = "Windows_Foundation")]
    pub CurrentStateChanged: unsafe extern "system" fn(
        this: *mut ::core::ffi::c_void,
        handler: *mut ::core::ffi::c_void,
        result__: *mut ::windows::Foundation::EventRegistrationToken,
    ) -> ::windows_core::HRESULT,
    #[cfg(not(feature = "Windows_Foundation"))]
    CurrentStateChanged: usize,
    #[cfg(feature = "Windows_Foundation")]
    pub RemoveCurrentStateChanged: unsafe extern "system" fn(
        this: *mut ::core::ffi::c_void,
        token: ::windows::Foundation::EventRegistrationToken,
    ) -> ::windows_core::HRESULT,
    #[cfg(not(feature = "Windows_Foundation"))]
    RemoveCurrentStateChanged: usize,
    #[cfg(feature = "Windows_Foundation")]
    pub CurrentStateChanging: unsafe extern "system" fn(
        this: *mut ::core::ffi::c_void,
        handler: *mut ::core::ffi::c_void,
        result__: *mut ::windows::Foundation::EventRegistrationToken,
    ) -> ::windows_core::HRESULT,
    #[cfg(not(feature = "Windows_Foundation"))]
    CurrentStateChanging: usize,
    #[cfg(feature = "Windows_Foundation")]
    pub RemoveCurrentStateChanging: unsafe extern "system" fn(
        this: *mut ::core::ffi::c_void,
        token: ::windows::Foundation::EventRegistrationToken,
    ) -> ::windows_core::HRESULT,
    #[cfg(not(feature = "Windows_Foundation"))]
    RemoveCurrentStateChanging: usize,
}
#[doc(hidden)]
#[repr(transparent)]
#[derive(::core::cmp::PartialEq, ::core::cmp::Eq, ::core::fmt::Debug, ::core::clone::Clone)]
pub struct IVisualStateManager(::windows_core::IUnknown);
unsafe impl ::windows_core::Interface for IVisualStateManager {
    type Vtable = IVisualStateManager_Vtbl;
}
unsafe impl ::windows_core::ComInterface for IVisualStateManager {
    const IID: ::windows_core::GUID =
        ::windows_core::GUID::from_u128(0x342c8d32_ad61_5925_93d1_0c704df2a7d1);
}
#[repr(C)]
#[doc(hidden)]
pub struct IVisualStateManager_Vtbl {
    pub base__: ::windows_core::IInspectable_Vtbl,
}
#[doc(hidden)]
#[repr(transparent)]
#[derive(::core::cmp::PartialEq, ::core::cmp::Eq, ::core::fmt::Debug, ::core::clone::Clone)]
pub struct IVisualStateManagerFactory(::windows_core::IUnknown);
unsafe impl ::windows_core::Interface for IVisualStateManagerFactory {
    type Vtable = IVisualStateManagerFactory_Vtbl;
}
unsafe impl ::windows_core::ComInterface for IVisualStateManagerFactory {
    const IID: ::windows_core::GUID =
        ::windows_core::GUID::from_u128(0x713daf82_92b3_58f2_8fc1_b0d9a2cad03c);
}
#[repr(C)]
#[doc(hidden)]
pub struct IVisualStateManagerFactory_Vtbl {
    pub base__: ::windows_core::IInspectable_Vtbl,
    pub CreateInstance: unsafe extern "system" fn(
        this: *mut ::core::ffi::c_void,
        baseinterface: *mut ::core::ffi::c_void,
        innerinterface: *mut *mut ::core::ffi::c_void,
        result__: *mut *mut ::core::ffi::c_void,
    ) -> ::windows_core::HRESULT,
}
#[doc(hidden)]
#[repr(transparent)]
#[derive(::core::cmp::PartialEq, ::core::cmp::Eq, ::core::fmt::Debug, ::core::clone::Clone)]
pub struct IVisualStateManagerOverrides(::windows_core::IUnknown);
unsafe impl ::windows_core::Interface for IVisualStateManagerOverrides {
    type Vtable = IVisualStateManagerOverrides_Vtbl;
}
unsafe impl ::windows_core::ComInterface for IVisualStateManagerOverrides {
    const IID: ::windows_core::GUID =
        ::windows_core::GUID::from_u128(0xe3f8e9c9_9432_514c_923e_142cd8c82730);
}
#[repr(C)]
#[doc(hidden)]
pub struct IVisualStateManagerOverrides_Vtbl {
    pub base__: ::windows_core::IInspectable_Vtbl,
    #[cfg(feature = "Microsoft_UI_Xaml_Controls")]
    pub GoToStateCore: unsafe extern "system" fn(
        this: *mut ::core::ffi::c_void,
        control: *mut ::core::ffi::c_void,
        templateroot: *mut ::core::ffi::c_void,
        statename: ::std::mem::MaybeUninit<::windows_core::HSTRING>,
        group: *mut ::core::ffi::c_void,
        state: *mut ::core::ffi::c_void,
        usetransitions: bool,
        result__: *mut bool,
    ) -> ::windows_core::HRESULT,
    #[cfg(not(feature = "Microsoft_UI_Xaml_Controls"))]
    GoToStateCore: usize,
}
#[doc(hidden)]
#[repr(transparent)]
#[derive(::core::cmp::PartialEq, ::core::cmp::Eq, ::core::fmt::Debug, ::core::clone::Clone)]
pub struct IVisualStateManagerProtected(::windows_core::IUnknown);
unsafe impl ::windows_core::Interface for IVisualStateManagerProtected {
    type Vtable = IVisualStateManagerProtected_Vtbl;
}
unsafe impl ::windows_core::ComInterface for IVisualStateManagerProtected {
    const IID: ::windows_core::GUID =
        ::windows_core::GUID::from_u128(0x0f008013_787f_5599_a5ad_0a10b988ed24);
}
#[repr(C)]
#[doc(hidden)]
pub struct IVisualStateManagerProtected_Vtbl {
    pub base__: ::windows_core::IInspectable_Vtbl,
    #[cfg(feature = "Microsoft_UI_Xaml_Controls")]
    pub RaiseCurrentStateChanging: unsafe extern "system" fn(
        this: *mut ::core::ffi::c_void,
        stategroup: *mut ::core::ffi::c_void,
        oldstate: *mut ::core::ffi::c_void,
        newstate: *mut ::core::ffi::c_void,
        control: *mut ::core::ffi::c_void,
    ) -> ::windows_core::HRESULT,
    #[cfg(not(feature = "Microsoft_UI_Xaml_Controls"))]
    RaiseCurrentStateChanging: usize,
    #[cfg(feature = "Microsoft_UI_Xaml_Controls")]
    pub RaiseCurrentStateChanged: unsafe extern "system" fn(
        this: *mut ::core::ffi::c_void,
        stategroup: *mut ::core::ffi::c_void,
        oldstate: *mut ::core::ffi::c_void,
        newstate: *mut ::core::ffi::c_void,
        control: *mut ::core::ffi::c_void,
    ) -> ::windows_core::HRESULT,
    #[cfg(not(feature = "Microsoft_UI_Xaml_Controls"))]
    RaiseCurrentStateChanged: usize,
}
#[doc(hidden)]
#[repr(transparent)]
#[derive(::core::cmp::PartialEq, ::core::cmp::Eq, ::core::fmt::Debug, ::core::clone::Clone)]
pub struct IVisualStateManagerStatics(::windows_core::IUnknown);
unsafe impl ::windows_core::Interface for IVisualStateManagerStatics {
    type Vtable = IVisualStateManagerStatics_Vtbl;
}
unsafe impl ::windows_core::ComInterface for IVisualStateManagerStatics {
    const IID: ::windows_core::GUID =
        ::windows_core::GUID::from_u128(0xa4d5147d_88c3_57ed_ad83_245df5f6b50d);
}
#[repr(C)]
#[doc(hidden)]
pub struct IVisualStateManagerStatics_Vtbl {
    pub base__: ::windows_core::IInspectable_Vtbl,
    #[cfg(feature = "Windows_Foundation_Collections")]
    pub GetVisualStateGroups: unsafe extern "system" fn(
        this: *mut ::core::ffi::c_void,
        obj: *mut ::core::ffi::c_void,
        result__: *mut *mut ::core::ffi::c_void,
    ) -> ::windows_core::HRESULT,
    #[cfg(not(feature = "Windows_Foundation_Collections"))]
    GetVisualStateGroups: usize,
    pub CustomVisualStateManagerProperty: unsafe extern "system" fn(
        this: *mut ::core::ffi::c_void,
        result__: *mut *mut ::core::ffi::c_void,
    ) -> ::windows_core::HRESULT,
    pub GetCustomVisualStateManager: unsafe extern "system" fn(
        this: *mut ::core::ffi::c_void,
        obj: *mut ::core::ffi::c_void,
        result__: *mut *mut ::core::ffi::c_void,
    ) -> ::windows_core::HRESULT,
    pub SetCustomVisualStateManager: unsafe extern "system" fn(
        this: *mut ::core::ffi::c_void,
        obj: *mut ::core::ffi::c_void,
        value: *mut ::core::ffi::c_void,
    ) -> ::windows_core::HRESULT,
    #[cfg(feature = "Microsoft_UI_Xaml_Controls")]
    pub GoToState: unsafe extern "system" fn(
        this: *mut ::core::ffi::c_void,
        control: *mut ::core::ffi::c_void,
        statename: ::std::mem::MaybeUninit<::windows_core::HSTRING>,
        usetransitions: bool,
        result__: *mut bool,
    ) -> ::windows_core::HRESULT,
    #[cfg(not(feature = "Microsoft_UI_Xaml_Controls"))]
    GoToState: usize,
}
#[doc(hidden)]
#[repr(transparent)]
#[derive(::core::cmp::PartialEq, ::core::cmp::Eq, ::core::fmt::Debug, ::core::clone::Clone)]
pub struct IVisualTransition(::windows_core::IUnknown);
unsafe impl ::windows_core::Interface for IVisualTransition {
    type Vtable = IVisualTransition_Vtbl;
}
unsafe impl ::windows_core::ComInterface for IVisualTransition {
    const IID: ::windows_core::GUID =
        ::windows_core::GUID::from_u128(0xdd21af54_2ce1_59de_9fd1_2b45f6bf6581);
}
#[repr(C)]
#[doc(hidden)]
pub struct IVisualTransition_Vtbl {
    pub base__: ::windows_core::IInspectable_Vtbl,
    #[cfg(feature = "Windows_Foundation")]
    pub GeneratedDuration: unsafe extern "system" fn(
        this: *mut ::core::ffi::c_void,
        result__: *mut Duration,
    ) -> ::windows_core::HRESULT,
    #[cfg(not(feature = "Windows_Foundation"))]
    GeneratedDuration: usize,
    #[cfg(feature = "Windows_Foundation")]
    pub SetGeneratedDuration: unsafe extern "system" fn(
        this: *mut ::core::ffi::c_void,
        value: Duration,
    ) -> ::windows_core::HRESULT,
    #[cfg(not(feature = "Windows_Foundation"))]
    SetGeneratedDuration: usize,
    #[cfg(feature = "Microsoft_UI_Xaml_Media_Animation")]
    pub GeneratedEasingFunction: unsafe extern "system" fn(
        this: *mut ::core::ffi::c_void,
        result__: *mut *mut ::core::ffi::c_void,
    ) -> ::windows_core::HRESULT,
    #[cfg(not(feature = "Microsoft_UI_Xaml_Media_Animation"))]
    GeneratedEasingFunction: usize,
    #[cfg(feature = "Microsoft_UI_Xaml_Media_Animation")]
    pub SetGeneratedEasingFunction: unsafe extern "system" fn(
        this: *mut ::core::ffi::c_void,
        value: *mut ::core::ffi::c_void,
    ) -> ::windows_core::HRESULT,
    #[cfg(not(feature = "Microsoft_UI_Xaml_Media_Animation"))]
    SetGeneratedEasingFunction: usize,
    pub To: unsafe extern "system" fn(
        this: *mut ::core::ffi::c_void,
        result__: *mut ::std::mem::MaybeUninit<::windows_core::HSTRING>,
    ) -> ::windows_core::HRESULT,
    pub SetTo: unsafe extern "system" fn(
        this: *mut ::core::ffi::c_void,
        value: ::std::mem::MaybeUninit<::windows_core::HSTRING>,
    ) -> ::windows_core::HRESULT,
    pub From: unsafe extern "system" fn(
        this: *mut ::core::ffi::c_void,
        result__: *mut ::std::mem::MaybeUninit<::windows_core::HSTRING>,
    ) -> ::windows_core::HRESULT,
    pub SetFrom: unsafe extern "system" fn(
        this: *mut ::core::ffi::c_void,
        value: ::std::mem::MaybeUninit<::windows_core::HSTRING>,
    ) -> ::windows_core::HRESULT,
    #[cfg(feature = "Microsoft_UI_Xaml_Media_Animation")]
    pub Storyboard: unsafe extern "system" fn(
        this: *mut ::core::ffi::c_void,
        result__: *mut *mut ::core::ffi::c_void,
    ) -> ::windows_core::HRESULT,
    #[cfg(not(feature = "Microsoft_UI_Xaml_Media_Animation"))]
    Storyboard: usize,
    #[cfg(feature = "Microsoft_UI_Xaml_Media_Animation")]
    pub SetStoryboard: unsafe extern "system" fn(
        this: *mut ::core::ffi::c_void,
        value: *mut ::core::ffi::c_void,
    ) -> ::windows_core::HRESULT,
    #[cfg(not(feature = "Microsoft_UI_Xaml_Media_Animation"))]
    SetStoryboard: usize,
}
#[doc(hidden)]
#[repr(transparent)]
#[derive(::core::cmp::PartialEq, ::core::cmp::Eq, ::core::fmt::Debug, ::core::clone::Clone)]
pub struct IVisualTransitionFactory(::windows_core::IUnknown);
unsafe impl ::windows_core::Interface for IVisualTransitionFactory {
    type Vtable = IVisualTransitionFactory_Vtbl;
}
unsafe impl ::windows_core::ComInterface for IVisualTransitionFactory {
    const IID: ::windows_core::GUID =
        ::windows_core::GUID::from_u128(0xf3e74c0d_0b5b_5920_a309_08cb6bf2a739);
}
#[repr(C)]
#[doc(hidden)]
pub struct IVisualTransitionFactory_Vtbl {
    pub base__: ::windows_core::IInspectable_Vtbl,
    pub CreateInstance: unsafe extern "system" fn(
        this: *mut ::core::ffi::c_void,
        baseinterface: *mut ::core::ffi::c_void,
        innerinterface: *mut *mut ::core::ffi::c_void,
        result__: *mut *mut ::core::ffi::c_void,
    ) -> ::windows_core::HRESULT,
}
#[doc(hidden)]
#[repr(transparent)]
#[derive(::core::cmp::PartialEq, ::core::cmp::Eq, ::core::fmt::Debug, ::core::clone::Clone)]
pub struct IWindow(::windows_core::IUnknown);
unsafe impl ::windows_core::Interface for IWindow {
    type Vtable = IWindow_Vtbl;
}
unsafe impl ::windows_core::ComInterface for IWindow {
    const IID: ::windows_core::GUID =
        ::windows_core::GUID::from_u128(0x61f0ec79_5d52_56b5_86fb_40fa4af288b0);
}
#[repr(C)]
#[doc(hidden)]
pub struct IWindow_Vtbl {
    pub base__: ::windows_core::IInspectable_Vtbl,
    #[cfg(feature = "Windows_Foundation")]
    pub Bounds: unsafe extern "system" fn(
        this: *mut ::core::ffi::c_void,
        result__: *mut ::windows::Foundation::Rect,
    ) -> ::windows_core::HRESULT,
    #[cfg(not(feature = "Windows_Foundation"))]
    Bounds: usize,
    pub Visible: unsafe extern "system" fn(
        this: *mut ::core::ffi::c_void,
        result__: *mut bool,
    ) -> ::windows_core::HRESULT,
    pub Content: unsafe extern "system" fn(
        this: *mut ::core::ffi::c_void,
        result__: *mut *mut ::core::ffi::c_void,
    ) -> ::windows_core::HRESULT,
    pub SetContent: unsafe extern "system" fn(
        this: *mut ::core::ffi::c_void,
        value: *mut ::core::ffi::c_void,
    ) -> ::windows_core::HRESULT,
    #[cfg(all(feature = "Windows_UI_Core", feature = "deprecated"))]
    pub CoreWindow: unsafe extern "system" fn(
        this: *mut ::core::ffi::c_void,
        result__: *mut *mut ::core::ffi::c_void,
    ) -> ::windows_core::HRESULT,
    #[cfg(not(all(feature = "Windows_UI_Core", feature = "deprecated")))]
    CoreWindow: usize,
    #[cfg(feature = "Microsoft_UI_Composition")]
    pub Compositor: unsafe extern "system" fn(
        this: *mut ::core::ffi::c_void,
        result__: *mut *mut ::core::ffi::c_void,
    ) -> ::windows_core::HRESULT,
    #[cfg(not(feature = "Microsoft_UI_Composition"))]
    Compositor: usize,
    #[cfg(all(feature = "Windows_UI_Core", feature = "deprecated"))]
    pub Dispatcher: unsafe extern "system" fn(
        this: *mut ::core::ffi::c_void,
        result__: *mut *mut ::core::ffi::c_void,
    ) -> ::windows_core::HRESULT,
    #[cfg(not(all(feature = "Windows_UI_Core", feature = "deprecated")))]
    Dispatcher: usize,
    #[cfg(feature = "Microsoft_UI_Dispatching")]
    pub DispatcherQueue: unsafe extern "system" fn(
        this: *mut ::core::ffi::c_void,
        result__: *mut *mut ::core::ffi::c_void,
    ) -> ::windows_core::HRESULT,
    #[cfg(not(feature = "Microsoft_UI_Dispatching"))]
    DispatcherQueue: usize,
    pub Title: unsafe extern "system" fn(
        this: *mut ::core::ffi::c_void,
        result__: *mut ::std::mem::MaybeUninit<::windows_core::HSTRING>,
    ) -> ::windows_core::HRESULT,
    pub SetTitle: unsafe extern "system" fn(
        this: *mut ::core::ffi::c_void,
        value: ::std::mem::MaybeUninit<::windows_core::HSTRING>,
    ) -> ::windows_core::HRESULT,
    pub ExtendsContentIntoTitleBar: unsafe extern "system" fn(
        this: *mut ::core::ffi::c_void,
        result__: *mut bool,
    ) -> ::windows_core::HRESULT,
    pub SetExtendsContentIntoTitleBar: unsafe extern "system" fn(
        this: *mut ::core::ffi::c_void,
        value: bool,
    ) -> ::windows_core::HRESULT,
    #[cfg(feature = "Windows_Foundation")]
    pub Activated: unsafe extern "system" fn(
        this: *mut ::core::ffi::c_void,
        handler: *mut ::core::ffi::c_void,
        result__: *mut ::windows::Foundation::EventRegistrationToken,
    ) -> ::windows_core::HRESULT,
    #[cfg(not(feature = "Windows_Foundation"))]
    Activated: usize,
    #[cfg(feature = "Windows_Foundation")]
    pub RemoveActivated: unsafe extern "system" fn(
        this: *mut ::core::ffi::c_void,
        token: ::windows::Foundation::EventRegistrationToken,
    ) -> ::windows_core::HRESULT,
    #[cfg(not(feature = "Windows_Foundation"))]
    RemoveActivated: usize,
    #[cfg(feature = "Windows_Foundation")]
    pub Closed: unsafe extern "system" fn(
        this: *mut ::core::ffi::c_void,
        handler: *mut ::core::ffi::c_void,
        result__: *mut ::windows::Foundation::EventRegistrationToken,
    ) -> ::windows_core::HRESULT,
    #[cfg(not(feature = "Windows_Foundation"))]
    Closed: usize,
    #[cfg(feature = "Windows_Foundation")]
    pub RemoveClosed: unsafe extern "system" fn(
        this: *mut ::core::ffi::c_void,
        token: ::windows::Foundation::EventRegistrationToken,
    ) -> ::windows_core::HRESULT,
    #[cfg(not(feature = "Windows_Foundation"))]
    RemoveClosed: usize,
    #[cfg(feature = "Windows_Foundation")]
    pub SizeChanged: unsafe extern "system" fn(
        this: *mut ::core::ffi::c_void,
        handler: *mut ::core::ffi::c_void,
        result__: *mut ::windows::Foundation::EventRegistrationToken,
    ) -> ::windows_core::HRESULT,
    #[cfg(not(feature = "Windows_Foundation"))]
    SizeChanged: usize,
    #[cfg(feature = "Windows_Foundation")]
    pub RemoveSizeChanged: unsafe extern "system" fn(
        this: *mut ::core::ffi::c_void,
        token: ::windows::Foundation::EventRegistrationToken,
    ) -> ::windows_core::HRESULT,
    #[cfg(not(feature = "Windows_Foundation"))]
    RemoveSizeChanged: usize,
    #[cfg(feature = "Windows_Foundation")]
    pub VisibilityChanged: unsafe extern "system" fn(
        this: *mut ::core::ffi::c_void,
        handler: *mut ::core::ffi::c_void,
        result__: *mut ::windows::Foundation::EventRegistrationToken,
    ) -> ::windows_core::HRESULT,
    #[cfg(not(feature = "Windows_Foundation"))]
    VisibilityChanged: usize,
    #[cfg(feature = "Windows_Foundation")]
    pub RemoveVisibilityChanged: unsafe extern "system" fn(
        this: *mut ::core::ffi::c_void,
        token: ::windows::Foundation::EventRegistrationToken,
    ) -> ::windows_core::HRESULT,
    #[cfg(not(feature = "Windows_Foundation"))]
    RemoveVisibilityChanged: usize,
    pub Activate:
        unsafe extern "system" fn(this: *mut ::core::ffi::c_void) -> ::windows_core::HRESULT,
    pub Close: unsafe extern "system" fn(this: *mut ::core::ffi::c_void) -> ::windows_core::HRESULT,
    pub SetTitleBar: unsafe extern "system" fn(
        this: *mut ::core::ffi::c_void,
        titlebar: *mut ::core::ffi::c_void,
    ) -> ::windows_core::HRESULT,
}
#[doc(hidden)]
#[repr(transparent)]
#[derive(::core::cmp::PartialEq, ::core::cmp::Eq, ::core::fmt::Debug, ::core::clone::Clone)]
pub struct IWindow2(::windows_core::IUnknown);
unsafe impl ::windows_core::Interface for IWindow2 {
    type Vtable = IWindow2_Vtbl;
}
unsafe impl ::windows_core::ComInterface for IWindow2 {
    const IID: ::windows_core::GUID =
        ::windows_core::GUID::from_u128(0x42febaa5_1c32_522a_a591_57618c6f665d);
}
#[repr(C)]
#[doc(hidden)]
pub struct IWindow2_Vtbl {
    pub base__: ::windows_core::IInspectable_Vtbl,
    #[cfg(feature = "Microsoft_UI_Xaml_Media")]
    pub SystemBackdrop: unsafe extern "system" fn(
        this: *mut ::core::ffi::c_void,
        result__: *mut *mut ::core::ffi::c_void,
    ) -> ::windows_core::HRESULT,
    #[cfg(not(feature = "Microsoft_UI_Xaml_Media"))]
    SystemBackdrop: usize,
    #[cfg(feature = "Microsoft_UI_Xaml_Media")]
    pub SetSystemBackdrop: unsafe extern "system" fn(
        this: *mut ::core::ffi::c_void,
        value: *mut ::core::ffi::c_void,
    ) -> ::windows_core::HRESULT,
    #[cfg(not(feature = "Microsoft_UI_Xaml_Media"))]
    SetSystemBackdrop: usize,
    #[cfg(feature = "Microsoft_UI_Windowing")]
    pub AppWindow: unsafe extern "system" fn(
        this: *mut ::core::ffi::c_void,
        result__: *mut *mut ::core::ffi::c_void,
    ) -> ::windows_core::HRESULT,
    #[cfg(not(feature = "Microsoft_UI_Windowing"))]
    AppWindow: usize,
}
#[doc(hidden)]
#[repr(transparent)]
#[derive(::core::cmp::PartialEq, ::core::cmp::Eq, ::core::fmt::Debug, ::core::clone::Clone)]
pub struct IWindowActivatedEventArgs(::windows_core::IUnknown);
unsafe impl ::windows_core::Interface for IWindowActivatedEventArgs {
    type Vtable = IWindowActivatedEventArgs_Vtbl;
}
unsafe impl ::windows_core::ComInterface for IWindowActivatedEventArgs {
    const IID: ::windows_core::GUID =
        ::windows_core::GUID::from_u128(0xc723a5ea_82c4_5dd6_861b_70ef573b88d6);
}
#[repr(C)]
#[doc(hidden)]
pub struct IWindowActivatedEventArgs_Vtbl {
    pub base__: ::windows_core::IInspectable_Vtbl,
    pub Handled: unsafe extern "system" fn(
        this: *mut ::core::ffi::c_void,
        result__: *mut bool,
    ) -> ::windows_core::HRESULT,
    pub SetHandled: unsafe extern "system" fn(
        this: *mut ::core::ffi::c_void,
        value: bool,
    ) -> ::windows_core::HRESULT,
    pub WindowActivationState: unsafe extern "system" fn(
        this: *mut ::core::ffi::c_void,
        result__: *mut WindowActivationState,
    ) -> ::windows_core::HRESULT,
}
#[doc(hidden)]
#[repr(transparent)]
#[derive(::core::cmp::PartialEq, ::core::cmp::Eq, ::core::fmt::Debug, ::core::clone::Clone)]
pub struct IWindowEventArgs(::windows_core::IUnknown);
unsafe impl ::windows_core::Interface for IWindowEventArgs {
    type Vtable = IWindowEventArgs_Vtbl;
}
unsafe impl ::windows_core::ComInterface for IWindowEventArgs {
    const IID: ::windows_core::GUID =
        ::windows_core::GUID::from_u128(0x1140827c_fe0a_5268_bc2b_f4492c2ccb49);
}
#[repr(C)]
#[doc(hidden)]
pub struct IWindowEventArgs_Vtbl {
    pub base__: ::windows_core::IInspectable_Vtbl,
    pub Handled: unsafe extern "system" fn(
        this: *mut ::core::ffi::c_void,
        result__: *mut bool,
    ) -> ::windows_core::HRESULT,
    pub SetHandled: unsafe extern "system" fn(
        this: *mut ::core::ffi::c_void,
        value: bool,
    ) -> ::windows_core::HRESULT,
}
#[doc(hidden)]
#[repr(transparent)]
#[derive(::core::cmp::PartialEq, ::core::cmp::Eq, ::core::fmt::Debug, ::core::clone::Clone)]
pub struct IWindowFactory(::windows_core::IUnknown);
unsafe impl ::windows_core::Interface for IWindowFactory {
    type Vtable = IWindowFactory_Vtbl;
}
unsafe impl ::windows_core::ComInterface for IWindowFactory {
    const IID: ::windows_core::GUID =
        ::windows_core::GUID::from_u128(0xf0441536_afef_5222_918f_324a9b2dec75);
}
#[repr(C)]
#[doc(hidden)]
pub struct IWindowFactory_Vtbl {
    pub base__: ::windows_core::IInspectable_Vtbl,
    pub CreateInstance: unsafe extern "system" fn(
        this: *mut ::core::ffi::c_void,
        baseinterface: *mut ::core::ffi::c_void,
        innerinterface: *mut *mut ::core::ffi::c_void,
        result__: *mut *mut ::core::ffi::c_void,
    ) -> ::windows_core::HRESULT,
}
#[repr(transparent)]
#[derive(::core::cmp::PartialEq, ::core::cmp::Eq, ::core::fmt::Debug, ::core::clone::Clone)]
pub struct IWindowNative(::windows_core::IUnknown);
impl IWindowNative {
    #[doc = "Required features: `\"Windows_Win32_Foundation\"`"]
    #[cfg(feature = "Windows_Win32_Foundation")]
    pub unsafe fn WindowHandle(
        &self,
        hwnd: *mut ::windows::Win32::Foundation::HWND,
    ) -> ::windows_core::Result<()> {
        (::windows_core::Interface::vtable(self).WindowHandle)(
            ::windows_core::Interface::as_raw(self),
            hwnd,
        )
        .ok()
    }
}
::windows_core::imp::interface_hierarchy!(IWindowNative, ::windows_core::IUnknown);
unsafe impl ::windows_core::Interface for IWindowNative {
    type Vtable = IWindowNative_Vtbl;
}
unsafe impl ::windows_core::ComInterface for IWindowNative {
    const IID: ::windows_core::GUID =
        ::windows_core::GUID::from_u128(0xeecdbf0e_bae9_4cb6_a68e_9598e1cb57bb);
}
#[repr(C)]
#[doc(hidden)]
pub struct IWindowNative_Vtbl {
    pub base__: ::windows_core::IUnknown_Vtbl,
    #[cfg(feature = "Windows_Win32_Foundation")]
    pub WindowHandle: unsafe extern "system" fn(
        this: *mut ::core::ffi::c_void,
        hwnd: *mut ::windows::Win32::Foundation::HWND,
    ) -> ::windows_core::HRESULT,
    #[cfg(not(feature = "Windows_Win32_Foundation"))]
    WindowHandle: usize,
}
#[doc(hidden)]
#[repr(transparent)]
#[derive(::core::cmp::PartialEq, ::core::cmp::Eq, ::core::fmt::Debug, ::core::clone::Clone)]
pub struct IWindowSizeChangedEventArgs(::windows_core::IUnknown);
unsafe impl ::windows_core::Interface for IWindowSizeChangedEventArgs {
    type Vtable = IWindowSizeChangedEventArgs_Vtbl;
}
unsafe impl ::windows_core::ComInterface for IWindowSizeChangedEventArgs {
    const IID: ::windows_core::GUID =
        ::windows_core::GUID::from_u128(0x542f6f2c_4b64_5c72_a7a5_3a7e0664b8ff);
}
#[repr(C)]
#[doc(hidden)]
pub struct IWindowSizeChangedEventArgs_Vtbl {
    pub base__: ::windows_core::IInspectable_Vtbl,
    pub Handled: unsafe extern "system" fn(
        this: *mut ::core::ffi::c_void,
        result__: *mut bool,
    ) -> ::windows_core::HRESULT,
    pub SetHandled: unsafe extern "system" fn(
        this: *mut ::core::ffi::c_void,
        value: bool,
    ) -> ::windows_core::HRESULT,
    #[cfg(feature = "Windows_Foundation")]
    pub Size: unsafe extern "system" fn(
        this: *mut ::core::ffi::c_void,
        result__: *mut ::windows::Foundation::Size,
    ) -> ::windows_core::HRESULT,
    #[cfg(not(feature = "Windows_Foundation"))]
    Size: usize,
}
#[doc(hidden)]
#[repr(transparent)]
#[derive(::core::cmp::PartialEq, ::core::cmp::Eq, ::core::fmt::Debug, ::core::clone::Clone)]
pub struct IWindowStatics(::windows_core::IUnknown);
unsafe impl ::windows_core::Interface for IWindowStatics {
    type Vtable = IWindowStatics_Vtbl;
}
unsafe impl ::windows_core::ComInterface for IWindowStatics {
    const IID: ::windows_core::GUID =
        ::windows_core::GUID::from_u128(0x8cc985e3_a41a_5df4_b531_d3a1788d86c5);
}
#[repr(C)]
#[doc(hidden)]
pub struct IWindowStatics_Vtbl {
    pub base__: ::windows_core::IInspectable_Vtbl,
    pub Current: unsafe extern "system" fn(
        this: *mut ::core::ffi::c_void,
        result__: *mut *mut ::core::ffi::c_void,
    ) -> ::windows_core::HRESULT,
}
#[doc(hidden)]
#[repr(transparent)]
#[derive(::core::cmp::PartialEq, ::core::cmp::Eq, ::core::fmt::Debug, ::core::clone::Clone)]
pub struct IWindowVisibilityChangedEventArgs(::windows_core::IUnknown);
unsafe impl ::windows_core::Interface for IWindowVisibilityChangedEventArgs {
    type Vtable = IWindowVisibilityChangedEventArgs_Vtbl;
}
unsafe impl ::windows_core::ComInterface for IWindowVisibilityChangedEventArgs {
    const IID: ::windows_core::GUID =
        ::windows_core::GUID::from_u128(0x7bb24a6d_070c_5cb6_8e9c_547905be8265);
}
#[repr(C)]
#[doc(hidden)]
pub struct IWindowVisibilityChangedEventArgs_Vtbl {
    pub base__: ::windows_core::IInspectable_Vtbl,
    pub Handled: unsafe extern "system" fn(
        this: *mut ::core::ffi::c_void,
        result__: *mut bool,
    ) -> ::windows_core::HRESULT,
    pub SetHandled: unsafe extern "system" fn(
        this: *mut ::core::ffi::c_void,
        value: bool,
    ) -> ::windows_core::HRESULT,
    pub Visible: unsafe extern "system" fn(
        this: *mut ::core::ffi::c_void,
        result__: *mut bool,
    ) -> ::windows_core::HRESULT,
}
#[doc(hidden)]
#[repr(transparent)]
#[derive(::core::cmp::PartialEq, ::core::cmp::Eq, ::core::fmt::Debug, ::core::clone::Clone)]
pub struct IXamlResourceReferenceFailedEventArgs(::windows_core::IUnknown);
unsafe impl ::windows_core::Interface for IXamlResourceReferenceFailedEventArgs {
    type Vtable = IXamlResourceReferenceFailedEventArgs_Vtbl;
}
unsafe impl ::windows_core::ComInterface for IXamlResourceReferenceFailedEventArgs {
    const IID: ::windows_core::GUID =
        ::windows_core::GUID::from_u128(0x1b175ee6_d08b_50ff_8f89_a1ff27edef66);
}
#[repr(C)]
#[doc(hidden)]
pub struct IXamlResourceReferenceFailedEventArgs_Vtbl {
    pub base__: ::windows_core::IInspectable_Vtbl,
    pub Message: unsafe extern "system" fn(
        this: *mut ::core::ffi::c_void,
        result__: *mut ::std::mem::MaybeUninit<::windows_core::HSTRING>,
    ) -> ::windows_core::HRESULT,
}
#[doc(hidden)]
#[repr(transparent)]
#[derive(::core::cmp::PartialEq, ::core::cmp::Eq, ::core::fmt::Debug, ::core::clone::Clone)]
pub struct IXamlRoot(::windows_core::IUnknown);
unsafe impl ::windows_core::Interface for IXamlRoot {
    type Vtable = IXamlRoot_Vtbl;
}
unsafe impl ::windows_core::ComInterface for IXamlRoot {
    const IID: ::windows_core::GUID =
        ::windows_core::GUID::from_u128(0x60cb215a_ad15_520a_8b01_4416824f0441);
}
#[repr(C)]
#[doc(hidden)]
pub struct IXamlRoot_Vtbl {
    pub base__: ::windows_core::IInspectable_Vtbl,
    pub Content: unsafe extern "system" fn(
        this: *mut ::core::ffi::c_void,
        result__: *mut *mut ::core::ffi::c_void,
    ) -> ::windows_core::HRESULT,
    #[cfg(feature = "Windows_Foundation")]
    pub Size: unsafe extern "system" fn(
        this: *mut ::core::ffi::c_void,
        result__: *mut ::windows::Foundation::Size,
    ) -> ::windows_core::HRESULT,
    #[cfg(not(feature = "Windows_Foundation"))]
    Size: usize,
    pub RasterizationScale: unsafe extern "system" fn(
        this: *mut ::core::ffi::c_void,
        result__: *mut f64,
    ) -> ::windows_core::HRESULT,
    pub IsHostVisible: unsafe extern "system" fn(
        this: *mut ::core::ffi::c_void,
        result__: *mut bool,
    ) -> ::windows_core::HRESULT,
    #[cfg(feature = "Windows_Foundation")]
    pub Changed: unsafe extern "system" fn(
        this: *mut ::core::ffi::c_void,
        handler: *mut ::core::ffi::c_void,
        result__: *mut ::windows::Foundation::EventRegistrationToken,
    ) -> ::windows_core::HRESULT,
    #[cfg(not(feature = "Windows_Foundation"))]
    Changed: usize,
    #[cfg(feature = "Windows_Foundation")]
    pub RemoveChanged: unsafe extern "system" fn(
        this: *mut ::core::ffi::c_void,
        token: ::windows::Foundation::EventRegistrationToken,
    ) -> ::windows_core::HRESULT,
    #[cfg(not(feature = "Windows_Foundation"))]
    RemoveChanged: usize,
}
#[doc(hidden)]
#[repr(transparent)]
#[derive(::core::cmp::PartialEq, ::core::cmp::Eq, ::core::fmt::Debug, ::core::clone::Clone)]
pub struct IXamlRoot2(::windows_core::IUnknown);
unsafe impl ::windows_core::Interface for IXamlRoot2 {
    type Vtable = IXamlRoot2_Vtbl;
}
unsafe impl ::windows_core::ComInterface for IXamlRoot2 {
    const IID: ::windows_core::GUID =
        ::windows_core::GUID::from_u128(0xbdee0f42_71cb_50c5_829b_4614d98c5794);
}
#[repr(C)]
#[doc(hidden)]
pub struct IXamlRoot2_Vtbl {
    pub base__: ::windows_core::IInspectable_Vtbl,
    #[cfg(feature = "Microsoft_UI_Content")]
    pub ContentIslandEnvironment: unsafe extern "system" fn(
        this: *mut ::core::ffi::c_void,
        result__: *mut *mut ::core::ffi::c_void,
    ) -> ::windows_core::HRESULT,
    #[cfg(not(feature = "Microsoft_UI_Content"))]
    ContentIslandEnvironment: usize,
}
#[doc(hidden)]
#[repr(transparent)]
#[derive(::core::cmp::PartialEq, ::core::cmp::Eq, ::core::fmt::Debug, ::core::clone::Clone)]
pub struct IXamlRootChangedEventArgs(::windows_core::IUnknown);
unsafe impl ::windows_core::Interface for IXamlRootChangedEventArgs {
    type Vtable = IXamlRootChangedEventArgs_Vtbl;
}
unsafe impl ::windows_core::ComInterface for IXamlRootChangedEventArgs {
    const IID: ::windows_core::GUID =
        ::windows_core::GUID::from_u128(0x61d2c719_f8a1_515a_902c_cfa498ba7a7f);
}
#[repr(C)]
#[doc(hidden)]
pub struct IXamlRootChangedEventArgs_Vtbl {
    pub base__: ::windows_core::IInspectable_Vtbl,
}
#[repr(transparent)]
#[derive(::core::cmp::PartialEq, ::core::cmp::Eq, ::core::fmt::Debug, ::core::clone::Clone)]
pub struct IXamlServiceProvider(::windows_core::IUnknown);
impl IXamlServiceProvider {
    #[doc = "Required features: `\"Windows_UI_Xaml_Interop\"`"]
    #[cfg(feature = "Windows_UI_Xaml_Interop")]
    pub fn GetService<P0>(&self, r#type: P0) -> ::windows_core::Result<::windows_core::IInspectable>
    where
        P0: ::windows_core::IntoParam<super::super::super::Windows::UI::Xaml::Interop::TypeName>,
    {
        let this = self;
        unsafe {
            let mut result__ = ::std::mem::zeroed();
            (::windows_core::Interface::vtable(this).GetService)(
                ::windows_core::Interface::as_raw(this),
                r#type.into_param().abi(),
                &mut result__,
            )
            .from_abi(result__)
        }
    }
}
::windows_core::imp::interface_hierarchy!(
    IXamlServiceProvider,
    ::windows_core::IUnknown,
    ::windows_core::IInspectable
);
impl ::windows_core::RuntimeType for IXamlServiceProvider {
    const SIGNATURE: ::windows_core::imp::ConstBuffer =
        ::windows_core::imp::ConstBuffer::for_interface::<Self>();
}
unsafe impl ::windows_core::Interface for IXamlServiceProvider {
    type Vtable = IXamlServiceProvider_Vtbl;
}
unsafe impl ::windows_core::ComInterface for IXamlServiceProvider {
    const IID: ::windows_core::GUID =
        ::windows_core::GUID::from_u128(0x68b3a2df_8173_539f_b524_c8a2348f5afb);
}
#[repr(C)]
#[doc(hidden)]
pub struct IXamlServiceProvider_Vtbl {
    pub base__: ::windows_core::IInspectable_Vtbl,
    #[cfg(feature = "Windows_UI_Xaml_Interop")]
    pub GetService: unsafe extern "system" fn(
        this: *mut ::core::ffi::c_void,
        r#type: ::std::mem::MaybeUninit<super::super::super::Windows::UI::Xaml::Interop::TypeName>,
        result__: *mut *mut ::core::ffi::c_void,
    ) -> ::windows_core::HRESULT,
    #[cfg(not(feature = "Windows_UI_Xaml_Interop"))]
    GetService: usize,
}
#[repr(transparent)]
#[derive(::core::cmp::PartialEq, ::core::cmp::Eq, ::core::fmt::Debug, ::core::clone::Clone)]
pub struct AdaptiveTrigger(::windows_core::IUnknown);
impl AdaptiveTrigger {
    pub fn MinWindowWidth(&self) -> ::windows_core::Result<f64> {
        let this = self;
        unsafe {
            let mut result__ = ::std::mem::zeroed();
            (::windows_core::Interface::vtable(this).MinWindowWidth)(
                ::windows_core::Interface::as_raw(this),
                &mut result__,
            )
            .from_abi(result__)
        }
    }
    pub fn SetMinWindowWidth(&self, value: f64) -> ::windows_core::Result<()> {
        let this = self;
        unsafe {
            (::windows_core::Interface::vtable(this).SetMinWindowWidth)(
                ::windows_core::Interface::as_raw(this),
                value,
            )
            .ok()
        }
    }
    pub fn MinWindowHeight(&self) -> ::windows_core::Result<f64> {
        let this = self;
        unsafe {
            let mut result__ = ::std::mem::zeroed();
            (::windows_core::Interface::vtable(this).MinWindowHeight)(
                ::windows_core::Interface::as_raw(this),
                &mut result__,
            )
            .from_abi(result__)
        }
    }
    pub fn SetMinWindowHeight(&self, value: f64) -> ::windows_core::Result<()> {
        let this = self;
        unsafe {
            (::windows_core::Interface::vtable(this).SetMinWindowHeight)(
                ::windows_core::Interface::as_raw(this),
                value,
            )
            .ok()
        }
    }
    pub unsafe fn CreateInstance<P0>(
        baseinterface: P0,
        innerinterface: &mut ::core::option::Option<::windows_core::IInspectable>,
    ) -> ::windows_core::Result<AdaptiveTrigger>
    where
        P0: ::windows_core::IntoParam<::windows_core::IInspectable>,
    {
        Self::IAdaptiveTriggerFactory(|this| unsafe {
            let mut result__ = ::std::mem::zeroed();
            (::windows_core::Interface::vtable(this).CreateInstance)(
                ::windows_core::Interface::as_raw(this),
                baseinterface.into_param().abi(),
                innerinterface as *mut _ as _,
                &mut result__,
            )
            .from_abi(result__)
        })
    }
    pub fn MinWindowWidthProperty() -> ::windows_core::Result<DependencyProperty> {
        Self::IAdaptiveTriggerStatics(|this| unsafe {
            let mut result__ = ::std::mem::zeroed();
            (::windows_core::Interface::vtable(this).MinWindowWidthProperty)(
                ::windows_core::Interface::as_raw(this),
                &mut result__,
            )
            .from_abi(result__)
        })
    }
    pub fn MinWindowHeightProperty() -> ::windows_core::Result<DependencyProperty> {
        Self::IAdaptiveTriggerStatics(|this| unsafe {
            let mut result__ = ::std::mem::zeroed();
            (::windows_core::Interface::vtable(this).MinWindowHeightProperty)(
                ::windows_core::Interface::as_raw(this),
                &mut result__,
            )
            .from_abi(result__)
        })
    }
    pub fn GetValue<P0>(&self, dp: P0) -> ::windows_core::Result<::windows_core::IInspectable>
    where
        P0: ::windows_core::IntoParam<DependencyProperty>,
    {
        let this = &::windows_core::ComInterface::cast::<IDependencyObject>(self)?;
        unsafe {
            let mut result__ = ::std::mem::zeroed();
            (::windows_core::Interface::vtable(this).GetValue)(
                ::windows_core::Interface::as_raw(this),
                dp.into_param().abi(),
                &mut result__,
            )
            .from_abi(result__)
        }
    }
    pub fn SetValue<P0, P1>(&self, dp: P0, value: P1) -> ::windows_core::Result<()>
    where
        P0: ::windows_core::IntoParam<DependencyProperty>,
        P1: ::windows_core::IntoParam<::windows_core::IInspectable>,
    {
        let this = &::windows_core::ComInterface::cast::<IDependencyObject>(self)?;
        unsafe {
            (::windows_core::Interface::vtable(this).SetValue)(
                ::windows_core::Interface::as_raw(this),
                dp.into_param().abi(),
                value.into_param().abi(),
            )
            .ok()
        }
    }
    pub fn ClearValue<P0>(&self, dp: P0) -> ::windows_core::Result<()>
    where
        P0: ::windows_core::IntoParam<DependencyProperty>,
    {
        let this = &::windows_core::ComInterface::cast::<IDependencyObject>(self)?;
        unsafe {
            (::windows_core::Interface::vtable(this).ClearValue)(
                ::windows_core::Interface::as_raw(this),
                dp.into_param().abi(),
            )
            .ok()
        }
    }
    pub fn ReadLocalValue<P0>(&self, dp: P0) -> ::windows_core::Result<::windows_core::IInspectable>
    where
        P0: ::windows_core::IntoParam<DependencyProperty>,
    {
        let this = &::windows_core::ComInterface::cast::<IDependencyObject>(self)?;
        unsafe {
            let mut result__ = ::std::mem::zeroed();
            (::windows_core::Interface::vtable(this).ReadLocalValue)(
                ::windows_core::Interface::as_raw(this),
                dp.into_param().abi(),
                &mut result__,
            )
            .from_abi(result__)
        }
    }
    pub fn GetAnimationBaseValue<P0>(
        &self,
        dp: P0,
    ) -> ::windows_core::Result<::windows_core::IInspectable>
    where
        P0: ::windows_core::IntoParam<DependencyProperty>,
    {
        let this = &::windows_core::ComInterface::cast::<IDependencyObject>(self)?;
        unsafe {
            let mut result__ = ::std::mem::zeroed();
            (::windows_core::Interface::vtable(this).GetAnimationBaseValue)(
                ::windows_core::Interface::as_raw(this),
                dp.into_param().abi(),
                &mut result__,
            )
            .from_abi(result__)
        }
    }
    pub fn RegisterPropertyChangedCallback<P0, P1>(
        &self,
        dp: P0,
        callback: P1,
    ) -> ::windows_core::Result<i64>
    where
        P0: ::windows_core::IntoParam<DependencyProperty>,
        P1: ::windows_core::IntoParam<DependencyPropertyChangedCallback>,
    {
        let this = &::windows_core::ComInterface::cast::<IDependencyObject>(self)?;
        unsafe {
            let mut result__ = ::std::mem::zeroed();
            (::windows_core::Interface::vtable(this).RegisterPropertyChangedCallback)(
                ::windows_core::Interface::as_raw(this),
                dp.into_param().abi(),
                callback.into_param().abi(),
                &mut result__,
            )
            .from_abi(result__)
        }
    }
    pub fn UnregisterPropertyChangedCallback<P0>(
        &self,
        dp: P0,
        token: i64,
    ) -> ::windows_core::Result<()>
    where
        P0: ::windows_core::IntoParam<DependencyProperty>,
    {
        let this = &::windows_core::ComInterface::cast::<IDependencyObject>(self)?;
        unsafe {
            (::windows_core::Interface::vtable(this).UnregisterPropertyChangedCallback)(
                ::windows_core::Interface::as_raw(this),
                dp.into_param().abi(),
                token,
            )
            .ok()
        }
    }
    #[doc = "Required features: `\"Windows_UI_Core\"`"]
    #[cfg(feature = "Windows_UI_Core")]
    pub fn Dispatcher(&self) -> ::windows_core::Result<::windows::UI::Core::CoreDispatcher> {
        let this = &::windows_core::ComInterface::cast::<IDependencyObject>(self)?;
        unsafe {
            let mut result__ = ::std::mem::zeroed();
            (::windows_core::Interface::vtable(this).Dispatcher)(
                ::windows_core::Interface::as_raw(this),
                &mut result__,
            )
            .from_abi(result__)
        }
    }
    #[doc = "Required features: `\"Microsoft_UI_Dispatching\"`"]
    #[cfg(feature = "Microsoft_UI_Dispatching")]
    pub fn DispatcherQueue(&self) -> ::windows_core::Result<super::Dispatching::DispatcherQueue> {
        let this = &::windows_core::ComInterface::cast::<IDependencyObject>(self)?;
        unsafe {
            let mut result__ = ::std::mem::zeroed();
            (::windows_core::Interface::vtable(this).DispatcherQueue)(
                ::windows_core::Interface::as_raw(this),
                &mut result__,
            )
            .from_abi(result__)
        }
    }
    pub fn SetActive(&self, isactive: bool) -> ::windows_core::Result<()> {
        let this = &::windows_core::ComInterface::cast::<IStateTriggerBaseProtected>(self)?;
        unsafe {
            (::windows_core::Interface::vtable(this).SetActive)(
                ::windows_core::Interface::as_raw(this),
                isactive,
            )
            .ok()
        }
    }
    #[doc(hidden)]
    pub fn IAdaptiveTriggerFactory<
        R,
        F: FnOnce(&IAdaptiveTriggerFactory) -> ::windows_core::Result<R>,
    >(
        callback: F,
    ) -> ::windows_core::Result<R> {
        static SHARED: ::windows_core::imp::FactoryCache<AdaptiveTrigger, IAdaptiveTriggerFactory> =
            ::windows_core::imp::FactoryCache::new();
        SHARED.call(callback)
    }
    #[doc(hidden)]
    pub fn IAdaptiveTriggerStatics<
        R,
        F: FnOnce(&IAdaptiveTriggerStatics) -> ::windows_core::Result<R>,
    >(
        callback: F,
    ) -> ::windows_core::Result<R> {
        static SHARED: ::windows_core::imp::FactoryCache<AdaptiveTrigger, IAdaptiveTriggerStatics> =
            ::windows_core::imp::FactoryCache::new();
        SHARED.call(callback)
    }
}
impl ::windows_core::RuntimeType for AdaptiveTrigger {
    const SIGNATURE: ::windows_core::imp::ConstBuffer =
        ::windows_core::imp::ConstBuffer::for_class::<Self>();
}
unsafe impl ::windows_core::Interface for AdaptiveTrigger {
    type Vtable = IAdaptiveTrigger_Vtbl;
}
unsafe impl ::windows_core::ComInterface for AdaptiveTrigger {
    const IID: ::windows_core::GUID = <IAdaptiveTrigger as ::windows_core::ComInterface>::IID;
}
impl ::windows_core::RuntimeName for AdaptiveTrigger {
    const NAME: &'static str = "Microsoft.UI.Xaml.AdaptiveTrigger";
}
::windows_core::imp::interface_hierarchy!(
    AdaptiveTrigger,
    ::windows_core::IUnknown,
    ::windows_core::IInspectable
);
impl ::windows_core::CanTryInto<StateTriggerBase> for AdaptiveTrigger {}
impl ::windows_core::CanTryInto<DependencyObject> for AdaptiveTrigger {}
unsafe impl ::core::marker::Send for AdaptiveTrigger {}
unsafe impl ::core::marker::Sync for AdaptiveTrigger {}
#[repr(transparent)]
#[derive(::core::cmp::PartialEq, ::core::cmp::Eq, ::core::fmt::Debug, ::core::clone::Clone)]
pub struct Application(::windows_core::IUnknown);
impl Application {
    pub fn Resources(&self) -> ::windows_core::Result<ResourceDictionary> {
        let this = self;
        unsafe {
            let mut result__ = ::std::mem::zeroed();
            (::windows_core::Interface::vtable(this).Resources)(
                ::windows_core::Interface::as_raw(this),
                &mut result__,
            )
            .from_abi(result__)
        }
    }
    pub fn SetResources<P0>(&self, value: P0) -> ::windows_core::Result<()>
    where
        P0: ::windows_core::TryIntoParam<ResourceDictionary>,
    {
        let this = self;
        unsafe {
            (::windows_core::Interface::vtable(this).SetResources)(
                ::windows_core::Interface::as_raw(this),
                value.try_into_param()?.abi(),
            )
            .ok()
        }
    }
    pub fn DebugSettings(&self) -> ::windows_core::Result<DebugSettings> {
        let this = self;
        unsafe {
            let mut result__ = ::std::mem::zeroed();
            (::windows_core::Interface::vtable(this).DebugSettings)(
                ::windows_core::Interface::as_raw(this),
                &mut result__,
            )
            .from_abi(result__)
        }
    }
    pub fn RequestedTheme(&self) -> ::windows_core::Result<ApplicationTheme> {
        let this = self;
        unsafe {
            let mut result__ = ::std::mem::zeroed();
            (::windows_core::Interface::vtable(this).RequestedTheme)(
                ::windows_core::Interface::as_raw(this),
                &mut result__,
            )
            .from_abi(result__)
        }
    }
    pub fn SetRequestedTheme(&self, value: ApplicationTheme) -> ::windows_core::Result<()> {
        let this = self;
        unsafe {
            (::windows_core::Interface::vtable(this).SetRequestedTheme)(
                ::windows_core::Interface::as_raw(this),
                value,
            )
            .ok()
        }
    }
    pub fn FocusVisualKind(&self) -> ::windows_core::Result<FocusVisualKind> {
        let this = self;
        unsafe {
            let mut result__ = ::std::mem::zeroed();
            (::windows_core::Interface::vtable(this).FocusVisualKind)(
                ::windows_core::Interface::as_raw(this),
                &mut result__,
            )
            .from_abi(result__)
        }
    }
    pub fn SetFocusVisualKind(&self, value: FocusVisualKind) -> ::windows_core::Result<()> {
        let this = self;
        unsafe {
            (::windows_core::Interface::vtable(this).SetFocusVisualKind)(
                ::windows_core::Interface::as_raw(this),
                value,
            )
            .ok()
        }
    }
    pub fn HighContrastAdjustment(
        &self,
    ) -> ::windows_core::Result<ApplicationHighContrastAdjustment> {
        let this = self;
        unsafe {
            let mut result__ = ::std::mem::zeroed();
            (::windows_core::Interface::vtable(this).HighContrastAdjustment)(
                ::windows_core::Interface::as_raw(this),
                &mut result__,
            )
            .from_abi(result__)
        }
    }
    pub fn SetHighContrastAdjustment(
        &self,
        value: ApplicationHighContrastAdjustment,
    ) -> ::windows_core::Result<()> {
        let this = self;
        unsafe {
            (::windows_core::Interface::vtable(this).SetHighContrastAdjustment)(
                ::windows_core::Interface::as_raw(this),
                value,
            )
            .ok()
        }
    }
    #[doc = "Required features: `\"Windows_Foundation\"`"]
    #[cfg(feature = "Windows_Foundation")]
    pub fn UnhandledException<P0>(
        &self,
        handler: P0,
    ) -> ::windows_core::Result<::windows::Foundation::EventRegistrationToken>
    where
        P0: ::windows_core::IntoParam<UnhandledExceptionEventHandler>,
    {
        let this = self;
        unsafe {
            let mut result__ = ::std::mem::zeroed();
            (::windows_core::Interface::vtable(this).UnhandledException)(
                ::windows_core::Interface::as_raw(this),
                handler.into_param().abi(),
                &mut result__,
            )
            .from_abi(result__)
        }
    }
    #[doc = "Required features: `\"Windows_Foundation\"`"]
    #[cfg(feature = "Windows_Foundation")]
    pub fn RemoveUnhandledException(
        &self,
        token: ::windows::Foundation::EventRegistrationToken,
    ) -> ::windows_core::Result<()> {
        let this = self;
        unsafe {
            (::windows_core::Interface::vtable(this).RemoveUnhandledException)(
                ::windows_core::Interface::as_raw(this),
                token,
            )
            .ok()
        }
    }
    pub fn Exit(&self) -> ::windows_core::Result<()> {
        let this = self;
        unsafe {
            (::windows_core::Interface::vtable(this).Exit)(::windows_core::Interface::as_raw(this))
                .ok()
        }
    }
    #[doc = "Required features: `\"Windows_Foundation\"`"]
    #[cfg(feature = "Windows_Foundation")]
    pub fn ResourceManagerRequested<P0>(
        &self,
        handler: P0,
    ) -> ::windows_core::Result<::windows::Foundation::EventRegistrationToken>
    where
        P0: ::windows_core::IntoParam<
            ::windows::Foundation::TypedEventHandler<
                ::windows_core::IInspectable,
                ResourceManagerRequestedEventArgs,
            >,
        >,
    {
        let this = &::windows_core::ComInterface::cast::<IApplication2>(self)?;
        unsafe {
            let mut result__ = ::std::mem::zeroed();
            (::windows_core::Interface::vtable(this).ResourceManagerRequested)(
                ::windows_core::Interface::as_raw(this),
                handler.into_param().abi(),
                &mut result__,
            )
            .from_abi(result__)
        }
    }
    #[doc = "Required features: `\"Windows_Foundation\"`"]
    #[cfg(feature = "Windows_Foundation")]
    pub fn RemoveResourceManagerRequested(
        &self,
        token: ::windows::Foundation::EventRegistrationToken,
    ) -> ::windows_core::Result<()> {
        let this = &::windows_core::ComInterface::cast::<IApplication2>(self)?;
        unsafe {
            (::windows_core::Interface::vtable(this).RemoveResourceManagerRequested)(
                ::windows_core::Interface::as_raw(this),
                token,
            )
            .ok()
        }
    }
    pub unsafe fn CreateInstance<P0>(
        baseinterface: P0,
        innerinterface: &mut ::core::option::Option<::windows_core::IInspectable>,
    ) -> ::windows_core::Result<Application>
    where
        P0: ::windows_core::IntoParam<::windows_core::IInspectable>,
    {
        Self::IApplicationFactory(|this| unsafe {
            let mut result__ = ::std::mem::zeroed();
            (::windows_core::Interface::vtable(this).CreateInstance)(
                ::windows_core::Interface::as_raw(this),
                baseinterface.into_param().abi(),
                innerinterface as *mut _ as _,
                &mut result__,
            )
            .from_abi(result__)
        })
    }
    pub fn OnLaunched<P0>(&self, args: P0) -> ::windows_core::Result<()>
    where
        P0: ::windows_core::IntoParam<LaunchActivatedEventArgs>,
    {
        let this = &::windows_core::ComInterface::cast::<IApplicationOverrides>(self)?;
        unsafe {
            (::windows_core::Interface::vtable(this).OnLaunched)(
                ::windows_core::Interface::as_raw(this),
                args.into_param().abi(),
            )
            .ok()
        }
    }
    pub fn Current() -> ::windows_core::Result<Application> {
        Self::IApplicationStatics(|this| unsafe {
            let mut result__ = ::std::mem::zeroed();
            (::windows_core::Interface::vtable(this).Current)(
                ::windows_core::Interface::as_raw(this),
                &mut result__,
            )
            .from_abi(result__)
        })
    }
    pub fn Start<P0>(callback: P0) -> ::windows_core::Result<()>
    where
        P0: ::windows_core::IntoParam<ApplicationInitializationCallback>,
    {
        Self::IApplicationStatics(|this| unsafe {
            (::windows_core::Interface::vtable(this).Start)(
                ::windows_core::Interface::as_raw(this),
                callback.into_param().abi(),
            )
            .ok()
        })
    }
    #[doc = "Required features: `\"Windows_Foundation\"`"]
    #[cfg(feature = "Windows_Foundation")]
    pub fn LoadComponent<P0, P1>(component: P0, resourcelocator: P1) -> ::windows_core::Result<()>
    where
        P0: ::windows_core::IntoParam<::windows_core::IInspectable>,
        P1: ::windows_core::IntoParam<::windows::Foundation::Uri>,
    {
        Self::IApplicationStatics(|this| unsafe {
            (::windows_core::Interface::vtable(this).LoadComponent)(
                ::windows_core::Interface::as_raw(this),
                component.into_param().abi(),
                resourcelocator.into_param().abi(),
            )
            .ok()
        })
    }
    #[doc = "Required features: `\"Microsoft_UI_Xaml_Controls_Primitives\"`, `\"Windows_Foundation\"`"]
    #[cfg(all(
        feature = "Microsoft_UI_Xaml_Controls_Primitives",
        feature = "Windows_Foundation"
    ))]
    pub fn LoadComponentWithResourceLocation<P0, P1>(
        component: P0,
        resourcelocator: P1,
        componentresourcelocation: Controls::Primitives::ComponentResourceLocation,
    ) -> ::windows_core::Result<()>
    where
        P0: ::windows_core::IntoParam<::windows_core::IInspectable>,
        P1: ::windows_core::IntoParam<::windows::Foundation::Uri>,
    {
        Self::IApplicationStatics(|this| unsafe {
            (::windows_core::Interface::vtable(this).LoadComponentWithResourceLocation)(
                ::windows_core::Interface::as_raw(this),
                component.into_param().abi(),
                resourcelocator.into_param().abi(),
                componentresourcelocation,
            )
            .ok()
        })
    }
    #[doc(hidden)]
    pub fn IApplicationFactory<R, F: FnOnce(&IApplicationFactory) -> ::windows_core::Result<R>>(
        callback: F,
    ) -> ::windows_core::Result<R> {
        static SHARED: ::windows_core::imp::FactoryCache<Application, IApplicationFactory> =
            ::windows_core::imp::FactoryCache::new();
        SHARED.call(callback)
    }
    #[doc(hidden)]
    pub fn IApplicationStatics<R, F: FnOnce(&IApplicationStatics) -> ::windows_core::Result<R>>(
        callback: F,
    ) -> ::windows_core::Result<R> {
        static SHARED: ::windows_core::imp::FactoryCache<Application, IApplicationStatics> =
            ::windows_core::imp::FactoryCache::new();
        SHARED.call(callback)
    }
}
impl ::windows_core::RuntimeType for Application {
    const SIGNATURE: ::windows_core::imp::ConstBuffer =
        ::windows_core::imp::ConstBuffer::for_class::<Self>();
}
unsafe impl ::windows_core::Interface for Application {
    type Vtable = IApplication_Vtbl;
}
unsafe impl ::windows_core::ComInterface for Application {
    const IID: ::windows_core::GUID = <IApplication as ::windows_core::ComInterface>::IID;
}
impl ::windows_core::RuntimeName for Application {
    const NAME: &'static str = "Microsoft.UI.Xaml.Application";
}
::windows_core::imp::interface_hierarchy!(
    Application,
    ::windows_core::IUnknown,
    ::windows_core::IInspectable
);
unsafe impl ::core::marker::Send for Application {}
unsafe impl ::core::marker::Sync for Application {}
#[repr(transparent)]
#[derive(::core::cmp::PartialEq, ::core::cmp::Eq, ::core::fmt::Debug, ::core::clone::Clone)]
pub struct ApplicationInitializationCallbackParams(::windows_core::IUnknown);
impl ApplicationInitializationCallbackParams {}
impl ::windows_core::RuntimeType for ApplicationInitializationCallbackParams {
    const SIGNATURE: ::windows_core::imp::ConstBuffer =
        ::windows_core::imp::ConstBuffer::for_class::<Self>();
}
unsafe impl ::windows_core::Interface for ApplicationInitializationCallbackParams {
    type Vtable = IApplicationInitializationCallbackParams_Vtbl;
}
unsafe impl ::windows_core::ComInterface for ApplicationInitializationCallbackParams {
    const IID: ::windows_core::GUID =
        <IApplicationInitializationCallbackParams as ::windows_core::ComInterface>::IID;
}
impl ::windows_core::RuntimeName for ApplicationInitializationCallbackParams {
    const NAME: &'static str = "Microsoft.UI.Xaml.ApplicationInitializationCallbackParams";
}
::windows_core::imp::interface_hierarchy!(
    ApplicationInitializationCallbackParams,
    ::windows_core::IUnknown,
    ::windows_core::IInspectable
);
unsafe impl ::core::marker::Send for ApplicationInitializationCallbackParams {}
unsafe impl ::core::marker::Sync for ApplicationInitializationCallbackParams {}
#[repr(transparent)]
#[derive(::core::cmp::PartialEq, ::core::cmp::Eq, ::core::fmt::Debug, ::core::clone::Clone)]
pub struct BindingFailedEventArgs(::windows_core::IUnknown);
impl BindingFailedEventArgs {
    pub fn Message(&self) -> ::windows_core::Result<::windows_core::HSTRING> {
        let this = self;
        unsafe {
            let mut result__ = ::std::mem::zeroed();
            (::windows_core::Interface::vtable(this).Message)(
                ::windows_core::Interface::as_raw(this),
                &mut result__,
            )
            .from_abi(result__)
        }
    }
}
impl ::windows_core::RuntimeType for BindingFailedEventArgs {
    const SIGNATURE: ::windows_core::imp::ConstBuffer =
        ::windows_core::imp::ConstBuffer::for_class::<Self>();
}
unsafe impl ::windows_core::Interface for BindingFailedEventArgs {
    type Vtable = IBindingFailedEventArgs_Vtbl;
}
unsafe impl ::windows_core::ComInterface for BindingFailedEventArgs {
    const IID: ::windows_core::GUID =
        <IBindingFailedEventArgs as ::windows_core::ComInterface>::IID;
}
impl ::windows_core::RuntimeName for BindingFailedEventArgs {
    const NAME: &'static str = "Microsoft.UI.Xaml.BindingFailedEventArgs";
}
::windows_core::imp::interface_hierarchy!(
    BindingFailedEventArgs,
    ::windows_core::IUnknown,
    ::windows_core::IInspectable
);
unsafe impl ::core::marker::Send for BindingFailedEventArgs {}
unsafe impl ::core::marker::Sync for BindingFailedEventArgs {}
#[repr(transparent)]
#[derive(::core::cmp::PartialEq, ::core::cmp::Eq, ::core::fmt::Debug, ::core::clone::Clone)]
pub struct BringIntoViewOptions(::windows_core::IUnknown);
impl BringIntoViewOptions {
    pub fn new() -> ::windows_core::Result<Self> {
        Self::IActivationFactory(|f| f.ActivateInstance::<Self>())
    }
    fn IActivationFactory<
        R,
        F: FnOnce(&::windows_core::imp::IGenericFactory) -> ::windows_core::Result<R>,
    >(
        callback: F,
    ) -> ::windows_core::Result<R> {
        static SHARED: ::windows_core::imp::FactoryCache<
            BringIntoViewOptions,
            ::windows_core::imp::IGenericFactory,
        > = ::windows_core::imp::FactoryCache::new();
        SHARED.call(callback)
    }
    pub fn AnimationDesired(&self) -> ::windows_core::Result<bool> {
        let this = self;
        unsafe {
            let mut result__ = ::std::mem::zeroed();
            (::windows_core::Interface::vtable(this).AnimationDesired)(
                ::windows_core::Interface::as_raw(this),
                &mut result__,
            )
            .from_abi(result__)
        }
    }
    pub fn SetAnimationDesired(&self, value: bool) -> ::windows_core::Result<()> {
        let this = self;
        unsafe {
            (::windows_core::Interface::vtable(this).SetAnimationDesired)(
                ::windows_core::Interface::as_raw(this),
                value,
            )
            .ok()
        }
    }
    #[doc = "Required features: `\"Windows_Foundation\"`"]
    #[cfg(feature = "Windows_Foundation")]
    pub fn TargetRect(
        &self,
    ) -> ::windows_core::Result<::windows::Foundation::IReference<::windows::Foundation::Rect>>
    {
        let this = self;
        unsafe {
            let mut result__ = ::std::mem::zeroed();
            (::windows_core::Interface::vtable(this).TargetRect)(
                ::windows_core::Interface::as_raw(this),
                &mut result__,
            )
            .from_abi(result__)
        }
    }
    #[doc = "Required features: `\"Windows_Foundation\"`"]
    #[cfg(feature = "Windows_Foundation")]
    pub fn SetTargetRect<P0>(&self, value: P0) -> ::windows_core::Result<()>
    where
        P0: ::windows_core::TryIntoParam<
            ::windows::Foundation::IReference<::windows::Foundation::Rect>,
        >,
    {
        let this = self;
        unsafe {
            (::windows_core::Interface::vtable(this).SetTargetRect)(
                ::windows_core::Interface::as_raw(this),
                value.try_into_param()?.abi(),
            )
            .ok()
        }
    }
    pub fn HorizontalAlignmentRatio(&self) -> ::windows_core::Result<f64> {
        let this = self;
        unsafe {
            let mut result__ = ::std::mem::zeroed();
            (::windows_core::Interface::vtable(this).HorizontalAlignmentRatio)(
                ::windows_core::Interface::as_raw(this),
                &mut result__,
            )
            .from_abi(result__)
        }
    }
    pub fn SetHorizontalAlignmentRatio(&self, value: f64) -> ::windows_core::Result<()> {
        let this = self;
        unsafe {
            (::windows_core::Interface::vtable(this).SetHorizontalAlignmentRatio)(
                ::windows_core::Interface::as_raw(this),
                value,
            )
            .ok()
        }
    }
    pub fn VerticalAlignmentRatio(&self) -> ::windows_core::Result<f64> {
        let this = self;
        unsafe {
            let mut result__ = ::std::mem::zeroed();
            (::windows_core::Interface::vtable(this).VerticalAlignmentRatio)(
                ::windows_core::Interface::as_raw(this),
                &mut result__,
            )
            .from_abi(result__)
        }
    }
    pub fn SetVerticalAlignmentRatio(&self, value: f64) -> ::windows_core::Result<()> {
        let this = self;
        unsafe {
            (::windows_core::Interface::vtable(this).SetVerticalAlignmentRatio)(
                ::windows_core::Interface::as_raw(this),
                value,
            )
            .ok()
        }
    }
    pub fn HorizontalOffset(&self) -> ::windows_core::Result<f64> {
        let this = self;
        unsafe {
            let mut result__ = ::std::mem::zeroed();
            (::windows_core::Interface::vtable(this).HorizontalOffset)(
                ::windows_core::Interface::as_raw(this),
                &mut result__,
            )
            .from_abi(result__)
        }
    }
    pub fn SetHorizontalOffset(&self, value: f64) -> ::windows_core::Result<()> {
        let this = self;
        unsafe {
            (::windows_core::Interface::vtable(this).SetHorizontalOffset)(
                ::windows_core::Interface::as_raw(this),
                value,
            )
            .ok()
        }
    }
    pub fn VerticalOffset(&self) -> ::windows_core::Result<f64> {
        let this = self;
        unsafe {
            let mut result__ = ::std::mem::zeroed();
            (::windows_core::Interface::vtable(this).VerticalOffset)(
                ::windows_core::Interface::as_raw(this),
                &mut result__,
            )
            .from_abi(result__)
        }
    }
    pub fn SetVerticalOffset(&self, value: f64) -> ::windows_core::Result<()> {
        let this = self;
        unsafe {
            (::windows_core::Interface::vtable(this).SetVerticalOffset)(
                ::windows_core::Interface::as_raw(this),
                value,
            )
            .ok()
        }
    }
}
impl ::windows_core::RuntimeType for BringIntoViewOptions {
    const SIGNATURE: ::windows_core::imp::ConstBuffer =
        ::windows_core::imp::ConstBuffer::for_class::<Self>();
}
unsafe impl ::windows_core::Interface for BringIntoViewOptions {
    type Vtable = IBringIntoViewOptions_Vtbl;
}
unsafe impl ::windows_core::ComInterface for BringIntoViewOptions {
    const IID: ::windows_core::GUID = <IBringIntoViewOptions as ::windows_core::ComInterface>::IID;
}
impl ::windows_core::RuntimeName for BringIntoViewOptions {
    const NAME: &'static str = "Microsoft.UI.Xaml.BringIntoViewOptions";
}
::windows_core::imp::interface_hierarchy!(
    BringIntoViewOptions,
    ::windows_core::IUnknown,
    ::windows_core::IInspectable
);
unsafe impl ::core::marker::Send for BringIntoViewOptions {}
unsafe impl ::core::marker::Sync for BringIntoViewOptions {}
#[repr(transparent)]
#[derive(::core::cmp::PartialEq, ::core::cmp::Eq, ::core::fmt::Debug, ::core::clone::Clone)]
pub struct BringIntoViewRequestedEventArgs(::windows_core::IUnknown);
impl BringIntoViewRequestedEventArgs {
    pub fn TargetElement(&self) -> ::windows_core::Result<UIElement> {
        let this = self;
        unsafe {
            let mut result__ = ::std::mem::zeroed();
            (::windows_core::Interface::vtable(this).TargetElement)(
                ::windows_core::Interface::as_raw(this),
                &mut result__,
            )
            .from_abi(result__)
        }
    }
    pub fn SetTargetElement<P0>(&self, value: P0) -> ::windows_core::Result<()>
    where
        P0: ::windows_core::TryIntoParam<UIElement>,
    {
        let this = self;
        unsafe {
            (::windows_core::Interface::vtable(this).SetTargetElement)(
                ::windows_core::Interface::as_raw(this),
                value.try_into_param()?.abi(),
            )
            .ok()
        }
    }
    pub fn AnimationDesired(&self) -> ::windows_core::Result<bool> {
        let this = self;
        unsafe {
            let mut result__ = ::std::mem::zeroed();
            (::windows_core::Interface::vtable(this).AnimationDesired)(
                ::windows_core::Interface::as_raw(this),
                &mut result__,
            )
            .from_abi(result__)
        }
    }
    pub fn SetAnimationDesired(&self, value: bool) -> ::windows_core::Result<()> {
        let this = self;
        unsafe {
            (::windows_core::Interface::vtable(this).SetAnimationDesired)(
                ::windows_core::Interface::as_raw(this),
                value,
            )
            .ok()
        }
    }
    #[doc = "Required features: `\"Windows_Foundation\"`"]
    #[cfg(feature = "Windows_Foundation")]
    pub fn TargetRect(&self) -> ::windows_core::Result<::windows::Foundation::Rect> {
        let this = self;
        unsafe {
            let mut result__ = ::std::mem::zeroed();
            (::windows_core::Interface::vtable(this).TargetRect)(
                ::windows_core::Interface::as_raw(this),
                &mut result__,
            )
            .from_abi(result__)
        }
    }
    #[doc = "Required features: `\"Windows_Foundation\"`"]
    #[cfg(feature = "Windows_Foundation")]
    pub fn SetTargetRect(&self, value: ::windows::Foundation::Rect) -> ::windows_core::Result<()> {
        let this = self;
        unsafe {
            (::windows_core::Interface::vtable(this).SetTargetRect)(
                ::windows_core::Interface::as_raw(this),
                value,
            )
            .ok()
        }
    }
    pub fn HorizontalAlignmentRatio(&self) -> ::windows_core::Result<f64> {
        let this = self;
        unsafe {
            let mut result__ = ::std::mem::zeroed();
            (::windows_core::Interface::vtable(this).HorizontalAlignmentRatio)(
                ::windows_core::Interface::as_raw(this),
                &mut result__,
            )
            .from_abi(result__)
        }
    }
    pub fn VerticalAlignmentRatio(&self) -> ::windows_core::Result<f64> {
        let this = self;
        unsafe {
            let mut result__ = ::std::mem::zeroed();
            (::windows_core::Interface::vtable(this).VerticalAlignmentRatio)(
                ::windows_core::Interface::as_raw(this),
                &mut result__,
            )
            .from_abi(result__)
        }
    }
    pub fn HorizontalOffset(&self) -> ::windows_core::Result<f64> {
        let this = self;
        unsafe {
            let mut result__ = ::std::mem::zeroed();
            (::windows_core::Interface::vtable(this).HorizontalOffset)(
                ::windows_core::Interface::as_raw(this),
                &mut result__,
            )
            .from_abi(result__)
        }
    }
    pub fn SetHorizontalOffset(&self, value: f64) -> ::windows_core::Result<()> {
        let this = self;
        unsafe {
            (::windows_core::Interface::vtable(this).SetHorizontalOffset)(
                ::windows_core::Interface::as_raw(this),
                value,
            )
            .ok()
        }
    }
    pub fn VerticalOffset(&self) -> ::windows_core::Result<f64> {
        let this = self;
        unsafe {
            let mut result__ = ::std::mem::zeroed();
            (::windows_core::Interface::vtable(this).VerticalOffset)(
                ::windows_core::Interface::as_raw(this),
                &mut result__,
            )
            .from_abi(result__)
        }
    }
    pub fn SetVerticalOffset(&self, value: f64) -> ::windows_core::Result<()> {
        let this = self;
        unsafe {
            (::windows_core::Interface::vtable(this).SetVerticalOffset)(
                ::windows_core::Interface::as_raw(this),
                value,
            )
            .ok()
        }
    }
    pub fn Handled(&self) -> ::windows_core::Result<bool> {
        let this = self;
        unsafe {
            let mut result__ = ::std::mem::zeroed();
            (::windows_core::Interface::vtable(this).Handled)(
                ::windows_core::Interface::as_raw(this),
                &mut result__,
            )
            .from_abi(result__)
        }
    }
    pub fn SetHandled(&self, value: bool) -> ::windows_core::Result<()> {
        let this = self;
        unsafe {
            (::windows_core::Interface::vtable(this).SetHandled)(
                ::windows_core::Interface::as_raw(this),
                value,
            )
            .ok()
        }
    }
    pub fn OriginalSource(&self) -> ::windows_core::Result<::windows_core::IInspectable> {
        let this = &::windows_core::ComInterface::cast::<IRoutedEventArgs>(self)?;
        unsafe {
            let mut result__ = ::std::mem::zeroed();
            (::windows_core::Interface::vtable(this).OriginalSource)(
                ::windows_core::Interface::as_raw(this),
                &mut result__,
            )
            .from_abi(result__)
        }
    }
}
impl ::windows_core::RuntimeType for BringIntoViewRequestedEventArgs {
    const SIGNATURE: ::windows_core::imp::ConstBuffer =
        ::windows_core::imp::ConstBuffer::for_class::<Self>();
}
unsafe impl ::windows_core::Interface for BringIntoViewRequestedEventArgs {
    type Vtable = IBringIntoViewRequestedEventArgs_Vtbl;
}
unsafe impl ::windows_core::ComInterface for BringIntoViewRequestedEventArgs {
    const IID: ::windows_core::GUID =
        <IBringIntoViewRequestedEventArgs as ::windows_core::ComInterface>::IID;
}
impl ::windows_core::RuntimeName for BringIntoViewRequestedEventArgs {
    const NAME: &'static str = "Microsoft.UI.Xaml.BringIntoViewRequestedEventArgs";
}
::windows_core::imp::interface_hierarchy!(
    BringIntoViewRequestedEventArgs,
    ::windows_core::IUnknown,
    ::windows_core::IInspectable
);
impl ::windows_core::CanTryInto<RoutedEventArgs> for BringIntoViewRequestedEventArgs {}
unsafe impl ::core::marker::Send for BringIntoViewRequestedEventArgs {}
unsafe impl ::core::marker::Sync for BringIntoViewRequestedEventArgs {}
#[repr(transparent)]
#[derive(::core::cmp::PartialEq, ::core::cmp::Eq, ::core::fmt::Debug, ::core::clone::Clone)]
pub struct BrushTransition(::windows_core::IUnknown);
impl BrushTransition {
    #[doc = "Required features: `\"Windows_Foundation\"`"]
    #[cfg(feature = "Windows_Foundation")]
    pub fn Duration(&self) -> ::windows_core::Result<::windows::Foundation::TimeSpan> {
        let this = self;
        unsafe {
            let mut result__ = ::std::mem::zeroed();
            (::windows_core::Interface::vtable(this).Duration)(
                ::windows_core::Interface::as_raw(this),
                &mut result__,
            )
            .from_abi(result__)
        }
    }
    #[doc = "Required features: `\"Windows_Foundation\"`"]
    #[cfg(feature = "Windows_Foundation")]
    pub fn SetDuration(
        &self,
        value: ::windows::Foundation::TimeSpan,
    ) -> ::windows_core::Result<()> {
        let this = self;
        unsafe {
            (::windows_core::Interface::vtable(this).SetDuration)(
                ::windows_core::Interface::as_raw(this),
                value,
            )
            .ok()
        }
    }
    pub unsafe fn CreateInstance<P0>(
        baseinterface: P0,
        innerinterface: &mut ::core::option::Option<::windows_core::IInspectable>,
    ) -> ::windows_core::Result<BrushTransition>
    where
        P0: ::windows_core::IntoParam<::windows_core::IInspectable>,
    {
        Self::IBrushTransitionFactory(|this| unsafe {
            let mut result__ = ::std::mem::zeroed();
            (::windows_core::Interface::vtable(this).CreateInstance)(
                ::windows_core::Interface::as_raw(this),
                baseinterface.into_param().abi(),
                innerinterface as *mut _ as _,
                &mut result__,
            )
            .from_abi(result__)
        })
    }
    #[doc(hidden)]
    pub fn IBrushTransitionFactory<
        R,
        F: FnOnce(&IBrushTransitionFactory) -> ::windows_core::Result<R>,
    >(
        callback: F,
    ) -> ::windows_core::Result<R> {
        static SHARED: ::windows_core::imp::FactoryCache<BrushTransition, IBrushTransitionFactory> =
            ::windows_core::imp::FactoryCache::new();
        SHARED.call(callback)
    }
}
impl ::windows_core::RuntimeType for BrushTransition {
    const SIGNATURE: ::windows_core::imp::ConstBuffer =
        ::windows_core::imp::ConstBuffer::for_class::<Self>();
}
unsafe impl ::windows_core::Interface for BrushTransition {
    type Vtable = IBrushTransition_Vtbl;
}
unsafe impl ::windows_core::ComInterface for BrushTransition {
    const IID: ::windows_core::GUID = <IBrushTransition as ::windows_core::ComInterface>::IID;
}
impl ::windows_core::RuntimeName for BrushTransition {
    const NAME: &'static str = "Microsoft.UI.Xaml.BrushTransition";
}
::windows_core::imp::interface_hierarchy!(
    BrushTransition,
    ::windows_core::IUnknown,
    ::windows_core::IInspectable
);
unsafe impl ::core::marker::Send for BrushTransition {}
unsafe impl ::core::marker::Sync for BrushTransition {}
#[repr(transparent)]
#[derive(::core::cmp::PartialEq, ::core::cmp::Eq, ::core::fmt::Debug, ::core::clone::Clone)]
pub struct ColorPaletteResources(::windows_core::IUnknown);
impl ColorPaletteResources {
    #[doc = "Required features: `\"Windows_Foundation\"`, `\"Windows_UI\"`"]
    #[cfg(all(feature = "Windows_Foundation", feature = "Windows_UI"))]
    pub fn AltHigh(
        &self,
    ) -> ::windows_core::Result<::windows::Foundation::IReference<::windows::UI::Color>> {
        let this = self;
        unsafe {
            let mut result__ = ::std::mem::zeroed();
            (::windows_core::Interface::vtable(this).AltHigh)(
                ::windows_core::Interface::as_raw(this),
                &mut result__,
            )
            .from_abi(result__)
        }
    }
    #[doc = "Required features: `\"Windows_Foundation\"`, `\"Windows_UI\"`"]
    #[cfg(all(feature = "Windows_Foundation", feature = "Windows_UI"))]
    pub fn SetAltHigh<P0>(&self, value: P0) -> ::windows_core::Result<()>
    where
        P0: ::windows_core::TryIntoParam<::windows::Foundation::IReference<::windows::UI::Color>>,
    {
        let this = self;
        unsafe {
            (::windows_core::Interface::vtable(this).SetAltHigh)(
                ::windows_core::Interface::as_raw(this),
                value.try_into_param()?.abi(),
            )
            .ok()
        }
    }
    #[doc = "Required features: `\"Windows_Foundation\"`, `\"Windows_UI\"`"]
    #[cfg(all(feature = "Windows_Foundation", feature = "Windows_UI"))]
    pub fn AltLow(
        &self,
    ) -> ::windows_core::Result<::windows::Foundation::IReference<::windows::UI::Color>> {
        let this = self;
        unsafe {
            let mut result__ = ::std::mem::zeroed();
            (::windows_core::Interface::vtable(this).AltLow)(
                ::windows_core::Interface::as_raw(this),
                &mut result__,
            )
            .from_abi(result__)
        }
    }
    #[doc = "Required features: `\"Windows_Foundation\"`, `\"Windows_UI\"`"]
    #[cfg(all(feature = "Windows_Foundation", feature = "Windows_UI"))]
    pub fn SetAltLow<P0>(&self, value: P0) -> ::windows_core::Result<()>
    where
        P0: ::windows_core::TryIntoParam<::windows::Foundation::IReference<::windows::UI::Color>>,
    {
        let this = self;
        unsafe {
            (::windows_core::Interface::vtable(this).SetAltLow)(
                ::windows_core::Interface::as_raw(this),
                value.try_into_param()?.abi(),
            )
            .ok()
        }
    }
    #[doc = "Required features: `\"Windows_Foundation\"`, `\"Windows_UI\"`"]
    #[cfg(all(feature = "Windows_Foundation", feature = "Windows_UI"))]
    pub fn AltMedium(
        &self,
    ) -> ::windows_core::Result<::windows::Foundation::IReference<::windows::UI::Color>> {
        let this = self;
        unsafe {
            let mut result__ = ::std::mem::zeroed();
            (::windows_core::Interface::vtable(this).AltMedium)(
                ::windows_core::Interface::as_raw(this),
                &mut result__,
            )
            .from_abi(result__)
        }
    }
    #[doc = "Required features: `\"Windows_Foundation\"`, `\"Windows_UI\"`"]
    #[cfg(all(feature = "Windows_Foundation", feature = "Windows_UI"))]
    pub fn SetAltMedium<P0>(&self, value: P0) -> ::windows_core::Result<()>
    where
        P0: ::windows_core::TryIntoParam<::windows::Foundation::IReference<::windows::UI::Color>>,
    {
        let this = self;
        unsafe {
            (::windows_core::Interface::vtable(this).SetAltMedium)(
                ::windows_core::Interface::as_raw(this),
                value.try_into_param()?.abi(),
            )
            .ok()
        }
    }
    #[doc = "Required features: `\"Windows_Foundation\"`, `\"Windows_UI\"`"]
    #[cfg(all(feature = "Windows_Foundation", feature = "Windows_UI"))]
    pub fn AltMediumHigh(
        &self,
    ) -> ::windows_core::Result<::windows::Foundation::IReference<::windows::UI::Color>> {
        let this = self;
        unsafe {
            let mut result__ = ::std::mem::zeroed();
            (::windows_core::Interface::vtable(this).AltMediumHigh)(
                ::windows_core::Interface::as_raw(this),
                &mut result__,
            )
            .from_abi(result__)
        }
    }
    #[doc = "Required features: `\"Windows_Foundation\"`, `\"Windows_UI\"`"]
    #[cfg(all(feature = "Windows_Foundation", feature = "Windows_UI"))]
    pub fn SetAltMediumHigh<P0>(&self, value: P0) -> ::windows_core::Result<()>
    where
        P0: ::windows_core::TryIntoParam<::windows::Foundation::IReference<::windows::UI::Color>>,
    {
        let this = self;
        unsafe {
            (::windows_core::Interface::vtable(this).SetAltMediumHigh)(
                ::windows_core::Interface::as_raw(this),
                value.try_into_param()?.abi(),
            )
            .ok()
        }
    }
    #[doc = "Required features: `\"Windows_Foundation\"`, `\"Windows_UI\"`"]
    #[cfg(all(feature = "Windows_Foundation", feature = "Windows_UI"))]
    pub fn AltMediumLow(
        &self,
    ) -> ::windows_core::Result<::windows::Foundation::IReference<::windows::UI::Color>> {
        let this = self;
        unsafe {
            let mut result__ = ::std::mem::zeroed();
            (::windows_core::Interface::vtable(this).AltMediumLow)(
                ::windows_core::Interface::as_raw(this),
                &mut result__,
            )
            .from_abi(result__)
        }
    }
    #[doc = "Required features: `\"Windows_Foundation\"`, `\"Windows_UI\"`"]
    #[cfg(all(feature = "Windows_Foundation", feature = "Windows_UI"))]
    pub fn SetAltMediumLow<P0>(&self, value: P0) -> ::windows_core::Result<()>
    where
        P0: ::windows_core::TryIntoParam<::windows::Foundation::IReference<::windows::UI::Color>>,
    {
        let this = self;
        unsafe {
            (::windows_core::Interface::vtable(this).SetAltMediumLow)(
                ::windows_core::Interface::as_raw(this),
                value.try_into_param()?.abi(),
            )
            .ok()
        }
    }
    #[doc = "Required features: `\"Windows_Foundation\"`, `\"Windows_UI\"`"]
    #[cfg(all(feature = "Windows_Foundation", feature = "Windows_UI"))]
    pub fn BaseHigh(
        &self,
    ) -> ::windows_core::Result<::windows::Foundation::IReference<::windows::UI::Color>> {
        let this = self;
        unsafe {
            let mut result__ = ::std::mem::zeroed();
            (::windows_core::Interface::vtable(this).BaseHigh)(
                ::windows_core::Interface::as_raw(this),
                &mut result__,
            )
            .from_abi(result__)
        }
    }
    #[doc = "Required features: `\"Windows_Foundation\"`, `\"Windows_UI\"`"]
    #[cfg(all(feature = "Windows_Foundation", feature = "Windows_UI"))]
    pub fn SetBaseHigh<P0>(&self, value: P0) -> ::windows_core::Result<()>
    where
        P0: ::windows_core::TryIntoParam<::windows::Foundation::IReference<::windows::UI::Color>>,
    {
        let this = self;
        unsafe {
            (::windows_core::Interface::vtable(this).SetBaseHigh)(
                ::windows_core::Interface::as_raw(this),
                value.try_into_param()?.abi(),
            )
            .ok()
        }
    }
    #[doc = "Required features: `\"Windows_Foundation\"`, `\"Windows_UI\"`"]
    #[cfg(all(feature = "Windows_Foundation", feature = "Windows_UI"))]
    pub fn BaseLow(
        &self,
    ) -> ::windows_core::Result<::windows::Foundation::IReference<::windows::UI::Color>> {
        let this = self;
        unsafe {
            let mut result__ = ::std::mem::zeroed();
            (::windows_core::Interface::vtable(this).BaseLow)(
                ::windows_core::Interface::as_raw(this),
                &mut result__,
            )
            .from_abi(result__)
        }
    }
    #[doc = "Required features: `\"Windows_Foundation\"`, `\"Windows_UI\"`"]
    #[cfg(all(feature = "Windows_Foundation", feature = "Windows_UI"))]
    pub fn SetBaseLow<P0>(&self, value: P0) -> ::windows_core::Result<()>
    where
        P0: ::windows_core::TryIntoParam<::windows::Foundation::IReference<::windows::UI::Color>>,
    {
        let this = self;
        unsafe {
            (::windows_core::Interface::vtable(this).SetBaseLow)(
                ::windows_core::Interface::as_raw(this),
                value.try_into_param()?.abi(),
            )
            .ok()
        }
    }
    #[doc = "Required features: `\"Windows_Foundation\"`, `\"Windows_UI\"`"]
    #[cfg(all(feature = "Windows_Foundation", feature = "Windows_UI"))]
    pub fn BaseMedium(
        &self,
    ) -> ::windows_core::Result<::windows::Foundation::IReference<::windows::UI::Color>> {
        let this = self;
        unsafe {
            let mut result__ = ::std::mem::zeroed();
            (::windows_core::Interface::vtable(this).BaseMedium)(
                ::windows_core::Interface::as_raw(this),
                &mut result__,
            )
            .from_abi(result__)
        }
    }
    #[doc = "Required features: `\"Windows_Foundation\"`, `\"Windows_UI\"`"]
    #[cfg(all(feature = "Windows_Foundation", feature = "Windows_UI"))]
    pub fn SetBaseMedium<P0>(&self, value: P0) -> ::windows_core::Result<()>
    where
        P0: ::windows_core::TryIntoParam<::windows::Foundation::IReference<::windows::UI::Color>>,
    {
        let this = self;
        unsafe {
            (::windows_core::Interface::vtable(this).SetBaseMedium)(
                ::windows_core::Interface::as_raw(this),
                value.try_into_param()?.abi(),
            )
            .ok()
        }
    }
    #[doc = "Required features: `\"Windows_Foundation\"`, `\"Windows_UI\"`"]
    #[cfg(all(feature = "Windows_Foundation", feature = "Windows_UI"))]
    pub fn BaseMediumHigh(
        &self,
    ) -> ::windows_core::Result<::windows::Foundation::IReference<::windows::UI::Color>> {
        let this = self;
        unsafe {
            let mut result__ = ::std::mem::zeroed();
            (::windows_core::Interface::vtable(this).BaseMediumHigh)(
                ::windows_core::Interface::as_raw(this),
                &mut result__,
            )
            .from_abi(result__)
        }
    }
    #[doc = "Required features: `\"Windows_Foundation\"`, `\"Windows_UI\"`"]
    #[cfg(all(feature = "Windows_Foundation", feature = "Windows_UI"))]
    pub fn SetBaseMediumHigh<P0>(&self, value: P0) -> ::windows_core::Result<()>
    where
        P0: ::windows_core::TryIntoParam<::windows::Foundation::IReference<::windows::UI::Color>>,
    {
        let this = self;
        unsafe {
            (::windows_core::Interface::vtable(this).SetBaseMediumHigh)(
                ::windows_core::Interface::as_raw(this),
                value.try_into_param()?.abi(),
            )
            .ok()
        }
    }
    #[doc = "Required features: `\"Windows_Foundation\"`, `\"Windows_UI\"`"]
    #[cfg(all(feature = "Windows_Foundation", feature = "Windows_UI"))]
    pub fn BaseMediumLow(
        &self,
    ) -> ::windows_core::Result<::windows::Foundation::IReference<::windows::UI::Color>> {
        let this = self;
        unsafe {
            let mut result__ = ::std::mem::zeroed();
            (::windows_core::Interface::vtable(this).BaseMediumLow)(
                ::windows_core::Interface::as_raw(this),
                &mut result__,
            )
            .from_abi(result__)
        }
    }
    #[doc = "Required features: `\"Windows_Foundation\"`, `\"Windows_UI\"`"]
    #[cfg(all(feature = "Windows_Foundation", feature = "Windows_UI"))]
    pub fn SetBaseMediumLow<P0>(&self, value: P0) -> ::windows_core::Result<()>
    where
        P0: ::windows_core::TryIntoParam<::windows::Foundation::IReference<::windows::UI::Color>>,
    {
        let this = self;
        unsafe {
            (::windows_core::Interface::vtable(this).SetBaseMediumLow)(
                ::windows_core::Interface::as_raw(this),
                value.try_into_param()?.abi(),
            )
            .ok()
        }
    }
    #[doc = "Required features: `\"Windows_Foundation\"`, `\"Windows_UI\"`"]
    #[cfg(all(feature = "Windows_Foundation", feature = "Windows_UI"))]
    pub fn ChromeAltLow(
        &self,
    ) -> ::windows_core::Result<::windows::Foundation::IReference<::windows::UI::Color>> {
        let this = self;
        unsafe {
            let mut result__ = ::std::mem::zeroed();
            (::windows_core::Interface::vtable(this).ChromeAltLow)(
                ::windows_core::Interface::as_raw(this),
                &mut result__,
            )
            .from_abi(result__)
        }
    }
    #[doc = "Required features: `\"Windows_Foundation\"`, `\"Windows_UI\"`"]
    #[cfg(all(feature = "Windows_Foundation", feature = "Windows_UI"))]
    pub fn SetChromeAltLow<P0>(&self, value: P0) -> ::windows_core::Result<()>
    where
        P0: ::windows_core::TryIntoParam<::windows::Foundation::IReference<::windows::UI::Color>>,
    {
        let this = self;
        unsafe {
            (::windows_core::Interface::vtable(this).SetChromeAltLow)(
                ::windows_core::Interface::as_raw(this),
                value.try_into_param()?.abi(),
            )
            .ok()
        }
    }
    #[doc = "Required features: `\"Windows_Foundation\"`, `\"Windows_UI\"`"]
    #[cfg(all(feature = "Windows_Foundation", feature = "Windows_UI"))]
    pub fn ChromeBlackHigh(
        &self,
    ) -> ::windows_core::Result<::windows::Foundation::IReference<::windows::UI::Color>> {
        let this = self;
        unsafe {
            let mut result__ = ::std::mem::zeroed();
            (::windows_core::Interface::vtable(this).ChromeBlackHigh)(
                ::windows_core::Interface::as_raw(this),
                &mut result__,
            )
            .from_abi(result__)
        }
    }
    #[doc = "Required features: `\"Windows_Foundation\"`, `\"Windows_UI\"`"]
    #[cfg(all(feature = "Windows_Foundation", feature = "Windows_UI"))]
    pub fn SetChromeBlackHigh<P0>(&self, value: P0) -> ::windows_core::Result<()>
    where
        P0: ::windows_core::TryIntoParam<::windows::Foundation::IReference<::windows::UI::Color>>,
    {
        let this = self;
        unsafe {
            (::windows_core::Interface::vtable(this).SetChromeBlackHigh)(
                ::windows_core::Interface::as_raw(this),
                value.try_into_param()?.abi(),
            )
            .ok()
        }
    }
    #[doc = "Required features: `\"Windows_Foundation\"`, `\"Windows_UI\"`"]
    #[cfg(all(feature = "Windows_Foundation", feature = "Windows_UI"))]
    pub fn ChromeBlackLow(
        &self,
    ) -> ::windows_core::Result<::windows::Foundation::IReference<::windows::UI::Color>> {
        let this = self;
        unsafe {
            let mut result__ = ::std::mem::zeroed();
            (::windows_core::Interface::vtable(this).ChromeBlackLow)(
                ::windows_core::Interface::as_raw(this),
                &mut result__,
            )
            .from_abi(result__)
        }
    }
    #[doc = "Required features: `\"Windows_Foundation\"`, `\"Windows_UI\"`"]
    #[cfg(all(feature = "Windows_Foundation", feature = "Windows_UI"))]
    pub fn SetChromeBlackLow<P0>(&self, value: P0) -> ::windows_core::Result<()>
    where
        P0: ::windows_core::TryIntoParam<::windows::Foundation::IReference<::windows::UI::Color>>,
    {
        let this = self;
        unsafe {
            (::windows_core::Interface::vtable(this).SetChromeBlackLow)(
                ::windows_core::Interface::as_raw(this),
                value.try_into_param()?.abi(),
            )
            .ok()
        }
    }
    #[doc = "Required features: `\"Windows_Foundation\"`, `\"Windows_UI\"`"]
    #[cfg(all(feature = "Windows_Foundation", feature = "Windows_UI"))]
    pub fn ChromeBlackMediumLow(
        &self,
    ) -> ::windows_core::Result<::windows::Foundation::IReference<::windows::UI::Color>> {
        let this = self;
        unsafe {
            let mut result__ = ::std::mem::zeroed();
            (::windows_core::Interface::vtable(this).ChromeBlackMediumLow)(
                ::windows_core::Interface::as_raw(this),
                &mut result__,
            )
            .from_abi(result__)
        }
    }
    #[doc = "Required features: `\"Windows_Foundation\"`, `\"Windows_UI\"`"]
    #[cfg(all(feature = "Windows_Foundation", feature = "Windows_UI"))]
    pub fn SetChromeBlackMediumLow<P0>(&self, value: P0) -> ::windows_core::Result<()>
    where
        P0: ::windows_core::TryIntoParam<::windows::Foundation::IReference<::windows::UI::Color>>,
    {
        let this = self;
        unsafe {
            (::windows_core::Interface::vtable(this).SetChromeBlackMediumLow)(
                ::windows_core::Interface::as_raw(this),
                value.try_into_param()?.abi(),
            )
            .ok()
        }
    }
    #[doc = "Required features: `\"Windows_Foundation\"`, `\"Windows_UI\"`"]
    #[cfg(all(feature = "Windows_Foundation", feature = "Windows_UI"))]
    pub fn ChromeBlackMedium(
        &self,
    ) -> ::windows_core::Result<::windows::Foundation::IReference<::windows::UI::Color>> {
        let this = self;
        unsafe {
            let mut result__ = ::std::mem::zeroed();
            (::windows_core::Interface::vtable(this).ChromeBlackMedium)(
                ::windows_core::Interface::as_raw(this),
                &mut result__,
            )
            .from_abi(result__)
        }
    }
    #[doc = "Required features: `\"Windows_Foundation\"`, `\"Windows_UI\"`"]
    #[cfg(all(feature = "Windows_Foundation", feature = "Windows_UI"))]
    pub fn SetChromeBlackMedium<P0>(&self, value: P0) -> ::windows_core::Result<()>
    where
        P0: ::windows_core::TryIntoParam<::windows::Foundation::IReference<::windows::UI::Color>>,
    {
        let this = self;
        unsafe {
            (::windows_core::Interface::vtable(this).SetChromeBlackMedium)(
                ::windows_core::Interface::as_raw(this),
                value.try_into_param()?.abi(),
            )
            .ok()
        }
    }
    #[doc = "Required features: `\"Windows_Foundation\"`, `\"Windows_UI\"`"]
    #[cfg(all(feature = "Windows_Foundation", feature = "Windows_UI"))]
    pub fn ChromeDisabledHigh(
        &self,
    ) -> ::windows_core::Result<::windows::Foundation::IReference<::windows::UI::Color>> {
        let this = self;
        unsafe {
            let mut result__ = ::std::mem::zeroed();
            (::windows_core::Interface::vtable(this).ChromeDisabledHigh)(
                ::windows_core::Interface::as_raw(this),
                &mut result__,
            )
            .from_abi(result__)
        }
    }
    #[doc = "Required features: `\"Windows_Foundation\"`, `\"Windows_UI\"`"]
    #[cfg(all(feature = "Windows_Foundation", feature = "Windows_UI"))]
    pub fn SetChromeDisabledHigh<P0>(&self, value: P0) -> ::windows_core::Result<()>
    where
        P0: ::windows_core::TryIntoParam<::windows::Foundation::IReference<::windows::UI::Color>>,
    {
        let this = self;
        unsafe {
            (::windows_core::Interface::vtable(this).SetChromeDisabledHigh)(
                ::windows_core::Interface::as_raw(this),
                value.try_into_param()?.abi(),
            )
            .ok()
        }
    }
    #[doc = "Required features: `\"Windows_Foundation\"`, `\"Windows_UI\"`"]
    #[cfg(all(feature = "Windows_Foundation", feature = "Windows_UI"))]
    pub fn ChromeDisabledLow(
        &self,
    ) -> ::windows_core::Result<::windows::Foundation::IReference<::windows::UI::Color>> {
        let this = self;
        unsafe {
            let mut result__ = ::std::mem::zeroed();
            (::windows_core::Interface::vtable(this).ChromeDisabledLow)(
                ::windows_core::Interface::as_raw(this),
                &mut result__,
            )
            .from_abi(result__)
        }
    }
    #[doc = "Required features: `\"Windows_Foundation\"`, `\"Windows_UI\"`"]
    #[cfg(all(feature = "Windows_Foundation", feature = "Windows_UI"))]
    pub fn SetChromeDisabledLow<P0>(&self, value: P0) -> ::windows_core::Result<()>
    where
        P0: ::windows_core::TryIntoParam<::windows::Foundation::IReference<::windows::UI::Color>>,
    {
        let this = self;
        unsafe {
            (::windows_core::Interface::vtable(this).SetChromeDisabledLow)(
                ::windows_core::Interface::as_raw(this),
                value.try_into_param()?.abi(),
            )
            .ok()
        }
    }
    #[doc = "Required features: `\"Windows_Foundation\"`, `\"Windows_UI\"`"]
    #[cfg(all(feature = "Windows_Foundation", feature = "Windows_UI"))]
    pub fn ChromeHigh(
        &self,
    ) -> ::windows_core::Result<::windows::Foundation::IReference<::windows::UI::Color>> {
        let this = self;
        unsafe {
            let mut result__ = ::std::mem::zeroed();
            (::windows_core::Interface::vtable(this).ChromeHigh)(
                ::windows_core::Interface::as_raw(this),
                &mut result__,
            )
            .from_abi(result__)
        }
    }
    #[doc = "Required features: `\"Windows_Foundation\"`, `\"Windows_UI\"`"]
    #[cfg(all(feature = "Windows_Foundation", feature = "Windows_UI"))]
    pub fn SetChromeHigh<P0>(&self, value: P0) -> ::windows_core::Result<()>
    where
        P0: ::windows_core::TryIntoParam<::windows::Foundation::IReference<::windows::UI::Color>>,
    {
        let this = self;
        unsafe {
            (::windows_core::Interface::vtable(this).SetChromeHigh)(
                ::windows_core::Interface::as_raw(this),
                value.try_into_param()?.abi(),
            )
            .ok()
        }
    }
    #[doc = "Required features: `\"Windows_Foundation\"`, `\"Windows_UI\"`"]
    #[cfg(all(feature = "Windows_Foundation", feature = "Windows_UI"))]
    pub fn ChromeLow(
        &self,
    ) -> ::windows_core::Result<::windows::Foundation::IReference<::windows::UI::Color>> {
        let this = self;
        unsafe {
            let mut result__ = ::std::mem::zeroed();
            (::windows_core::Interface::vtable(this).ChromeLow)(
                ::windows_core::Interface::as_raw(this),
                &mut result__,
            )
            .from_abi(result__)
        }
    }
    #[doc = "Required features: `\"Windows_Foundation\"`, `\"Windows_UI\"`"]
    #[cfg(all(feature = "Windows_Foundation", feature = "Windows_UI"))]
    pub fn SetChromeLow<P0>(&self, value: P0) -> ::windows_core::Result<()>
    where
        P0: ::windows_core::TryIntoParam<::windows::Foundation::IReference<::windows::UI::Color>>,
    {
        let this = self;
        unsafe {
            (::windows_core::Interface::vtable(this).SetChromeLow)(
                ::windows_core::Interface::as_raw(this),
                value.try_into_param()?.abi(),
            )
            .ok()
        }
    }
    #[doc = "Required features: `\"Windows_Foundation\"`, `\"Windows_UI\"`"]
    #[cfg(all(feature = "Windows_Foundation", feature = "Windows_UI"))]
    pub fn ChromeMedium(
        &self,
    ) -> ::windows_core::Result<::windows::Foundation::IReference<::windows::UI::Color>> {
        let this = self;
        unsafe {
            let mut result__ = ::std::mem::zeroed();
            (::windows_core::Interface::vtable(this).ChromeMedium)(
                ::windows_core::Interface::as_raw(this),
                &mut result__,
            )
            .from_abi(result__)
        }
    }
    #[doc = "Required features: `\"Windows_Foundation\"`, `\"Windows_UI\"`"]
    #[cfg(all(feature = "Windows_Foundation", feature = "Windows_UI"))]
    pub fn SetChromeMedium<P0>(&self, value: P0) -> ::windows_core::Result<()>
    where
        P0: ::windows_core::TryIntoParam<::windows::Foundation::IReference<::windows::UI::Color>>,
    {
        let this = self;
        unsafe {
            (::windows_core::Interface::vtable(this).SetChromeMedium)(
                ::windows_core::Interface::as_raw(this),
                value.try_into_param()?.abi(),
            )
            .ok()
        }
    }
    #[doc = "Required features: `\"Windows_Foundation\"`, `\"Windows_UI\"`"]
    #[cfg(all(feature = "Windows_Foundation", feature = "Windows_UI"))]
    pub fn ChromeMediumLow(
        &self,
    ) -> ::windows_core::Result<::windows::Foundation::IReference<::windows::UI::Color>> {
        let this = self;
        unsafe {
            let mut result__ = ::std::mem::zeroed();
            (::windows_core::Interface::vtable(this).ChromeMediumLow)(
                ::windows_core::Interface::as_raw(this),
                &mut result__,
            )
            .from_abi(result__)
        }
    }
    #[doc = "Required features: `\"Windows_Foundation\"`, `\"Windows_UI\"`"]
    #[cfg(all(feature = "Windows_Foundation", feature = "Windows_UI"))]
    pub fn SetChromeMediumLow<P0>(&self, value: P0) -> ::windows_core::Result<()>
    where
        P0: ::windows_core::TryIntoParam<::windows::Foundation::IReference<::windows::UI::Color>>,
    {
        let this = self;
        unsafe {
            (::windows_core::Interface::vtable(this).SetChromeMediumLow)(
                ::windows_core::Interface::as_raw(this),
                value.try_into_param()?.abi(),
            )
            .ok()
        }
    }
    #[doc = "Required features: `\"Windows_Foundation\"`, `\"Windows_UI\"`"]
    #[cfg(all(feature = "Windows_Foundation", feature = "Windows_UI"))]
    pub fn ChromeWhite(
        &self,
    ) -> ::windows_core::Result<::windows::Foundation::IReference<::windows::UI::Color>> {
        let this = self;
        unsafe {
            let mut result__ = ::std::mem::zeroed();
            (::windows_core::Interface::vtable(this).ChromeWhite)(
                ::windows_core::Interface::as_raw(this),
                &mut result__,
            )
            .from_abi(result__)
        }
    }
    #[doc = "Required features: `\"Windows_Foundation\"`, `\"Windows_UI\"`"]
    #[cfg(all(feature = "Windows_Foundation", feature = "Windows_UI"))]
    pub fn SetChromeWhite<P0>(&self, value: P0) -> ::windows_core::Result<()>
    where
        P0: ::windows_core::TryIntoParam<::windows::Foundation::IReference<::windows::UI::Color>>,
    {
        let this = self;
        unsafe {
            (::windows_core::Interface::vtable(this).SetChromeWhite)(
                ::windows_core::Interface::as_raw(this),
                value.try_into_param()?.abi(),
            )
            .ok()
        }
    }
    #[doc = "Required features: `\"Windows_Foundation\"`, `\"Windows_UI\"`"]
    #[cfg(all(feature = "Windows_Foundation", feature = "Windows_UI"))]
    pub fn ChromeGray(
        &self,
    ) -> ::windows_core::Result<::windows::Foundation::IReference<::windows::UI::Color>> {
        let this = self;
        unsafe {
            let mut result__ = ::std::mem::zeroed();
            (::windows_core::Interface::vtable(this).ChromeGray)(
                ::windows_core::Interface::as_raw(this),
                &mut result__,
            )
            .from_abi(result__)
        }
    }
    #[doc = "Required features: `\"Windows_Foundation\"`, `\"Windows_UI\"`"]
    #[cfg(all(feature = "Windows_Foundation", feature = "Windows_UI"))]
    pub fn SetChromeGray<P0>(&self, value: P0) -> ::windows_core::Result<()>
    where
        P0: ::windows_core::TryIntoParam<::windows::Foundation::IReference<::windows::UI::Color>>,
    {
        let this = self;
        unsafe {
            (::windows_core::Interface::vtable(this).SetChromeGray)(
                ::windows_core::Interface::as_raw(this),
                value.try_into_param()?.abi(),
            )
            .ok()
        }
    }
    #[doc = "Required features: `\"Windows_Foundation\"`, `\"Windows_UI\"`"]
    #[cfg(all(feature = "Windows_Foundation", feature = "Windows_UI"))]
    pub fn ListLow(
        &self,
    ) -> ::windows_core::Result<::windows::Foundation::IReference<::windows::UI::Color>> {
        let this = self;
        unsafe {
            let mut result__ = ::std::mem::zeroed();
            (::windows_core::Interface::vtable(this).ListLow)(
                ::windows_core::Interface::as_raw(this),
                &mut result__,
            )
            .from_abi(result__)
        }
    }
    #[doc = "Required features: `\"Windows_Foundation\"`, `\"Windows_UI\"`"]
    #[cfg(all(feature = "Windows_Foundation", feature = "Windows_UI"))]
    pub fn SetListLow<P0>(&self, value: P0) -> ::windows_core::Result<()>
    where
        P0: ::windows_core::TryIntoParam<::windows::Foundation::IReference<::windows::UI::Color>>,
    {
        let this = self;
        unsafe {
            (::windows_core::Interface::vtable(this).SetListLow)(
                ::windows_core::Interface::as_raw(this),
                value.try_into_param()?.abi(),
            )
            .ok()
        }
    }
    #[doc = "Required features: `\"Windows_Foundation\"`, `\"Windows_UI\"`"]
    #[cfg(all(feature = "Windows_Foundation", feature = "Windows_UI"))]
    pub fn ListMedium(
        &self,
    ) -> ::windows_core::Result<::windows::Foundation::IReference<::windows::UI::Color>> {
        let this = self;
        unsafe {
            let mut result__ = ::std::mem::zeroed();
            (::windows_core::Interface::vtable(this).ListMedium)(
                ::windows_core::Interface::as_raw(this),
                &mut result__,
            )
            .from_abi(result__)
        }
    }
    #[doc = "Required features: `\"Windows_Foundation\"`, `\"Windows_UI\"`"]
    #[cfg(all(feature = "Windows_Foundation", feature = "Windows_UI"))]
    pub fn SetListMedium<P0>(&self, value: P0) -> ::windows_core::Result<()>
    where
        P0: ::windows_core::TryIntoParam<::windows::Foundation::IReference<::windows::UI::Color>>,
    {
        let this = self;
        unsafe {
            (::windows_core::Interface::vtable(this).SetListMedium)(
                ::windows_core::Interface::as_raw(this),
                value.try_into_param()?.abi(),
            )
            .ok()
        }
    }
    #[doc = "Required features: `\"Windows_Foundation\"`, `\"Windows_UI\"`"]
    #[cfg(all(feature = "Windows_Foundation", feature = "Windows_UI"))]
    pub fn ErrorText(
        &self,
    ) -> ::windows_core::Result<::windows::Foundation::IReference<::windows::UI::Color>> {
        let this = self;
        unsafe {
            let mut result__ = ::std::mem::zeroed();
            (::windows_core::Interface::vtable(this).ErrorText)(
                ::windows_core::Interface::as_raw(this),
                &mut result__,
            )
            .from_abi(result__)
        }
    }
    #[doc = "Required features: `\"Windows_Foundation\"`, `\"Windows_UI\"`"]
    #[cfg(all(feature = "Windows_Foundation", feature = "Windows_UI"))]
    pub fn SetErrorText<P0>(&self, value: P0) -> ::windows_core::Result<()>
    where
        P0: ::windows_core::TryIntoParam<::windows::Foundation::IReference<::windows::UI::Color>>,
    {
        let this = self;
        unsafe {
            (::windows_core::Interface::vtable(this).SetErrorText)(
                ::windows_core::Interface::as_raw(this),
                value.try_into_param()?.abi(),
            )
            .ok()
        }
    }
    #[doc = "Required features: `\"Windows_Foundation\"`, `\"Windows_UI\"`"]
    #[cfg(all(feature = "Windows_Foundation", feature = "Windows_UI"))]
    pub fn Accent(
        &self,
    ) -> ::windows_core::Result<::windows::Foundation::IReference<::windows::UI::Color>> {
        let this = self;
        unsafe {
            let mut result__ = ::std::mem::zeroed();
            (::windows_core::Interface::vtable(this).Accent)(
                ::windows_core::Interface::as_raw(this),
                &mut result__,
            )
            .from_abi(result__)
        }
    }
    #[doc = "Required features: `\"Windows_Foundation\"`, `\"Windows_UI\"`"]
    #[cfg(all(feature = "Windows_Foundation", feature = "Windows_UI"))]
    pub fn SetAccent<P0>(&self, value: P0) -> ::windows_core::Result<()>
    where
        P0: ::windows_core::TryIntoParam<::windows::Foundation::IReference<::windows::UI::Color>>,
    {
        let this = self;
        unsafe {
            (::windows_core::Interface::vtable(this).SetAccent)(
                ::windows_core::Interface::as_raw(this),
                value.try_into_param()?.abi(),
            )
            .ok()
        }
    }
    pub unsafe fn CreateInstance<P0>(
        baseinterface: P0,
        innerinterface: &mut ::core::option::Option<::windows_core::IInspectable>,
    ) -> ::windows_core::Result<ColorPaletteResources>
    where
        P0: ::windows_core::IntoParam<::windows_core::IInspectable>,
    {
        Self::IColorPaletteResourcesFactory(|this| unsafe {
            let mut result__ = ::std::mem::zeroed();
            (::windows_core::Interface::vtable(this).CreateInstance)(
                ::windows_core::Interface::as_raw(this),
                baseinterface.into_param().abi(),
                innerinterface as *mut _ as _,
                &mut result__,
            )
            .from_abi(result__)
        })
    }
    pub fn GetValue<P0>(&self, dp: P0) -> ::windows_core::Result<::windows_core::IInspectable>
    where
        P0: ::windows_core::IntoParam<DependencyProperty>,
    {
        let this = &::windows_core::ComInterface::cast::<IDependencyObject>(self)?;
        unsafe {
            let mut result__ = ::std::mem::zeroed();
            (::windows_core::Interface::vtable(this).GetValue)(
                ::windows_core::Interface::as_raw(this),
                dp.into_param().abi(),
                &mut result__,
            )
            .from_abi(result__)
        }
    }
    pub fn SetValue<P0, P1>(&self, dp: P0, value: P1) -> ::windows_core::Result<()>
    where
        P0: ::windows_core::IntoParam<DependencyProperty>,
        P1: ::windows_core::IntoParam<::windows_core::IInspectable>,
    {
        let this = &::windows_core::ComInterface::cast::<IDependencyObject>(self)?;
        unsafe {
            (::windows_core::Interface::vtable(this).SetValue)(
                ::windows_core::Interface::as_raw(this),
                dp.into_param().abi(),
                value.into_param().abi(),
            )
            .ok()
        }
    }
    pub fn ClearValue<P0>(&self, dp: P0) -> ::windows_core::Result<()>
    where
        P0: ::windows_core::IntoParam<DependencyProperty>,
    {
        let this = &::windows_core::ComInterface::cast::<IDependencyObject>(self)?;
        unsafe {
            (::windows_core::Interface::vtable(this).ClearValue)(
                ::windows_core::Interface::as_raw(this),
                dp.into_param().abi(),
            )
            .ok()
        }
    }
    pub fn ReadLocalValue<P0>(&self, dp: P0) -> ::windows_core::Result<::windows_core::IInspectable>
    where
        P0: ::windows_core::IntoParam<DependencyProperty>,
    {
        let this = &::windows_core::ComInterface::cast::<IDependencyObject>(self)?;
        unsafe {
            let mut result__ = ::std::mem::zeroed();
            (::windows_core::Interface::vtable(this).ReadLocalValue)(
                ::windows_core::Interface::as_raw(this),
                dp.into_param().abi(),
                &mut result__,
            )
            .from_abi(result__)
        }
    }
    pub fn GetAnimationBaseValue<P0>(
        &self,
        dp: P0,
    ) -> ::windows_core::Result<::windows_core::IInspectable>
    where
        P0: ::windows_core::IntoParam<DependencyProperty>,
    {
        let this = &::windows_core::ComInterface::cast::<IDependencyObject>(self)?;
        unsafe {
            let mut result__ = ::std::mem::zeroed();
            (::windows_core::Interface::vtable(this).GetAnimationBaseValue)(
                ::windows_core::Interface::as_raw(this),
                dp.into_param().abi(),
                &mut result__,
            )
            .from_abi(result__)
        }
    }
    pub fn RegisterPropertyChangedCallback<P0, P1>(
        &self,
        dp: P0,
        callback: P1,
    ) -> ::windows_core::Result<i64>
    where
        P0: ::windows_core::IntoParam<DependencyProperty>,
        P1: ::windows_core::IntoParam<DependencyPropertyChangedCallback>,
    {
        let this = &::windows_core::ComInterface::cast::<IDependencyObject>(self)?;
        unsafe {
            let mut result__ = ::std::mem::zeroed();
            (::windows_core::Interface::vtable(this).RegisterPropertyChangedCallback)(
                ::windows_core::Interface::as_raw(this),
                dp.into_param().abi(),
                callback.into_param().abi(),
                &mut result__,
            )
            .from_abi(result__)
        }
    }
    pub fn UnregisterPropertyChangedCallback<P0>(
        &self,
        dp: P0,
        token: i64,
    ) -> ::windows_core::Result<()>
    where
        P0: ::windows_core::IntoParam<DependencyProperty>,
    {
        let this = &::windows_core::ComInterface::cast::<IDependencyObject>(self)?;
        unsafe {
            (::windows_core::Interface::vtable(this).UnregisterPropertyChangedCallback)(
                ::windows_core::Interface::as_raw(this),
                dp.into_param().abi(),
                token,
            )
            .ok()
        }
    }
    #[doc = "Required features: `\"Windows_UI_Core\"`"]
    #[cfg(feature = "Windows_UI_Core")]
    pub fn Dispatcher(&self) -> ::windows_core::Result<::windows::UI::Core::CoreDispatcher> {
        let this = &::windows_core::ComInterface::cast::<IDependencyObject>(self)?;
        unsafe {
            let mut result__ = ::std::mem::zeroed();
            (::windows_core::Interface::vtable(this).Dispatcher)(
                ::windows_core::Interface::as_raw(this),
                &mut result__,
            )
            .from_abi(result__)
        }
    }
    #[doc = "Required features: `\"Microsoft_UI_Dispatching\"`"]
    #[cfg(feature = "Microsoft_UI_Dispatching")]
    pub fn DispatcherQueue(&self) -> ::windows_core::Result<super::Dispatching::DispatcherQueue> {
        let this = &::windows_core::ComInterface::cast::<IDependencyObject>(self)?;
        unsafe {
            let mut result__ = ::std::mem::zeroed();
            (::windows_core::Interface::vtable(this).DispatcherQueue)(
                ::windows_core::Interface::as_raw(this),
                &mut result__,
            )
            .from_abi(result__)
        }
    }
    #[doc = "Required features: `\"Windows_Foundation_Collections\"`"]
    #[cfg(feature = "Windows_Foundation_Collections")]
    pub fn First(
        &self,
    ) -> ::windows_core::Result<
        ::windows::Foundation::Collections::IIterator<
            ::windows::Foundation::Collections::IKeyValuePair<
                ::windows_core::IInspectable,
                ::windows_core::IInspectable,
            >,
        >,
    > {
        let this = &::windows_core::ComInterface::cast::<
            ::windows::Foundation::Collections::IIterable<
                ::windows::Foundation::Collections::IKeyValuePair<
                    ::windows_core::IInspectable,
                    ::windows_core::IInspectable,
                >,
            >,
        >(self)?;
        unsafe {
            let mut result__ = ::std::mem::zeroed();
            (::windows_core::Interface::vtable(this).First)(
                ::windows_core::Interface::as_raw(this),
                &mut result__,
            )
            .from_abi(result__)
        }
    }
    #[doc = "Required features: `\"Windows_Foundation_Collections\"`"]
    #[cfg(feature = "Windows_Foundation_Collections")]
    pub fn Lookup<P0>(&self, key: P0) -> ::windows_core::Result<::windows_core::IInspectable>
    where
        P0: ::windows_core::IntoParam<::windows_core::IInspectable>,
    {
        let this = &::windows_core::ComInterface::cast::<
            ::windows::Foundation::Collections::IMap<
                ::windows_core::IInspectable,
                ::windows_core::IInspectable,
            >,
        >(self)?;
        unsafe {
            let mut result__ = ::std::mem::zeroed();
            (::windows_core::Interface::vtable(this).Lookup)(
                ::windows_core::Interface::as_raw(this),
                key.into_param().abi(),
                &mut result__,
            )
            .from_abi(result__)
        }
    }
    #[doc = "Required features: `\"Windows_Foundation_Collections\"`"]
    #[cfg(feature = "Windows_Foundation_Collections")]
    pub fn Size(&self) -> ::windows_core::Result<u32> {
        let this = &::windows_core::ComInterface::cast::<
            ::windows::Foundation::Collections::IMap<
                ::windows_core::IInspectable,
                ::windows_core::IInspectable,
            >,
        >(self)?;
        unsafe {
            let mut result__ = ::std::mem::zeroed();
            (::windows_core::Interface::vtable(this).Size)(
                ::windows_core::Interface::as_raw(this),
                &mut result__,
            )
            .from_abi(result__)
        }
    }
    #[doc = "Required features: `\"Windows_Foundation_Collections\"`"]
    #[cfg(feature = "Windows_Foundation_Collections")]
    pub fn HasKey<P0>(&self, key: P0) -> ::windows_core::Result<bool>
    where
        P0: ::windows_core::IntoParam<::windows_core::IInspectable>,
    {
        let this = &::windows_core::ComInterface::cast::<
            ::windows::Foundation::Collections::IMap<
                ::windows_core::IInspectable,
                ::windows_core::IInspectable,
            >,
        >(self)?;
        unsafe {
            let mut result__ = ::std::mem::zeroed();
            (::windows_core::Interface::vtable(this).HasKey)(
                ::windows_core::Interface::as_raw(this),
                key.into_param().abi(),
                &mut result__,
            )
            .from_abi(result__)
        }
    }
    #[doc = "Required features: `\"Windows_Foundation_Collections\"`"]
    #[cfg(feature = "Windows_Foundation_Collections")]
    pub fn GetView(
        &self,
    ) -> ::windows_core::Result<
        ::windows::Foundation::Collections::IMapView<
            ::windows_core::IInspectable,
            ::windows_core::IInspectable,
        >,
    > {
        let this = &::windows_core::ComInterface::cast::<
            ::windows::Foundation::Collections::IMap<
                ::windows_core::IInspectable,
                ::windows_core::IInspectable,
            >,
        >(self)?;
        unsafe {
            let mut result__ = ::std::mem::zeroed();
            (::windows_core::Interface::vtable(this).GetView)(
                ::windows_core::Interface::as_raw(this),
                &mut result__,
            )
            .from_abi(result__)
        }
    }
    #[doc = "Required features: `\"Windows_Foundation_Collections\"`"]
    #[cfg(feature = "Windows_Foundation_Collections")]
    pub fn Insert<P0, P1>(&self, key: P0, value: P1) -> ::windows_core::Result<bool>
    where
        P0: ::windows_core::IntoParam<::windows_core::IInspectable>,
        P1: ::windows_core::IntoParam<::windows_core::IInspectable>,
    {
        let this = &::windows_core::ComInterface::cast::<
            ::windows::Foundation::Collections::IMap<
                ::windows_core::IInspectable,
                ::windows_core::IInspectable,
            >,
        >(self)?;
        unsafe {
            let mut result__ = ::std::mem::zeroed();
            (::windows_core::Interface::vtable(this).Insert)(
                ::windows_core::Interface::as_raw(this),
                key.into_param().abi(),
                value.into_param().abi(),
                &mut result__,
            )
            .from_abi(result__)
        }
    }
    #[doc = "Required features: `\"Windows_Foundation_Collections\"`"]
    #[cfg(feature = "Windows_Foundation_Collections")]
    pub fn Remove<P0>(&self, key: P0) -> ::windows_core::Result<()>
    where
        P0: ::windows_core::IntoParam<::windows_core::IInspectable>,
    {
        let this = &::windows_core::ComInterface::cast::<
            ::windows::Foundation::Collections::IMap<
                ::windows_core::IInspectable,
                ::windows_core::IInspectable,
            >,
        >(self)?;
        unsafe {
            (::windows_core::Interface::vtable(this).Remove)(
                ::windows_core::Interface::as_raw(this),
                key.into_param().abi(),
            )
            .ok()
        }
    }
    #[doc = "Required features: `\"Windows_Foundation_Collections\"`"]
    #[cfg(feature = "Windows_Foundation_Collections")]
    pub fn Clear(&self) -> ::windows_core::Result<()> {
        let this = &::windows_core::ComInterface::cast::<
            ::windows::Foundation::Collections::IMap<
                ::windows_core::IInspectable,
                ::windows_core::IInspectable,
            >,
        >(self)?;
        unsafe {
            (::windows_core::Interface::vtable(this).Clear)(::windows_core::Interface::as_raw(this))
                .ok()
        }
    }
    #[doc = "Required features: `\"Windows_Foundation\"`"]
    #[cfg(feature = "Windows_Foundation")]
    pub fn Source(&self) -> ::windows_core::Result<::windows::Foundation::Uri> {
        let this = &::windows_core::ComInterface::cast::<IResourceDictionary>(self)?;
        unsafe {
            let mut result__ = ::std::mem::zeroed();
            (::windows_core::Interface::vtable(this).Source)(
                ::windows_core::Interface::as_raw(this),
                &mut result__,
            )
            .from_abi(result__)
        }
    }
    #[doc = "Required features: `\"Windows_Foundation\"`"]
    #[cfg(feature = "Windows_Foundation")]
    pub fn SetSource<P0>(&self, value: P0) -> ::windows_core::Result<()>
    where
        P0: ::windows_core::IntoParam<::windows::Foundation::Uri>,
    {
        let this = &::windows_core::ComInterface::cast::<IResourceDictionary>(self)?;
        unsafe {
            (::windows_core::Interface::vtable(this).SetSource)(
                ::windows_core::Interface::as_raw(this),
                value.into_param().abi(),
            )
            .ok()
        }
    }
    #[doc = "Required features: `\"Windows_Foundation_Collections\"`"]
    #[cfg(feature = "Windows_Foundation_Collections")]
    pub fn MergedDictionaries(
        &self,
    ) -> ::windows_core::Result<::windows::Foundation::Collections::IVector<ResourceDictionary>>
    {
        let this = &::windows_core::ComInterface::cast::<IResourceDictionary>(self)?;
        unsafe {
            let mut result__ = ::std::mem::zeroed();
            (::windows_core::Interface::vtable(this).MergedDictionaries)(
                ::windows_core::Interface::as_raw(this),
                &mut result__,
            )
            .from_abi(result__)
        }
    }
    #[doc = "Required features: `\"Windows_Foundation_Collections\"`"]
    #[cfg(feature = "Windows_Foundation_Collections")]
    pub fn ThemeDictionaries(
        &self,
    ) -> ::windows_core::Result<
        ::windows::Foundation::Collections::IMap<
            ::windows_core::IInspectable,
            ::windows_core::IInspectable,
        >,
    > {
        let this = &::windows_core::ComInterface::cast::<IResourceDictionary>(self)?;
        unsafe {
            let mut result__ = ::std::mem::zeroed();
            (::windows_core::Interface::vtable(this).ThemeDictionaries)(
                ::windows_core::Interface::as_raw(this),
                &mut result__,
            )
            .from_abi(result__)
        }
    }
    #[doc(hidden)]
    pub fn IColorPaletteResourcesFactory<
        R,
        F: FnOnce(&IColorPaletteResourcesFactory) -> ::windows_core::Result<R>,
    >(
        callback: F,
    ) -> ::windows_core::Result<R> {
        static SHARED: ::windows_core::imp::FactoryCache<
            ColorPaletteResources,
            IColorPaletteResourcesFactory,
        > = ::windows_core::imp::FactoryCache::new();
        SHARED.call(callback)
    }
}
impl ::windows_core::RuntimeType for ColorPaletteResources {
    const SIGNATURE: ::windows_core::imp::ConstBuffer =
        ::windows_core::imp::ConstBuffer::for_class::<Self>();
}
unsafe impl ::windows_core::Interface for ColorPaletteResources {
    type Vtable = IColorPaletteResources_Vtbl;
}
unsafe impl ::windows_core::ComInterface for ColorPaletteResources {
    const IID: ::windows_core::GUID = <IColorPaletteResources as ::windows_core::ComInterface>::IID;
}
impl ::windows_core::RuntimeName for ColorPaletteResources {
    const NAME: &'static str = "Microsoft.UI.Xaml.ColorPaletteResources";
}
#[cfg(feature = "Windows_Foundation_Collections")]
impl ::core::iter::IntoIterator for ColorPaletteResources {
    type Item = ::windows::Foundation::Collections::IKeyValuePair<
        ::windows_core::IInspectable,
        ::windows_core::IInspectable,
    >;
    type IntoIter = ::windows::Foundation::Collections::IIterator<Self::Item>;
    fn into_iter(self) -> Self::IntoIter {
        ::core::iter::IntoIterator::into_iter(&self)
    }
}
#[cfg(feature = "Windows_Foundation_Collections")]
impl ::core::iter::IntoIterator for &ColorPaletteResources {
    type Item = ::windows::Foundation::Collections::IKeyValuePair<
        ::windows_core::IInspectable,
        ::windows_core::IInspectable,
    >;
    type IntoIter = ::windows::Foundation::Collections::IIterator<Self::Item>;
    fn into_iter(self) -> Self::IntoIter {
        self.First().unwrap()
    }
}
::windows_core::imp::interface_hierarchy!(
    ColorPaletteResources,
    ::windows_core::IUnknown,
    ::windows_core::IInspectable
);
#[cfg(feature = "Windows_Foundation_Collections")]
impl
    ::windows_core::CanTryInto<
        ::windows::Foundation::Collections::IIterable<
            ::windows::Foundation::Collections::IKeyValuePair<
                ::windows_core::IInspectable,
                ::windows_core::IInspectable,
            >,
        >,
    > for ColorPaletteResources
{
}
#[cfg(feature = "Windows_Foundation_Collections")]
impl
    ::windows_core::CanTryInto<
        ::windows::Foundation::Collections::IMap<
            ::windows_core::IInspectable,
            ::windows_core::IInspectable,
        >,
    > for ColorPaletteResources
{
}
impl ::windows_core::CanTryInto<ResourceDictionary> for ColorPaletteResources {}
impl ::windows_core::CanTryInto<DependencyObject> for ColorPaletteResources {}
unsafe impl ::core::marker::Send for ColorPaletteResources {}
unsafe impl ::core::marker::Sync for ColorPaletteResources {}
#[repr(transparent)]
#[derive(::core::cmp::PartialEq, ::core::cmp::Eq, ::core::fmt::Debug, ::core::clone::Clone)]
pub struct CornerRadiusHelper(::windows_core::IUnknown);
impl CornerRadiusHelper {
    pub fn FromRadii(
        topleft: f64,
        topright: f64,
        bottomright: f64,
        bottomleft: f64,
    ) -> ::windows_core::Result<CornerRadius> {
        Self::ICornerRadiusHelperStatics(|this| unsafe {
            let mut result__ = ::std::mem::zeroed();
            (::windows_core::Interface::vtable(this).FromRadii)(
                ::windows_core::Interface::as_raw(this),
                topleft,
                topright,
                bottomright,
                bottomleft,
                &mut result__,
            )
            .from_abi(result__)
        })
    }
    pub fn FromUniformRadius(uniformradius: f64) -> ::windows_core::Result<CornerRadius> {
        Self::ICornerRadiusHelperStatics(|this| unsafe {
            let mut result__ = ::std::mem::zeroed();
            (::windows_core::Interface::vtable(this).FromUniformRadius)(
                ::windows_core::Interface::as_raw(this),
                uniformradius,
                &mut result__,
            )
            .from_abi(result__)
        })
    }
    #[doc(hidden)]
    pub fn ICornerRadiusHelperStatics<
        R,
        F: FnOnce(&ICornerRadiusHelperStatics) -> ::windows_core::Result<R>,
    >(
        callback: F,
    ) -> ::windows_core::Result<R> {
        static SHARED: ::windows_core::imp::FactoryCache<
            CornerRadiusHelper,
            ICornerRadiusHelperStatics,
        > = ::windows_core::imp::FactoryCache::new();
        SHARED.call(callback)
    }
}
impl ::windows_core::RuntimeType for CornerRadiusHelper {
    const SIGNATURE: ::windows_core::imp::ConstBuffer =
        ::windows_core::imp::ConstBuffer::for_class::<Self>();
}
unsafe impl ::windows_core::Interface for CornerRadiusHelper {
    type Vtable = ICornerRadiusHelper_Vtbl;
}
unsafe impl ::windows_core::ComInterface for CornerRadiusHelper {
    const IID: ::windows_core::GUID = <ICornerRadiusHelper as ::windows_core::ComInterface>::IID;
}
impl ::windows_core::RuntimeName for CornerRadiusHelper {
    const NAME: &'static str = "Microsoft.UI.Xaml.CornerRadiusHelper";
}
::windows_core::imp::interface_hierarchy!(
    CornerRadiusHelper,
    ::windows_core::IUnknown,
    ::windows_core::IInspectable
);
unsafe impl ::core::marker::Send for CornerRadiusHelper {}
unsafe impl ::core::marker::Sync for CornerRadiusHelper {}
#[repr(transparent)]
#[derive(::core::cmp::PartialEq, ::core::cmp::Eq, ::core::fmt::Debug, ::core::clone::Clone)]
pub struct DataContextChangedEventArgs(::windows_core::IUnknown);
impl DataContextChangedEventArgs {
    pub fn NewValue(&self) -> ::windows_core::Result<::windows_core::IInspectable> {
        let this = self;
        unsafe {
            let mut result__ = ::std::mem::zeroed();
            (::windows_core::Interface::vtable(this).NewValue)(
                ::windows_core::Interface::as_raw(this),
                &mut result__,
            )
            .from_abi(result__)
        }
    }
    pub fn Handled(&self) -> ::windows_core::Result<bool> {
        let this = self;
        unsafe {
            let mut result__ = ::std::mem::zeroed();
            (::windows_core::Interface::vtable(this).Handled)(
                ::windows_core::Interface::as_raw(this),
                &mut result__,
            )
            .from_abi(result__)
        }
    }
    pub fn SetHandled(&self, value: bool) -> ::windows_core::Result<()> {
        let this = self;
        unsafe {
            (::windows_core::Interface::vtable(this).SetHandled)(
                ::windows_core::Interface::as_raw(this),
                value,
            )
            .ok()
        }
    }
}
impl ::windows_core::RuntimeType for DataContextChangedEventArgs {
    const SIGNATURE: ::windows_core::imp::ConstBuffer =
        ::windows_core::imp::ConstBuffer::for_class::<Self>();
}
unsafe impl ::windows_core::Interface for DataContextChangedEventArgs {
    type Vtable = IDataContextChangedEventArgs_Vtbl;
}
unsafe impl ::windows_core::ComInterface for DataContextChangedEventArgs {
    const IID: ::windows_core::GUID =
        <IDataContextChangedEventArgs as ::windows_core::ComInterface>::IID;
}
impl ::windows_core::RuntimeName for DataContextChangedEventArgs {
    const NAME: &'static str = "Microsoft.UI.Xaml.DataContextChangedEventArgs";
}
::windows_core::imp::interface_hierarchy!(
    DataContextChangedEventArgs,
    ::windows_core::IUnknown,
    ::windows_core::IInspectable
);
unsafe impl ::core::marker::Send for DataContextChangedEventArgs {}
unsafe impl ::core::marker::Sync for DataContextChangedEventArgs {}
#[repr(transparent)]
#[derive(::core::cmp::PartialEq, ::core::cmp::Eq, ::core::fmt::Debug, ::core::clone::Clone)]
pub struct DataTemplate(::windows_core::IUnknown);
impl DataTemplate {
    pub fn LoadContent(&self) -> ::windows_core::Result<DependencyObject> {
        let this = self;
        unsafe {
            let mut result__ = ::std::mem::zeroed();
            (::windows_core::Interface::vtable(this).LoadContent)(
                ::windows_core::Interface::as_raw(this),
                &mut result__,
            )
            .from_abi(result__)
        }
    }
    pub unsafe fn CreateInstance<P0>(
        baseinterface: P0,
        innerinterface: &mut ::core::option::Option<::windows_core::IInspectable>,
    ) -> ::windows_core::Result<DataTemplate>
    where
        P0: ::windows_core::IntoParam<::windows_core::IInspectable>,
    {
        Self::IDataTemplateFactory(|this| unsafe {
            let mut result__ = ::std::mem::zeroed();
            (::windows_core::Interface::vtable(this).CreateInstance)(
                ::windows_core::Interface::as_raw(this),
                baseinterface.into_param().abi(),
                innerinterface as *mut _ as _,
                &mut result__,
            )
            .from_abi(result__)
        })
    }
    pub fn ExtensionInstanceProperty() -> ::windows_core::Result<DependencyProperty> {
        Self::IDataTemplateStatics(|this| unsafe {
            let mut result__ = ::std::mem::zeroed();
            (::windows_core::Interface::vtable(this).ExtensionInstanceProperty)(
                ::windows_core::Interface::as_raw(this),
                &mut result__,
            )
            .from_abi(result__)
        })
    }
    pub fn GetExtensionInstance<P0>(element: P0) -> ::windows_core::Result<IDataTemplateExtension>
    where
        P0: ::windows_core::TryIntoParam<FrameworkElement>,
    {
        Self::IDataTemplateStatics(|this| unsafe {
            let mut result__ = ::std::mem::zeroed();
            (::windows_core::Interface::vtable(this).GetExtensionInstance)(
                ::windows_core::Interface::as_raw(this),
                element.try_into_param()?.abi(),
                &mut result__,
            )
            .from_abi(result__)
        })
    }
    pub fn SetExtensionInstance<P0, P1>(element: P0, value: P1) -> ::windows_core::Result<()>
    where
        P0: ::windows_core::TryIntoParam<FrameworkElement>,
        P1: ::windows_core::TryIntoParam<IDataTemplateExtension>,
    {
        Self::IDataTemplateStatics(|this| unsafe {
            (::windows_core::Interface::vtable(this).SetExtensionInstance)(
                ::windows_core::Interface::as_raw(this),
                element.try_into_param()?.abi(),
                value.try_into_param()?.abi(),
            )
            .ok()
        })
    }
    pub fn GetValue<P0>(&self, dp: P0) -> ::windows_core::Result<::windows_core::IInspectable>
    where
        P0: ::windows_core::IntoParam<DependencyProperty>,
    {
        let this = &::windows_core::ComInterface::cast::<IDependencyObject>(self)?;
        unsafe {
            let mut result__ = ::std::mem::zeroed();
            (::windows_core::Interface::vtable(this).GetValue)(
                ::windows_core::Interface::as_raw(this),
                dp.into_param().abi(),
                &mut result__,
            )
            .from_abi(result__)
        }
    }
    pub fn SetValue<P0, P1>(&self, dp: P0, value: P1) -> ::windows_core::Result<()>
    where
        P0: ::windows_core::IntoParam<DependencyProperty>,
        P1: ::windows_core::IntoParam<::windows_core::IInspectable>,
    {
        let this = &::windows_core::ComInterface::cast::<IDependencyObject>(self)?;
        unsafe {
            (::windows_core::Interface::vtable(this).SetValue)(
                ::windows_core::Interface::as_raw(this),
                dp.into_param().abi(),
                value.into_param().abi(),
            )
            .ok()
        }
    }
    pub fn ClearValue<P0>(&self, dp: P0) -> ::windows_core::Result<()>
    where
        P0: ::windows_core::IntoParam<DependencyProperty>,
    {
        let this = &::windows_core::ComInterface::cast::<IDependencyObject>(self)?;
        unsafe {
            (::windows_core::Interface::vtable(this).ClearValue)(
                ::windows_core::Interface::as_raw(this),
                dp.into_param().abi(),
            )
            .ok()
        }
    }
    pub fn ReadLocalValue<P0>(&self, dp: P0) -> ::windows_core::Result<::windows_core::IInspectable>
    where
        P0: ::windows_core::IntoParam<DependencyProperty>,
    {
        let this = &::windows_core::ComInterface::cast::<IDependencyObject>(self)?;
        unsafe {
            let mut result__ = ::std::mem::zeroed();
            (::windows_core::Interface::vtable(this).ReadLocalValue)(
                ::windows_core::Interface::as_raw(this),
                dp.into_param().abi(),
                &mut result__,
            )
            .from_abi(result__)
        }
    }
    pub fn GetAnimationBaseValue<P0>(
        &self,
        dp: P0,
    ) -> ::windows_core::Result<::windows_core::IInspectable>
    where
        P0: ::windows_core::IntoParam<DependencyProperty>,
    {
        let this = &::windows_core::ComInterface::cast::<IDependencyObject>(self)?;
        unsafe {
            let mut result__ = ::std::mem::zeroed();
            (::windows_core::Interface::vtable(this).GetAnimationBaseValue)(
                ::windows_core::Interface::as_raw(this),
                dp.into_param().abi(),
                &mut result__,
            )
            .from_abi(result__)
        }
    }
    pub fn RegisterPropertyChangedCallback<P0, P1>(
        &self,
        dp: P0,
        callback: P1,
    ) -> ::windows_core::Result<i64>
    where
        P0: ::windows_core::IntoParam<DependencyProperty>,
        P1: ::windows_core::IntoParam<DependencyPropertyChangedCallback>,
    {
        let this = &::windows_core::ComInterface::cast::<IDependencyObject>(self)?;
        unsafe {
            let mut result__ = ::std::mem::zeroed();
            (::windows_core::Interface::vtable(this).RegisterPropertyChangedCallback)(
                ::windows_core::Interface::as_raw(this),
                dp.into_param().abi(),
                callback.into_param().abi(),
                &mut result__,
            )
            .from_abi(result__)
        }
    }
    pub fn UnregisterPropertyChangedCallback<P0>(
        &self,
        dp: P0,
        token: i64,
    ) -> ::windows_core::Result<()>
    where
        P0: ::windows_core::IntoParam<DependencyProperty>,
    {
        let this = &::windows_core::ComInterface::cast::<IDependencyObject>(self)?;
        unsafe {
            (::windows_core::Interface::vtable(this).UnregisterPropertyChangedCallback)(
                ::windows_core::Interface::as_raw(this),
                dp.into_param().abi(),
                token,
            )
            .ok()
        }
    }
    #[doc = "Required features: `\"Windows_UI_Core\"`"]
    #[cfg(feature = "Windows_UI_Core")]
    pub fn Dispatcher(&self) -> ::windows_core::Result<::windows::UI::Core::CoreDispatcher> {
        let this = &::windows_core::ComInterface::cast::<IDependencyObject>(self)?;
        unsafe {
            let mut result__ = ::std::mem::zeroed();
            (::windows_core::Interface::vtable(this).Dispatcher)(
                ::windows_core::Interface::as_raw(this),
                &mut result__,
            )
            .from_abi(result__)
        }
    }
    #[doc = "Required features: `\"Microsoft_UI_Dispatching\"`"]
    #[cfg(feature = "Microsoft_UI_Dispatching")]
    pub fn DispatcherQueue(&self) -> ::windows_core::Result<super::Dispatching::DispatcherQueue> {
        let this = &::windows_core::ComInterface::cast::<IDependencyObject>(self)?;
        unsafe {
            let mut result__ = ::std::mem::zeroed();
            (::windows_core::Interface::vtable(this).DispatcherQueue)(
                ::windows_core::Interface::as_raw(this),
                &mut result__,
            )
            .from_abi(result__)
        }
    }
    pub fn GetElement<P0>(&self, args: P0) -> ::windows_core::Result<UIElement>
    where
        P0: ::windows_core::TryIntoParam<ElementFactoryGetArgs>,
    {
        let this = &::windows_core::ComInterface::cast::<IElementFactory>(self)?;
        unsafe {
            let mut result__ = ::std::mem::zeroed();
            (::windows_core::Interface::vtable(this).GetElement)(
                ::windows_core::Interface::as_raw(this),
                args.try_into_param()?.abi(),
                &mut result__,
            )
            .from_abi(result__)
        }
    }
    pub fn RecycleElement<P0>(&self, args: P0) -> ::windows_core::Result<()>
    where
        P0: ::windows_core::TryIntoParam<ElementFactoryRecycleArgs>,
    {
        let this = &::windows_core::ComInterface::cast::<IElementFactory>(self)?;
        unsafe {
            (::windows_core::Interface::vtable(this).RecycleElement)(
                ::windows_core::Interface::as_raw(this),
                args.try_into_param()?.abi(),
            )
            .ok()
        }
    }
    #[doc(hidden)]
    pub fn IDataTemplateFactory<
        R,
        F: FnOnce(&IDataTemplateFactory) -> ::windows_core::Result<R>,
    >(
        callback: F,
    ) -> ::windows_core::Result<R> {
        static SHARED: ::windows_core::imp::FactoryCache<DataTemplate, IDataTemplateFactory> =
            ::windows_core::imp::FactoryCache::new();
        SHARED.call(callback)
    }
    #[doc(hidden)]
    pub fn IDataTemplateStatics<
        R,
        F: FnOnce(&IDataTemplateStatics) -> ::windows_core::Result<R>,
    >(
        callback: F,
    ) -> ::windows_core::Result<R> {
        static SHARED: ::windows_core::imp::FactoryCache<DataTemplate, IDataTemplateStatics> =
            ::windows_core::imp::FactoryCache::new();
        SHARED.call(callback)
    }
}
impl ::windows_core::RuntimeType for DataTemplate {
    const SIGNATURE: ::windows_core::imp::ConstBuffer =
        ::windows_core::imp::ConstBuffer::for_class::<Self>();
}
unsafe impl ::windows_core::Interface for DataTemplate {
    type Vtable = IDataTemplate_Vtbl;
}
unsafe impl ::windows_core::ComInterface for DataTemplate {
    const IID: ::windows_core::GUID = <IDataTemplate as ::windows_core::ComInterface>::IID;
}
impl ::windows_core::RuntimeName for DataTemplate {
    const NAME: &'static str = "Microsoft.UI.Xaml.DataTemplate";
}
::windows_core::imp::interface_hierarchy!(
    DataTemplate,
    ::windows_core::IUnknown,
    ::windows_core::IInspectable
);
impl ::windows_core::CanTryInto<IElementFactory> for DataTemplate {}
impl ::windows_core::CanTryInto<FrameworkTemplate> for DataTemplate {}
impl ::windows_core::CanTryInto<DependencyObject> for DataTemplate {}
unsafe impl ::core::marker::Send for DataTemplate {}
unsafe impl ::core::marker::Sync for DataTemplate {}
#[repr(transparent)]
#[derive(::core::cmp::PartialEq, ::core::cmp::Eq, ::core::fmt::Debug, ::core::clone::Clone)]
pub struct DataTemplateKey(::windows_core::IUnknown);
impl DataTemplateKey {
    pub fn DataType(&self) -> ::windows_core::Result<::windows_core::IInspectable> {
        let this = self;
        unsafe {
            let mut result__ = ::std::mem::zeroed();
            (::windows_core::Interface::vtable(this).DataType)(
                ::windows_core::Interface::as_raw(this),
                &mut result__,
            )
            .from_abi(result__)
        }
    }
    pub fn SetDataType<P0>(&self, value: P0) -> ::windows_core::Result<()>
    where
        P0: ::windows_core::IntoParam<::windows_core::IInspectable>,
    {
        let this = self;
        unsafe {
            (::windows_core::Interface::vtable(this).SetDataType)(
                ::windows_core::Interface::as_raw(this),
                value.into_param().abi(),
            )
            .ok()
        }
    }
    pub unsafe fn CreateInstance<P0>(
        baseinterface: P0,
        innerinterface: &mut ::core::option::Option<::windows_core::IInspectable>,
    ) -> ::windows_core::Result<DataTemplateKey>
    where
        P0: ::windows_core::IntoParam<::windows_core::IInspectable>,
    {
        Self::IDataTemplateKeyFactory(|this| unsafe {
            let mut result__ = ::std::mem::zeroed();
            (::windows_core::Interface::vtable(this).CreateInstance)(
                ::windows_core::Interface::as_raw(this),
                baseinterface.into_param().abi(),
                innerinterface as *mut _ as _,
                &mut result__,
            )
            .from_abi(result__)
        })
    }
    pub unsafe fn CreateInstanceWithType<P0, P1>(
        datatype: P0,
        baseinterface: P1,
        innerinterface: &mut ::core::option::Option<::windows_core::IInspectable>,
    ) -> ::windows_core::Result<DataTemplateKey>
    where
        P0: ::windows_core::IntoParam<::windows_core::IInspectable>,
        P1: ::windows_core::IntoParam<::windows_core::IInspectable>,
    {
        Self::IDataTemplateKeyFactory(|this| unsafe {
            let mut result__ = ::std::mem::zeroed();
            (::windows_core::Interface::vtable(this).CreateInstanceWithType)(
                ::windows_core::Interface::as_raw(this),
                datatype.into_param().abi(),
                baseinterface.into_param().abi(),
                innerinterface as *mut _ as _,
                &mut result__,
            )
            .from_abi(result__)
        })
    }
    #[doc(hidden)]
    pub fn IDataTemplateKeyFactory<
        R,
        F: FnOnce(&IDataTemplateKeyFactory) -> ::windows_core::Result<R>,
    >(
        callback: F,
    ) -> ::windows_core::Result<R> {
        static SHARED: ::windows_core::imp::FactoryCache<DataTemplateKey, IDataTemplateKeyFactory> =
            ::windows_core::imp::FactoryCache::new();
        SHARED.call(callback)
    }
}
impl ::windows_core::RuntimeType for DataTemplateKey {
    const SIGNATURE: ::windows_core::imp::ConstBuffer =
        ::windows_core::imp::ConstBuffer::for_class::<Self>();
}
unsafe impl ::windows_core::Interface for DataTemplateKey {
    type Vtable = IDataTemplateKey_Vtbl;
}
unsafe impl ::windows_core::ComInterface for DataTemplateKey {
    const IID: ::windows_core::GUID = <IDataTemplateKey as ::windows_core::ComInterface>::IID;
}
impl ::windows_core::RuntimeName for DataTemplateKey {
    const NAME: &'static str = "Microsoft.UI.Xaml.DataTemplateKey";
}
::windows_core::imp::interface_hierarchy!(
    DataTemplateKey,
    ::windows_core::IUnknown,
    ::windows_core::IInspectable
);
unsafe impl ::core::marker::Send for DataTemplateKey {}
unsafe impl ::core::marker::Sync for DataTemplateKey {}
#[repr(transparent)]
#[derive(::core::cmp::PartialEq, ::core::cmp::Eq, ::core::fmt::Debug, ::core::clone::Clone)]
pub struct DebugSettings(::windows_core::IUnknown);
impl DebugSettings {
    pub fn EnableFrameRateCounter(&self) -> ::windows_core::Result<bool> {
        let this = self;
        unsafe {
            let mut result__ = ::std::mem::zeroed();
            (::windows_core::Interface::vtable(this).EnableFrameRateCounter)(
                ::windows_core::Interface::as_raw(this),
                &mut result__,
            )
            .from_abi(result__)
        }
    }
    pub fn SetEnableFrameRateCounter(&self, value: bool) -> ::windows_core::Result<()> {
        let this = self;
        unsafe {
            (::windows_core::Interface::vtable(this).SetEnableFrameRateCounter)(
                ::windows_core::Interface::as_raw(this),
                value,
            )
            .ok()
        }
    }
    pub fn IsBindingTracingEnabled(&self) -> ::windows_core::Result<bool> {
        let this = self;
        unsafe {
            let mut result__ = ::std::mem::zeroed();
            (::windows_core::Interface::vtable(this).IsBindingTracingEnabled)(
                ::windows_core::Interface::as_raw(this),
                &mut result__,
            )
            .from_abi(result__)
        }
    }
    pub fn SetIsBindingTracingEnabled(&self, value: bool) -> ::windows_core::Result<()> {
        let this = self;
        unsafe {
            (::windows_core::Interface::vtable(this).SetIsBindingTracingEnabled)(
                ::windows_core::Interface::as_raw(this),
                value,
            )
            .ok()
        }
    }
    pub fn IsTextPerformanceVisualizationEnabled(&self) -> ::windows_core::Result<bool> {
        let this = self;
        unsafe {
            let mut result__ = ::std::mem::zeroed();
            (::windows_core::Interface::vtable(this).IsTextPerformanceVisualizationEnabled)(
                ::windows_core::Interface::as_raw(this),
                &mut result__,
            )
            .from_abi(result__)
        }
    }
    pub fn SetIsTextPerformanceVisualizationEnabled(
        &self,
        value: bool,
    ) -> ::windows_core::Result<()> {
        let this = self;
        unsafe {
            (::windows_core::Interface::vtable(this).SetIsTextPerformanceVisualizationEnabled)(
                ::windows_core::Interface::as_raw(this),
                value,
            )
            .ok()
        }
    }
    pub fn FailFastOnErrors(&self) -> ::windows_core::Result<bool> {
        let this = self;
        unsafe {
            let mut result__ = ::std::mem::zeroed();
            (::windows_core::Interface::vtable(this).FailFastOnErrors)(
                ::windows_core::Interface::as_raw(this),
                &mut result__,
            )
            .from_abi(result__)
        }
    }
    pub fn SetFailFastOnErrors(&self, value: bool) -> ::windows_core::Result<()> {
        let this = self;
        unsafe {
            (::windows_core::Interface::vtable(this).SetFailFastOnErrors)(
                ::windows_core::Interface::as_raw(this),
                value,
            )
            .ok()
        }
    }
    #[doc = "Required features: `\"Windows_Foundation\"`"]
    #[cfg(feature = "Windows_Foundation")]
    pub fn BindingFailed<P0>(
        &self,
        handler: P0,
    ) -> ::windows_core::Result<::windows::Foundation::EventRegistrationToken>
    where
        P0: ::windows_core::IntoParam<BindingFailedEventHandler>,
    {
        let this = self;
        unsafe {
            let mut result__ = ::std::mem::zeroed();
            (::windows_core::Interface::vtable(this).BindingFailed)(
                ::windows_core::Interface::as_raw(this),
                handler.into_param().abi(),
                &mut result__,
            )
            .from_abi(result__)
        }
    }
    #[doc = "Required features: `\"Windows_Foundation\"`"]
    #[cfg(feature = "Windows_Foundation")]
    pub fn RemoveBindingFailed(
        &self,
        token: ::windows::Foundation::EventRegistrationToken,
    ) -> ::windows_core::Result<()> {
        let this = self;
        unsafe {
            (::windows_core::Interface::vtable(this).RemoveBindingFailed)(
                ::windows_core::Interface::as_raw(this),
                token,
            )
            .ok()
        }
    }
    pub fn IsXamlResourceReferenceTracingEnabled(&self) -> ::windows_core::Result<bool> {
        let this = &::windows_core::ComInterface::cast::<IDebugSettings2>(self)?;
        unsafe {
            let mut result__ = ::std::mem::zeroed();
            (::windows_core::Interface::vtable(this).IsXamlResourceReferenceTracingEnabled)(
                ::windows_core::Interface::as_raw(this),
                &mut result__,
            )
            .from_abi(result__)
        }
    }
    pub fn SetIsXamlResourceReferenceTracingEnabled(
        &self,
        value: bool,
    ) -> ::windows_core::Result<()> {
        let this = &::windows_core::ComInterface::cast::<IDebugSettings2>(self)?;
        unsafe {
            (::windows_core::Interface::vtable(this).SetIsXamlResourceReferenceTracingEnabled)(
                ::windows_core::Interface::as_raw(this),
                value,
            )
            .ok()
        }
    }
    #[doc = "Required features: `\"Windows_Foundation\"`"]
    #[cfg(feature = "Windows_Foundation")]
    pub fn XamlResourceReferenceFailed<P0>(
        &self,
        handler: P0,
    ) -> ::windows_core::Result<::windows::Foundation::EventRegistrationToken>
    where
        P0: ::windows_core::IntoParam<
            ::windows::Foundation::TypedEventHandler<
                DebugSettings,
                XamlResourceReferenceFailedEventArgs,
            >,
        >,
    {
        let this = &::windows_core::ComInterface::cast::<IDebugSettings2>(self)?;
        unsafe {
            let mut result__ = ::std::mem::zeroed();
            (::windows_core::Interface::vtable(this).XamlResourceReferenceFailed)(
                ::windows_core::Interface::as_raw(this),
                handler.into_param().abi(),
                &mut result__,
            )
            .from_abi(result__)
        }
    }
    #[doc = "Required features: `\"Windows_Foundation\"`"]
    #[cfg(feature = "Windows_Foundation")]
    pub fn RemoveXamlResourceReferenceFailed(
        &self,
        token: ::windows::Foundation::EventRegistrationToken,
    ) -> ::windows_core::Result<()> {
        let this = &::windows_core::ComInterface::cast::<IDebugSettings2>(self)?;
        unsafe {
            (::windows_core::Interface::vtable(this).RemoveXamlResourceReferenceFailed)(
                ::windows_core::Interface::as_raw(this),
                token,
            )
            .ok()
        }
    }
}
impl ::windows_core::RuntimeType for DebugSettings {
    const SIGNATURE: ::windows_core::imp::ConstBuffer =
        ::windows_core::imp::ConstBuffer::for_class::<Self>();
}
unsafe impl ::windows_core::Interface for DebugSettings {
    type Vtable = IDebugSettings_Vtbl;
}
unsafe impl ::windows_core::ComInterface for DebugSettings {
    const IID: ::windows_core::GUID = <IDebugSettings as ::windows_core::ComInterface>::IID;
}
impl ::windows_core::RuntimeName for DebugSettings {
    const NAME: &'static str = "Microsoft.UI.Xaml.DebugSettings";
}
::windows_core::imp::interface_hierarchy!(
    DebugSettings,
    ::windows_core::IUnknown,
    ::windows_core::IInspectable
);
unsafe impl ::core::marker::Send for DebugSettings {}
unsafe impl ::core::marker::Sync for DebugSettings {}
#[repr(transparent)]
#[derive(::core::cmp::PartialEq, ::core::cmp::Eq, ::core::fmt::Debug, ::core::clone::Clone)]
pub struct DependencyObject(::windows_core::IUnknown);
impl DependencyObject {
    pub fn GetValue<P0>(&self, dp: P0) -> ::windows_core::Result<::windows_core::IInspectable>
    where
        P0: ::windows_core::IntoParam<DependencyProperty>,
    {
        let this = self;
        unsafe {
            let mut result__ = ::std::mem::zeroed();
            (::windows_core::Interface::vtable(this).GetValue)(
                ::windows_core::Interface::as_raw(this),
                dp.into_param().abi(),
                &mut result__,
            )
            .from_abi(result__)
        }
    }
    pub fn SetValue<P0, P1>(&self, dp: P0, value: P1) -> ::windows_core::Result<()>
    where
        P0: ::windows_core::IntoParam<DependencyProperty>,
        P1: ::windows_core::IntoParam<::windows_core::IInspectable>,
    {
        let this = self;
        unsafe {
            (::windows_core::Interface::vtable(this).SetValue)(
                ::windows_core::Interface::as_raw(this),
                dp.into_param().abi(),
                value.into_param().abi(),
            )
            .ok()
        }
    }
    pub fn ClearValue<P0>(&self, dp: P0) -> ::windows_core::Result<()>
    where
        P0: ::windows_core::IntoParam<DependencyProperty>,
    {
        let this = self;
        unsafe {
            (::windows_core::Interface::vtable(this).ClearValue)(
                ::windows_core::Interface::as_raw(this),
                dp.into_param().abi(),
            )
            .ok()
        }
    }
    pub fn ReadLocalValue<P0>(&self, dp: P0) -> ::windows_core::Result<::windows_core::IInspectable>
    where
        P0: ::windows_core::IntoParam<DependencyProperty>,
    {
        let this = self;
        unsafe {
            let mut result__ = ::std::mem::zeroed();
            (::windows_core::Interface::vtable(this).ReadLocalValue)(
                ::windows_core::Interface::as_raw(this),
                dp.into_param().abi(),
                &mut result__,
            )
            .from_abi(result__)
        }
    }
    pub fn GetAnimationBaseValue<P0>(
        &self,
        dp: P0,
    ) -> ::windows_core::Result<::windows_core::IInspectable>
    where
        P0: ::windows_core::IntoParam<DependencyProperty>,
    {
        let this = self;
        unsafe {
            let mut result__ = ::std::mem::zeroed();
            (::windows_core::Interface::vtable(this).GetAnimationBaseValue)(
                ::windows_core::Interface::as_raw(this),
                dp.into_param().abi(),
                &mut result__,
            )
            .from_abi(result__)
        }
    }
    pub fn RegisterPropertyChangedCallback<P0, P1>(
        &self,
        dp: P0,
        callback: P1,
    ) -> ::windows_core::Result<i64>
    where
        P0: ::windows_core::IntoParam<DependencyProperty>,
        P1: ::windows_core::IntoParam<DependencyPropertyChangedCallback>,
    {
        let this = self;
        unsafe {
            let mut result__ = ::std::mem::zeroed();
            (::windows_core::Interface::vtable(this).RegisterPropertyChangedCallback)(
                ::windows_core::Interface::as_raw(this),
                dp.into_param().abi(),
                callback.into_param().abi(),
                &mut result__,
            )
            .from_abi(result__)
        }
    }
    pub fn UnregisterPropertyChangedCallback<P0>(
        &self,
        dp: P0,
        token: i64,
    ) -> ::windows_core::Result<()>
    where
        P0: ::windows_core::IntoParam<DependencyProperty>,
    {
        let this = self;
        unsafe {
            (::windows_core::Interface::vtable(this).UnregisterPropertyChangedCallback)(
                ::windows_core::Interface::as_raw(this),
                dp.into_param().abi(),
                token,
            )
            .ok()
        }
    }
    #[doc = "Required features: `\"Windows_UI_Core\"`"]
    #[cfg(feature = "Windows_UI_Core")]
    pub fn Dispatcher(&self) -> ::windows_core::Result<::windows::UI::Core::CoreDispatcher> {
        let this = self;
        unsafe {
            let mut result__ = ::std::mem::zeroed();
            (::windows_core::Interface::vtable(this).Dispatcher)(
                ::windows_core::Interface::as_raw(this),
                &mut result__,
            )
            .from_abi(result__)
        }
    }
    #[doc = "Required features: `\"Microsoft_UI_Dispatching\"`"]
    #[cfg(feature = "Microsoft_UI_Dispatching")]
    pub fn DispatcherQueue(&self) -> ::windows_core::Result<super::Dispatching::DispatcherQueue> {
        let this = self;
        unsafe {
            let mut result__ = ::std::mem::zeroed();
            (::windows_core::Interface::vtable(this).DispatcherQueue)(
                ::windows_core::Interface::as_raw(this),
                &mut result__,
            )
            .from_abi(result__)
        }
    }
    pub unsafe fn CreateInstance<P0>(
        baseinterface: P0,
        innerinterface: &mut ::core::option::Option<::windows_core::IInspectable>,
    ) -> ::windows_core::Result<DependencyObject>
    where
        P0: ::windows_core::IntoParam<::windows_core::IInspectable>,
    {
        Self::IDependencyObjectFactory(|this| unsafe {
            let mut result__ = ::std::mem::zeroed();
            (::windows_core::Interface::vtable(this).CreateInstance)(
                ::windows_core::Interface::as_raw(this),
                baseinterface.into_param().abi(),
                innerinterface as *mut _ as _,
                &mut result__,
            )
            .from_abi(result__)
        })
    }
    #[doc(hidden)]
    pub fn IDependencyObjectFactory<
        R,
        F: FnOnce(&IDependencyObjectFactory) -> ::windows_core::Result<R>,
    >(
        callback: F,
    ) -> ::windows_core::Result<R> {
        static SHARED: ::windows_core::imp::FactoryCache<
            DependencyObject,
            IDependencyObjectFactory,
        > = ::windows_core::imp::FactoryCache::new();
        SHARED.call(callback)
    }
}
impl ::windows_core::RuntimeType for DependencyObject {
    const SIGNATURE: ::windows_core::imp::ConstBuffer =
        ::windows_core::imp::ConstBuffer::for_class::<Self>();
}
unsafe impl ::windows_core::Interface for DependencyObject {
    type Vtable = IDependencyObject_Vtbl;
}
unsafe impl ::windows_core::ComInterface for DependencyObject {
    const IID: ::windows_core::GUID = <IDependencyObject as ::windows_core::ComInterface>::IID;
}
impl ::windows_core::RuntimeName for DependencyObject {
    const NAME: &'static str = "Microsoft.UI.Xaml.DependencyObject";
}
::windows_core::imp::interface_hierarchy!(
    DependencyObject,
    ::windows_core::IUnknown,
    ::windows_core::IInspectable
);
unsafe impl ::core::marker::Send for DependencyObject {}
unsafe impl ::core::marker::Sync for DependencyObject {}
#[doc = "Required features: `\"Windows_Foundation_Collections\"`"]
#[cfg(feature = "Windows_Foundation_Collections")]
#[repr(transparent)]
#[derive(::core::cmp::PartialEq, ::core::cmp::Eq, ::core::fmt::Debug, ::core::clone::Clone)]
pub struct DependencyObjectCollection(::windows_core::IUnknown);
#[cfg(feature = "Windows_Foundation_Collections")]
impl DependencyObjectCollection {
    pub fn GetValue<P0>(&self, dp: P0) -> ::windows_core::Result<::windows_core::IInspectable>
    where
        P0: ::windows_core::IntoParam<DependencyProperty>,
    {
        let this = &::windows_core::ComInterface::cast::<IDependencyObject>(self)?;
        unsafe {
            let mut result__ = ::std::mem::zeroed();
            (::windows_core::Interface::vtable(this).GetValue)(
                ::windows_core::Interface::as_raw(this),
                dp.into_param().abi(),
                &mut result__,
            )
            .from_abi(result__)
        }
    }
    pub fn SetValue<P0, P1>(&self, dp: P0, value: P1) -> ::windows_core::Result<()>
    where
        P0: ::windows_core::IntoParam<DependencyProperty>,
        P1: ::windows_core::IntoParam<::windows_core::IInspectable>,
    {
        let this = &::windows_core::ComInterface::cast::<IDependencyObject>(self)?;
        unsafe {
            (::windows_core::Interface::vtable(this).SetValue)(
                ::windows_core::Interface::as_raw(this),
                dp.into_param().abi(),
                value.into_param().abi(),
            )
            .ok()
        }
    }
    pub fn ClearValue<P0>(&self, dp: P0) -> ::windows_core::Result<()>
    where
        P0: ::windows_core::IntoParam<DependencyProperty>,
    {
        let this = &::windows_core::ComInterface::cast::<IDependencyObject>(self)?;
        unsafe {
            (::windows_core::Interface::vtable(this).ClearValue)(
                ::windows_core::Interface::as_raw(this),
                dp.into_param().abi(),
            )
            .ok()
        }
    }
    pub fn ReadLocalValue<P0>(&self, dp: P0) -> ::windows_core::Result<::windows_core::IInspectable>
    where
        P0: ::windows_core::IntoParam<DependencyProperty>,
    {
        let this = &::windows_core::ComInterface::cast::<IDependencyObject>(self)?;
        unsafe {
            let mut result__ = ::std::mem::zeroed();
            (::windows_core::Interface::vtable(this).ReadLocalValue)(
                ::windows_core::Interface::as_raw(this),
                dp.into_param().abi(),
                &mut result__,
            )
            .from_abi(result__)
        }
    }
    pub fn GetAnimationBaseValue<P0>(
        &self,
        dp: P0,
    ) -> ::windows_core::Result<::windows_core::IInspectable>
    where
        P0: ::windows_core::IntoParam<DependencyProperty>,
    {
        let this = &::windows_core::ComInterface::cast::<IDependencyObject>(self)?;
        unsafe {
            let mut result__ = ::std::mem::zeroed();
            (::windows_core::Interface::vtable(this).GetAnimationBaseValue)(
                ::windows_core::Interface::as_raw(this),
                dp.into_param().abi(),
                &mut result__,
            )
            .from_abi(result__)
        }
    }
    pub fn RegisterPropertyChangedCallback<P0, P1>(
        &self,
        dp: P0,
        callback: P1,
    ) -> ::windows_core::Result<i64>
    where
        P0: ::windows_core::IntoParam<DependencyProperty>,
        P1: ::windows_core::IntoParam<DependencyPropertyChangedCallback>,
    {
        let this = &::windows_core::ComInterface::cast::<IDependencyObject>(self)?;
        unsafe {
            let mut result__ = ::std::mem::zeroed();
            (::windows_core::Interface::vtable(this).RegisterPropertyChangedCallback)(
                ::windows_core::Interface::as_raw(this),
                dp.into_param().abi(),
                callback.into_param().abi(),
                &mut result__,
            )
            .from_abi(result__)
        }
    }
    pub fn UnregisterPropertyChangedCallback<P0>(
        &self,
        dp: P0,
        token: i64,
    ) -> ::windows_core::Result<()>
    where
        P0: ::windows_core::IntoParam<DependencyProperty>,
    {
        let this = &::windows_core::ComInterface::cast::<IDependencyObject>(self)?;
        unsafe {
            (::windows_core::Interface::vtable(this).UnregisterPropertyChangedCallback)(
                ::windows_core::Interface::as_raw(this),
                dp.into_param().abi(),
                token,
            )
            .ok()
        }
    }
    #[doc = "Required features: `\"Windows_UI_Core\"`"]
    #[cfg(feature = "Windows_UI_Core")]
    pub fn Dispatcher(&self) -> ::windows_core::Result<::windows::UI::Core::CoreDispatcher> {
        let this = &::windows_core::ComInterface::cast::<IDependencyObject>(self)?;
        unsafe {
            let mut result__ = ::std::mem::zeroed();
            (::windows_core::Interface::vtable(this).Dispatcher)(
                ::windows_core::Interface::as_raw(this),
                &mut result__,
            )
            .from_abi(result__)
        }
    }
    #[doc = "Required features: `\"Microsoft_UI_Dispatching\"`"]
    #[cfg(feature = "Microsoft_UI_Dispatching")]
    pub fn DispatcherQueue(&self) -> ::windows_core::Result<super::Dispatching::DispatcherQueue> {
        let this = &::windows_core::ComInterface::cast::<IDependencyObject>(self)?;
        unsafe {
            let mut result__ = ::std::mem::zeroed();
            (::windows_core::Interface::vtable(this).DispatcherQueue)(
                ::windows_core::Interface::as_raw(this),
                &mut result__,
            )
            .from_abi(result__)
        }
    }
    #[doc = "Required features: `\"Windows_Foundation_Collections\"`"]
    #[cfg(feature = "Windows_Foundation_Collections")]
    pub unsafe fn CreateInstance<P0>(
        baseinterface: P0,
        innerinterface: &mut ::core::option::Option<::windows_core::IInspectable>,
    ) -> ::windows_core::Result<DependencyObjectCollection>
    where
        P0: ::windows_core::IntoParam<::windows_core::IInspectable>,
    {
        Self::IDependencyObjectCollectionFactory(|this| unsafe {
            let mut result__ = ::std::mem::zeroed();
            (::windows_core::Interface::vtable(this).CreateInstance)(
                ::windows_core::Interface::as_raw(this),
                baseinterface.into_param().abi(),
                innerinterface as *mut _ as _,
                &mut result__,
            )
            .from_abi(result__)
        })
    }
    #[doc = "Required features: `\"Windows_Foundation_Collections\"`"]
    #[cfg(feature = "Windows_Foundation_Collections")]
    pub fn First(
        &self,
    ) -> ::windows_core::Result<::windows::Foundation::Collections::IIterator<DependencyObject>>
    {
        let this = &::windows_core::ComInterface::cast::<
            ::windows::Foundation::Collections::IIterable<DependencyObject>,
        >(self)?;
        unsafe {
            let mut result__ = ::std::mem::zeroed();
            (::windows_core::Interface::vtable(this).First)(
                ::windows_core::Interface::as_raw(this),
                &mut result__,
            )
            .from_abi(result__)
        }
    }
    #[doc = "Required features: `\"Windows_Foundation_Collections\"`"]
    #[cfg(feature = "Windows_Foundation_Collections")]
    pub fn VectorChanged<P0>(
        &self,
        vhnd: P0,
    ) -> ::windows_core::Result<::windows::Foundation::EventRegistrationToken>
    where
        P0: ::windows_core::IntoParam<
            ::windows::Foundation::Collections::VectorChangedEventHandler<DependencyObject>,
        >,
    {
        let this = self;
        unsafe {
            let mut result__ = ::std::mem::zeroed();
            (::windows_core::Interface::vtable(this).VectorChanged)(
                ::windows_core::Interface::as_raw(this),
                vhnd.into_param().abi(),
                &mut result__,
            )
            .from_abi(result__)
        }
    }
    #[doc = "Required features: `\"Windows_Foundation_Collections\"`"]
    #[cfg(feature = "Windows_Foundation_Collections")]
    pub fn RemoveVectorChanged(
        &self,
        token: ::windows::Foundation::EventRegistrationToken,
    ) -> ::windows_core::Result<()> {
        let this = self;
        unsafe {
            (::windows_core::Interface::vtable(this).RemoveVectorChanged)(
                ::windows_core::Interface::as_raw(this),
                token,
            )
            .ok()
        }
    }
    #[doc = "Required features: `\"Windows_Foundation_Collections\"`"]
    #[cfg(feature = "Windows_Foundation_Collections")]
    pub fn GetAt(&self, index: u32) -> ::windows_core::Result<DependencyObject> {
        let this = &::windows_core::ComInterface::cast::<
            ::windows::Foundation::Collections::IVector<DependencyObject>,
        >(self)?;
        unsafe {
            let mut result__ = ::std::mem::zeroed();
            (::windows_core::Interface::vtable(this).GetAt)(
                ::windows_core::Interface::as_raw(this),
                index,
                &mut result__,
            )
            .from_abi(result__)
        }
    }
    #[doc = "Required features: `\"Windows_Foundation_Collections\"`"]
    #[cfg(feature = "Windows_Foundation_Collections")]
    pub fn Size(&self) -> ::windows_core::Result<u32> {
        let this = &::windows_core::ComInterface::cast::<
            ::windows::Foundation::Collections::IVector<DependencyObject>,
        >(self)?;
        unsafe {
            let mut result__ = ::std::mem::zeroed();
            (::windows_core::Interface::vtable(this).Size)(
                ::windows_core::Interface::as_raw(this),
                &mut result__,
            )
            .from_abi(result__)
        }
    }
    #[doc = "Required features: `\"Windows_Foundation_Collections\"`"]
    #[cfg(feature = "Windows_Foundation_Collections")]
    pub fn GetView(
        &self,
    ) -> ::windows_core::Result<::windows::Foundation::Collections::IVectorView<DependencyObject>>
    {
        let this = &::windows_core::ComInterface::cast::<
            ::windows::Foundation::Collections::IVector<DependencyObject>,
        >(self)?;
        unsafe {
            let mut result__ = ::std::mem::zeroed();
            (::windows_core::Interface::vtable(this).GetView)(
                ::windows_core::Interface::as_raw(this),
                &mut result__,
            )
            .from_abi(result__)
        }
    }
    #[doc = "Required features: `\"Windows_Foundation_Collections\"`"]
    #[cfg(feature = "Windows_Foundation_Collections")]
    pub fn IndexOf<P0>(&self, value: P0, index: &mut u32) -> ::windows_core::Result<bool>
    where
        P0: ::windows_core::TryIntoParam<DependencyObject>,
    {
        let this = &::windows_core::ComInterface::cast::<
            ::windows::Foundation::Collections::IVector<DependencyObject>,
        >(self)?;
        unsafe {
            let mut result__ = ::std::mem::zeroed();
            (::windows_core::Interface::vtable(this).IndexOf)(
                ::windows_core::Interface::as_raw(this),
                value.try_into_param()?.abi(),
                index,
                &mut result__,
            )
            .from_abi(result__)
        }
    }
    #[doc = "Required features: `\"Windows_Foundation_Collections\"`"]
    #[cfg(feature = "Windows_Foundation_Collections")]
    pub fn SetAt<P0>(&self, index: u32, value: P0) -> ::windows_core::Result<()>
    where
        P0: ::windows_core::TryIntoParam<DependencyObject>,
    {
        let this = &::windows_core::ComInterface::cast::<
            ::windows::Foundation::Collections::IVector<DependencyObject>,
        >(self)?;
        unsafe {
            (::windows_core::Interface::vtable(this).SetAt)(
                ::windows_core::Interface::as_raw(this),
                index,
                value.try_into_param()?.abi(),
            )
            .ok()
        }
    }
    #[doc = "Required features: `\"Windows_Foundation_Collections\"`"]
    #[cfg(feature = "Windows_Foundation_Collections")]
    pub fn InsertAt<P0>(&self, index: u32, value: P0) -> ::windows_core::Result<()>
    where
        P0: ::windows_core::TryIntoParam<DependencyObject>,
    {
        let this = &::windows_core::ComInterface::cast::<
            ::windows::Foundation::Collections::IVector<DependencyObject>,
        >(self)?;
        unsafe {
            (::windows_core::Interface::vtable(this).InsertAt)(
                ::windows_core::Interface::as_raw(this),
                index,
                value.try_into_param()?.abi(),
            )
            .ok()
        }
    }
    #[doc = "Required features: `\"Windows_Foundation_Collections\"`"]
    #[cfg(feature = "Windows_Foundation_Collections")]
    pub fn RemoveAt(&self, index: u32) -> ::windows_core::Result<()> {
        let this = &::windows_core::ComInterface::cast::<
            ::windows::Foundation::Collections::IVector<DependencyObject>,
        >(self)?;
        unsafe {
            (::windows_core::Interface::vtable(this).RemoveAt)(
                ::windows_core::Interface::as_raw(this),
                index,
            )
            .ok()
        }
    }
    #[doc = "Required features: `\"Windows_Foundation_Collections\"`"]
    #[cfg(feature = "Windows_Foundation_Collections")]
    pub fn Append<P0>(&self, value: P0) -> ::windows_core::Result<()>
    where
        P0: ::windows_core::TryIntoParam<DependencyObject>,
    {
        let this = &::windows_core::ComInterface::cast::<
            ::windows::Foundation::Collections::IVector<DependencyObject>,
        >(self)?;
        unsafe {
            (::windows_core::Interface::vtable(this).Append)(
                ::windows_core::Interface::as_raw(this),
                value.try_into_param()?.abi(),
            )
            .ok()
        }
    }
    #[doc = "Required features: `\"Windows_Foundation_Collections\"`"]
    #[cfg(feature = "Windows_Foundation_Collections")]
    pub fn RemoveAtEnd(&self) -> ::windows_core::Result<()> {
        let this = &::windows_core::ComInterface::cast::<
            ::windows::Foundation::Collections::IVector<DependencyObject>,
        >(self)?;
        unsafe {
            (::windows_core::Interface::vtable(this).RemoveAtEnd)(
                ::windows_core::Interface::as_raw(this),
            )
            .ok()
        }
    }
    #[doc = "Required features: `\"Windows_Foundation_Collections\"`"]
    #[cfg(feature = "Windows_Foundation_Collections")]
    pub fn Clear(&self) -> ::windows_core::Result<()> {
        let this = &::windows_core::ComInterface::cast::<
            ::windows::Foundation::Collections::IVector<DependencyObject>,
        >(self)?;
        unsafe {
            (::windows_core::Interface::vtable(this).Clear)(::windows_core::Interface::as_raw(this))
                .ok()
        }
    }
    #[doc = "Required features: `\"Windows_Foundation_Collections\"`"]
    #[cfg(feature = "Windows_Foundation_Collections")]
    pub fn GetMany(
        &self,
        startindex: u32,
        items: &mut [::core::option::Option<DependencyObject>],
    ) -> ::windows_core::Result<u32> {
        let this = &::windows_core::ComInterface::cast::<
            ::windows::Foundation::Collections::IVector<DependencyObject>,
        >(self)?;
        unsafe {
            let mut result__ = ::std::mem::zeroed();
            (::windows_core::Interface::vtable(this).GetMany)(
                ::windows_core::Interface::as_raw(this),
                startindex,
                items.len().try_into().unwrap(),
                ::core::mem::transmute_copy(&items),
                &mut result__,
            )
            .from_abi(result__)
        }
    }
    #[doc = "Required features: `\"Windows_Foundation_Collections\"`"]
    #[cfg(feature = "Windows_Foundation_Collections")]
    pub fn ReplaceAll(
        &self,
        items: &[::core::option::Option<DependencyObject>],
    ) -> ::windows_core::Result<()> {
        let this = &::windows_core::ComInterface::cast::<
            ::windows::Foundation::Collections::IVector<DependencyObject>,
        >(self)?;
        unsafe {
            (::windows_core::Interface::vtable(this).ReplaceAll)(
                ::windows_core::Interface::as_raw(this),
                items.len().try_into().unwrap(),
                ::core::mem::transmute(items.as_ptr()),
            )
            .ok()
        }
    }
    #[doc(hidden)]
    pub fn IDependencyObjectCollectionFactory<
        R,
        F: FnOnce(&IDependencyObjectCollectionFactory) -> ::windows_core::Result<R>,
    >(
        callback: F,
    ) -> ::windows_core::Result<R> {
        static SHARED: ::windows_core::imp::FactoryCache<
            DependencyObjectCollection,
            IDependencyObjectCollectionFactory,
        > = ::windows_core::imp::FactoryCache::new();
        SHARED.call(callback)
    }
}
#[cfg(feature = "Windows_Foundation_Collections")]
impl ::windows_core::RuntimeType for DependencyObjectCollection {
    const SIGNATURE: ::windows_core::imp::ConstBuffer =
        ::windows_core::imp::ConstBuffer::for_class::<Self>();
}
#[cfg(feature = "Windows_Foundation_Collections")]
unsafe impl ::windows_core::Interface for DependencyObjectCollection {
    type Vtable = ::windows::Foundation::Collections::IObservableVector_Vtbl<DependencyObject>;
}
#[cfg(feature = "Windows_Foundation_Collections")]
unsafe impl ::windows_core::ComInterface for DependencyObjectCollection {
    const IID: ::windows_core::GUID = <::windows::Foundation::Collections::IObservableVector<
        DependencyObject,
    > as ::windows_core::ComInterface>::IID;
}
#[cfg(feature = "Windows_Foundation_Collections")]
impl ::windows_core::RuntimeName for DependencyObjectCollection {
    const NAME: &'static str = "Microsoft.UI.Xaml.DependencyObjectCollection";
}
#[cfg(feature = "Windows_Foundation_Collections")]
impl ::core::iter::IntoIterator for DependencyObjectCollection {
    type Item = DependencyObject;
    type IntoIter = ::windows::Foundation::Collections::VectorIterator<Self::Item>;
    fn into_iter(self) -> Self::IntoIter {
        ::core::iter::IntoIterator::into_iter(&self)
    }
}
#[cfg(feature = "Windows_Foundation_Collections")]
impl ::core::iter::IntoIterator for &DependencyObjectCollection {
    type Item = DependencyObject;
    type IntoIter = ::windows::Foundation::Collections::VectorIterator<Self::Item>;
    fn into_iter(self) -> Self::IntoIter {
        ::windows::Foundation::Collections::VectorIterator::new(
            ::windows_core::ComInterface::cast(self).ok(),
        )
    }
}
#[cfg(feature = "Windows_Foundation_Collections")]
::windows_core::imp::interface_hierarchy!(
    DependencyObjectCollection,
    ::windows_core::IUnknown,
    ::windows_core::IInspectable
);
#[cfg(feature = "Windows_Foundation_Collections")]
impl ::windows_core::CanTryInto<::windows::Foundation::Collections::IIterable<DependencyObject>>
    for DependencyObjectCollection
{
}
#[cfg(feature = "Windows_Foundation_Collections")]
impl
    ::windows_core::CanTryInto<
        ::windows::Foundation::Collections::IObservableVector<DependencyObject>,
    > for DependencyObjectCollection
{
}
#[cfg(feature = "Windows_Foundation_Collections")]
impl ::windows_core::CanTryInto<::windows::Foundation::Collections::IVector<DependencyObject>>
    for DependencyObjectCollection
{
}
#[cfg(feature = "Windows_Foundation_Collections")]
impl ::windows_core::CanTryInto<DependencyObject> for DependencyObjectCollection {}
#[cfg(feature = "Windows_Foundation_Collections")]
unsafe impl ::core::marker::Send for DependencyObjectCollection {}
#[cfg(feature = "Windows_Foundation_Collections")]
unsafe impl ::core::marker::Sync for DependencyObjectCollection {}
#[repr(transparent)]
#[derive(::core::cmp::PartialEq, ::core::cmp::Eq, ::core::fmt::Debug, ::core::clone::Clone)]
pub struct DependencyProperty(::windows_core::IUnknown);
impl DependencyProperty {
    #[doc = "Required features: `\"Windows_UI_Xaml_Interop\"`"]
    #[cfg(feature = "Windows_UI_Xaml_Interop")]
    pub fn GetMetadata<P0>(&self, fortype: P0) -> ::windows_core::Result<PropertyMetadata>
    where
        P0: ::windows_core::IntoParam<super::super::super::Windows::UI::Xaml::Interop::TypeName>,
    {
        let this = self;
        unsafe {
            let mut result__ = ::std::mem::zeroed();
            (::windows_core::Interface::vtable(this).GetMetadata)(
                ::windows_core::Interface::as_raw(this),
                fortype.into_param().abi(),
                &mut result__,
            )
            .from_abi(result__)
        }
    }
    pub fn UnsetValue() -> ::windows_core::Result<::windows_core::IInspectable> {
        Self::IDependencyPropertyStatics(|this| unsafe {
            let mut result__ = ::std::mem::zeroed();
            (::windows_core::Interface::vtable(this).UnsetValue)(
                ::windows_core::Interface::as_raw(this),
                &mut result__,
            )
            .from_abi(result__)
        })
    }
    #[doc = "Required features: `\"Windows_UI_Xaml_Interop\"`"]
    #[cfg(feature = "Windows_UI_Xaml_Interop")]
    pub fn Register<P0, P1, P2>(
        name: &::windows_core::HSTRING,
        propertytype: P0,
        ownertype: P1,
        typemetadata: P2,
    ) -> ::windows_core::Result<DependencyProperty>
    where
        P0: ::windows_core::IntoParam<super::super::super::Windows::UI::Xaml::Interop::TypeName>,
        P1: ::windows_core::IntoParam<super::super::super::Windows::UI::Xaml::Interop::TypeName>,
        P2: ::windows_core::TryIntoParam<PropertyMetadata>,
    {
        Self::IDependencyPropertyStatics(|this| unsafe {
            let mut result__ = ::std::mem::zeroed();
            (::windows_core::Interface::vtable(this).Register)(
                ::windows_core::Interface::as_raw(this),
                ::core::mem::transmute_copy(name),
                propertytype.into_param().abi(),
                ownertype.into_param().abi(),
                typemetadata.try_into_param()?.abi(),
                &mut result__,
            )
            .from_abi(result__)
        })
    }
    #[doc = "Required features: `\"Windows_UI_Xaml_Interop\"`"]
    #[cfg(feature = "Windows_UI_Xaml_Interop")]
    pub fn RegisterAttached<P0, P1, P2>(
        name: &::windows_core::HSTRING,
        propertytype: P0,
        ownertype: P1,
        defaultmetadata: P2,
    ) -> ::windows_core::Result<DependencyProperty>
    where
        P0: ::windows_core::IntoParam<super::super::super::Windows::UI::Xaml::Interop::TypeName>,
        P1: ::windows_core::IntoParam<super::super::super::Windows::UI::Xaml::Interop::TypeName>,
        P2: ::windows_core::TryIntoParam<PropertyMetadata>,
    {
        Self::IDependencyPropertyStatics(|this| unsafe {
            let mut result__ = ::std::mem::zeroed();
            (::windows_core::Interface::vtable(this).RegisterAttached)(
                ::windows_core::Interface::as_raw(this),
                ::core::mem::transmute_copy(name),
                propertytype.into_param().abi(),
                ownertype.into_param().abi(),
                defaultmetadata.try_into_param()?.abi(),
                &mut result__,
            )
            .from_abi(result__)
        })
    }
    #[doc(hidden)]
    pub fn IDependencyPropertyStatics<
        R,
        F: FnOnce(&IDependencyPropertyStatics) -> ::windows_core::Result<R>,
    >(
        callback: F,
    ) -> ::windows_core::Result<R> {
        static SHARED: ::windows_core::imp::FactoryCache<
            DependencyProperty,
            IDependencyPropertyStatics,
        > = ::windows_core::imp::FactoryCache::new();
        SHARED.call(callback)
    }
}
impl ::windows_core::RuntimeType for DependencyProperty {
    const SIGNATURE: ::windows_core::imp::ConstBuffer =
        ::windows_core::imp::ConstBuffer::for_class::<Self>();
}
unsafe impl ::windows_core::Interface for DependencyProperty {
    type Vtable = IDependencyProperty_Vtbl;
}
unsafe impl ::windows_core::ComInterface for DependencyProperty {
    const IID: ::windows_core::GUID = <IDependencyProperty as ::windows_core::ComInterface>::IID;
}
impl ::windows_core::RuntimeName for DependencyProperty {
    const NAME: &'static str = "Microsoft.UI.Xaml.DependencyProperty";
}
::windows_core::imp::interface_hierarchy!(
    DependencyProperty,
    ::windows_core::IUnknown,
    ::windows_core::IInspectable
);
unsafe impl ::core::marker::Send for DependencyProperty {}
unsafe impl ::core::marker::Sync for DependencyProperty {}
#[repr(transparent)]
#[derive(::core::cmp::PartialEq, ::core::cmp::Eq, ::core::fmt::Debug, ::core::clone::Clone)]
pub struct DependencyPropertyChangedEventArgs(::windows_core::IUnknown);
impl DependencyPropertyChangedEventArgs {
    pub fn Property(&self) -> ::windows_core::Result<DependencyProperty> {
        let this = self;
        unsafe {
            let mut result__ = ::std::mem::zeroed();
            (::windows_core::Interface::vtable(this).Property)(
                ::windows_core::Interface::as_raw(this),
                &mut result__,
            )
            .from_abi(result__)
        }
    }
    pub fn OldValue(&self) -> ::windows_core::Result<::windows_core::IInspectable> {
        let this = self;
        unsafe {
            let mut result__ = ::std::mem::zeroed();
            (::windows_core::Interface::vtable(this).OldValue)(
                ::windows_core::Interface::as_raw(this),
                &mut result__,
            )
            .from_abi(result__)
        }
    }
    pub fn NewValue(&self) -> ::windows_core::Result<::windows_core::IInspectable> {
        let this = self;
        unsafe {
            let mut result__ = ::std::mem::zeroed();
            (::windows_core::Interface::vtable(this).NewValue)(
                ::windows_core::Interface::as_raw(this),
                &mut result__,
            )
            .from_abi(result__)
        }
    }
}
impl ::windows_core::RuntimeType for DependencyPropertyChangedEventArgs {
    const SIGNATURE: ::windows_core::imp::ConstBuffer =
        ::windows_core::imp::ConstBuffer::for_class::<Self>();
}
unsafe impl ::windows_core::Interface for DependencyPropertyChangedEventArgs {
    type Vtable = IDependencyPropertyChangedEventArgs_Vtbl;
}
unsafe impl ::windows_core::ComInterface for DependencyPropertyChangedEventArgs {
    const IID: ::windows_core::GUID =
        <IDependencyPropertyChangedEventArgs as ::windows_core::ComInterface>::IID;
}
impl ::windows_core::RuntimeName for DependencyPropertyChangedEventArgs {
    const NAME: &'static str = "Microsoft.UI.Xaml.DependencyPropertyChangedEventArgs";
}
::windows_core::imp::interface_hierarchy!(
    DependencyPropertyChangedEventArgs,
    ::windows_core::IUnknown,
    ::windows_core::IInspectable
);
unsafe impl ::core::marker::Send for DependencyPropertyChangedEventArgs {}
unsafe impl ::core::marker::Sync for DependencyPropertyChangedEventArgs {}
#[repr(transparent)]
#[derive(::core::cmp::PartialEq, ::core::cmp::Eq, ::core::fmt::Debug, ::core::clone::Clone)]
pub struct DispatcherTimer(::windows_core::IUnknown);
impl DispatcherTimer {
    #[doc = "Required features: `\"Windows_Foundation\"`"]
    #[cfg(feature = "Windows_Foundation")]
    pub fn Interval(&self) -> ::windows_core::Result<::windows::Foundation::TimeSpan> {
        let this = self;
        unsafe {
            let mut result__ = ::std::mem::zeroed();
            (::windows_core::Interface::vtable(this).Interval)(
                ::windows_core::Interface::as_raw(this),
                &mut result__,
            )
            .from_abi(result__)
        }
    }
    #[doc = "Required features: `\"Windows_Foundation\"`"]
    #[cfg(feature = "Windows_Foundation")]
    pub fn SetInterval(
        &self,
        value: ::windows::Foundation::TimeSpan,
    ) -> ::windows_core::Result<()> {
        let this = self;
        unsafe {
            (::windows_core::Interface::vtable(this).SetInterval)(
                ::windows_core::Interface::as_raw(this),
                value,
            )
            .ok()
        }
    }
    pub fn IsEnabled(&self) -> ::windows_core::Result<bool> {
        let this = self;
        unsafe {
            let mut result__ = ::std::mem::zeroed();
            (::windows_core::Interface::vtable(this).IsEnabled)(
                ::windows_core::Interface::as_raw(this),
                &mut result__,
            )
            .from_abi(result__)
        }
    }
    #[doc = "Required features: `\"Windows_Foundation\"`"]
    #[cfg(feature = "Windows_Foundation")]
    pub fn Tick<P0>(
        &self,
        handler: P0,
    ) -> ::windows_core::Result<::windows::Foundation::EventRegistrationToken>
    where
        P0: ::windows_core::IntoParam<
            ::windows::Foundation::EventHandler<::windows_core::IInspectable>,
        >,
    {
        let this = self;
        unsafe {
            let mut result__ = ::std::mem::zeroed();
            (::windows_core::Interface::vtable(this).Tick)(
                ::windows_core::Interface::as_raw(this),
                handler.into_param().abi(),
                &mut result__,
            )
            .from_abi(result__)
        }
    }
    #[doc = "Required features: `\"Windows_Foundation\"`"]
    #[cfg(feature = "Windows_Foundation")]
    pub fn RemoveTick(
        &self,
        token: ::windows::Foundation::EventRegistrationToken,
    ) -> ::windows_core::Result<()> {
        let this = self;
        unsafe {
            (::windows_core::Interface::vtable(this).RemoveTick)(
                ::windows_core::Interface::as_raw(this),
                token,
            )
            .ok()
        }
    }
    pub fn Start(&self) -> ::windows_core::Result<()> {
        let this = self;
        unsafe {
            (::windows_core::Interface::vtable(this).Start)(::windows_core::Interface::as_raw(this))
                .ok()
        }
    }
    pub fn Stop(&self) -> ::windows_core::Result<()> {
        let this = self;
        unsafe {
            (::windows_core::Interface::vtable(this).Stop)(::windows_core::Interface::as_raw(this))
                .ok()
        }
    }
    pub unsafe fn CreateInstance<P0>(
        baseinterface: P0,
        innerinterface: &mut ::core::option::Option<::windows_core::IInspectable>,
    ) -> ::windows_core::Result<DispatcherTimer>
    where
        P0: ::windows_core::IntoParam<::windows_core::IInspectable>,
    {
        Self::IDispatcherTimerFactory(|this| unsafe {
            let mut result__ = ::std::mem::zeroed();
            (::windows_core::Interface::vtable(this).CreateInstance)(
                ::windows_core::Interface::as_raw(this),
                baseinterface.into_param().abi(),
                innerinterface as *mut _ as _,
                &mut result__,
            )
            .from_abi(result__)
        })
    }
    #[doc(hidden)]
    pub fn IDispatcherTimerFactory<
        R,
        F: FnOnce(&IDispatcherTimerFactory) -> ::windows_core::Result<R>,
    >(
        callback: F,
    ) -> ::windows_core::Result<R> {
        static SHARED: ::windows_core::imp::FactoryCache<DispatcherTimer, IDispatcherTimerFactory> =
            ::windows_core::imp::FactoryCache::new();
        SHARED.call(callback)
    }
}
impl ::windows_core::RuntimeType for DispatcherTimer {
    const SIGNATURE: ::windows_core::imp::ConstBuffer =
        ::windows_core::imp::ConstBuffer::for_class::<Self>();
}
unsafe impl ::windows_core::Interface for DispatcherTimer {
    type Vtable = IDispatcherTimer_Vtbl;
}
unsafe impl ::windows_core::ComInterface for DispatcherTimer {
    const IID: ::windows_core::GUID = <IDispatcherTimer as ::windows_core::ComInterface>::IID;
}
impl ::windows_core::RuntimeName for DispatcherTimer {
    const NAME: &'static str = "Microsoft.UI.Xaml.DispatcherTimer";
}
::windows_core::imp::interface_hierarchy!(
    DispatcherTimer,
    ::windows_core::IUnknown,
    ::windows_core::IInspectable
);
unsafe impl ::core::marker::Send for DispatcherTimer {}
unsafe impl ::core::marker::Sync for DispatcherTimer {}
#[repr(transparent)]
#[derive(::core::cmp::PartialEq, ::core::cmp::Eq, ::core::fmt::Debug, ::core::clone::Clone)]
pub struct DragEventArgs(::windows_core::IUnknown);
impl DragEventArgs {
    pub fn Handled(&self) -> ::windows_core::Result<bool> {
        let this = self;
        unsafe {
            let mut result__ = ::std::mem::zeroed();
            (::windows_core::Interface::vtable(this).Handled)(
                ::windows_core::Interface::as_raw(this),
                &mut result__,
            )
            .from_abi(result__)
        }
    }
    pub fn SetHandled(&self, value: bool) -> ::windows_core::Result<()> {
        let this = self;
        unsafe {
            (::windows_core::Interface::vtable(this).SetHandled)(
                ::windows_core::Interface::as_raw(this),
                value,
            )
            .ok()
        }
    }
    #[doc = "Required features: `\"Windows_ApplicationModel_DataTransfer\"`"]
    #[cfg(feature = "Windows_ApplicationModel_DataTransfer")]
    pub fn Data(
        &self,
    ) -> ::windows_core::Result<::windows::ApplicationModel::DataTransfer::DataPackage> {
        let this = self;
        unsafe {
            let mut result__ = ::std::mem::zeroed();
            (::windows_core::Interface::vtable(this).Data)(
                ::windows_core::Interface::as_raw(this),
                &mut result__,
            )
            .from_abi(result__)
        }
    }
    #[doc = "Required features: `\"Windows_ApplicationModel_DataTransfer\"`"]
    #[cfg(feature = "Windows_ApplicationModel_DataTransfer")]
    pub fn SetData<P0>(&self, value: P0) -> ::windows_core::Result<()>
    where
        P0: ::windows_core::IntoParam<::windows::ApplicationModel::DataTransfer::DataPackage>,
    {
        let this = self;
        unsafe {
            (::windows_core::Interface::vtable(this).SetData)(
                ::windows_core::Interface::as_raw(this),
                value.into_param().abi(),
            )
            .ok()
        }
    }
    #[doc = "Required features: `\"Windows_ApplicationModel_DataTransfer\"`"]
    #[cfg(feature = "Windows_ApplicationModel_DataTransfer")]
    pub fn DataView(
        &self,
    ) -> ::windows_core::Result<::windows::ApplicationModel::DataTransfer::DataPackageView> {
        let this = self;
        unsafe {
            let mut result__ = ::std::mem::zeroed();
            (::windows_core::Interface::vtable(this).DataView)(
                ::windows_core::Interface::as_raw(this),
                &mut result__,
            )
            .from_abi(result__)
        }
    }
    pub fn DragUIOverride(&self) -> ::windows_core::Result<DragUIOverride> {
        let this = self;
        unsafe {
            let mut result__ = ::std::mem::zeroed();
            (::windows_core::Interface::vtable(this).DragUIOverride)(
                ::windows_core::Interface::as_raw(this),
                &mut result__,
            )
            .from_abi(result__)
        }
    }
    #[doc = "Required features: `\"Windows_ApplicationModel_DataTransfer_DragDrop\"`"]
    #[cfg(feature = "Windows_ApplicationModel_DataTransfer_DragDrop")]
    pub fn Modifiers(
        &self,
    ) -> ::windows_core::Result<
        ::windows::ApplicationModel::DataTransfer::DragDrop::DragDropModifiers,
    > {
        let this = self;
        unsafe {
            let mut result__ = ::std::mem::zeroed();
            (::windows_core::Interface::vtable(this).Modifiers)(
                ::windows_core::Interface::as_raw(this),
                &mut result__,
            )
            .from_abi(result__)
        }
    }
    #[doc = "Required features: `\"Windows_ApplicationModel_DataTransfer\"`"]
    #[cfg(feature = "Windows_ApplicationModel_DataTransfer")]
    pub fn AcceptedOperation(
        &self,
    ) -> ::windows_core::Result<::windows::ApplicationModel::DataTransfer::DataPackageOperation>
    {
        let this = self;
        unsafe {
            let mut result__ = ::std::mem::zeroed();
            (::windows_core::Interface::vtable(this).AcceptedOperation)(
                ::windows_core::Interface::as_raw(this),
                &mut result__,
            )
            .from_abi(result__)
        }
    }
    #[doc = "Required features: `\"Windows_ApplicationModel_DataTransfer\"`"]
    #[cfg(feature = "Windows_ApplicationModel_DataTransfer")]
    pub fn SetAcceptedOperation(
        &self,
        value: ::windows::ApplicationModel::DataTransfer::DataPackageOperation,
    ) -> ::windows_core::Result<()> {
        let this = self;
        unsafe {
            (::windows_core::Interface::vtable(this).SetAcceptedOperation)(
                ::windows_core::Interface::as_raw(this),
                value,
            )
            .ok()
        }
    }
    #[doc = "Required features: `\"Windows_ApplicationModel_DataTransfer\"`"]
    #[cfg(feature = "Windows_ApplicationModel_DataTransfer")]
    pub fn AllowedOperations(
        &self,
    ) -> ::windows_core::Result<::windows::ApplicationModel::DataTransfer::DataPackageOperation>
    {
        let this = self;
        unsafe {
            let mut result__ = ::std::mem::zeroed();
            (::windows_core::Interface::vtable(this).AllowedOperations)(
                ::windows_core::Interface::as_raw(this),
                &mut result__,
            )
            .from_abi(result__)
        }
    }
    pub fn GetDeferral(&self) -> ::windows_core::Result<DragOperationDeferral> {
        let this = self;
        unsafe {
            let mut result__ = ::std::mem::zeroed();
            (::windows_core::Interface::vtable(this).GetDeferral)(
                ::windows_core::Interface::as_raw(this),
                &mut result__,
            )
            .from_abi(result__)
        }
    }
    #[doc = "Required features: `\"Windows_Foundation\"`"]
    #[cfg(feature = "Windows_Foundation")]
    pub fn GetPosition<P0>(
        &self,
        relativeto: P0,
    ) -> ::windows_core::Result<::windows::Foundation::Point>
    where
        P0: ::windows_core::TryIntoParam<UIElement>,
    {
        let this = self;
        unsafe {
            let mut result__ = ::std::mem::zeroed();
            (::windows_core::Interface::vtable(this).GetPosition)(
                ::windows_core::Interface::as_raw(this),
                relativeto.try_into_param()?.abi(),
                &mut result__,
            )
            .from_abi(result__)
        }
    }
    pub fn OriginalSource(&self) -> ::windows_core::Result<::windows_core::IInspectable> {
        let this = &::windows_core::ComInterface::cast::<IRoutedEventArgs>(self)?;
        unsafe {
            let mut result__ = ::std::mem::zeroed();
            (::windows_core::Interface::vtable(this).OriginalSource)(
                ::windows_core::Interface::as_raw(this),
                &mut result__,
            )
            .from_abi(result__)
        }
    }
}
impl ::windows_core::RuntimeType for DragEventArgs {
    const SIGNATURE: ::windows_core::imp::ConstBuffer =
        ::windows_core::imp::ConstBuffer::for_class::<Self>();
}
unsafe impl ::windows_core::Interface for DragEventArgs {
    type Vtable = IDragEventArgs_Vtbl;
}
unsafe impl ::windows_core::ComInterface for DragEventArgs {
    const IID: ::windows_core::GUID = <IDragEventArgs as ::windows_core::ComInterface>::IID;
}
impl ::windows_core::RuntimeName for DragEventArgs {
    const NAME: &'static str = "Microsoft.UI.Xaml.DragEventArgs";
}
::windows_core::imp::interface_hierarchy!(
    DragEventArgs,
    ::windows_core::IUnknown,
    ::windows_core::IInspectable
);
impl ::windows_core::CanTryInto<RoutedEventArgs> for DragEventArgs {}
unsafe impl ::core::marker::Send for DragEventArgs {}
unsafe impl ::core::marker::Sync for DragEventArgs {}
#[repr(transparent)]
#[derive(::core::cmp::PartialEq, ::core::cmp::Eq, ::core::fmt::Debug, ::core::clone::Clone)]
pub struct DragOperationDeferral(::windows_core::IUnknown);
impl DragOperationDeferral {
    pub fn Complete(&self) -> ::windows_core::Result<()> {
        let this = self;
        unsafe {
            (::windows_core::Interface::vtable(this).Complete)(::windows_core::Interface::as_raw(
                this,
            ))
            .ok()
        }
    }
}
impl ::windows_core::RuntimeType for DragOperationDeferral {
    const SIGNATURE: ::windows_core::imp::ConstBuffer =
        ::windows_core::imp::ConstBuffer::for_class::<Self>();
}
unsafe impl ::windows_core::Interface for DragOperationDeferral {
    type Vtable = IDragOperationDeferral_Vtbl;
}
unsafe impl ::windows_core::ComInterface for DragOperationDeferral {
    const IID: ::windows_core::GUID = <IDragOperationDeferral as ::windows_core::ComInterface>::IID;
}
impl ::windows_core::RuntimeName for DragOperationDeferral {
    const NAME: &'static str = "Microsoft.UI.Xaml.DragOperationDeferral";
}
::windows_core::imp::interface_hierarchy!(
    DragOperationDeferral,
    ::windows_core::IUnknown,
    ::windows_core::IInspectable
);
unsafe impl ::core::marker::Send for DragOperationDeferral {}
unsafe impl ::core::marker::Sync for DragOperationDeferral {}
#[repr(transparent)]
#[derive(::core::cmp::PartialEq, ::core::cmp::Eq, ::core::fmt::Debug, ::core::clone::Clone)]
pub struct DragStartingEventArgs(::windows_core::IUnknown);
impl DragStartingEventArgs {
    pub fn Cancel(&self) -> ::windows_core::Result<bool> {
        let this = self;
        unsafe {
            let mut result__ = ::std::mem::zeroed();
            (::windows_core::Interface::vtable(this).Cancel)(
                ::windows_core::Interface::as_raw(this),
                &mut result__,
            )
            .from_abi(result__)
        }
    }
    pub fn SetCancel(&self, value: bool) -> ::windows_core::Result<()> {
        let this = self;
        unsafe {
            (::windows_core::Interface::vtable(this).SetCancel)(
                ::windows_core::Interface::as_raw(this),
                value,
            )
            .ok()
        }
    }
    #[doc = "Required features: `\"Windows_ApplicationModel_DataTransfer\"`"]
    #[cfg(feature = "Windows_ApplicationModel_DataTransfer")]
    pub fn Data(
        &self,
    ) -> ::windows_core::Result<::windows::ApplicationModel::DataTransfer::DataPackage> {
        let this = self;
        unsafe {
            let mut result__ = ::std::mem::zeroed();
            (::windows_core::Interface::vtable(this).Data)(
                ::windows_core::Interface::as_raw(this),
                &mut result__,
            )
            .from_abi(result__)
        }
    }
    pub fn DragUI(&self) -> ::windows_core::Result<DragUI> {
        let this = self;
        unsafe {
            let mut result__ = ::std::mem::zeroed();
            (::windows_core::Interface::vtable(this).DragUI)(
                ::windows_core::Interface::as_raw(this),
                &mut result__,
            )
            .from_abi(result__)
        }
    }
    #[doc = "Required features: `\"Windows_ApplicationModel_DataTransfer\"`"]
    #[cfg(feature = "Windows_ApplicationModel_DataTransfer")]
    pub fn AllowedOperations(
        &self,
    ) -> ::windows_core::Result<::windows::ApplicationModel::DataTransfer::DataPackageOperation>
    {
        let this = self;
        unsafe {
            let mut result__ = ::std::mem::zeroed();
            (::windows_core::Interface::vtable(this).AllowedOperations)(
                ::windows_core::Interface::as_raw(this),
                &mut result__,
            )
            .from_abi(result__)
        }
    }
    #[doc = "Required features: `\"Windows_ApplicationModel_DataTransfer\"`"]
    #[cfg(feature = "Windows_ApplicationModel_DataTransfer")]
    pub fn SetAllowedOperations(
        &self,
        value: ::windows::ApplicationModel::DataTransfer::DataPackageOperation,
    ) -> ::windows_core::Result<()> {
        let this = self;
        unsafe {
            (::windows_core::Interface::vtable(this).SetAllowedOperations)(
                ::windows_core::Interface::as_raw(this),
                value,
            )
            .ok()
        }
    }
    pub fn GetDeferral(&self) -> ::windows_core::Result<DragOperationDeferral> {
        let this = self;
        unsafe {
            let mut result__ = ::std::mem::zeroed();
            (::windows_core::Interface::vtable(this).GetDeferral)(
                ::windows_core::Interface::as_raw(this),
                &mut result__,
            )
            .from_abi(result__)
        }
    }
    #[doc = "Required features: `\"Windows_Foundation\"`"]
    #[cfg(feature = "Windows_Foundation")]
    pub fn GetPosition<P0>(
        &self,
        relativeto: P0,
    ) -> ::windows_core::Result<::windows::Foundation::Point>
    where
        P0: ::windows_core::TryIntoParam<UIElement>,
    {
        let this = self;
        unsafe {
            let mut result__ = ::std::mem::zeroed();
            (::windows_core::Interface::vtable(this).GetPosition)(
                ::windows_core::Interface::as_raw(this),
                relativeto.try_into_param()?.abi(),
                &mut result__,
            )
            .from_abi(result__)
        }
    }
    pub fn OriginalSource(&self) -> ::windows_core::Result<::windows_core::IInspectable> {
        let this = &::windows_core::ComInterface::cast::<IRoutedEventArgs>(self)?;
        unsafe {
            let mut result__ = ::std::mem::zeroed();
            (::windows_core::Interface::vtable(this).OriginalSource)(
                ::windows_core::Interface::as_raw(this),
                &mut result__,
            )
            .from_abi(result__)
        }
    }
}
impl ::windows_core::RuntimeType for DragStartingEventArgs {
    const SIGNATURE: ::windows_core::imp::ConstBuffer =
        ::windows_core::imp::ConstBuffer::for_class::<Self>();
}
unsafe impl ::windows_core::Interface for DragStartingEventArgs {
    type Vtable = IDragStartingEventArgs_Vtbl;
}
unsafe impl ::windows_core::ComInterface for DragStartingEventArgs {
    const IID: ::windows_core::GUID = <IDragStartingEventArgs as ::windows_core::ComInterface>::IID;
}
impl ::windows_core::RuntimeName for DragStartingEventArgs {
    const NAME: &'static str = "Microsoft.UI.Xaml.DragStartingEventArgs";
}
::windows_core::imp::interface_hierarchy!(
    DragStartingEventArgs,
    ::windows_core::IUnknown,
    ::windows_core::IInspectable
);
impl ::windows_core::CanTryInto<RoutedEventArgs> for DragStartingEventArgs {}
unsafe impl ::core::marker::Send for DragStartingEventArgs {}
unsafe impl ::core::marker::Sync for DragStartingEventArgs {}
#[repr(transparent)]
#[derive(::core::cmp::PartialEq, ::core::cmp::Eq, ::core::fmt::Debug, ::core::clone::Clone)]
pub struct DragUI(::windows_core::IUnknown);
impl DragUI {
    #[doc = "Required features: `\"Microsoft_UI_Xaml_Media_Imaging\"`"]
    #[cfg(feature = "Microsoft_UI_Xaml_Media_Imaging")]
    pub fn SetContentFromBitmapImage<P0>(&self, bitmapimage: P0) -> ::windows_core::Result<()>
    where
        P0: ::windows_core::IntoParam<Media::Imaging::BitmapImage>,
    {
        let this = self;
        unsafe {
            (::windows_core::Interface::vtable(this).SetContentFromBitmapImage)(
                ::windows_core::Interface::as_raw(this),
                bitmapimage.into_param().abi(),
            )
            .ok()
        }
    }
    #[doc = "Required features: `\"Microsoft_UI_Xaml_Media_Imaging\"`, `\"Windows_Foundation\"`"]
    #[cfg(all(
        feature = "Microsoft_UI_Xaml_Media_Imaging",
        feature = "Windows_Foundation"
    ))]
    pub fn SetContentFromBitmapImageWithAnchorPoint<P0>(
        &self,
        bitmapimage: P0,
        anchorpoint: ::windows::Foundation::Point,
    ) -> ::windows_core::Result<()>
    where
        P0: ::windows_core::IntoParam<Media::Imaging::BitmapImage>,
    {
        let this = self;
        unsafe {
            (::windows_core::Interface::vtable(this).SetContentFromBitmapImageWithAnchorPoint)(
                ::windows_core::Interface::as_raw(this),
                bitmapimage.into_param().abi(),
                anchorpoint,
            )
            .ok()
        }
    }
    #[doc = "Required features: `\"Windows_Graphics_Imaging\"`"]
    #[cfg(feature = "Windows_Graphics_Imaging")]
    pub fn SetContentFromSoftwareBitmap<P0>(&self, softwarebitmap: P0) -> ::windows_core::Result<()>
    where
        P0: ::windows_core::IntoParam<::windows::Graphics::Imaging::SoftwareBitmap>,
    {
        let this = self;
        unsafe {
            (::windows_core::Interface::vtable(this).SetContentFromSoftwareBitmap)(
                ::windows_core::Interface::as_raw(this),
                softwarebitmap.into_param().abi(),
            )
            .ok()
        }
    }
    #[doc = "Required features: `\"Windows_Foundation\"`, `\"Windows_Graphics_Imaging\"`"]
    #[cfg(all(feature = "Windows_Foundation", feature = "Windows_Graphics_Imaging"))]
    pub fn SetContentFromSoftwareBitmapWithAnchorPoint<P0>(
        &self,
        softwarebitmap: P0,
        anchorpoint: ::windows::Foundation::Point,
    ) -> ::windows_core::Result<()>
    where
        P0: ::windows_core::IntoParam<::windows::Graphics::Imaging::SoftwareBitmap>,
    {
        let this = self;
        unsafe {
            (::windows_core::Interface::vtable(this).SetContentFromSoftwareBitmapWithAnchorPoint)(
                ::windows_core::Interface::as_raw(this),
                softwarebitmap.into_param().abi(),
                anchorpoint,
            )
            .ok()
        }
    }
    pub fn SetContentFromDataPackage(&self) -> ::windows_core::Result<()> {
        let this = self;
        unsafe {
            (::windows_core::Interface::vtable(this).SetContentFromDataPackage)(
                ::windows_core::Interface::as_raw(this),
            )
            .ok()
        }
    }
}
impl ::windows_core::RuntimeType for DragUI {
    const SIGNATURE: ::windows_core::imp::ConstBuffer =
        ::windows_core::imp::ConstBuffer::for_class::<Self>();
}
unsafe impl ::windows_core::Interface for DragUI {
    type Vtable = IDragUI_Vtbl;
}
unsafe impl ::windows_core::ComInterface for DragUI {
    const IID: ::windows_core::GUID = <IDragUI as ::windows_core::ComInterface>::IID;
}
impl ::windows_core::RuntimeName for DragUI {
    const NAME: &'static str = "Microsoft.UI.Xaml.DragUI";
}
::windows_core::imp::interface_hierarchy!(
    DragUI,
    ::windows_core::IUnknown,
    ::windows_core::IInspectable
);
unsafe impl ::core::marker::Send for DragUI {}
unsafe impl ::core::marker::Sync for DragUI {}
#[repr(transparent)]
#[derive(::core::cmp::PartialEq, ::core::cmp::Eq, ::core::fmt::Debug, ::core::clone::Clone)]
pub struct DragUIOverride(::windows_core::IUnknown);
impl DragUIOverride {
    pub fn Caption(&self) -> ::windows_core::Result<::windows_core::HSTRING> {
        let this = self;
        unsafe {
            let mut result__ = ::std::mem::zeroed();
            (::windows_core::Interface::vtable(this).Caption)(
                ::windows_core::Interface::as_raw(this),
                &mut result__,
            )
            .from_abi(result__)
        }
    }
    pub fn SetCaption(&self, value: &::windows_core::HSTRING) -> ::windows_core::Result<()> {
        let this = self;
        unsafe {
            (::windows_core::Interface::vtable(this).SetCaption)(
                ::windows_core::Interface::as_raw(this),
                ::core::mem::transmute_copy(value),
            )
            .ok()
        }
    }
    pub fn IsContentVisible(&self) -> ::windows_core::Result<bool> {
        let this = self;
        unsafe {
            let mut result__ = ::std::mem::zeroed();
            (::windows_core::Interface::vtable(this).IsContentVisible)(
                ::windows_core::Interface::as_raw(this),
                &mut result__,
            )
            .from_abi(result__)
        }
    }
    pub fn SetIsContentVisible(&self, value: bool) -> ::windows_core::Result<()> {
        let this = self;
        unsafe {
            (::windows_core::Interface::vtable(this).SetIsContentVisible)(
                ::windows_core::Interface::as_raw(this),
                value,
            )
            .ok()
        }
    }
    pub fn IsCaptionVisible(&self) -> ::windows_core::Result<bool> {
        let this = self;
        unsafe {
            let mut result__ = ::std::mem::zeroed();
            (::windows_core::Interface::vtable(this).IsCaptionVisible)(
                ::windows_core::Interface::as_raw(this),
                &mut result__,
            )
            .from_abi(result__)
        }
    }
    pub fn SetIsCaptionVisible(&self, value: bool) -> ::windows_core::Result<()> {
        let this = self;
        unsafe {
            (::windows_core::Interface::vtable(this).SetIsCaptionVisible)(
                ::windows_core::Interface::as_raw(this),
                value,
            )
            .ok()
        }
    }
    pub fn IsGlyphVisible(&self) -> ::windows_core::Result<bool> {
        let this = self;
        unsafe {
            let mut result__ = ::std::mem::zeroed();
            (::windows_core::Interface::vtable(this).IsGlyphVisible)(
                ::windows_core::Interface::as_raw(this),
                &mut result__,
            )
            .from_abi(result__)
        }
    }
    pub fn SetIsGlyphVisible(&self, value: bool) -> ::windows_core::Result<()> {
        let this = self;
        unsafe {
            (::windows_core::Interface::vtable(this).SetIsGlyphVisible)(
                ::windows_core::Interface::as_raw(this),
                value,
            )
            .ok()
        }
    }
    pub fn Clear(&self) -> ::windows_core::Result<()> {
        let this = self;
        unsafe {
            (::windows_core::Interface::vtable(this).Clear)(::windows_core::Interface::as_raw(this))
                .ok()
        }
    }
    #[doc = "Required features: `\"Microsoft_UI_Xaml_Media_Imaging\"`"]
    #[cfg(feature = "Microsoft_UI_Xaml_Media_Imaging")]
    pub fn SetContentFromBitmapImage<P0>(&self, bitmapimage: P0) -> ::windows_core::Result<()>
    where
        P0: ::windows_core::IntoParam<Media::Imaging::BitmapImage>,
    {
        let this = self;
        unsafe {
            (::windows_core::Interface::vtable(this).SetContentFromBitmapImage)(
                ::windows_core::Interface::as_raw(this),
                bitmapimage.into_param().abi(),
            )
            .ok()
        }
    }
    #[doc = "Required features: `\"Microsoft_UI_Xaml_Media_Imaging\"`, `\"Windows_Foundation\"`"]
    #[cfg(all(
        feature = "Microsoft_UI_Xaml_Media_Imaging",
        feature = "Windows_Foundation"
    ))]
    pub fn SetContentFromBitmapImageWithAnchorPoint<P0>(
        &self,
        bitmapimage: P0,
        anchorpoint: ::windows::Foundation::Point,
    ) -> ::windows_core::Result<()>
    where
        P0: ::windows_core::IntoParam<Media::Imaging::BitmapImage>,
    {
        let this = self;
        unsafe {
            (::windows_core::Interface::vtable(this).SetContentFromBitmapImageWithAnchorPoint)(
                ::windows_core::Interface::as_raw(this),
                bitmapimage.into_param().abi(),
                anchorpoint,
            )
            .ok()
        }
    }
    #[doc = "Required features: `\"Windows_Graphics_Imaging\"`"]
    #[cfg(feature = "Windows_Graphics_Imaging")]
    pub fn SetContentFromSoftwareBitmap<P0>(&self, softwarebitmap: P0) -> ::windows_core::Result<()>
    where
        P0: ::windows_core::IntoParam<::windows::Graphics::Imaging::SoftwareBitmap>,
    {
        let this = self;
        unsafe {
            (::windows_core::Interface::vtable(this).SetContentFromSoftwareBitmap)(
                ::windows_core::Interface::as_raw(this),
                softwarebitmap.into_param().abi(),
            )
            .ok()
        }
    }
    #[doc = "Required features: `\"Windows_Foundation\"`, `\"Windows_Graphics_Imaging\"`"]
    #[cfg(all(feature = "Windows_Foundation", feature = "Windows_Graphics_Imaging"))]
    pub fn SetContentFromSoftwareBitmapWithAnchorPoint<P0>(
        &self,
        softwarebitmap: P0,
        anchorpoint: ::windows::Foundation::Point,
    ) -> ::windows_core::Result<()>
    where
        P0: ::windows_core::IntoParam<::windows::Graphics::Imaging::SoftwareBitmap>,
    {
        let this = self;
        unsafe {
            (::windows_core::Interface::vtable(this).SetContentFromSoftwareBitmapWithAnchorPoint)(
                ::windows_core::Interface::as_raw(this),
                softwarebitmap.into_param().abi(),
                anchorpoint,
            )
            .ok()
        }
    }
}
impl ::windows_core::RuntimeType for DragUIOverride {
    const SIGNATURE: ::windows_core::imp::ConstBuffer =
        ::windows_core::imp::ConstBuffer::for_class::<Self>();
}
unsafe impl ::windows_core::Interface for DragUIOverride {
    type Vtable = IDragUIOverride_Vtbl;
}
unsafe impl ::windows_core::ComInterface for DragUIOverride {
    const IID: ::windows_core::GUID = <IDragUIOverride as ::windows_core::ComInterface>::IID;
}
impl ::windows_core::RuntimeName for DragUIOverride {
    const NAME: &'static str = "Microsoft.UI.Xaml.DragUIOverride";
}
::windows_core::imp::interface_hierarchy!(
    DragUIOverride,
    ::windows_core::IUnknown,
    ::windows_core::IInspectable
);
unsafe impl ::core::marker::Send for DragUIOverride {}
unsafe impl ::core::marker::Sync for DragUIOverride {}
#[repr(transparent)]
#[derive(::core::cmp::PartialEq, ::core::cmp::Eq, ::core::fmt::Debug, ::core::clone::Clone)]
pub struct DropCompletedEventArgs(::windows_core::IUnknown);
impl DropCompletedEventArgs {
    #[doc = "Required features: `\"Windows_ApplicationModel_DataTransfer\"`"]
    #[cfg(feature = "Windows_ApplicationModel_DataTransfer")]
    pub fn DropResult(
        &self,
    ) -> ::windows_core::Result<::windows::ApplicationModel::DataTransfer::DataPackageOperation>
    {
        let this = self;
        unsafe {
            let mut result__ = ::std::mem::zeroed();
            (::windows_core::Interface::vtable(this).DropResult)(
                ::windows_core::Interface::as_raw(this),
                &mut result__,
            )
            .from_abi(result__)
        }
    }
    pub fn OriginalSource(&self) -> ::windows_core::Result<::windows_core::IInspectable> {
        let this = &::windows_core::ComInterface::cast::<IRoutedEventArgs>(self)?;
        unsafe {
            let mut result__ = ::std::mem::zeroed();
            (::windows_core::Interface::vtable(this).OriginalSource)(
                ::windows_core::Interface::as_raw(this),
                &mut result__,
            )
            .from_abi(result__)
        }
    }
}
impl ::windows_core::RuntimeType for DropCompletedEventArgs {
    const SIGNATURE: ::windows_core::imp::ConstBuffer =
        ::windows_core::imp::ConstBuffer::for_class::<Self>();
}
unsafe impl ::windows_core::Interface for DropCompletedEventArgs {
    type Vtable = IDropCompletedEventArgs_Vtbl;
}
unsafe impl ::windows_core::ComInterface for DropCompletedEventArgs {
    const IID: ::windows_core::GUID =
        <IDropCompletedEventArgs as ::windows_core::ComInterface>::IID;
}
impl ::windows_core::RuntimeName for DropCompletedEventArgs {
    const NAME: &'static str = "Microsoft.UI.Xaml.DropCompletedEventArgs";
}
::windows_core::imp::interface_hierarchy!(
    DropCompletedEventArgs,
    ::windows_core::IUnknown,
    ::windows_core::IInspectable
);
impl ::windows_core::CanTryInto<RoutedEventArgs> for DropCompletedEventArgs {}
unsafe impl ::core::marker::Send for DropCompletedEventArgs {}
unsafe impl ::core::marker::Sync for DropCompletedEventArgs {}
#[repr(transparent)]
#[derive(::core::cmp::PartialEq, ::core::cmp::Eq, ::core::fmt::Debug, ::core::clone::Clone)]
pub struct DurationHelper(::windows_core::IUnknown);
impl DurationHelper {
    #[doc = "Required features: `\"Windows_Foundation\"`"]
    #[cfg(feature = "Windows_Foundation")]
    pub fn Automatic() -> ::windows_core::Result<Duration> {
        Self::IDurationHelperStatics(|this| unsafe {
            let mut result__ = ::std::mem::zeroed();
            (::windows_core::Interface::vtable(this).Automatic)(
                ::windows_core::Interface::as_raw(this),
                &mut result__,
            )
            .from_abi(result__)
        })
    }
    #[doc = "Required features: `\"Windows_Foundation\"`"]
    #[cfg(feature = "Windows_Foundation")]
    pub fn Forever() -> ::windows_core::Result<Duration> {
        Self::IDurationHelperStatics(|this| unsafe {
            let mut result__ = ::std::mem::zeroed();
            (::windows_core::Interface::vtable(this).Forever)(
                ::windows_core::Interface::as_raw(this),
                &mut result__,
            )
            .from_abi(result__)
        })
    }
    #[doc = "Required features: `\"Windows_Foundation\"`"]
    #[cfg(feature = "Windows_Foundation")]
    pub fn Compare(duration1: Duration, duration2: Duration) -> ::windows_core::Result<i32> {
        Self::IDurationHelperStatics(|this| unsafe {
            let mut result__ = ::std::mem::zeroed();
            (::windows_core::Interface::vtable(this).Compare)(
                ::windows_core::Interface::as_raw(this),
                duration1,
                duration2,
                &mut result__,
            )
            .from_abi(result__)
        })
    }
    #[doc = "Required features: `\"Windows_Foundation\"`"]
    #[cfg(feature = "Windows_Foundation")]
    pub fn FromTimeSpan(
        timespan: ::windows::Foundation::TimeSpan,
    ) -> ::windows_core::Result<Duration> {
        Self::IDurationHelperStatics(|this| unsafe {
            let mut result__ = ::std::mem::zeroed();
            (::windows_core::Interface::vtable(this).FromTimeSpan)(
                ::windows_core::Interface::as_raw(this),
                timespan,
                &mut result__,
            )
            .from_abi(result__)
        })
    }
    #[doc = "Required features: `\"Windows_Foundation\"`"]
    #[cfg(feature = "Windows_Foundation")]
    pub fn GetHasTimeSpan(target: Duration) -> ::windows_core::Result<bool> {
        Self::IDurationHelperStatics(|this| unsafe {
            let mut result__ = ::std::mem::zeroed();
            (::windows_core::Interface::vtable(this).GetHasTimeSpan)(
                ::windows_core::Interface::as_raw(this),
                target,
                &mut result__,
            )
            .from_abi(result__)
        })
    }
    #[doc = "Required features: `\"Windows_Foundation\"`"]
    #[cfg(feature = "Windows_Foundation")]
    pub fn Add(target: Duration, duration: Duration) -> ::windows_core::Result<Duration> {
        Self::IDurationHelperStatics(|this| unsafe {
            let mut result__ = ::std::mem::zeroed();
            (::windows_core::Interface::vtable(this).Add)(
                ::windows_core::Interface::as_raw(this),
                target,
                duration,
                &mut result__,
            )
            .from_abi(result__)
        })
    }
    #[doc = "Required features: `\"Windows_Foundation\"`"]
    #[cfg(feature = "Windows_Foundation")]
    pub fn Equals(target: Duration, value: Duration) -> ::windows_core::Result<bool> {
        Self::IDurationHelperStatics(|this| unsafe {
            let mut result__ = ::std::mem::zeroed();
            (::windows_core::Interface::vtable(this).Equals)(
                ::windows_core::Interface::as_raw(this),
                target,
                value,
                &mut result__,
            )
            .from_abi(result__)
        })
    }
    #[doc = "Required features: `\"Windows_Foundation\"`"]
    #[cfg(feature = "Windows_Foundation")]
    pub fn Subtract(target: Duration, duration: Duration) -> ::windows_core::Result<Duration> {
        Self::IDurationHelperStatics(|this| unsafe {
            let mut result__ = ::std::mem::zeroed();
            (::windows_core::Interface::vtable(this).Subtract)(
                ::windows_core::Interface::as_raw(this),
                target,
                duration,
                &mut result__,
            )
            .from_abi(result__)
        })
    }
    #[doc(hidden)]
    pub fn IDurationHelperStatics<
        R,
        F: FnOnce(&IDurationHelperStatics) -> ::windows_core::Result<R>,
    >(
        callback: F,
    ) -> ::windows_core::Result<R> {
        static SHARED: ::windows_core::imp::FactoryCache<DurationHelper, IDurationHelperStatics> =
            ::windows_core::imp::FactoryCache::new();
        SHARED.call(callback)
    }
}
impl ::windows_core::RuntimeType for DurationHelper {
    const SIGNATURE: ::windows_core::imp::ConstBuffer =
        ::windows_core::imp::ConstBuffer::for_class::<Self>();
}
unsafe impl ::windows_core::Interface for DurationHelper {
    type Vtable = IDurationHelper_Vtbl;
}
unsafe impl ::windows_core::ComInterface for DurationHelper {
    const IID: ::windows_core::GUID = <IDurationHelper as ::windows_core::ComInterface>::IID;
}
impl ::windows_core::RuntimeName for DurationHelper {
    const NAME: &'static str = "Microsoft.UI.Xaml.DurationHelper";
}
::windows_core::imp::interface_hierarchy!(
    DurationHelper,
    ::windows_core::IUnknown,
    ::windows_core::IInspectable
);
unsafe impl ::core::marker::Send for DurationHelper {}
unsafe impl ::core::marker::Sync for DurationHelper {}
#[repr(transparent)]
#[derive(::core::cmp::PartialEq, ::core::cmp::Eq, ::core::fmt::Debug, ::core::clone::Clone)]
pub struct EffectiveViewportChangedEventArgs(::windows_core::IUnknown);
impl EffectiveViewportChangedEventArgs {
    #[doc = "Required features: `\"Windows_Foundation\"`"]
    #[cfg(feature = "Windows_Foundation")]
    pub fn EffectiveViewport(&self) -> ::windows_core::Result<::windows::Foundation::Rect> {
        let this = self;
        unsafe {
            let mut result__ = ::std::mem::zeroed();
            (::windows_core::Interface::vtable(this).EffectiveViewport)(
                ::windows_core::Interface::as_raw(this),
                &mut result__,
            )
            .from_abi(result__)
        }
    }
    #[doc = "Required features: `\"Windows_Foundation\"`"]
    #[cfg(feature = "Windows_Foundation")]
    pub fn MaxViewport(&self) -> ::windows_core::Result<::windows::Foundation::Rect> {
        let this = self;
        unsafe {
            let mut result__ = ::std::mem::zeroed();
            (::windows_core::Interface::vtable(this).MaxViewport)(
                ::windows_core::Interface::as_raw(this),
                &mut result__,
            )
            .from_abi(result__)
        }
    }
    pub fn BringIntoViewDistanceX(&self) -> ::windows_core::Result<f64> {
        let this = self;
        unsafe {
            let mut result__ = ::std::mem::zeroed();
            (::windows_core::Interface::vtable(this).BringIntoViewDistanceX)(
                ::windows_core::Interface::as_raw(this),
                &mut result__,
            )
            .from_abi(result__)
        }
    }
    pub fn BringIntoViewDistanceY(&self) -> ::windows_core::Result<f64> {
        let this = self;
        unsafe {
            let mut result__ = ::std::mem::zeroed();
            (::windows_core::Interface::vtable(this).BringIntoViewDistanceY)(
                ::windows_core::Interface::as_raw(this),
                &mut result__,
            )
            .from_abi(result__)
        }
    }
}
impl ::windows_core::RuntimeType for EffectiveViewportChangedEventArgs {
    const SIGNATURE: ::windows_core::imp::ConstBuffer =
        ::windows_core::imp::ConstBuffer::for_class::<Self>();
}
unsafe impl ::windows_core::Interface for EffectiveViewportChangedEventArgs {
    type Vtable = IEffectiveViewportChangedEventArgs_Vtbl;
}
unsafe impl ::windows_core::ComInterface for EffectiveViewportChangedEventArgs {
    const IID: ::windows_core::GUID =
        <IEffectiveViewportChangedEventArgs as ::windows_core::ComInterface>::IID;
}
impl ::windows_core::RuntimeName for EffectiveViewportChangedEventArgs {
    const NAME: &'static str = "Microsoft.UI.Xaml.EffectiveViewportChangedEventArgs";
}
::windows_core::imp::interface_hierarchy!(
    EffectiveViewportChangedEventArgs,
    ::windows_core::IUnknown,
    ::windows_core::IInspectable
);
unsafe impl ::core::marker::Send for EffectiveViewportChangedEventArgs {}
unsafe impl ::core::marker::Sync for EffectiveViewportChangedEventArgs {}
#[repr(transparent)]
#[derive(::core::cmp::PartialEq, ::core::cmp::Eq, ::core::fmt::Debug, ::core::clone::Clone)]
pub struct ElementFactoryGetArgs(::windows_core::IUnknown);
impl ElementFactoryGetArgs {
    pub fn Data(&self) -> ::windows_core::Result<::windows_core::IInspectable> {
        let this = self;
        unsafe {
            let mut result__ = ::std::mem::zeroed();
            (::windows_core::Interface::vtable(this).Data)(
                ::windows_core::Interface::as_raw(this),
                &mut result__,
            )
            .from_abi(result__)
        }
    }
    pub fn SetData<P0>(&self, value: P0) -> ::windows_core::Result<()>
    where
        P0: ::windows_core::IntoParam<::windows_core::IInspectable>,
    {
        let this = self;
        unsafe {
            (::windows_core::Interface::vtable(this).SetData)(
                ::windows_core::Interface::as_raw(this),
                value.into_param().abi(),
            )
            .ok()
        }
    }
    pub fn Parent(&self) -> ::windows_core::Result<UIElement> {
        let this = self;
        unsafe {
            let mut result__ = ::std::mem::zeroed();
            (::windows_core::Interface::vtable(this).Parent)(
                ::windows_core::Interface::as_raw(this),
                &mut result__,
            )
            .from_abi(result__)
        }
    }
    pub fn SetParent<P0>(&self, value: P0) -> ::windows_core::Result<()>
    where
        P0: ::windows_core::TryIntoParam<UIElement>,
    {
        let this = self;
        unsafe {
            (::windows_core::Interface::vtable(this).SetParent)(
                ::windows_core::Interface::as_raw(this),
                value.try_into_param()?.abi(),
            )
            .ok()
        }
    }
    pub unsafe fn CreateInstance<P0>(
        baseinterface: P0,
        innerinterface: &mut ::core::option::Option<::windows_core::IInspectable>,
    ) -> ::windows_core::Result<ElementFactoryGetArgs>
    where
        P0: ::windows_core::IntoParam<::windows_core::IInspectable>,
    {
        Self::IElementFactoryGetArgsFactory(|this| unsafe {
            let mut result__ = ::std::mem::zeroed();
            (::windows_core::Interface::vtable(this).CreateInstance)(
                ::windows_core::Interface::as_raw(this),
                baseinterface.into_param().abi(),
                innerinterface as *mut _ as _,
                &mut result__,
            )
            .from_abi(result__)
        })
    }
    #[doc(hidden)]
    pub fn IElementFactoryGetArgsFactory<
        R,
        F: FnOnce(&IElementFactoryGetArgsFactory) -> ::windows_core::Result<R>,
    >(
        callback: F,
    ) -> ::windows_core::Result<R> {
        static SHARED: ::windows_core::imp::FactoryCache<
            ElementFactoryGetArgs,
            IElementFactoryGetArgsFactory,
        > = ::windows_core::imp::FactoryCache::new();
        SHARED.call(callback)
    }
}
impl ::windows_core::RuntimeType for ElementFactoryGetArgs {
    const SIGNATURE: ::windows_core::imp::ConstBuffer =
        ::windows_core::imp::ConstBuffer::for_class::<Self>();
}
unsafe impl ::windows_core::Interface for ElementFactoryGetArgs {
    type Vtable = IElementFactoryGetArgs_Vtbl;
}
unsafe impl ::windows_core::ComInterface for ElementFactoryGetArgs {
    const IID: ::windows_core::GUID = <IElementFactoryGetArgs as ::windows_core::ComInterface>::IID;
}
impl ::windows_core::RuntimeName for ElementFactoryGetArgs {
    const NAME: &'static str = "Microsoft.UI.Xaml.ElementFactoryGetArgs";
}
::windows_core::imp::interface_hierarchy!(
    ElementFactoryGetArgs,
    ::windows_core::IUnknown,
    ::windows_core::IInspectable
);
unsafe impl ::core::marker::Send for ElementFactoryGetArgs {}
unsafe impl ::core::marker::Sync for ElementFactoryGetArgs {}
#[repr(transparent)]
#[derive(::core::cmp::PartialEq, ::core::cmp::Eq, ::core::fmt::Debug, ::core::clone::Clone)]
pub struct ElementFactoryRecycleArgs(::windows_core::IUnknown);
impl ElementFactoryRecycleArgs {
    pub fn Element(&self) -> ::windows_core::Result<UIElement> {
        let this = self;
        unsafe {
            let mut result__ = ::std::mem::zeroed();
            (::windows_core::Interface::vtable(this).Element)(
                ::windows_core::Interface::as_raw(this),
                &mut result__,
            )
            .from_abi(result__)
        }
    }
    pub fn SetElement<P0>(&self, value: P0) -> ::windows_core::Result<()>
    where
        P0: ::windows_core::TryIntoParam<UIElement>,
    {
        let this = self;
        unsafe {
            (::windows_core::Interface::vtable(this).SetElement)(
                ::windows_core::Interface::as_raw(this),
                value.try_into_param()?.abi(),
            )
            .ok()
        }
    }
    pub fn Parent(&self) -> ::windows_core::Result<UIElement> {
        let this = self;
        unsafe {
            let mut result__ = ::std::mem::zeroed();
            (::windows_core::Interface::vtable(this).Parent)(
                ::windows_core::Interface::as_raw(this),
                &mut result__,
            )
            .from_abi(result__)
        }
    }
    pub fn SetParent<P0>(&self, value: P0) -> ::windows_core::Result<()>
    where
        P0: ::windows_core::TryIntoParam<UIElement>,
    {
        let this = self;
        unsafe {
            (::windows_core::Interface::vtable(this).SetParent)(
                ::windows_core::Interface::as_raw(this),
                value.try_into_param()?.abi(),
            )
            .ok()
        }
    }
    pub unsafe fn CreateInstance<P0>(
        baseinterface: P0,
        innerinterface: &mut ::core::option::Option<::windows_core::IInspectable>,
    ) -> ::windows_core::Result<ElementFactoryRecycleArgs>
    where
        P0: ::windows_core::IntoParam<::windows_core::IInspectable>,
    {
        Self::IElementFactoryRecycleArgsFactory(|this| unsafe {
            let mut result__ = ::std::mem::zeroed();
            (::windows_core::Interface::vtable(this).CreateInstance)(
                ::windows_core::Interface::as_raw(this),
                baseinterface.into_param().abi(),
                innerinterface as *mut _ as _,
                &mut result__,
            )
            .from_abi(result__)
        })
    }
    #[doc(hidden)]
    pub fn IElementFactoryRecycleArgsFactory<
        R,
        F: FnOnce(&IElementFactoryRecycleArgsFactory) -> ::windows_core::Result<R>,
    >(
        callback: F,
    ) -> ::windows_core::Result<R> {
        static SHARED: ::windows_core::imp::FactoryCache<
            ElementFactoryRecycleArgs,
            IElementFactoryRecycleArgsFactory,
        > = ::windows_core::imp::FactoryCache::new();
        SHARED.call(callback)
    }
}
impl ::windows_core::RuntimeType for ElementFactoryRecycleArgs {
    const SIGNATURE: ::windows_core::imp::ConstBuffer =
        ::windows_core::imp::ConstBuffer::for_class::<Self>();
}
unsafe impl ::windows_core::Interface for ElementFactoryRecycleArgs {
    type Vtable = IElementFactoryRecycleArgs_Vtbl;
}
unsafe impl ::windows_core::ComInterface for ElementFactoryRecycleArgs {
    const IID: ::windows_core::GUID =
        <IElementFactoryRecycleArgs as ::windows_core::ComInterface>::IID;
}
impl ::windows_core::RuntimeName for ElementFactoryRecycleArgs {
    const NAME: &'static str = "Microsoft.UI.Xaml.ElementFactoryRecycleArgs";
}
::windows_core::imp::interface_hierarchy!(
    ElementFactoryRecycleArgs,
    ::windows_core::IUnknown,
    ::windows_core::IInspectable
);
unsafe impl ::core::marker::Send for ElementFactoryRecycleArgs {}
unsafe impl ::core::marker::Sync for ElementFactoryRecycleArgs {}
#[repr(transparent)]
#[derive(::core::cmp::PartialEq, ::core::cmp::Eq, ::core::fmt::Debug, ::core::clone::Clone)]
pub struct ElementSoundPlayer(::windows_core::IUnknown);
impl ElementSoundPlayer {
    pub fn Volume() -> ::windows_core::Result<f64> {
        Self::IElementSoundPlayerStatics(|this| unsafe {
            let mut result__ = ::std::mem::zeroed();
            (::windows_core::Interface::vtable(this).Volume)(
                ::windows_core::Interface::as_raw(this),
                &mut result__,
            )
            .from_abi(result__)
        })
    }
    pub fn SetVolume(value: f64) -> ::windows_core::Result<()> {
        Self::IElementSoundPlayerStatics(|this| unsafe {
            (::windows_core::Interface::vtable(this).SetVolume)(
                ::windows_core::Interface::as_raw(this),
                value,
            )
            .ok()
        })
    }
    pub fn State() -> ::windows_core::Result<ElementSoundPlayerState> {
        Self::IElementSoundPlayerStatics(|this| unsafe {
            let mut result__ = ::std::mem::zeroed();
            (::windows_core::Interface::vtable(this).State)(
                ::windows_core::Interface::as_raw(this),
                &mut result__,
            )
            .from_abi(result__)
        })
    }
    pub fn SetState(value: ElementSoundPlayerState) -> ::windows_core::Result<()> {
        Self::IElementSoundPlayerStatics(|this| unsafe {
            (::windows_core::Interface::vtable(this).SetState)(
                ::windows_core::Interface::as_raw(this),
                value,
            )
            .ok()
        })
    }
    pub fn SpatialAudioMode() -> ::windows_core::Result<ElementSpatialAudioMode> {
        Self::IElementSoundPlayerStatics(|this| unsafe {
            let mut result__ = ::std::mem::zeroed();
            (::windows_core::Interface::vtable(this).SpatialAudioMode)(
                ::windows_core::Interface::as_raw(this),
                &mut result__,
            )
            .from_abi(result__)
        })
    }
    pub fn SetSpatialAudioMode(value: ElementSpatialAudioMode) -> ::windows_core::Result<()> {
        Self::IElementSoundPlayerStatics(|this| unsafe {
            (::windows_core::Interface::vtable(this).SetSpatialAudioMode)(
                ::windows_core::Interface::as_raw(this),
                value,
            )
            .ok()
        })
    }
    pub fn Play(sound: ElementSoundKind) -> ::windows_core::Result<()> {
        Self::IElementSoundPlayerStatics(|this| unsafe {
            (::windows_core::Interface::vtable(this).Play)(
                ::windows_core::Interface::as_raw(this),
                sound,
            )
            .ok()
        })
    }
    #[doc(hidden)]
    pub fn IElementSoundPlayerStatics<
        R,
        F: FnOnce(&IElementSoundPlayerStatics) -> ::windows_core::Result<R>,
    >(
        callback: F,
    ) -> ::windows_core::Result<R> {
        static SHARED: ::windows_core::imp::FactoryCache<
            ElementSoundPlayer,
            IElementSoundPlayerStatics,
        > = ::windows_core::imp::FactoryCache::new();
        SHARED.call(callback)
    }
}
impl ::windows_core::RuntimeType for ElementSoundPlayer {
    const SIGNATURE: ::windows_core::imp::ConstBuffer =
        ::windows_core::imp::ConstBuffer::for_class::<Self>();
}
unsafe impl ::windows_core::Interface for ElementSoundPlayer {
    type Vtable = IElementSoundPlayer_Vtbl;
}
unsafe impl ::windows_core::ComInterface for ElementSoundPlayer {
    const IID: ::windows_core::GUID = <IElementSoundPlayer as ::windows_core::ComInterface>::IID;
}
impl ::windows_core::RuntimeName for ElementSoundPlayer {
    const NAME: &'static str = "Microsoft.UI.Xaml.ElementSoundPlayer";
}
::windows_core::imp::interface_hierarchy!(
    ElementSoundPlayer,
    ::windows_core::IUnknown,
    ::windows_core::IInspectable
);
unsafe impl ::core::marker::Send for ElementSoundPlayer {}
unsafe impl ::core::marker::Sync for ElementSoundPlayer {}
#[repr(transparent)]
#[derive(::core::cmp::PartialEq, ::core::cmp::Eq, ::core::fmt::Debug, ::core::clone::Clone)]
pub struct EventTrigger(::windows_core::IUnknown);
impl EventTrigger {
    pub fn new() -> ::windows_core::Result<Self> {
        Self::IActivationFactory(|f| f.ActivateInstance::<Self>())
    }
    fn IActivationFactory<
        R,
        F: FnOnce(&::windows_core::imp::IGenericFactory) -> ::windows_core::Result<R>,
    >(
        callback: F,
    ) -> ::windows_core::Result<R> {
        static SHARED: ::windows_core::imp::FactoryCache<
            EventTrigger,
            ::windows_core::imp::IGenericFactory,
        > = ::windows_core::imp::FactoryCache::new();
        SHARED.call(callback)
    }
    pub fn GetValue<P0>(&self, dp: P0) -> ::windows_core::Result<::windows_core::IInspectable>
    where
        P0: ::windows_core::IntoParam<DependencyProperty>,
    {
        let this = &::windows_core::ComInterface::cast::<IDependencyObject>(self)?;
        unsafe {
            let mut result__ = ::std::mem::zeroed();
            (::windows_core::Interface::vtable(this).GetValue)(
                ::windows_core::Interface::as_raw(this),
                dp.into_param().abi(),
                &mut result__,
            )
            .from_abi(result__)
        }
    }
    pub fn SetValue<P0, P1>(&self, dp: P0, value: P1) -> ::windows_core::Result<()>
    where
        P0: ::windows_core::IntoParam<DependencyProperty>,
        P1: ::windows_core::IntoParam<::windows_core::IInspectable>,
    {
        let this = &::windows_core::ComInterface::cast::<IDependencyObject>(self)?;
        unsafe {
            (::windows_core::Interface::vtable(this).SetValue)(
                ::windows_core::Interface::as_raw(this),
                dp.into_param().abi(),
                value.into_param().abi(),
            )
            .ok()
        }
    }
    pub fn ClearValue<P0>(&self, dp: P0) -> ::windows_core::Result<()>
    where
        P0: ::windows_core::IntoParam<DependencyProperty>,
    {
        let this = &::windows_core::ComInterface::cast::<IDependencyObject>(self)?;
        unsafe {
            (::windows_core::Interface::vtable(this).ClearValue)(
                ::windows_core::Interface::as_raw(this),
                dp.into_param().abi(),
            )
            .ok()
        }
    }
    pub fn ReadLocalValue<P0>(&self, dp: P0) -> ::windows_core::Result<::windows_core::IInspectable>
    where
        P0: ::windows_core::IntoParam<DependencyProperty>,
    {
        let this = &::windows_core::ComInterface::cast::<IDependencyObject>(self)?;
        unsafe {
            let mut result__ = ::std::mem::zeroed();
            (::windows_core::Interface::vtable(this).ReadLocalValue)(
                ::windows_core::Interface::as_raw(this),
                dp.into_param().abi(),
                &mut result__,
            )
            .from_abi(result__)
        }
    }
    pub fn GetAnimationBaseValue<P0>(
        &self,
        dp: P0,
    ) -> ::windows_core::Result<::windows_core::IInspectable>
    where
        P0: ::windows_core::IntoParam<DependencyProperty>,
    {
        let this = &::windows_core::ComInterface::cast::<IDependencyObject>(self)?;
        unsafe {
            let mut result__ = ::std::mem::zeroed();
            (::windows_core::Interface::vtable(this).GetAnimationBaseValue)(
                ::windows_core::Interface::as_raw(this),
                dp.into_param().abi(),
                &mut result__,
            )
            .from_abi(result__)
        }
    }
    pub fn RegisterPropertyChangedCallback<P0, P1>(
        &self,
        dp: P0,
        callback: P1,
    ) -> ::windows_core::Result<i64>
    where
        P0: ::windows_core::IntoParam<DependencyProperty>,
        P1: ::windows_core::IntoParam<DependencyPropertyChangedCallback>,
    {
        let this = &::windows_core::ComInterface::cast::<IDependencyObject>(self)?;
        unsafe {
            let mut result__ = ::std::mem::zeroed();
            (::windows_core::Interface::vtable(this).RegisterPropertyChangedCallback)(
                ::windows_core::Interface::as_raw(this),
                dp.into_param().abi(),
                callback.into_param().abi(),
                &mut result__,
            )
            .from_abi(result__)
        }
    }
    pub fn UnregisterPropertyChangedCallback<P0>(
        &self,
        dp: P0,
        token: i64,
    ) -> ::windows_core::Result<()>
    where
        P0: ::windows_core::IntoParam<DependencyProperty>,
    {
        let this = &::windows_core::ComInterface::cast::<IDependencyObject>(self)?;
        unsafe {
            (::windows_core::Interface::vtable(this).UnregisterPropertyChangedCallback)(
                ::windows_core::Interface::as_raw(this),
                dp.into_param().abi(),
                token,
            )
            .ok()
        }
    }
    #[doc = "Required features: `\"Windows_UI_Core\"`"]
    #[cfg(feature = "Windows_UI_Core")]
    pub fn Dispatcher(&self) -> ::windows_core::Result<::windows::UI::Core::CoreDispatcher> {
        let this = &::windows_core::ComInterface::cast::<IDependencyObject>(self)?;
        unsafe {
            let mut result__ = ::std::mem::zeroed();
            (::windows_core::Interface::vtable(this).Dispatcher)(
                ::windows_core::Interface::as_raw(this),
                &mut result__,
            )
            .from_abi(result__)
        }
    }
    #[doc = "Required features: `\"Microsoft_UI_Dispatching\"`"]
    #[cfg(feature = "Microsoft_UI_Dispatching")]
    pub fn DispatcherQueue(&self) -> ::windows_core::Result<super::Dispatching::DispatcherQueue> {
        let this = &::windows_core::ComInterface::cast::<IDependencyObject>(self)?;
        unsafe {
            let mut result__ = ::std::mem::zeroed();
            (::windows_core::Interface::vtable(this).DispatcherQueue)(
                ::windows_core::Interface::as_raw(this),
                &mut result__,
            )
            .from_abi(result__)
        }
    }
    pub fn RoutedEvent(&self) -> ::windows_core::Result<RoutedEvent> {
        let this = self;
        unsafe {
            let mut result__ = ::std::mem::zeroed();
            (::windows_core::Interface::vtable(this).RoutedEvent)(
                ::windows_core::Interface::as_raw(this),
                &mut result__,
            )
            .from_abi(result__)
        }
    }
    pub fn SetRoutedEvent<P0>(&self, value: P0) -> ::windows_core::Result<()>
    where
        P0: ::windows_core::IntoParam<RoutedEvent>,
    {
        let this = self;
        unsafe {
            (::windows_core::Interface::vtable(this).SetRoutedEvent)(
                ::windows_core::Interface::as_raw(this),
                value.into_param().abi(),
            )
            .ok()
        }
    }
    #[doc = "Required features: `\"Windows_Foundation_Collections\"`"]
    #[cfg(feature = "Windows_Foundation_Collections")]
    pub fn Actions(&self) -> ::windows_core::Result<TriggerActionCollection> {
        let this = self;
        unsafe {
            let mut result__ = ::std::mem::zeroed();
            (::windows_core::Interface::vtable(this).Actions)(
                ::windows_core::Interface::as_raw(this),
                &mut result__,
            )
            .from_abi(result__)
        }
    }
}
impl ::windows_core::RuntimeType for EventTrigger {
    const SIGNATURE: ::windows_core::imp::ConstBuffer =
        ::windows_core::imp::ConstBuffer::for_class::<Self>();
}
unsafe impl ::windows_core::Interface for EventTrigger {
    type Vtable = IEventTrigger_Vtbl;
}
unsafe impl ::windows_core::ComInterface for EventTrigger {
    const IID: ::windows_core::GUID = <IEventTrigger as ::windows_core::ComInterface>::IID;
}
impl ::windows_core::RuntimeName for EventTrigger {
    const NAME: &'static str = "Microsoft.UI.Xaml.EventTrigger";
}
::windows_core::imp::interface_hierarchy!(
    EventTrigger,
    ::windows_core::IUnknown,
    ::windows_core::IInspectable
);
impl ::windows_core::CanTryInto<TriggerBase> for EventTrigger {}
impl ::windows_core::CanTryInto<DependencyObject> for EventTrigger {}
unsafe impl ::core::marker::Send for EventTrigger {}
unsafe impl ::core::marker::Sync for EventTrigger {}
#[repr(transparent)]
#[derive(::core::cmp::PartialEq, ::core::cmp::Eq, ::core::fmt::Debug, ::core::clone::Clone)]
pub struct ExceptionRoutedEventArgs(::windows_core::IUnknown);
impl ExceptionRoutedEventArgs {
    pub fn ErrorMessage(&self) -> ::windows_core::Result<::windows_core::HSTRING> {
        let this = self;
        unsafe {
            let mut result__ = ::std::mem::zeroed();
            (::windows_core::Interface::vtable(this).ErrorMessage)(
                ::windows_core::Interface::as_raw(this),
                &mut result__,
            )
            .from_abi(result__)
        }
    }
    pub fn OriginalSource(&self) -> ::windows_core::Result<::windows_core::IInspectable> {
        let this = &::windows_core::ComInterface::cast::<IRoutedEventArgs>(self)?;
        unsafe {
            let mut result__ = ::std::mem::zeroed();
            (::windows_core::Interface::vtable(this).OriginalSource)(
                ::windows_core::Interface::as_raw(this),
                &mut result__,
            )
            .from_abi(result__)
        }
    }
}
impl ::windows_core::RuntimeType for ExceptionRoutedEventArgs {
    const SIGNATURE: ::windows_core::imp::ConstBuffer =
        ::windows_core::imp::ConstBuffer::for_class::<Self>();
}
unsafe impl ::windows_core::Interface for ExceptionRoutedEventArgs {
    type Vtable = IExceptionRoutedEventArgs_Vtbl;
}
unsafe impl ::windows_core::ComInterface for ExceptionRoutedEventArgs {
    const IID: ::windows_core::GUID =
        <IExceptionRoutedEventArgs as ::windows_core::ComInterface>::IID;
}
impl ::windows_core::RuntimeName for ExceptionRoutedEventArgs {
    const NAME: &'static str = "Microsoft.UI.Xaml.ExceptionRoutedEventArgs";
}
::windows_core::imp::interface_hierarchy!(
    ExceptionRoutedEventArgs,
    ::windows_core::IUnknown,
    ::windows_core::IInspectable
);
impl ::windows_core::CanTryInto<RoutedEventArgs> for ExceptionRoutedEventArgs {}
unsafe impl ::core::marker::Send for ExceptionRoutedEventArgs {}
unsafe impl ::core::marker::Sync for ExceptionRoutedEventArgs {}
#[repr(transparent)]
#[derive(::core::cmp::PartialEq, ::core::cmp::Eq, ::core::fmt::Debug, ::core::clone::Clone)]
pub struct FrameworkElement(::windows_core::IUnknown);
impl FrameworkElement {
    #[doc = "Required features: `\"Microsoft_UI_Composition\"`"]
    #[cfg(feature = "Microsoft_UI_Composition")]
    pub fn PopulatePropertyInfo<P0>(
        &self,
        propertyname: &::windows_core::HSTRING,
        propertyinfo: P0,
    ) -> ::windows_core::Result<()>
    where
        P0: ::windows_core::IntoParam<super::Composition::AnimationPropertyInfo>,
    {
        let this =
            &::windows_core::ComInterface::cast::<super::Composition::IAnimationObject>(self)?;
        unsafe {
            (::windows_core::Interface::vtable(this).PopulatePropertyInfo)(
                ::windows_core::Interface::as_raw(this),
                ::core::mem::transmute_copy(propertyname),
                propertyinfo.into_param().abi(),
            )
            .ok()
        }
    }
    pub fn GetValue<P0>(&self, dp: P0) -> ::windows_core::Result<::windows_core::IInspectable>
    where
        P0: ::windows_core::IntoParam<DependencyProperty>,
    {
        let this = &::windows_core::ComInterface::cast::<IDependencyObject>(self)?;
        unsafe {
            let mut result__ = ::std::mem::zeroed();
            (::windows_core::Interface::vtable(this).GetValue)(
                ::windows_core::Interface::as_raw(this),
                dp.into_param().abi(),
                &mut result__,
            )
            .from_abi(result__)
        }
    }
    pub fn SetValue<P0, P1>(&self, dp: P0, value: P1) -> ::windows_core::Result<()>
    where
        P0: ::windows_core::IntoParam<DependencyProperty>,
        P1: ::windows_core::IntoParam<::windows_core::IInspectable>,
    {
        let this = &::windows_core::ComInterface::cast::<IDependencyObject>(self)?;
        unsafe {
            (::windows_core::Interface::vtable(this).SetValue)(
                ::windows_core::Interface::as_raw(this),
                dp.into_param().abi(),
                value.into_param().abi(),
            )
            .ok()
        }
    }
    pub fn ClearValue<P0>(&self, dp: P0) -> ::windows_core::Result<()>
    where
        P0: ::windows_core::IntoParam<DependencyProperty>,
    {
        let this = &::windows_core::ComInterface::cast::<IDependencyObject>(self)?;
        unsafe {
            (::windows_core::Interface::vtable(this).ClearValue)(
                ::windows_core::Interface::as_raw(this),
                dp.into_param().abi(),
            )
            .ok()
        }
    }
    pub fn ReadLocalValue<P0>(&self, dp: P0) -> ::windows_core::Result<::windows_core::IInspectable>
    where
        P0: ::windows_core::IntoParam<DependencyProperty>,
    {
        let this = &::windows_core::ComInterface::cast::<IDependencyObject>(self)?;
        unsafe {
            let mut result__ = ::std::mem::zeroed();
            (::windows_core::Interface::vtable(this).ReadLocalValue)(
                ::windows_core::Interface::as_raw(this),
                dp.into_param().abi(),
                &mut result__,
            )
            .from_abi(result__)
        }
    }
    pub fn GetAnimationBaseValue<P0>(
        &self,
        dp: P0,
    ) -> ::windows_core::Result<::windows_core::IInspectable>
    where
        P0: ::windows_core::IntoParam<DependencyProperty>,
    {
        let this = &::windows_core::ComInterface::cast::<IDependencyObject>(self)?;
        unsafe {
            let mut result__ = ::std::mem::zeroed();
            (::windows_core::Interface::vtable(this).GetAnimationBaseValue)(
                ::windows_core::Interface::as_raw(this),
                dp.into_param().abi(),
                &mut result__,
            )
            .from_abi(result__)
        }
    }
    pub fn RegisterPropertyChangedCallback<P0, P1>(
        &self,
        dp: P0,
        callback: P1,
    ) -> ::windows_core::Result<i64>
    where
        P0: ::windows_core::IntoParam<DependencyProperty>,
        P1: ::windows_core::IntoParam<DependencyPropertyChangedCallback>,
    {
        let this = &::windows_core::ComInterface::cast::<IDependencyObject>(self)?;
        unsafe {
            let mut result__ = ::std::mem::zeroed();
            (::windows_core::Interface::vtable(this).RegisterPropertyChangedCallback)(
                ::windows_core::Interface::as_raw(this),
                dp.into_param().abi(),
                callback.into_param().abi(),
                &mut result__,
            )
            .from_abi(result__)
        }
    }
    pub fn UnregisterPropertyChangedCallback<P0>(
        &self,
        dp: P0,
        token: i64,
    ) -> ::windows_core::Result<()>
    where
        P0: ::windows_core::IntoParam<DependencyProperty>,
    {
        let this = &::windows_core::ComInterface::cast::<IDependencyObject>(self)?;
        unsafe {
            (::windows_core::Interface::vtable(this).UnregisterPropertyChangedCallback)(
                ::windows_core::Interface::as_raw(this),
                dp.into_param().abi(),
                token,
            )
            .ok()
        }
    }
    #[doc = "Required features: `\"Windows_UI_Core\"`"]
    #[cfg(feature = "Windows_UI_Core")]
    pub fn Dispatcher(&self) -> ::windows_core::Result<::windows::UI::Core::CoreDispatcher> {
        let this = &::windows_core::ComInterface::cast::<IDependencyObject>(self)?;
        unsafe {
            let mut result__ = ::std::mem::zeroed();
            (::windows_core::Interface::vtable(this).Dispatcher)(
                ::windows_core::Interface::as_raw(this),
                &mut result__,
            )
            .from_abi(result__)
        }
    }
    #[doc = "Required features: `\"Microsoft_UI_Dispatching\"`"]
    #[cfg(feature = "Microsoft_UI_Dispatching")]
    pub fn DispatcherQueue(&self) -> ::windows_core::Result<super::Dispatching::DispatcherQueue> {
        let this = &::windows_core::ComInterface::cast::<IDependencyObject>(self)?;
        unsafe {
            let mut result__ = ::std::mem::zeroed();
            (::windows_core::Interface::vtable(this).DispatcherQueue)(
                ::windows_core::Interface::as_raw(this),
                &mut result__,
            )
            .from_abi(result__)
        }
    }
    #[doc = "Required features: `\"Windows_Foundation_Collections\"`"]
    #[cfg(feature = "Windows_Foundation_Collections")]
    pub fn Triggers(&self) -> ::windows_core::Result<TriggerCollection> {
        let this = self;
        unsafe {
            let mut result__ = ::std::mem::zeroed();
            (::windows_core::Interface::vtable(this).Triggers)(
                ::windows_core::Interface::as_raw(this),
                &mut result__,
            )
            .from_abi(result__)
        }
    }
    pub fn Resources(&self) -> ::windows_core::Result<ResourceDictionary> {
        let this = self;
        unsafe {
            let mut result__ = ::std::mem::zeroed();
            (::windows_core::Interface::vtable(this).Resources)(
                ::windows_core::Interface::as_raw(this),
                &mut result__,
            )
            .from_abi(result__)
        }
    }
    pub fn SetResources<P0>(&self, value: P0) -> ::windows_core::Result<()>
    where
        P0: ::windows_core::TryIntoParam<ResourceDictionary>,
    {
        let this = self;
        unsafe {
            (::windows_core::Interface::vtable(this).SetResources)(
                ::windows_core::Interface::as_raw(this),
                value.try_into_param()?.abi(),
            )
            .ok()
        }
    }
    pub fn Tag(&self) -> ::windows_core::Result<::windows_core::IInspectable> {
        let this = self;
        unsafe {
            let mut result__ = ::std::mem::zeroed();
            (::windows_core::Interface::vtable(this).Tag)(
                ::windows_core::Interface::as_raw(this),
                &mut result__,
            )
            .from_abi(result__)
        }
    }
    pub fn SetTag<P0>(&self, value: P0) -> ::windows_core::Result<()>
    where
        P0: ::windows_core::IntoParam<::windows_core::IInspectable>,
    {
        let this = self;
        unsafe {
            (::windows_core::Interface::vtable(this).SetTag)(
                ::windows_core::Interface::as_raw(this),
                value.into_param().abi(),
            )
            .ok()
        }
    }
    pub fn Language(&self) -> ::windows_core::Result<::windows_core::HSTRING> {
        let this = self;
        unsafe {
            let mut result__ = ::std::mem::zeroed();
            (::windows_core::Interface::vtable(this).Language)(
                ::windows_core::Interface::as_raw(this),
                &mut result__,
            )
            .from_abi(result__)
        }
    }
    pub fn SetLanguage(&self, value: &::windows_core::HSTRING) -> ::windows_core::Result<()> {
        let this = self;
        unsafe {
            (::windows_core::Interface::vtable(this).SetLanguage)(
                ::windows_core::Interface::as_raw(this),
                ::core::mem::transmute_copy(value),
            )
            .ok()
        }
    }
    pub fn ActualWidth(&self) -> ::windows_core::Result<f64> {
        let this = self;
        unsafe {
            let mut result__ = ::std::mem::zeroed();
            (::windows_core::Interface::vtable(this).ActualWidth)(
                ::windows_core::Interface::as_raw(this),
                &mut result__,
            )
            .from_abi(result__)
        }
    }
    pub fn ActualHeight(&self) -> ::windows_core::Result<f64> {
        let this = self;
        unsafe {
            let mut result__ = ::std::mem::zeroed();
            (::windows_core::Interface::vtable(this).ActualHeight)(
                ::windows_core::Interface::as_raw(this),
                &mut result__,
            )
            .from_abi(result__)
        }
    }
    pub fn Width(&self) -> ::windows_core::Result<f64> {
        let this = self;
        unsafe {
            let mut result__ = ::std::mem::zeroed();
            (::windows_core::Interface::vtable(this).Width)(
                ::windows_core::Interface::as_raw(this),
                &mut result__,
            )
            .from_abi(result__)
        }
    }
    pub fn SetWidth(&self, value: f64) -> ::windows_core::Result<()> {
        let this = self;
        unsafe {
            (::windows_core::Interface::vtable(this).SetWidth)(
                ::windows_core::Interface::as_raw(this),
                value,
            )
            .ok()
        }
    }
    pub fn Height(&self) -> ::windows_core::Result<f64> {
        let this = self;
        unsafe {
            let mut result__ = ::std::mem::zeroed();
            (::windows_core::Interface::vtable(this).Height)(
                ::windows_core::Interface::as_raw(this),
                &mut result__,
            )
            .from_abi(result__)
        }
    }
    pub fn SetHeight(&self, value: f64) -> ::windows_core::Result<()> {
        let this = self;
        unsafe {
            (::windows_core::Interface::vtable(this).SetHeight)(
                ::windows_core::Interface::as_raw(this),
                value,
            )
            .ok()
        }
    }
    pub fn MinWidth(&self) -> ::windows_core::Result<f64> {
        let this = self;
        unsafe {
            let mut result__ = ::std::mem::zeroed();
            (::windows_core::Interface::vtable(this).MinWidth)(
                ::windows_core::Interface::as_raw(this),
                &mut result__,
            )
            .from_abi(result__)
        }
    }
    pub fn SetMinWidth(&self, value: f64) -> ::windows_core::Result<()> {
        let this = self;
        unsafe {
            (::windows_core::Interface::vtable(this).SetMinWidth)(
                ::windows_core::Interface::as_raw(this),
                value,
            )
            .ok()
        }
    }
    pub fn MaxWidth(&self) -> ::windows_core::Result<f64> {
        let this = self;
        unsafe {
            let mut result__ = ::std::mem::zeroed();
            (::windows_core::Interface::vtable(this).MaxWidth)(
                ::windows_core::Interface::as_raw(this),
                &mut result__,
            )
            .from_abi(result__)
        }
    }
    pub fn SetMaxWidth(&self, value: f64) -> ::windows_core::Result<()> {
        let this = self;
        unsafe {
            (::windows_core::Interface::vtable(this).SetMaxWidth)(
                ::windows_core::Interface::as_raw(this),
                value,
            )
            .ok()
        }
    }
    pub fn MinHeight(&self) -> ::windows_core::Result<f64> {
        let this = self;
        unsafe {
            let mut result__ = ::std::mem::zeroed();
            (::windows_core::Interface::vtable(this).MinHeight)(
                ::windows_core::Interface::as_raw(this),
                &mut result__,
            )
            .from_abi(result__)
        }
    }
    pub fn SetMinHeight(&self, value: f64) -> ::windows_core::Result<()> {
        let this = self;
        unsafe {
            (::windows_core::Interface::vtable(this).SetMinHeight)(
                ::windows_core::Interface::as_raw(this),
                value,
            )
            .ok()
        }
    }
    pub fn MaxHeight(&self) -> ::windows_core::Result<f64> {
        let this = self;
        unsafe {
            let mut result__ = ::std::mem::zeroed();
            (::windows_core::Interface::vtable(this).MaxHeight)(
                ::windows_core::Interface::as_raw(this),
                &mut result__,
            )
            .from_abi(result__)
        }
    }
    pub fn SetMaxHeight(&self, value: f64) -> ::windows_core::Result<()> {
        let this = self;
        unsafe {
            (::windows_core::Interface::vtable(this).SetMaxHeight)(
                ::windows_core::Interface::as_raw(this),
                value,
            )
            .ok()
        }
    }
    pub fn HorizontalAlignment(&self) -> ::windows_core::Result<HorizontalAlignment> {
        let this = self;
        unsafe {
            let mut result__ = ::std::mem::zeroed();
            (::windows_core::Interface::vtable(this).HorizontalAlignment)(
                ::windows_core::Interface::as_raw(this),
                &mut result__,
            )
            .from_abi(result__)
        }
    }
    pub fn SetHorizontalAlignment(&self, value: HorizontalAlignment) -> ::windows_core::Result<()> {
        let this = self;
        unsafe {
            (::windows_core::Interface::vtable(this).SetHorizontalAlignment)(
                ::windows_core::Interface::as_raw(this),
                value,
            )
            .ok()
        }
    }
    pub fn VerticalAlignment(&self) -> ::windows_core::Result<VerticalAlignment> {
        let this = self;
        unsafe {
            let mut result__ = ::std::mem::zeroed();
            (::windows_core::Interface::vtable(this).VerticalAlignment)(
                ::windows_core::Interface::as_raw(this),
                &mut result__,
            )
            .from_abi(result__)
        }
    }
    pub fn SetVerticalAlignment(&self, value: VerticalAlignment) -> ::windows_core::Result<()> {
        let this = self;
        unsafe {
            (::windows_core::Interface::vtable(this).SetVerticalAlignment)(
                ::windows_core::Interface::as_raw(this),
                value,
            )
            .ok()
        }
    }
    pub fn Margin(&self) -> ::windows_core::Result<Thickness> {
        let this = self;
        unsafe {
            let mut result__ = ::std::mem::zeroed();
            (::windows_core::Interface::vtable(this).Margin)(
                ::windows_core::Interface::as_raw(this),
                &mut result__,
            )
            .from_abi(result__)
        }
    }
    pub fn SetMargin(&self, value: Thickness) -> ::windows_core::Result<()> {
        let this = self;
        unsafe {
            (::windows_core::Interface::vtable(this).SetMargin)(
                ::windows_core::Interface::as_raw(this),
                value,
            )
            .ok()
        }
    }
    pub fn Name(&self) -> ::windows_core::Result<::windows_core::HSTRING> {
        let this = self;
        unsafe {
            let mut result__ = ::std::mem::zeroed();
            (::windows_core::Interface::vtable(this).Name)(
                ::windows_core::Interface::as_raw(this),
                &mut result__,
            )
            .from_abi(result__)
        }
    }
    pub fn SetName(&self, value: &::windows_core::HSTRING) -> ::windows_core::Result<()> {
        let this = self;
        unsafe {
            (::windows_core::Interface::vtable(this).SetName)(
                ::windows_core::Interface::as_raw(this),
                ::core::mem::transmute_copy(value),
            )
            .ok()
        }
    }
    #[doc = "Required features: `\"Windows_Foundation\"`"]
    #[cfg(feature = "Windows_Foundation")]
    pub fn BaseUri(&self) -> ::windows_core::Result<::windows::Foundation::Uri> {
        let this = self;
        unsafe {
            let mut result__ = ::std::mem::zeroed();
            (::windows_core::Interface::vtable(this).BaseUri)(
                ::windows_core::Interface::as_raw(this),
                &mut result__,
            )
            .from_abi(result__)
        }
    }
    pub fn DataContext(&self) -> ::windows_core::Result<::windows_core::IInspectable> {
        let this = self;
        unsafe {
            let mut result__ = ::std::mem::zeroed();
            (::windows_core::Interface::vtable(this).DataContext)(
                ::windows_core::Interface::as_raw(this),
                &mut result__,
            )
            .from_abi(result__)
        }
    }
    pub fn SetDataContext<P0>(&self, value: P0) -> ::windows_core::Result<()>
    where
        P0: ::windows_core::IntoParam<::windows_core::IInspectable>,
    {
        let this = self;
        unsafe {
            (::windows_core::Interface::vtable(this).SetDataContext)(
                ::windows_core::Interface::as_raw(this),
                value.into_param().abi(),
            )
            .ok()
        }
    }
    pub fn AllowFocusOnInteraction(&self) -> ::windows_core::Result<bool> {
        let this = self;
        unsafe {
            let mut result__ = ::std::mem::zeroed();
            (::windows_core::Interface::vtable(this).AllowFocusOnInteraction)(
                ::windows_core::Interface::as_raw(this),
                &mut result__,
            )
            .from_abi(result__)
        }
    }
    pub fn SetAllowFocusOnInteraction(&self, value: bool) -> ::windows_core::Result<()> {
        let this = self;
        unsafe {
            (::windows_core::Interface::vtable(this).SetAllowFocusOnInteraction)(
                ::windows_core::Interface::as_raw(this),
                value,
            )
            .ok()
        }
    }
    pub fn FocusVisualMargin(&self) -> ::windows_core::Result<Thickness> {
        let this = self;
        unsafe {
            let mut result__ = ::std::mem::zeroed();
            (::windows_core::Interface::vtable(this).FocusVisualMargin)(
                ::windows_core::Interface::as_raw(this),
                &mut result__,
            )
            .from_abi(result__)
        }
    }
    pub fn SetFocusVisualMargin(&self, value: Thickness) -> ::windows_core::Result<()> {
        let this = self;
        unsafe {
            (::windows_core::Interface::vtable(this).SetFocusVisualMargin)(
                ::windows_core::Interface::as_raw(this),
                value,
            )
            .ok()
        }
    }
    pub fn FocusVisualSecondaryThickness(&self) -> ::windows_core::Result<Thickness> {
        let this = self;
        unsafe {
            let mut result__ = ::std::mem::zeroed();
            (::windows_core::Interface::vtable(this).FocusVisualSecondaryThickness)(
                ::windows_core::Interface::as_raw(this),
                &mut result__,
            )
            .from_abi(result__)
        }
    }
    pub fn SetFocusVisualSecondaryThickness(&self, value: Thickness) -> ::windows_core::Result<()> {
        let this = self;
        unsafe {
            (::windows_core::Interface::vtable(this).SetFocusVisualSecondaryThickness)(
                ::windows_core::Interface::as_raw(this),
                value,
            )
            .ok()
        }
    }
    pub fn FocusVisualPrimaryThickness(&self) -> ::windows_core::Result<Thickness> {
        let this = self;
        unsafe {
            let mut result__ = ::std::mem::zeroed();
            (::windows_core::Interface::vtable(this).FocusVisualPrimaryThickness)(
                ::windows_core::Interface::as_raw(this),
                &mut result__,
            )
            .from_abi(result__)
        }
    }
    pub fn SetFocusVisualPrimaryThickness(&self, value: Thickness) -> ::windows_core::Result<()> {
        let this = self;
        unsafe {
            (::windows_core::Interface::vtable(this).SetFocusVisualPrimaryThickness)(
                ::windows_core::Interface::as_raw(this),
                value,
            )
            .ok()
        }
    }
    #[doc = "Required features: `\"Microsoft_UI_Xaml_Media\"`"]
    #[cfg(feature = "Microsoft_UI_Xaml_Media")]
    pub fn FocusVisualSecondaryBrush(&self) -> ::windows_core::Result<Media::Brush> {
        let this = self;
        unsafe {
            let mut result__ = ::std::mem::zeroed();
            (::windows_core::Interface::vtable(this).FocusVisualSecondaryBrush)(
                ::windows_core::Interface::as_raw(this),
                &mut result__,
            )
            .from_abi(result__)
        }
    }
    #[doc = "Required features: `\"Microsoft_UI_Xaml_Media\"`"]
    #[cfg(feature = "Microsoft_UI_Xaml_Media")]
    pub fn SetFocusVisualSecondaryBrush<P0>(&self, value: P0) -> ::windows_core::Result<()>
    where
        P0: ::windows_core::TryIntoParam<Media::Brush>,
    {
        let this = self;
        unsafe {
            (::windows_core::Interface::vtable(this).SetFocusVisualSecondaryBrush)(
                ::windows_core::Interface::as_raw(this),
                value.try_into_param()?.abi(),
            )
            .ok()
        }
    }
    #[doc = "Required features: `\"Microsoft_UI_Xaml_Media\"`"]
    #[cfg(feature = "Microsoft_UI_Xaml_Media")]
    pub fn FocusVisualPrimaryBrush(&self) -> ::windows_core::Result<Media::Brush> {
        let this = self;
        unsafe {
            let mut result__ = ::std::mem::zeroed();
            (::windows_core::Interface::vtable(this).FocusVisualPrimaryBrush)(
                ::windows_core::Interface::as_raw(this),
                &mut result__,
            )
            .from_abi(result__)
        }
    }
    #[doc = "Required features: `\"Microsoft_UI_Xaml_Media\"`"]
    #[cfg(feature = "Microsoft_UI_Xaml_Media")]
    pub fn SetFocusVisualPrimaryBrush<P0>(&self, value: P0) -> ::windows_core::Result<()>
    where
        P0: ::windows_core::TryIntoParam<Media::Brush>,
    {
        let this = self;
        unsafe {
            (::windows_core::Interface::vtable(this).SetFocusVisualPrimaryBrush)(
                ::windows_core::Interface::as_raw(this),
                value.try_into_param()?.abi(),
            )
            .ok()
        }
    }
    pub fn AllowFocusWhenDisabled(&self) -> ::windows_core::Result<bool> {
        let this = self;
        unsafe {
            let mut result__ = ::std::mem::zeroed();
            (::windows_core::Interface::vtable(this).AllowFocusWhenDisabled)(
                ::windows_core::Interface::as_raw(this),
                &mut result__,
            )
            .from_abi(result__)
        }
    }
    pub fn SetAllowFocusWhenDisabled(&self, value: bool) -> ::windows_core::Result<()> {
        let this = self;
        unsafe {
            (::windows_core::Interface::vtable(this).SetAllowFocusWhenDisabled)(
                ::windows_core::Interface::as_raw(this),
                value,
            )
            .ok()
        }
    }
    pub fn Style(&self) -> ::windows_core::Result<Style> {
        let this = self;
        unsafe {
            let mut result__ = ::std::mem::zeroed();
            (::windows_core::Interface::vtable(this).Style)(
                ::windows_core::Interface::as_raw(this),
                &mut result__,
            )
            .from_abi(result__)
        }
    }
    pub fn SetStyle<P0>(&self, value: P0) -> ::windows_core::Result<()>
    where
        P0: ::windows_core::IntoParam<Style>,
    {
        let this = self;
        unsafe {
            (::windows_core::Interface::vtable(this).SetStyle)(
                ::windows_core::Interface::as_raw(this),
                value.into_param().abi(),
            )
            .ok()
        }
    }
    pub fn Parent(&self) -> ::windows_core::Result<DependencyObject> {
        let this = self;
        unsafe {
            let mut result__ = ::std::mem::zeroed();
            (::windows_core::Interface::vtable(this).Parent)(
                ::windows_core::Interface::as_raw(this),
                &mut result__,
            )
            .from_abi(result__)
        }
    }
    pub fn FlowDirection(&self) -> ::windows_core::Result<FlowDirection> {
        let this = self;
        unsafe {
            let mut result__ = ::std::mem::zeroed();
            (::windows_core::Interface::vtable(this).FlowDirection)(
                ::windows_core::Interface::as_raw(this),
                &mut result__,
            )
            .from_abi(result__)
        }
    }
    pub fn SetFlowDirection(&self, value: FlowDirection) -> ::windows_core::Result<()> {
        let this = self;
        unsafe {
            (::windows_core::Interface::vtable(this).SetFlowDirection)(
                ::windows_core::Interface::as_raw(this),
                value,
            )
            .ok()
        }
    }
    pub fn RequestedTheme(&self) -> ::windows_core::Result<ElementTheme> {
        let this = self;
        unsafe {
            let mut result__ = ::std::mem::zeroed();
            (::windows_core::Interface::vtable(this).RequestedTheme)(
                ::windows_core::Interface::as_raw(this),
                &mut result__,
            )
            .from_abi(result__)
        }
    }
    pub fn SetRequestedTheme(&self, value: ElementTheme) -> ::windows_core::Result<()> {
        let this = self;
        unsafe {
            (::windows_core::Interface::vtable(this).SetRequestedTheme)(
                ::windows_core::Interface::as_raw(this),
                value,
            )
            .ok()
        }
    }
    pub fn IsLoaded(&self) -> ::windows_core::Result<bool> {
        let this = self;
        unsafe {
            let mut result__ = ::std::mem::zeroed();
            (::windows_core::Interface::vtable(this).IsLoaded)(
                ::windows_core::Interface::as_raw(this),
                &mut result__,
            )
            .from_abi(result__)
        }
    }
    pub fn ActualTheme(&self) -> ::windows_core::Result<ElementTheme> {
        let this = self;
        unsafe {
            let mut result__ = ::std::mem::zeroed();
            (::windows_core::Interface::vtable(this).ActualTheme)(
                ::windows_core::Interface::as_raw(this),
                &mut result__,
            )
            .from_abi(result__)
        }
    }
    #[doc = "Required features: `\"Windows_Foundation\"`"]
    #[cfg(feature = "Windows_Foundation")]
    pub fn Loaded<P0>(
        &self,
        handler: P0,
    ) -> ::windows_core::Result<::windows::Foundation::EventRegistrationToken>
    where
        P0: ::windows_core::IntoParam<RoutedEventHandler>,
    {
        let this = self;
        unsafe {
            let mut result__ = ::std::mem::zeroed();
            (::windows_core::Interface::vtable(this).Loaded)(
                ::windows_core::Interface::as_raw(this),
                handler.into_param().abi(),
                &mut result__,
            )
            .from_abi(result__)
        }
    }
    #[doc = "Required features: `\"Windows_Foundation\"`"]
    #[cfg(feature = "Windows_Foundation")]
    pub fn RemoveLoaded(
        &self,
        token: ::windows::Foundation::EventRegistrationToken,
    ) -> ::windows_core::Result<()> {
        let this = self;
        unsafe {
            (::windows_core::Interface::vtable(this).RemoveLoaded)(
                ::windows_core::Interface::as_raw(this),
                token,
            )
            .ok()
        }
    }
    #[doc = "Required features: `\"Windows_Foundation\"`"]
    #[cfg(feature = "Windows_Foundation")]
    pub fn Unloaded<P0>(
        &self,
        handler: P0,
    ) -> ::windows_core::Result<::windows::Foundation::EventRegistrationToken>
    where
        P0: ::windows_core::IntoParam<RoutedEventHandler>,
    {
        let this = self;
        unsafe {
            let mut result__ = ::std::mem::zeroed();
            (::windows_core::Interface::vtable(this).Unloaded)(
                ::windows_core::Interface::as_raw(this),
                handler.into_param().abi(),
                &mut result__,
            )
            .from_abi(result__)
        }
    }
    #[doc = "Required features: `\"Windows_Foundation\"`"]
    #[cfg(feature = "Windows_Foundation")]
    pub fn RemoveUnloaded(
        &self,
        token: ::windows::Foundation::EventRegistrationToken,
    ) -> ::windows_core::Result<()> {
        let this = self;
        unsafe {
            (::windows_core::Interface::vtable(this).RemoveUnloaded)(
                ::windows_core::Interface::as_raw(this),
                token,
            )
            .ok()
        }
    }
    #[doc = "Required features: `\"Windows_Foundation\"`"]
    #[cfg(feature = "Windows_Foundation")]
    pub fn DataContextChanged<P0>(
        &self,
        handler: P0,
    ) -> ::windows_core::Result<::windows::Foundation::EventRegistrationToken>
    where
        P0: ::windows_core::IntoParam<
            ::windows::Foundation::TypedEventHandler<FrameworkElement, DataContextChangedEventArgs>,
        >,
    {
        let this = self;
        unsafe {
            let mut result__ = ::std::mem::zeroed();
            (::windows_core::Interface::vtable(this).DataContextChanged)(
                ::windows_core::Interface::as_raw(this),
                handler.into_param().abi(),
                &mut result__,
            )
            .from_abi(result__)
        }
    }
    #[doc = "Required features: `\"Windows_Foundation\"`"]
    #[cfg(feature = "Windows_Foundation")]
    pub fn RemoveDataContextChanged(
        &self,
        token: ::windows::Foundation::EventRegistrationToken,
    ) -> ::windows_core::Result<()> {
        let this = self;
        unsafe {
            (::windows_core::Interface::vtable(this).RemoveDataContextChanged)(
                ::windows_core::Interface::as_raw(this),
                token,
            )
            .ok()
        }
    }
    #[doc = "Required features: `\"Windows_Foundation\"`"]
    #[cfg(feature = "Windows_Foundation")]
    pub fn SizeChanged<P0>(
        &self,
        handler: P0,
    ) -> ::windows_core::Result<::windows::Foundation::EventRegistrationToken>
    where
        P0: ::windows_core::IntoParam<SizeChangedEventHandler>,
    {
        let this = self;
        unsafe {
            let mut result__ = ::std::mem::zeroed();
            (::windows_core::Interface::vtable(this).SizeChanged)(
                ::windows_core::Interface::as_raw(this),
                handler.into_param().abi(),
                &mut result__,
            )
            .from_abi(result__)
        }
    }
    #[doc = "Required features: `\"Windows_Foundation\"`"]
    #[cfg(feature = "Windows_Foundation")]
    pub fn RemoveSizeChanged(
        &self,
        token: ::windows::Foundation::EventRegistrationToken,
    ) -> ::windows_core::Result<()> {
        let this = self;
        unsafe {
            (::windows_core::Interface::vtable(this).RemoveSizeChanged)(
                ::windows_core::Interface::as_raw(this),
                token,
            )
            .ok()
        }
    }
    #[doc = "Required features: `\"Windows_Foundation\"`"]
    #[cfg(feature = "Windows_Foundation")]
    pub fn LayoutUpdated<P0>(
        &self,
        handler: P0,
    ) -> ::windows_core::Result<::windows::Foundation::EventRegistrationToken>
    where
        P0: ::windows_core::IntoParam<
            ::windows::Foundation::EventHandler<::windows_core::IInspectable>,
        >,
    {
        let this = self;
        unsafe {
            let mut result__ = ::std::mem::zeroed();
            (::windows_core::Interface::vtable(this).LayoutUpdated)(
                ::windows_core::Interface::as_raw(this),
                handler.into_param().abi(),
                &mut result__,
            )
            .from_abi(result__)
        }
    }
    #[doc = "Required features: `\"Windows_Foundation\"`"]
    #[cfg(feature = "Windows_Foundation")]
    pub fn RemoveLayoutUpdated(
        &self,
        token: ::windows::Foundation::EventRegistrationToken,
    ) -> ::windows_core::Result<()> {
        let this = self;
        unsafe {
            (::windows_core::Interface::vtable(this).RemoveLayoutUpdated)(
                ::windows_core::Interface::as_raw(this),
                token,
            )
            .ok()
        }
    }
    #[doc = "Required features: `\"Windows_Foundation\"`"]
    #[cfg(feature = "Windows_Foundation")]
    pub fn Loading<P0>(
        &self,
        handler: P0,
    ) -> ::windows_core::Result<::windows::Foundation::EventRegistrationToken>
    where
        P0: ::windows_core::IntoParam<
            ::windows::Foundation::TypedEventHandler<
                FrameworkElement,
                ::windows_core::IInspectable,
            >,
        >,
    {
        let this = self;
        unsafe {
            let mut result__ = ::std::mem::zeroed();
            (::windows_core::Interface::vtable(this).Loading)(
                ::windows_core::Interface::as_raw(this),
                handler.into_param().abi(),
                &mut result__,
            )
            .from_abi(result__)
        }
    }
    #[doc = "Required features: `\"Windows_Foundation\"`"]
    #[cfg(feature = "Windows_Foundation")]
    pub fn RemoveLoading(
        &self,
        token: ::windows::Foundation::EventRegistrationToken,
    ) -> ::windows_core::Result<()> {
        let this = self;
        unsafe {
            (::windows_core::Interface::vtable(this).RemoveLoading)(
                ::windows_core::Interface::as_raw(this),
                token,
            )
            .ok()
        }
    }
    #[doc = "Required features: `\"Windows_Foundation\"`"]
    #[cfg(feature = "Windows_Foundation")]
    pub fn ActualThemeChanged<P0>(
        &self,
        handler: P0,
    ) -> ::windows_core::Result<::windows::Foundation::EventRegistrationToken>
    where
        P0: ::windows_core::IntoParam<
            ::windows::Foundation::TypedEventHandler<
                FrameworkElement,
                ::windows_core::IInspectable,
            >,
        >,
    {
        let this = self;
        unsafe {
            let mut result__ = ::std::mem::zeroed();
            (::windows_core::Interface::vtable(this).ActualThemeChanged)(
                ::windows_core::Interface::as_raw(this),
                handler.into_param().abi(),
                &mut result__,
            )
            .from_abi(result__)
        }
    }
    #[doc = "Required features: `\"Windows_Foundation\"`"]
    #[cfg(feature = "Windows_Foundation")]
    pub fn RemoveActualThemeChanged(
        &self,
        token: ::windows::Foundation::EventRegistrationToken,
    ) -> ::windows_core::Result<()> {
        let this = self;
        unsafe {
            (::windows_core::Interface::vtable(this).RemoveActualThemeChanged)(
                ::windows_core::Interface::as_raw(this),
                token,
            )
            .ok()
        }
    }
    #[doc = "Required features: `\"Windows_Foundation\"`"]
    #[cfg(feature = "Windows_Foundation")]
    pub fn EffectiveViewportChanged<P0>(
        &self,
        handler: P0,
    ) -> ::windows_core::Result<::windows::Foundation::EventRegistrationToken>
    where
        P0: ::windows_core::IntoParam<
            ::windows::Foundation::TypedEventHandler<
                FrameworkElement,
                EffectiveViewportChangedEventArgs,
            >,
        >,
    {
        let this = self;
        unsafe {
            let mut result__ = ::std::mem::zeroed();
            (::windows_core::Interface::vtable(this).EffectiveViewportChanged)(
                ::windows_core::Interface::as_raw(this),
                handler.into_param().abi(),
                &mut result__,
            )
            .from_abi(result__)
        }
    }
    #[doc = "Required features: `\"Windows_Foundation\"`"]
    #[cfg(feature = "Windows_Foundation")]
    pub fn RemoveEffectiveViewportChanged(
        &self,
        token: ::windows::Foundation::EventRegistrationToken,
    ) -> ::windows_core::Result<()> {
        let this = self;
        unsafe {
            (::windows_core::Interface::vtable(this).RemoveEffectiveViewportChanged)(
                ::windows_core::Interface::as_raw(this),
                token,
            )
            .ok()
        }
    }
    pub fn FindName(
        &self,
        name: &::windows_core::HSTRING,
    ) -> ::windows_core::Result<::windows_core::IInspectable> {
        let this = self;
        unsafe {
            let mut result__ = ::std::mem::zeroed();
            (::windows_core::Interface::vtable(this).FindName)(
                ::windows_core::Interface::as_raw(this),
                ::core::mem::transmute_copy(name),
                &mut result__,
            )
            .from_abi(result__)
        }
    }
    #[doc = "Required features: `\"Microsoft_UI_Xaml_Data\"`"]
    #[cfg(feature = "Microsoft_UI_Xaml_Data")]
    pub fn SetBinding<P0, P1>(&self, dp: P0, binding: P1) -> ::windows_core::Result<()>
    where
        P0: ::windows_core::IntoParam<DependencyProperty>,
        P1: ::windows_core::TryIntoParam<Data::BindingBase>,
    {
        let this = self;
        unsafe {
            (::windows_core::Interface::vtable(this).SetBinding)(
                ::windows_core::Interface::as_raw(this),
                dp.into_param().abi(),
                binding.try_into_param()?.abi(),
            )
            .ok()
        }
    }
    #[doc = "Required features: `\"Microsoft_UI_Xaml_Data\"`"]
    #[cfg(feature = "Microsoft_UI_Xaml_Data")]
    pub fn GetBindingExpression<P0>(
        &self,
        dp: P0,
    ) -> ::windows_core::Result<Data::BindingExpression>
    where
        P0: ::windows_core::IntoParam<DependencyProperty>,
    {
        let this = self;
        unsafe {
            let mut result__ = ::std::mem::zeroed();
            (::windows_core::Interface::vtable(this).GetBindingExpression)(
                ::windows_core::Interface::as_raw(this),
                dp.into_param().abi(),
                &mut result__,
            )
            .from_abi(result__)
        }
    }
    pub unsafe fn CreateInstance<P0>(
        baseinterface: P0,
        innerinterface: &mut ::core::option::Option<::windows_core::IInspectable>,
    ) -> ::windows_core::Result<FrameworkElement>
    where
        P0: ::windows_core::IntoParam<::windows_core::IInspectable>,
    {
        Self::IFrameworkElementFactory(|this| unsafe {
            let mut result__ = ::std::mem::zeroed();
            (::windows_core::Interface::vtable(this).CreateInstance)(
                ::windows_core::Interface::as_raw(this),
                baseinterface.into_param().abi(),
                innerinterface as *mut _ as _,
                &mut result__,
            )
            .from_abi(result__)
        })
    }
    #[doc = "Required features: `\"Windows_Foundation\"`"]
    #[cfg(feature = "Windows_Foundation")]
    pub fn MeasureOverride(
        &self,
        availablesize: ::windows::Foundation::Size,
    ) -> ::windows_core::Result<::windows::Foundation::Size> {
        let this = &::windows_core::ComInterface::cast::<IFrameworkElementOverrides>(self)?;
        unsafe {
            let mut result__ = ::std::mem::zeroed();
            (::windows_core::Interface::vtable(this).MeasureOverride)(
                ::windows_core::Interface::as_raw(this),
                availablesize,
                &mut result__,
            )
            .from_abi(result__)
        }
    }
    #[doc = "Required features: `\"Windows_Foundation\"`"]
    #[cfg(feature = "Windows_Foundation")]
    pub fn ArrangeOverride(
        &self,
        finalsize: ::windows::Foundation::Size,
    ) -> ::windows_core::Result<::windows::Foundation::Size> {
        let this = &::windows_core::ComInterface::cast::<IFrameworkElementOverrides>(self)?;
        unsafe {
            let mut result__ = ::std::mem::zeroed();
            (::windows_core::Interface::vtable(this).ArrangeOverride)(
                ::windows_core::Interface::as_raw(this),
                finalsize,
                &mut result__,
            )
            .from_abi(result__)
        }
    }
    pub fn OnApplyTemplate(&self) -> ::windows_core::Result<()> {
        let this = &::windows_core::ComInterface::cast::<IFrameworkElementOverrides>(self)?;
        unsafe {
            (::windows_core::Interface::vtable(this).OnApplyTemplate)(
                ::windows_core::Interface::as_raw(this),
            )
            .ok()
        }
    }
    pub fn GoToElementStateCore(
        &self,
        statename: &::windows_core::HSTRING,
        usetransitions: bool,
    ) -> ::windows_core::Result<bool> {
        let this = &::windows_core::ComInterface::cast::<IFrameworkElementOverrides>(self)?;
        unsafe {
            let mut result__ = ::std::mem::zeroed();
            (::windows_core::Interface::vtable(this).GoToElementStateCore)(
                ::windows_core::Interface::as_raw(this),
                ::core::mem::transmute_copy(statename),
                usetransitions,
                &mut result__,
            )
            .from_abi(result__)
        }
    }
    pub fn InvalidateViewport(&self) -> ::windows_core::Result<()> {
        let this = &::windows_core::ComInterface::cast::<IFrameworkElementProtected>(self)?;
        unsafe {
            (::windows_core::Interface::vtable(this).InvalidateViewport)(
                ::windows_core::Interface::as_raw(this),
            )
            .ok()
        }
    }
    pub fn TagProperty() -> ::windows_core::Result<DependencyProperty> {
        Self::IFrameworkElementStatics(|this| unsafe {
            let mut result__ = ::std::mem::zeroed();
            (::windows_core::Interface::vtable(this).TagProperty)(
                ::windows_core::Interface::as_raw(this),
                &mut result__,
            )
            .from_abi(result__)
        })
    }
    pub fn LanguageProperty() -> ::windows_core::Result<DependencyProperty> {
        Self::IFrameworkElementStatics(|this| unsafe {
            let mut result__ = ::std::mem::zeroed();
            (::windows_core::Interface::vtable(this).LanguageProperty)(
                ::windows_core::Interface::as_raw(this),
                &mut result__,
            )
            .from_abi(result__)
        })
    }
    pub fn ActualWidthProperty() -> ::windows_core::Result<DependencyProperty> {
        Self::IFrameworkElementStatics(|this| unsafe {
            let mut result__ = ::std::mem::zeroed();
            (::windows_core::Interface::vtable(this).ActualWidthProperty)(
                ::windows_core::Interface::as_raw(this),
                &mut result__,
            )
            .from_abi(result__)
        })
    }
    pub fn ActualHeightProperty() -> ::windows_core::Result<DependencyProperty> {
        Self::IFrameworkElementStatics(|this| unsafe {
            let mut result__ = ::std::mem::zeroed();
            (::windows_core::Interface::vtable(this).ActualHeightProperty)(
                ::windows_core::Interface::as_raw(this),
                &mut result__,
            )
            .from_abi(result__)
        })
    }
    pub fn WidthProperty() -> ::windows_core::Result<DependencyProperty> {
        Self::IFrameworkElementStatics(|this| unsafe {
            let mut result__ = ::std::mem::zeroed();
            (::windows_core::Interface::vtable(this).WidthProperty)(
                ::windows_core::Interface::as_raw(this),
                &mut result__,
            )
            .from_abi(result__)
        })
    }
    pub fn HeightProperty() -> ::windows_core::Result<DependencyProperty> {
        Self::IFrameworkElementStatics(|this| unsafe {
            let mut result__ = ::std::mem::zeroed();
            (::windows_core::Interface::vtable(this).HeightProperty)(
                ::windows_core::Interface::as_raw(this),
                &mut result__,
            )
            .from_abi(result__)
        })
    }
    pub fn MinWidthProperty() -> ::windows_core::Result<DependencyProperty> {
        Self::IFrameworkElementStatics(|this| unsafe {
            let mut result__ = ::std::mem::zeroed();
            (::windows_core::Interface::vtable(this).MinWidthProperty)(
                ::windows_core::Interface::as_raw(this),
                &mut result__,
            )
            .from_abi(result__)
        })
    }
    pub fn MaxWidthProperty() -> ::windows_core::Result<DependencyProperty> {
        Self::IFrameworkElementStatics(|this| unsafe {
            let mut result__ = ::std::mem::zeroed();
            (::windows_core::Interface::vtable(this).MaxWidthProperty)(
                ::windows_core::Interface::as_raw(this),
                &mut result__,
            )
            .from_abi(result__)
        })
    }
    pub fn MinHeightProperty() -> ::windows_core::Result<DependencyProperty> {
        Self::IFrameworkElementStatics(|this| unsafe {
            let mut result__ = ::std::mem::zeroed();
            (::windows_core::Interface::vtable(this).MinHeightProperty)(
                ::windows_core::Interface::as_raw(this),
                &mut result__,
            )
            .from_abi(result__)
        })
    }
    pub fn MaxHeightProperty() -> ::windows_core::Result<DependencyProperty> {
        Self::IFrameworkElementStatics(|this| unsafe {
            let mut result__ = ::std::mem::zeroed();
            (::windows_core::Interface::vtable(this).MaxHeightProperty)(
                ::windows_core::Interface::as_raw(this),
                &mut result__,
            )
            .from_abi(result__)
        })
    }
    pub fn HorizontalAlignmentProperty() -> ::windows_core::Result<DependencyProperty> {
        Self::IFrameworkElementStatics(|this| unsafe {
            let mut result__ = ::std::mem::zeroed();
            (::windows_core::Interface::vtable(this).HorizontalAlignmentProperty)(
                ::windows_core::Interface::as_raw(this),
                &mut result__,
            )
            .from_abi(result__)
        })
    }
    pub fn VerticalAlignmentProperty() -> ::windows_core::Result<DependencyProperty> {
        Self::IFrameworkElementStatics(|this| unsafe {
            let mut result__ = ::std::mem::zeroed();
            (::windows_core::Interface::vtable(this).VerticalAlignmentProperty)(
                ::windows_core::Interface::as_raw(this),
                &mut result__,
            )
            .from_abi(result__)
        })
    }
    pub fn MarginProperty() -> ::windows_core::Result<DependencyProperty> {
        Self::IFrameworkElementStatics(|this| unsafe {
            let mut result__ = ::std::mem::zeroed();
            (::windows_core::Interface::vtable(this).MarginProperty)(
                ::windows_core::Interface::as_raw(this),
                &mut result__,
            )
            .from_abi(result__)
        })
    }
    pub fn NameProperty() -> ::windows_core::Result<DependencyProperty> {
        Self::IFrameworkElementStatics(|this| unsafe {
            let mut result__ = ::std::mem::zeroed();
            (::windows_core::Interface::vtable(this).NameProperty)(
                ::windows_core::Interface::as_raw(this),
                &mut result__,
            )
            .from_abi(result__)
        })
    }
    pub fn DataContextProperty() -> ::windows_core::Result<DependencyProperty> {
        Self::IFrameworkElementStatics(|this| unsafe {
            let mut result__ = ::std::mem::zeroed();
            (::windows_core::Interface::vtable(this).DataContextProperty)(
                ::windows_core::Interface::as_raw(this),
                &mut result__,
            )
            .from_abi(result__)
        })
    }
    pub fn AllowFocusOnInteractionProperty() -> ::windows_core::Result<DependencyProperty> {
        Self::IFrameworkElementStatics(|this| unsafe {
            let mut result__ = ::std::mem::zeroed();
            (::windows_core::Interface::vtable(this).AllowFocusOnInteractionProperty)(
                ::windows_core::Interface::as_raw(this),
                &mut result__,
            )
            .from_abi(result__)
        })
    }
    pub fn FocusVisualMarginProperty() -> ::windows_core::Result<DependencyProperty> {
        Self::IFrameworkElementStatics(|this| unsafe {
            let mut result__ = ::std::mem::zeroed();
            (::windows_core::Interface::vtable(this).FocusVisualMarginProperty)(
                ::windows_core::Interface::as_raw(this),
                &mut result__,
            )
            .from_abi(result__)
        })
    }
    pub fn FocusVisualSecondaryThicknessProperty() -> ::windows_core::Result<DependencyProperty> {
        Self::IFrameworkElementStatics(|this| unsafe {
            let mut result__ = ::std::mem::zeroed();
            (::windows_core::Interface::vtable(this).FocusVisualSecondaryThicknessProperty)(
                ::windows_core::Interface::as_raw(this),
                &mut result__,
            )
            .from_abi(result__)
        })
    }
    pub fn FocusVisualPrimaryThicknessProperty() -> ::windows_core::Result<DependencyProperty> {
        Self::IFrameworkElementStatics(|this| unsafe {
            let mut result__ = ::std::mem::zeroed();
            (::windows_core::Interface::vtable(this).FocusVisualPrimaryThicknessProperty)(
                ::windows_core::Interface::as_raw(this),
                &mut result__,
            )
            .from_abi(result__)
        })
    }
    pub fn FocusVisualSecondaryBrushProperty() -> ::windows_core::Result<DependencyProperty> {
        Self::IFrameworkElementStatics(|this| unsafe {
            let mut result__ = ::std::mem::zeroed();
            (::windows_core::Interface::vtable(this).FocusVisualSecondaryBrushProperty)(
                ::windows_core::Interface::as_raw(this),
                &mut result__,
            )
            .from_abi(result__)
        })
    }
    pub fn FocusVisualPrimaryBrushProperty() -> ::windows_core::Result<DependencyProperty> {
        Self::IFrameworkElementStatics(|this| unsafe {
            let mut result__ = ::std::mem::zeroed();
            (::windows_core::Interface::vtable(this).FocusVisualPrimaryBrushProperty)(
                ::windows_core::Interface::as_raw(this),
                &mut result__,
            )
            .from_abi(result__)
        })
    }
    pub fn AllowFocusWhenDisabledProperty() -> ::windows_core::Result<DependencyProperty> {
        Self::IFrameworkElementStatics(|this| unsafe {
            let mut result__ = ::std::mem::zeroed();
            (::windows_core::Interface::vtable(this).AllowFocusWhenDisabledProperty)(
                ::windows_core::Interface::as_raw(this),
                &mut result__,
            )
            .from_abi(result__)
        })
    }
    pub fn StyleProperty() -> ::windows_core::Result<DependencyProperty> {
        Self::IFrameworkElementStatics(|this| unsafe {
            let mut result__ = ::std::mem::zeroed();
            (::windows_core::Interface::vtable(this).StyleProperty)(
                ::windows_core::Interface::as_raw(this),
                &mut result__,
            )
            .from_abi(result__)
        })
    }
    pub fn FlowDirectionProperty() -> ::windows_core::Result<DependencyProperty> {
        Self::IFrameworkElementStatics(|this| unsafe {
            let mut result__ = ::std::mem::zeroed();
            (::windows_core::Interface::vtable(this).FlowDirectionProperty)(
                ::windows_core::Interface::as_raw(this),
                &mut result__,
            )
            .from_abi(result__)
        })
    }
    pub fn RequestedThemeProperty() -> ::windows_core::Result<DependencyProperty> {
        Self::IFrameworkElementStatics(|this| unsafe {
            let mut result__ = ::std::mem::zeroed();
            (::windows_core::Interface::vtable(this).RequestedThemeProperty)(
                ::windows_core::Interface::as_raw(this),
                &mut result__,
            )
            .from_abi(result__)
        })
    }
    pub fn ActualThemeProperty() -> ::windows_core::Result<DependencyProperty> {
        Self::IFrameworkElementStatics(|this| unsafe {
            let mut result__ = ::std::mem::zeroed();
            (::windows_core::Interface::vtable(this).ActualThemeProperty)(
                ::windows_core::Interface::as_raw(this),
                &mut result__,
            )
            .from_abi(result__)
        })
    }
    pub fn DeferTree<P0>(element: P0) -> ::windows_core::Result<()>
    where
        P0: ::windows_core::TryIntoParam<DependencyObject>,
    {
        Self::IFrameworkElementStatics(|this| unsafe {
            (::windows_core::Interface::vtable(this).DeferTree)(
                ::windows_core::Interface::as_raw(this),
                element.try_into_param()?.abi(),
            )
            .ok()
        })
    }
    #[doc = "Required features: `\"Windows_Foundation\"`"]
    #[cfg(feature = "Windows_Foundation")]
    pub fn DesiredSize(&self) -> ::windows_core::Result<::windows::Foundation::Size> {
        let this = &::windows_core::ComInterface::cast::<IUIElement>(self)?;
        unsafe {
            let mut result__ = ::std::mem::zeroed();
            (::windows_core::Interface::vtable(this).DesiredSize)(
                ::windows_core::Interface::as_raw(this),
                &mut result__,
            )
            .from_abi(result__)
        }
    }
    pub fn AllowDrop(&self) -> ::windows_core::Result<bool> {
        let this = &::windows_core::ComInterface::cast::<IUIElement>(self)?;
        unsafe {
            let mut result__ = ::std::mem::zeroed();
            (::windows_core::Interface::vtable(this).AllowDrop)(
                ::windows_core::Interface::as_raw(this),
                &mut result__,
            )
            .from_abi(result__)
        }
    }
    pub fn SetAllowDrop(&self, value: bool) -> ::windows_core::Result<()> {
        let this = &::windows_core::ComInterface::cast::<IUIElement>(self)?;
        unsafe {
            (::windows_core::Interface::vtable(this).SetAllowDrop)(
                ::windows_core::Interface::as_raw(this),
                value,
            )
            .ok()
        }
    }
    pub fn Opacity(&self) -> ::windows_core::Result<f64> {
        let this = &::windows_core::ComInterface::cast::<IUIElement>(self)?;
        unsafe {
            let mut result__ = ::std::mem::zeroed();
            (::windows_core::Interface::vtable(this).Opacity)(
                ::windows_core::Interface::as_raw(this),
                &mut result__,
            )
            .from_abi(result__)
        }
    }
    pub fn SetOpacity(&self, value: f64) -> ::windows_core::Result<()> {
        let this = &::windows_core::ComInterface::cast::<IUIElement>(self)?;
        unsafe {
            (::windows_core::Interface::vtable(this).SetOpacity)(
                ::windows_core::Interface::as_raw(this),
                value,
            )
            .ok()
        }
    }
    #[doc = "Required features: `\"Microsoft_UI_Xaml_Media\"`"]
    #[cfg(feature = "Microsoft_UI_Xaml_Media")]
    pub fn Clip(&self) -> ::windows_core::Result<Media::RectangleGeometry> {
        let this = &::windows_core::ComInterface::cast::<IUIElement>(self)?;
        unsafe {
            let mut result__ = ::std::mem::zeroed();
            (::windows_core::Interface::vtable(this).Clip)(
                ::windows_core::Interface::as_raw(this),
                &mut result__,
            )
            .from_abi(result__)
        }
    }
    #[doc = "Required features: `\"Microsoft_UI_Xaml_Media\"`"]
    #[cfg(feature = "Microsoft_UI_Xaml_Media")]
    pub fn SetClip<P0>(&self, value: P0) -> ::windows_core::Result<()>
    where
        P0: ::windows_core::IntoParam<Media::RectangleGeometry>,
    {
        let this = &::windows_core::ComInterface::cast::<IUIElement>(self)?;
        unsafe {
            (::windows_core::Interface::vtable(this).SetClip)(
                ::windows_core::Interface::as_raw(this),
                value.into_param().abi(),
            )
            .ok()
        }
    }
    #[doc = "Required features: `\"Microsoft_UI_Xaml_Media\"`"]
    #[cfg(feature = "Microsoft_UI_Xaml_Media")]
    pub fn RenderTransform(&self) -> ::windows_core::Result<Media::Transform> {
        let this = &::windows_core::ComInterface::cast::<IUIElement>(self)?;
        unsafe {
            let mut result__ = ::std::mem::zeroed();
            (::windows_core::Interface::vtable(this).RenderTransform)(
                ::windows_core::Interface::as_raw(this),
                &mut result__,
            )
            .from_abi(result__)
        }
    }
    #[doc = "Required features: `\"Microsoft_UI_Xaml_Media\"`"]
    #[cfg(feature = "Microsoft_UI_Xaml_Media")]
    pub fn SetRenderTransform<P0>(&self, value: P0) -> ::windows_core::Result<()>
    where
        P0: ::windows_core::TryIntoParam<Media::Transform>,
    {
        let this = &::windows_core::ComInterface::cast::<IUIElement>(self)?;
        unsafe {
            (::windows_core::Interface::vtable(this).SetRenderTransform)(
                ::windows_core::Interface::as_raw(this),
                value.try_into_param()?.abi(),
            )
            .ok()
        }
    }
    #[doc = "Required features: `\"Microsoft_UI_Xaml_Media\"`"]
    #[cfg(feature = "Microsoft_UI_Xaml_Media")]
    pub fn Projection(&self) -> ::windows_core::Result<Media::Projection> {
        let this = &::windows_core::ComInterface::cast::<IUIElement>(self)?;
        unsafe {
            let mut result__ = ::std::mem::zeroed();
            (::windows_core::Interface::vtable(this).Projection)(
                ::windows_core::Interface::as_raw(this),
                &mut result__,
            )
            .from_abi(result__)
        }
    }
    #[doc = "Required features: `\"Microsoft_UI_Xaml_Media\"`"]
    #[cfg(feature = "Microsoft_UI_Xaml_Media")]
    pub fn SetProjection<P0>(&self, value: P0) -> ::windows_core::Result<()>
    where
        P0: ::windows_core::TryIntoParam<Media::Projection>,
    {
        let this = &::windows_core::ComInterface::cast::<IUIElement>(self)?;
        unsafe {
            (::windows_core::Interface::vtable(this).SetProjection)(
                ::windows_core::Interface::as_raw(this),
                value.try_into_param()?.abi(),
            )
            .ok()
        }
    }
    #[doc = "Required features: `\"Microsoft_UI_Xaml_Media_Media3D\"`"]
    #[cfg(feature = "Microsoft_UI_Xaml_Media_Media3D")]
    pub fn Transform3D(&self) -> ::windows_core::Result<Media::Media3D::Transform3D> {
        let this = &::windows_core::ComInterface::cast::<IUIElement>(self)?;
        unsafe {
            let mut result__ = ::std::mem::zeroed();
            (::windows_core::Interface::vtable(this).Transform3D)(
                ::windows_core::Interface::as_raw(this),
                &mut result__,
            )
            .from_abi(result__)
        }
    }
    #[doc = "Required features: `\"Microsoft_UI_Xaml_Media_Media3D\"`"]
    #[cfg(feature = "Microsoft_UI_Xaml_Media_Media3D")]
    pub fn SetTransform3D<P0>(&self, value: P0) -> ::windows_core::Result<()>
    where
        P0: ::windows_core::TryIntoParam<Media::Media3D::Transform3D>,
    {
        let this = &::windows_core::ComInterface::cast::<IUIElement>(self)?;
        unsafe {
            (::windows_core::Interface::vtable(this).SetTransform3D)(
                ::windows_core::Interface::as_raw(this),
                value.try_into_param()?.abi(),
            )
            .ok()
        }
    }
    #[doc = "Required features: `\"Windows_Foundation\"`"]
    #[cfg(feature = "Windows_Foundation")]
    pub fn RenderTransformOrigin(&self) -> ::windows_core::Result<::windows::Foundation::Point> {
        let this = &::windows_core::ComInterface::cast::<IUIElement>(self)?;
        unsafe {
            let mut result__ = ::std::mem::zeroed();
            (::windows_core::Interface::vtable(this).RenderTransformOrigin)(
                ::windows_core::Interface::as_raw(this),
                &mut result__,
            )
            .from_abi(result__)
        }
    }
    #[doc = "Required features: `\"Windows_Foundation\"`"]
    #[cfg(feature = "Windows_Foundation")]
    pub fn SetRenderTransformOrigin(
        &self,
        value: ::windows::Foundation::Point,
    ) -> ::windows_core::Result<()> {
        let this = &::windows_core::ComInterface::cast::<IUIElement>(self)?;
        unsafe {
            (::windows_core::Interface::vtable(this).SetRenderTransformOrigin)(
                ::windows_core::Interface::as_raw(this),
                value,
            )
            .ok()
        }
    }
    pub fn IsHitTestVisible(&self) -> ::windows_core::Result<bool> {
        let this = &::windows_core::ComInterface::cast::<IUIElement>(self)?;
        unsafe {
            let mut result__ = ::std::mem::zeroed();
            (::windows_core::Interface::vtable(this).IsHitTestVisible)(
                ::windows_core::Interface::as_raw(this),
                &mut result__,
            )
            .from_abi(result__)
        }
    }
    pub fn SetIsHitTestVisible(&self, value: bool) -> ::windows_core::Result<()> {
        let this = &::windows_core::ComInterface::cast::<IUIElement>(self)?;
        unsafe {
            (::windows_core::Interface::vtable(this).SetIsHitTestVisible)(
                ::windows_core::Interface::as_raw(this),
                value,
            )
            .ok()
        }
    }
    pub fn Visibility(&self) -> ::windows_core::Result<Visibility> {
        let this = &::windows_core::ComInterface::cast::<IUIElement>(self)?;
        unsafe {
            let mut result__ = ::std::mem::zeroed();
            (::windows_core::Interface::vtable(this).Visibility)(
                ::windows_core::Interface::as_raw(this),
                &mut result__,
            )
            .from_abi(result__)
        }
    }
    pub fn SetVisibility(&self, value: Visibility) -> ::windows_core::Result<()> {
        let this = &::windows_core::ComInterface::cast::<IUIElement>(self)?;
        unsafe {
            (::windows_core::Interface::vtable(this).SetVisibility)(
                ::windows_core::Interface::as_raw(this),
                value,
            )
            .ok()
        }
    }
    #[doc = "Required features: `\"Windows_Foundation\"`"]
    #[cfg(feature = "Windows_Foundation")]
    pub fn RenderSize(&self) -> ::windows_core::Result<::windows::Foundation::Size> {
        let this = &::windows_core::ComInterface::cast::<IUIElement>(self)?;
        unsafe {
            let mut result__ = ::std::mem::zeroed();
            (::windows_core::Interface::vtable(this).RenderSize)(
                ::windows_core::Interface::as_raw(this),
                &mut result__,
            )
            .from_abi(result__)
        }
    }
    pub fn UseLayoutRounding(&self) -> ::windows_core::Result<bool> {
        let this = &::windows_core::ComInterface::cast::<IUIElement>(self)?;
        unsafe {
            let mut result__ = ::std::mem::zeroed();
            (::windows_core::Interface::vtable(this).UseLayoutRounding)(
                ::windows_core::Interface::as_raw(this),
                &mut result__,
            )
            .from_abi(result__)
        }
    }
    pub fn SetUseLayoutRounding(&self, value: bool) -> ::windows_core::Result<()> {
        let this = &::windows_core::ComInterface::cast::<IUIElement>(self)?;
        unsafe {
            (::windows_core::Interface::vtable(this).SetUseLayoutRounding)(
                ::windows_core::Interface::as_raw(this),
                value,
            )
            .ok()
        }
    }
    #[doc = "Required features: `\"Microsoft_UI_Xaml_Media_Animation\"`, `\"Windows_Foundation_Collections\"`"]
    #[cfg(all(
        feature = "Microsoft_UI_Xaml_Media_Animation",
        feature = "Windows_Foundation_Collections"
    ))]
    pub fn Transitions(&self) -> ::windows_core::Result<Media::Animation::TransitionCollection> {
        let this = &::windows_core::ComInterface::cast::<IUIElement>(self)?;
        unsafe {
            let mut result__ = ::std::mem::zeroed();
            (::windows_core::Interface::vtable(this).Transitions)(
                ::windows_core::Interface::as_raw(this),
                &mut result__,
            )
            .from_abi(result__)
        }
    }
    #[doc = "Required features: `\"Microsoft_UI_Xaml_Media_Animation\"`, `\"Windows_Foundation_Collections\"`"]
    #[cfg(all(
        feature = "Microsoft_UI_Xaml_Media_Animation",
        feature = "Windows_Foundation_Collections"
    ))]
    pub fn SetTransitions<P0>(&self, value: P0) -> ::windows_core::Result<()>
    where
        P0: ::windows_core::IntoParam<Media::Animation::TransitionCollection>,
    {
        let this = &::windows_core::ComInterface::cast::<IUIElement>(self)?;
        unsafe {
            (::windows_core::Interface::vtable(this).SetTransitions)(
                ::windows_core::Interface::as_raw(this),
                value.into_param().abi(),
            )
            .ok()
        }
    }
    #[doc = "Required features: `\"Microsoft_UI_Xaml_Media\"`"]
    #[cfg(feature = "Microsoft_UI_Xaml_Media")]
    pub fn CacheMode(&self) -> ::windows_core::Result<Media::CacheMode> {
        let this = &::windows_core::ComInterface::cast::<IUIElement>(self)?;
        unsafe {
            let mut result__ = ::std::mem::zeroed();
            (::windows_core::Interface::vtable(this).CacheMode)(
                ::windows_core::Interface::as_raw(this),
                &mut result__,
            )
            .from_abi(result__)
        }
    }
    #[doc = "Required features: `\"Microsoft_UI_Xaml_Media\"`"]
    #[cfg(feature = "Microsoft_UI_Xaml_Media")]
    pub fn SetCacheMode<P0>(&self, value: P0) -> ::windows_core::Result<()>
    where
        P0: ::windows_core::TryIntoParam<Media::CacheMode>,
    {
        let this = &::windows_core::ComInterface::cast::<IUIElement>(self)?;
        unsafe {
            (::windows_core::Interface::vtable(this).SetCacheMode)(
                ::windows_core::Interface::as_raw(this),
                value.try_into_param()?.abi(),
            )
            .ok()
        }
    }
    pub fn IsTapEnabled(&self) -> ::windows_core::Result<bool> {
        let this = &::windows_core::ComInterface::cast::<IUIElement>(self)?;
        unsafe {
            let mut result__ = ::std::mem::zeroed();
            (::windows_core::Interface::vtable(this).IsTapEnabled)(
                ::windows_core::Interface::as_raw(this),
                &mut result__,
            )
            .from_abi(result__)
        }
    }
    pub fn SetIsTapEnabled(&self, value: bool) -> ::windows_core::Result<()> {
        let this = &::windows_core::ComInterface::cast::<IUIElement>(self)?;
        unsafe {
            (::windows_core::Interface::vtable(this).SetIsTapEnabled)(
                ::windows_core::Interface::as_raw(this),
                value,
            )
            .ok()
        }
    }
    pub fn IsDoubleTapEnabled(&self) -> ::windows_core::Result<bool> {
        let this = &::windows_core::ComInterface::cast::<IUIElement>(self)?;
        unsafe {
            let mut result__ = ::std::mem::zeroed();
            (::windows_core::Interface::vtable(this).IsDoubleTapEnabled)(
                ::windows_core::Interface::as_raw(this),
                &mut result__,
            )
            .from_abi(result__)
        }
    }
    pub fn SetIsDoubleTapEnabled(&self, value: bool) -> ::windows_core::Result<()> {
        let this = &::windows_core::ComInterface::cast::<IUIElement>(self)?;
        unsafe {
            (::windows_core::Interface::vtable(this).SetIsDoubleTapEnabled)(
                ::windows_core::Interface::as_raw(this),
                value,
            )
            .ok()
        }
    }
    pub fn CanDrag(&self) -> ::windows_core::Result<bool> {
        let this = &::windows_core::ComInterface::cast::<IUIElement>(self)?;
        unsafe {
            let mut result__ = ::std::mem::zeroed();
            (::windows_core::Interface::vtable(this).CanDrag)(
                ::windows_core::Interface::as_raw(this),
                &mut result__,
            )
            .from_abi(result__)
        }
    }
    pub fn SetCanDrag(&self, value: bool) -> ::windows_core::Result<()> {
        let this = &::windows_core::ComInterface::cast::<IUIElement>(self)?;
        unsafe {
            (::windows_core::Interface::vtable(this).SetCanDrag)(
                ::windows_core::Interface::as_raw(this),
                value,
            )
            .ok()
        }
    }
    pub fn IsRightTapEnabled(&self) -> ::windows_core::Result<bool> {
        let this = &::windows_core::ComInterface::cast::<IUIElement>(self)?;
        unsafe {
            let mut result__ = ::std::mem::zeroed();
            (::windows_core::Interface::vtable(this).IsRightTapEnabled)(
                ::windows_core::Interface::as_raw(this),
                &mut result__,
            )
            .from_abi(result__)
        }
    }
    pub fn SetIsRightTapEnabled(&self, value: bool) -> ::windows_core::Result<()> {
        let this = &::windows_core::ComInterface::cast::<IUIElement>(self)?;
        unsafe {
            (::windows_core::Interface::vtable(this).SetIsRightTapEnabled)(
                ::windows_core::Interface::as_raw(this),
                value,
            )
            .ok()
        }
    }
    pub fn IsHoldingEnabled(&self) -> ::windows_core::Result<bool> {
        let this = &::windows_core::ComInterface::cast::<IUIElement>(self)?;
        unsafe {
            let mut result__ = ::std::mem::zeroed();
            (::windows_core::Interface::vtable(this).IsHoldingEnabled)(
                ::windows_core::Interface::as_raw(this),
                &mut result__,
            )
            .from_abi(result__)
        }
    }
    pub fn SetIsHoldingEnabled(&self, value: bool) -> ::windows_core::Result<()> {
        let this = &::windows_core::ComInterface::cast::<IUIElement>(self)?;
        unsafe {
            (::windows_core::Interface::vtable(this).SetIsHoldingEnabled)(
                ::windows_core::Interface::as_raw(this),
                value,
            )
            .ok()
        }
    }
    #[doc = "Required features: `\"Microsoft_UI_Xaml_Input\"`"]
    #[cfg(feature = "Microsoft_UI_Xaml_Input")]
    pub fn ManipulationMode(&self) -> ::windows_core::Result<Input::ManipulationModes> {
        let this = &::windows_core::ComInterface::cast::<IUIElement>(self)?;
        unsafe {
            let mut result__ = ::std::mem::zeroed();
            (::windows_core::Interface::vtable(this).ManipulationMode)(
                ::windows_core::Interface::as_raw(this),
                &mut result__,
            )
            .from_abi(result__)
        }
    }
    #[doc = "Required features: `\"Microsoft_UI_Xaml_Input\"`"]
    #[cfg(feature = "Microsoft_UI_Xaml_Input")]
    pub fn SetManipulationMode(
        &self,
        value: Input::ManipulationModes,
    ) -> ::windows_core::Result<()> {
        let this = &::windows_core::ComInterface::cast::<IUIElement>(self)?;
        unsafe {
            (::windows_core::Interface::vtable(this).SetManipulationMode)(
                ::windows_core::Interface::as_raw(this),
                value,
            )
            .ok()
        }
    }
    #[doc = "Required features: `\"Microsoft_UI_Xaml_Input\"`, `\"Windows_Foundation_Collections\"`"]
    #[cfg(all(
        feature = "Microsoft_UI_Xaml_Input",
        feature = "Windows_Foundation_Collections"
    ))]
    pub fn PointerCaptures(
        &self,
    ) -> ::windows_core::Result<::windows::Foundation::Collections::IVectorView<Input::Pointer>>
    {
        let this = &::windows_core::ComInterface::cast::<IUIElement>(self)?;
        unsafe {
            let mut result__ = ::std::mem::zeroed();
            (::windows_core::Interface::vtable(this).PointerCaptures)(
                ::windows_core::Interface::as_raw(this),
                &mut result__,
            )
            .from_abi(result__)
        }
    }
    #[doc = "Required features: `\"Microsoft_UI_Xaml_Controls_Primitives\"`"]
    #[cfg(feature = "Microsoft_UI_Xaml_Controls_Primitives")]
    pub fn ContextFlyout(&self) -> ::windows_core::Result<Controls::Primitives::FlyoutBase> {
        let this = &::windows_core::ComInterface::cast::<IUIElement>(self)?;
        unsafe {
            let mut result__ = ::std::mem::zeroed();
            (::windows_core::Interface::vtable(this).ContextFlyout)(
                ::windows_core::Interface::as_raw(this),
                &mut result__,
            )
            .from_abi(result__)
        }
    }
    #[doc = "Required features: `\"Microsoft_UI_Xaml_Controls_Primitives\"`"]
    #[cfg(feature = "Microsoft_UI_Xaml_Controls_Primitives")]
    pub fn SetContextFlyout<P0>(&self, value: P0) -> ::windows_core::Result<()>
    where
        P0: ::windows_core::TryIntoParam<Controls::Primitives::FlyoutBase>,
    {
        let this = &::windows_core::ComInterface::cast::<IUIElement>(self)?;
        unsafe {
            (::windows_core::Interface::vtable(this).SetContextFlyout)(
                ::windows_core::Interface::as_raw(this),
                value.try_into_param()?.abi(),
            )
            .ok()
        }
    }
    #[doc = "Required features: `\"Microsoft_UI_Xaml_Media\"`"]
    #[cfg(feature = "Microsoft_UI_Xaml_Media")]
    pub fn CompositeMode(&self) -> ::windows_core::Result<Media::ElementCompositeMode> {
        let this = &::windows_core::ComInterface::cast::<IUIElement>(self)?;
        unsafe {
            let mut result__ = ::std::mem::zeroed();
            (::windows_core::Interface::vtable(this).CompositeMode)(
                ::windows_core::Interface::as_raw(this),
                &mut result__,
            )
            .from_abi(result__)
        }
    }
    #[doc = "Required features: `\"Microsoft_UI_Xaml_Media\"`"]
    #[cfg(feature = "Microsoft_UI_Xaml_Media")]
    pub fn SetCompositeMode(
        &self,
        value: Media::ElementCompositeMode,
    ) -> ::windows_core::Result<()> {
        let this = &::windows_core::ComInterface::cast::<IUIElement>(self)?;
        unsafe {
            (::windows_core::Interface::vtable(this).SetCompositeMode)(
                ::windows_core::Interface::as_raw(this),
                value,
            )
            .ok()
        }
    }
    #[doc = "Required features: `\"Microsoft_UI_Xaml_Media\"`, `\"Windows_Foundation_Collections\"`"]
    #[cfg(all(
        feature = "Microsoft_UI_Xaml_Media",
        feature = "Windows_Foundation_Collections"
    ))]
    pub fn Lights(
        &self,
    ) -> ::windows_core::Result<::windows::Foundation::Collections::IVector<Media::XamlLight>> {
        let this = &::windows_core::ComInterface::cast::<IUIElement>(self)?;
        unsafe {
            let mut result__ = ::std::mem::zeroed();
            (::windows_core::Interface::vtable(this).Lights)(
                ::windows_core::Interface::as_raw(this),
                &mut result__,
            )
            .from_abi(result__)
        }
    }
    pub fn CanBeScrollAnchor(&self) -> ::windows_core::Result<bool> {
        let this = &::windows_core::ComInterface::cast::<IUIElement>(self)?;
        unsafe {
            let mut result__ = ::std::mem::zeroed();
            (::windows_core::Interface::vtable(this).CanBeScrollAnchor)(
                ::windows_core::Interface::as_raw(this),
                &mut result__,
            )
            .from_abi(result__)
        }
    }
    pub fn SetCanBeScrollAnchor(&self, value: bool) -> ::windows_core::Result<()> {
        let this = &::windows_core::ComInterface::cast::<IUIElement>(self)?;
        unsafe {
            (::windows_core::Interface::vtable(this).SetCanBeScrollAnchor)(
                ::windows_core::Interface::as_raw(this),
                value,
            )
            .ok()
        }
    }
    pub fn ExitDisplayModeOnAccessKeyInvoked(&self) -> ::windows_core::Result<bool> {
        let this = &::windows_core::ComInterface::cast::<IUIElement>(self)?;
        unsafe {
            let mut result__ = ::std::mem::zeroed();
            (::windows_core::Interface::vtable(this).ExitDisplayModeOnAccessKeyInvoked)(
                ::windows_core::Interface::as_raw(this),
                &mut result__,
            )
            .from_abi(result__)
        }
    }
    pub fn SetExitDisplayModeOnAccessKeyInvoked(&self, value: bool) -> ::windows_core::Result<()> {
        let this = &::windows_core::ComInterface::cast::<IUIElement>(self)?;
        unsafe {
            (::windows_core::Interface::vtable(this).SetExitDisplayModeOnAccessKeyInvoked)(
                ::windows_core::Interface::as_raw(this),
                value,
            )
            .ok()
        }
    }
    pub fn IsAccessKeyScope(&self) -> ::windows_core::Result<bool> {
        let this = &::windows_core::ComInterface::cast::<IUIElement>(self)?;
        unsafe {
            let mut result__ = ::std::mem::zeroed();
            (::windows_core::Interface::vtable(this).IsAccessKeyScope)(
                ::windows_core::Interface::as_raw(this),
                &mut result__,
            )
            .from_abi(result__)
        }
    }
    pub fn SetIsAccessKeyScope(&self, value: bool) -> ::windows_core::Result<()> {
        let this = &::windows_core::ComInterface::cast::<IUIElement>(self)?;
        unsafe {
            (::windows_core::Interface::vtable(this).SetIsAccessKeyScope)(
                ::windows_core::Interface::as_raw(this),
                value,
            )
            .ok()
        }
    }
    pub fn AccessKeyScopeOwner(&self) -> ::windows_core::Result<DependencyObject> {
        let this = &::windows_core::ComInterface::cast::<IUIElement>(self)?;
        unsafe {
            let mut result__ = ::std::mem::zeroed();
            (::windows_core::Interface::vtable(this).AccessKeyScopeOwner)(
                ::windows_core::Interface::as_raw(this),
                &mut result__,
            )
            .from_abi(result__)
        }
    }
    pub fn SetAccessKeyScopeOwner<P0>(&self, value: P0) -> ::windows_core::Result<()>
    where
        P0: ::windows_core::TryIntoParam<DependencyObject>,
    {
        let this = &::windows_core::ComInterface::cast::<IUIElement>(self)?;
        unsafe {
            (::windows_core::Interface::vtable(this).SetAccessKeyScopeOwner)(
                ::windows_core::Interface::as_raw(this),
                value.try_into_param()?.abi(),
            )
            .ok()
        }
    }
    pub fn AccessKey(&self) -> ::windows_core::Result<::windows_core::HSTRING> {
        let this = &::windows_core::ComInterface::cast::<IUIElement>(self)?;
        unsafe {
            let mut result__ = ::std::mem::zeroed();
            (::windows_core::Interface::vtable(this).AccessKey)(
                ::windows_core::Interface::as_raw(this),
                &mut result__,
            )
            .from_abi(result__)
        }
    }
    pub fn SetAccessKey(&self, value: &::windows_core::HSTRING) -> ::windows_core::Result<()> {
        let this = &::windows_core::ComInterface::cast::<IUIElement>(self)?;
        unsafe {
            (::windows_core::Interface::vtable(this).SetAccessKey)(
                ::windows_core::Interface::as_raw(this),
                ::core::mem::transmute_copy(value),
            )
            .ok()
        }
    }
    #[doc = "Required features: `\"Microsoft_UI_Xaml_Input\"`"]
    #[cfg(feature = "Microsoft_UI_Xaml_Input")]
    pub fn KeyTipPlacementMode(&self) -> ::windows_core::Result<Input::KeyTipPlacementMode> {
        let this = &::windows_core::ComInterface::cast::<IUIElement>(self)?;
        unsafe {
            let mut result__ = ::std::mem::zeroed();
            (::windows_core::Interface::vtable(this).KeyTipPlacementMode)(
                ::windows_core::Interface::as_raw(this),
                &mut result__,
            )
            .from_abi(result__)
        }
    }
    #[doc = "Required features: `\"Microsoft_UI_Xaml_Input\"`"]
    #[cfg(feature = "Microsoft_UI_Xaml_Input")]
    pub fn SetKeyTipPlacementMode(
        &self,
        value: Input::KeyTipPlacementMode,
    ) -> ::windows_core::Result<()> {
        let this = &::windows_core::ComInterface::cast::<IUIElement>(self)?;
        unsafe {
            (::windows_core::Interface::vtable(this).SetKeyTipPlacementMode)(
                ::windows_core::Interface::as_raw(this),
                value,
            )
            .ok()
        }
    }
    pub fn KeyTipHorizontalOffset(&self) -> ::windows_core::Result<f64> {
        let this = &::windows_core::ComInterface::cast::<IUIElement>(self)?;
        unsafe {
            let mut result__ = ::std::mem::zeroed();
            (::windows_core::Interface::vtable(this).KeyTipHorizontalOffset)(
                ::windows_core::Interface::as_raw(this),
                &mut result__,
            )
            .from_abi(result__)
        }
    }
    pub fn SetKeyTipHorizontalOffset(&self, value: f64) -> ::windows_core::Result<()> {
        let this = &::windows_core::ComInterface::cast::<IUIElement>(self)?;
        unsafe {
            (::windows_core::Interface::vtable(this).SetKeyTipHorizontalOffset)(
                ::windows_core::Interface::as_raw(this),
                value,
            )
            .ok()
        }
    }
    pub fn KeyTipVerticalOffset(&self) -> ::windows_core::Result<f64> {
        let this = &::windows_core::ComInterface::cast::<IUIElement>(self)?;
        unsafe {
            let mut result__ = ::std::mem::zeroed();
            (::windows_core::Interface::vtable(this).KeyTipVerticalOffset)(
                ::windows_core::Interface::as_raw(this),
                &mut result__,
            )
            .from_abi(result__)
        }
    }
    pub fn SetKeyTipVerticalOffset(&self, value: f64) -> ::windows_core::Result<()> {
        let this = &::windows_core::ComInterface::cast::<IUIElement>(self)?;
        unsafe {
            (::windows_core::Interface::vtable(this).SetKeyTipVerticalOffset)(
                ::windows_core::Interface::as_raw(this),
                value,
            )
            .ok()
        }
    }
    pub fn KeyTipTarget(&self) -> ::windows_core::Result<DependencyObject> {
        let this = &::windows_core::ComInterface::cast::<IUIElement>(self)?;
        unsafe {
            let mut result__ = ::std::mem::zeroed();
            (::windows_core::Interface::vtable(this).KeyTipTarget)(
                ::windows_core::Interface::as_raw(this),
                &mut result__,
            )
            .from_abi(result__)
        }
    }
    pub fn SetKeyTipTarget<P0>(&self, value: P0) -> ::windows_core::Result<()>
    where
        P0: ::windows_core::TryIntoParam<DependencyObject>,
    {
        let this = &::windows_core::ComInterface::cast::<IUIElement>(self)?;
        unsafe {
            (::windows_core::Interface::vtable(this).SetKeyTipTarget)(
                ::windows_core::Interface::as_raw(this),
                value.try_into_param()?.abi(),
            )
            .ok()
        }
    }
    #[doc = "Required features: `\"Microsoft_UI_Xaml_Input\"`"]
    #[cfg(feature = "Microsoft_UI_Xaml_Input")]
    pub fn XYFocusKeyboardNavigation(
        &self,
    ) -> ::windows_core::Result<Input::XYFocusKeyboardNavigationMode> {
        let this = &::windows_core::ComInterface::cast::<IUIElement>(self)?;
        unsafe {
            let mut result__ = ::std::mem::zeroed();
            (::windows_core::Interface::vtable(this).XYFocusKeyboardNavigation)(
                ::windows_core::Interface::as_raw(this),
                &mut result__,
            )
            .from_abi(result__)
        }
    }
    #[doc = "Required features: `\"Microsoft_UI_Xaml_Input\"`"]
    #[cfg(feature = "Microsoft_UI_Xaml_Input")]
    pub fn SetXYFocusKeyboardNavigation(
        &self,
        value: Input::XYFocusKeyboardNavigationMode,
    ) -> ::windows_core::Result<()> {
        let this = &::windows_core::ComInterface::cast::<IUIElement>(self)?;
        unsafe {
            (::windows_core::Interface::vtable(this).SetXYFocusKeyboardNavigation)(
                ::windows_core::Interface::as_raw(this),
                value,
            )
            .ok()
        }
    }
    #[doc = "Required features: `\"Microsoft_UI_Xaml_Input\"`"]
    #[cfg(feature = "Microsoft_UI_Xaml_Input")]
    pub fn XYFocusUpNavigationStrategy(
        &self,
    ) -> ::windows_core::Result<Input::XYFocusNavigationStrategy> {
        let this = &::windows_core::ComInterface::cast::<IUIElement>(self)?;
        unsafe {
            let mut result__ = ::std::mem::zeroed();
            (::windows_core::Interface::vtable(this).XYFocusUpNavigationStrategy)(
                ::windows_core::Interface::as_raw(this),
                &mut result__,
            )
            .from_abi(result__)
        }
    }
    #[doc = "Required features: `\"Microsoft_UI_Xaml_Input\"`"]
    #[cfg(feature = "Microsoft_UI_Xaml_Input")]
    pub fn SetXYFocusUpNavigationStrategy(
        &self,
        value: Input::XYFocusNavigationStrategy,
    ) -> ::windows_core::Result<()> {
        let this = &::windows_core::ComInterface::cast::<IUIElement>(self)?;
        unsafe {
            (::windows_core::Interface::vtable(this).SetXYFocusUpNavigationStrategy)(
                ::windows_core::Interface::as_raw(this),
                value,
            )
            .ok()
        }
    }
    #[doc = "Required features: `\"Microsoft_UI_Xaml_Input\"`"]
    #[cfg(feature = "Microsoft_UI_Xaml_Input")]
    pub fn XYFocusDownNavigationStrategy(
        &self,
    ) -> ::windows_core::Result<Input::XYFocusNavigationStrategy> {
        let this = &::windows_core::ComInterface::cast::<IUIElement>(self)?;
        unsafe {
            let mut result__ = ::std::mem::zeroed();
            (::windows_core::Interface::vtable(this).XYFocusDownNavigationStrategy)(
                ::windows_core::Interface::as_raw(this),
                &mut result__,
            )
            .from_abi(result__)
        }
    }
    #[doc = "Required features: `\"Microsoft_UI_Xaml_Input\"`"]
    #[cfg(feature = "Microsoft_UI_Xaml_Input")]
    pub fn SetXYFocusDownNavigationStrategy(
        &self,
        value: Input::XYFocusNavigationStrategy,
    ) -> ::windows_core::Result<()> {
        let this = &::windows_core::ComInterface::cast::<IUIElement>(self)?;
        unsafe {
            (::windows_core::Interface::vtable(this).SetXYFocusDownNavigationStrategy)(
                ::windows_core::Interface::as_raw(this),
                value,
            )
            .ok()
        }
    }
    #[doc = "Required features: `\"Microsoft_UI_Xaml_Input\"`"]
    #[cfg(feature = "Microsoft_UI_Xaml_Input")]
    pub fn XYFocusLeftNavigationStrategy(
        &self,
    ) -> ::windows_core::Result<Input::XYFocusNavigationStrategy> {
        let this = &::windows_core::ComInterface::cast::<IUIElement>(self)?;
        unsafe {
            let mut result__ = ::std::mem::zeroed();
            (::windows_core::Interface::vtable(this).XYFocusLeftNavigationStrategy)(
                ::windows_core::Interface::as_raw(this),
                &mut result__,
            )
            .from_abi(result__)
        }
    }
    #[doc = "Required features: `\"Microsoft_UI_Xaml_Input\"`"]
    #[cfg(feature = "Microsoft_UI_Xaml_Input")]
    pub fn SetXYFocusLeftNavigationStrategy(
        &self,
        value: Input::XYFocusNavigationStrategy,
    ) -> ::windows_core::Result<()> {
        let this = &::windows_core::ComInterface::cast::<IUIElement>(self)?;
        unsafe {
            (::windows_core::Interface::vtable(this).SetXYFocusLeftNavigationStrategy)(
                ::windows_core::Interface::as_raw(this),
                value,
            )
            .ok()
        }
    }
    #[doc = "Required features: `\"Microsoft_UI_Xaml_Input\"`"]
    #[cfg(feature = "Microsoft_UI_Xaml_Input")]
    pub fn XYFocusRightNavigationStrategy(
        &self,
    ) -> ::windows_core::Result<Input::XYFocusNavigationStrategy> {
        let this = &::windows_core::ComInterface::cast::<IUIElement>(self)?;
        unsafe {
            let mut result__ = ::std::mem::zeroed();
            (::windows_core::Interface::vtable(this).XYFocusRightNavigationStrategy)(
                ::windows_core::Interface::as_raw(this),
                &mut result__,
            )
            .from_abi(result__)
        }
    }
    #[doc = "Required features: `\"Microsoft_UI_Xaml_Input\"`"]
    #[cfg(feature = "Microsoft_UI_Xaml_Input")]
    pub fn SetXYFocusRightNavigationStrategy(
        &self,
        value: Input::XYFocusNavigationStrategy,
    ) -> ::windows_core::Result<()> {
        let this = &::windows_core::ComInterface::cast::<IUIElement>(self)?;
        unsafe {
            (::windows_core::Interface::vtable(this).SetXYFocusRightNavigationStrategy)(
                ::windows_core::Interface::as_raw(this),
                value,
            )
            .ok()
        }
    }
    #[doc = "Required features: `\"Microsoft_UI_Xaml_Input\"`, `\"Windows_Foundation_Collections\"`"]
    #[cfg(all(
        feature = "Microsoft_UI_Xaml_Input",
        feature = "Windows_Foundation_Collections"
    ))]
    pub fn KeyboardAccelerators(
        &self,
    ) -> ::windows_core::Result<
        ::windows::Foundation::Collections::IVector<Input::KeyboardAccelerator>,
    > {
        let this = &::windows_core::ComInterface::cast::<IUIElement>(self)?;
        unsafe {
            let mut result__ = ::std::mem::zeroed();
            (::windows_core::Interface::vtable(this).KeyboardAccelerators)(
                ::windows_core::Interface::as_raw(this),
                &mut result__,
            )
            .from_abi(result__)
        }
    }
    pub fn KeyboardAcceleratorPlacementTarget(&self) -> ::windows_core::Result<DependencyObject> {
        let this = &::windows_core::ComInterface::cast::<IUIElement>(self)?;
        unsafe {
            let mut result__ = ::std::mem::zeroed();
            (::windows_core::Interface::vtable(this).KeyboardAcceleratorPlacementTarget)(
                ::windows_core::Interface::as_raw(this),
                &mut result__,
            )
            .from_abi(result__)
        }
    }
    pub fn SetKeyboardAcceleratorPlacementTarget<P0>(&self, value: P0) -> ::windows_core::Result<()>
    where
        P0: ::windows_core::TryIntoParam<DependencyObject>,
    {
        let this = &::windows_core::ComInterface::cast::<IUIElement>(self)?;
        unsafe {
            (::windows_core::Interface::vtable(this).SetKeyboardAcceleratorPlacementTarget)(
                ::windows_core::Interface::as_raw(this),
                value.try_into_param()?.abi(),
            )
            .ok()
        }
    }
    #[doc = "Required features: `\"Microsoft_UI_Xaml_Input\"`"]
    #[cfg(feature = "Microsoft_UI_Xaml_Input")]
    pub fn KeyboardAcceleratorPlacementMode(
        &self,
    ) -> ::windows_core::Result<Input::KeyboardAcceleratorPlacementMode> {
        let this = &::windows_core::ComInterface::cast::<IUIElement>(self)?;
        unsafe {
            let mut result__ = ::std::mem::zeroed();
            (::windows_core::Interface::vtable(this).KeyboardAcceleratorPlacementMode)(
                ::windows_core::Interface::as_raw(this),
                &mut result__,
            )
            .from_abi(result__)
        }
    }
    #[doc = "Required features: `\"Microsoft_UI_Xaml_Input\"`"]
    #[cfg(feature = "Microsoft_UI_Xaml_Input")]
    pub fn SetKeyboardAcceleratorPlacementMode(
        &self,
        value: Input::KeyboardAcceleratorPlacementMode,
    ) -> ::windows_core::Result<()> {
        let this = &::windows_core::ComInterface::cast::<IUIElement>(self)?;
        unsafe {
            (::windows_core::Interface::vtable(this).SetKeyboardAcceleratorPlacementMode)(
                ::windows_core::Interface::as_raw(this),
                value,
            )
            .ok()
        }
    }
    pub fn HighContrastAdjustment(&self) -> ::windows_core::Result<ElementHighContrastAdjustment> {
        let this = &::windows_core::ComInterface::cast::<IUIElement>(self)?;
        unsafe {
            let mut result__ = ::std::mem::zeroed();
            (::windows_core::Interface::vtable(this).HighContrastAdjustment)(
                ::windows_core::Interface::as_raw(this),
                &mut result__,
            )
            .from_abi(result__)
        }
    }
    pub fn SetHighContrastAdjustment(
        &self,
        value: ElementHighContrastAdjustment,
    ) -> ::windows_core::Result<()> {
        let this = &::windows_core::ComInterface::cast::<IUIElement>(self)?;
        unsafe {
            (::windows_core::Interface::vtable(this).SetHighContrastAdjustment)(
                ::windows_core::Interface::as_raw(this),
                value,
            )
            .ok()
        }
    }
    #[doc = "Required features: `\"Microsoft_UI_Xaml_Input\"`"]
    #[cfg(feature = "Microsoft_UI_Xaml_Input")]
    pub fn TabFocusNavigation(&self) -> ::windows_core::Result<Input::KeyboardNavigationMode> {
        let this = &::windows_core::ComInterface::cast::<IUIElement>(self)?;
        unsafe {
            let mut result__ = ::std::mem::zeroed();
            (::windows_core::Interface::vtable(this).TabFocusNavigation)(
                ::windows_core::Interface::as_raw(this),
                &mut result__,
            )
            .from_abi(result__)
        }
    }
    #[doc = "Required features: `\"Microsoft_UI_Xaml_Input\"`"]
    #[cfg(feature = "Microsoft_UI_Xaml_Input")]
    pub fn SetTabFocusNavigation(
        &self,
        value: Input::KeyboardNavigationMode,
    ) -> ::windows_core::Result<()> {
        let this = &::windows_core::ComInterface::cast::<IUIElement>(self)?;
        unsafe {
            (::windows_core::Interface::vtable(this).SetTabFocusNavigation)(
                ::windows_core::Interface::as_raw(this),
                value,
            )
            .ok()
        }
    }
    pub fn OpacityTransition(&self) -> ::windows_core::Result<ScalarTransition> {
        let this = &::windows_core::ComInterface::cast::<IUIElement>(self)?;
        unsafe {
            let mut result__ = ::std::mem::zeroed();
            (::windows_core::Interface::vtable(this).OpacityTransition)(
                ::windows_core::Interface::as_raw(this),
                &mut result__,
            )
            .from_abi(result__)
        }
    }
    pub fn SetOpacityTransition<P0>(&self, value: P0) -> ::windows_core::Result<()>
    where
        P0: ::windows_core::TryIntoParam<ScalarTransition>,
    {
        let this = &::windows_core::ComInterface::cast::<IUIElement>(self)?;
        unsafe {
            (::windows_core::Interface::vtable(this).SetOpacityTransition)(
                ::windows_core::Interface::as_raw(this),
                value.try_into_param()?.abi(),
            )
            .ok()
        }
    }
    #[doc = "Required features: `\"Windows_Foundation_Numerics\"`"]
    #[cfg(feature = "Windows_Foundation_Numerics")]
    pub fn Translation(&self) -> ::windows_core::Result<::windows::Foundation::Numerics::Vector3> {
        let this = &::windows_core::ComInterface::cast::<IUIElement>(self)?;
        unsafe {
            let mut result__ = ::std::mem::zeroed();
            (::windows_core::Interface::vtable(this).Translation)(
                ::windows_core::Interface::as_raw(this),
                &mut result__,
            )
            .from_abi(result__)
        }
    }
    #[doc = "Required features: `\"Windows_Foundation_Numerics\"`"]
    #[cfg(feature = "Windows_Foundation_Numerics")]
    pub fn SetTranslation(
        &self,
        value: ::windows::Foundation::Numerics::Vector3,
    ) -> ::windows_core::Result<()> {
        let this = &::windows_core::ComInterface::cast::<IUIElement>(self)?;
        unsafe {
            (::windows_core::Interface::vtable(this).SetTranslation)(
                ::windows_core::Interface::as_raw(this),
                value,
            )
            .ok()
        }
    }
    pub fn TranslationTransition(&self) -> ::windows_core::Result<Vector3Transition> {
        let this = &::windows_core::ComInterface::cast::<IUIElement>(self)?;
        unsafe {
            let mut result__ = ::std::mem::zeroed();
            (::windows_core::Interface::vtable(this).TranslationTransition)(
                ::windows_core::Interface::as_raw(this),
                &mut result__,
            )
            .from_abi(result__)
        }
    }
    pub fn SetTranslationTransition<P0>(&self, value: P0) -> ::windows_core::Result<()>
    where
        P0: ::windows_core::TryIntoParam<Vector3Transition>,
    {
        let this = &::windows_core::ComInterface::cast::<IUIElement>(self)?;
        unsafe {
            (::windows_core::Interface::vtable(this).SetTranslationTransition)(
                ::windows_core::Interface::as_raw(this),
                value.try_into_param()?.abi(),
            )
            .ok()
        }
    }
    pub fn Rotation(&self) -> ::windows_core::Result<f32> {
        let this = &::windows_core::ComInterface::cast::<IUIElement>(self)?;
        unsafe {
            let mut result__ = ::std::mem::zeroed();
            (::windows_core::Interface::vtable(this).Rotation)(
                ::windows_core::Interface::as_raw(this),
                &mut result__,
            )
            .from_abi(result__)
        }
    }
    pub fn SetRotation(&self, value: f32) -> ::windows_core::Result<()> {
        let this = &::windows_core::ComInterface::cast::<IUIElement>(self)?;
        unsafe {
            (::windows_core::Interface::vtable(this).SetRotation)(
                ::windows_core::Interface::as_raw(this),
                value,
            )
            .ok()
        }
    }
    pub fn RotationTransition(&self) -> ::windows_core::Result<ScalarTransition> {
        let this = &::windows_core::ComInterface::cast::<IUIElement>(self)?;
        unsafe {
            let mut result__ = ::std::mem::zeroed();
            (::windows_core::Interface::vtable(this).RotationTransition)(
                ::windows_core::Interface::as_raw(this),
                &mut result__,
            )
            .from_abi(result__)
        }
    }
    pub fn SetRotationTransition<P0>(&self, value: P0) -> ::windows_core::Result<()>
    where
        P0: ::windows_core::TryIntoParam<ScalarTransition>,
    {
        let this = &::windows_core::ComInterface::cast::<IUIElement>(self)?;
        unsafe {
            (::windows_core::Interface::vtable(this).SetRotationTransition)(
                ::windows_core::Interface::as_raw(this),
                value.try_into_param()?.abi(),
            )
            .ok()
        }
    }
    #[doc = "Required features: `\"Windows_Foundation_Numerics\"`"]
    #[cfg(feature = "Windows_Foundation_Numerics")]
    pub fn Scale(&self) -> ::windows_core::Result<::windows::Foundation::Numerics::Vector3> {
        let this = &::windows_core::ComInterface::cast::<IUIElement>(self)?;
        unsafe {
            let mut result__ = ::std::mem::zeroed();
            (::windows_core::Interface::vtable(this).Scale)(
                ::windows_core::Interface::as_raw(this),
                &mut result__,
            )
            .from_abi(result__)
        }
    }
    #[doc = "Required features: `\"Windows_Foundation_Numerics\"`"]
    #[cfg(feature = "Windows_Foundation_Numerics")]
    pub fn SetScale(
        &self,
        value: ::windows::Foundation::Numerics::Vector3,
    ) -> ::windows_core::Result<()> {
        let this = &::windows_core::ComInterface::cast::<IUIElement>(self)?;
        unsafe {
            (::windows_core::Interface::vtable(this).SetScale)(
                ::windows_core::Interface::as_raw(this),
                value,
            )
            .ok()
        }
    }
    pub fn ScaleTransition(&self) -> ::windows_core::Result<Vector3Transition> {
        let this = &::windows_core::ComInterface::cast::<IUIElement>(self)?;
        unsafe {
            let mut result__ = ::std::mem::zeroed();
            (::windows_core::Interface::vtable(this).ScaleTransition)(
                ::windows_core::Interface::as_raw(this),
                &mut result__,
            )
            .from_abi(result__)
        }
    }
    pub fn SetScaleTransition<P0>(&self, value: P0) -> ::windows_core::Result<()>
    where
        P0: ::windows_core::TryIntoParam<Vector3Transition>,
    {
        let this = &::windows_core::ComInterface::cast::<IUIElement>(self)?;
        unsafe {
            (::windows_core::Interface::vtable(this).SetScaleTransition)(
                ::windows_core::Interface::as_raw(this),
                value.try_into_param()?.abi(),
            )
            .ok()
        }
    }
    #[doc = "Required features: `\"Windows_Foundation_Numerics\"`"]
    #[cfg(feature = "Windows_Foundation_Numerics")]
    pub fn TransformMatrix(
        &self,
    ) -> ::windows_core::Result<::windows::Foundation::Numerics::Matrix4x4> {
        let this = &::windows_core::ComInterface::cast::<IUIElement>(self)?;
        unsafe {
            let mut result__ = ::std::mem::zeroed();
            (::windows_core::Interface::vtable(this).TransformMatrix)(
                ::windows_core::Interface::as_raw(this),
                &mut result__,
            )
            .from_abi(result__)
        }
    }
    #[doc = "Required features: `\"Windows_Foundation_Numerics\"`"]
    #[cfg(feature = "Windows_Foundation_Numerics")]
    pub fn SetTransformMatrix(
        &self,
        value: ::windows::Foundation::Numerics::Matrix4x4,
    ) -> ::windows_core::Result<()> {
        let this = &::windows_core::ComInterface::cast::<IUIElement>(self)?;
        unsafe {
            (::windows_core::Interface::vtable(this).SetTransformMatrix)(
                ::windows_core::Interface::as_raw(this),
                value,
            )
            .ok()
        }
    }
    #[doc = "Required features: `\"Windows_Foundation_Numerics\"`"]
    #[cfg(feature = "Windows_Foundation_Numerics")]
    pub fn CenterPoint(&self) -> ::windows_core::Result<::windows::Foundation::Numerics::Vector3> {
        let this = &::windows_core::ComInterface::cast::<IUIElement>(self)?;
        unsafe {
            let mut result__ = ::std::mem::zeroed();
            (::windows_core::Interface::vtable(this).CenterPoint)(
                ::windows_core::Interface::as_raw(this),
                &mut result__,
            )
            .from_abi(result__)
        }
    }
    #[doc = "Required features: `\"Windows_Foundation_Numerics\"`"]
    #[cfg(feature = "Windows_Foundation_Numerics")]
    pub fn SetCenterPoint(
        &self,
        value: ::windows::Foundation::Numerics::Vector3,
    ) -> ::windows_core::Result<()> {
        let this = &::windows_core::ComInterface::cast::<IUIElement>(self)?;
        unsafe {
            (::windows_core::Interface::vtable(this).SetCenterPoint)(
                ::windows_core::Interface::as_raw(this),
                value,
            )
            .ok()
        }
    }
    #[doc = "Required features: `\"Windows_Foundation_Numerics\"`"]
    #[cfg(feature = "Windows_Foundation_Numerics")]
    pub fn RotationAxis(&self) -> ::windows_core::Result<::windows::Foundation::Numerics::Vector3> {
        let this = &::windows_core::ComInterface::cast::<IUIElement>(self)?;
        unsafe {
            let mut result__ = ::std::mem::zeroed();
            (::windows_core::Interface::vtable(this).RotationAxis)(
                ::windows_core::Interface::as_raw(this),
                &mut result__,
            )
            .from_abi(result__)
        }
    }
    #[doc = "Required features: `\"Windows_Foundation_Numerics\"`"]
    #[cfg(feature = "Windows_Foundation_Numerics")]
    pub fn SetRotationAxis(
        &self,
        value: ::windows::Foundation::Numerics::Vector3,
    ) -> ::windows_core::Result<()> {
        let this = &::windows_core::ComInterface::cast::<IUIElement>(self)?;
        unsafe {
            (::windows_core::Interface::vtable(this).SetRotationAxis)(
                ::windows_core::Interface::as_raw(this),
                value,
            )
            .ok()
        }
    }
    #[doc = "Required features: `\"Windows_Foundation_Numerics\"`"]
    #[cfg(feature = "Windows_Foundation_Numerics")]
    pub fn ActualOffset(&self) -> ::windows_core::Result<::windows::Foundation::Numerics::Vector3> {
        let this = &::windows_core::ComInterface::cast::<IUIElement>(self)?;
        unsafe {
            let mut result__ = ::std::mem::zeroed();
            (::windows_core::Interface::vtable(this).ActualOffset)(
                ::windows_core::Interface::as_raw(this),
                &mut result__,
            )
            .from_abi(result__)
        }
    }
    #[doc = "Required features: `\"Windows_Foundation_Numerics\"`"]
    #[cfg(feature = "Windows_Foundation_Numerics")]
    pub fn ActualSize(&self) -> ::windows_core::Result<::windows::Foundation::Numerics::Vector2> {
        let this = &::windows_core::ComInterface::cast::<IUIElement>(self)?;
        unsafe {
            let mut result__ = ::std::mem::zeroed();
            (::windows_core::Interface::vtable(this).ActualSize)(
                ::windows_core::Interface::as_raw(this),
                &mut result__,
            )
            .from_abi(result__)
        }
    }
    pub fn XamlRoot(&self) -> ::windows_core::Result<XamlRoot> {
        let this = &::windows_core::ComInterface::cast::<IUIElement>(self)?;
        unsafe {
            let mut result__ = ::std::mem::zeroed();
            (::windows_core::Interface::vtable(this).XamlRoot)(
                ::windows_core::Interface::as_raw(this),
                &mut result__,
            )
            .from_abi(result__)
        }
    }
    pub fn SetXamlRoot<P0>(&self, value: P0) -> ::windows_core::Result<()>
    where
        P0: ::windows_core::IntoParam<XamlRoot>,
    {
        let this = &::windows_core::ComInterface::cast::<IUIElement>(self)?;
        unsafe {
            (::windows_core::Interface::vtable(this).SetXamlRoot)(
                ::windows_core::Interface::as_raw(this),
                value.into_param().abi(),
            )
            .ok()
        }
    }
    #[doc = "Required features: `\"Microsoft_UI_Xaml_Media\"`"]
    #[cfg(feature = "Microsoft_UI_Xaml_Media")]
    pub fn Shadow(&self) -> ::windows_core::Result<Media::Shadow> {
        let this = &::windows_core::ComInterface::cast::<IUIElement>(self)?;
        unsafe {
            let mut result__ = ::std::mem::zeroed();
            (::windows_core::Interface::vtable(this).Shadow)(
                ::windows_core::Interface::as_raw(this),
                &mut result__,
            )
            .from_abi(result__)
        }
    }
    #[doc = "Required features: `\"Microsoft_UI_Xaml_Media\"`"]
    #[cfg(feature = "Microsoft_UI_Xaml_Media")]
    pub fn SetShadow<P0>(&self, value: P0) -> ::windows_core::Result<()>
    where
        P0: ::windows_core::TryIntoParam<Media::Shadow>,
    {
        let this = &::windows_core::ComInterface::cast::<IUIElement>(self)?;
        unsafe {
            (::windows_core::Interface::vtable(this).SetShadow)(
                ::windows_core::Interface::as_raw(this),
                value.try_into_param()?.abi(),
            )
            .ok()
        }
    }
    pub fn RasterizationScale(&self) -> ::windows_core::Result<f64> {
        let this = &::windows_core::ComInterface::cast::<IUIElement>(self)?;
        unsafe {
            let mut result__ = ::std::mem::zeroed();
            (::windows_core::Interface::vtable(this).RasterizationScale)(
                ::windows_core::Interface::as_raw(this),
                &mut result__,
            )
            .from_abi(result__)
        }
    }
    pub fn SetRasterizationScale(&self, value: f64) -> ::windows_core::Result<()> {
        let this = &::windows_core::ComInterface::cast::<IUIElement>(self)?;
        unsafe {
            (::windows_core::Interface::vtable(this).SetRasterizationScale)(
                ::windows_core::Interface::as_raw(this),
                value,
            )
            .ok()
        }
    }
    pub fn FocusState(&self) -> ::windows_core::Result<FocusState> {
        let this = &::windows_core::ComInterface::cast::<IUIElement>(self)?;
        unsafe {
            let mut result__ = ::std::mem::zeroed();
            (::windows_core::Interface::vtable(this).FocusState)(
                ::windows_core::Interface::as_raw(this),
                &mut result__,
            )
            .from_abi(result__)
        }
    }
    pub fn UseSystemFocusVisuals(&self) -> ::windows_core::Result<bool> {
        let this = &::windows_core::ComInterface::cast::<IUIElement>(self)?;
        unsafe {
            let mut result__ = ::std::mem::zeroed();
            (::windows_core::Interface::vtable(this).UseSystemFocusVisuals)(
                ::windows_core::Interface::as_raw(this),
                &mut result__,
            )
            .from_abi(result__)
        }
    }
    pub fn SetUseSystemFocusVisuals(&self, value: bool) -> ::windows_core::Result<()> {
        let this = &::windows_core::ComInterface::cast::<IUIElement>(self)?;
        unsafe {
            (::windows_core::Interface::vtable(this).SetUseSystemFocusVisuals)(
                ::windows_core::Interface::as_raw(this),
                value,
            )
            .ok()
        }
    }
    pub fn XYFocusLeft(&self) -> ::windows_core::Result<DependencyObject> {
        let this = &::windows_core::ComInterface::cast::<IUIElement>(self)?;
        unsafe {
            let mut result__ = ::std::mem::zeroed();
            (::windows_core::Interface::vtable(this).XYFocusLeft)(
                ::windows_core::Interface::as_raw(this),
                &mut result__,
            )
            .from_abi(result__)
        }
    }
    pub fn SetXYFocusLeft<P0>(&self, value: P0) -> ::windows_core::Result<()>
    where
        P0: ::windows_core::TryIntoParam<DependencyObject>,
    {
        let this = &::windows_core::ComInterface::cast::<IUIElement>(self)?;
        unsafe {
            (::windows_core::Interface::vtable(this).SetXYFocusLeft)(
                ::windows_core::Interface::as_raw(this),
                value.try_into_param()?.abi(),
            )
            .ok()
        }
    }
    pub fn XYFocusRight(&self) -> ::windows_core::Result<DependencyObject> {
        let this = &::windows_core::ComInterface::cast::<IUIElement>(self)?;
        unsafe {
            let mut result__ = ::std::mem::zeroed();
            (::windows_core::Interface::vtable(this).XYFocusRight)(
                ::windows_core::Interface::as_raw(this),
                &mut result__,
            )
            .from_abi(result__)
        }
    }
    pub fn SetXYFocusRight<P0>(&self, value: P0) -> ::windows_core::Result<()>
    where
        P0: ::windows_core::TryIntoParam<DependencyObject>,
    {
        let this = &::windows_core::ComInterface::cast::<IUIElement>(self)?;
        unsafe {
            (::windows_core::Interface::vtable(this).SetXYFocusRight)(
                ::windows_core::Interface::as_raw(this),
                value.try_into_param()?.abi(),
            )
            .ok()
        }
    }
    pub fn XYFocusUp(&self) -> ::windows_core::Result<DependencyObject> {
        let this = &::windows_core::ComInterface::cast::<IUIElement>(self)?;
        unsafe {
            let mut result__ = ::std::mem::zeroed();
            (::windows_core::Interface::vtable(this).XYFocusUp)(
                ::windows_core::Interface::as_raw(this),
                &mut result__,
            )
            .from_abi(result__)
        }
    }
    pub fn SetXYFocusUp<P0>(&self, value: P0) -> ::windows_core::Result<()>
    where
        P0: ::windows_core::TryIntoParam<DependencyObject>,
    {
        let this = &::windows_core::ComInterface::cast::<IUIElement>(self)?;
        unsafe {
            (::windows_core::Interface::vtable(this).SetXYFocusUp)(
                ::windows_core::Interface::as_raw(this),
                value.try_into_param()?.abi(),
            )
            .ok()
        }
    }
    pub fn XYFocusDown(&self) -> ::windows_core::Result<DependencyObject> {
        let this = &::windows_core::ComInterface::cast::<IUIElement>(self)?;
        unsafe {
            let mut result__ = ::std::mem::zeroed();
            (::windows_core::Interface::vtable(this).XYFocusDown)(
                ::windows_core::Interface::as_raw(this),
                &mut result__,
            )
            .from_abi(result__)
        }
    }
    pub fn SetXYFocusDown<P0>(&self, value: P0) -> ::windows_core::Result<()>
    where
        P0: ::windows_core::TryIntoParam<DependencyObject>,
    {
        let this = &::windows_core::ComInterface::cast::<IUIElement>(self)?;
        unsafe {
            (::windows_core::Interface::vtable(this).SetXYFocusDown)(
                ::windows_core::Interface::as_raw(this),
                value.try_into_param()?.abi(),
            )
            .ok()
        }
    }
    pub fn IsTabStop(&self) -> ::windows_core::Result<bool> {
        let this = &::windows_core::ComInterface::cast::<IUIElement>(self)?;
        unsafe {
            let mut result__ = ::std::mem::zeroed();
            (::windows_core::Interface::vtable(this).IsTabStop)(
                ::windows_core::Interface::as_raw(this),
                &mut result__,
            )
            .from_abi(result__)
        }
    }
    pub fn SetIsTabStop(&self, value: bool) -> ::windows_core::Result<()> {
        let this = &::windows_core::ComInterface::cast::<IUIElement>(self)?;
        unsafe {
            (::windows_core::Interface::vtable(this).SetIsTabStop)(
                ::windows_core::Interface::as_raw(this),
                value,
            )
            .ok()
        }
    }
    pub fn TabIndex(&self) -> ::windows_core::Result<i32> {
        let this = &::windows_core::ComInterface::cast::<IUIElement>(self)?;
        unsafe {
            let mut result__ = ::std::mem::zeroed();
            (::windows_core::Interface::vtable(this).TabIndex)(
                ::windows_core::Interface::as_raw(this),
                &mut result__,
            )
            .from_abi(result__)
        }
    }
    pub fn SetTabIndex(&self, value: i32) -> ::windows_core::Result<()> {
        let this = &::windows_core::ComInterface::cast::<IUIElement>(self)?;
        unsafe {
            (::windows_core::Interface::vtable(this).SetTabIndex)(
                ::windows_core::Interface::as_raw(this),
                value,
            )
            .ok()
        }
    }
    #[doc = "Required features: `\"Microsoft_UI_Xaml_Input\"`, `\"Windows_Foundation\"`"]
    #[cfg(all(feature = "Microsoft_UI_Xaml_Input", feature = "Windows_Foundation"))]
    pub fn KeyUp<P0>(
        &self,
        handler: P0,
    ) -> ::windows_core::Result<::windows::Foundation::EventRegistrationToken>
    where
        P0: ::windows_core::IntoParam<Input::KeyEventHandler>,
    {
        let this = &::windows_core::ComInterface::cast::<IUIElement>(self)?;
        unsafe {
            let mut result__ = ::std::mem::zeroed();
            (::windows_core::Interface::vtable(this).KeyUp)(
                ::windows_core::Interface::as_raw(this),
                handler.into_param().abi(),
                &mut result__,
            )
            .from_abi(result__)
        }
    }
    #[doc = "Required features: `\"Windows_Foundation\"`"]
    #[cfg(feature = "Windows_Foundation")]
    pub fn RemoveKeyUp(
        &self,
        token: ::windows::Foundation::EventRegistrationToken,
    ) -> ::windows_core::Result<()> {
        let this = &::windows_core::ComInterface::cast::<IUIElement>(self)?;
        unsafe {
            (::windows_core::Interface::vtable(this).RemoveKeyUp)(
                ::windows_core::Interface::as_raw(this),
                token,
            )
            .ok()
        }
    }
    #[doc = "Required features: `\"Microsoft_UI_Xaml_Input\"`, `\"Windows_Foundation\"`"]
    #[cfg(all(feature = "Microsoft_UI_Xaml_Input", feature = "Windows_Foundation"))]
    pub fn KeyDown<P0>(
        &self,
        handler: P0,
    ) -> ::windows_core::Result<::windows::Foundation::EventRegistrationToken>
    where
        P0: ::windows_core::IntoParam<Input::KeyEventHandler>,
    {
        let this = &::windows_core::ComInterface::cast::<IUIElement>(self)?;
        unsafe {
            let mut result__ = ::std::mem::zeroed();
            (::windows_core::Interface::vtable(this).KeyDown)(
                ::windows_core::Interface::as_raw(this),
                handler.into_param().abi(),
                &mut result__,
            )
            .from_abi(result__)
        }
    }
    #[doc = "Required features: `\"Windows_Foundation\"`"]
    #[cfg(feature = "Windows_Foundation")]
    pub fn RemoveKeyDown(
        &self,
        token: ::windows::Foundation::EventRegistrationToken,
    ) -> ::windows_core::Result<()> {
        let this = &::windows_core::ComInterface::cast::<IUIElement>(self)?;
        unsafe {
            (::windows_core::Interface::vtable(this).RemoveKeyDown)(
                ::windows_core::Interface::as_raw(this),
                token,
            )
            .ok()
        }
    }
    #[doc = "Required features: `\"Windows_Foundation\"`"]
    #[cfg(feature = "Windows_Foundation")]
    pub fn GotFocus<P0>(
        &self,
        handler: P0,
    ) -> ::windows_core::Result<::windows::Foundation::EventRegistrationToken>
    where
        P0: ::windows_core::IntoParam<RoutedEventHandler>,
    {
        let this = &::windows_core::ComInterface::cast::<IUIElement>(self)?;
        unsafe {
            let mut result__ = ::std::mem::zeroed();
            (::windows_core::Interface::vtable(this).GotFocus)(
                ::windows_core::Interface::as_raw(this),
                handler.into_param().abi(),
                &mut result__,
            )
            .from_abi(result__)
        }
    }
    #[doc = "Required features: `\"Windows_Foundation\"`"]
    #[cfg(feature = "Windows_Foundation")]
    pub fn RemoveGotFocus(
        &self,
        token: ::windows::Foundation::EventRegistrationToken,
    ) -> ::windows_core::Result<()> {
        let this = &::windows_core::ComInterface::cast::<IUIElement>(self)?;
        unsafe {
            (::windows_core::Interface::vtable(this).RemoveGotFocus)(
                ::windows_core::Interface::as_raw(this),
                token,
            )
            .ok()
        }
    }
    #[doc = "Required features: `\"Windows_Foundation\"`"]
    #[cfg(feature = "Windows_Foundation")]
    pub fn LostFocus<P0>(
        &self,
        handler: P0,
    ) -> ::windows_core::Result<::windows::Foundation::EventRegistrationToken>
    where
        P0: ::windows_core::IntoParam<RoutedEventHandler>,
    {
        let this = &::windows_core::ComInterface::cast::<IUIElement>(self)?;
        unsafe {
            let mut result__ = ::std::mem::zeroed();
            (::windows_core::Interface::vtable(this).LostFocus)(
                ::windows_core::Interface::as_raw(this),
                handler.into_param().abi(),
                &mut result__,
            )
            .from_abi(result__)
        }
    }
    #[doc = "Required features: `\"Windows_Foundation\"`"]
    #[cfg(feature = "Windows_Foundation")]
    pub fn RemoveLostFocus(
        &self,
        token: ::windows::Foundation::EventRegistrationToken,
    ) -> ::windows_core::Result<()> {
        let this = &::windows_core::ComInterface::cast::<IUIElement>(self)?;
        unsafe {
            (::windows_core::Interface::vtable(this).RemoveLostFocus)(
                ::windows_core::Interface::as_raw(this),
                token,
            )
            .ok()
        }
    }
    #[doc = "Required features: `\"Windows_Foundation\"`"]
    #[cfg(feature = "Windows_Foundation")]
    pub fn DragStarting<P0>(
        &self,
        handler: P0,
    ) -> ::windows_core::Result<::windows::Foundation::EventRegistrationToken>
    where
        P0: ::windows_core::IntoParam<
            ::windows::Foundation::TypedEventHandler<UIElement, DragStartingEventArgs>,
        >,
    {
        let this = &::windows_core::ComInterface::cast::<IUIElement>(self)?;
        unsafe {
            let mut result__ = ::std::mem::zeroed();
            (::windows_core::Interface::vtable(this).DragStarting)(
                ::windows_core::Interface::as_raw(this),
                handler.into_param().abi(),
                &mut result__,
            )
            .from_abi(result__)
        }
    }
    #[doc = "Required features: `\"Windows_Foundation\"`"]
    #[cfg(feature = "Windows_Foundation")]
    pub fn RemoveDragStarting(
        &self,
        token: ::windows::Foundation::EventRegistrationToken,
    ) -> ::windows_core::Result<()> {
        let this = &::windows_core::ComInterface::cast::<IUIElement>(self)?;
        unsafe {
            (::windows_core::Interface::vtable(this).RemoveDragStarting)(
                ::windows_core::Interface::as_raw(this),
                token,
            )
            .ok()
        }
    }
    #[doc = "Required features: `\"Windows_Foundation\"`"]
    #[cfg(feature = "Windows_Foundation")]
    pub fn DropCompleted<P0>(
        &self,
        handler: P0,
    ) -> ::windows_core::Result<::windows::Foundation::EventRegistrationToken>
    where
        P0: ::windows_core::IntoParam<
            ::windows::Foundation::TypedEventHandler<UIElement, DropCompletedEventArgs>,
        >,
    {
        let this = &::windows_core::ComInterface::cast::<IUIElement>(self)?;
        unsafe {
            let mut result__ = ::std::mem::zeroed();
            (::windows_core::Interface::vtable(this).DropCompleted)(
                ::windows_core::Interface::as_raw(this),
                handler.into_param().abi(),
                &mut result__,
            )
            .from_abi(result__)
        }
    }
    #[doc = "Required features: `\"Windows_Foundation\"`"]
    #[cfg(feature = "Windows_Foundation")]
    pub fn RemoveDropCompleted(
        &self,
        token: ::windows::Foundation::EventRegistrationToken,
    ) -> ::windows_core::Result<()> {
        let this = &::windows_core::ComInterface::cast::<IUIElement>(self)?;
        unsafe {
            (::windows_core::Interface::vtable(this).RemoveDropCompleted)(
                ::windows_core::Interface::as_raw(this),
                token,
            )
            .ok()
        }
    }
    #[doc = "Required features: `\"Microsoft_UI_Xaml_Input\"`, `\"Windows_Foundation\"`"]
    #[cfg(all(feature = "Microsoft_UI_Xaml_Input", feature = "Windows_Foundation"))]
    pub fn CharacterReceived<P0>(
        &self,
        handler: P0,
    ) -> ::windows_core::Result<::windows::Foundation::EventRegistrationToken>
    where
        P0: ::windows_core::IntoParam<
            ::windows::Foundation::TypedEventHandler<
                UIElement,
                Input::CharacterReceivedRoutedEventArgs,
            >,
        >,
    {
        let this = &::windows_core::ComInterface::cast::<IUIElement>(self)?;
        unsafe {
            let mut result__ = ::std::mem::zeroed();
            (::windows_core::Interface::vtable(this).CharacterReceived)(
                ::windows_core::Interface::as_raw(this),
                handler.into_param().abi(),
                &mut result__,
            )
            .from_abi(result__)
        }
    }
    #[doc = "Required features: `\"Windows_Foundation\"`"]
    #[cfg(feature = "Windows_Foundation")]
    pub fn RemoveCharacterReceived(
        &self,
        token: ::windows::Foundation::EventRegistrationToken,
    ) -> ::windows_core::Result<()> {
        let this = &::windows_core::ComInterface::cast::<IUIElement>(self)?;
        unsafe {
            (::windows_core::Interface::vtable(this).RemoveCharacterReceived)(
                ::windows_core::Interface::as_raw(this),
                token,
            )
            .ok()
        }
    }
    #[doc = "Required features: `\"Windows_Foundation\"`"]
    #[cfg(feature = "Windows_Foundation")]
    pub fn DragEnter<P0>(
        &self,
        handler: P0,
    ) -> ::windows_core::Result<::windows::Foundation::EventRegistrationToken>
    where
        P0: ::windows_core::IntoParam<DragEventHandler>,
    {
        let this = &::windows_core::ComInterface::cast::<IUIElement>(self)?;
        unsafe {
            let mut result__ = ::std::mem::zeroed();
            (::windows_core::Interface::vtable(this).DragEnter)(
                ::windows_core::Interface::as_raw(this),
                handler.into_param().abi(),
                &mut result__,
            )
            .from_abi(result__)
        }
    }
    #[doc = "Required features: `\"Windows_Foundation\"`"]
    #[cfg(feature = "Windows_Foundation")]
    pub fn RemoveDragEnter(
        &self,
        token: ::windows::Foundation::EventRegistrationToken,
    ) -> ::windows_core::Result<()> {
        let this = &::windows_core::ComInterface::cast::<IUIElement>(self)?;
        unsafe {
            (::windows_core::Interface::vtable(this).RemoveDragEnter)(
                ::windows_core::Interface::as_raw(this),
                token,
            )
            .ok()
        }
    }
    #[doc = "Required features: `\"Windows_Foundation\"`"]
    #[cfg(feature = "Windows_Foundation")]
    pub fn DragLeave<P0>(
        &self,
        handler: P0,
    ) -> ::windows_core::Result<::windows::Foundation::EventRegistrationToken>
    where
        P0: ::windows_core::IntoParam<DragEventHandler>,
    {
        let this = &::windows_core::ComInterface::cast::<IUIElement>(self)?;
        unsafe {
            let mut result__ = ::std::mem::zeroed();
            (::windows_core::Interface::vtable(this).DragLeave)(
                ::windows_core::Interface::as_raw(this),
                handler.into_param().abi(),
                &mut result__,
            )
            .from_abi(result__)
        }
    }
    #[doc = "Required features: `\"Windows_Foundation\"`"]
    #[cfg(feature = "Windows_Foundation")]
    pub fn RemoveDragLeave(
        &self,
        token: ::windows::Foundation::EventRegistrationToken,
    ) -> ::windows_core::Result<()> {
        let this = &::windows_core::ComInterface::cast::<IUIElement>(self)?;
        unsafe {
            (::windows_core::Interface::vtable(this).RemoveDragLeave)(
                ::windows_core::Interface::as_raw(this),
                token,
            )
            .ok()
        }
    }
    #[doc = "Required features: `\"Windows_Foundation\"`"]
    #[cfg(feature = "Windows_Foundation")]
    pub fn DragOver<P0>(
        &self,
        handler: P0,
    ) -> ::windows_core::Result<::windows::Foundation::EventRegistrationToken>
    where
        P0: ::windows_core::IntoParam<DragEventHandler>,
    {
        let this = &::windows_core::ComInterface::cast::<IUIElement>(self)?;
        unsafe {
            let mut result__ = ::std::mem::zeroed();
            (::windows_core::Interface::vtable(this).DragOver)(
                ::windows_core::Interface::as_raw(this),
                handler.into_param().abi(),
                &mut result__,
            )
            .from_abi(result__)
        }
    }
    #[doc = "Required features: `\"Windows_Foundation\"`"]
    #[cfg(feature = "Windows_Foundation")]
    pub fn RemoveDragOver(
        &self,
        token: ::windows::Foundation::EventRegistrationToken,
    ) -> ::windows_core::Result<()> {
        let this = &::windows_core::ComInterface::cast::<IUIElement>(self)?;
        unsafe {
            (::windows_core::Interface::vtable(this).RemoveDragOver)(
                ::windows_core::Interface::as_raw(this),
                token,
            )
            .ok()
        }
    }
    #[doc = "Required features: `\"Windows_Foundation\"`"]
    #[cfg(feature = "Windows_Foundation")]
    pub fn Drop<P0>(
        &self,
        handler: P0,
    ) -> ::windows_core::Result<::windows::Foundation::EventRegistrationToken>
    where
        P0: ::windows_core::IntoParam<DragEventHandler>,
    {
        let this = &::windows_core::ComInterface::cast::<IUIElement>(self)?;
        unsafe {
            let mut result__ = ::std::mem::zeroed();
            (::windows_core::Interface::vtable(this).Drop)(
                ::windows_core::Interface::as_raw(this),
                handler.into_param().abi(),
                &mut result__,
            )
            .from_abi(result__)
        }
    }
    #[doc = "Required features: `\"Windows_Foundation\"`"]
    #[cfg(feature = "Windows_Foundation")]
    pub fn RemoveDrop(
        &self,
        token: ::windows::Foundation::EventRegistrationToken,
    ) -> ::windows_core::Result<()> {
        let this = &::windows_core::ComInterface::cast::<IUIElement>(self)?;
        unsafe {
            (::windows_core::Interface::vtable(this).RemoveDrop)(
                ::windows_core::Interface::as_raw(this),
                token,
            )
            .ok()
        }
    }
    #[doc = "Required features: `\"Microsoft_UI_Xaml_Input\"`, `\"Windows_Foundation\"`"]
    #[cfg(all(feature = "Microsoft_UI_Xaml_Input", feature = "Windows_Foundation"))]
    pub fn PointerPressed<P0>(
        &self,
        handler: P0,
    ) -> ::windows_core::Result<::windows::Foundation::EventRegistrationToken>
    where
        P0: ::windows_core::IntoParam<Input::PointerEventHandler>,
    {
        let this = &::windows_core::ComInterface::cast::<IUIElement>(self)?;
        unsafe {
            let mut result__ = ::std::mem::zeroed();
            (::windows_core::Interface::vtable(this).PointerPressed)(
                ::windows_core::Interface::as_raw(this),
                handler.into_param().abi(),
                &mut result__,
            )
            .from_abi(result__)
        }
    }
    #[doc = "Required features: `\"Windows_Foundation\"`"]
    #[cfg(feature = "Windows_Foundation")]
    pub fn RemovePointerPressed(
        &self,
        token: ::windows::Foundation::EventRegistrationToken,
    ) -> ::windows_core::Result<()> {
        let this = &::windows_core::ComInterface::cast::<IUIElement>(self)?;
        unsafe {
            (::windows_core::Interface::vtable(this).RemovePointerPressed)(
                ::windows_core::Interface::as_raw(this),
                token,
            )
            .ok()
        }
    }
    #[doc = "Required features: `\"Microsoft_UI_Xaml_Input\"`, `\"Windows_Foundation\"`"]
    #[cfg(all(feature = "Microsoft_UI_Xaml_Input", feature = "Windows_Foundation"))]
    pub fn PointerMoved<P0>(
        &self,
        handler: P0,
    ) -> ::windows_core::Result<::windows::Foundation::EventRegistrationToken>
    where
        P0: ::windows_core::IntoParam<Input::PointerEventHandler>,
    {
        let this = &::windows_core::ComInterface::cast::<IUIElement>(self)?;
        unsafe {
            let mut result__ = ::std::mem::zeroed();
            (::windows_core::Interface::vtable(this).PointerMoved)(
                ::windows_core::Interface::as_raw(this),
                handler.into_param().abi(),
                &mut result__,
            )
            .from_abi(result__)
        }
    }
    #[doc = "Required features: `\"Windows_Foundation\"`"]
    #[cfg(feature = "Windows_Foundation")]
    pub fn RemovePointerMoved(
        &self,
        token: ::windows::Foundation::EventRegistrationToken,
    ) -> ::windows_core::Result<()> {
        let this = &::windows_core::ComInterface::cast::<IUIElement>(self)?;
        unsafe {
            (::windows_core::Interface::vtable(this).RemovePointerMoved)(
                ::windows_core::Interface::as_raw(this),
                token,
            )
            .ok()
        }
    }
    #[doc = "Required features: `\"Microsoft_UI_Xaml_Input\"`, `\"Windows_Foundation\"`"]
    #[cfg(all(feature = "Microsoft_UI_Xaml_Input", feature = "Windows_Foundation"))]
    pub fn PointerReleased<P0>(
        &self,
        handler: P0,
    ) -> ::windows_core::Result<::windows::Foundation::EventRegistrationToken>
    where
        P0: ::windows_core::IntoParam<Input::PointerEventHandler>,
    {
        let this = &::windows_core::ComInterface::cast::<IUIElement>(self)?;
        unsafe {
            let mut result__ = ::std::mem::zeroed();
            (::windows_core::Interface::vtable(this).PointerReleased)(
                ::windows_core::Interface::as_raw(this),
                handler.into_param().abi(),
                &mut result__,
            )
            .from_abi(result__)
        }
    }
    #[doc = "Required features: `\"Windows_Foundation\"`"]
    #[cfg(feature = "Windows_Foundation")]
    pub fn RemovePointerReleased(
        &self,
        token: ::windows::Foundation::EventRegistrationToken,
    ) -> ::windows_core::Result<()> {
        let this = &::windows_core::ComInterface::cast::<IUIElement>(self)?;
        unsafe {
            (::windows_core::Interface::vtable(this).RemovePointerReleased)(
                ::windows_core::Interface::as_raw(this),
                token,
            )
            .ok()
        }
    }
    #[doc = "Required features: `\"Microsoft_UI_Xaml_Input\"`, `\"Windows_Foundation\"`"]
    #[cfg(all(feature = "Microsoft_UI_Xaml_Input", feature = "Windows_Foundation"))]
    pub fn PointerEntered<P0>(
        &self,
        handler: P0,
    ) -> ::windows_core::Result<::windows::Foundation::EventRegistrationToken>
    where
        P0: ::windows_core::IntoParam<Input::PointerEventHandler>,
    {
        let this = &::windows_core::ComInterface::cast::<IUIElement>(self)?;
        unsafe {
            let mut result__ = ::std::mem::zeroed();
            (::windows_core::Interface::vtable(this).PointerEntered)(
                ::windows_core::Interface::as_raw(this),
                handler.into_param().abi(),
                &mut result__,
            )
            .from_abi(result__)
        }
    }
    #[doc = "Required features: `\"Windows_Foundation\"`"]
    #[cfg(feature = "Windows_Foundation")]
    pub fn RemovePointerEntered(
        &self,
        token: ::windows::Foundation::EventRegistrationToken,
    ) -> ::windows_core::Result<()> {
        let this = &::windows_core::ComInterface::cast::<IUIElement>(self)?;
        unsafe {
            (::windows_core::Interface::vtable(this).RemovePointerEntered)(
                ::windows_core::Interface::as_raw(this),
                token,
            )
            .ok()
        }
    }
    #[doc = "Required features: `\"Microsoft_UI_Xaml_Input\"`, `\"Windows_Foundation\"`"]
    #[cfg(all(feature = "Microsoft_UI_Xaml_Input", feature = "Windows_Foundation"))]
    pub fn PointerExited<P0>(
        &self,
        handler: P0,
    ) -> ::windows_core::Result<::windows::Foundation::EventRegistrationToken>
    where
        P0: ::windows_core::IntoParam<Input::PointerEventHandler>,
    {
        let this = &::windows_core::ComInterface::cast::<IUIElement>(self)?;
        unsafe {
            let mut result__ = ::std::mem::zeroed();
            (::windows_core::Interface::vtable(this).PointerExited)(
                ::windows_core::Interface::as_raw(this),
                handler.into_param().abi(),
                &mut result__,
            )
            .from_abi(result__)
        }
    }
    #[doc = "Required features: `\"Windows_Foundation\"`"]
    #[cfg(feature = "Windows_Foundation")]
    pub fn RemovePointerExited(
        &self,
        token: ::windows::Foundation::EventRegistrationToken,
    ) -> ::windows_core::Result<()> {
        let this = &::windows_core::ComInterface::cast::<IUIElement>(self)?;
        unsafe {
            (::windows_core::Interface::vtable(this).RemovePointerExited)(
                ::windows_core::Interface::as_raw(this),
                token,
            )
            .ok()
        }
    }
    #[doc = "Required features: `\"Microsoft_UI_Xaml_Input\"`, `\"Windows_Foundation\"`"]
    #[cfg(all(feature = "Microsoft_UI_Xaml_Input", feature = "Windows_Foundation"))]
    pub fn PointerCaptureLost<P0>(
        &self,
        handler: P0,
    ) -> ::windows_core::Result<::windows::Foundation::EventRegistrationToken>
    where
        P0: ::windows_core::IntoParam<Input::PointerEventHandler>,
    {
        let this = &::windows_core::ComInterface::cast::<IUIElement>(self)?;
        unsafe {
            let mut result__ = ::std::mem::zeroed();
            (::windows_core::Interface::vtable(this).PointerCaptureLost)(
                ::windows_core::Interface::as_raw(this),
                handler.into_param().abi(),
                &mut result__,
            )
            .from_abi(result__)
        }
    }
    #[doc = "Required features: `\"Windows_Foundation\"`"]
    #[cfg(feature = "Windows_Foundation")]
    pub fn RemovePointerCaptureLost(
        &self,
        token: ::windows::Foundation::EventRegistrationToken,
    ) -> ::windows_core::Result<()> {
        let this = &::windows_core::ComInterface::cast::<IUIElement>(self)?;
        unsafe {
            (::windows_core::Interface::vtable(this).RemovePointerCaptureLost)(
                ::windows_core::Interface::as_raw(this),
                token,
            )
            .ok()
        }
    }
    #[doc = "Required features: `\"Microsoft_UI_Xaml_Input\"`, `\"Windows_Foundation\"`"]
    #[cfg(all(feature = "Microsoft_UI_Xaml_Input", feature = "Windows_Foundation"))]
    pub fn PointerCanceled<P0>(
        &self,
        handler: P0,
    ) -> ::windows_core::Result<::windows::Foundation::EventRegistrationToken>
    where
        P0: ::windows_core::IntoParam<Input::PointerEventHandler>,
    {
        let this = &::windows_core::ComInterface::cast::<IUIElement>(self)?;
        unsafe {
            let mut result__ = ::std::mem::zeroed();
            (::windows_core::Interface::vtable(this).PointerCanceled)(
                ::windows_core::Interface::as_raw(this),
                handler.into_param().abi(),
                &mut result__,
            )
            .from_abi(result__)
        }
    }
    #[doc = "Required features: `\"Windows_Foundation\"`"]
    #[cfg(feature = "Windows_Foundation")]
    pub fn RemovePointerCanceled(
        &self,
        token: ::windows::Foundation::EventRegistrationToken,
    ) -> ::windows_core::Result<()> {
        let this = &::windows_core::ComInterface::cast::<IUIElement>(self)?;
        unsafe {
            (::windows_core::Interface::vtable(this).RemovePointerCanceled)(
                ::windows_core::Interface::as_raw(this),
                token,
            )
            .ok()
        }
    }
    #[doc = "Required features: `\"Microsoft_UI_Xaml_Input\"`, `\"Windows_Foundation\"`"]
    #[cfg(all(feature = "Microsoft_UI_Xaml_Input", feature = "Windows_Foundation"))]
    pub fn PointerWheelChanged<P0>(
        &self,
        handler: P0,
    ) -> ::windows_core::Result<::windows::Foundation::EventRegistrationToken>
    where
        P0: ::windows_core::IntoParam<Input::PointerEventHandler>,
    {
        let this = &::windows_core::ComInterface::cast::<IUIElement>(self)?;
        unsafe {
            let mut result__ = ::std::mem::zeroed();
            (::windows_core::Interface::vtable(this).PointerWheelChanged)(
                ::windows_core::Interface::as_raw(this),
                handler.into_param().abi(),
                &mut result__,
            )
            .from_abi(result__)
        }
    }
    #[doc = "Required features: `\"Windows_Foundation\"`"]
    #[cfg(feature = "Windows_Foundation")]
    pub fn RemovePointerWheelChanged(
        &self,
        token: ::windows::Foundation::EventRegistrationToken,
    ) -> ::windows_core::Result<()> {
        let this = &::windows_core::ComInterface::cast::<IUIElement>(self)?;
        unsafe {
            (::windows_core::Interface::vtable(this).RemovePointerWheelChanged)(
                ::windows_core::Interface::as_raw(this),
                token,
            )
            .ok()
        }
    }
    #[doc = "Required features: `\"Microsoft_UI_Xaml_Input\"`, `\"Windows_Foundation\"`"]
    #[cfg(all(feature = "Microsoft_UI_Xaml_Input", feature = "Windows_Foundation"))]
    pub fn Tapped<P0>(
        &self,
        handler: P0,
    ) -> ::windows_core::Result<::windows::Foundation::EventRegistrationToken>
    where
        P0: ::windows_core::IntoParam<Input::TappedEventHandler>,
    {
        let this = &::windows_core::ComInterface::cast::<IUIElement>(self)?;
        unsafe {
            let mut result__ = ::std::mem::zeroed();
            (::windows_core::Interface::vtable(this).Tapped)(
                ::windows_core::Interface::as_raw(this),
                handler.into_param().abi(),
                &mut result__,
            )
            .from_abi(result__)
        }
    }
    #[doc = "Required features: `\"Windows_Foundation\"`"]
    #[cfg(feature = "Windows_Foundation")]
    pub fn RemoveTapped(
        &self,
        token: ::windows::Foundation::EventRegistrationToken,
    ) -> ::windows_core::Result<()> {
        let this = &::windows_core::ComInterface::cast::<IUIElement>(self)?;
        unsafe {
            (::windows_core::Interface::vtable(this).RemoveTapped)(
                ::windows_core::Interface::as_raw(this),
                token,
            )
            .ok()
        }
    }
    #[doc = "Required features: `\"Microsoft_UI_Xaml_Input\"`, `\"Windows_Foundation\"`"]
    #[cfg(all(feature = "Microsoft_UI_Xaml_Input", feature = "Windows_Foundation"))]
    pub fn DoubleTapped<P0>(
        &self,
        handler: P0,
    ) -> ::windows_core::Result<::windows::Foundation::EventRegistrationToken>
    where
        P0: ::windows_core::IntoParam<Input::DoubleTappedEventHandler>,
    {
        let this = &::windows_core::ComInterface::cast::<IUIElement>(self)?;
        unsafe {
            let mut result__ = ::std::mem::zeroed();
            (::windows_core::Interface::vtable(this).DoubleTapped)(
                ::windows_core::Interface::as_raw(this),
                handler.into_param().abi(),
                &mut result__,
            )
            .from_abi(result__)
        }
    }
    #[doc = "Required features: `\"Windows_Foundation\"`"]
    #[cfg(feature = "Windows_Foundation")]
    pub fn RemoveDoubleTapped(
        &self,
        token: ::windows::Foundation::EventRegistrationToken,
    ) -> ::windows_core::Result<()> {
        let this = &::windows_core::ComInterface::cast::<IUIElement>(self)?;
        unsafe {
            (::windows_core::Interface::vtable(this).RemoveDoubleTapped)(
                ::windows_core::Interface::as_raw(this),
                token,
            )
            .ok()
        }
    }
    #[doc = "Required features: `\"Microsoft_UI_Xaml_Input\"`, `\"Windows_Foundation\"`"]
    #[cfg(all(feature = "Microsoft_UI_Xaml_Input", feature = "Windows_Foundation"))]
    pub fn Holding<P0>(
        &self,
        handler: P0,
    ) -> ::windows_core::Result<::windows::Foundation::EventRegistrationToken>
    where
        P0: ::windows_core::IntoParam<Input::HoldingEventHandler>,
    {
        let this = &::windows_core::ComInterface::cast::<IUIElement>(self)?;
        unsafe {
            let mut result__ = ::std::mem::zeroed();
            (::windows_core::Interface::vtable(this).Holding)(
                ::windows_core::Interface::as_raw(this),
                handler.into_param().abi(),
                &mut result__,
            )
            .from_abi(result__)
        }
    }
    #[doc = "Required features: `\"Windows_Foundation\"`"]
    #[cfg(feature = "Windows_Foundation")]
    pub fn RemoveHolding(
        &self,
        token: ::windows::Foundation::EventRegistrationToken,
    ) -> ::windows_core::Result<()> {
        let this = &::windows_core::ComInterface::cast::<IUIElement>(self)?;
        unsafe {
            (::windows_core::Interface::vtable(this).RemoveHolding)(
                ::windows_core::Interface::as_raw(this),
                token,
            )
            .ok()
        }
    }
    #[doc = "Required features: `\"Microsoft_UI_Xaml_Input\"`, `\"Windows_Foundation\"`"]
    #[cfg(all(feature = "Microsoft_UI_Xaml_Input", feature = "Windows_Foundation"))]
    pub fn ContextRequested<P0>(
        &self,
        handler: P0,
    ) -> ::windows_core::Result<::windows::Foundation::EventRegistrationToken>
    where
        P0: ::windows_core::IntoParam<
            ::windows::Foundation::TypedEventHandler<UIElement, Input::ContextRequestedEventArgs>,
        >,
    {
        let this = &::windows_core::ComInterface::cast::<IUIElement>(self)?;
        unsafe {
            let mut result__ = ::std::mem::zeroed();
            (::windows_core::Interface::vtable(this).ContextRequested)(
                ::windows_core::Interface::as_raw(this),
                handler.into_param().abi(),
                &mut result__,
            )
            .from_abi(result__)
        }
    }
    #[doc = "Required features: `\"Windows_Foundation\"`"]
    #[cfg(feature = "Windows_Foundation")]
    pub fn RemoveContextRequested(
        &self,
        token: ::windows::Foundation::EventRegistrationToken,
    ) -> ::windows_core::Result<()> {
        let this = &::windows_core::ComInterface::cast::<IUIElement>(self)?;
        unsafe {
            (::windows_core::Interface::vtable(this).RemoveContextRequested)(
                ::windows_core::Interface::as_raw(this),
                token,
            )
            .ok()
        }
    }
    #[doc = "Required features: `\"Windows_Foundation\"`"]
    #[cfg(feature = "Windows_Foundation")]
    pub fn ContextCanceled<P0>(
        &self,
        handler: P0,
    ) -> ::windows_core::Result<::windows::Foundation::EventRegistrationToken>
    where
        P0: ::windows_core::IntoParam<
            ::windows::Foundation::TypedEventHandler<UIElement, RoutedEventArgs>,
        >,
    {
        let this = &::windows_core::ComInterface::cast::<IUIElement>(self)?;
        unsafe {
            let mut result__ = ::std::mem::zeroed();
            (::windows_core::Interface::vtable(this).ContextCanceled)(
                ::windows_core::Interface::as_raw(this),
                handler.into_param().abi(),
                &mut result__,
            )
            .from_abi(result__)
        }
    }
    #[doc = "Required features: `\"Windows_Foundation\"`"]
    #[cfg(feature = "Windows_Foundation")]
    pub fn RemoveContextCanceled(
        &self,
        token: ::windows::Foundation::EventRegistrationToken,
    ) -> ::windows_core::Result<()> {
        let this = &::windows_core::ComInterface::cast::<IUIElement>(self)?;
        unsafe {
            (::windows_core::Interface::vtable(this).RemoveContextCanceled)(
                ::windows_core::Interface::as_raw(this),
                token,
            )
            .ok()
        }
    }
    #[doc = "Required features: `\"Microsoft_UI_Xaml_Input\"`, `\"Windows_Foundation\"`"]
    #[cfg(all(feature = "Microsoft_UI_Xaml_Input", feature = "Windows_Foundation"))]
    pub fn RightTapped<P0>(
        &self,
        handler: P0,
    ) -> ::windows_core::Result<::windows::Foundation::EventRegistrationToken>
    where
        P0: ::windows_core::IntoParam<Input::RightTappedEventHandler>,
    {
        let this = &::windows_core::ComInterface::cast::<IUIElement>(self)?;
        unsafe {
            let mut result__ = ::std::mem::zeroed();
            (::windows_core::Interface::vtable(this).RightTapped)(
                ::windows_core::Interface::as_raw(this),
                handler.into_param().abi(),
                &mut result__,
            )
            .from_abi(result__)
        }
    }
    #[doc = "Required features: `\"Windows_Foundation\"`"]
    #[cfg(feature = "Windows_Foundation")]
    pub fn RemoveRightTapped(
        &self,
        token: ::windows::Foundation::EventRegistrationToken,
    ) -> ::windows_core::Result<()> {
        let this = &::windows_core::ComInterface::cast::<IUIElement>(self)?;
        unsafe {
            (::windows_core::Interface::vtable(this).RemoveRightTapped)(
                ::windows_core::Interface::as_raw(this),
                token,
            )
            .ok()
        }
    }
    #[doc = "Required features: `\"Microsoft_UI_Xaml_Input\"`, `\"Windows_Foundation\"`"]
    #[cfg(all(feature = "Microsoft_UI_Xaml_Input", feature = "Windows_Foundation"))]
    pub fn ManipulationStarting<P0>(
        &self,
        handler: P0,
    ) -> ::windows_core::Result<::windows::Foundation::EventRegistrationToken>
    where
        P0: ::windows_core::IntoParam<Input::ManipulationStartingEventHandler>,
    {
        let this = &::windows_core::ComInterface::cast::<IUIElement>(self)?;
        unsafe {
            let mut result__ = ::std::mem::zeroed();
            (::windows_core::Interface::vtable(this).ManipulationStarting)(
                ::windows_core::Interface::as_raw(this),
                handler.into_param().abi(),
                &mut result__,
            )
            .from_abi(result__)
        }
    }
    #[doc = "Required features: `\"Windows_Foundation\"`"]
    #[cfg(feature = "Windows_Foundation")]
    pub fn RemoveManipulationStarting(
        &self,
        token: ::windows::Foundation::EventRegistrationToken,
    ) -> ::windows_core::Result<()> {
        let this = &::windows_core::ComInterface::cast::<IUIElement>(self)?;
        unsafe {
            (::windows_core::Interface::vtable(this).RemoveManipulationStarting)(
                ::windows_core::Interface::as_raw(this),
                token,
            )
            .ok()
        }
    }
    #[doc = "Required features: `\"Microsoft_UI_Xaml_Input\"`, `\"Windows_Foundation\"`"]
    #[cfg(all(feature = "Microsoft_UI_Xaml_Input", feature = "Windows_Foundation"))]
    pub fn ManipulationInertiaStarting<P0>(
        &self,
        handler: P0,
    ) -> ::windows_core::Result<::windows::Foundation::EventRegistrationToken>
    where
        P0: ::windows_core::IntoParam<Input::ManipulationInertiaStartingEventHandler>,
    {
        let this = &::windows_core::ComInterface::cast::<IUIElement>(self)?;
        unsafe {
            let mut result__ = ::std::mem::zeroed();
            (::windows_core::Interface::vtable(this).ManipulationInertiaStarting)(
                ::windows_core::Interface::as_raw(this),
                handler.into_param().abi(),
                &mut result__,
            )
            .from_abi(result__)
        }
    }
    #[doc = "Required features: `\"Windows_Foundation\"`"]
    #[cfg(feature = "Windows_Foundation")]
    pub fn RemoveManipulationInertiaStarting(
        &self,
        token: ::windows::Foundation::EventRegistrationToken,
    ) -> ::windows_core::Result<()> {
        let this = &::windows_core::ComInterface::cast::<IUIElement>(self)?;
        unsafe {
            (::windows_core::Interface::vtable(this).RemoveManipulationInertiaStarting)(
                ::windows_core::Interface::as_raw(this),
                token,
            )
            .ok()
        }
    }
    #[doc = "Required features: `\"Microsoft_UI_Xaml_Input\"`, `\"Windows_Foundation\"`"]
    #[cfg(all(feature = "Microsoft_UI_Xaml_Input", feature = "Windows_Foundation"))]
    pub fn ManipulationStarted<P0>(
        &self,
        handler: P0,
    ) -> ::windows_core::Result<::windows::Foundation::EventRegistrationToken>
    where
        P0: ::windows_core::IntoParam<Input::ManipulationStartedEventHandler>,
    {
        let this = &::windows_core::ComInterface::cast::<IUIElement>(self)?;
        unsafe {
            let mut result__ = ::std::mem::zeroed();
            (::windows_core::Interface::vtable(this).ManipulationStarted)(
                ::windows_core::Interface::as_raw(this),
                handler.into_param().abi(),
                &mut result__,
            )
            .from_abi(result__)
        }
    }
    #[doc = "Required features: `\"Windows_Foundation\"`"]
    #[cfg(feature = "Windows_Foundation")]
    pub fn RemoveManipulationStarted(
        &self,
        token: ::windows::Foundation::EventRegistrationToken,
    ) -> ::windows_core::Result<()> {
        let this = &::windows_core::ComInterface::cast::<IUIElement>(self)?;
        unsafe {
            (::windows_core::Interface::vtable(this).RemoveManipulationStarted)(
                ::windows_core::Interface::as_raw(this),
                token,
            )
            .ok()
        }
    }
    #[doc = "Required features: `\"Microsoft_UI_Xaml_Input\"`, `\"Windows_Foundation\"`"]
    #[cfg(all(feature = "Microsoft_UI_Xaml_Input", feature = "Windows_Foundation"))]
    pub fn ManipulationDelta<P0>(
        &self,
        handler: P0,
    ) -> ::windows_core::Result<::windows::Foundation::EventRegistrationToken>
    where
        P0: ::windows_core::IntoParam<Input::ManipulationDeltaEventHandler>,
    {
        let this = &::windows_core::ComInterface::cast::<IUIElement>(self)?;
        unsafe {
            let mut result__ = ::std::mem::zeroed();
            (::windows_core::Interface::vtable(this).ManipulationDelta)(
                ::windows_core::Interface::as_raw(this),
                handler.into_param().abi(),
                &mut result__,
            )
            .from_abi(result__)
        }
    }
    #[doc = "Required features: `\"Windows_Foundation\"`"]
    #[cfg(feature = "Windows_Foundation")]
    pub fn RemoveManipulationDelta(
        &self,
        token: ::windows::Foundation::EventRegistrationToken,
    ) -> ::windows_core::Result<()> {
        let this = &::windows_core::ComInterface::cast::<IUIElement>(self)?;
        unsafe {
            (::windows_core::Interface::vtable(this).RemoveManipulationDelta)(
                ::windows_core::Interface::as_raw(this),
                token,
            )
            .ok()
        }
    }
    #[doc = "Required features: `\"Microsoft_UI_Xaml_Input\"`, `\"Windows_Foundation\"`"]
    #[cfg(all(feature = "Microsoft_UI_Xaml_Input", feature = "Windows_Foundation"))]
    pub fn ManipulationCompleted<P0>(
        &self,
        handler: P0,
    ) -> ::windows_core::Result<::windows::Foundation::EventRegistrationToken>
    where
        P0: ::windows_core::IntoParam<Input::ManipulationCompletedEventHandler>,
    {
        let this = &::windows_core::ComInterface::cast::<IUIElement>(self)?;
        unsafe {
            let mut result__ = ::std::mem::zeroed();
            (::windows_core::Interface::vtable(this).ManipulationCompleted)(
                ::windows_core::Interface::as_raw(this),
                handler.into_param().abi(),
                &mut result__,
            )
            .from_abi(result__)
        }
    }
    #[doc = "Required features: `\"Windows_Foundation\"`"]
    #[cfg(feature = "Windows_Foundation")]
    pub fn RemoveManipulationCompleted(
        &self,
        token: ::windows::Foundation::EventRegistrationToken,
    ) -> ::windows_core::Result<()> {
        let this = &::windows_core::ComInterface::cast::<IUIElement>(self)?;
        unsafe {
            (::windows_core::Interface::vtable(this).RemoveManipulationCompleted)(
                ::windows_core::Interface::as_raw(this),
                token,
            )
            .ok()
        }
    }
    #[doc = "Required features: `\"Microsoft_UI_Xaml_Input\"`, `\"Windows_Foundation\"`"]
    #[cfg(all(feature = "Microsoft_UI_Xaml_Input", feature = "Windows_Foundation"))]
    pub fn AccessKeyDisplayRequested<P0>(
        &self,
        handler: P0,
    ) -> ::windows_core::Result<::windows::Foundation::EventRegistrationToken>
    where
        P0: ::windows_core::IntoParam<
            ::windows::Foundation::TypedEventHandler<
                UIElement,
                Input::AccessKeyDisplayRequestedEventArgs,
            >,
        >,
    {
        let this = &::windows_core::ComInterface::cast::<IUIElement>(self)?;
        unsafe {
            let mut result__ = ::std::mem::zeroed();
            (::windows_core::Interface::vtable(this).AccessKeyDisplayRequested)(
                ::windows_core::Interface::as_raw(this),
                handler.into_param().abi(),
                &mut result__,
            )
            .from_abi(result__)
        }
    }
    #[doc = "Required features: `\"Windows_Foundation\"`"]
    #[cfg(feature = "Windows_Foundation")]
    pub fn RemoveAccessKeyDisplayRequested(
        &self,
        token: ::windows::Foundation::EventRegistrationToken,
    ) -> ::windows_core::Result<()> {
        let this = &::windows_core::ComInterface::cast::<IUIElement>(self)?;
        unsafe {
            (::windows_core::Interface::vtable(this).RemoveAccessKeyDisplayRequested)(
                ::windows_core::Interface::as_raw(this),
                token,
            )
            .ok()
        }
    }
    #[doc = "Required features: `\"Microsoft_UI_Xaml_Input\"`, `\"Windows_Foundation\"`"]
    #[cfg(all(feature = "Microsoft_UI_Xaml_Input", feature = "Windows_Foundation"))]
    pub fn AccessKeyDisplayDismissed<P0>(
        &self,
        handler: P0,
    ) -> ::windows_core::Result<::windows::Foundation::EventRegistrationToken>
    where
        P0: ::windows_core::IntoParam<
            ::windows::Foundation::TypedEventHandler<
                UIElement,
                Input::AccessKeyDisplayDismissedEventArgs,
            >,
        >,
    {
        let this = &::windows_core::ComInterface::cast::<IUIElement>(self)?;
        unsafe {
            let mut result__ = ::std::mem::zeroed();
            (::windows_core::Interface::vtable(this).AccessKeyDisplayDismissed)(
                ::windows_core::Interface::as_raw(this),
                handler.into_param().abi(),
                &mut result__,
            )
            .from_abi(result__)
        }
    }
    #[doc = "Required features: `\"Windows_Foundation\"`"]
    #[cfg(feature = "Windows_Foundation")]
    pub fn RemoveAccessKeyDisplayDismissed(
        &self,
        token: ::windows::Foundation::EventRegistrationToken,
    ) -> ::windows_core::Result<()> {
        let this = &::windows_core::ComInterface::cast::<IUIElement>(self)?;
        unsafe {
            (::windows_core::Interface::vtable(this).RemoveAccessKeyDisplayDismissed)(
                ::windows_core::Interface::as_raw(this),
                token,
            )
            .ok()
        }
    }
    #[doc = "Required features: `\"Microsoft_UI_Xaml_Input\"`, `\"Windows_Foundation\"`"]
    #[cfg(all(feature = "Microsoft_UI_Xaml_Input", feature = "Windows_Foundation"))]
    pub fn AccessKeyInvoked<P0>(
        &self,
        handler: P0,
    ) -> ::windows_core::Result<::windows::Foundation::EventRegistrationToken>
    where
        P0: ::windows_core::IntoParam<
            ::windows::Foundation::TypedEventHandler<UIElement, Input::AccessKeyInvokedEventArgs>,
        >,
    {
        let this = &::windows_core::ComInterface::cast::<IUIElement>(self)?;
        unsafe {
            let mut result__ = ::std::mem::zeroed();
            (::windows_core::Interface::vtable(this).AccessKeyInvoked)(
                ::windows_core::Interface::as_raw(this),
                handler.into_param().abi(),
                &mut result__,
            )
            .from_abi(result__)
        }
    }
    #[doc = "Required features: `\"Windows_Foundation\"`"]
    #[cfg(feature = "Windows_Foundation")]
    pub fn RemoveAccessKeyInvoked(
        &self,
        token: ::windows::Foundation::EventRegistrationToken,
    ) -> ::windows_core::Result<()> {
        let this = &::windows_core::ComInterface::cast::<IUIElement>(self)?;
        unsafe {
            (::windows_core::Interface::vtable(this).RemoveAccessKeyInvoked)(
                ::windows_core::Interface::as_raw(this),
                token,
            )
            .ok()
        }
    }
    #[doc = "Required features: `\"Microsoft_UI_Xaml_Input\"`, `\"Windows_Foundation\"`"]
    #[cfg(all(feature = "Microsoft_UI_Xaml_Input", feature = "Windows_Foundation"))]
    pub fn ProcessKeyboardAccelerators<P0>(
        &self,
        handler: P0,
    ) -> ::windows_core::Result<::windows::Foundation::EventRegistrationToken>
    where
        P0: ::windows_core::IntoParam<
            ::windows::Foundation::TypedEventHandler<
                UIElement,
                Input::ProcessKeyboardAcceleratorEventArgs,
            >,
        >,
    {
        let this = &::windows_core::ComInterface::cast::<IUIElement>(self)?;
        unsafe {
            let mut result__ = ::std::mem::zeroed();
            (::windows_core::Interface::vtable(this).ProcessKeyboardAccelerators)(
                ::windows_core::Interface::as_raw(this),
                handler.into_param().abi(),
                &mut result__,
            )
            .from_abi(result__)
        }
    }
    #[doc = "Required features: `\"Windows_Foundation\"`"]
    #[cfg(feature = "Windows_Foundation")]
    pub fn RemoveProcessKeyboardAccelerators(
        &self,
        token: ::windows::Foundation::EventRegistrationToken,
    ) -> ::windows_core::Result<()> {
        let this = &::windows_core::ComInterface::cast::<IUIElement>(self)?;
        unsafe {
            (::windows_core::Interface::vtable(this).RemoveProcessKeyboardAccelerators)(
                ::windows_core::Interface::as_raw(this),
                token,
            )
            .ok()
        }
    }
    #[doc = "Required features: `\"Microsoft_UI_Xaml_Input\"`, `\"Windows_Foundation\"`"]
    #[cfg(all(feature = "Microsoft_UI_Xaml_Input", feature = "Windows_Foundation"))]
    pub fn GettingFocus<P0>(
        &self,
        handler: P0,
    ) -> ::windows_core::Result<::windows::Foundation::EventRegistrationToken>
    where
        P0: ::windows_core::IntoParam<
            ::windows::Foundation::TypedEventHandler<UIElement, Input::GettingFocusEventArgs>,
        >,
    {
        let this = &::windows_core::ComInterface::cast::<IUIElement>(self)?;
        unsafe {
            let mut result__ = ::std::mem::zeroed();
            (::windows_core::Interface::vtable(this).GettingFocus)(
                ::windows_core::Interface::as_raw(this),
                handler.into_param().abi(),
                &mut result__,
            )
            .from_abi(result__)
        }
    }
    #[doc = "Required features: `\"Windows_Foundation\"`"]
    #[cfg(feature = "Windows_Foundation")]
    pub fn RemoveGettingFocus(
        &self,
        token: ::windows::Foundation::EventRegistrationToken,
    ) -> ::windows_core::Result<()> {
        let this = &::windows_core::ComInterface::cast::<IUIElement>(self)?;
        unsafe {
            (::windows_core::Interface::vtable(this).RemoveGettingFocus)(
                ::windows_core::Interface::as_raw(this),
                token,
            )
            .ok()
        }
    }
    #[doc = "Required features: `\"Microsoft_UI_Xaml_Input\"`, `\"Windows_Foundation\"`"]
    #[cfg(all(feature = "Microsoft_UI_Xaml_Input", feature = "Windows_Foundation"))]
    pub fn LosingFocus<P0>(
        &self,
        handler: P0,
    ) -> ::windows_core::Result<::windows::Foundation::EventRegistrationToken>
    where
        P0: ::windows_core::IntoParam<
            ::windows::Foundation::TypedEventHandler<UIElement, Input::LosingFocusEventArgs>,
        >,
    {
        let this = &::windows_core::ComInterface::cast::<IUIElement>(self)?;
        unsafe {
            let mut result__ = ::std::mem::zeroed();
            (::windows_core::Interface::vtable(this).LosingFocus)(
                ::windows_core::Interface::as_raw(this),
                handler.into_param().abi(),
                &mut result__,
            )
            .from_abi(result__)
        }
    }
    #[doc = "Required features: `\"Windows_Foundation\"`"]
    #[cfg(feature = "Windows_Foundation")]
    pub fn RemoveLosingFocus(
        &self,
        token: ::windows::Foundation::EventRegistrationToken,
    ) -> ::windows_core::Result<()> {
        let this = &::windows_core::ComInterface::cast::<IUIElement>(self)?;
        unsafe {
            (::windows_core::Interface::vtable(this).RemoveLosingFocus)(
                ::windows_core::Interface::as_raw(this),
                token,
            )
            .ok()
        }
    }
    #[doc = "Required features: `\"Microsoft_UI_Xaml_Input\"`, `\"Windows_Foundation\"`"]
    #[cfg(all(feature = "Microsoft_UI_Xaml_Input", feature = "Windows_Foundation"))]
    pub fn NoFocusCandidateFound<P0>(
        &self,
        handler: P0,
    ) -> ::windows_core::Result<::windows::Foundation::EventRegistrationToken>
    where
        P0: ::windows_core::IntoParam<
            ::windows::Foundation::TypedEventHandler<
                UIElement,
                Input::NoFocusCandidateFoundEventArgs,
            >,
        >,
    {
        let this = &::windows_core::ComInterface::cast::<IUIElement>(self)?;
        unsafe {
            let mut result__ = ::std::mem::zeroed();
            (::windows_core::Interface::vtable(this).NoFocusCandidateFound)(
                ::windows_core::Interface::as_raw(this),
                handler.into_param().abi(),
                &mut result__,
            )
            .from_abi(result__)
        }
    }
    #[doc = "Required features: `\"Windows_Foundation\"`"]
    #[cfg(feature = "Windows_Foundation")]
    pub fn RemoveNoFocusCandidateFound(
        &self,
        token: ::windows::Foundation::EventRegistrationToken,
    ) -> ::windows_core::Result<()> {
        let this = &::windows_core::ComInterface::cast::<IUIElement>(self)?;
        unsafe {
            (::windows_core::Interface::vtable(this).RemoveNoFocusCandidateFound)(
                ::windows_core::Interface::as_raw(this),
                token,
            )
            .ok()
        }
    }
    #[doc = "Required features: `\"Microsoft_UI_Xaml_Input\"`, `\"Windows_Foundation\"`"]
    #[cfg(all(feature = "Microsoft_UI_Xaml_Input", feature = "Windows_Foundation"))]
    pub fn PreviewKeyDown<P0>(
        &self,
        handler: P0,
    ) -> ::windows_core::Result<::windows::Foundation::EventRegistrationToken>
    where
        P0: ::windows_core::IntoParam<Input::KeyEventHandler>,
    {
        let this = &::windows_core::ComInterface::cast::<IUIElement>(self)?;
        unsafe {
            let mut result__ = ::std::mem::zeroed();
            (::windows_core::Interface::vtable(this).PreviewKeyDown)(
                ::windows_core::Interface::as_raw(this),
                handler.into_param().abi(),
                &mut result__,
            )
            .from_abi(result__)
        }
    }
    #[doc = "Required features: `\"Windows_Foundation\"`"]
    #[cfg(feature = "Windows_Foundation")]
    pub fn RemovePreviewKeyDown(
        &self,
        token: ::windows::Foundation::EventRegistrationToken,
    ) -> ::windows_core::Result<()> {
        let this = &::windows_core::ComInterface::cast::<IUIElement>(self)?;
        unsafe {
            (::windows_core::Interface::vtable(this).RemovePreviewKeyDown)(
                ::windows_core::Interface::as_raw(this),
                token,
            )
            .ok()
        }
    }
    #[doc = "Required features: `\"Microsoft_UI_Xaml_Input\"`, `\"Windows_Foundation\"`"]
    #[cfg(all(feature = "Microsoft_UI_Xaml_Input", feature = "Windows_Foundation"))]
    pub fn PreviewKeyUp<P0>(
        &self,
        handler: P0,
    ) -> ::windows_core::Result<::windows::Foundation::EventRegistrationToken>
    where
        P0: ::windows_core::IntoParam<Input::KeyEventHandler>,
    {
        let this = &::windows_core::ComInterface::cast::<IUIElement>(self)?;
        unsafe {
            let mut result__ = ::std::mem::zeroed();
            (::windows_core::Interface::vtable(this).PreviewKeyUp)(
                ::windows_core::Interface::as_raw(this),
                handler.into_param().abi(),
                &mut result__,
            )
            .from_abi(result__)
        }
    }
    #[doc = "Required features: `\"Windows_Foundation\"`"]
    #[cfg(feature = "Windows_Foundation")]
    pub fn RemovePreviewKeyUp(
        &self,
        token: ::windows::Foundation::EventRegistrationToken,
    ) -> ::windows_core::Result<()> {
        let this = &::windows_core::ComInterface::cast::<IUIElement>(self)?;
        unsafe {
            (::windows_core::Interface::vtable(this).RemovePreviewKeyUp)(
                ::windows_core::Interface::as_raw(this),
                token,
            )
            .ok()
        }
    }
    #[doc = "Required features: `\"Windows_Foundation\"`"]
    #[cfg(feature = "Windows_Foundation")]
    pub fn BringIntoViewRequested<P0>(
        &self,
        handler: P0,
    ) -> ::windows_core::Result<::windows::Foundation::EventRegistrationToken>
    where
        P0: ::windows_core::IntoParam<
            ::windows::Foundation::TypedEventHandler<UIElement, BringIntoViewRequestedEventArgs>,
        >,
    {
        let this = &::windows_core::ComInterface::cast::<IUIElement>(self)?;
        unsafe {
            let mut result__ = ::std::mem::zeroed();
            (::windows_core::Interface::vtable(this).BringIntoViewRequested)(
                ::windows_core::Interface::as_raw(this),
                handler.into_param().abi(),
                &mut result__,
            )
            .from_abi(result__)
        }
    }
    #[doc = "Required features: `\"Windows_Foundation\"`"]
    #[cfg(feature = "Windows_Foundation")]
    pub fn RemoveBringIntoViewRequested(
        &self,
        token: ::windows::Foundation::EventRegistrationToken,
    ) -> ::windows_core::Result<()> {
        let this = &::windows_core::ComInterface::cast::<IUIElement>(self)?;
        unsafe {
            (::windows_core::Interface::vtable(this).RemoveBringIntoViewRequested)(
                ::windows_core::Interface::as_raw(this),
                token,
            )
            .ok()
        }
    }
    #[doc = "Required features: `\"Windows_Foundation\"`"]
    #[cfg(feature = "Windows_Foundation")]
    pub fn Measure(
        &self,
        availablesize: ::windows::Foundation::Size,
    ) -> ::windows_core::Result<()> {
        let this = &::windows_core::ComInterface::cast::<IUIElement>(self)?;
        unsafe {
            (::windows_core::Interface::vtable(this).Measure)(
                ::windows_core::Interface::as_raw(this),
                availablesize,
            )
            .ok()
        }
    }
    #[doc = "Required features: `\"Windows_Foundation\"`"]
    #[cfg(feature = "Windows_Foundation")]
    pub fn Arrange(&self, finalrect: ::windows::Foundation::Rect) -> ::windows_core::Result<()> {
        let this = &::windows_core::ComInterface::cast::<IUIElement>(self)?;
        unsafe {
            (::windows_core::Interface::vtable(this).Arrange)(
                ::windows_core::Interface::as_raw(this),
                finalrect,
            )
            .ok()
        }
    }
    #[doc = "Required features: `\"Microsoft_UI_Xaml_Input\"`"]
    #[cfg(feature = "Microsoft_UI_Xaml_Input")]
    pub fn CapturePointer<P0>(&self, value: P0) -> ::windows_core::Result<bool>
    where
        P0: ::windows_core::IntoParam<Input::Pointer>,
    {
        let this = &::windows_core::ComInterface::cast::<IUIElement>(self)?;
        unsafe {
            let mut result__ = ::std::mem::zeroed();
            (::windows_core::Interface::vtable(this).CapturePointer)(
                ::windows_core::Interface::as_raw(this),
                value.into_param().abi(),
                &mut result__,
            )
            .from_abi(result__)
        }
    }
    #[doc = "Required features: `\"Microsoft_UI_Xaml_Input\"`"]
    #[cfg(feature = "Microsoft_UI_Xaml_Input")]
    pub fn ReleasePointerCapture<P0>(&self, value: P0) -> ::windows_core::Result<()>
    where
        P0: ::windows_core::IntoParam<Input::Pointer>,
    {
        let this = &::windows_core::ComInterface::cast::<IUIElement>(self)?;
        unsafe {
            (::windows_core::Interface::vtable(this).ReleasePointerCapture)(
                ::windows_core::Interface::as_raw(this),
                value.into_param().abi(),
            )
            .ok()
        }
    }
    pub fn ReleasePointerCaptures(&self) -> ::windows_core::Result<()> {
        let this = &::windows_core::ComInterface::cast::<IUIElement>(self)?;
        unsafe {
            (::windows_core::Interface::vtable(this).ReleasePointerCaptures)(
                ::windows_core::Interface::as_raw(this),
            )
            .ok()
        }
    }
    pub fn AddHandler<P0, P1>(
        &self,
        routedevent: P0,
        handler: P1,
        handledeventstoo: bool,
    ) -> ::windows_core::Result<()>
    where
        P0: ::windows_core::IntoParam<RoutedEvent>,
        P1: ::windows_core::IntoParam<::windows_core::IInspectable>,
    {
        let this = &::windows_core::ComInterface::cast::<IUIElement>(self)?;
        unsafe {
            (::windows_core::Interface::vtable(this).AddHandler)(
                ::windows_core::Interface::as_raw(this),
                routedevent.into_param().abi(),
                handler.into_param().abi(),
                handledeventstoo,
            )
            .ok()
        }
    }
    pub fn RemoveHandler<P0, P1>(&self, routedevent: P0, handler: P1) -> ::windows_core::Result<()>
    where
        P0: ::windows_core::IntoParam<RoutedEvent>,
        P1: ::windows_core::IntoParam<::windows_core::IInspectable>,
    {
        let this = &::windows_core::ComInterface::cast::<IUIElement>(self)?;
        unsafe {
            (::windows_core::Interface::vtable(this).RemoveHandler)(
                ::windows_core::Interface::as_raw(this),
                routedevent.into_param().abi(),
                handler.into_param().abi(),
            )
            .ok()
        }
    }
    #[doc = "Required features: `\"Microsoft_UI_Xaml_Media\"`"]
    #[cfg(feature = "Microsoft_UI_Xaml_Media")]
    pub fn TransformToVisual<P0>(
        &self,
        visual: P0,
    ) -> ::windows_core::Result<Media::GeneralTransform>
    where
        P0: ::windows_core::TryIntoParam<UIElement>,
    {
        let this = &::windows_core::ComInterface::cast::<IUIElement>(self)?;
        unsafe {
            let mut result__ = ::std::mem::zeroed();
            (::windows_core::Interface::vtable(this).TransformToVisual)(
                ::windows_core::Interface::as_raw(this),
                visual.try_into_param()?.abi(),
                &mut result__,
            )
            .from_abi(result__)
        }
    }
    pub fn InvalidateMeasure(&self) -> ::windows_core::Result<()> {
        let this = &::windows_core::ComInterface::cast::<IUIElement>(self)?;
        unsafe {
            (::windows_core::Interface::vtable(this).InvalidateMeasure)(
                ::windows_core::Interface::as_raw(this),
            )
            .ok()
        }
    }
    pub fn InvalidateArrange(&self) -> ::windows_core::Result<()> {
        let this = &::windows_core::ComInterface::cast::<IUIElement>(self)?;
        unsafe {
            (::windows_core::Interface::vtable(this).InvalidateArrange)(
                ::windows_core::Interface::as_raw(this),
            )
            .ok()
        }
    }
    pub fn UpdateLayout(&self) -> ::windows_core::Result<()> {
        let this = &::windows_core::ComInterface::cast::<IUIElement>(self)?;
        unsafe {
            (::windows_core::Interface::vtable(this).UpdateLayout)(
                ::windows_core::Interface::as_raw(this),
            )
            .ok()
        }
    }
    pub fn CancelDirectManipulations(&self) -> ::windows_core::Result<bool> {
        let this = &::windows_core::ComInterface::cast::<IUIElement>(self)?;
        unsafe {
            let mut result__ = ::std::mem::zeroed();
            (::windows_core::Interface::vtable(this).CancelDirectManipulations)(
                ::windows_core::Interface::as_raw(this),
                &mut result__,
            )
            .from_abi(result__)
        }
    }
    #[doc = "Required features: `\"Microsoft_UI_Input\"`, `\"Windows_ApplicationModel_DataTransfer\"`, `\"Windows_Foundation\"`"]
    #[cfg(all(
        feature = "Microsoft_UI_Input",
        feature = "Windows_ApplicationModel_DataTransfer",
        feature = "Windows_Foundation"
    ))]
    pub fn StartDragAsync<P0>(
        &self,
        pointerpoint: P0,
    ) -> ::windows_core::Result<
        ::windows::Foundation::IAsyncOperation<
            ::windows::ApplicationModel::DataTransfer::DataPackageOperation,
        >,
    >
    where
        P0: ::windows_core::IntoParam<super::Input::PointerPoint>,
    {
        let this = &::windows_core::ComInterface::cast::<IUIElement>(self)?;
        unsafe {
            let mut result__ = ::std::mem::zeroed();
            (::windows_core::Interface::vtable(this).StartDragAsync)(
                ::windows_core::Interface::as_raw(this),
                pointerpoint.into_param().abi(),
                &mut result__,
            )
            .from_abi(result__)
        }
    }
    pub fn StartBringIntoView(&self) -> ::windows_core::Result<()> {
        let this = &::windows_core::ComInterface::cast::<IUIElement>(self)?;
        unsafe {
            (::windows_core::Interface::vtable(this).StartBringIntoView)(
                ::windows_core::Interface::as_raw(this),
            )
            .ok()
        }
    }
    pub fn StartBringIntoViewWithOptions<P0>(&self, options: P0) -> ::windows_core::Result<()>
    where
        P0: ::windows_core::IntoParam<BringIntoViewOptions>,
    {
        let this = &::windows_core::ComInterface::cast::<IUIElement>(self)?;
        unsafe {
            (::windows_core::Interface::vtable(this).StartBringIntoViewWithOptions)(
                ::windows_core::Interface::as_raw(this),
                options.into_param().abi(),
            )
            .ok()
        }
    }
    #[doc = "Required features: `\"Microsoft_UI_Xaml_Input\"`"]
    #[cfg(feature = "Microsoft_UI_Xaml_Input")]
    pub fn TryInvokeKeyboardAccelerator<P0>(&self, args: P0) -> ::windows_core::Result<()>
    where
        P0: ::windows_core::IntoParam<Input::ProcessKeyboardAcceleratorEventArgs>,
    {
        let this = &::windows_core::ComInterface::cast::<IUIElement>(self)?;
        unsafe {
            (::windows_core::Interface::vtable(this).TryInvokeKeyboardAccelerator)(
                ::windows_core::Interface::as_raw(this),
                args.into_param().abi(),
            )
            .ok()
        }
    }
    pub fn Focus(&self, value: FocusState) -> ::windows_core::Result<bool> {
        let this = &::windows_core::ComInterface::cast::<IUIElement>(self)?;
        unsafe {
            let mut result__ = ::std::mem::zeroed();
            (::windows_core::Interface::vtable(this).Focus)(
                ::windows_core::Interface::as_raw(this),
                value,
                &mut result__,
            )
            .from_abi(result__)
        }
    }
    #[doc = "Required features: `\"Microsoft_UI_Composition\"`"]
    #[cfg(feature = "Microsoft_UI_Composition")]
    pub fn StartAnimation<P0>(&self, animation: P0) -> ::windows_core::Result<()>
    where
        P0: ::windows_core::TryIntoParam<super::Composition::ICompositionAnimationBase>,
    {
        let this = &::windows_core::ComInterface::cast::<IUIElement>(self)?;
        unsafe {
            (::windows_core::Interface::vtable(this).StartAnimation)(
                ::windows_core::Interface::as_raw(this),
                animation.try_into_param()?.abi(),
            )
            .ok()
        }
    }
    #[doc = "Required features: `\"Microsoft_UI_Composition\"`"]
    #[cfg(feature = "Microsoft_UI_Composition")]
    pub fn StopAnimation<P0>(&self, animation: P0) -> ::windows_core::Result<()>
    where
        P0: ::windows_core::TryIntoParam<super::Composition::ICompositionAnimationBase>,
    {
        let this = &::windows_core::ComInterface::cast::<IUIElement>(self)?;
        unsafe {
            (::windows_core::Interface::vtable(this).StopAnimation)(
                ::windows_core::Interface::as_raw(this),
                animation.try_into_param()?.abi(),
            )
            .ok()
        }
    }
    #[doc = "Required features: `\"Microsoft_UI_Xaml_Automation_Peers\"`"]
    #[cfg(feature = "Microsoft_UI_Xaml_Automation_Peers")]
    pub fn OnCreateAutomationPeer(
        &self,
    ) -> ::windows_core::Result<Automation::Peers::AutomationPeer> {
        let this = &::windows_core::ComInterface::cast::<IUIElementOverrides>(self)?;
        unsafe {
            let mut result__ = ::std::mem::zeroed();
            (::windows_core::Interface::vtable(this).OnCreateAutomationPeer)(
                ::windows_core::Interface::as_raw(this),
                &mut result__,
            )
            .from_abi(result__)
        }
    }
    pub fn OnDisconnectVisualChildren(&self) -> ::windows_core::Result<()> {
        let this = &::windows_core::ComInterface::cast::<IUIElementOverrides>(self)?;
        unsafe {
            (::windows_core::Interface::vtable(this).OnDisconnectVisualChildren)(
                ::windows_core::Interface::as_raw(this),
            )
            .ok()
        }
    }
    #[doc = "Required features: `\"Windows_Foundation_Collections\"`"]
    #[cfg(feature = "Windows_Foundation_Collections")]
    pub fn FindSubElementsForTouchTargeting(
        &self,
        point: ::windows::Foundation::Point,
        boundingrect: ::windows::Foundation::Rect,
    ) -> ::windows_core::Result<
        ::windows::Foundation::Collections::IIterable<
            ::windows::Foundation::Collections::IIterable<::windows::Foundation::Point>,
        >,
    > {
        let this = &::windows_core::ComInterface::cast::<IUIElementOverrides>(self)?;
        unsafe {
            let mut result__ = ::std::mem::zeroed();
            (::windows_core::Interface::vtable(this).FindSubElementsForTouchTargeting)(
                ::windows_core::Interface::as_raw(this),
                point,
                boundingrect,
                &mut result__,
            )
            .from_abi(result__)
        }
    }
    #[doc = "Required features: `\"Windows_Foundation_Collections\"`"]
    #[cfg(feature = "Windows_Foundation_Collections")]
    pub fn GetChildrenInTabFocusOrder(
        &self,
    ) -> ::windows_core::Result<::windows::Foundation::Collections::IIterable<DependencyObject>>
    {
        let this = &::windows_core::ComInterface::cast::<IUIElementOverrides>(self)?;
        unsafe {
            let mut result__ = ::std::mem::zeroed();
            (::windows_core::Interface::vtable(this).GetChildrenInTabFocusOrder)(
                ::windows_core::Interface::as_raw(this),
                &mut result__,
            )
            .from_abi(result__)
        }
    }
    #[doc = "Required features: `\"Microsoft_UI_Xaml_Input\"`"]
    #[cfg(feature = "Microsoft_UI_Xaml_Input")]
    pub fn OnKeyboardAcceleratorInvoked<P0>(&self, args: P0) -> ::windows_core::Result<()>
    where
        P0: ::windows_core::IntoParam<Input::KeyboardAcceleratorInvokedEventArgs>,
    {
        let this = &::windows_core::ComInterface::cast::<IUIElementOverrides>(self)?;
        unsafe {
            (::windows_core::Interface::vtable(this).OnKeyboardAcceleratorInvoked)(
                ::windows_core::Interface::as_raw(this),
                args.into_param().abi(),
            )
            .ok()
        }
    }
    #[doc = "Required features: `\"Microsoft_UI_Xaml_Input\"`"]
    #[cfg(feature = "Microsoft_UI_Xaml_Input")]
    pub fn OnProcessKeyboardAccelerators<P0>(&self, args: P0) -> ::windows_core::Result<()>
    where
        P0: ::windows_core::IntoParam<Input::ProcessKeyboardAcceleratorEventArgs>,
    {
        let this = &::windows_core::ComInterface::cast::<IUIElementOverrides>(self)?;
        unsafe {
            (::windows_core::Interface::vtable(this).OnProcessKeyboardAccelerators)(
                ::windows_core::Interface::as_raw(this),
                args.into_param().abi(),
            )
            .ok()
        }
    }
    pub fn OnBringIntoViewRequested<P0>(&self, e: P0) -> ::windows_core::Result<()>
    where
        P0: ::windows_core::IntoParam<BringIntoViewRequestedEventArgs>,
    {
        let this = &::windows_core::ComInterface::cast::<IUIElementOverrides>(self)?;
        unsafe {
            (::windows_core::Interface::vtable(this).OnBringIntoViewRequested)(
                ::windows_core::Interface::as_raw(this),
                e.into_param().abi(),
            )
            .ok()
        }
    }
    #[doc = "Required features: `\"Microsoft_UI_Composition\"`"]
    #[cfg(feature = "Microsoft_UI_Composition")]
    pub fn PopulatePropertyInfoOverride<P0>(
        &self,
        propertyname: &::windows_core::HSTRING,
        animationpropertyinfo: P0,
    ) -> ::windows_core::Result<()>
    where
        P0: ::windows_core::IntoParam<super::Composition::AnimationPropertyInfo>,
    {
        let this = &::windows_core::ComInterface::cast::<IUIElementOverrides>(self)?;
        unsafe {
            (::windows_core::Interface::vtable(this).PopulatePropertyInfoOverride)(
                ::windows_core::Interface::as_raw(this),
                ::core::mem::transmute_copy(propertyname),
                animationpropertyinfo.into_param().abi(),
            )
            .ok()
        }
    }
    #[doc = "Required features: `\"Microsoft_UI_Input\"`"]
    #[cfg(feature = "Microsoft_UI_Input")]
    pub fn ProtectedCursor(&self) -> ::windows_core::Result<super::Input::InputCursor> {
        let this = &::windows_core::ComInterface::cast::<IUIElementProtected>(self)?;
        unsafe {
            let mut result__ = ::std::mem::zeroed();
            (::windows_core::Interface::vtable(this).ProtectedCursor)(
                ::windows_core::Interface::as_raw(this),
                &mut result__,
            )
            .from_abi(result__)
        }
    }
    #[doc = "Required features: `\"Microsoft_UI_Input\"`"]
    #[cfg(feature = "Microsoft_UI_Input")]
    pub fn SetProtectedCursor<P0>(&self, value: P0) -> ::windows_core::Result<()>
    where
        P0: ::windows_core::TryIntoParam<super::Input::InputCursor>,
    {
        let this = &::windows_core::ComInterface::cast::<IUIElementProtected>(self)?;
        unsafe {
            (::windows_core::Interface::vtable(this).SetProtectedCursor)(
                ::windows_core::Interface::as_raw(this),
                value.try_into_param()?.abi(),
            )
            .ok()
        }
    }
    #[doc = "Required features: `\"Microsoft_UI_Composition\"`"]
    #[cfg(feature = "Microsoft_UI_Composition")]
    pub fn GetVisualInternal(&self) -> ::windows_core::Result<super::Composition::Visual> {
        let this =
            &::windows_core::ComInterface::cast::<super::Composition::IVisualElement2>(self)?;
        unsafe {
            let mut result__ = ::std::mem::zeroed();
            (::windows_core::Interface::vtable(this).GetVisualInternal)(
                ::windows_core::Interface::as_raw(this),
                &mut result__,
            )
            .from_abi(result__)
        }
    }
    #[doc(hidden)]
    pub fn IFrameworkElementFactory<
        R,
        F: FnOnce(&IFrameworkElementFactory) -> ::windows_core::Result<R>,
    >(
        callback: F,
    ) -> ::windows_core::Result<R> {
        static SHARED: ::windows_core::imp::FactoryCache<
            FrameworkElement,
            IFrameworkElementFactory,
        > = ::windows_core::imp::FactoryCache::new();
        SHARED.call(callback)
    }
    #[doc(hidden)]
    pub fn IFrameworkElementStatics<
        R,
        F: FnOnce(&IFrameworkElementStatics) -> ::windows_core::Result<R>,
    >(
        callback: F,
    ) -> ::windows_core::Result<R> {
        static SHARED: ::windows_core::imp::FactoryCache<
            FrameworkElement,
            IFrameworkElementStatics,
        > = ::windows_core::imp::FactoryCache::new();
        SHARED.call(callback)
    }
}
impl ::windows_core::RuntimeType for FrameworkElement {
    const SIGNATURE: ::windows_core::imp::ConstBuffer =
        ::windows_core::imp::ConstBuffer::for_class::<Self>();
}
unsafe impl ::windows_core::Interface for FrameworkElement {
    type Vtable = IFrameworkElement_Vtbl;
}
unsafe impl ::windows_core::ComInterface for FrameworkElement {
    const IID: ::windows_core::GUID = <IFrameworkElement as ::windows_core::ComInterface>::IID;
}
impl ::windows_core::RuntimeName for FrameworkElement {
    const NAME: &'static str = "Microsoft.UI.Xaml.FrameworkElement";
}
::windows_core::imp::interface_hierarchy!(
    FrameworkElement,
    ::windows_core::IUnknown,
    ::windows_core::IInspectable
);
#[cfg(feature = "Microsoft_UI_Composition")]
impl ::windows_core::CanTryInto<super::Composition::IAnimationObject> for FrameworkElement {}
#[cfg(feature = "Microsoft_UI_Composition")]
impl ::windows_core::CanTryInto<super::Composition::IVisualElement> for FrameworkElement {}
#[cfg(feature = "Microsoft_UI_Composition")]
impl ::windows_core::CanTryInto<super::Composition::IVisualElement2> for FrameworkElement {}
impl ::windows_core::CanTryInto<UIElement> for FrameworkElement {}
impl ::windows_core::CanTryInto<DependencyObject> for FrameworkElement {}
unsafe impl ::core::marker::Send for FrameworkElement {}
unsafe impl ::core::marker::Sync for FrameworkElement {}
#[repr(transparent)]
#[derive(::core::cmp::PartialEq, ::core::cmp::Eq, ::core::fmt::Debug, ::core::clone::Clone)]
pub struct FrameworkTemplate(::windows_core::IUnknown);
impl FrameworkTemplate {
    pub fn GetValue<P0>(&self, dp: P0) -> ::windows_core::Result<::windows_core::IInspectable>
    where
        P0: ::windows_core::IntoParam<DependencyProperty>,
    {
        let this = &::windows_core::ComInterface::cast::<IDependencyObject>(self)?;
        unsafe {
            let mut result__ = ::std::mem::zeroed();
            (::windows_core::Interface::vtable(this).GetValue)(
                ::windows_core::Interface::as_raw(this),
                dp.into_param().abi(),
                &mut result__,
            )
            .from_abi(result__)
        }
    }
    pub fn SetValue<P0, P1>(&self, dp: P0, value: P1) -> ::windows_core::Result<()>
    where
        P0: ::windows_core::IntoParam<DependencyProperty>,
        P1: ::windows_core::IntoParam<::windows_core::IInspectable>,
    {
        let this = &::windows_core::ComInterface::cast::<IDependencyObject>(self)?;
        unsafe {
            (::windows_core::Interface::vtable(this).SetValue)(
                ::windows_core::Interface::as_raw(this),
                dp.into_param().abi(),
                value.into_param().abi(),
            )
            .ok()
        }
    }
    pub fn ClearValue<P0>(&self, dp: P0) -> ::windows_core::Result<()>
    where
        P0: ::windows_core::IntoParam<DependencyProperty>,
    {
        let this = &::windows_core::ComInterface::cast::<IDependencyObject>(self)?;
        unsafe {
            (::windows_core::Interface::vtable(this).ClearValue)(
                ::windows_core::Interface::as_raw(this),
                dp.into_param().abi(),
            )
            .ok()
        }
    }
    pub fn ReadLocalValue<P0>(&self, dp: P0) -> ::windows_core::Result<::windows_core::IInspectable>
    where
        P0: ::windows_core::IntoParam<DependencyProperty>,
    {
        let this = &::windows_core::ComInterface::cast::<IDependencyObject>(self)?;
        unsafe {
            let mut result__ = ::std::mem::zeroed();
            (::windows_core::Interface::vtable(this).ReadLocalValue)(
                ::windows_core::Interface::as_raw(this),
                dp.into_param().abi(),
                &mut result__,
            )
            .from_abi(result__)
        }
    }
    pub fn GetAnimationBaseValue<P0>(
        &self,
        dp: P0,
    ) -> ::windows_core::Result<::windows_core::IInspectable>
    where
        P0: ::windows_core::IntoParam<DependencyProperty>,
    {
        let this = &::windows_core::ComInterface::cast::<IDependencyObject>(self)?;
        unsafe {
            let mut result__ = ::std::mem::zeroed();
            (::windows_core::Interface::vtable(this).GetAnimationBaseValue)(
                ::windows_core::Interface::as_raw(this),
                dp.into_param().abi(),
                &mut result__,
            )
            .from_abi(result__)
        }
    }
    pub fn RegisterPropertyChangedCallback<P0, P1>(
        &self,
        dp: P0,
        callback: P1,
    ) -> ::windows_core::Result<i64>
    where
        P0: ::windows_core::IntoParam<DependencyProperty>,
        P1: ::windows_core::IntoParam<DependencyPropertyChangedCallback>,
    {
        let this = &::windows_core::ComInterface::cast::<IDependencyObject>(self)?;
        unsafe {
            let mut result__ = ::std::mem::zeroed();
            (::windows_core::Interface::vtable(this).RegisterPropertyChangedCallback)(
                ::windows_core::Interface::as_raw(this),
                dp.into_param().abi(),
                callback.into_param().abi(),
                &mut result__,
            )
            .from_abi(result__)
        }
    }
    pub fn UnregisterPropertyChangedCallback<P0>(
        &self,
        dp: P0,
        token: i64,
    ) -> ::windows_core::Result<()>
    where
        P0: ::windows_core::IntoParam<DependencyProperty>,
    {
        let this = &::windows_core::ComInterface::cast::<IDependencyObject>(self)?;
        unsafe {
            (::windows_core::Interface::vtable(this).UnregisterPropertyChangedCallback)(
                ::windows_core::Interface::as_raw(this),
                dp.into_param().abi(),
                token,
            )
            .ok()
        }
    }
    #[doc = "Required features: `\"Windows_UI_Core\"`"]
    #[cfg(feature = "Windows_UI_Core")]
    pub fn Dispatcher(&self) -> ::windows_core::Result<::windows::UI::Core::CoreDispatcher> {
        let this = &::windows_core::ComInterface::cast::<IDependencyObject>(self)?;
        unsafe {
            let mut result__ = ::std::mem::zeroed();
            (::windows_core::Interface::vtable(this).Dispatcher)(
                ::windows_core::Interface::as_raw(this),
                &mut result__,
            )
            .from_abi(result__)
        }
    }
    #[doc = "Required features: `\"Microsoft_UI_Dispatching\"`"]
    #[cfg(feature = "Microsoft_UI_Dispatching")]
    pub fn DispatcherQueue(&self) -> ::windows_core::Result<super::Dispatching::DispatcherQueue> {
        let this = &::windows_core::ComInterface::cast::<IDependencyObject>(self)?;
        unsafe {
            let mut result__ = ::std::mem::zeroed();
            (::windows_core::Interface::vtable(this).DispatcherQueue)(
                ::windows_core::Interface::as_raw(this),
                &mut result__,
            )
            .from_abi(result__)
        }
    }
    pub unsafe fn CreateInstance<P0>(
        baseinterface: P0,
        innerinterface: &mut ::core::option::Option<::windows_core::IInspectable>,
    ) -> ::windows_core::Result<FrameworkTemplate>
    where
        P0: ::windows_core::IntoParam<::windows_core::IInspectable>,
    {
        Self::IFrameworkTemplateFactory(|this| unsafe {
            let mut result__ = ::std::mem::zeroed();
            (::windows_core::Interface::vtable(this).CreateInstance)(
                ::windows_core::Interface::as_raw(this),
                baseinterface.into_param().abi(),
                innerinterface as *mut _ as _,
                &mut result__,
            )
            .from_abi(result__)
        })
    }
    #[doc(hidden)]
    pub fn IFrameworkTemplateFactory<
        R,
        F: FnOnce(&IFrameworkTemplateFactory) -> ::windows_core::Result<R>,
    >(
        callback: F,
    ) -> ::windows_core::Result<R> {
        static SHARED: ::windows_core::imp::FactoryCache<
            FrameworkTemplate,
            IFrameworkTemplateFactory,
        > = ::windows_core::imp::FactoryCache::new();
        SHARED.call(callback)
    }
}
impl ::windows_core::RuntimeType for FrameworkTemplate {
    const SIGNATURE: ::windows_core::imp::ConstBuffer =
        ::windows_core::imp::ConstBuffer::for_class::<Self>();
}
unsafe impl ::windows_core::Interface for FrameworkTemplate {
    type Vtable = IFrameworkTemplate_Vtbl;
}
unsafe impl ::windows_core::ComInterface for FrameworkTemplate {
    const IID: ::windows_core::GUID = <IFrameworkTemplate as ::windows_core::ComInterface>::IID;
}
impl ::windows_core::RuntimeName for FrameworkTemplate {
    const NAME: &'static str = "Microsoft.UI.Xaml.FrameworkTemplate";
}
::windows_core::imp::interface_hierarchy!(
    FrameworkTemplate,
    ::windows_core::IUnknown,
    ::windows_core::IInspectable
);
impl ::windows_core::CanTryInto<DependencyObject> for FrameworkTemplate {}
unsafe impl ::core::marker::Send for FrameworkTemplate {}
unsafe impl ::core::marker::Sync for FrameworkTemplate {}
#[repr(transparent)]
#[derive(::core::cmp::PartialEq, ::core::cmp::Eq, ::core::fmt::Debug, ::core::clone::Clone)]
pub struct FrameworkView(::windows_core::IUnknown);
impl FrameworkView {
    pub fn new() -> ::windows_core::Result<Self> {
        Self::IActivationFactory(|f| f.ActivateInstance::<Self>())
    }
    fn IActivationFactory<
        R,
        F: FnOnce(&::windows_core::imp::IGenericFactory) -> ::windows_core::Result<R>,
    >(
        callback: F,
    ) -> ::windows_core::Result<R> {
        static SHARED: ::windows_core::imp::FactoryCache<
            FrameworkView,
            ::windows_core::imp::IGenericFactory,
        > = ::windows_core::imp::FactoryCache::new();
        SHARED.call(callback)
    }
    #[doc = "Required features: `\"Windows_ApplicationModel_Core\"`"]
    #[cfg(feature = "Windows_ApplicationModel_Core")]
    pub fn Initialize<P0>(&self, applicationview: P0) -> ::windows_core::Result<()>
    where
        P0: ::windows_core::IntoParam<::windows::ApplicationModel::Core::CoreApplicationView>,
    {
        let this = &::windows_core::ComInterface::cast::<
            ::windows::ApplicationModel::Core::IFrameworkView,
        >(self)?;
        unsafe {
            (::windows_core::Interface::vtable(this).Initialize)(
                ::windows_core::Interface::as_raw(this),
                applicationview.into_param().abi(),
            )
            .ok()
        }
    }
    #[doc = "Required features: `\"Windows_ApplicationModel_Core\"`, `\"Windows_UI_Core\"`"]
    #[cfg(all(feature = "Windows_ApplicationModel_Core", feature = "Windows_UI_Core"))]
    pub fn SetWindow<P0>(&self, window: P0) -> ::windows_core::Result<()>
    where
        P0: ::windows_core::IntoParam<::windows::UI::Core::CoreWindow>,
    {
        let this = &::windows_core::ComInterface::cast::<
            ::windows::ApplicationModel::Core::IFrameworkView,
        >(self)?;
        unsafe {
            (::windows_core::Interface::vtable(this).SetWindow)(
                ::windows_core::Interface::as_raw(this),
                window.into_param().abi(),
            )
            .ok()
        }
    }
    #[doc = "Required features: `\"Windows_ApplicationModel_Core\"`"]
    #[cfg(feature = "Windows_ApplicationModel_Core")]
    pub fn Load(&self, entrypoint: &::windows_core::HSTRING) -> ::windows_core::Result<()> {
        let this = &::windows_core::ComInterface::cast::<
            ::windows::ApplicationModel::Core::IFrameworkView,
        >(self)?;
        unsafe {
            (::windows_core::Interface::vtable(this).Load)(
                ::windows_core::Interface::as_raw(this),
                ::core::mem::transmute_copy(entrypoint),
            )
            .ok()
        }
    }
    #[doc = "Required features: `\"Windows_ApplicationModel_Core\"`"]
    #[cfg(feature = "Windows_ApplicationModel_Core")]
    pub fn Run(&self) -> ::windows_core::Result<()> {
        let this = &::windows_core::ComInterface::cast::<
            ::windows::ApplicationModel::Core::IFrameworkView,
        >(self)?;
        unsafe {
            (::windows_core::Interface::vtable(this).Run)(::windows_core::Interface::as_raw(this))
                .ok()
        }
    }
    #[doc = "Required features: `\"Windows_ApplicationModel_Core\"`"]
    #[cfg(feature = "Windows_ApplicationModel_Core")]
    pub fn Uninitialize(&self) -> ::windows_core::Result<()> {
        let this = &::windows_core::ComInterface::cast::<
            ::windows::ApplicationModel::Core::IFrameworkView,
        >(self)?;
        unsafe {
            (::windows_core::Interface::vtable(this).Uninitialize)(
                ::windows_core::Interface::as_raw(this),
            )
            .ok()
        }
    }
}
impl ::windows_core::RuntimeType for FrameworkView {
    const SIGNATURE: ::windows_core::imp::ConstBuffer =
        ::windows_core::imp::ConstBuffer::for_class::<Self>();
}
unsafe impl ::windows_core::Interface for FrameworkView {
    type Vtable = IFrameworkView_Vtbl;
}
unsafe impl ::windows_core::ComInterface for FrameworkView {
    const IID: ::windows_core::GUID = <IFrameworkView as ::windows_core::ComInterface>::IID;
}
impl ::windows_core::RuntimeName for FrameworkView {
    const NAME: &'static str = "Microsoft.UI.Xaml.FrameworkView";
}
::windows_core::imp::interface_hierarchy!(
    FrameworkView,
    ::windows_core::IUnknown,
    ::windows_core::IInspectable
);
#[cfg(feature = "Windows_ApplicationModel_Core")]
impl ::windows_core::CanTryInto<::windows::ApplicationModel::Core::IFrameworkView>
    for FrameworkView
{
}
unsafe impl ::core::marker::Send for FrameworkView {}
unsafe impl ::core::marker::Sync for FrameworkView {}
#[repr(transparent)]
#[derive(::core::cmp::PartialEq, ::core::cmp::Eq, ::core::fmt::Debug, ::core::clone::Clone)]
pub struct FrameworkViewSource(::windows_core::IUnknown);
impl FrameworkViewSource {
    pub fn new() -> ::windows_core::Result<Self> {
        Self::IActivationFactory(|f| f.ActivateInstance::<Self>())
    }
    fn IActivationFactory<
        R,
        F: FnOnce(&::windows_core::imp::IGenericFactory) -> ::windows_core::Result<R>,
    >(
        callback: F,
    ) -> ::windows_core::Result<R> {
        static SHARED: ::windows_core::imp::FactoryCache<
            FrameworkViewSource,
            ::windows_core::imp::IGenericFactory,
        > = ::windows_core::imp::FactoryCache::new();
        SHARED.call(callback)
    }
    #[doc = "Required features: `\"Windows_ApplicationModel_Core\"`"]
    #[cfg(feature = "Windows_ApplicationModel_Core")]
    pub fn CreateView(
        &self,
    ) -> ::windows_core::Result<::windows::ApplicationModel::Core::IFrameworkView> {
        let this = &::windows_core::ComInterface::cast::<
            ::windows::ApplicationModel::Core::IFrameworkViewSource,
        >(self)?;
        unsafe {
            let mut result__ = ::std::mem::zeroed();
            (::windows_core::Interface::vtable(this).CreateView)(
                ::windows_core::Interface::as_raw(this),
                &mut result__,
            )
            .from_abi(result__)
        }
    }
}
impl ::windows_core::RuntimeType for FrameworkViewSource {
    const SIGNATURE: ::windows_core::imp::ConstBuffer =
        ::windows_core::imp::ConstBuffer::for_class::<Self>();
}
unsafe impl ::windows_core::Interface for FrameworkViewSource {
    type Vtable = IFrameworkViewSource_Vtbl;
}
unsafe impl ::windows_core::ComInterface for FrameworkViewSource {
    const IID: ::windows_core::GUID = <IFrameworkViewSource as ::windows_core::ComInterface>::IID;
}
impl ::windows_core::RuntimeName for FrameworkViewSource {
    const NAME: &'static str = "Microsoft.UI.Xaml.FrameworkViewSource";
}
::windows_core::imp::interface_hierarchy!(
    FrameworkViewSource,
    ::windows_core::IUnknown,
    ::windows_core::IInspectable
);
#[cfg(feature = "Windows_ApplicationModel_Core")]
impl ::windows_core::CanTryInto<::windows::ApplicationModel::Core::IFrameworkViewSource>
    for FrameworkViewSource
{
}
unsafe impl ::core::marker::Send for FrameworkViewSource {}
unsafe impl ::core::marker::Sync for FrameworkViewSource {}
#[repr(transparent)]
#[derive(::core::cmp::PartialEq, ::core::cmp::Eq, ::core::fmt::Debug, ::core::clone::Clone)]
pub struct GridLengthHelper(::windows_core::IUnknown);
impl GridLengthHelper {
    pub fn Auto() -> ::windows_core::Result<GridLength> {
        Self::IGridLengthHelperStatics(|this| unsafe {
            let mut result__ = ::std::mem::zeroed();
            (::windows_core::Interface::vtable(this).Auto)(
                ::windows_core::Interface::as_raw(this),
                &mut result__,
            )
            .from_abi(result__)
        })
    }
    pub fn FromPixels(pixels: f64) -> ::windows_core::Result<GridLength> {
        Self::IGridLengthHelperStatics(|this| unsafe {
            let mut result__ = ::std::mem::zeroed();
            (::windows_core::Interface::vtable(this).FromPixels)(
                ::windows_core::Interface::as_raw(this),
                pixels,
                &mut result__,
            )
            .from_abi(result__)
        })
    }
    pub fn FromValueAndType(
        value: f64,
        r#type: GridUnitType,
    ) -> ::windows_core::Result<GridLength> {
        Self::IGridLengthHelperStatics(|this| unsafe {
            let mut result__ = ::std::mem::zeroed();
            (::windows_core::Interface::vtable(this).FromValueAndType)(
                ::windows_core::Interface::as_raw(this),
                value,
                r#type,
                &mut result__,
            )
            .from_abi(result__)
        })
    }
    pub fn GetIsAbsolute(target: GridLength) -> ::windows_core::Result<bool> {
        Self::IGridLengthHelperStatics(|this| unsafe {
            let mut result__ = ::std::mem::zeroed();
            (::windows_core::Interface::vtable(this).GetIsAbsolute)(
                ::windows_core::Interface::as_raw(this),
                target,
                &mut result__,
            )
            .from_abi(result__)
        })
    }
    pub fn GetIsAuto(target: GridLength) -> ::windows_core::Result<bool> {
        Self::IGridLengthHelperStatics(|this| unsafe {
            let mut result__ = ::std::mem::zeroed();
            (::windows_core::Interface::vtable(this).GetIsAuto)(
                ::windows_core::Interface::as_raw(this),
                target,
                &mut result__,
            )
            .from_abi(result__)
        })
    }
    pub fn GetIsStar(target: GridLength) -> ::windows_core::Result<bool> {
        Self::IGridLengthHelperStatics(|this| unsafe {
            let mut result__ = ::std::mem::zeroed();
            (::windows_core::Interface::vtable(this).GetIsStar)(
                ::windows_core::Interface::as_raw(this),
                target,
                &mut result__,
            )
            .from_abi(result__)
        })
    }
    pub fn Equals(target: GridLength, value: GridLength) -> ::windows_core::Result<bool> {
        Self::IGridLengthHelperStatics(|this| unsafe {
            let mut result__ = ::std::mem::zeroed();
            (::windows_core::Interface::vtable(this).Equals)(
                ::windows_core::Interface::as_raw(this),
                target,
                value,
                &mut result__,
            )
            .from_abi(result__)
        })
    }
    #[doc(hidden)]
    pub fn IGridLengthHelperStatics<
        R,
        F: FnOnce(&IGridLengthHelperStatics) -> ::windows_core::Result<R>,
    >(
        callback: F,
    ) -> ::windows_core::Result<R> {
        static SHARED: ::windows_core::imp::FactoryCache<
            GridLengthHelper,
            IGridLengthHelperStatics,
        > = ::windows_core::imp::FactoryCache::new();
        SHARED.call(callback)
    }
}
impl ::windows_core::RuntimeType for GridLengthHelper {
    const SIGNATURE: ::windows_core::imp::ConstBuffer =
        ::windows_core::imp::ConstBuffer::for_class::<Self>();
}
unsafe impl ::windows_core::Interface for GridLengthHelper {
    type Vtable = IGridLengthHelper_Vtbl;
}
unsafe impl ::windows_core::ComInterface for GridLengthHelper {
    const IID: ::windows_core::GUID = <IGridLengthHelper as ::windows_core::ComInterface>::IID;
}
impl ::windows_core::RuntimeName for GridLengthHelper {
    const NAME: &'static str = "Microsoft.UI.Xaml.GridLengthHelper";
}
::windows_core::imp::interface_hierarchy!(
    GridLengthHelper,
    ::windows_core::IUnknown,
    ::windows_core::IInspectable
);
unsafe impl ::core::marker::Send for GridLengthHelper {}
unsafe impl ::core::marker::Sync for GridLengthHelper {}
#[repr(transparent)]
#[derive(::core::cmp::PartialEq, ::core::cmp::Eq, ::core::fmt::Debug, ::core::clone::Clone)]
pub struct LaunchActivatedEventArgs(::windows_core::IUnknown);
impl LaunchActivatedEventArgs {
    pub fn Arguments(&self) -> ::windows_core::Result<::windows_core::HSTRING> {
        let this = self;
        unsafe {
            let mut result__ = ::std::mem::zeroed();
            (::windows_core::Interface::vtable(this).Arguments)(
                ::windows_core::Interface::as_raw(this),
                &mut result__,
            )
            .from_abi(result__)
        }
    }
    #[doc = "Required features: `\"Windows_ApplicationModel_Activation\"`"]
    #[cfg(feature = "Windows_ApplicationModel_Activation")]
    pub fn UWPLaunchActivatedEventArgs(
        &self,
    ) -> ::windows_core::Result<::windows::ApplicationModel::Activation::LaunchActivatedEventArgs>
    {
        let this = self;
        unsafe {
            let mut result__ = ::std::mem::zeroed();
            (::windows_core::Interface::vtable(this).UWPLaunchActivatedEventArgs)(
                ::windows_core::Interface::as_raw(this),
                &mut result__,
            )
            .from_abi(result__)
        }
    }
}
impl ::windows_core::RuntimeType for LaunchActivatedEventArgs {
    const SIGNATURE: ::windows_core::imp::ConstBuffer =
        ::windows_core::imp::ConstBuffer::for_class::<Self>();
}
unsafe impl ::windows_core::Interface for LaunchActivatedEventArgs {
    type Vtable = ILaunchActivatedEventArgs_Vtbl;
}
unsafe impl ::windows_core::ComInterface for LaunchActivatedEventArgs {
    const IID: ::windows_core::GUID =
        <ILaunchActivatedEventArgs as ::windows_core::ComInterface>::IID;
}
impl ::windows_core::RuntimeName for LaunchActivatedEventArgs {
    const NAME: &'static str = "Microsoft.UI.Xaml.LaunchActivatedEventArgs";
}
::windows_core::imp::interface_hierarchy!(
    LaunchActivatedEventArgs,
    ::windows_core::IUnknown,
    ::windows_core::IInspectable
);
unsafe impl ::core::marker::Send for LaunchActivatedEventArgs {}
unsafe impl ::core::marker::Sync for LaunchActivatedEventArgs {}
#[repr(transparent)]
#[derive(::core::cmp::PartialEq, ::core::cmp::Eq, ::core::fmt::Debug, ::core::clone::Clone)]
pub struct MediaFailedRoutedEventArgs(::windows_core::IUnknown);
impl MediaFailedRoutedEventArgs {
    pub fn ErrorMessage(&self) -> ::windows_core::Result<::windows_core::HSTRING> {
        let this = &::windows_core::ComInterface::cast::<IExceptionRoutedEventArgs>(self)?;
        unsafe {
            let mut result__ = ::std::mem::zeroed();
            (::windows_core::Interface::vtable(this).ErrorMessage)(
                ::windows_core::Interface::as_raw(this),
                &mut result__,
            )
            .from_abi(result__)
        }
    }
    pub fn ErrorTrace(&self) -> ::windows_core::Result<::windows_core::HSTRING> {
        let this = self;
        unsafe {
            let mut result__ = ::std::mem::zeroed();
            (::windows_core::Interface::vtable(this).ErrorTrace)(
                ::windows_core::Interface::as_raw(this),
                &mut result__,
            )
            .from_abi(result__)
        }
    }
    pub fn OriginalSource(&self) -> ::windows_core::Result<::windows_core::IInspectable> {
        let this = &::windows_core::ComInterface::cast::<IRoutedEventArgs>(self)?;
        unsafe {
            let mut result__ = ::std::mem::zeroed();
            (::windows_core::Interface::vtable(this).OriginalSource)(
                ::windows_core::Interface::as_raw(this),
                &mut result__,
            )
            .from_abi(result__)
        }
    }
}
impl ::windows_core::RuntimeType for MediaFailedRoutedEventArgs {
    const SIGNATURE: ::windows_core::imp::ConstBuffer =
        ::windows_core::imp::ConstBuffer::for_class::<Self>();
}
unsafe impl ::windows_core::Interface for MediaFailedRoutedEventArgs {
    type Vtable = IMediaFailedRoutedEventArgs_Vtbl;
}
unsafe impl ::windows_core::ComInterface for MediaFailedRoutedEventArgs {
    const IID: ::windows_core::GUID =
        <IMediaFailedRoutedEventArgs as ::windows_core::ComInterface>::IID;
}
impl ::windows_core::RuntimeName for MediaFailedRoutedEventArgs {
    const NAME: &'static str = "Microsoft.UI.Xaml.MediaFailedRoutedEventArgs";
}
::windows_core::imp::interface_hierarchy!(
    MediaFailedRoutedEventArgs,
    ::windows_core::IUnknown,
    ::windows_core::IInspectable
);
impl ::windows_core::CanTryInto<ExceptionRoutedEventArgs> for MediaFailedRoutedEventArgs {}
impl ::windows_core::CanTryInto<RoutedEventArgs> for MediaFailedRoutedEventArgs {}
unsafe impl ::core::marker::Send for MediaFailedRoutedEventArgs {}
unsafe impl ::core::marker::Sync for MediaFailedRoutedEventArgs {}
#[repr(transparent)]
#[derive(::core::cmp::PartialEq, ::core::cmp::Eq, ::core::fmt::Debug, ::core::clone::Clone)]
pub struct PointHelper(::windows_core::IUnknown);
impl PointHelper {
    #[doc = "Required features: `\"Windows_Foundation\"`"]
    #[cfg(feature = "Windows_Foundation")]
    pub fn FromCoordinates(x: f32, y: f32) -> ::windows_core::Result<::windows::Foundation::Point> {
        Self::IPointHelperStatics(|this| unsafe {
            let mut result__ = ::std::mem::zeroed();
            (::windows_core::Interface::vtable(this).FromCoordinates)(
                ::windows_core::Interface::as_raw(this),
                x,
                y,
                &mut result__,
            )
            .from_abi(result__)
        })
    }
    #[doc(hidden)]
    pub fn IPointHelperStatics<R, F: FnOnce(&IPointHelperStatics) -> ::windows_core::Result<R>>(
        callback: F,
    ) -> ::windows_core::Result<R> {
        static SHARED: ::windows_core::imp::FactoryCache<PointHelper, IPointHelperStatics> =
            ::windows_core::imp::FactoryCache::new();
        SHARED.call(callback)
    }
}
impl ::windows_core::RuntimeType for PointHelper {
    const SIGNATURE: ::windows_core::imp::ConstBuffer =
        ::windows_core::imp::ConstBuffer::for_class::<Self>();
}
unsafe impl ::windows_core::Interface for PointHelper {
    type Vtable = IPointHelper_Vtbl;
}
unsafe impl ::windows_core::ComInterface for PointHelper {
    const IID: ::windows_core::GUID = <IPointHelper as ::windows_core::ComInterface>::IID;
}
impl ::windows_core::RuntimeName for PointHelper {
    const NAME: &'static str = "Microsoft.UI.Xaml.PointHelper";
}
::windows_core::imp::interface_hierarchy!(
    PointHelper,
    ::windows_core::IUnknown,
    ::windows_core::IInspectable
);
unsafe impl ::core::marker::Send for PointHelper {}
unsafe impl ::core::marker::Sync for PointHelper {}
#[repr(transparent)]
#[derive(::core::cmp::PartialEq, ::core::cmp::Eq, ::core::fmt::Debug, ::core::clone::Clone)]
pub struct PropertyMetadata(::windows_core::IUnknown);
impl PropertyMetadata {
    pub fn DefaultValue(&self) -> ::windows_core::Result<::windows_core::IInspectable> {
        let this = self;
        unsafe {
            let mut result__ = ::std::mem::zeroed();
            (::windows_core::Interface::vtable(this).DefaultValue)(
                ::windows_core::Interface::as_raw(this),
                &mut result__,
            )
            .from_abi(result__)
        }
    }
    pub fn CreateDefaultValueCallback(&self) -> ::windows_core::Result<CreateDefaultValueCallback> {
        let this = self;
        unsafe {
            let mut result__ = ::std::mem::zeroed();
            (::windows_core::Interface::vtable(this).CreateDefaultValueCallback)(
                ::windows_core::Interface::as_raw(this),
                &mut result__,
            )
            .from_abi(result__)
        }
    }
    pub unsafe fn CreateInstanceWithDefaultValue<P0, P1>(
        defaultvalue: P0,
        baseinterface: P1,
        innerinterface: &mut ::core::option::Option<::windows_core::IInspectable>,
    ) -> ::windows_core::Result<PropertyMetadata>
    where
        P0: ::windows_core::IntoParam<::windows_core::IInspectable>,
        P1: ::windows_core::IntoParam<::windows_core::IInspectable>,
    {
        Self::IPropertyMetadataFactory(|this| unsafe {
            let mut result__ = ::std::mem::zeroed();
            (::windows_core::Interface::vtable(this).CreateInstanceWithDefaultValue)(
                ::windows_core::Interface::as_raw(this),
                defaultvalue.into_param().abi(),
                baseinterface.into_param().abi(),
                innerinterface as *mut _ as _,
                &mut result__,
            )
            .from_abi(result__)
        })
    }
    pub unsafe fn CreateInstanceWithDefaultValueAndCallback<P0, P1, P2>(
        defaultvalue: P0,
        propertychangedcallback: P1,
        baseinterface: P2,
        innerinterface: &mut ::core::option::Option<::windows_core::IInspectable>,
    ) -> ::windows_core::Result<PropertyMetadata>
    where
        P0: ::windows_core::IntoParam<::windows_core::IInspectable>,
        P1: ::windows_core::IntoParam<PropertyChangedCallback>,
        P2: ::windows_core::IntoParam<::windows_core::IInspectable>,
    {
        Self::IPropertyMetadataFactory(|this| unsafe {
            let mut result__ = ::std::mem::zeroed();
            (::windows_core::Interface::vtable(this).CreateInstanceWithDefaultValueAndCallback)(
                ::windows_core::Interface::as_raw(this),
                defaultvalue.into_param().abi(),
                propertychangedcallback.into_param().abi(),
                baseinterface.into_param().abi(),
                innerinterface as *mut _ as _,
                &mut result__,
            )
            .from_abi(result__)
        })
    }
    pub fn CreateWithDefaultValue<P0>(defaultvalue: P0) -> ::windows_core::Result<PropertyMetadata>
    where
        P0: ::windows_core::IntoParam<::windows_core::IInspectable>,
    {
        Self::IPropertyMetadataStatics(|this| unsafe {
            let mut result__ = ::std::mem::zeroed();
            (::windows_core::Interface::vtable(this).CreateWithDefaultValue)(
                ::windows_core::Interface::as_raw(this),
                defaultvalue.into_param().abi(),
                &mut result__,
            )
            .from_abi(result__)
        })
    }
    pub fn CreateWithDefaultValueAndCallback<P0, P1>(
        defaultvalue: P0,
        propertychangedcallback: P1,
    ) -> ::windows_core::Result<PropertyMetadata>
    where
        P0: ::windows_core::IntoParam<::windows_core::IInspectable>,
        P1: ::windows_core::IntoParam<PropertyChangedCallback>,
    {
        Self::IPropertyMetadataStatics(|this| unsafe {
            let mut result__ = ::std::mem::zeroed();
            (::windows_core::Interface::vtable(this).CreateWithDefaultValueAndCallback)(
                ::windows_core::Interface::as_raw(this),
                defaultvalue.into_param().abi(),
                propertychangedcallback.into_param().abi(),
                &mut result__,
            )
            .from_abi(result__)
        })
    }
    pub fn CreateWithFactory<P0>(
        createdefaultvaluecallback: P0,
    ) -> ::windows_core::Result<PropertyMetadata>
    where
        P0: ::windows_core::IntoParam<CreateDefaultValueCallback>,
    {
        Self::IPropertyMetadataStatics(|this| unsafe {
            let mut result__ = ::std::mem::zeroed();
            (::windows_core::Interface::vtable(this).CreateWithFactory)(
                ::windows_core::Interface::as_raw(this),
                createdefaultvaluecallback.into_param().abi(),
                &mut result__,
            )
            .from_abi(result__)
        })
    }
    pub fn CreateWithFactoryAndCallback<P0, P1>(
        createdefaultvaluecallback: P0,
        propertychangedcallback: P1,
    ) -> ::windows_core::Result<PropertyMetadata>
    where
        P0: ::windows_core::IntoParam<CreateDefaultValueCallback>,
        P1: ::windows_core::IntoParam<PropertyChangedCallback>,
    {
        Self::IPropertyMetadataStatics(|this| unsafe {
            let mut result__ = ::std::mem::zeroed();
            (::windows_core::Interface::vtable(this).CreateWithFactoryAndCallback)(
                ::windows_core::Interface::as_raw(this),
                createdefaultvaluecallback.into_param().abi(),
                propertychangedcallback.into_param().abi(),
                &mut result__,
            )
            .from_abi(result__)
        })
    }
    #[doc(hidden)]
    pub fn IPropertyMetadataFactory<
        R,
        F: FnOnce(&IPropertyMetadataFactory) -> ::windows_core::Result<R>,
    >(
        callback: F,
    ) -> ::windows_core::Result<R> {
        static SHARED: ::windows_core::imp::FactoryCache<
            PropertyMetadata,
            IPropertyMetadataFactory,
        > = ::windows_core::imp::FactoryCache::new();
        SHARED.call(callback)
    }
    #[doc(hidden)]
    pub fn IPropertyMetadataStatics<
        R,
        F: FnOnce(&IPropertyMetadataStatics) -> ::windows_core::Result<R>,
    >(
        callback: F,
    ) -> ::windows_core::Result<R> {
        static SHARED: ::windows_core::imp::FactoryCache<
            PropertyMetadata,
            IPropertyMetadataStatics,
        > = ::windows_core::imp::FactoryCache::new();
        SHARED.call(callback)
    }
}
impl ::windows_core::RuntimeType for PropertyMetadata {
    const SIGNATURE: ::windows_core::imp::ConstBuffer =
        ::windows_core::imp::ConstBuffer::for_class::<Self>();
}
unsafe impl ::windows_core::Interface for PropertyMetadata {
    type Vtable = IPropertyMetadata_Vtbl;
}
unsafe impl ::windows_core::ComInterface for PropertyMetadata {
    const IID: ::windows_core::GUID = <IPropertyMetadata as ::windows_core::ComInterface>::IID;
}
impl ::windows_core::RuntimeName for PropertyMetadata {
    const NAME: &'static str = "Microsoft.UI.Xaml.PropertyMetadata";
}
::windows_core::imp::interface_hierarchy!(
    PropertyMetadata,
    ::windows_core::IUnknown,
    ::windows_core::IInspectable
);
unsafe impl ::core::marker::Send for PropertyMetadata {}
unsafe impl ::core::marker::Sync for PropertyMetadata {}
#[repr(transparent)]
#[derive(::core::cmp::PartialEq, ::core::cmp::Eq, ::core::fmt::Debug, ::core::clone::Clone)]
pub struct PropertyPath(::windows_core::IUnknown);
impl PropertyPath {
    pub fn GetValue<P0>(&self, dp: P0) -> ::windows_core::Result<::windows_core::IInspectable>
    where
        P0: ::windows_core::IntoParam<DependencyProperty>,
    {
        let this = &::windows_core::ComInterface::cast::<IDependencyObject>(self)?;
        unsafe {
            let mut result__ = ::std::mem::zeroed();
            (::windows_core::Interface::vtable(this).GetValue)(
                ::windows_core::Interface::as_raw(this),
                dp.into_param().abi(),
                &mut result__,
            )
            .from_abi(result__)
        }
    }
    pub fn SetValue<P0, P1>(&self, dp: P0, value: P1) -> ::windows_core::Result<()>
    where
        P0: ::windows_core::IntoParam<DependencyProperty>,
        P1: ::windows_core::IntoParam<::windows_core::IInspectable>,
    {
        let this = &::windows_core::ComInterface::cast::<IDependencyObject>(self)?;
        unsafe {
            (::windows_core::Interface::vtable(this).SetValue)(
                ::windows_core::Interface::as_raw(this),
                dp.into_param().abi(),
                value.into_param().abi(),
            )
            .ok()
        }
    }
    pub fn ClearValue<P0>(&self, dp: P0) -> ::windows_core::Result<()>
    where
        P0: ::windows_core::IntoParam<DependencyProperty>,
    {
        let this = &::windows_core::ComInterface::cast::<IDependencyObject>(self)?;
        unsafe {
            (::windows_core::Interface::vtable(this).ClearValue)(
                ::windows_core::Interface::as_raw(this),
                dp.into_param().abi(),
            )
            .ok()
        }
    }
    pub fn ReadLocalValue<P0>(&self, dp: P0) -> ::windows_core::Result<::windows_core::IInspectable>
    where
        P0: ::windows_core::IntoParam<DependencyProperty>,
    {
        let this = &::windows_core::ComInterface::cast::<IDependencyObject>(self)?;
        unsafe {
            let mut result__ = ::std::mem::zeroed();
            (::windows_core::Interface::vtable(this).ReadLocalValue)(
                ::windows_core::Interface::as_raw(this),
                dp.into_param().abi(),
                &mut result__,
            )
            .from_abi(result__)
        }
    }
    pub fn GetAnimationBaseValue<P0>(
        &self,
        dp: P0,
    ) -> ::windows_core::Result<::windows_core::IInspectable>
    where
        P0: ::windows_core::IntoParam<DependencyProperty>,
    {
        let this = &::windows_core::ComInterface::cast::<IDependencyObject>(self)?;
        unsafe {
            let mut result__ = ::std::mem::zeroed();
            (::windows_core::Interface::vtable(this).GetAnimationBaseValue)(
                ::windows_core::Interface::as_raw(this),
                dp.into_param().abi(),
                &mut result__,
            )
            .from_abi(result__)
        }
    }
    pub fn RegisterPropertyChangedCallback<P0, P1>(
        &self,
        dp: P0,
        callback: P1,
    ) -> ::windows_core::Result<i64>
    where
        P0: ::windows_core::IntoParam<DependencyProperty>,
        P1: ::windows_core::IntoParam<DependencyPropertyChangedCallback>,
    {
        let this = &::windows_core::ComInterface::cast::<IDependencyObject>(self)?;
        unsafe {
            let mut result__ = ::std::mem::zeroed();
            (::windows_core::Interface::vtable(this).RegisterPropertyChangedCallback)(
                ::windows_core::Interface::as_raw(this),
                dp.into_param().abi(),
                callback.into_param().abi(),
                &mut result__,
            )
            .from_abi(result__)
        }
    }
    pub fn UnregisterPropertyChangedCallback<P0>(
        &self,
        dp: P0,
        token: i64,
    ) -> ::windows_core::Result<()>
    where
        P0: ::windows_core::IntoParam<DependencyProperty>,
    {
        let this = &::windows_core::ComInterface::cast::<IDependencyObject>(self)?;
        unsafe {
            (::windows_core::Interface::vtable(this).UnregisterPropertyChangedCallback)(
                ::windows_core::Interface::as_raw(this),
                dp.into_param().abi(),
                token,
            )
            .ok()
        }
    }
    #[doc = "Required features: `\"Windows_UI_Core\"`"]
    #[cfg(feature = "Windows_UI_Core")]
    pub fn Dispatcher(&self) -> ::windows_core::Result<::windows::UI::Core::CoreDispatcher> {
        let this = &::windows_core::ComInterface::cast::<IDependencyObject>(self)?;
        unsafe {
            let mut result__ = ::std::mem::zeroed();
            (::windows_core::Interface::vtable(this).Dispatcher)(
                ::windows_core::Interface::as_raw(this),
                &mut result__,
            )
            .from_abi(result__)
        }
    }
    #[doc = "Required features: `\"Microsoft_UI_Dispatching\"`"]
    #[cfg(feature = "Microsoft_UI_Dispatching")]
    pub fn DispatcherQueue(&self) -> ::windows_core::Result<super::Dispatching::DispatcherQueue> {
        let this = &::windows_core::ComInterface::cast::<IDependencyObject>(self)?;
        unsafe {
            let mut result__ = ::std::mem::zeroed();
            (::windows_core::Interface::vtable(this).DispatcherQueue)(
                ::windows_core::Interface::as_raw(this),
                &mut result__,
            )
            .from_abi(result__)
        }
    }
    pub fn Path(&self) -> ::windows_core::Result<::windows_core::HSTRING> {
        let this = self;
        unsafe {
            let mut result__ = ::std::mem::zeroed();
            (::windows_core::Interface::vtable(this).Path)(
                ::windows_core::Interface::as_raw(this),
                &mut result__,
            )
            .from_abi(result__)
        }
    }
    pub fn CreateInstance(path: &::windows_core::HSTRING) -> ::windows_core::Result<PropertyPath> {
        Self::IPropertyPathFactory(|this| unsafe {
            let mut result__ = ::std::mem::zeroed();
            (::windows_core::Interface::vtable(this).CreateInstance)(
                ::windows_core::Interface::as_raw(this),
                ::core::mem::transmute_copy(path),
                &mut result__,
            )
            .from_abi(result__)
        })
    }
    #[doc(hidden)]
    pub fn IPropertyPathFactory<
        R,
        F: FnOnce(&IPropertyPathFactory) -> ::windows_core::Result<R>,
    >(
        callback: F,
    ) -> ::windows_core::Result<R> {
        static SHARED: ::windows_core::imp::FactoryCache<PropertyPath, IPropertyPathFactory> =
            ::windows_core::imp::FactoryCache::new();
        SHARED.call(callback)
    }
}
impl ::windows_core::RuntimeType for PropertyPath {
    const SIGNATURE: ::windows_core::imp::ConstBuffer =
        ::windows_core::imp::ConstBuffer::for_class::<Self>();
}
unsafe impl ::windows_core::Interface for PropertyPath {
    type Vtable = IPropertyPath_Vtbl;
}
unsafe impl ::windows_core::ComInterface for PropertyPath {
    const IID: ::windows_core::GUID = <IPropertyPath as ::windows_core::ComInterface>::IID;
}
impl ::windows_core::RuntimeName for PropertyPath {
    const NAME: &'static str = "Microsoft.UI.Xaml.PropertyPath";
}
::windows_core::imp::interface_hierarchy!(
    PropertyPath,
    ::windows_core::IUnknown,
    ::windows_core::IInspectable
);
impl ::windows_core::CanTryInto<DependencyObject> for PropertyPath {}
unsafe impl ::core::marker::Send for PropertyPath {}
unsafe impl ::core::marker::Sync for PropertyPath {}
#[repr(transparent)]
#[derive(::core::cmp::PartialEq, ::core::cmp::Eq, ::core::fmt::Debug, ::core::clone::Clone)]
pub struct RectHelper(::windows_core::IUnknown);
impl RectHelper {
    #[doc = "Required features: `\"Windows_Foundation\"`"]
    #[cfg(feature = "Windows_Foundation")]
    pub fn Empty() -> ::windows_core::Result<::windows::Foundation::Rect> {
        Self::IRectHelperStatics(|this| unsafe {
            let mut result__ = ::std::mem::zeroed();
            (::windows_core::Interface::vtable(this).Empty)(
                ::windows_core::Interface::as_raw(this),
                &mut result__,
            )
            .from_abi(result__)
        })
    }
    #[doc = "Required features: `\"Windows_Foundation\"`"]
    #[cfg(feature = "Windows_Foundation")]
    pub fn FromCoordinatesAndDimensions(
        x: f32,
        y: f32,
        width: f32,
        height: f32,
    ) -> ::windows_core::Result<::windows::Foundation::Rect> {
        Self::IRectHelperStatics(|this| unsafe {
            let mut result__ = ::std::mem::zeroed();
            (::windows_core::Interface::vtable(this).FromCoordinatesAndDimensions)(
                ::windows_core::Interface::as_raw(this),
                x,
                y,
                width,
                height,
                &mut result__,
            )
            .from_abi(result__)
        })
    }
    #[doc = "Required features: `\"Windows_Foundation\"`"]
    #[cfg(feature = "Windows_Foundation")]
    pub fn FromPoints(
        point1: ::windows::Foundation::Point,
        point2: ::windows::Foundation::Point,
    ) -> ::windows_core::Result<::windows::Foundation::Rect> {
        Self::IRectHelperStatics(|this| unsafe {
            let mut result__ = ::std::mem::zeroed();
            (::windows_core::Interface::vtable(this).FromPoints)(
                ::windows_core::Interface::as_raw(this),
                point1,
                point2,
                &mut result__,
            )
            .from_abi(result__)
        })
    }
    #[doc = "Required features: `\"Windows_Foundation\"`"]
    #[cfg(feature = "Windows_Foundation")]
    pub fn FromLocationAndSize(
        location: ::windows::Foundation::Point,
        size: ::windows::Foundation::Size,
    ) -> ::windows_core::Result<::windows::Foundation::Rect> {
        Self::IRectHelperStatics(|this| unsafe {
            let mut result__ = ::std::mem::zeroed();
            (::windows_core::Interface::vtable(this).FromLocationAndSize)(
                ::windows_core::Interface::as_raw(this),
                location,
                size,
                &mut result__,
            )
            .from_abi(result__)
        })
    }
    #[doc = "Required features: `\"Windows_Foundation\"`"]
    #[cfg(feature = "Windows_Foundation")]
    pub fn GetIsEmpty(target: ::windows::Foundation::Rect) -> ::windows_core::Result<bool> {
        Self::IRectHelperStatics(|this| unsafe {
            let mut result__ = ::std::mem::zeroed();
            (::windows_core::Interface::vtable(this).GetIsEmpty)(
                ::windows_core::Interface::as_raw(this),
                target,
                &mut result__,
            )
            .from_abi(result__)
        })
    }
    #[doc = "Required features: `\"Windows_Foundation\"`"]
    #[cfg(feature = "Windows_Foundation")]
    pub fn GetBottom(target: ::windows::Foundation::Rect) -> ::windows_core::Result<f32> {
        Self::IRectHelperStatics(|this| unsafe {
            let mut result__ = ::std::mem::zeroed();
            (::windows_core::Interface::vtable(this).GetBottom)(
                ::windows_core::Interface::as_raw(this),
                target,
                &mut result__,
            )
            .from_abi(result__)
        })
    }
    #[doc = "Required features: `\"Windows_Foundation\"`"]
    #[cfg(feature = "Windows_Foundation")]
    pub fn GetLeft(target: ::windows::Foundation::Rect) -> ::windows_core::Result<f32> {
        Self::IRectHelperStatics(|this| unsafe {
            let mut result__ = ::std::mem::zeroed();
            (::windows_core::Interface::vtable(this).GetLeft)(
                ::windows_core::Interface::as_raw(this),
                target,
                &mut result__,
            )
            .from_abi(result__)
        })
    }
    #[doc = "Required features: `\"Windows_Foundation\"`"]
    #[cfg(feature = "Windows_Foundation")]
    pub fn GetRight(target: ::windows::Foundation::Rect) -> ::windows_core::Result<f32> {
        Self::IRectHelperStatics(|this| unsafe {
            let mut result__ = ::std::mem::zeroed();
            (::windows_core::Interface::vtable(this).GetRight)(
                ::windows_core::Interface::as_raw(this),
                target,
                &mut result__,
            )
            .from_abi(result__)
        })
    }
    #[doc = "Required features: `\"Windows_Foundation\"`"]
    #[cfg(feature = "Windows_Foundation")]
    pub fn GetTop(target: ::windows::Foundation::Rect) -> ::windows_core::Result<f32> {
        Self::IRectHelperStatics(|this| unsafe {
            let mut result__ = ::std::mem::zeroed();
            (::windows_core::Interface::vtable(this).GetTop)(
                ::windows_core::Interface::as_raw(this),
                target,
                &mut result__,
            )
            .from_abi(result__)
        })
    }
    #[doc = "Required features: `\"Windows_Foundation\"`"]
    #[cfg(feature = "Windows_Foundation")]
    pub fn Contains(
        target: ::windows::Foundation::Rect,
        point: ::windows::Foundation::Point,
    ) -> ::windows_core::Result<bool> {
        Self::IRectHelperStatics(|this| unsafe {
            let mut result__ = ::std::mem::zeroed();
            (::windows_core::Interface::vtable(this).Contains)(
                ::windows_core::Interface::as_raw(this),
                target,
                point,
                &mut result__,
            )
            .from_abi(result__)
        })
    }
    #[doc = "Required features: `\"Windows_Foundation\"`"]
    #[cfg(feature = "Windows_Foundation")]
    pub fn Equals(
        target: ::windows::Foundation::Rect,
        value: ::windows::Foundation::Rect,
    ) -> ::windows_core::Result<bool> {
        Self::IRectHelperStatics(|this| unsafe {
            let mut result__ = ::std::mem::zeroed();
            (::windows_core::Interface::vtable(this).Equals)(
                ::windows_core::Interface::as_raw(this),
                target,
                value,
                &mut result__,
            )
            .from_abi(result__)
        })
    }
    #[doc = "Required features: `\"Windows_Foundation\"`"]
    #[cfg(feature = "Windows_Foundation")]
    pub fn Intersect(
        target: ::windows::Foundation::Rect,
        rect: ::windows::Foundation::Rect,
    ) -> ::windows_core::Result<::windows::Foundation::Rect> {
        Self::IRectHelperStatics(|this| unsafe {
            let mut result__ = ::std::mem::zeroed();
            (::windows_core::Interface::vtable(this).Intersect)(
                ::windows_core::Interface::as_raw(this),
                target,
                rect,
                &mut result__,
            )
            .from_abi(result__)
        })
    }
    #[doc = "Required features: `\"Windows_Foundation\"`"]
    #[cfg(feature = "Windows_Foundation")]
    pub fn UnionWithPoint(
        target: ::windows::Foundation::Rect,
        point: ::windows::Foundation::Point,
    ) -> ::windows_core::Result<::windows::Foundation::Rect> {
        Self::IRectHelperStatics(|this| unsafe {
            let mut result__ = ::std::mem::zeroed();
            (::windows_core::Interface::vtable(this).UnionWithPoint)(
                ::windows_core::Interface::as_raw(this),
                target,
                point,
                &mut result__,
            )
            .from_abi(result__)
        })
    }
    #[doc = "Required features: `\"Windows_Foundation\"`"]
    #[cfg(feature = "Windows_Foundation")]
    pub fn UnionWithRect(
        target: ::windows::Foundation::Rect,
        rect: ::windows::Foundation::Rect,
    ) -> ::windows_core::Result<::windows::Foundation::Rect> {
        Self::IRectHelperStatics(|this| unsafe {
            let mut result__ = ::std::mem::zeroed();
            (::windows_core::Interface::vtable(this).UnionWithRect)(
                ::windows_core::Interface::as_raw(this),
                target,
                rect,
                &mut result__,
            )
            .from_abi(result__)
        })
    }
    #[doc(hidden)]
    pub fn IRectHelperStatics<R, F: FnOnce(&IRectHelperStatics) -> ::windows_core::Result<R>>(
        callback: F,
    ) -> ::windows_core::Result<R> {
        static SHARED: ::windows_core::imp::FactoryCache<RectHelper, IRectHelperStatics> =
            ::windows_core::imp::FactoryCache::new();
        SHARED.call(callback)
    }
}
impl ::windows_core::RuntimeType for RectHelper {
    const SIGNATURE: ::windows_core::imp::ConstBuffer =
        ::windows_core::imp::ConstBuffer::for_class::<Self>();
}
unsafe impl ::windows_core::Interface for RectHelper {
    type Vtable = IRectHelper_Vtbl;
}
unsafe impl ::windows_core::ComInterface for RectHelper {
    const IID: ::windows_core::GUID = <IRectHelper as ::windows_core::ComInterface>::IID;
}
impl ::windows_core::RuntimeName for RectHelper {
    const NAME: &'static str = "Microsoft.UI.Xaml.RectHelper";
}
::windows_core::imp::interface_hierarchy!(
    RectHelper,
    ::windows_core::IUnknown,
    ::windows_core::IInspectable
);
unsafe impl ::core::marker::Send for RectHelper {}
unsafe impl ::core::marker::Sync for RectHelper {}
#[repr(transparent)]
#[derive(::core::cmp::PartialEq, ::core::cmp::Eq, ::core::fmt::Debug, ::core::clone::Clone)]
pub struct ResourceDictionary(::windows_core::IUnknown);
impl ResourceDictionary {
    pub fn GetValue<P0>(&self, dp: P0) -> ::windows_core::Result<::windows_core::IInspectable>
    where
        P0: ::windows_core::IntoParam<DependencyProperty>,
    {
        let this = &::windows_core::ComInterface::cast::<IDependencyObject>(self)?;
        unsafe {
            let mut result__ = ::std::mem::zeroed();
            (::windows_core::Interface::vtable(this).GetValue)(
                ::windows_core::Interface::as_raw(this),
                dp.into_param().abi(),
                &mut result__,
            )
            .from_abi(result__)
        }
    }
    pub fn SetValue<P0, P1>(&self, dp: P0, value: P1) -> ::windows_core::Result<()>
    where
        P0: ::windows_core::IntoParam<DependencyProperty>,
        P1: ::windows_core::IntoParam<::windows_core::IInspectable>,
    {
        let this = &::windows_core::ComInterface::cast::<IDependencyObject>(self)?;
        unsafe {
            (::windows_core::Interface::vtable(this).SetValue)(
                ::windows_core::Interface::as_raw(this),
                dp.into_param().abi(),
                value.into_param().abi(),
            )
            .ok()
        }
    }
    pub fn ClearValue<P0>(&self, dp: P0) -> ::windows_core::Result<()>
    where
        P0: ::windows_core::IntoParam<DependencyProperty>,
    {
        let this = &::windows_core::ComInterface::cast::<IDependencyObject>(self)?;
        unsafe {
            (::windows_core::Interface::vtable(this).ClearValue)(
                ::windows_core::Interface::as_raw(this),
                dp.into_param().abi(),
            )
            .ok()
        }
    }
    pub fn ReadLocalValue<P0>(&self, dp: P0) -> ::windows_core::Result<::windows_core::IInspectable>
    where
        P0: ::windows_core::IntoParam<DependencyProperty>,
    {
        let this = &::windows_core::ComInterface::cast::<IDependencyObject>(self)?;
        unsafe {
            let mut result__ = ::std::mem::zeroed();
            (::windows_core::Interface::vtable(this).ReadLocalValue)(
                ::windows_core::Interface::as_raw(this),
                dp.into_param().abi(),
                &mut result__,
            )
            .from_abi(result__)
        }
    }
    pub fn GetAnimationBaseValue<P0>(
        &self,
        dp: P0,
    ) -> ::windows_core::Result<::windows_core::IInspectable>
    where
        P0: ::windows_core::IntoParam<DependencyProperty>,
    {
        let this = &::windows_core::ComInterface::cast::<IDependencyObject>(self)?;
        unsafe {
            let mut result__ = ::std::mem::zeroed();
            (::windows_core::Interface::vtable(this).GetAnimationBaseValue)(
                ::windows_core::Interface::as_raw(this),
                dp.into_param().abi(),
                &mut result__,
            )
            .from_abi(result__)
        }
    }
    pub fn RegisterPropertyChangedCallback<P0, P1>(
        &self,
        dp: P0,
        callback: P1,
    ) -> ::windows_core::Result<i64>
    where
        P0: ::windows_core::IntoParam<DependencyProperty>,
        P1: ::windows_core::IntoParam<DependencyPropertyChangedCallback>,
    {
        let this = &::windows_core::ComInterface::cast::<IDependencyObject>(self)?;
        unsafe {
            let mut result__ = ::std::mem::zeroed();
            (::windows_core::Interface::vtable(this).RegisterPropertyChangedCallback)(
                ::windows_core::Interface::as_raw(this),
                dp.into_param().abi(),
                callback.into_param().abi(),
                &mut result__,
            )
            .from_abi(result__)
        }
    }
    pub fn UnregisterPropertyChangedCallback<P0>(
        &self,
        dp: P0,
        token: i64,
    ) -> ::windows_core::Result<()>
    where
        P0: ::windows_core::IntoParam<DependencyProperty>,
    {
        let this = &::windows_core::ComInterface::cast::<IDependencyObject>(self)?;
        unsafe {
            (::windows_core::Interface::vtable(this).UnregisterPropertyChangedCallback)(
                ::windows_core::Interface::as_raw(this),
                dp.into_param().abi(),
                token,
            )
            .ok()
        }
    }
    #[doc = "Required features: `\"Windows_UI_Core\"`"]
    #[cfg(feature = "Windows_UI_Core")]
    pub fn Dispatcher(&self) -> ::windows_core::Result<::windows::UI::Core::CoreDispatcher> {
        let this = &::windows_core::ComInterface::cast::<IDependencyObject>(self)?;
        unsafe {
            let mut result__ = ::std::mem::zeroed();
            (::windows_core::Interface::vtable(this).Dispatcher)(
                ::windows_core::Interface::as_raw(this),
                &mut result__,
            )
            .from_abi(result__)
        }
    }
    #[doc = "Required features: `\"Microsoft_UI_Dispatching\"`"]
    #[cfg(feature = "Microsoft_UI_Dispatching")]
    pub fn DispatcherQueue(&self) -> ::windows_core::Result<super::Dispatching::DispatcherQueue> {
        let this = &::windows_core::ComInterface::cast::<IDependencyObject>(self)?;
        unsafe {
            let mut result__ = ::std::mem::zeroed();
            (::windows_core::Interface::vtable(this).DispatcherQueue)(
                ::windows_core::Interface::as_raw(this),
                &mut result__,
            )
            .from_abi(result__)
        }
    }
    #[doc = "Required features: `\"Windows_Foundation_Collections\"`"]
    #[cfg(feature = "Windows_Foundation_Collections")]
    pub fn First(
        &self,
    ) -> ::windows_core::Result<
        ::windows::Foundation::Collections::IIterator<
            ::windows::Foundation::Collections::IKeyValuePair<
                ::windows_core::IInspectable,
                ::windows_core::IInspectable,
            >,
        >,
    > {
        let this = &::windows_core::ComInterface::cast::<
            ::windows::Foundation::Collections::IIterable<
                ::windows::Foundation::Collections::IKeyValuePair<
                    ::windows_core::IInspectable,
                    ::windows_core::IInspectable,
                >,
            >,
        >(self)?;
        unsafe {
            let mut result__ = ::std::mem::zeroed();
            (::windows_core::Interface::vtable(this).First)(
                ::windows_core::Interface::as_raw(this),
                &mut result__,
            )
            .from_abi(result__)
        }
    }
    #[doc = "Required features: `\"Windows_Foundation_Collections\"`"]
    #[cfg(feature = "Windows_Foundation_Collections")]
    pub fn Lookup<P0>(&self, key: P0) -> ::windows_core::Result<::windows_core::IInspectable>
    where
        P0: ::windows_core::IntoParam<::windows_core::IInspectable>,
    {
        let this = &::windows_core::ComInterface::cast::<
            ::windows::Foundation::Collections::IMap<
                ::windows_core::IInspectable,
                ::windows_core::IInspectable,
            >,
        >(self)?;
        unsafe {
            let mut result__ = ::std::mem::zeroed();
            (::windows_core::Interface::vtable(this).Lookup)(
                ::windows_core::Interface::as_raw(this),
                key.into_param().abi(),
                &mut result__,
            )
            .from_abi(result__)
        }
    }
    #[doc = "Required features: `\"Windows_Foundation_Collections\"`"]
    #[cfg(feature = "Windows_Foundation_Collections")]
    pub fn Size(&self) -> ::windows_core::Result<u32> {
        let this = &::windows_core::ComInterface::cast::<
            ::windows::Foundation::Collections::IMap<
                ::windows_core::IInspectable,
                ::windows_core::IInspectable,
            >,
        >(self)?;
        unsafe {
            let mut result__ = ::std::mem::zeroed();
            (::windows_core::Interface::vtable(this).Size)(
                ::windows_core::Interface::as_raw(this),
                &mut result__,
            )
            .from_abi(result__)
        }
    }
    #[doc = "Required features: `\"Windows_Foundation_Collections\"`"]
    #[cfg(feature = "Windows_Foundation_Collections")]
    pub fn HasKey<P0>(&self, key: P0) -> ::windows_core::Result<bool>
    where
        P0: ::windows_core::IntoParam<::windows_core::IInspectable>,
    {
        let this = &::windows_core::ComInterface::cast::<
            ::windows::Foundation::Collections::IMap<
                ::windows_core::IInspectable,
                ::windows_core::IInspectable,
            >,
        >(self)?;
        unsafe {
            let mut result__ = ::std::mem::zeroed();
            (::windows_core::Interface::vtable(this).HasKey)(
                ::windows_core::Interface::as_raw(this),
                key.into_param().abi(),
                &mut result__,
            )
            .from_abi(result__)
        }
    }
    #[doc = "Required features: `\"Windows_Foundation_Collections\"`"]
    #[cfg(feature = "Windows_Foundation_Collections")]
    pub fn GetView(
        &self,
    ) -> ::windows_core::Result<
        ::windows::Foundation::Collections::IMapView<
            ::windows_core::IInspectable,
            ::windows_core::IInspectable,
        >,
    > {
        let this = &::windows_core::ComInterface::cast::<
            ::windows::Foundation::Collections::IMap<
                ::windows_core::IInspectable,
                ::windows_core::IInspectable,
            >,
        >(self)?;
        unsafe {
            let mut result__ = ::std::mem::zeroed();
            (::windows_core::Interface::vtable(this).GetView)(
                ::windows_core::Interface::as_raw(this),
                &mut result__,
            )
            .from_abi(result__)
        }
    }
    #[doc = "Required features: `\"Windows_Foundation_Collections\"`"]
    #[cfg(feature = "Windows_Foundation_Collections")]
    pub fn Insert<P0, P1>(&self, key: P0, value: P1) -> ::windows_core::Result<bool>
    where
        P0: ::windows_core::IntoParam<::windows_core::IInspectable>,
        P1: ::windows_core::IntoParam<::windows_core::IInspectable>,
    {
        let this = &::windows_core::ComInterface::cast::<
            ::windows::Foundation::Collections::IMap<
                ::windows_core::IInspectable,
                ::windows_core::IInspectable,
            >,
        >(self)?;
        unsafe {
            let mut result__ = ::std::mem::zeroed();
            (::windows_core::Interface::vtable(this).Insert)(
                ::windows_core::Interface::as_raw(this),
                key.into_param().abi(),
                value.into_param().abi(),
                &mut result__,
            )
            .from_abi(result__)
        }
    }
    #[doc = "Required features: `\"Windows_Foundation_Collections\"`"]
    #[cfg(feature = "Windows_Foundation_Collections")]
    pub fn Remove<P0>(&self, key: P0) -> ::windows_core::Result<()>
    where
        P0: ::windows_core::IntoParam<::windows_core::IInspectable>,
    {
        let this = &::windows_core::ComInterface::cast::<
            ::windows::Foundation::Collections::IMap<
                ::windows_core::IInspectable,
                ::windows_core::IInspectable,
            >,
        >(self)?;
        unsafe {
            (::windows_core::Interface::vtable(this).Remove)(
                ::windows_core::Interface::as_raw(this),
                key.into_param().abi(),
            )
            .ok()
        }
    }
    #[doc = "Required features: `\"Windows_Foundation_Collections\"`"]
    #[cfg(feature = "Windows_Foundation_Collections")]
    pub fn Clear(&self) -> ::windows_core::Result<()> {
        let this = &::windows_core::ComInterface::cast::<
            ::windows::Foundation::Collections::IMap<
                ::windows_core::IInspectable,
                ::windows_core::IInspectable,
            >,
        >(self)?;
        unsafe {
            (::windows_core::Interface::vtable(this).Clear)(::windows_core::Interface::as_raw(this))
                .ok()
        }
    }
    #[doc = "Required features: `\"Windows_Foundation\"`"]
    #[cfg(feature = "Windows_Foundation")]
    pub fn Source(&self) -> ::windows_core::Result<::windows::Foundation::Uri> {
        let this = self;
        unsafe {
            let mut result__ = ::std::mem::zeroed();
            (::windows_core::Interface::vtable(this).Source)(
                ::windows_core::Interface::as_raw(this),
                &mut result__,
            )
            .from_abi(result__)
        }
    }
    #[doc = "Required features: `\"Windows_Foundation\"`"]
    #[cfg(feature = "Windows_Foundation")]
    pub fn SetSource<P0>(&self, value: P0) -> ::windows_core::Result<()>
    where
        P0: ::windows_core::IntoParam<::windows::Foundation::Uri>,
    {
        let this = self;
        unsafe {
            (::windows_core::Interface::vtable(this).SetSource)(
                ::windows_core::Interface::as_raw(this),
                value.into_param().abi(),
            )
            .ok()
        }
    }
    #[doc = "Required features: `\"Windows_Foundation_Collections\"`"]
    #[cfg(feature = "Windows_Foundation_Collections")]
    pub fn MergedDictionaries(
        &self,
    ) -> ::windows_core::Result<::windows::Foundation::Collections::IVector<ResourceDictionary>>
    {
        let this = self;
        unsafe {
            let mut result__ = ::std::mem::zeroed();
            (::windows_core::Interface::vtable(this).MergedDictionaries)(
                ::windows_core::Interface::as_raw(this),
                &mut result__,
            )
            .from_abi(result__)
        }
    }
    #[doc = "Required features: `\"Windows_Foundation_Collections\"`"]
    #[cfg(feature = "Windows_Foundation_Collections")]
    pub fn ThemeDictionaries(
        &self,
    ) -> ::windows_core::Result<
        ::windows::Foundation::Collections::IMap<
            ::windows_core::IInspectable,
            ::windows_core::IInspectable,
        >,
    > {
        let this = self;
        unsafe {
            let mut result__ = ::std::mem::zeroed();
            (::windows_core::Interface::vtable(this).ThemeDictionaries)(
                ::windows_core::Interface::as_raw(this),
                &mut result__,
            )
            .from_abi(result__)
        }
    }
    pub unsafe fn CreateInstance<P0>(
        baseinterface: P0,
        innerinterface: &mut ::core::option::Option<::windows_core::IInspectable>,
    ) -> ::windows_core::Result<ResourceDictionary>
    where
        P0: ::windows_core::IntoParam<::windows_core::IInspectable>,
    {
        Self::IResourceDictionaryFactory(|this| unsafe {
            let mut result__ = ::std::mem::zeroed();
            (::windows_core::Interface::vtable(this).CreateInstance)(
                ::windows_core::Interface::as_raw(this),
                baseinterface.into_param().abi(),
                innerinterface as *mut _ as _,
                &mut result__,
            )
            .from_abi(result__)
        })
    }
    #[doc(hidden)]
    pub fn IResourceDictionaryFactory<
        R,
        F: FnOnce(&IResourceDictionaryFactory) -> ::windows_core::Result<R>,
    >(
        callback: F,
    ) -> ::windows_core::Result<R> {
        static SHARED: ::windows_core::imp::FactoryCache<
            ResourceDictionary,
            IResourceDictionaryFactory,
        > = ::windows_core::imp::FactoryCache::new();
        SHARED.call(callback)
    }
}
impl ::windows_core::RuntimeType for ResourceDictionary {
    const SIGNATURE: ::windows_core::imp::ConstBuffer =
        ::windows_core::imp::ConstBuffer::for_class::<Self>();
}
unsafe impl ::windows_core::Interface for ResourceDictionary {
    type Vtable = IResourceDictionary_Vtbl;
}
unsafe impl ::windows_core::ComInterface for ResourceDictionary {
    const IID: ::windows_core::GUID = <IResourceDictionary as ::windows_core::ComInterface>::IID;
}
impl ::windows_core::RuntimeName for ResourceDictionary {
    const NAME: &'static str = "Microsoft.UI.Xaml.ResourceDictionary";
}
#[cfg(feature = "Windows_Foundation_Collections")]
impl ::core::iter::IntoIterator for ResourceDictionary {
    type Item = ::windows::Foundation::Collections::IKeyValuePair<
        ::windows_core::IInspectable,
        ::windows_core::IInspectable,
    >;
    type IntoIter = ::windows::Foundation::Collections::IIterator<Self::Item>;
    fn into_iter(self) -> Self::IntoIter {
        ::core::iter::IntoIterator::into_iter(&self)
    }
}
#[cfg(feature = "Windows_Foundation_Collections")]
impl ::core::iter::IntoIterator for &ResourceDictionary {
    type Item = ::windows::Foundation::Collections::IKeyValuePair<
        ::windows_core::IInspectable,
        ::windows_core::IInspectable,
    >;
    type IntoIter = ::windows::Foundation::Collections::IIterator<Self::Item>;
    fn into_iter(self) -> Self::IntoIter {
        self.First().unwrap()
    }
}
::windows_core::imp::interface_hierarchy!(
    ResourceDictionary,
    ::windows_core::IUnknown,
    ::windows_core::IInspectable
);
#[cfg(feature = "Windows_Foundation_Collections")]
impl
    ::windows_core::CanTryInto<
        ::windows::Foundation::Collections::IIterable<
            ::windows::Foundation::Collections::IKeyValuePair<
                ::windows_core::IInspectable,
                ::windows_core::IInspectable,
            >,
        >,
    > for ResourceDictionary
{
}
#[cfg(feature = "Windows_Foundation_Collections")]
impl
    ::windows_core::CanTryInto<
        ::windows::Foundation::Collections::IMap<
            ::windows_core::IInspectable,
            ::windows_core::IInspectable,
        >,
    > for ResourceDictionary
{
}
impl ::windows_core::CanTryInto<DependencyObject> for ResourceDictionary {}
unsafe impl ::core::marker::Send for ResourceDictionary {}
unsafe impl ::core::marker::Sync for ResourceDictionary {}
#[repr(transparent)]
#[derive(::core::cmp::PartialEq, ::core::cmp::Eq, ::core::fmt::Debug, ::core::clone::Clone)]
pub struct ResourceManagerRequestedEventArgs(::windows_core::IUnknown);
impl ResourceManagerRequestedEventArgs {
    #[doc = "Required features: `\"Microsoft_Windows_ApplicationModel_Resources\"`"]
    #[cfg(feature = "Microsoft_Windows_ApplicationModel_Resources")]
    pub fn CustomResourceManager(
        &self,
    ) -> ::windows_core::Result<super::super::Windows::ApplicationModel::Resources::IResourceManager>
    {
        let this = self;
        unsafe {
            let mut result__ = ::std::mem::zeroed();
            (::windows_core::Interface::vtable(this).CustomResourceManager)(
                ::windows_core::Interface::as_raw(this),
                &mut result__,
            )
            .from_abi(result__)
        }
    }
    #[doc = "Required features: `\"Microsoft_Windows_ApplicationModel_Resources\"`"]
    #[cfg(feature = "Microsoft_Windows_ApplicationModel_Resources")]
    pub fn SetCustomResourceManager<P0>(&self, value: P0) -> ::windows_core::Result<()>
    where
        P0: ::windows_core::TryIntoParam<
            super::super::Windows::ApplicationModel::Resources::IResourceManager,
        >,
    {
        let this = self;
        unsafe {
            (::windows_core::Interface::vtable(this).SetCustomResourceManager)(
                ::windows_core::Interface::as_raw(this),
                value.try_into_param()?.abi(),
            )
            .ok()
        }
    }
}
impl ::windows_core::RuntimeType for ResourceManagerRequestedEventArgs {
    const SIGNATURE: ::windows_core::imp::ConstBuffer =
        ::windows_core::imp::ConstBuffer::for_class::<Self>();
}
unsafe impl ::windows_core::Interface for ResourceManagerRequestedEventArgs {
    type Vtable = IResourceManagerRequestedEventArgs_Vtbl;
}
unsafe impl ::windows_core::ComInterface for ResourceManagerRequestedEventArgs {
    const IID: ::windows_core::GUID =
        <IResourceManagerRequestedEventArgs as ::windows_core::ComInterface>::IID;
}
impl ::windows_core::RuntimeName for ResourceManagerRequestedEventArgs {
    const NAME: &'static str = "Microsoft.UI.Xaml.ResourceManagerRequestedEventArgs";
}
::windows_core::imp::interface_hierarchy!(
    ResourceManagerRequestedEventArgs,
    ::windows_core::IUnknown,
    ::windows_core::IInspectable
);
unsafe impl ::core::marker::Send for ResourceManagerRequestedEventArgs {}
unsafe impl ::core::marker::Sync for ResourceManagerRequestedEventArgs {}
#[repr(transparent)]
#[derive(::core::cmp::PartialEq, ::core::cmp::Eq, ::core::fmt::Debug, ::core::clone::Clone)]
pub struct RoutedEvent(::windows_core::IUnknown);
impl RoutedEvent {}
impl ::windows_core::RuntimeType for RoutedEvent {
    const SIGNATURE: ::windows_core::imp::ConstBuffer =
        ::windows_core::imp::ConstBuffer::for_class::<Self>();
}
unsafe impl ::windows_core::Interface for RoutedEvent {
    type Vtable = IRoutedEvent_Vtbl;
}
unsafe impl ::windows_core::ComInterface for RoutedEvent {
    const IID: ::windows_core::GUID = <IRoutedEvent as ::windows_core::ComInterface>::IID;
}
impl ::windows_core::RuntimeName for RoutedEvent {
    const NAME: &'static str = "Microsoft.UI.Xaml.RoutedEvent";
}
::windows_core::imp::interface_hierarchy!(
    RoutedEvent,
    ::windows_core::IUnknown,
    ::windows_core::IInspectable
);
unsafe impl ::core::marker::Send for RoutedEvent {}
unsafe impl ::core::marker::Sync for RoutedEvent {}
#[repr(transparent)]
#[derive(::core::cmp::PartialEq, ::core::cmp::Eq, ::core::fmt::Debug, ::core::clone::Clone)]
pub struct RoutedEventArgs(::windows_core::IUnknown);
impl RoutedEventArgs {
    pub fn OriginalSource(&self) -> ::windows_core::Result<::windows_core::IInspectable> {
        let this = self;
        unsafe {
            let mut result__ = ::std::mem::zeroed();
            (::windows_core::Interface::vtable(this).OriginalSource)(
                ::windows_core::Interface::as_raw(this),
                &mut result__,
            )
            .from_abi(result__)
        }
    }
    pub unsafe fn CreateInstance<P0>(
        baseinterface: P0,
        innerinterface: &mut ::core::option::Option<::windows_core::IInspectable>,
    ) -> ::windows_core::Result<RoutedEventArgs>
    where
        P0: ::windows_core::IntoParam<::windows_core::IInspectable>,
    {
        Self::IRoutedEventArgsFactory(|this| unsafe {
            let mut result__ = ::std::mem::zeroed();
            (::windows_core::Interface::vtable(this).CreateInstance)(
                ::windows_core::Interface::as_raw(this),
                baseinterface.into_param().abi(),
                innerinterface as *mut _ as _,
                &mut result__,
            )
            .from_abi(result__)
        })
    }
    #[doc(hidden)]
    pub fn IRoutedEventArgsFactory<
        R,
        F: FnOnce(&IRoutedEventArgsFactory) -> ::windows_core::Result<R>,
    >(
        callback: F,
    ) -> ::windows_core::Result<R> {
        static SHARED: ::windows_core::imp::FactoryCache<RoutedEventArgs, IRoutedEventArgsFactory> =
            ::windows_core::imp::FactoryCache::new();
        SHARED.call(callback)
    }
}
impl ::windows_core::RuntimeType for RoutedEventArgs {
    const SIGNATURE: ::windows_core::imp::ConstBuffer =
        ::windows_core::imp::ConstBuffer::for_class::<Self>();
}
unsafe impl ::windows_core::Interface for RoutedEventArgs {
    type Vtable = IRoutedEventArgs_Vtbl;
}
unsafe impl ::windows_core::ComInterface for RoutedEventArgs {
    const IID: ::windows_core::GUID = <IRoutedEventArgs as ::windows_core::ComInterface>::IID;
}
impl ::windows_core::RuntimeName for RoutedEventArgs {
    const NAME: &'static str = "Microsoft.UI.Xaml.RoutedEventArgs";
}
::windows_core::imp::interface_hierarchy!(
    RoutedEventArgs,
    ::windows_core::IUnknown,
    ::windows_core::IInspectable
);
unsafe impl ::core::marker::Send for RoutedEventArgs {}
unsafe impl ::core::marker::Sync for RoutedEventArgs {}
#[repr(transparent)]
#[derive(::core::cmp::PartialEq, ::core::cmp::Eq, ::core::fmt::Debug, ::core::clone::Clone)]
pub struct ScalarTransition(::windows_core::IUnknown);
impl ScalarTransition {
    #[doc = "Required features: `\"Windows_Foundation\"`"]
    #[cfg(feature = "Windows_Foundation")]
    pub fn Duration(&self) -> ::windows_core::Result<::windows::Foundation::TimeSpan> {
        let this = self;
        unsafe {
            let mut result__ = ::std::mem::zeroed();
            (::windows_core::Interface::vtable(this).Duration)(
                ::windows_core::Interface::as_raw(this),
                &mut result__,
            )
            .from_abi(result__)
        }
    }
    #[doc = "Required features: `\"Windows_Foundation\"`"]
    #[cfg(feature = "Windows_Foundation")]
    pub fn SetDuration(
        &self,
        value: ::windows::Foundation::TimeSpan,
    ) -> ::windows_core::Result<()> {
        let this = self;
        unsafe {
            (::windows_core::Interface::vtable(this).SetDuration)(
                ::windows_core::Interface::as_raw(this),
                value,
            )
            .ok()
        }
    }
    pub unsafe fn CreateInstance<P0>(
        baseinterface: P0,
        innerinterface: &mut ::core::option::Option<::windows_core::IInspectable>,
    ) -> ::windows_core::Result<ScalarTransition>
    where
        P0: ::windows_core::IntoParam<::windows_core::IInspectable>,
    {
        Self::IScalarTransitionFactory(|this| unsafe {
            let mut result__ = ::std::mem::zeroed();
            (::windows_core::Interface::vtable(this).CreateInstance)(
                ::windows_core::Interface::as_raw(this),
                baseinterface.into_param().abi(),
                innerinterface as *mut _ as _,
                &mut result__,
            )
            .from_abi(result__)
        })
    }
    #[doc(hidden)]
    pub fn IScalarTransitionFactory<
        R,
        F: FnOnce(&IScalarTransitionFactory) -> ::windows_core::Result<R>,
    >(
        callback: F,
    ) -> ::windows_core::Result<R> {
        static SHARED: ::windows_core::imp::FactoryCache<
            ScalarTransition,
            IScalarTransitionFactory,
        > = ::windows_core::imp::FactoryCache::new();
        SHARED.call(callback)
    }
}
impl ::windows_core::RuntimeType for ScalarTransition {
    const SIGNATURE: ::windows_core::imp::ConstBuffer =
        ::windows_core::imp::ConstBuffer::for_class::<Self>();
}
unsafe impl ::windows_core::Interface for ScalarTransition {
    type Vtable = IScalarTransition_Vtbl;
}
unsafe impl ::windows_core::ComInterface for ScalarTransition {
    const IID: ::windows_core::GUID = <IScalarTransition as ::windows_core::ComInterface>::IID;
}
impl ::windows_core::RuntimeName for ScalarTransition {
    const NAME: &'static str = "Microsoft.UI.Xaml.ScalarTransition";
}
::windows_core::imp::interface_hierarchy!(
    ScalarTransition,
    ::windows_core::IUnknown,
    ::windows_core::IInspectable
);
unsafe impl ::core::marker::Send for ScalarTransition {}
unsafe impl ::core::marker::Sync for ScalarTransition {}
#[repr(transparent)]
#[derive(::core::cmp::PartialEq, ::core::cmp::Eq, ::core::fmt::Debug, ::core::clone::Clone)]
pub struct Setter(::windows_core::IUnknown);
impl Setter {
    pub fn new() -> ::windows_core::Result<Self> {
        Self::IActivationFactory(|f| f.ActivateInstance::<Self>())
    }
    fn IActivationFactory<
        R,
        F: FnOnce(&::windows_core::imp::IGenericFactory) -> ::windows_core::Result<R>,
    >(
        callback: F,
    ) -> ::windows_core::Result<R> {
        static SHARED: ::windows_core::imp::FactoryCache<
            Setter,
            ::windows_core::imp::IGenericFactory,
        > = ::windows_core::imp::FactoryCache::new();
        SHARED.call(callback)
    }
    pub fn GetValue<P0>(&self, dp: P0) -> ::windows_core::Result<::windows_core::IInspectable>
    where
        P0: ::windows_core::IntoParam<DependencyProperty>,
    {
        let this = &::windows_core::ComInterface::cast::<IDependencyObject>(self)?;
        unsafe {
            let mut result__ = ::std::mem::zeroed();
            (::windows_core::Interface::vtable(this).GetValue)(
                ::windows_core::Interface::as_raw(this),
                dp.into_param().abi(),
                &mut result__,
            )
            .from_abi(result__)
        }
    }
    pub fn SetValue<P0, P1>(&self, dp: P0, value: P1) -> ::windows_core::Result<()>
    where
        P0: ::windows_core::IntoParam<DependencyProperty>,
        P1: ::windows_core::IntoParam<::windows_core::IInspectable>,
    {
        let this = &::windows_core::ComInterface::cast::<IDependencyObject>(self)?;
        unsafe {
            (::windows_core::Interface::vtable(this).SetValue)(
                ::windows_core::Interface::as_raw(this),
                dp.into_param().abi(),
                value.into_param().abi(),
            )
            .ok()
        }
    }
    pub fn ClearValue<P0>(&self, dp: P0) -> ::windows_core::Result<()>
    where
        P0: ::windows_core::IntoParam<DependencyProperty>,
    {
        let this = &::windows_core::ComInterface::cast::<IDependencyObject>(self)?;
        unsafe {
            (::windows_core::Interface::vtable(this).ClearValue)(
                ::windows_core::Interface::as_raw(this),
                dp.into_param().abi(),
            )
            .ok()
        }
    }
    pub fn ReadLocalValue<P0>(&self, dp: P0) -> ::windows_core::Result<::windows_core::IInspectable>
    where
        P0: ::windows_core::IntoParam<DependencyProperty>,
    {
        let this = &::windows_core::ComInterface::cast::<IDependencyObject>(self)?;
        unsafe {
            let mut result__ = ::std::mem::zeroed();
            (::windows_core::Interface::vtable(this).ReadLocalValue)(
                ::windows_core::Interface::as_raw(this),
                dp.into_param().abi(),
                &mut result__,
            )
            .from_abi(result__)
        }
    }
    pub fn GetAnimationBaseValue<P0>(
        &self,
        dp: P0,
    ) -> ::windows_core::Result<::windows_core::IInspectable>
    where
        P0: ::windows_core::IntoParam<DependencyProperty>,
    {
        let this = &::windows_core::ComInterface::cast::<IDependencyObject>(self)?;
        unsafe {
            let mut result__ = ::std::mem::zeroed();
            (::windows_core::Interface::vtable(this).GetAnimationBaseValue)(
                ::windows_core::Interface::as_raw(this),
                dp.into_param().abi(),
                &mut result__,
            )
            .from_abi(result__)
        }
    }
    pub fn RegisterPropertyChangedCallback<P0, P1>(
        &self,
        dp: P0,
        callback: P1,
    ) -> ::windows_core::Result<i64>
    where
        P0: ::windows_core::IntoParam<DependencyProperty>,
        P1: ::windows_core::IntoParam<DependencyPropertyChangedCallback>,
    {
        let this = &::windows_core::ComInterface::cast::<IDependencyObject>(self)?;
        unsafe {
            let mut result__ = ::std::mem::zeroed();
            (::windows_core::Interface::vtable(this).RegisterPropertyChangedCallback)(
                ::windows_core::Interface::as_raw(this),
                dp.into_param().abi(),
                callback.into_param().abi(),
                &mut result__,
            )
            .from_abi(result__)
        }
    }
    pub fn UnregisterPropertyChangedCallback<P0>(
        &self,
        dp: P0,
        token: i64,
    ) -> ::windows_core::Result<()>
    where
        P0: ::windows_core::IntoParam<DependencyProperty>,
    {
        let this = &::windows_core::ComInterface::cast::<IDependencyObject>(self)?;
        unsafe {
            (::windows_core::Interface::vtable(this).UnregisterPropertyChangedCallback)(
                ::windows_core::Interface::as_raw(this),
                dp.into_param().abi(),
                token,
            )
            .ok()
        }
    }
    #[doc = "Required features: `\"Windows_UI_Core\"`"]
    #[cfg(feature = "Windows_UI_Core")]
    pub fn Dispatcher(&self) -> ::windows_core::Result<::windows::UI::Core::CoreDispatcher> {
        let this = &::windows_core::ComInterface::cast::<IDependencyObject>(self)?;
        unsafe {
            let mut result__ = ::std::mem::zeroed();
            (::windows_core::Interface::vtable(this).Dispatcher)(
                ::windows_core::Interface::as_raw(this),
                &mut result__,
            )
            .from_abi(result__)
        }
    }
    #[doc = "Required features: `\"Microsoft_UI_Dispatching\"`"]
    #[cfg(feature = "Microsoft_UI_Dispatching")]
    pub fn DispatcherQueue(&self) -> ::windows_core::Result<super::Dispatching::DispatcherQueue> {
        let this = &::windows_core::ComInterface::cast::<IDependencyObject>(self)?;
        unsafe {
            let mut result__ = ::std::mem::zeroed();
            (::windows_core::Interface::vtable(this).DispatcherQueue)(
                ::windows_core::Interface::as_raw(this),
                &mut result__,
            )
            .from_abi(result__)
        }
    }
    pub fn Property(&self) -> ::windows_core::Result<DependencyProperty> {
        let this = self;
        unsafe {
            let mut result__ = ::std::mem::zeroed();
            (::windows_core::Interface::vtable(this).Property)(
                ::windows_core::Interface::as_raw(this),
                &mut result__,
            )
            .from_abi(result__)
        }
    }
    pub fn SetProperty<P0>(&self, value: P0) -> ::windows_core::Result<()>
    where
        P0: ::windows_core::IntoParam<DependencyProperty>,
    {
        let this = self;
        unsafe {
            (::windows_core::Interface::vtable(this).SetProperty)(
                ::windows_core::Interface::as_raw(this),
                value.into_param().abi(),
            )
            .ok()
        }
    }
    pub fn Value(&self) -> ::windows_core::Result<::windows_core::IInspectable> {
        let this = self;
        unsafe {
            let mut result__ = ::std::mem::zeroed();
            (::windows_core::Interface::vtable(this).Value)(
                ::windows_core::Interface::as_raw(this),
                &mut result__,
            )
            .from_abi(result__)
        }
    }
    pub fn SetValue2<P0>(&self, value: P0) -> ::windows_core::Result<()>
    where
        P0: ::windows_core::IntoParam<::windows_core::IInspectable>,
    {
        let this = self;
        unsafe {
            (::windows_core::Interface::vtable(this).SetValue)(
                ::windows_core::Interface::as_raw(this),
                value.into_param().abi(),
            )
            .ok()
        }
    }
    pub fn Target(&self) -> ::windows_core::Result<TargetPropertyPath> {
        let this = self;
        unsafe {
            let mut result__ = ::std::mem::zeroed();
            (::windows_core::Interface::vtable(this).Target)(
                ::windows_core::Interface::as_raw(this),
                &mut result__,
            )
            .from_abi(result__)
        }
    }
    pub fn SetTarget<P0>(&self, value: P0) -> ::windows_core::Result<()>
    where
        P0: ::windows_core::IntoParam<TargetPropertyPath>,
    {
        let this = self;
        unsafe {
            (::windows_core::Interface::vtable(this).SetTarget)(
                ::windows_core::Interface::as_raw(this),
                value.into_param().abi(),
            )
            .ok()
        }
    }
    pub fn IsSealed(&self) -> ::windows_core::Result<bool> {
        let this = &::windows_core::ComInterface::cast::<ISetterBase>(self)?;
        unsafe {
            let mut result__ = ::std::mem::zeroed();
            (::windows_core::Interface::vtable(this).IsSealed)(
                ::windows_core::Interface::as_raw(this),
                &mut result__,
            )
            .from_abi(result__)
        }
    }
    pub fn CreateInstance<P0, P1>(targetproperty: P0, value: P1) -> ::windows_core::Result<Setter>
    where
        P0: ::windows_core::IntoParam<DependencyProperty>,
        P1: ::windows_core::IntoParam<::windows_core::IInspectable>,
    {
        Self::ISetterFactory(|this| unsafe {
            let mut result__ = ::std::mem::zeroed();
            (::windows_core::Interface::vtable(this).CreateInstance)(
                ::windows_core::Interface::as_raw(this),
                targetproperty.into_param().abi(),
                value.into_param().abi(),
                &mut result__,
            )
            .from_abi(result__)
        })
    }
    #[doc(hidden)]
    pub fn ISetterFactory<R, F: FnOnce(&ISetterFactory) -> ::windows_core::Result<R>>(
        callback: F,
    ) -> ::windows_core::Result<R> {
        static SHARED: ::windows_core::imp::FactoryCache<Setter, ISetterFactory> =
            ::windows_core::imp::FactoryCache::new();
        SHARED.call(callback)
    }
}
impl ::windows_core::RuntimeType for Setter {
    const SIGNATURE: ::windows_core::imp::ConstBuffer =
        ::windows_core::imp::ConstBuffer::for_class::<Self>();
}
unsafe impl ::windows_core::Interface for Setter {
    type Vtable = ISetter_Vtbl;
}
unsafe impl ::windows_core::ComInterface for Setter {
    const IID: ::windows_core::GUID = <ISetter as ::windows_core::ComInterface>::IID;
}
impl ::windows_core::RuntimeName for Setter {
    const NAME: &'static str = "Microsoft.UI.Xaml.Setter";
}
::windows_core::imp::interface_hierarchy!(
    Setter,
    ::windows_core::IUnknown,
    ::windows_core::IInspectable
);
impl ::windows_core::CanTryInto<SetterBase> for Setter {}
impl ::windows_core::CanTryInto<DependencyObject> for Setter {}
unsafe impl ::core::marker::Send for Setter {}
unsafe impl ::core::marker::Sync for Setter {}
#[repr(transparent)]
#[derive(::core::cmp::PartialEq, ::core::cmp::Eq, ::core::fmt::Debug, ::core::clone::Clone)]
pub struct SetterBase(::windows_core::IUnknown);
impl SetterBase {
    pub fn GetValue<P0>(&self, dp: P0) -> ::windows_core::Result<::windows_core::IInspectable>
    where
        P0: ::windows_core::IntoParam<DependencyProperty>,
    {
        let this = &::windows_core::ComInterface::cast::<IDependencyObject>(self)?;
        unsafe {
            let mut result__ = ::std::mem::zeroed();
            (::windows_core::Interface::vtable(this).GetValue)(
                ::windows_core::Interface::as_raw(this),
                dp.into_param().abi(),
                &mut result__,
            )
            .from_abi(result__)
        }
    }
    pub fn SetValue<P0, P1>(&self, dp: P0, value: P1) -> ::windows_core::Result<()>
    where
        P0: ::windows_core::IntoParam<DependencyProperty>,
        P1: ::windows_core::IntoParam<::windows_core::IInspectable>,
    {
        let this = &::windows_core::ComInterface::cast::<IDependencyObject>(self)?;
        unsafe {
            (::windows_core::Interface::vtable(this).SetValue)(
                ::windows_core::Interface::as_raw(this),
                dp.into_param().abi(),
                value.into_param().abi(),
            )
            .ok()
        }
    }
    pub fn ClearValue<P0>(&self, dp: P0) -> ::windows_core::Result<()>
    where
        P0: ::windows_core::IntoParam<DependencyProperty>,
    {
        let this = &::windows_core::ComInterface::cast::<IDependencyObject>(self)?;
        unsafe {
            (::windows_core::Interface::vtable(this).ClearValue)(
                ::windows_core::Interface::as_raw(this),
                dp.into_param().abi(),
            )
            .ok()
        }
    }
    pub fn ReadLocalValue<P0>(&self, dp: P0) -> ::windows_core::Result<::windows_core::IInspectable>
    where
        P0: ::windows_core::IntoParam<DependencyProperty>,
    {
        let this = &::windows_core::ComInterface::cast::<IDependencyObject>(self)?;
        unsafe {
            let mut result__ = ::std::mem::zeroed();
            (::windows_core::Interface::vtable(this).ReadLocalValue)(
                ::windows_core::Interface::as_raw(this),
                dp.into_param().abi(),
                &mut result__,
            )
            .from_abi(result__)
        }
    }
    pub fn GetAnimationBaseValue<P0>(
        &self,
        dp: P0,
    ) -> ::windows_core::Result<::windows_core::IInspectable>
    where
        P0: ::windows_core::IntoParam<DependencyProperty>,
    {
        let this = &::windows_core::ComInterface::cast::<IDependencyObject>(self)?;
        unsafe {
            let mut result__ = ::std::mem::zeroed();
            (::windows_core::Interface::vtable(this).GetAnimationBaseValue)(
                ::windows_core::Interface::as_raw(this),
                dp.into_param().abi(),
                &mut result__,
            )
            .from_abi(result__)
        }
    }
    pub fn RegisterPropertyChangedCallback<P0, P1>(
        &self,
        dp: P0,
        callback: P1,
    ) -> ::windows_core::Result<i64>
    where
        P0: ::windows_core::IntoParam<DependencyProperty>,
        P1: ::windows_core::IntoParam<DependencyPropertyChangedCallback>,
    {
        let this = &::windows_core::ComInterface::cast::<IDependencyObject>(self)?;
        unsafe {
            let mut result__ = ::std::mem::zeroed();
            (::windows_core::Interface::vtable(this).RegisterPropertyChangedCallback)(
                ::windows_core::Interface::as_raw(this),
                dp.into_param().abi(),
                callback.into_param().abi(),
                &mut result__,
            )
            .from_abi(result__)
        }
    }
    pub fn UnregisterPropertyChangedCallback<P0>(
        &self,
        dp: P0,
        token: i64,
    ) -> ::windows_core::Result<()>
    where
        P0: ::windows_core::IntoParam<DependencyProperty>,
    {
        let this = &::windows_core::ComInterface::cast::<IDependencyObject>(self)?;
        unsafe {
            (::windows_core::Interface::vtable(this).UnregisterPropertyChangedCallback)(
                ::windows_core::Interface::as_raw(this),
                dp.into_param().abi(),
                token,
            )
            .ok()
        }
    }
    #[doc = "Required features: `\"Windows_UI_Core\"`"]
    #[cfg(feature = "Windows_UI_Core")]
    pub fn Dispatcher(&self) -> ::windows_core::Result<::windows::UI::Core::CoreDispatcher> {
        let this = &::windows_core::ComInterface::cast::<IDependencyObject>(self)?;
        unsafe {
            let mut result__ = ::std::mem::zeroed();
            (::windows_core::Interface::vtable(this).Dispatcher)(
                ::windows_core::Interface::as_raw(this),
                &mut result__,
            )
            .from_abi(result__)
        }
    }
    #[doc = "Required features: `\"Microsoft_UI_Dispatching\"`"]
    #[cfg(feature = "Microsoft_UI_Dispatching")]
    pub fn DispatcherQueue(&self) -> ::windows_core::Result<super::Dispatching::DispatcherQueue> {
        let this = &::windows_core::ComInterface::cast::<IDependencyObject>(self)?;
        unsafe {
            let mut result__ = ::std::mem::zeroed();
            (::windows_core::Interface::vtable(this).DispatcherQueue)(
                ::windows_core::Interface::as_raw(this),
                &mut result__,
            )
            .from_abi(result__)
        }
    }
    pub fn IsSealed(&self) -> ::windows_core::Result<bool> {
        let this = self;
        unsafe {
            let mut result__ = ::std::mem::zeroed();
            (::windows_core::Interface::vtable(this).IsSealed)(
                ::windows_core::Interface::as_raw(this),
                &mut result__,
            )
            .from_abi(result__)
        }
    }
}
impl ::windows_core::RuntimeType for SetterBase {
    const SIGNATURE: ::windows_core::imp::ConstBuffer =
        ::windows_core::imp::ConstBuffer::for_class::<Self>();
}
unsafe impl ::windows_core::Interface for SetterBase {
    type Vtable = ISetterBase_Vtbl;
}
unsafe impl ::windows_core::ComInterface for SetterBase {
    const IID: ::windows_core::GUID = <ISetterBase as ::windows_core::ComInterface>::IID;
}
impl ::windows_core::RuntimeName for SetterBase {
    const NAME: &'static str = "Microsoft.UI.Xaml.SetterBase";
}
::windows_core::imp::interface_hierarchy!(
    SetterBase,
    ::windows_core::IUnknown,
    ::windows_core::IInspectable
);
impl ::windows_core::CanTryInto<DependencyObject> for SetterBase {}
unsafe impl ::core::marker::Send for SetterBase {}
unsafe impl ::core::marker::Sync for SetterBase {}
#[repr(transparent)]
#[derive(::core::cmp::PartialEq, ::core::cmp::Eq, ::core::fmt::Debug, ::core::clone::Clone)]
pub struct SetterBaseCollection(::windows_core::IUnknown);
impl SetterBaseCollection {
    pub fn new() -> ::windows_core::Result<Self> {
        Self::IActivationFactory(|f| f.ActivateInstance::<Self>())
    }
    fn IActivationFactory<
        R,
        F: FnOnce(&::windows_core::imp::IGenericFactory) -> ::windows_core::Result<R>,
    >(
        callback: F,
    ) -> ::windows_core::Result<R> {
        static SHARED: ::windows_core::imp::FactoryCache<
            SetterBaseCollection,
            ::windows_core::imp::IGenericFactory,
        > = ::windows_core::imp::FactoryCache::new();
        SHARED.call(callback)
    }
    #[doc = "Required features: `\"Windows_Foundation_Collections\"`"]
    #[cfg(feature = "Windows_Foundation_Collections")]
    pub fn First(
        &self,
    ) -> ::windows_core::Result<::windows::Foundation::Collections::IIterator<SetterBase>> {
        let this = &::windows_core::ComInterface::cast::<
            ::windows::Foundation::Collections::IIterable<SetterBase>,
        >(self)?;
        unsafe {
            let mut result__ = ::std::mem::zeroed();
            (::windows_core::Interface::vtable(this).First)(
                ::windows_core::Interface::as_raw(this),
                &mut result__,
            )
            .from_abi(result__)
        }
    }
    pub fn IsSealed(&self) -> ::windows_core::Result<bool> {
        let this = self;
        unsafe {
            let mut result__ = ::std::mem::zeroed();
            (::windows_core::Interface::vtable(this).IsSealed)(
                ::windows_core::Interface::as_raw(this),
                &mut result__,
            )
            .from_abi(result__)
        }
    }
    #[doc = "Required features: `\"Windows_Foundation_Collections\"`"]
    #[cfg(feature = "Windows_Foundation_Collections")]
    pub fn GetAt(&self, index: u32) -> ::windows_core::Result<SetterBase> {
        let this = &::windows_core::ComInterface::cast::<
            ::windows::Foundation::Collections::IVector<SetterBase>,
        >(self)?;
        unsafe {
            let mut result__ = ::std::mem::zeroed();
            (::windows_core::Interface::vtable(this).GetAt)(
                ::windows_core::Interface::as_raw(this),
                index,
                &mut result__,
            )
            .from_abi(result__)
        }
    }
    #[doc = "Required features: `\"Windows_Foundation_Collections\"`"]
    #[cfg(feature = "Windows_Foundation_Collections")]
    pub fn Size(&self) -> ::windows_core::Result<u32> {
        let this = &::windows_core::ComInterface::cast::<
            ::windows::Foundation::Collections::IVector<SetterBase>,
        >(self)?;
        unsafe {
            let mut result__ = ::std::mem::zeroed();
            (::windows_core::Interface::vtable(this).Size)(
                ::windows_core::Interface::as_raw(this),
                &mut result__,
            )
            .from_abi(result__)
        }
    }
    #[doc = "Required features: `\"Windows_Foundation_Collections\"`"]
    #[cfg(feature = "Windows_Foundation_Collections")]
    pub fn GetView(
        &self,
    ) -> ::windows_core::Result<::windows::Foundation::Collections::IVectorView<SetterBase>> {
        let this = &::windows_core::ComInterface::cast::<
            ::windows::Foundation::Collections::IVector<SetterBase>,
        >(self)?;
        unsafe {
            let mut result__ = ::std::mem::zeroed();
            (::windows_core::Interface::vtable(this).GetView)(
                ::windows_core::Interface::as_raw(this),
                &mut result__,
            )
            .from_abi(result__)
        }
    }
    #[doc = "Required features: `\"Windows_Foundation_Collections\"`"]
    #[cfg(feature = "Windows_Foundation_Collections")]
    pub fn IndexOf<P0>(&self, value: P0, index: &mut u32) -> ::windows_core::Result<bool>
    where
        P0: ::windows_core::TryIntoParam<SetterBase>,
    {
        let this = &::windows_core::ComInterface::cast::<
            ::windows::Foundation::Collections::IVector<SetterBase>,
        >(self)?;
        unsafe {
            let mut result__ = ::std::mem::zeroed();
            (::windows_core::Interface::vtable(this).IndexOf)(
                ::windows_core::Interface::as_raw(this),
                value.try_into_param()?.abi(),
                index,
                &mut result__,
            )
            .from_abi(result__)
        }
    }
    #[doc = "Required features: `\"Windows_Foundation_Collections\"`"]
    #[cfg(feature = "Windows_Foundation_Collections")]
    pub fn SetAt<P0>(&self, index: u32, value: P0) -> ::windows_core::Result<()>
    where
        P0: ::windows_core::TryIntoParam<SetterBase>,
    {
        let this = &::windows_core::ComInterface::cast::<
            ::windows::Foundation::Collections::IVector<SetterBase>,
        >(self)?;
        unsafe {
            (::windows_core::Interface::vtable(this).SetAt)(
                ::windows_core::Interface::as_raw(this),
                index,
                value.try_into_param()?.abi(),
            )
            .ok()
        }
    }
    #[doc = "Required features: `\"Windows_Foundation_Collections\"`"]
    #[cfg(feature = "Windows_Foundation_Collections")]
    pub fn InsertAt<P0>(&self, index: u32, value: P0) -> ::windows_core::Result<()>
    where
        P0: ::windows_core::TryIntoParam<SetterBase>,
    {
        let this = &::windows_core::ComInterface::cast::<
            ::windows::Foundation::Collections::IVector<SetterBase>,
        >(self)?;
        unsafe {
            (::windows_core::Interface::vtable(this).InsertAt)(
                ::windows_core::Interface::as_raw(this),
                index,
                value.try_into_param()?.abi(),
            )
            .ok()
        }
    }
    #[doc = "Required features: `\"Windows_Foundation_Collections\"`"]
    #[cfg(feature = "Windows_Foundation_Collections")]
    pub fn RemoveAt(&self, index: u32) -> ::windows_core::Result<()> {
        let this = &::windows_core::ComInterface::cast::<
            ::windows::Foundation::Collections::IVector<SetterBase>,
        >(self)?;
        unsafe {
            (::windows_core::Interface::vtable(this).RemoveAt)(
                ::windows_core::Interface::as_raw(this),
                index,
            )
            .ok()
        }
    }
    #[doc = "Required features: `\"Windows_Foundation_Collections\"`"]
    #[cfg(feature = "Windows_Foundation_Collections")]
    pub fn Append<P0>(&self, value: P0) -> ::windows_core::Result<()>
    where
        P0: ::windows_core::TryIntoParam<SetterBase>,
    {
        let this = &::windows_core::ComInterface::cast::<
            ::windows::Foundation::Collections::IVector<SetterBase>,
        >(self)?;
        unsafe {
            (::windows_core::Interface::vtable(this).Append)(
                ::windows_core::Interface::as_raw(this),
                value.try_into_param()?.abi(),
            )
            .ok()
        }
    }
    #[doc = "Required features: `\"Windows_Foundation_Collections\"`"]
    #[cfg(feature = "Windows_Foundation_Collections")]
    pub fn RemoveAtEnd(&self) -> ::windows_core::Result<()> {
        let this = &::windows_core::ComInterface::cast::<
            ::windows::Foundation::Collections::IVector<SetterBase>,
        >(self)?;
        unsafe {
            (::windows_core::Interface::vtable(this).RemoveAtEnd)(
                ::windows_core::Interface::as_raw(this),
            )
            .ok()
        }
    }
    #[doc = "Required features: `\"Windows_Foundation_Collections\"`"]
    #[cfg(feature = "Windows_Foundation_Collections")]
    pub fn Clear(&self) -> ::windows_core::Result<()> {
        let this = &::windows_core::ComInterface::cast::<
            ::windows::Foundation::Collections::IVector<SetterBase>,
        >(self)?;
        unsafe {
            (::windows_core::Interface::vtable(this).Clear)(::windows_core::Interface::as_raw(this))
                .ok()
        }
    }
    #[doc = "Required features: `\"Windows_Foundation_Collections\"`"]
    #[cfg(feature = "Windows_Foundation_Collections")]
    pub fn GetMany(
        &self,
        startindex: u32,
        items: &mut [::core::option::Option<SetterBase>],
    ) -> ::windows_core::Result<u32> {
        let this = &::windows_core::ComInterface::cast::<
            ::windows::Foundation::Collections::IVector<SetterBase>,
        >(self)?;
        unsafe {
            let mut result__ = ::std::mem::zeroed();
            (::windows_core::Interface::vtable(this).GetMany)(
                ::windows_core::Interface::as_raw(this),
                startindex,
                items.len().try_into().unwrap(),
                ::core::mem::transmute_copy(&items),
                &mut result__,
            )
            .from_abi(result__)
        }
    }
    #[doc = "Required features: `\"Windows_Foundation_Collections\"`"]
    #[cfg(feature = "Windows_Foundation_Collections")]
    pub fn ReplaceAll(
        &self,
        items: &[::core::option::Option<SetterBase>],
    ) -> ::windows_core::Result<()> {
        let this = &::windows_core::ComInterface::cast::<
            ::windows::Foundation::Collections::IVector<SetterBase>,
        >(self)?;
        unsafe {
            (::windows_core::Interface::vtable(this).ReplaceAll)(
                ::windows_core::Interface::as_raw(this),
                items.len().try_into().unwrap(),
                ::core::mem::transmute(items.as_ptr()),
            )
            .ok()
        }
    }
}
impl ::windows_core::RuntimeType for SetterBaseCollection {
    const SIGNATURE: ::windows_core::imp::ConstBuffer =
        ::windows_core::imp::ConstBuffer::for_class::<Self>();
}
unsafe impl ::windows_core::Interface for SetterBaseCollection {
    type Vtable = ISetterBaseCollection_Vtbl;
}
unsafe impl ::windows_core::ComInterface for SetterBaseCollection {
    const IID: ::windows_core::GUID = <ISetterBaseCollection as ::windows_core::ComInterface>::IID;
}
impl ::windows_core::RuntimeName for SetterBaseCollection {
    const NAME: &'static str = "Microsoft.UI.Xaml.SetterBaseCollection";
}
#[cfg(feature = "Windows_Foundation_Collections")]
impl ::core::iter::IntoIterator for SetterBaseCollection {
    type Item = SetterBase;
    type IntoIter = ::windows::Foundation::Collections::VectorIterator<Self::Item>;
    fn into_iter(self) -> Self::IntoIter {
        ::core::iter::IntoIterator::into_iter(&self)
    }
}
#[cfg(feature = "Windows_Foundation_Collections")]
impl ::core::iter::IntoIterator for &SetterBaseCollection {
    type Item = SetterBase;
    type IntoIter = ::windows::Foundation::Collections::VectorIterator<Self::Item>;
    fn into_iter(self) -> Self::IntoIter {
        ::windows::Foundation::Collections::VectorIterator::new(
            ::windows_core::ComInterface::cast(self).ok(),
        )
    }
}
::windows_core::imp::interface_hierarchy!(
    SetterBaseCollection,
    ::windows_core::IUnknown,
    ::windows_core::IInspectable
);
#[cfg(feature = "Windows_Foundation_Collections")]
impl ::windows_core::CanTryInto<::windows::Foundation::Collections::IIterable<SetterBase>>
    for SetterBaseCollection
{
}
#[cfg(feature = "Windows_Foundation_Collections")]
impl ::windows_core::CanTryInto<::windows::Foundation::Collections::IVector<SetterBase>>
    for SetterBaseCollection
{
}
unsafe impl ::core::marker::Send for SetterBaseCollection {}
unsafe impl ::core::marker::Sync for SetterBaseCollection {}
#[repr(transparent)]
#[derive(::core::cmp::PartialEq, ::core::cmp::Eq, ::core::fmt::Debug, ::core::clone::Clone)]
pub struct SizeChangedEventArgs(::windows_core::IUnknown);
impl SizeChangedEventArgs {
    pub fn OriginalSource(&self) -> ::windows_core::Result<::windows_core::IInspectable> {
        let this = &::windows_core::ComInterface::cast::<IRoutedEventArgs>(self)?;
        unsafe {
            let mut result__ = ::std::mem::zeroed();
            (::windows_core::Interface::vtable(this).OriginalSource)(
                ::windows_core::Interface::as_raw(this),
                &mut result__,
            )
            .from_abi(result__)
        }
    }
    #[doc = "Required features: `\"Windows_Foundation\"`"]
    #[cfg(feature = "Windows_Foundation")]
    pub fn PreviousSize(&self) -> ::windows_core::Result<::windows::Foundation::Size> {
        let this = self;
        unsafe {
            let mut result__ = ::std::mem::zeroed();
            (::windows_core::Interface::vtable(this).PreviousSize)(
                ::windows_core::Interface::as_raw(this),
                &mut result__,
            )
            .from_abi(result__)
        }
    }
    #[doc = "Required features: `\"Windows_Foundation\"`"]
    #[cfg(feature = "Windows_Foundation")]
    pub fn NewSize(&self) -> ::windows_core::Result<::windows::Foundation::Size> {
        let this = self;
        unsafe {
            let mut result__ = ::std::mem::zeroed();
            (::windows_core::Interface::vtable(this).NewSize)(
                ::windows_core::Interface::as_raw(this),
                &mut result__,
            )
            .from_abi(result__)
        }
    }
}
impl ::windows_core::RuntimeType for SizeChangedEventArgs {
    const SIGNATURE: ::windows_core::imp::ConstBuffer =
        ::windows_core::imp::ConstBuffer::for_class::<Self>();
}
unsafe impl ::windows_core::Interface for SizeChangedEventArgs {
    type Vtable = ISizeChangedEventArgs_Vtbl;
}
unsafe impl ::windows_core::ComInterface for SizeChangedEventArgs {
    const IID: ::windows_core::GUID = <ISizeChangedEventArgs as ::windows_core::ComInterface>::IID;
}
impl ::windows_core::RuntimeName for SizeChangedEventArgs {
    const NAME: &'static str = "Microsoft.UI.Xaml.SizeChangedEventArgs";
}
::windows_core::imp::interface_hierarchy!(
    SizeChangedEventArgs,
    ::windows_core::IUnknown,
    ::windows_core::IInspectable
);
impl ::windows_core::CanTryInto<RoutedEventArgs> for SizeChangedEventArgs {}
unsafe impl ::core::marker::Send for SizeChangedEventArgs {}
unsafe impl ::core::marker::Sync for SizeChangedEventArgs {}
#[repr(transparent)]
#[derive(::core::cmp::PartialEq, ::core::cmp::Eq, ::core::fmt::Debug, ::core::clone::Clone)]
pub struct SizeHelper(::windows_core::IUnknown);
impl SizeHelper {
    #[doc = "Required features: `\"Windows_Foundation\"`"]
    #[cfg(feature = "Windows_Foundation")]
    pub fn Empty() -> ::windows_core::Result<::windows::Foundation::Size> {
        Self::ISizeHelperStatics(|this| unsafe {
            let mut result__ = ::std::mem::zeroed();
            (::windows_core::Interface::vtable(this).Empty)(
                ::windows_core::Interface::as_raw(this),
                &mut result__,
            )
            .from_abi(result__)
        })
    }
    #[doc = "Required features: `\"Windows_Foundation\"`"]
    #[cfg(feature = "Windows_Foundation")]
    pub fn FromDimensions(
        width: f32,
        height: f32,
    ) -> ::windows_core::Result<::windows::Foundation::Size> {
        Self::ISizeHelperStatics(|this| unsafe {
            let mut result__ = ::std::mem::zeroed();
            (::windows_core::Interface::vtable(this).FromDimensions)(
                ::windows_core::Interface::as_raw(this),
                width,
                height,
                &mut result__,
            )
            .from_abi(result__)
        })
    }
    #[doc = "Required features: `\"Windows_Foundation\"`"]
    #[cfg(feature = "Windows_Foundation")]
    pub fn GetIsEmpty(target: ::windows::Foundation::Size) -> ::windows_core::Result<bool> {
        Self::ISizeHelperStatics(|this| unsafe {
            let mut result__ = ::std::mem::zeroed();
            (::windows_core::Interface::vtable(this).GetIsEmpty)(
                ::windows_core::Interface::as_raw(this),
                target,
                &mut result__,
            )
            .from_abi(result__)
        })
    }
    #[doc = "Required features: `\"Windows_Foundation\"`"]
    #[cfg(feature = "Windows_Foundation")]
    pub fn Equals(
        target: ::windows::Foundation::Size,
        value: ::windows::Foundation::Size,
    ) -> ::windows_core::Result<bool> {
        Self::ISizeHelperStatics(|this| unsafe {
            let mut result__ = ::std::mem::zeroed();
            (::windows_core::Interface::vtable(this).Equals)(
                ::windows_core::Interface::as_raw(this),
                target,
                value,
                &mut result__,
            )
            .from_abi(result__)
        })
    }
    #[doc(hidden)]
    pub fn ISizeHelperStatics<R, F: FnOnce(&ISizeHelperStatics) -> ::windows_core::Result<R>>(
        callback: F,
    ) -> ::windows_core::Result<R> {
        static SHARED: ::windows_core::imp::FactoryCache<SizeHelper, ISizeHelperStatics> =
            ::windows_core::imp::FactoryCache::new();
        SHARED.call(callback)
    }
}
impl ::windows_core::RuntimeType for SizeHelper {
    const SIGNATURE: ::windows_core::imp::ConstBuffer =
        ::windows_core::imp::ConstBuffer::for_class::<Self>();
}
unsafe impl ::windows_core::Interface for SizeHelper {
    type Vtable = ISizeHelper_Vtbl;
}
unsafe impl ::windows_core::ComInterface for SizeHelper {
    const IID: ::windows_core::GUID = <ISizeHelper as ::windows_core::ComInterface>::IID;
}
impl ::windows_core::RuntimeName for SizeHelper {
    const NAME: &'static str = "Microsoft.UI.Xaml.SizeHelper";
}
::windows_core::imp::interface_hierarchy!(
    SizeHelper,
    ::windows_core::IUnknown,
    ::windows_core::IInspectable
);
unsafe impl ::core::marker::Send for SizeHelper {}
unsafe impl ::core::marker::Sync for SizeHelper {}
#[repr(transparent)]
#[derive(::core::cmp::PartialEq, ::core::cmp::Eq, ::core::fmt::Debug, ::core::clone::Clone)]
pub struct StateTrigger(::windows_core::IUnknown);
impl StateTrigger {
    pub fn new() -> ::windows_core::Result<Self> {
        Self::IActivationFactory(|f| f.ActivateInstance::<Self>())
    }
    fn IActivationFactory<
        R,
        F: FnOnce(&::windows_core::imp::IGenericFactory) -> ::windows_core::Result<R>,
    >(
        callback: F,
    ) -> ::windows_core::Result<R> {
        static SHARED: ::windows_core::imp::FactoryCache<
            StateTrigger,
            ::windows_core::imp::IGenericFactory,
        > = ::windows_core::imp::FactoryCache::new();
        SHARED.call(callback)
    }
    pub fn GetValue<P0>(&self, dp: P0) -> ::windows_core::Result<::windows_core::IInspectable>
    where
        P0: ::windows_core::IntoParam<DependencyProperty>,
    {
        let this = &::windows_core::ComInterface::cast::<IDependencyObject>(self)?;
        unsafe {
            let mut result__ = ::std::mem::zeroed();
            (::windows_core::Interface::vtable(this).GetValue)(
                ::windows_core::Interface::as_raw(this),
                dp.into_param().abi(),
                &mut result__,
            )
            .from_abi(result__)
        }
    }
    pub fn SetValue<P0, P1>(&self, dp: P0, value: P1) -> ::windows_core::Result<()>
    where
        P0: ::windows_core::IntoParam<DependencyProperty>,
        P1: ::windows_core::IntoParam<::windows_core::IInspectable>,
    {
        let this = &::windows_core::ComInterface::cast::<IDependencyObject>(self)?;
        unsafe {
            (::windows_core::Interface::vtable(this).SetValue)(
                ::windows_core::Interface::as_raw(this),
                dp.into_param().abi(),
                value.into_param().abi(),
            )
            .ok()
        }
    }
    pub fn ClearValue<P0>(&self, dp: P0) -> ::windows_core::Result<()>
    where
        P0: ::windows_core::IntoParam<DependencyProperty>,
    {
        let this = &::windows_core::ComInterface::cast::<IDependencyObject>(self)?;
        unsafe {
            (::windows_core::Interface::vtable(this).ClearValue)(
                ::windows_core::Interface::as_raw(this),
                dp.into_param().abi(),
            )
            .ok()
        }
    }
    pub fn ReadLocalValue<P0>(&self, dp: P0) -> ::windows_core::Result<::windows_core::IInspectable>
    where
        P0: ::windows_core::IntoParam<DependencyProperty>,
    {
        let this = &::windows_core::ComInterface::cast::<IDependencyObject>(self)?;
        unsafe {
            let mut result__ = ::std::mem::zeroed();
            (::windows_core::Interface::vtable(this).ReadLocalValue)(
                ::windows_core::Interface::as_raw(this),
                dp.into_param().abi(),
                &mut result__,
            )
            .from_abi(result__)
        }
    }
    pub fn GetAnimationBaseValue<P0>(
        &self,
        dp: P0,
    ) -> ::windows_core::Result<::windows_core::IInspectable>
    where
        P0: ::windows_core::IntoParam<DependencyProperty>,
    {
        let this = &::windows_core::ComInterface::cast::<IDependencyObject>(self)?;
        unsafe {
            let mut result__ = ::std::mem::zeroed();
            (::windows_core::Interface::vtable(this).GetAnimationBaseValue)(
                ::windows_core::Interface::as_raw(this),
                dp.into_param().abi(),
                &mut result__,
            )
            .from_abi(result__)
        }
    }
    pub fn RegisterPropertyChangedCallback<P0, P1>(
        &self,
        dp: P0,
        callback: P1,
    ) -> ::windows_core::Result<i64>
    where
        P0: ::windows_core::IntoParam<DependencyProperty>,
        P1: ::windows_core::IntoParam<DependencyPropertyChangedCallback>,
    {
        let this = &::windows_core::ComInterface::cast::<IDependencyObject>(self)?;
        unsafe {
            let mut result__ = ::std::mem::zeroed();
            (::windows_core::Interface::vtable(this).RegisterPropertyChangedCallback)(
                ::windows_core::Interface::as_raw(this),
                dp.into_param().abi(),
                callback.into_param().abi(),
                &mut result__,
            )
            .from_abi(result__)
        }
    }
    pub fn UnregisterPropertyChangedCallback<P0>(
        &self,
        dp: P0,
        token: i64,
    ) -> ::windows_core::Result<()>
    where
        P0: ::windows_core::IntoParam<DependencyProperty>,
    {
        let this = &::windows_core::ComInterface::cast::<IDependencyObject>(self)?;
        unsafe {
            (::windows_core::Interface::vtable(this).UnregisterPropertyChangedCallback)(
                ::windows_core::Interface::as_raw(this),
                dp.into_param().abi(),
                token,
            )
            .ok()
        }
    }
    #[doc = "Required features: `\"Windows_UI_Core\"`"]
    #[cfg(feature = "Windows_UI_Core")]
    pub fn Dispatcher(&self) -> ::windows_core::Result<::windows::UI::Core::CoreDispatcher> {
        let this = &::windows_core::ComInterface::cast::<IDependencyObject>(self)?;
        unsafe {
            let mut result__ = ::std::mem::zeroed();
            (::windows_core::Interface::vtable(this).Dispatcher)(
                ::windows_core::Interface::as_raw(this),
                &mut result__,
            )
            .from_abi(result__)
        }
    }
    #[doc = "Required features: `\"Microsoft_UI_Dispatching\"`"]
    #[cfg(feature = "Microsoft_UI_Dispatching")]
    pub fn DispatcherQueue(&self) -> ::windows_core::Result<super::Dispatching::DispatcherQueue> {
        let this = &::windows_core::ComInterface::cast::<IDependencyObject>(self)?;
        unsafe {
            let mut result__ = ::std::mem::zeroed();
            (::windows_core::Interface::vtable(this).DispatcherQueue)(
                ::windows_core::Interface::as_raw(this),
                &mut result__,
            )
            .from_abi(result__)
        }
    }
    pub fn IsActive(&self) -> ::windows_core::Result<bool> {
        let this = self;
        unsafe {
            let mut result__ = ::std::mem::zeroed();
            (::windows_core::Interface::vtable(this).IsActive)(
                ::windows_core::Interface::as_raw(this),
                &mut result__,
            )
            .from_abi(result__)
        }
    }
    pub fn SetIsActive(&self, value: bool) -> ::windows_core::Result<()> {
        let this = self;
        unsafe {
            (::windows_core::Interface::vtable(this).SetIsActive)(
                ::windows_core::Interface::as_raw(this),
                value,
            )
            .ok()
        }
    }
    pub fn SetActive(&self, isactive: bool) -> ::windows_core::Result<()> {
        let this = &::windows_core::ComInterface::cast::<IStateTriggerBaseProtected>(self)?;
        unsafe {
            (::windows_core::Interface::vtable(this).SetActive)(
                ::windows_core::Interface::as_raw(this),
                isactive,
            )
            .ok()
        }
    }
    pub fn IsActiveProperty() -> ::windows_core::Result<DependencyProperty> {
        Self::IStateTriggerStatics(|this| unsafe {
            let mut result__ = ::std::mem::zeroed();
            (::windows_core::Interface::vtable(this).IsActiveProperty)(
                ::windows_core::Interface::as_raw(this),
                &mut result__,
            )
            .from_abi(result__)
        })
    }
    #[doc(hidden)]
    pub fn IStateTriggerStatics<
        R,
        F: FnOnce(&IStateTriggerStatics) -> ::windows_core::Result<R>,
    >(
        callback: F,
    ) -> ::windows_core::Result<R> {
        static SHARED: ::windows_core::imp::FactoryCache<StateTrigger, IStateTriggerStatics> =
            ::windows_core::imp::FactoryCache::new();
        SHARED.call(callback)
    }
}
impl ::windows_core::RuntimeType for StateTrigger {
    const SIGNATURE: ::windows_core::imp::ConstBuffer =
        ::windows_core::imp::ConstBuffer::for_class::<Self>();
}
unsafe impl ::windows_core::Interface for StateTrigger {
    type Vtable = IStateTrigger_Vtbl;
}
unsafe impl ::windows_core::ComInterface for StateTrigger {
    const IID: ::windows_core::GUID = <IStateTrigger as ::windows_core::ComInterface>::IID;
}
impl ::windows_core::RuntimeName for StateTrigger {
    const NAME: &'static str = "Microsoft.UI.Xaml.StateTrigger";
}
::windows_core::imp::interface_hierarchy!(
    StateTrigger,
    ::windows_core::IUnknown,
    ::windows_core::IInspectable
);
impl ::windows_core::CanTryInto<StateTriggerBase> for StateTrigger {}
impl ::windows_core::CanTryInto<DependencyObject> for StateTrigger {}
unsafe impl ::core::marker::Send for StateTrigger {}
unsafe impl ::core::marker::Sync for StateTrigger {}
#[repr(transparent)]
#[derive(::core::cmp::PartialEq, ::core::cmp::Eq, ::core::fmt::Debug, ::core::clone::Clone)]
pub struct StateTriggerBase(::windows_core::IUnknown);
impl StateTriggerBase {
    pub fn GetValue<P0>(&self, dp: P0) -> ::windows_core::Result<::windows_core::IInspectable>
    where
        P0: ::windows_core::IntoParam<DependencyProperty>,
    {
        let this = &::windows_core::ComInterface::cast::<IDependencyObject>(self)?;
        unsafe {
            let mut result__ = ::std::mem::zeroed();
            (::windows_core::Interface::vtable(this).GetValue)(
                ::windows_core::Interface::as_raw(this),
                dp.into_param().abi(),
                &mut result__,
            )
            .from_abi(result__)
        }
    }
    pub fn SetValue<P0, P1>(&self, dp: P0, value: P1) -> ::windows_core::Result<()>
    where
        P0: ::windows_core::IntoParam<DependencyProperty>,
        P1: ::windows_core::IntoParam<::windows_core::IInspectable>,
    {
        let this = &::windows_core::ComInterface::cast::<IDependencyObject>(self)?;
        unsafe {
            (::windows_core::Interface::vtable(this).SetValue)(
                ::windows_core::Interface::as_raw(this),
                dp.into_param().abi(),
                value.into_param().abi(),
            )
            .ok()
        }
    }
    pub fn ClearValue<P0>(&self, dp: P0) -> ::windows_core::Result<()>
    where
        P0: ::windows_core::IntoParam<DependencyProperty>,
    {
        let this = &::windows_core::ComInterface::cast::<IDependencyObject>(self)?;
        unsafe {
            (::windows_core::Interface::vtable(this).ClearValue)(
                ::windows_core::Interface::as_raw(this),
                dp.into_param().abi(),
            )
            .ok()
        }
    }
    pub fn ReadLocalValue<P0>(&self, dp: P0) -> ::windows_core::Result<::windows_core::IInspectable>
    where
        P0: ::windows_core::IntoParam<DependencyProperty>,
    {
        let this = &::windows_core::ComInterface::cast::<IDependencyObject>(self)?;
        unsafe {
            let mut result__ = ::std::mem::zeroed();
            (::windows_core::Interface::vtable(this).ReadLocalValue)(
                ::windows_core::Interface::as_raw(this),
                dp.into_param().abi(),
                &mut result__,
            )
            .from_abi(result__)
        }
    }
    pub fn GetAnimationBaseValue<P0>(
        &self,
        dp: P0,
    ) -> ::windows_core::Result<::windows_core::IInspectable>
    where
        P0: ::windows_core::IntoParam<DependencyProperty>,
    {
        let this = &::windows_core::ComInterface::cast::<IDependencyObject>(self)?;
        unsafe {
            let mut result__ = ::std::mem::zeroed();
            (::windows_core::Interface::vtable(this).GetAnimationBaseValue)(
                ::windows_core::Interface::as_raw(this),
                dp.into_param().abi(),
                &mut result__,
            )
            .from_abi(result__)
        }
    }
    pub fn RegisterPropertyChangedCallback<P0, P1>(
        &self,
        dp: P0,
        callback: P1,
    ) -> ::windows_core::Result<i64>
    where
        P0: ::windows_core::IntoParam<DependencyProperty>,
        P1: ::windows_core::IntoParam<DependencyPropertyChangedCallback>,
    {
        let this = &::windows_core::ComInterface::cast::<IDependencyObject>(self)?;
        unsafe {
            let mut result__ = ::std::mem::zeroed();
            (::windows_core::Interface::vtable(this).RegisterPropertyChangedCallback)(
                ::windows_core::Interface::as_raw(this),
                dp.into_param().abi(),
                callback.into_param().abi(),
                &mut result__,
            )
            .from_abi(result__)
        }
    }
    pub fn UnregisterPropertyChangedCallback<P0>(
        &self,
        dp: P0,
        token: i64,
    ) -> ::windows_core::Result<()>
    where
        P0: ::windows_core::IntoParam<DependencyProperty>,
    {
        let this = &::windows_core::ComInterface::cast::<IDependencyObject>(self)?;
        unsafe {
            (::windows_core::Interface::vtable(this).UnregisterPropertyChangedCallback)(
                ::windows_core::Interface::as_raw(this),
                dp.into_param().abi(),
                token,
            )
            .ok()
        }
    }
    #[doc = "Required features: `\"Windows_UI_Core\"`"]
    #[cfg(feature = "Windows_UI_Core")]
    pub fn Dispatcher(&self) -> ::windows_core::Result<::windows::UI::Core::CoreDispatcher> {
        let this = &::windows_core::ComInterface::cast::<IDependencyObject>(self)?;
        unsafe {
            let mut result__ = ::std::mem::zeroed();
            (::windows_core::Interface::vtable(this).Dispatcher)(
                ::windows_core::Interface::as_raw(this),
                &mut result__,
            )
            .from_abi(result__)
        }
    }
    #[doc = "Required features: `\"Microsoft_UI_Dispatching\"`"]
    #[cfg(feature = "Microsoft_UI_Dispatching")]
    pub fn DispatcherQueue(&self) -> ::windows_core::Result<super::Dispatching::DispatcherQueue> {
        let this = &::windows_core::ComInterface::cast::<IDependencyObject>(self)?;
        unsafe {
            let mut result__ = ::std::mem::zeroed();
            (::windows_core::Interface::vtable(this).DispatcherQueue)(
                ::windows_core::Interface::as_raw(this),
                &mut result__,
            )
            .from_abi(result__)
        }
    }
    pub unsafe fn CreateInstance<P0>(
        baseinterface: P0,
        innerinterface: &mut ::core::option::Option<::windows_core::IInspectable>,
    ) -> ::windows_core::Result<StateTriggerBase>
    where
        P0: ::windows_core::IntoParam<::windows_core::IInspectable>,
    {
        Self::IStateTriggerBaseFactory(|this| unsafe {
            let mut result__ = ::std::mem::zeroed();
            (::windows_core::Interface::vtable(this).CreateInstance)(
                ::windows_core::Interface::as_raw(this),
                baseinterface.into_param().abi(),
                innerinterface as *mut _ as _,
                &mut result__,
            )
            .from_abi(result__)
        })
    }
    pub fn SetActive(&self, isactive: bool) -> ::windows_core::Result<()> {
        let this = &::windows_core::ComInterface::cast::<IStateTriggerBaseProtected>(self)?;
        unsafe {
            (::windows_core::Interface::vtable(this).SetActive)(
                ::windows_core::Interface::as_raw(this),
                isactive,
            )
            .ok()
        }
    }
    #[doc(hidden)]
    pub fn IStateTriggerBaseFactory<
        R,
        F: FnOnce(&IStateTriggerBaseFactory) -> ::windows_core::Result<R>,
    >(
        callback: F,
    ) -> ::windows_core::Result<R> {
        static SHARED: ::windows_core::imp::FactoryCache<
            StateTriggerBase,
            IStateTriggerBaseFactory,
        > = ::windows_core::imp::FactoryCache::new();
        SHARED.call(callback)
    }
}
impl ::windows_core::RuntimeType for StateTriggerBase {
    const SIGNATURE: ::windows_core::imp::ConstBuffer =
        ::windows_core::imp::ConstBuffer::for_class::<Self>();
}
unsafe impl ::windows_core::Interface for StateTriggerBase {
    type Vtable = IStateTriggerBase_Vtbl;
}
unsafe impl ::windows_core::ComInterface for StateTriggerBase {
    const IID: ::windows_core::GUID = <IStateTriggerBase as ::windows_core::ComInterface>::IID;
}
impl ::windows_core::RuntimeName for StateTriggerBase {
    const NAME: &'static str = "Microsoft.UI.Xaml.StateTriggerBase";
}
::windows_core::imp::interface_hierarchy!(
    StateTriggerBase,
    ::windows_core::IUnknown,
    ::windows_core::IInspectable
);
impl ::windows_core::CanTryInto<DependencyObject> for StateTriggerBase {}
unsafe impl ::core::marker::Send for StateTriggerBase {}
unsafe impl ::core::marker::Sync for StateTriggerBase {}
#[repr(transparent)]
#[derive(::core::cmp::PartialEq, ::core::cmp::Eq, ::core::fmt::Debug, ::core::clone::Clone)]
pub struct Style(::windows_core::IUnknown);
impl Style {
    pub fn new() -> ::windows_core::Result<Self> {
        Self::IActivationFactory(|f| f.ActivateInstance::<Self>())
    }
    fn IActivationFactory<
        R,
        F: FnOnce(&::windows_core::imp::IGenericFactory) -> ::windows_core::Result<R>,
    >(
        callback: F,
    ) -> ::windows_core::Result<R> {
        static SHARED: ::windows_core::imp::FactoryCache<
            Style,
            ::windows_core::imp::IGenericFactory,
        > = ::windows_core::imp::FactoryCache::new();
        SHARED.call(callback)
    }
    pub fn GetValue<P0>(&self, dp: P0) -> ::windows_core::Result<::windows_core::IInspectable>
    where
        P0: ::windows_core::IntoParam<DependencyProperty>,
    {
        let this = &::windows_core::ComInterface::cast::<IDependencyObject>(self)?;
        unsafe {
            let mut result__ = ::std::mem::zeroed();
            (::windows_core::Interface::vtable(this).GetValue)(
                ::windows_core::Interface::as_raw(this),
                dp.into_param().abi(),
                &mut result__,
            )
            .from_abi(result__)
        }
    }
    pub fn SetValue<P0, P1>(&self, dp: P0, value: P1) -> ::windows_core::Result<()>
    where
        P0: ::windows_core::IntoParam<DependencyProperty>,
        P1: ::windows_core::IntoParam<::windows_core::IInspectable>,
    {
        let this = &::windows_core::ComInterface::cast::<IDependencyObject>(self)?;
        unsafe {
            (::windows_core::Interface::vtable(this).SetValue)(
                ::windows_core::Interface::as_raw(this),
                dp.into_param().abi(),
                value.into_param().abi(),
            )
            .ok()
        }
    }
    pub fn ClearValue<P0>(&self, dp: P0) -> ::windows_core::Result<()>
    where
        P0: ::windows_core::IntoParam<DependencyProperty>,
    {
        let this = &::windows_core::ComInterface::cast::<IDependencyObject>(self)?;
        unsafe {
            (::windows_core::Interface::vtable(this).ClearValue)(
                ::windows_core::Interface::as_raw(this),
                dp.into_param().abi(),
            )
            .ok()
        }
    }
    pub fn ReadLocalValue<P0>(&self, dp: P0) -> ::windows_core::Result<::windows_core::IInspectable>
    where
        P0: ::windows_core::IntoParam<DependencyProperty>,
    {
        let this = &::windows_core::ComInterface::cast::<IDependencyObject>(self)?;
        unsafe {
            let mut result__ = ::std::mem::zeroed();
            (::windows_core::Interface::vtable(this).ReadLocalValue)(
                ::windows_core::Interface::as_raw(this),
                dp.into_param().abi(),
                &mut result__,
            )
            .from_abi(result__)
        }
    }
    pub fn GetAnimationBaseValue<P0>(
        &self,
        dp: P0,
    ) -> ::windows_core::Result<::windows_core::IInspectable>
    where
        P0: ::windows_core::IntoParam<DependencyProperty>,
    {
        let this = &::windows_core::ComInterface::cast::<IDependencyObject>(self)?;
        unsafe {
            let mut result__ = ::std::mem::zeroed();
            (::windows_core::Interface::vtable(this).GetAnimationBaseValue)(
                ::windows_core::Interface::as_raw(this),
                dp.into_param().abi(),
                &mut result__,
            )
            .from_abi(result__)
        }
    }
    pub fn RegisterPropertyChangedCallback<P0, P1>(
        &self,
        dp: P0,
        callback: P1,
    ) -> ::windows_core::Result<i64>
    where
        P0: ::windows_core::IntoParam<DependencyProperty>,
        P1: ::windows_core::IntoParam<DependencyPropertyChangedCallback>,
    {
        let this = &::windows_core::ComInterface::cast::<IDependencyObject>(self)?;
        unsafe {
            let mut result__ = ::std::mem::zeroed();
            (::windows_core::Interface::vtable(this).RegisterPropertyChangedCallback)(
                ::windows_core::Interface::as_raw(this),
                dp.into_param().abi(),
                callback.into_param().abi(),
                &mut result__,
            )
            .from_abi(result__)
        }
    }
    pub fn UnregisterPropertyChangedCallback<P0>(
        &self,
        dp: P0,
        token: i64,
    ) -> ::windows_core::Result<()>
    where
        P0: ::windows_core::IntoParam<DependencyProperty>,
    {
        let this = &::windows_core::ComInterface::cast::<IDependencyObject>(self)?;
        unsafe {
            (::windows_core::Interface::vtable(this).UnregisterPropertyChangedCallback)(
                ::windows_core::Interface::as_raw(this),
                dp.into_param().abi(),
                token,
            )
            .ok()
        }
    }
    #[doc = "Required features: `\"Windows_UI_Core\"`"]
    #[cfg(feature = "Windows_UI_Core")]
    pub fn Dispatcher(&self) -> ::windows_core::Result<::windows::UI::Core::CoreDispatcher> {
        let this = &::windows_core::ComInterface::cast::<IDependencyObject>(self)?;
        unsafe {
            let mut result__ = ::std::mem::zeroed();
            (::windows_core::Interface::vtable(this).Dispatcher)(
                ::windows_core::Interface::as_raw(this),
                &mut result__,
            )
            .from_abi(result__)
        }
    }
    #[doc = "Required features: `\"Microsoft_UI_Dispatching\"`"]
    #[cfg(feature = "Microsoft_UI_Dispatching")]
    pub fn DispatcherQueue(&self) -> ::windows_core::Result<super::Dispatching::DispatcherQueue> {
        let this = &::windows_core::ComInterface::cast::<IDependencyObject>(self)?;
        unsafe {
            let mut result__ = ::std::mem::zeroed();
            (::windows_core::Interface::vtable(this).DispatcherQueue)(
                ::windows_core::Interface::as_raw(this),
                &mut result__,
            )
            .from_abi(result__)
        }
    }
    pub fn IsSealed(&self) -> ::windows_core::Result<bool> {
        let this = self;
        unsafe {
            let mut result__ = ::std::mem::zeroed();
            (::windows_core::Interface::vtable(this).IsSealed)(
                ::windows_core::Interface::as_raw(this),
                &mut result__,
            )
            .from_abi(result__)
        }
    }
    pub fn Setters(&self) -> ::windows_core::Result<SetterBaseCollection> {
        let this = self;
        unsafe {
            let mut result__ = ::std::mem::zeroed();
            (::windows_core::Interface::vtable(this).Setters)(
                ::windows_core::Interface::as_raw(this),
                &mut result__,
            )
            .from_abi(result__)
        }
    }
    #[doc = "Required features: `\"Windows_UI_Xaml_Interop\"`"]
    #[cfg(feature = "Windows_UI_Xaml_Interop")]
    pub fn TargetType(
        &self,
    ) -> ::windows_core::Result<super::super::super::Windows::UI::Xaml::Interop::TypeName> {
        let this = self;
        unsafe {
            let mut result__ = ::std::mem::zeroed();
            (::windows_core::Interface::vtable(this).TargetType)(
                ::windows_core::Interface::as_raw(this),
                &mut result__,
            )
            .from_abi(result__)
        }
    }
    #[doc = "Required features: `\"Windows_UI_Xaml_Interop\"`"]
    #[cfg(feature = "Windows_UI_Xaml_Interop")]
    pub fn SetTargetType<P0>(&self, value: P0) -> ::windows_core::Result<()>
    where
        P0: ::windows_core::IntoParam<super::super::super::Windows::UI::Xaml::Interop::TypeName>,
    {
        let this = self;
        unsafe {
            (::windows_core::Interface::vtable(this).SetTargetType)(
                ::windows_core::Interface::as_raw(this),
                value.into_param().abi(),
            )
            .ok()
        }
    }
    pub fn BasedOn(&self) -> ::windows_core::Result<Style> {
        let this = self;
        unsafe {
            let mut result__ = ::std::mem::zeroed();
            (::windows_core::Interface::vtable(this).BasedOn)(
                ::windows_core::Interface::as_raw(this),
                &mut result__,
            )
            .from_abi(result__)
        }
    }
    pub fn SetBasedOn<P0>(&self, value: P0) -> ::windows_core::Result<()>
    where
        P0: ::windows_core::IntoParam<Style>,
    {
        let this = self;
        unsafe {
            (::windows_core::Interface::vtable(this).SetBasedOn)(
                ::windows_core::Interface::as_raw(this),
                value.into_param().abi(),
            )
            .ok()
        }
    }
    pub fn Seal(&self) -> ::windows_core::Result<()> {
        let this = self;
        unsafe {
            (::windows_core::Interface::vtable(this).Seal)(::windows_core::Interface::as_raw(this))
                .ok()
        }
    }
    #[doc = "Required features: `\"Windows_UI_Xaml_Interop\"`"]
    #[cfg(feature = "Windows_UI_Xaml_Interop")]
    pub fn CreateInstance<P0>(targettype: P0) -> ::windows_core::Result<Style>
    where
        P0: ::windows_core::IntoParam<super::super::super::Windows::UI::Xaml::Interop::TypeName>,
    {
        Self::IStyleFactory(|this| unsafe {
            let mut result__ = ::std::mem::zeroed();
            (::windows_core::Interface::vtable(this).CreateInstance)(
                ::windows_core::Interface::as_raw(this),
                targettype.into_param().abi(),
                &mut result__,
            )
            .from_abi(result__)
        })
    }
    #[doc(hidden)]
    pub fn IStyleFactory<R, F: FnOnce(&IStyleFactory) -> ::windows_core::Result<R>>(
        callback: F,
    ) -> ::windows_core::Result<R> {
        static SHARED: ::windows_core::imp::FactoryCache<Style, IStyleFactory> =
            ::windows_core::imp::FactoryCache::new();
        SHARED.call(callback)
    }
}
impl ::windows_core::RuntimeType for Style {
    const SIGNATURE: ::windows_core::imp::ConstBuffer =
        ::windows_core::imp::ConstBuffer::for_class::<Self>();
}
unsafe impl ::windows_core::Interface for Style {
    type Vtable = IStyle_Vtbl;
}
unsafe impl ::windows_core::ComInterface for Style {
    const IID: ::windows_core::GUID = <IStyle as ::windows_core::ComInterface>::IID;
}
impl ::windows_core::RuntimeName for Style {
    const NAME: &'static str = "Microsoft.UI.Xaml.Style";
}
::windows_core::imp::interface_hierarchy!(
    Style,
    ::windows_core::IUnknown,
    ::windows_core::IInspectable
);
impl ::windows_core::CanTryInto<DependencyObject> for Style {}
unsafe impl ::core::marker::Send for Style {}
unsafe impl ::core::marker::Sync for Style {}
#[repr(transparent)]
#[derive(::core::cmp::PartialEq, ::core::cmp::Eq, ::core::fmt::Debug, ::core::clone::Clone)]
pub struct TargetPropertyPath(::windows_core::IUnknown);
impl TargetPropertyPath {
    pub fn new() -> ::windows_core::Result<Self> {
        Self::IActivationFactory(|f| f.ActivateInstance::<Self>())
    }
    fn IActivationFactory<
        R,
        F: FnOnce(&::windows_core::imp::IGenericFactory) -> ::windows_core::Result<R>,
    >(
        callback: F,
    ) -> ::windows_core::Result<R> {
        static SHARED: ::windows_core::imp::FactoryCache<
            TargetPropertyPath,
            ::windows_core::imp::IGenericFactory,
        > = ::windows_core::imp::FactoryCache::new();
        SHARED.call(callback)
    }
    pub fn Path(&self) -> ::windows_core::Result<PropertyPath> {
        let this = self;
        unsafe {
            let mut result__ = ::std::mem::zeroed();
            (::windows_core::Interface::vtable(this).Path)(
                ::windows_core::Interface::as_raw(this),
                &mut result__,
            )
            .from_abi(result__)
        }
    }
    pub fn SetPath<P0>(&self, value: P0) -> ::windows_core::Result<()>
    where
        P0: ::windows_core::IntoParam<PropertyPath>,
    {
        let this = self;
        unsafe {
            (::windows_core::Interface::vtable(this).SetPath)(
                ::windows_core::Interface::as_raw(this),
                value.into_param().abi(),
            )
            .ok()
        }
    }
    pub fn Target(&self) -> ::windows_core::Result<::windows_core::IInspectable> {
        let this = self;
        unsafe {
            let mut result__ = ::std::mem::zeroed();
            (::windows_core::Interface::vtable(this).Target)(
                ::windows_core::Interface::as_raw(this),
                &mut result__,
            )
            .from_abi(result__)
        }
    }
    pub fn SetTarget<P0>(&self, value: P0) -> ::windows_core::Result<()>
    where
        P0: ::windows_core::IntoParam<::windows_core::IInspectable>,
    {
        let this = self;
        unsafe {
            (::windows_core::Interface::vtable(this).SetTarget)(
                ::windows_core::Interface::as_raw(this),
                value.into_param().abi(),
            )
            .ok()
        }
    }
    pub fn CreateInstance<P0>(targetproperty: P0) -> ::windows_core::Result<TargetPropertyPath>
    where
        P0: ::windows_core::IntoParam<DependencyProperty>,
    {
        Self::ITargetPropertyPathFactory(|this| unsafe {
            let mut result__ = ::std::mem::zeroed();
            (::windows_core::Interface::vtable(this).CreateInstance)(
                ::windows_core::Interface::as_raw(this),
                targetproperty.into_param().abi(),
                &mut result__,
            )
            .from_abi(result__)
        })
    }
    #[doc(hidden)]
    pub fn ITargetPropertyPathFactory<
        R,
        F: FnOnce(&ITargetPropertyPathFactory) -> ::windows_core::Result<R>,
    >(
        callback: F,
    ) -> ::windows_core::Result<R> {
        static SHARED: ::windows_core::imp::FactoryCache<
            TargetPropertyPath,
            ITargetPropertyPathFactory,
        > = ::windows_core::imp::FactoryCache::new();
        SHARED.call(callback)
    }
}
impl ::windows_core::RuntimeType for TargetPropertyPath {
    const SIGNATURE: ::windows_core::imp::ConstBuffer =
        ::windows_core::imp::ConstBuffer::for_class::<Self>();
}
unsafe impl ::windows_core::Interface for TargetPropertyPath {
    type Vtable = ITargetPropertyPath_Vtbl;
}
unsafe impl ::windows_core::ComInterface for TargetPropertyPath {
    const IID: ::windows_core::GUID = <ITargetPropertyPath as ::windows_core::ComInterface>::IID;
}
impl ::windows_core::RuntimeName for TargetPropertyPath {
    const NAME: &'static str = "Microsoft.UI.Xaml.TargetPropertyPath";
}
::windows_core::imp::interface_hierarchy!(
    TargetPropertyPath,
    ::windows_core::IUnknown,
    ::windows_core::IInspectable
);
unsafe impl ::core::marker::Send for TargetPropertyPath {}
unsafe impl ::core::marker::Sync for TargetPropertyPath {}
#[repr(transparent)]
#[derive(::core::cmp::PartialEq, ::core::cmp::Eq, ::core::fmt::Debug, ::core::clone::Clone)]
pub struct ThicknessHelper(::windows_core::IUnknown);
impl ThicknessHelper {
    pub fn FromLengths(
        left: f64,
        top: f64,
        right: f64,
        bottom: f64,
    ) -> ::windows_core::Result<Thickness> {
        Self::IThicknessHelperStatics(|this| unsafe {
            let mut result__ = ::std::mem::zeroed();
            (::windows_core::Interface::vtable(this).FromLengths)(
                ::windows_core::Interface::as_raw(this),
                left,
                top,
                right,
                bottom,
                &mut result__,
            )
            .from_abi(result__)
        })
    }
    pub fn FromUniformLength(uniformlength: f64) -> ::windows_core::Result<Thickness> {
        Self::IThicknessHelperStatics(|this| unsafe {
            let mut result__ = ::std::mem::zeroed();
            (::windows_core::Interface::vtable(this).FromUniformLength)(
                ::windows_core::Interface::as_raw(this),
                uniformlength,
                &mut result__,
            )
            .from_abi(result__)
        })
    }
    #[doc(hidden)]
    pub fn IThicknessHelperStatics<
        R,
        F: FnOnce(&IThicknessHelperStatics) -> ::windows_core::Result<R>,
    >(
        callback: F,
    ) -> ::windows_core::Result<R> {
        static SHARED: ::windows_core::imp::FactoryCache<ThicknessHelper, IThicknessHelperStatics> =
            ::windows_core::imp::FactoryCache::new();
        SHARED.call(callback)
    }
}
impl ::windows_core::RuntimeType for ThicknessHelper {
    const SIGNATURE: ::windows_core::imp::ConstBuffer =
        ::windows_core::imp::ConstBuffer::for_class::<Self>();
}
unsafe impl ::windows_core::Interface for ThicknessHelper {
    type Vtable = IThicknessHelper_Vtbl;
}
unsafe impl ::windows_core::ComInterface for ThicknessHelper {
    const IID: ::windows_core::GUID = <IThicknessHelper as ::windows_core::ComInterface>::IID;
}
impl ::windows_core::RuntimeName for ThicknessHelper {
    const NAME: &'static str = "Microsoft.UI.Xaml.ThicknessHelper";
}
::windows_core::imp::interface_hierarchy!(
    ThicknessHelper,
    ::windows_core::IUnknown,
    ::windows_core::IInspectable
);
unsafe impl ::core::marker::Send for ThicknessHelper {}
unsafe impl ::core::marker::Sync for ThicknessHelper {}
#[repr(transparent)]
#[derive(::core::cmp::PartialEq, ::core::cmp::Eq, ::core::fmt::Debug, ::core::clone::Clone)]
pub struct TriggerAction(::windows_core::IUnknown);
impl TriggerAction {
    pub fn GetValue<P0>(&self, dp: P0) -> ::windows_core::Result<::windows_core::IInspectable>
    where
        P0: ::windows_core::IntoParam<DependencyProperty>,
    {
        let this = &::windows_core::ComInterface::cast::<IDependencyObject>(self)?;
        unsafe {
            let mut result__ = ::std::mem::zeroed();
            (::windows_core::Interface::vtable(this).GetValue)(
                ::windows_core::Interface::as_raw(this),
                dp.into_param().abi(),
                &mut result__,
            )
            .from_abi(result__)
        }
    }
    pub fn SetValue<P0, P1>(&self, dp: P0, value: P1) -> ::windows_core::Result<()>
    where
        P0: ::windows_core::IntoParam<DependencyProperty>,
        P1: ::windows_core::IntoParam<::windows_core::IInspectable>,
    {
        let this = &::windows_core::ComInterface::cast::<IDependencyObject>(self)?;
        unsafe {
            (::windows_core::Interface::vtable(this).SetValue)(
                ::windows_core::Interface::as_raw(this),
                dp.into_param().abi(),
                value.into_param().abi(),
            )
            .ok()
        }
    }
    pub fn ClearValue<P0>(&self, dp: P0) -> ::windows_core::Result<()>
    where
        P0: ::windows_core::IntoParam<DependencyProperty>,
    {
        let this = &::windows_core::ComInterface::cast::<IDependencyObject>(self)?;
        unsafe {
            (::windows_core::Interface::vtable(this).ClearValue)(
                ::windows_core::Interface::as_raw(this),
                dp.into_param().abi(),
            )
            .ok()
        }
    }
    pub fn ReadLocalValue<P0>(&self, dp: P0) -> ::windows_core::Result<::windows_core::IInspectable>
    where
        P0: ::windows_core::IntoParam<DependencyProperty>,
    {
        let this = &::windows_core::ComInterface::cast::<IDependencyObject>(self)?;
        unsafe {
            let mut result__ = ::std::mem::zeroed();
            (::windows_core::Interface::vtable(this).ReadLocalValue)(
                ::windows_core::Interface::as_raw(this),
                dp.into_param().abi(),
                &mut result__,
            )
            .from_abi(result__)
        }
    }
    pub fn GetAnimationBaseValue<P0>(
        &self,
        dp: P0,
    ) -> ::windows_core::Result<::windows_core::IInspectable>
    where
        P0: ::windows_core::IntoParam<DependencyProperty>,
    {
        let this = &::windows_core::ComInterface::cast::<IDependencyObject>(self)?;
        unsafe {
            let mut result__ = ::std::mem::zeroed();
            (::windows_core::Interface::vtable(this).GetAnimationBaseValue)(
                ::windows_core::Interface::as_raw(this),
                dp.into_param().abi(),
                &mut result__,
            )
            .from_abi(result__)
        }
    }
    pub fn RegisterPropertyChangedCallback<P0, P1>(
        &self,
        dp: P0,
        callback: P1,
    ) -> ::windows_core::Result<i64>
    where
        P0: ::windows_core::IntoParam<DependencyProperty>,
        P1: ::windows_core::IntoParam<DependencyPropertyChangedCallback>,
    {
        let this = &::windows_core::ComInterface::cast::<IDependencyObject>(self)?;
        unsafe {
            let mut result__ = ::std::mem::zeroed();
            (::windows_core::Interface::vtable(this).RegisterPropertyChangedCallback)(
                ::windows_core::Interface::as_raw(this),
                dp.into_param().abi(),
                callback.into_param().abi(),
                &mut result__,
            )
            .from_abi(result__)
        }
    }
    pub fn UnregisterPropertyChangedCallback<P0>(
        &self,
        dp: P0,
        token: i64,
    ) -> ::windows_core::Result<()>
    where
        P0: ::windows_core::IntoParam<DependencyProperty>,
    {
        let this = &::windows_core::ComInterface::cast::<IDependencyObject>(self)?;
        unsafe {
            (::windows_core::Interface::vtable(this).UnregisterPropertyChangedCallback)(
                ::windows_core::Interface::as_raw(this),
                dp.into_param().abi(),
                token,
            )
            .ok()
        }
    }
    #[doc = "Required features: `\"Windows_UI_Core\"`"]
    #[cfg(feature = "Windows_UI_Core")]
    pub fn Dispatcher(&self) -> ::windows_core::Result<::windows::UI::Core::CoreDispatcher> {
        let this = &::windows_core::ComInterface::cast::<IDependencyObject>(self)?;
        unsafe {
            let mut result__ = ::std::mem::zeroed();
            (::windows_core::Interface::vtable(this).Dispatcher)(
                ::windows_core::Interface::as_raw(this),
                &mut result__,
            )
            .from_abi(result__)
        }
    }
    #[doc = "Required features: `\"Microsoft_UI_Dispatching\"`"]
    #[cfg(feature = "Microsoft_UI_Dispatching")]
    pub fn DispatcherQueue(&self) -> ::windows_core::Result<super::Dispatching::DispatcherQueue> {
        let this = &::windows_core::ComInterface::cast::<IDependencyObject>(self)?;
        unsafe {
            let mut result__ = ::std::mem::zeroed();
            (::windows_core::Interface::vtable(this).DispatcherQueue)(
                ::windows_core::Interface::as_raw(this),
                &mut result__,
            )
            .from_abi(result__)
        }
    }
}
impl ::windows_core::RuntimeType for TriggerAction {
    const SIGNATURE: ::windows_core::imp::ConstBuffer =
        ::windows_core::imp::ConstBuffer::for_class::<Self>();
}
unsafe impl ::windows_core::Interface for TriggerAction {
    type Vtable = ITriggerAction_Vtbl;
}
unsafe impl ::windows_core::ComInterface for TriggerAction {
    const IID: ::windows_core::GUID = <ITriggerAction as ::windows_core::ComInterface>::IID;
}
impl ::windows_core::RuntimeName for TriggerAction {
    const NAME: &'static str = "Microsoft.UI.Xaml.TriggerAction";
}
::windows_core::imp::interface_hierarchy!(
    TriggerAction,
    ::windows_core::IUnknown,
    ::windows_core::IInspectable
);
impl ::windows_core::CanTryInto<DependencyObject> for TriggerAction {}
unsafe impl ::core::marker::Send for TriggerAction {}
unsafe impl ::core::marker::Sync for TriggerAction {}
#[doc = "Required features: `\"Windows_Foundation_Collections\"`"]
#[cfg(feature = "Windows_Foundation_Collections")]
#[repr(transparent)]
#[derive(::core::cmp::PartialEq, ::core::cmp::Eq, ::core::fmt::Debug, ::core::clone::Clone)]
pub struct TriggerActionCollection(::windows_core::IUnknown);
#[cfg(feature = "Windows_Foundation_Collections")]
impl TriggerActionCollection {
    pub fn new() -> ::windows_core::Result<Self> {
        Self::IActivationFactory(|f| f.ActivateInstance::<Self>())
    }
    fn IActivationFactory<
        R,
        F: FnOnce(&::windows_core::imp::IGenericFactory) -> ::windows_core::Result<R>,
    >(
        callback: F,
    ) -> ::windows_core::Result<R> {
        static SHARED: ::windows_core::imp::FactoryCache<
            TriggerActionCollection,
            ::windows_core::imp::IGenericFactory,
        > = ::windows_core::imp::FactoryCache::new();
        SHARED.call(callback)
    }
    #[doc = "Required features: `\"Windows_Foundation_Collections\"`"]
    #[cfg(feature = "Windows_Foundation_Collections")]
    pub fn First(
        &self,
    ) -> ::windows_core::Result<::windows::Foundation::Collections::IIterator<TriggerAction>> {
        let this = &::windows_core::ComInterface::cast::<
            ::windows::Foundation::Collections::IIterable<TriggerAction>,
        >(self)?;
        unsafe {
            let mut result__ = ::std::mem::zeroed();
            (::windows_core::Interface::vtable(this).First)(
                ::windows_core::Interface::as_raw(this),
                &mut result__,
            )
            .from_abi(result__)
        }
    }
    #[doc = "Required features: `\"Windows_Foundation_Collections\"`"]
    #[cfg(feature = "Windows_Foundation_Collections")]
    pub fn GetAt(&self, index: u32) -> ::windows_core::Result<TriggerAction> {
        let this = self;
        unsafe {
            let mut result__ = ::std::mem::zeroed();
            (::windows_core::Interface::vtable(this).GetAt)(
                ::windows_core::Interface::as_raw(this),
                index,
                &mut result__,
            )
            .from_abi(result__)
        }
    }
    #[doc = "Required features: `\"Windows_Foundation_Collections\"`"]
    #[cfg(feature = "Windows_Foundation_Collections")]
    pub fn Size(&self) -> ::windows_core::Result<u32> {
        let this = self;
        unsafe {
            let mut result__ = ::std::mem::zeroed();
            (::windows_core::Interface::vtable(this).Size)(
                ::windows_core::Interface::as_raw(this),
                &mut result__,
            )
            .from_abi(result__)
        }
    }
    #[doc = "Required features: `\"Windows_Foundation_Collections\"`"]
    #[cfg(feature = "Windows_Foundation_Collections")]
    pub fn GetView(
        &self,
    ) -> ::windows_core::Result<::windows::Foundation::Collections::IVectorView<TriggerAction>>
    {
        let this = self;
        unsafe {
            let mut result__ = ::std::mem::zeroed();
            (::windows_core::Interface::vtable(this).GetView)(
                ::windows_core::Interface::as_raw(this),
                &mut result__,
            )
            .from_abi(result__)
        }
    }
    #[doc = "Required features: `\"Windows_Foundation_Collections\"`"]
    #[cfg(feature = "Windows_Foundation_Collections")]
    pub fn IndexOf<P0>(&self, value: P0, index: &mut u32) -> ::windows_core::Result<bool>
    where
        P0: ::windows_core::TryIntoParam<TriggerAction>,
    {
        let this = self;
        unsafe {
            let mut result__ = ::std::mem::zeroed();
            (::windows_core::Interface::vtable(this).IndexOf)(
                ::windows_core::Interface::as_raw(this),
                value.try_into_param()?.abi(),
                index,
                &mut result__,
            )
            .from_abi(result__)
        }
    }
    #[doc = "Required features: `\"Windows_Foundation_Collections\"`"]
    #[cfg(feature = "Windows_Foundation_Collections")]
    pub fn SetAt<P0>(&self, index: u32, value: P0) -> ::windows_core::Result<()>
    where
        P0: ::windows_core::TryIntoParam<TriggerAction>,
    {
        let this = self;
        unsafe {
            (::windows_core::Interface::vtable(this).SetAt)(
                ::windows_core::Interface::as_raw(this),
                index,
                value.try_into_param()?.abi(),
            )
            .ok()
        }
    }
    #[doc = "Required features: `\"Windows_Foundation_Collections\"`"]
    #[cfg(feature = "Windows_Foundation_Collections")]
    pub fn InsertAt<P0>(&self, index: u32, value: P0) -> ::windows_core::Result<()>
    where
        P0: ::windows_core::TryIntoParam<TriggerAction>,
    {
        let this = self;
        unsafe {
            (::windows_core::Interface::vtable(this).InsertAt)(
                ::windows_core::Interface::as_raw(this),
                index,
                value.try_into_param()?.abi(),
            )
            .ok()
        }
    }
    #[doc = "Required features: `\"Windows_Foundation_Collections\"`"]
    #[cfg(feature = "Windows_Foundation_Collections")]
    pub fn RemoveAt(&self, index: u32) -> ::windows_core::Result<()> {
        let this = self;
        unsafe {
            (::windows_core::Interface::vtable(this).RemoveAt)(
                ::windows_core::Interface::as_raw(this),
                index,
            )
            .ok()
        }
    }
    #[doc = "Required features: `\"Windows_Foundation_Collections\"`"]
    #[cfg(feature = "Windows_Foundation_Collections")]
    pub fn Append<P0>(&self, value: P0) -> ::windows_core::Result<()>
    where
        P0: ::windows_core::TryIntoParam<TriggerAction>,
    {
        let this = self;
        unsafe {
            (::windows_core::Interface::vtable(this).Append)(
                ::windows_core::Interface::as_raw(this),
                value.try_into_param()?.abi(),
            )
            .ok()
        }
    }
    #[doc = "Required features: `\"Windows_Foundation_Collections\"`"]
    #[cfg(feature = "Windows_Foundation_Collections")]
    pub fn RemoveAtEnd(&self) -> ::windows_core::Result<()> {
        let this = self;
        unsafe {
            (::windows_core::Interface::vtable(this).RemoveAtEnd)(
                ::windows_core::Interface::as_raw(this),
            )
            .ok()
        }
    }
    #[doc = "Required features: `\"Windows_Foundation_Collections\"`"]
    #[cfg(feature = "Windows_Foundation_Collections")]
    pub fn Clear(&self) -> ::windows_core::Result<()> {
        let this = self;
        unsafe {
            (::windows_core::Interface::vtable(this).Clear)(::windows_core::Interface::as_raw(this))
                .ok()
        }
    }
    #[doc = "Required features: `\"Windows_Foundation_Collections\"`"]
    #[cfg(feature = "Windows_Foundation_Collections")]
    pub fn GetMany(
        &self,
        startindex: u32,
        items: &mut [::core::option::Option<TriggerAction>],
    ) -> ::windows_core::Result<u32> {
        let this = self;
        unsafe {
            let mut result__ = ::std::mem::zeroed();
            (::windows_core::Interface::vtable(this).GetMany)(
                ::windows_core::Interface::as_raw(this),
                startindex,
                items.len().try_into().unwrap(),
                ::core::mem::transmute_copy(&items),
                &mut result__,
            )
            .from_abi(result__)
        }
    }
    #[doc = "Required features: `\"Windows_Foundation_Collections\"`"]
    #[cfg(feature = "Windows_Foundation_Collections")]
    pub fn ReplaceAll(
        &self,
        items: &[::core::option::Option<TriggerAction>],
    ) -> ::windows_core::Result<()> {
        let this = self;
        unsafe {
            (::windows_core::Interface::vtable(this).ReplaceAll)(
                ::windows_core::Interface::as_raw(this),
                items.len().try_into().unwrap(),
                ::core::mem::transmute(items.as_ptr()),
            )
            .ok()
        }
    }
}
#[cfg(feature = "Windows_Foundation_Collections")]
impl ::windows_core::RuntimeType for TriggerActionCollection {
    const SIGNATURE: ::windows_core::imp::ConstBuffer =
        ::windows_core::imp::ConstBuffer::for_class::<Self>();
}
#[cfg(feature = "Windows_Foundation_Collections")]
unsafe impl ::windows_core::Interface for TriggerActionCollection {
    type Vtable = ::windows::Foundation::Collections::IVector_Vtbl<TriggerAction>;
}
#[cfg(feature = "Windows_Foundation_Collections")]
unsafe impl ::windows_core::ComInterface for TriggerActionCollection {
    const IID : ::windows_core::GUID = < ::windows::Foundation::Collections:: IVector :: < TriggerAction > as::windows_core::ComInterface >::IID ;
}
#[cfg(feature = "Windows_Foundation_Collections")]
impl ::windows_core::RuntimeName for TriggerActionCollection {
    const NAME: &'static str = "Microsoft.UI.Xaml.TriggerActionCollection";
}
#[cfg(feature = "Windows_Foundation_Collections")]
impl ::core::iter::IntoIterator for TriggerActionCollection {
    type Item = TriggerAction;
    type IntoIter = ::windows::Foundation::Collections::VectorIterator<Self::Item>;
    fn into_iter(self) -> Self::IntoIter {
        ::core::iter::IntoIterator::into_iter(&self)
    }
}
#[cfg(feature = "Windows_Foundation_Collections")]
impl ::core::iter::IntoIterator for &TriggerActionCollection {
    type Item = TriggerAction;
    type IntoIter = ::windows::Foundation::Collections::VectorIterator<Self::Item>;
    fn into_iter(self) -> Self::IntoIter {
        ::windows::Foundation::Collections::VectorIterator::new(
            ::windows_core::ComInterface::cast(self).ok(),
        )
    }
}
#[cfg(feature = "Windows_Foundation_Collections")]
::windows_core::imp::interface_hierarchy!(
    TriggerActionCollection,
    ::windows_core::IUnknown,
    ::windows_core::IInspectable
);
#[cfg(feature = "Windows_Foundation_Collections")]
impl ::windows_core::CanTryInto<::windows::Foundation::Collections::IIterable<TriggerAction>>
    for TriggerActionCollection
{
}
#[cfg(feature = "Windows_Foundation_Collections")]
impl ::windows_core::CanTryInto<::windows::Foundation::Collections::IVector<TriggerAction>>
    for TriggerActionCollection
{
}
#[cfg(feature = "Windows_Foundation_Collections")]
unsafe impl ::core::marker::Send for TriggerActionCollection {}
#[cfg(feature = "Windows_Foundation_Collections")]
unsafe impl ::core::marker::Sync for TriggerActionCollection {}
#[repr(transparent)]
#[derive(::core::cmp::PartialEq, ::core::cmp::Eq, ::core::fmt::Debug, ::core::clone::Clone)]
pub struct TriggerBase(::windows_core::IUnknown);
impl TriggerBase {
    pub fn GetValue<P0>(&self, dp: P0) -> ::windows_core::Result<::windows_core::IInspectable>
    where
        P0: ::windows_core::IntoParam<DependencyProperty>,
    {
        let this = &::windows_core::ComInterface::cast::<IDependencyObject>(self)?;
        unsafe {
            let mut result__ = ::std::mem::zeroed();
            (::windows_core::Interface::vtable(this).GetValue)(
                ::windows_core::Interface::as_raw(this),
                dp.into_param().abi(),
                &mut result__,
            )
            .from_abi(result__)
        }
    }
    pub fn SetValue<P0, P1>(&self, dp: P0, value: P1) -> ::windows_core::Result<()>
    where
        P0: ::windows_core::IntoParam<DependencyProperty>,
        P1: ::windows_core::IntoParam<::windows_core::IInspectable>,
    {
        let this = &::windows_core::ComInterface::cast::<IDependencyObject>(self)?;
        unsafe {
            (::windows_core::Interface::vtable(this).SetValue)(
                ::windows_core::Interface::as_raw(this),
                dp.into_param().abi(),
                value.into_param().abi(),
            )
            .ok()
        }
    }
    pub fn ClearValue<P0>(&self, dp: P0) -> ::windows_core::Result<()>
    where
        P0: ::windows_core::IntoParam<DependencyProperty>,
    {
        let this = &::windows_core::ComInterface::cast::<IDependencyObject>(self)?;
        unsafe {
            (::windows_core::Interface::vtable(this).ClearValue)(
                ::windows_core::Interface::as_raw(this),
                dp.into_param().abi(),
            )
            .ok()
        }
    }
    pub fn ReadLocalValue<P0>(&self, dp: P0) -> ::windows_core::Result<::windows_core::IInspectable>
    where
        P0: ::windows_core::IntoParam<DependencyProperty>,
    {
        let this = &::windows_core::ComInterface::cast::<IDependencyObject>(self)?;
        unsafe {
            let mut result__ = ::std::mem::zeroed();
            (::windows_core::Interface::vtable(this).ReadLocalValue)(
                ::windows_core::Interface::as_raw(this),
                dp.into_param().abi(),
                &mut result__,
            )
            .from_abi(result__)
        }
    }
    pub fn GetAnimationBaseValue<P0>(
        &self,
        dp: P0,
    ) -> ::windows_core::Result<::windows_core::IInspectable>
    where
        P0: ::windows_core::IntoParam<DependencyProperty>,
    {
        let this = &::windows_core::ComInterface::cast::<IDependencyObject>(self)?;
        unsafe {
            let mut result__ = ::std::mem::zeroed();
            (::windows_core::Interface::vtable(this).GetAnimationBaseValue)(
                ::windows_core::Interface::as_raw(this),
                dp.into_param().abi(),
                &mut result__,
            )
            .from_abi(result__)
        }
    }
    pub fn RegisterPropertyChangedCallback<P0, P1>(
        &self,
        dp: P0,
        callback: P1,
    ) -> ::windows_core::Result<i64>
    where
        P0: ::windows_core::IntoParam<DependencyProperty>,
        P1: ::windows_core::IntoParam<DependencyPropertyChangedCallback>,
    {
        let this = &::windows_core::ComInterface::cast::<IDependencyObject>(self)?;
        unsafe {
            let mut result__ = ::std::mem::zeroed();
            (::windows_core::Interface::vtable(this).RegisterPropertyChangedCallback)(
                ::windows_core::Interface::as_raw(this),
                dp.into_param().abi(),
                callback.into_param().abi(),
                &mut result__,
            )
            .from_abi(result__)
        }
    }
    pub fn UnregisterPropertyChangedCallback<P0>(
        &self,
        dp: P0,
        token: i64,
    ) -> ::windows_core::Result<()>
    where
        P0: ::windows_core::IntoParam<DependencyProperty>,
    {
        let this = &::windows_core::ComInterface::cast::<IDependencyObject>(self)?;
        unsafe {
            (::windows_core::Interface::vtable(this).UnregisterPropertyChangedCallback)(
                ::windows_core::Interface::as_raw(this),
                dp.into_param().abi(),
                token,
            )
            .ok()
        }
    }
    #[doc = "Required features: `\"Windows_UI_Core\"`"]
    #[cfg(feature = "Windows_UI_Core")]
    pub fn Dispatcher(&self) -> ::windows_core::Result<::windows::UI::Core::CoreDispatcher> {
        let this = &::windows_core::ComInterface::cast::<IDependencyObject>(self)?;
        unsafe {
            let mut result__ = ::std::mem::zeroed();
            (::windows_core::Interface::vtable(this).Dispatcher)(
                ::windows_core::Interface::as_raw(this),
                &mut result__,
            )
            .from_abi(result__)
        }
    }
    #[doc = "Required features: `\"Microsoft_UI_Dispatching\"`"]
    #[cfg(feature = "Microsoft_UI_Dispatching")]
    pub fn DispatcherQueue(&self) -> ::windows_core::Result<super::Dispatching::DispatcherQueue> {
        let this = &::windows_core::ComInterface::cast::<IDependencyObject>(self)?;
        unsafe {
            let mut result__ = ::std::mem::zeroed();
            (::windows_core::Interface::vtable(this).DispatcherQueue)(
                ::windows_core::Interface::as_raw(this),
                &mut result__,
            )
            .from_abi(result__)
        }
    }
}
impl ::windows_core::RuntimeType for TriggerBase {
    const SIGNATURE: ::windows_core::imp::ConstBuffer =
        ::windows_core::imp::ConstBuffer::for_class::<Self>();
}
unsafe impl ::windows_core::Interface for TriggerBase {
    type Vtable = ITriggerBase_Vtbl;
}
unsafe impl ::windows_core::ComInterface for TriggerBase {
    const IID: ::windows_core::GUID = <ITriggerBase as ::windows_core::ComInterface>::IID;
}
impl ::windows_core::RuntimeName for TriggerBase {
    const NAME: &'static str = "Microsoft.UI.Xaml.TriggerBase";
}
::windows_core::imp::interface_hierarchy!(
    TriggerBase,
    ::windows_core::IUnknown,
    ::windows_core::IInspectable
);
impl ::windows_core::CanTryInto<DependencyObject> for TriggerBase {}
unsafe impl ::core::marker::Send for TriggerBase {}
unsafe impl ::core::marker::Sync for TriggerBase {}
#[doc = "Required features: `\"Windows_Foundation_Collections\"`"]
#[cfg(feature = "Windows_Foundation_Collections")]
#[repr(transparent)]
#[derive(::core::cmp::PartialEq, ::core::cmp::Eq, ::core::fmt::Debug, ::core::clone::Clone)]
pub struct TriggerCollection(::windows_core::IUnknown);
#[cfg(feature = "Windows_Foundation_Collections")]
impl TriggerCollection {
    #[doc = "Required features: `\"Windows_Foundation_Collections\"`"]
    #[cfg(feature = "Windows_Foundation_Collections")]
    pub fn First(
        &self,
    ) -> ::windows_core::Result<::windows::Foundation::Collections::IIterator<TriggerBase>> {
        let this = &::windows_core::ComInterface::cast::<
            ::windows::Foundation::Collections::IIterable<TriggerBase>,
        >(self)?;
        unsafe {
            let mut result__ = ::std::mem::zeroed();
            (::windows_core::Interface::vtable(this).First)(
                ::windows_core::Interface::as_raw(this),
                &mut result__,
            )
            .from_abi(result__)
        }
    }
    #[doc = "Required features: `\"Windows_Foundation_Collections\"`"]
    #[cfg(feature = "Windows_Foundation_Collections")]
    pub fn GetAt(&self, index: u32) -> ::windows_core::Result<TriggerBase> {
        let this = self;
        unsafe {
            let mut result__ = ::std::mem::zeroed();
            (::windows_core::Interface::vtable(this).GetAt)(
                ::windows_core::Interface::as_raw(this),
                index,
                &mut result__,
            )
            .from_abi(result__)
        }
    }
    #[doc = "Required features: `\"Windows_Foundation_Collections\"`"]
    #[cfg(feature = "Windows_Foundation_Collections")]
    pub fn Size(&self) -> ::windows_core::Result<u32> {
        let this = self;
        unsafe {
            let mut result__ = ::std::mem::zeroed();
            (::windows_core::Interface::vtable(this).Size)(
                ::windows_core::Interface::as_raw(this),
                &mut result__,
            )
            .from_abi(result__)
        }
    }
    #[doc = "Required features: `\"Windows_Foundation_Collections\"`"]
    #[cfg(feature = "Windows_Foundation_Collections")]
    pub fn GetView(
        &self,
    ) -> ::windows_core::Result<::windows::Foundation::Collections::IVectorView<TriggerBase>> {
        let this = self;
        unsafe {
            let mut result__ = ::std::mem::zeroed();
            (::windows_core::Interface::vtable(this).GetView)(
                ::windows_core::Interface::as_raw(this),
                &mut result__,
            )
            .from_abi(result__)
        }
    }
    #[doc = "Required features: `\"Windows_Foundation_Collections\"`"]
    #[cfg(feature = "Windows_Foundation_Collections")]
    pub fn IndexOf<P0>(&self, value: P0, index: &mut u32) -> ::windows_core::Result<bool>
    where
        P0: ::windows_core::TryIntoParam<TriggerBase>,
    {
        let this = self;
        unsafe {
            let mut result__ = ::std::mem::zeroed();
            (::windows_core::Interface::vtable(this).IndexOf)(
                ::windows_core::Interface::as_raw(this),
                value.try_into_param()?.abi(),
                index,
                &mut result__,
            )
            .from_abi(result__)
        }
    }
    #[doc = "Required features: `\"Windows_Foundation_Collections\"`"]
    #[cfg(feature = "Windows_Foundation_Collections")]
    pub fn SetAt<P0>(&self, index: u32, value: P0) -> ::windows_core::Result<()>
    where
        P0: ::windows_core::TryIntoParam<TriggerBase>,
    {
        let this = self;
        unsafe {
            (::windows_core::Interface::vtable(this).SetAt)(
                ::windows_core::Interface::as_raw(this),
                index,
                value.try_into_param()?.abi(),
            )
            .ok()
        }
    }
    #[doc = "Required features: `\"Windows_Foundation_Collections\"`"]
    #[cfg(feature = "Windows_Foundation_Collections")]
    pub fn InsertAt<P0>(&self, index: u32, value: P0) -> ::windows_core::Result<()>
    where
        P0: ::windows_core::TryIntoParam<TriggerBase>,
    {
        let this = self;
        unsafe {
            (::windows_core::Interface::vtable(this).InsertAt)(
                ::windows_core::Interface::as_raw(this),
                index,
                value.try_into_param()?.abi(),
            )
            .ok()
        }
    }
    #[doc = "Required features: `\"Windows_Foundation_Collections\"`"]
    #[cfg(feature = "Windows_Foundation_Collections")]
    pub fn RemoveAt(&self, index: u32) -> ::windows_core::Result<()> {
        let this = self;
        unsafe {
            (::windows_core::Interface::vtable(this).RemoveAt)(
                ::windows_core::Interface::as_raw(this),
                index,
            )
            .ok()
        }
    }
    #[doc = "Required features: `\"Windows_Foundation_Collections\"`"]
    #[cfg(feature = "Windows_Foundation_Collections")]
    pub fn Append<P0>(&self, value: P0) -> ::windows_core::Result<()>
    where
        P0: ::windows_core::TryIntoParam<TriggerBase>,
    {
        let this = self;
        unsafe {
            (::windows_core::Interface::vtable(this).Append)(
                ::windows_core::Interface::as_raw(this),
                value.try_into_param()?.abi(),
            )
            .ok()
        }
    }
    #[doc = "Required features: `\"Windows_Foundation_Collections\"`"]
    #[cfg(feature = "Windows_Foundation_Collections")]
    pub fn RemoveAtEnd(&self) -> ::windows_core::Result<()> {
        let this = self;
        unsafe {
            (::windows_core::Interface::vtable(this).RemoveAtEnd)(
                ::windows_core::Interface::as_raw(this),
            )
            .ok()
        }
    }
    #[doc = "Required features: `\"Windows_Foundation_Collections\"`"]
    #[cfg(feature = "Windows_Foundation_Collections")]
    pub fn Clear(&self) -> ::windows_core::Result<()> {
        let this = self;
        unsafe {
            (::windows_core::Interface::vtable(this).Clear)(::windows_core::Interface::as_raw(this))
                .ok()
        }
    }
    #[doc = "Required features: `\"Windows_Foundation_Collections\"`"]
    #[cfg(feature = "Windows_Foundation_Collections")]
    pub fn GetMany(
        &self,
        startindex: u32,
        items: &mut [::core::option::Option<TriggerBase>],
    ) -> ::windows_core::Result<u32> {
        let this = self;
        unsafe {
            let mut result__ = ::std::mem::zeroed();
            (::windows_core::Interface::vtable(this).GetMany)(
                ::windows_core::Interface::as_raw(this),
                startindex,
                items.len().try_into().unwrap(),
                ::core::mem::transmute_copy(&items),
                &mut result__,
            )
            .from_abi(result__)
        }
    }
    #[doc = "Required features: `\"Windows_Foundation_Collections\"`"]
    #[cfg(feature = "Windows_Foundation_Collections")]
    pub fn ReplaceAll(
        &self,
        items: &[::core::option::Option<TriggerBase>],
    ) -> ::windows_core::Result<()> {
        let this = self;
        unsafe {
            (::windows_core::Interface::vtable(this).ReplaceAll)(
                ::windows_core::Interface::as_raw(this),
                items.len().try_into().unwrap(),
                ::core::mem::transmute(items.as_ptr()),
            )
            .ok()
        }
    }
}
#[cfg(feature = "Windows_Foundation_Collections")]
impl ::windows_core::RuntimeType for TriggerCollection {
    const SIGNATURE: ::windows_core::imp::ConstBuffer =
        ::windows_core::imp::ConstBuffer::for_class::<Self>();
}
#[cfg(feature = "Windows_Foundation_Collections")]
unsafe impl ::windows_core::Interface for TriggerCollection {
    type Vtable = ::windows::Foundation::Collections::IVector_Vtbl<TriggerBase>;
}
#[cfg(feature = "Windows_Foundation_Collections")]
unsafe impl ::windows_core::ComInterface for TriggerCollection {
    const IID : ::windows_core::GUID = < ::windows::Foundation::Collections:: IVector :: < TriggerBase > as::windows_core::ComInterface >::IID ;
}
#[cfg(feature = "Windows_Foundation_Collections")]
impl ::windows_core::RuntimeName for TriggerCollection {
    const NAME: &'static str = "Microsoft.UI.Xaml.TriggerCollection";
}
#[cfg(feature = "Windows_Foundation_Collections")]
impl ::core::iter::IntoIterator for TriggerCollection {
    type Item = TriggerBase;
    type IntoIter = ::windows::Foundation::Collections::VectorIterator<Self::Item>;
    fn into_iter(self) -> Self::IntoIter {
        ::core::iter::IntoIterator::into_iter(&self)
    }
}
#[cfg(feature = "Windows_Foundation_Collections")]
impl ::core::iter::IntoIterator for &TriggerCollection {
    type Item = TriggerBase;
    type IntoIter = ::windows::Foundation::Collections::VectorIterator<Self::Item>;
    fn into_iter(self) -> Self::IntoIter {
        ::windows::Foundation::Collections::VectorIterator::new(
            ::windows_core::ComInterface::cast(self).ok(),
        )
    }
}
#[cfg(feature = "Windows_Foundation_Collections")]
::windows_core::imp::interface_hierarchy!(
    TriggerCollection,
    ::windows_core::IUnknown,
    ::windows_core::IInspectable
);
#[cfg(feature = "Windows_Foundation_Collections")]
impl ::windows_core::CanTryInto<::windows::Foundation::Collections::IIterable<TriggerBase>>
    for TriggerCollection
{
}
#[cfg(feature = "Windows_Foundation_Collections")]
impl ::windows_core::CanTryInto<::windows::Foundation::Collections::IVector<TriggerBase>>
    for TriggerCollection
{
}
#[cfg(feature = "Windows_Foundation_Collections")]
unsafe impl ::core::marker::Send for TriggerCollection {}
#[cfg(feature = "Windows_Foundation_Collections")]
unsafe impl ::core::marker::Sync for TriggerCollection {}
#[repr(transparent)]
#[derive(::core::cmp::PartialEq, ::core::cmp::Eq, ::core::fmt::Debug, ::core::clone::Clone)]
pub struct UIElement(::windows_core::IUnknown);
impl UIElement {
    #[doc = "Required features: `\"Microsoft_UI_Composition\"`"]
    #[cfg(feature = "Microsoft_UI_Composition")]
    pub fn PopulatePropertyInfo<P0>(
        &self,
        propertyname: &::windows_core::HSTRING,
        propertyinfo: P0,
    ) -> ::windows_core::Result<()>
    where
        P0: ::windows_core::IntoParam<super::Composition::AnimationPropertyInfo>,
    {
        let this =
            &::windows_core::ComInterface::cast::<super::Composition::IAnimationObject>(self)?;
        unsafe {
            (::windows_core::Interface::vtable(this).PopulatePropertyInfo)(
                ::windows_core::Interface::as_raw(this),
                ::core::mem::transmute_copy(propertyname),
                propertyinfo.into_param().abi(),
            )
            .ok()
        }
    }
    pub fn GetValue<P0>(&self, dp: P0) -> ::windows_core::Result<::windows_core::IInspectable>
    where
        P0: ::windows_core::IntoParam<DependencyProperty>,
    {
        let this = &::windows_core::ComInterface::cast::<IDependencyObject>(self)?;
        unsafe {
            let mut result__ = ::std::mem::zeroed();
            (::windows_core::Interface::vtable(this).GetValue)(
                ::windows_core::Interface::as_raw(this),
                dp.into_param().abi(),
                &mut result__,
            )
            .from_abi(result__)
        }
    }
    pub fn SetValue<P0, P1>(&self, dp: P0, value: P1) -> ::windows_core::Result<()>
    where
        P0: ::windows_core::IntoParam<DependencyProperty>,
        P1: ::windows_core::IntoParam<::windows_core::IInspectable>,
    {
        let this = &::windows_core::ComInterface::cast::<IDependencyObject>(self)?;
        unsafe {
            (::windows_core::Interface::vtable(this).SetValue)(
                ::windows_core::Interface::as_raw(this),
                dp.into_param().abi(),
                value.into_param().abi(),
            )
            .ok()
        }
    }
    pub fn ClearValue<P0>(&self, dp: P0) -> ::windows_core::Result<()>
    where
        P0: ::windows_core::IntoParam<DependencyProperty>,
    {
        let this = &::windows_core::ComInterface::cast::<IDependencyObject>(self)?;
        unsafe {
            (::windows_core::Interface::vtable(this).ClearValue)(
                ::windows_core::Interface::as_raw(this),
                dp.into_param().abi(),
            )
            .ok()
        }
    }
    pub fn ReadLocalValue<P0>(&self, dp: P0) -> ::windows_core::Result<::windows_core::IInspectable>
    where
        P0: ::windows_core::IntoParam<DependencyProperty>,
    {
        let this = &::windows_core::ComInterface::cast::<IDependencyObject>(self)?;
        unsafe {
            let mut result__ = ::std::mem::zeroed();
            (::windows_core::Interface::vtable(this).ReadLocalValue)(
                ::windows_core::Interface::as_raw(this),
                dp.into_param().abi(),
                &mut result__,
            )
            .from_abi(result__)
        }
    }
    pub fn GetAnimationBaseValue<P0>(
        &self,
        dp: P0,
    ) -> ::windows_core::Result<::windows_core::IInspectable>
    where
        P0: ::windows_core::IntoParam<DependencyProperty>,
    {
        let this = &::windows_core::ComInterface::cast::<IDependencyObject>(self)?;
        unsafe {
            let mut result__ = ::std::mem::zeroed();
            (::windows_core::Interface::vtable(this).GetAnimationBaseValue)(
                ::windows_core::Interface::as_raw(this),
                dp.into_param().abi(),
                &mut result__,
            )
            .from_abi(result__)
        }
    }
    pub fn RegisterPropertyChangedCallback<P0, P1>(
        &self,
        dp: P0,
        callback: P1,
    ) -> ::windows_core::Result<i64>
    where
        P0: ::windows_core::IntoParam<DependencyProperty>,
        P1: ::windows_core::IntoParam<DependencyPropertyChangedCallback>,
    {
        let this = &::windows_core::ComInterface::cast::<IDependencyObject>(self)?;
        unsafe {
            let mut result__ = ::std::mem::zeroed();
            (::windows_core::Interface::vtable(this).RegisterPropertyChangedCallback)(
                ::windows_core::Interface::as_raw(this),
                dp.into_param().abi(),
                callback.into_param().abi(),
                &mut result__,
            )
            .from_abi(result__)
        }
    }
    pub fn UnregisterPropertyChangedCallback<P0>(
        &self,
        dp: P0,
        token: i64,
    ) -> ::windows_core::Result<()>
    where
        P0: ::windows_core::IntoParam<DependencyProperty>,
    {
        let this = &::windows_core::ComInterface::cast::<IDependencyObject>(self)?;
        unsafe {
            (::windows_core::Interface::vtable(this).UnregisterPropertyChangedCallback)(
                ::windows_core::Interface::as_raw(this),
                dp.into_param().abi(),
                token,
            )
            .ok()
        }
    }
    #[doc = "Required features: `\"Windows_UI_Core\"`"]
    #[cfg(feature = "Windows_UI_Core")]
    pub fn Dispatcher(&self) -> ::windows_core::Result<::windows::UI::Core::CoreDispatcher> {
        let this = &::windows_core::ComInterface::cast::<IDependencyObject>(self)?;
        unsafe {
            let mut result__ = ::std::mem::zeroed();
            (::windows_core::Interface::vtable(this).Dispatcher)(
                ::windows_core::Interface::as_raw(this),
                &mut result__,
            )
            .from_abi(result__)
        }
    }
    #[doc = "Required features: `\"Microsoft_UI_Dispatching\"`"]
    #[cfg(feature = "Microsoft_UI_Dispatching")]
    pub fn DispatcherQueue(&self) -> ::windows_core::Result<super::Dispatching::DispatcherQueue> {
        let this = &::windows_core::ComInterface::cast::<IDependencyObject>(self)?;
        unsafe {
            let mut result__ = ::std::mem::zeroed();
            (::windows_core::Interface::vtable(this).DispatcherQueue)(
                ::windows_core::Interface::as_raw(this),
                &mut result__,
            )
            .from_abi(result__)
        }
    }
    #[doc = "Required features: `\"Windows_Foundation\"`"]
    #[cfg(feature = "Windows_Foundation")]
    pub fn DesiredSize(&self) -> ::windows_core::Result<::windows::Foundation::Size> {
        let this = self;
        unsafe {
            let mut result__ = ::std::mem::zeroed();
            (::windows_core::Interface::vtable(this).DesiredSize)(
                ::windows_core::Interface::as_raw(this),
                &mut result__,
            )
            .from_abi(result__)
        }
    }
    pub fn AllowDrop(&self) -> ::windows_core::Result<bool> {
        let this = self;
        unsafe {
            let mut result__ = ::std::mem::zeroed();
            (::windows_core::Interface::vtable(this).AllowDrop)(
                ::windows_core::Interface::as_raw(this),
                &mut result__,
            )
            .from_abi(result__)
        }
    }
    pub fn SetAllowDrop(&self, value: bool) -> ::windows_core::Result<()> {
        let this = self;
        unsafe {
            (::windows_core::Interface::vtable(this).SetAllowDrop)(
                ::windows_core::Interface::as_raw(this),
                value,
            )
            .ok()
        }
    }
    pub fn Opacity(&self) -> ::windows_core::Result<f64> {
        let this = self;
        unsafe {
            let mut result__ = ::std::mem::zeroed();
            (::windows_core::Interface::vtable(this).Opacity)(
                ::windows_core::Interface::as_raw(this),
                &mut result__,
            )
            .from_abi(result__)
        }
    }
    pub fn SetOpacity(&self, value: f64) -> ::windows_core::Result<()> {
        let this = self;
        unsafe {
            (::windows_core::Interface::vtable(this).SetOpacity)(
                ::windows_core::Interface::as_raw(this),
                value,
            )
            .ok()
        }
    }
    #[doc = "Required features: `\"Microsoft_UI_Xaml_Media\"`"]
    #[cfg(feature = "Microsoft_UI_Xaml_Media")]
    pub fn Clip(&self) -> ::windows_core::Result<Media::RectangleGeometry> {
        let this = self;
        unsafe {
            let mut result__ = ::std::mem::zeroed();
            (::windows_core::Interface::vtable(this).Clip)(
                ::windows_core::Interface::as_raw(this),
                &mut result__,
            )
            .from_abi(result__)
        }
    }
    #[doc = "Required features: `\"Microsoft_UI_Xaml_Media\"`"]
    #[cfg(feature = "Microsoft_UI_Xaml_Media")]
    pub fn SetClip<P0>(&self, value: P0) -> ::windows_core::Result<()>
    where
        P0: ::windows_core::IntoParam<Media::RectangleGeometry>,
    {
        let this = self;
        unsafe {
            (::windows_core::Interface::vtable(this).SetClip)(
                ::windows_core::Interface::as_raw(this),
                value.into_param().abi(),
            )
            .ok()
        }
    }
    #[doc = "Required features: `\"Microsoft_UI_Xaml_Media\"`"]
    #[cfg(feature = "Microsoft_UI_Xaml_Media")]
    pub fn RenderTransform(&self) -> ::windows_core::Result<Media::Transform> {
        let this = self;
        unsafe {
            let mut result__ = ::std::mem::zeroed();
            (::windows_core::Interface::vtable(this).RenderTransform)(
                ::windows_core::Interface::as_raw(this),
                &mut result__,
            )
            .from_abi(result__)
        }
    }
    #[doc = "Required features: `\"Microsoft_UI_Xaml_Media\"`"]
    #[cfg(feature = "Microsoft_UI_Xaml_Media")]
    pub fn SetRenderTransform<P0>(&self, value: P0) -> ::windows_core::Result<()>
    where
        P0: ::windows_core::TryIntoParam<Media::Transform>,
    {
        let this = self;
        unsafe {
            (::windows_core::Interface::vtable(this).SetRenderTransform)(
                ::windows_core::Interface::as_raw(this),
                value.try_into_param()?.abi(),
            )
            .ok()
        }
    }
    #[doc = "Required features: `\"Microsoft_UI_Xaml_Media\"`"]
    #[cfg(feature = "Microsoft_UI_Xaml_Media")]
    pub fn Projection(&self) -> ::windows_core::Result<Media::Projection> {
        let this = self;
        unsafe {
            let mut result__ = ::std::mem::zeroed();
            (::windows_core::Interface::vtable(this).Projection)(
                ::windows_core::Interface::as_raw(this),
                &mut result__,
            )
            .from_abi(result__)
        }
    }
    #[doc = "Required features: `\"Microsoft_UI_Xaml_Media\"`"]
    #[cfg(feature = "Microsoft_UI_Xaml_Media")]
    pub fn SetProjection<P0>(&self, value: P0) -> ::windows_core::Result<()>
    where
        P0: ::windows_core::TryIntoParam<Media::Projection>,
    {
        let this = self;
        unsafe {
            (::windows_core::Interface::vtable(this).SetProjection)(
                ::windows_core::Interface::as_raw(this),
                value.try_into_param()?.abi(),
            )
            .ok()
        }
    }
    #[doc = "Required features: `\"Microsoft_UI_Xaml_Media_Media3D\"`"]
    #[cfg(feature = "Microsoft_UI_Xaml_Media_Media3D")]
    pub fn Transform3D(&self) -> ::windows_core::Result<Media::Media3D::Transform3D> {
        let this = self;
        unsafe {
            let mut result__ = ::std::mem::zeroed();
            (::windows_core::Interface::vtable(this).Transform3D)(
                ::windows_core::Interface::as_raw(this),
                &mut result__,
            )
            .from_abi(result__)
        }
    }
    #[doc = "Required features: `\"Microsoft_UI_Xaml_Media_Media3D\"`"]
    #[cfg(feature = "Microsoft_UI_Xaml_Media_Media3D")]
    pub fn SetTransform3D<P0>(&self, value: P0) -> ::windows_core::Result<()>
    where
        P0: ::windows_core::TryIntoParam<Media::Media3D::Transform3D>,
    {
        let this = self;
        unsafe {
            (::windows_core::Interface::vtable(this).SetTransform3D)(
                ::windows_core::Interface::as_raw(this),
                value.try_into_param()?.abi(),
            )
            .ok()
        }
    }
    #[doc = "Required features: `\"Windows_Foundation\"`"]
    #[cfg(feature = "Windows_Foundation")]
    pub fn RenderTransformOrigin(&self) -> ::windows_core::Result<::windows::Foundation::Point> {
        let this = self;
        unsafe {
            let mut result__ = ::std::mem::zeroed();
            (::windows_core::Interface::vtable(this).RenderTransformOrigin)(
                ::windows_core::Interface::as_raw(this),
                &mut result__,
            )
            .from_abi(result__)
        }
    }
    #[doc = "Required features: `\"Windows_Foundation\"`"]
    #[cfg(feature = "Windows_Foundation")]
    pub fn SetRenderTransformOrigin(
        &self,
        value: ::windows::Foundation::Point,
    ) -> ::windows_core::Result<()> {
        let this = self;
        unsafe {
            (::windows_core::Interface::vtable(this).SetRenderTransformOrigin)(
                ::windows_core::Interface::as_raw(this),
                value,
            )
            .ok()
        }
    }
    pub fn IsHitTestVisible(&self) -> ::windows_core::Result<bool> {
        let this = self;
        unsafe {
            let mut result__ = ::std::mem::zeroed();
            (::windows_core::Interface::vtable(this).IsHitTestVisible)(
                ::windows_core::Interface::as_raw(this),
                &mut result__,
            )
            .from_abi(result__)
        }
    }
    pub fn SetIsHitTestVisible(&self, value: bool) -> ::windows_core::Result<()> {
        let this = self;
        unsafe {
            (::windows_core::Interface::vtable(this).SetIsHitTestVisible)(
                ::windows_core::Interface::as_raw(this),
                value,
            )
            .ok()
        }
    }
    pub fn Visibility(&self) -> ::windows_core::Result<Visibility> {
        let this = self;
        unsafe {
            let mut result__ = ::std::mem::zeroed();
            (::windows_core::Interface::vtable(this).Visibility)(
                ::windows_core::Interface::as_raw(this),
                &mut result__,
            )
            .from_abi(result__)
        }
    }
    pub fn SetVisibility(&self, value: Visibility) -> ::windows_core::Result<()> {
        let this = self;
        unsafe {
            (::windows_core::Interface::vtable(this).SetVisibility)(
                ::windows_core::Interface::as_raw(this),
                value,
            )
            .ok()
        }
    }
    #[doc = "Required features: `\"Windows_Foundation\"`"]
    #[cfg(feature = "Windows_Foundation")]
    pub fn RenderSize(&self) -> ::windows_core::Result<::windows::Foundation::Size> {
        let this = self;
        unsafe {
            let mut result__ = ::std::mem::zeroed();
            (::windows_core::Interface::vtable(this).RenderSize)(
                ::windows_core::Interface::as_raw(this),
                &mut result__,
            )
            .from_abi(result__)
        }
    }
    pub fn UseLayoutRounding(&self) -> ::windows_core::Result<bool> {
        let this = self;
        unsafe {
            let mut result__ = ::std::mem::zeroed();
            (::windows_core::Interface::vtable(this).UseLayoutRounding)(
                ::windows_core::Interface::as_raw(this),
                &mut result__,
            )
            .from_abi(result__)
        }
    }
    pub fn SetUseLayoutRounding(&self, value: bool) -> ::windows_core::Result<()> {
        let this = self;
        unsafe {
            (::windows_core::Interface::vtable(this).SetUseLayoutRounding)(
                ::windows_core::Interface::as_raw(this),
                value,
            )
            .ok()
        }
    }
    #[doc = "Required features: `\"Microsoft_UI_Xaml_Media_Animation\"`, `\"Windows_Foundation_Collections\"`"]
    #[cfg(all(
        feature = "Microsoft_UI_Xaml_Media_Animation",
        feature = "Windows_Foundation_Collections"
    ))]
    pub fn Transitions(&self) -> ::windows_core::Result<Media::Animation::TransitionCollection> {
        let this = self;
        unsafe {
            let mut result__ = ::std::mem::zeroed();
            (::windows_core::Interface::vtable(this).Transitions)(
                ::windows_core::Interface::as_raw(this),
                &mut result__,
            )
            .from_abi(result__)
        }
    }
    #[doc = "Required features: `\"Microsoft_UI_Xaml_Media_Animation\"`, `\"Windows_Foundation_Collections\"`"]
    #[cfg(all(
        feature = "Microsoft_UI_Xaml_Media_Animation",
        feature = "Windows_Foundation_Collections"
    ))]
    pub fn SetTransitions<P0>(&self, value: P0) -> ::windows_core::Result<()>
    where
        P0: ::windows_core::IntoParam<Media::Animation::TransitionCollection>,
    {
        let this = self;
        unsafe {
            (::windows_core::Interface::vtable(this).SetTransitions)(
                ::windows_core::Interface::as_raw(this),
                value.into_param().abi(),
            )
            .ok()
        }
    }
    #[doc = "Required features: `\"Microsoft_UI_Xaml_Media\"`"]
    #[cfg(feature = "Microsoft_UI_Xaml_Media")]
    pub fn CacheMode(&self) -> ::windows_core::Result<Media::CacheMode> {
        let this = self;
        unsafe {
            let mut result__ = ::std::mem::zeroed();
            (::windows_core::Interface::vtable(this).CacheMode)(
                ::windows_core::Interface::as_raw(this),
                &mut result__,
            )
            .from_abi(result__)
        }
    }
    #[doc = "Required features: `\"Microsoft_UI_Xaml_Media\"`"]
    #[cfg(feature = "Microsoft_UI_Xaml_Media")]
    pub fn SetCacheMode<P0>(&self, value: P0) -> ::windows_core::Result<()>
    where
        P0: ::windows_core::TryIntoParam<Media::CacheMode>,
    {
        let this = self;
        unsafe {
            (::windows_core::Interface::vtable(this).SetCacheMode)(
                ::windows_core::Interface::as_raw(this),
                value.try_into_param()?.abi(),
            )
            .ok()
        }
    }
    pub fn IsTapEnabled(&self) -> ::windows_core::Result<bool> {
        let this = self;
        unsafe {
            let mut result__ = ::std::mem::zeroed();
            (::windows_core::Interface::vtable(this).IsTapEnabled)(
                ::windows_core::Interface::as_raw(this),
                &mut result__,
            )
            .from_abi(result__)
        }
    }
    pub fn SetIsTapEnabled(&self, value: bool) -> ::windows_core::Result<()> {
        let this = self;
        unsafe {
            (::windows_core::Interface::vtable(this).SetIsTapEnabled)(
                ::windows_core::Interface::as_raw(this),
                value,
            )
            .ok()
        }
    }
    pub fn IsDoubleTapEnabled(&self) -> ::windows_core::Result<bool> {
        let this = self;
        unsafe {
            let mut result__ = ::std::mem::zeroed();
            (::windows_core::Interface::vtable(this).IsDoubleTapEnabled)(
                ::windows_core::Interface::as_raw(this),
                &mut result__,
            )
            .from_abi(result__)
        }
    }
    pub fn SetIsDoubleTapEnabled(&self, value: bool) -> ::windows_core::Result<()> {
        let this = self;
        unsafe {
            (::windows_core::Interface::vtable(this).SetIsDoubleTapEnabled)(
                ::windows_core::Interface::as_raw(this),
                value,
            )
            .ok()
        }
    }
    pub fn CanDrag(&self) -> ::windows_core::Result<bool> {
        let this = self;
        unsafe {
            let mut result__ = ::std::mem::zeroed();
            (::windows_core::Interface::vtable(this).CanDrag)(
                ::windows_core::Interface::as_raw(this),
                &mut result__,
            )
            .from_abi(result__)
        }
    }
    pub fn SetCanDrag(&self, value: bool) -> ::windows_core::Result<()> {
        let this = self;
        unsafe {
            (::windows_core::Interface::vtable(this).SetCanDrag)(
                ::windows_core::Interface::as_raw(this),
                value,
            )
            .ok()
        }
    }
    pub fn IsRightTapEnabled(&self) -> ::windows_core::Result<bool> {
        let this = self;
        unsafe {
            let mut result__ = ::std::mem::zeroed();
            (::windows_core::Interface::vtable(this).IsRightTapEnabled)(
                ::windows_core::Interface::as_raw(this),
                &mut result__,
            )
            .from_abi(result__)
        }
    }
    pub fn SetIsRightTapEnabled(&self, value: bool) -> ::windows_core::Result<()> {
        let this = self;
        unsafe {
            (::windows_core::Interface::vtable(this).SetIsRightTapEnabled)(
                ::windows_core::Interface::as_raw(this),
                value,
            )
            .ok()
        }
    }
    pub fn IsHoldingEnabled(&self) -> ::windows_core::Result<bool> {
        let this = self;
        unsafe {
            let mut result__ = ::std::mem::zeroed();
            (::windows_core::Interface::vtable(this).IsHoldingEnabled)(
                ::windows_core::Interface::as_raw(this),
                &mut result__,
            )
            .from_abi(result__)
        }
    }
    pub fn SetIsHoldingEnabled(&self, value: bool) -> ::windows_core::Result<()> {
        let this = self;
        unsafe {
            (::windows_core::Interface::vtable(this).SetIsHoldingEnabled)(
                ::windows_core::Interface::as_raw(this),
                value,
            )
            .ok()
        }
    }
    #[doc = "Required features: `\"Microsoft_UI_Xaml_Input\"`"]
    #[cfg(feature = "Microsoft_UI_Xaml_Input")]
    pub fn ManipulationMode(&self) -> ::windows_core::Result<Input::ManipulationModes> {
        let this = self;
        unsafe {
            let mut result__ = ::std::mem::zeroed();
            (::windows_core::Interface::vtable(this).ManipulationMode)(
                ::windows_core::Interface::as_raw(this),
                &mut result__,
            )
            .from_abi(result__)
        }
    }
    #[doc = "Required features: `\"Microsoft_UI_Xaml_Input\"`"]
    #[cfg(feature = "Microsoft_UI_Xaml_Input")]
    pub fn SetManipulationMode(
        &self,
        value: Input::ManipulationModes,
    ) -> ::windows_core::Result<()> {
        let this = self;
        unsafe {
            (::windows_core::Interface::vtable(this).SetManipulationMode)(
                ::windows_core::Interface::as_raw(this),
                value,
            )
            .ok()
        }
    }
    #[doc = "Required features: `\"Microsoft_UI_Xaml_Input\"`, `\"Windows_Foundation_Collections\"`"]
    #[cfg(all(
        feature = "Microsoft_UI_Xaml_Input",
        feature = "Windows_Foundation_Collections"
    ))]
    pub fn PointerCaptures(
        &self,
    ) -> ::windows_core::Result<::windows::Foundation::Collections::IVectorView<Input::Pointer>>
    {
        let this = self;
        unsafe {
            let mut result__ = ::std::mem::zeroed();
            (::windows_core::Interface::vtable(this).PointerCaptures)(
                ::windows_core::Interface::as_raw(this),
                &mut result__,
            )
            .from_abi(result__)
        }
    }
    #[doc = "Required features: `\"Microsoft_UI_Xaml_Controls_Primitives\"`"]
    #[cfg(feature = "Microsoft_UI_Xaml_Controls_Primitives")]
    pub fn ContextFlyout(&self) -> ::windows_core::Result<Controls::Primitives::FlyoutBase> {
        let this = self;
        unsafe {
            let mut result__ = ::std::mem::zeroed();
            (::windows_core::Interface::vtable(this).ContextFlyout)(
                ::windows_core::Interface::as_raw(this),
                &mut result__,
            )
            .from_abi(result__)
        }
    }
    #[doc = "Required features: `\"Microsoft_UI_Xaml_Controls_Primitives\"`"]
    #[cfg(feature = "Microsoft_UI_Xaml_Controls_Primitives")]
    pub fn SetContextFlyout<P0>(&self, value: P0) -> ::windows_core::Result<()>
    where
        P0: ::windows_core::TryIntoParam<Controls::Primitives::FlyoutBase>,
    {
        let this = self;
        unsafe {
            (::windows_core::Interface::vtable(this).SetContextFlyout)(
                ::windows_core::Interface::as_raw(this),
                value.try_into_param()?.abi(),
            )
            .ok()
        }
    }
    #[doc = "Required features: `\"Microsoft_UI_Xaml_Media\"`"]
    #[cfg(feature = "Microsoft_UI_Xaml_Media")]
    pub fn CompositeMode(&self) -> ::windows_core::Result<Media::ElementCompositeMode> {
        let this = self;
        unsafe {
            let mut result__ = ::std::mem::zeroed();
            (::windows_core::Interface::vtable(this).CompositeMode)(
                ::windows_core::Interface::as_raw(this),
                &mut result__,
            )
            .from_abi(result__)
        }
    }
    #[doc = "Required features: `\"Microsoft_UI_Xaml_Media\"`"]
    #[cfg(feature = "Microsoft_UI_Xaml_Media")]
    pub fn SetCompositeMode(
        &self,
        value: Media::ElementCompositeMode,
    ) -> ::windows_core::Result<()> {
        let this = self;
        unsafe {
            (::windows_core::Interface::vtable(this).SetCompositeMode)(
                ::windows_core::Interface::as_raw(this),
                value,
            )
            .ok()
        }
    }
    #[doc = "Required features: `\"Microsoft_UI_Xaml_Media\"`, `\"Windows_Foundation_Collections\"`"]
    #[cfg(all(
        feature = "Microsoft_UI_Xaml_Media",
        feature = "Windows_Foundation_Collections"
    ))]
    pub fn Lights(
        &self,
    ) -> ::windows_core::Result<::windows::Foundation::Collections::IVector<Media::XamlLight>> {
        let this = self;
        unsafe {
            let mut result__ = ::std::mem::zeroed();
            (::windows_core::Interface::vtable(this).Lights)(
                ::windows_core::Interface::as_raw(this),
                &mut result__,
            )
            .from_abi(result__)
        }
    }
    pub fn CanBeScrollAnchor(&self) -> ::windows_core::Result<bool> {
        let this = self;
        unsafe {
            let mut result__ = ::std::mem::zeroed();
            (::windows_core::Interface::vtable(this).CanBeScrollAnchor)(
                ::windows_core::Interface::as_raw(this),
                &mut result__,
            )
            .from_abi(result__)
        }
    }
    pub fn SetCanBeScrollAnchor(&self, value: bool) -> ::windows_core::Result<()> {
        let this = self;
        unsafe {
            (::windows_core::Interface::vtable(this).SetCanBeScrollAnchor)(
                ::windows_core::Interface::as_raw(this),
                value,
            )
            .ok()
        }
    }
    pub fn ExitDisplayModeOnAccessKeyInvoked(&self) -> ::windows_core::Result<bool> {
        let this = self;
        unsafe {
            let mut result__ = ::std::mem::zeroed();
            (::windows_core::Interface::vtable(this).ExitDisplayModeOnAccessKeyInvoked)(
                ::windows_core::Interface::as_raw(this),
                &mut result__,
            )
            .from_abi(result__)
        }
    }
    pub fn SetExitDisplayModeOnAccessKeyInvoked(&self, value: bool) -> ::windows_core::Result<()> {
        let this = self;
        unsafe {
            (::windows_core::Interface::vtable(this).SetExitDisplayModeOnAccessKeyInvoked)(
                ::windows_core::Interface::as_raw(this),
                value,
            )
            .ok()
        }
    }
    pub fn IsAccessKeyScope(&self) -> ::windows_core::Result<bool> {
        let this = self;
        unsafe {
            let mut result__ = ::std::mem::zeroed();
            (::windows_core::Interface::vtable(this).IsAccessKeyScope)(
                ::windows_core::Interface::as_raw(this),
                &mut result__,
            )
            .from_abi(result__)
        }
    }
    pub fn SetIsAccessKeyScope(&self, value: bool) -> ::windows_core::Result<()> {
        let this = self;
        unsafe {
            (::windows_core::Interface::vtable(this).SetIsAccessKeyScope)(
                ::windows_core::Interface::as_raw(this),
                value,
            )
            .ok()
        }
    }
    pub fn AccessKeyScopeOwner(&self) -> ::windows_core::Result<DependencyObject> {
        let this = self;
        unsafe {
            let mut result__ = ::std::mem::zeroed();
            (::windows_core::Interface::vtable(this).AccessKeyScopeOwner)(
                ::windows_core::Interface::as_raw(this),
                &mut result__,
            )
            .from_abi(result__)
        }
    }
    pub fn SetAccessKeyScopeOwner<P0>(&self, value: P0) -> ::windows_core::Result<()>
    where
        P0: ::windows_core::TryIntoParam<DependencyObject>,
    {
        let this = self;
        unsafe {
            (::windows_core::Interface::vtable(this).SetAccessKeyScopeOwner)(
                ::windows_core::Interface::as_raw(this),
                value.try_into_param()?.abi(),
            )
            .ok()
        }
    }
    pub fn AccessKey(&self) -> ::windows_core::Result<::windows_core::HSTRING> {
        let this = self;
        unsafe {
            let mut result__ = ::std::mem::zeroed();
            (::windows_core::Interface::vtable(this).AccessKey)(
                ::windows_core::Interface::as_raw(this),
                &mut result__,
            )
            .from_abi(result__)
        }
    }
    pub fn SetAccessKey(&self, value: &::windows_core::HSTRING) -> ::windows_core::Result<()> {
        let this = self;
        unsafe {
            (::windows_core::Interface::vtable(this).SetAccessKey)(
                ::windows_core::Interface::as_raw(this),
                ::core::mem::transmute_copy(value),
            )
            .ok()
        }
    }
    #[doc = "Required features: `\"Microsoft_UI_Xaml_Input\"`"]
    #[cfg(feature = "Microsoft_UI_Xaml_Input")]
    pub fn KeyTipPlacementMode(&self) -> ::windows_core::Result<Input::KeyTipPlacementMode> {
        let this = self;
        unsafe {
            let mut result__ = ::std::mem::zeroed();
            (::windows_core::Interface::vtable(this).KeyTipPlacementMode)(
                ::windows_core::Interface::as_raw(this),
                &mut result__,
            )
            .from_abi(result__)
        }
    }
    #[doc = "Required features: `\"Microsoft_UI_Xaml_Input\"`"]
    #[cfg(feature = "Microsoft_UI_Xaml_Input")]
    pub fn SetKeyTipPlacementMode(
        &self,
        value: Input::KeyTipPlacementMode,
    ) -> ::windows_core::Result<()> {
        let this = self;
        unsafe {
            (::windows_core::Interface::vtable(this).SetKeyTipPlacementMode)(
                ::windows_core::Interface::as_raw(this),
                value,
            )
            .ok()
        }
    }
    pub fn KeyTipHorizontalOffset(&self) -> ::windows_core::Result<f64> {
        let this = self;
        unsafe {
            let mut result__ = ::std::mem::zeroed();
            (::windows_core::Interface::vtable(this).KeyTipHorizontalOffset)(
                ::windows_core::Interface::as_raw(this),
                &mut result__,
            )
            .from_abi(result__)
        }
    }
    pub fn SetKeyTipHorizontalOffset(&self, value: f64) -> ::windows_core::Result<()> {
        let this = self;
        unsafe {
            (::windows_core::Interface::vtable(this).SetKeyTipHorizontalOffset)(
                ::windows_core::Interface::as_raw(this),
                value,
            )
            .ok()
        }
    }
    pub fn KeyTipVerticalOffset(&self) -> ::windows_core::Result<f64> {
        let this = self;
        unsafe {
            let mut result__ = ::std::mem::zeroed();
            (::windows_core::Interface::vtable(this).KeyTipVerticalOffset)(
                ::windows_core::Interface::as_raw(this),
                &mut result__,
            )
            .from_abi(result__)
        }
    }
    pub fn SetKeyTipVerticalOffset(&self, value: f64) -> ::windows_core::Result<()> {
        let this = self;
        unsafe {
            (::windows_core::Interface::vtable(this).SetKeyTipVerticalOffset)(
                ::windows_core::Interface::as_raw(this),
                value,
            )
            .ok()
        }
    }
    pub fn KeyTipTarget(&self) -> ::windows_core::Result<DependencyObject> {
        let this = self;
        unsafe {
            let mut result__ = ::std::mem::zeroed();
            (::windows_core::Interface::vtable(this).KeyTipTarget)(
                ::windows_core::Interface::as_raw(this),
                &mut result__,
            )
            .from_abi(result__)
        }
    }
    pub fn SetKeyTipTarget<P0>(&self, value: P0) -> ::windows_core::Result<()>
    where
        P0: ::windows_core::TryIntoParam<DependencyObject>,
    {
        let this = self;
        unsafe {
            (::windows_core::Interface::vtable(this).SetKeyTipTarget)(
                ::windows_core::Interface::as_raw(this),
                value.try_into_param()?.abi(),
            )
            .ok()
        }
    }
    #[doc = "Required features: `\"Microsoft_UI_Xaml_Input\"`"]
    #[cfg(feature = "Microsoft_UI_Xaml_Input")]
    pub fn XYFocusKeyboardNavigation(
        &self,
    ) -> ::windows_core::Result<Input::XYFocusKeyboardNavigationMode> {
        let this = self;
        unsafe {
            let mut result__ = ::std::mem::zeroed();
            (::windows_core::Interface::vtable(this).XYFocusKeyboardNavigation)(
                ::windows_core::Interface::as_raw(this),
                &mut result__,
            )
            .from_abi(result__)
        }
    }
    #[doc = "Required features: `\"Microsoft_UI_Xaml_Input\"`"]
    #[cfg(feature = "Microsoft_UI_Xaml_Input")]
    pub fn SetXYFocusKeyboardNavigation(
        &self,
        value: Input::XYFocusKeyboardNavigationMode,
    ) -> ::windows_core::Result<()> {
        let this = self;
        unsafe {
            (::windows_core::Interface::vtable(this).SetXYFocusKeyboardNavigation)(
                ::windows_core::Interface::as_raw(this),
                value,
            )
            .ok()
        }
    }
    #[doc = "Required features: `\"Microsoft_UI_Xaml_Input\"`"]
    #[cfg(feature = "Microsoft_UI_Xaml_Input")]
    pub fn XYFocusUpNavigationStrategy(
        &self,
    ) -> ::windows_core::Result<Input::XYFocusNavigationStrategy> {
        let this = self;
        unsafe {
            let mut result__ = ::std::mem::zeroed();
            (::windows_core::Interface::vtable(this).XYFocusUpNavigationStrategy)(
                ::windows_core::Interface::as_raw(this),
                &mut result__,
            )
            .from_abi(result__)
        }
    }
    #[doc = "Required features: `\"Microsoft_UI_Xaml_Input\"`"]
    #[cfg(feature = "Microsoft_UI_Xaml_Input")]
    pub fn SetXYFocusUpNavigationStrategy(
        &self,
        value: Input::XYFocusNavigationStrategy,
    ) -> ::windows_core::Result<()> {
        let this = self;
        unsafe {
            (::windows_core::Interface::vtable(this).SetXYFocusUpNavigationStrategy)(
                ::windows_core::Interface::as_raw(this),
                value,
            )
            .ok()
        }
    }
    #[doc = "Required features: `\"Microsoft_UI_Xaml_Input\"`"]
    #[cfg(feature = "Microsoft_UI_Xaml_Input")]
    pub fn XYFocusDownNavigationStrategy(
        &self,
    ) -> ::windows_core::Result<Input::XYFocusNavigationStrategy> {
        let this = self;
        unsafe {
            let mut result__ = ::std::mem::zeroed();
            (::windows_core::Interface::vtable(this).XYFocusDownNavigationStrategy)(
                ::windows_core::Interface::as_raw(this),
                &mut result__,
            )
            .from_abi(result__)
        }
    }
    #[doc = "Required features: `\"Microsoft_UI_Xaml_Input\"`"]
    #[cfg(feature = "Microsoft_UI_Xaml_Input")]
    pub fn SetXYFocusDownNavigationStrategy(
        &self,
        value: Input::XYFocusNavigationStrategy,
    ) -> ::windows_core::Result<()> {
        let this = self;
        unsafe {
            (::windows_core::Interface::vtable(this).SetXYFocusDownNavigationStrategy)(
                ::windows_core::Interface::as_raw(this),
                value,
            )
            .ok()
        }
    }
    #[doc = "Required features: `\"Microsoft_UI_Xaml_Input\"`"]
    #[cfg(feature = "Microsoft_UI_Xaml_Input")]
    pub fn XYFocusLeftNavigationStrategy(
        &self,
    ) -> ::windows_core::Result<Input::XYFocusNavigationStrategy> {
        let this = self;
        unsafe {
            let mut result__ = ::std::mem::zeroed();
            (::windows_core::Interface::vtable(this).XYFocusLeftNavigationStrategy)(
                ::windows_core::Interface::as_raw(this),
                &mut result__,
            )
            .from_abi(result__)
        }
    }
    #[doc = "Required features: `\"Microsoft_UI_Xaml_Input\"`"]
    #[cfg(feature = "Microsoft_UI_Xaml_Input")]
    pub fn SetXYFocusLeftNavigationStrategy(
        &self,
        value: Input::XYFocusNavigationStrategy,
    ) -> ::windows_core::Result<()> {
        let this = self;
        unsafe {
            (::windows_core::Interface::vtable(this).SetXYFocusLeftNavigationStrategy)(
                ::windows_core::Interface::as_raw(this),
                value,
            )
            .ok()
        }
    }
    #[doc = "Required features: `\"Microsoft_UI_Xaml_Input\"`"]
    #[cfg(feature = "Microsoft_UI_Xaml_Input")]
    pub fn XYFocusRightNavigationStrategy(
        &self,
    ) -> ::windows_core::Result<Input::XYFocusNavigationStrategy> {
        let this = self;
        unsafe {
            let mut result__ = ::std::mem::zeroed();
            (::windows_core::Interface::vtable(this).XYFocusRightNavigationStrategy)(
                ::windows_core::Interface::as_raw(this),
                &mut result__,
            )
            .from_abi(result__)
        }
    }
    #[doc = "Required features: `\"Microsoft_UI_Xaml_Input\"`"]
    #[cfg(feature = "Microsoft_UI_Xaml_Input")]
    pub fn SetXYFocusRightNavigationStrategy(
        &self,
        value: Input::XYFocusNavigationStrategy,
    ) -> ::windows_core::Result<()> {
        let this = self;
        unsafe {
            (::windows_core::Interface::vtable(this).SetXYFocusRightNavigationStrategy)(
                ::windows_core::Interface::as_raw(this),
                value,
            )
            .ok()
        }
    }
    #[doc = "Required features: `\"Microsoft_UI_Xaml_Input\"`, `\"Windows_Foundation_Collections\"`"]
    #[cfg(all(
        feature = "Microsoft_UI_Xaml_Input",
        feature = "Windows_Foundation_Collections"
    ))]
    pub fn KeyboardAccelerators(
        &self,
    ) -> ::windows_core::Result<
        ::windows::Foundation::Collections::IVector<Input::KeyboardAccelerator>,
    > {
        let this = self;
        unsafe {
            let mut result__ = ::std::mem::zeroed();
            (::windows_core::Interface::vtable(this).KeyboardAccelerators)(
                ::windows_core::Interface::as_raw(this),
                &mut result__,
            )
            .from_abi(result__)
        }
    }
    pub fn KeyboardAcceleratorPlacementTarget(&self) -> ::windows_core::Result<DependencyObject> {
        let this = self;
        unsafe {
            let mut result__ = ::std::mem::zeroed();
            (::windows_core::Interface::vtable(this).KeyboardAcceleratorPlacementTarget)(
                ::windows_core::Interface::as_raw(this),
                &mut result__,
            )
            .from_abi(result__)
        }
    }
    pub fn SetKeyboardAcceleratorPlacementTarget<P0>(&self, value: P0) -> ::windows_core::Result<()>
    where
        P0: ::windows_core::TryIntoParam<DependencyObject>,
    {
        let this = self;
        unsafe {
            (::windows_core::Interface::vtable(this).SetKeyboardAcceleratorPlacementTarget)(
                ::windows_core::Interface::as_raw(this),
                value.try_into_param()?.abi(),
            )
            .ok()
        }
    }
    #[doc = "Required features: `\"Microsoft_UI_Xaml_Input\"`"]
    #[cfg(feature = "Microsoft_UI_Xaml_Input")]
    pub fn KeyboardAcceleratorPlacementMode(
        &self,
    ) -> ::windows_core::Result<Input::KeyboardAcceleratorPlacementMode> {
        let this = self;
        unsafe {
            let mut result__ = ::std::mem::zeroed();
            (::windows_core::Interface::vtable(this).KeyboardAcceleratorPlacementMode)(
                ::windows_core::Interface::as_raw(this),
                &mut result__,
            )
            .from_abi(result__)
        }
    }
    #[doc = "Required features: `\"Microsoft_UI_Xaml_Input\"`"]
    #[cfg(feature = "Microsoft_UI_Xaml_Input")]
    pub fn SetKeyboardAcceleratorPlacementMode(
        &self,
        value: Input::KeyboardAcceleratorPlacementMode,
    ) -> ::windows_core::Result<()> {
        let this = self;
        unsafe {
            (::windows_core::Interface::vtable(this).SetKeyboardAcceleratorPlacementMode)(
                ::windows_core::Interface::as_raw(this),
                value,
            )
            .ok()
        }
    }
    pub fn HighContrastAdjustment(&self) -> ::windows_core::Result<ElementHighContrastAdjustment> {
        let this = self;
        unsafe {
            let mut result__ = ::std::mem::zeroed();
            (::windows_core::Interface::vtable(this).HighContrastAdjustment)(
                ::windows_core::Interface::as_raw(this),
                &mut result__,
            )
            .from_abi(result__)
        }
    }
    pub fn SetHighContrastAdjustment(
        &self,
        value: ElementHighContrastAdjustment,
    ) -> ::windows_core::Result<()> {
        let this = self;
        unsafe {
            (::windows_core::Interface::vtable(this).SetHighContrastAdjustment)(
                ::windows_core::Interface::as_raw(this),
                value,
            )
            .ok()
        }
    }
    #[doc = "Required features: `\"Microsoft_UI_Xaml_Input\"`"]
    #[cfg(feature = "Microsoft_UI_Xaml_Input")]
    pub fn TabFocusNavigation(&self) -> ::windows_core::Result<Input::KeyboardNavigationMode> {
        let this = self;
        unsafe {
            let mut result__ = ::std::mem::zeroed();
            (::windows_core::Interface::vtable(this).TabFocusNavigation)(
                ::windows_core::Interface::as_raw(this),
                &mut result__,
            )
            .from_abi(result__)
        }
    }
    #[doc = "Required features: `\"Microsoft_UI_Xaml_Input\"`"]
    #[cfg(feature = "Microsoft_UI_Xaml_Input")]
    pub fn SetTabFocusNavigation(
        &self,
        value: Input::KeyboardNavigationMode,
    ) -> ::windows_core::Result<()> {
        let this = self;
        unsafe {
            (::windows_core::Interface::vtable(this).SetTabFocusNavigation)(
                ::windows_core::Interface::as_raw(this),
                value,
            )
            .ok()
        }
    }
    pub fn OpacityTransition(&self) -> ::windows_core::Result<ScalarTransition> {
        let this = self;
        unsafe {
            let mut result__ = ::std::mem::zeroed();
            (::windows_core::Interface::vtable(this).OpacityTransition)(
                ::windows_core::Interface::as_raw(this),
                &mut result__,
            )
            .from_abi(result__)
        }
    }
    pub fn SetOpacityTransition<P0>(&self, value: P0) -> ::windows_core::Result<()>
    where
        P0: ::windows_core::TryIntoParam<ScalarTransition>,
    {
        let this = self;
        unsafe {
            (::windows_core::Interface::vtable(this).SetOpacityTransition)(
                ::windows_core::Interface::as_raw(this),
                value.try_into_param()?.abi(),
            )
            .ok()
        }
    }
    #[doc = "Required features: `\"Windows_Foundation_Numerics\"`"]
    #[cfg(feature = "Windows_Foundation_Numerics")]
    pub fn Translation(&self) -> ::windows_core::Result<::windows::Foundation::Numerics::Vector3> {
        let this = self;
        unsafe {
            let mut result__ = ::std::mem::zeroed();
            (::windows_core::Interface::vtable(this).Translation)(
                ::windows_core::Interface::as_raw(this),
                &mut result__,
            )
            .from_abi(result__)
        }
    }
    #[doc = "Required features: `\"Windows_Foundation_Numerics\"`"]
    #[cfg(feature = "Windows_Foundation_Numerics")]
    pub fn SetTranslation(
        &self,
        value: ::windows::Foundation::Numerics::Vector3,
    ) -> ::windows_core::Result<()> {
        let this = self;
        unsafe {
            (::windows_core::Interface::vtable(this).SetTranslation)(
                ::windows_core::Interface::as_raw(this),
                value,
            )
            .ok()
        }
    }
    pub fn TranslationTransition(&self) -> ::windows_core::Result<Vector3Transition> {
        let this = self;
        unsafe {
            let mut result__ = ::std::mem::zeroed();
            (::windows_core::Interface::vtable(this).TranslationTransition)(
                ::windows_core::Interface::as_raw(this),
                &mut result__,
            )
            .from_abi(result__)
        }
    }
    pub fn SetTranslationTransition<P0>(&self, value: P0) -> ::windows_core::Result<()>
    where
        P0: ::windows_core::TryIntoParam<Vector3Transition>,
    {
        let this = self;
        unsafe {
            (::windows_core::Interface::vtable(this).SetTranslationTransition)(
                ::windows_core::Interface::as_raw(this),
                value.try_into_param()?.abi(),
            )
            .ok()
        }
    }
    pub fn Rotation(&self) -> ::windows_core::Result<f32> {
        let this = self;
        unsafe {
            let mut result__ = ::std::mem::zeroed();
            (::windows_core::Interface::vtable(this).Rotation)(
                ::windows_core::Interface::as_raw(this),
                &mut result__,
            )
            .from_abi(result__)
        }
    }
    pub fn SetRotation(&self, value: f32) -> ::windows_core::Result<()> {
        let this = self;
        unsafe {
            (::windows_core::Interface::vtable(this).SetRotation)(
                ::windows_core::Interface::as_raw(this),
                value,
            )
            .ok()
        }
    }
    pub fn RotationTransition(&self) -> ::windows_core::Result<ScalarTransition> {
        let this = self;
        unsafe {
            let mut result__ = ::std::mem::zeroed();
            (::windows_core::Interface::vtable(this).RotationTransition)(
                ::windows_core::Interface::as_raw(this),
                &mut result__,
            )
            .from_abi(result__)
        }
    }
    pub fn SetRotationTransition<P0>(&self, value: P0) -> ::windows_core::Result<()>
    where
        P0: ::windows_core::TryIntoParam<ScalarTransition>,
    {
        let this = self;
        unsafe {
            (::windows_core::Interface::vtable(this).SetRotationTransition)(
                ::windows_core::Interface::as_raw(this),
                value.try_into_param()?.abi(),
            )
            .ok()
        }
    }
    #[doc = "Required features: `\"Windows_Foundation_Numerics\"`"]
    #[cfg(feature = "Windows_Foundation_Numerics")]
    pub fn Scale(&self) -> ::windows_core::Result<::windows::Foundation::Numerics::Vector3> {
        let this = self;
        unsafe {
            let mut result__ = ::std::mem::zeroed();
            (::windows_core::Interface::vtable(this).Scale)(
                ::windows_core::Interface::as_raw(this),
                &mut result__,
            )
            .from_abi(result__)
        }
    }
    #[doc = "Required features: `\"Windows_Foundation_Numerics\"`"]
    #[cfg(feature = "Windows_Foundation_Numerics")]
    pub fn SetScale(
        &self,
        value: ::windows::Foundation::Numerics::Vector3,
    ) -> ::windows_core::Result<()> {
        let this = self;
        unsafe {
            (::windows_core::Interface::vtable(this).SetScale)(
                ::windows_core::Interface::as_raw(this),
                value,
            )
            .ok()
        }
    }
    pub fn ScaleTransition(&self) -> ::windows_core::Result<Vector3Transition> {
        let this = self;
        unsafe {
            let mut result__ = ::std::mem::zeroed();
            (::windows_core::Interface::vtable(this).ScaleTransition)(
                ::windows_core::Interface::as_raw(this),
                &mut result__,
            )
            .from_abi(result__)
        }
    }
    pub fn SetScaleTransition<P0>(&self, value: P0) -> ::windows_core::Result<()>
    where
        P0: ::windows_core::TryIntoParam<Vector3Transition>,
    {
        let this = self;
        unsafe {
            (::windows_core::Interface::vtable(this).SetScaleTransition)(
                ::windows_core::Interface::as_raw(this),
                value.try_into_param()?.abi(),
            )
            .ok()
        }
    }
    #[doc = "Required features: `\"Windows_Foundation_Numerics\"`"]
    #[cfg(feature = "Windows_Foundation_Numerics")]
    pub fn TransformMatrix(
        &self,
    ) -> ::windows_core::Result<::windows::Foundation::Numerics::Matrix4x4> {
        let this = self;
        unsafe {
            let mut result__ = ::std::mem::zeroed();
            (::windows_core::Interface::vtable(this).TransformMatrix)(
                ::windows_core::Interface::as_raw(this),
                &mut result__,
            )
            .from_abi(result__)
        }
    }
    #[doc = "Required features: `\"Windows_Foundation_Numerics\"`"]
    #[cfg(feature = "Windows_Foundation_Numerics")]
    pub fn SetTransformMatrix(
        &self,
        value: ::windows::Foundation::Numerics::Matrix4x4,
    ) -> ::windows_core::Result<()> {
        let this = self;
        unsafe {
            (::windows_core::Interface::vtable(this).SetTransformMatrix)(
                ::windows_core::Interface::as_raw(this),
                value,
            )
            .ok()
        }
    }
    #[doc = "Required features: `\"Windows_Foundation_Numerics\"`"]
    #[cfg(feature = "Windows_Foundation_Numerics")]
    pub fn CenterPoint(&self) -> ::windows_core::Result<::windows::Foundation::Numerics::Vector3> {
        let this = self;
        unsafe {
            let mut result__ = ::std::mem::zeroed();
            (::windows_core::Interface::vtable(this).CenterPoint)(
                ::windows_core::Interface::as_raw(this),
                &mut result__,
            )
            .from_abi(result__)
        }
    }
    #[doc = "Required features: `\"Windows_Foundation_Numerics\"`"]
    #[cfg(feature = "Windows_Foundation_Numerics")]
    pub fn SetCenterPoint(
        &self,
        value: ::windows::Foundation::Numerics::Vector3,
    ) -> ::windows_core::Result<()> {
        let this = self;
        unsafe {
            (::windows_core::Interface::vtable(this).SetCenterPoint)(
                ::windows_core::Interface::as_raw(this),
                value,
            )
            .ok()
        }
    }
    #[doc = "Required features: `\"Windows_Foundation_Numerics\"`"]
    #[cfg(feature = "Windows_Foundation_Numerics")]
    pub fn RotationAxis(&self) -> ::windows_core::Result<::windows::Foundation::Numerics::Vector3> {
        let this = self;
        unsafe {
            let mut result__ = ::std::mem::zeroed();
            (::windows_core::Interface::vtable(this).RotationAxis)(
                ::windows_core::Interface::as_raw(this),
                &mut result__,
            )
            .from_abi(result__)
        }
    }
    #[doc = "Required features: `\"Windows_Foundation_Numerics\"`"]
    #[cfg(feature = "Windows_Foundation_Numerics")]
    pub fn SetRotationAxis(
        &self,
        value: ::windows::Foundation::Numerics::Vector3,
    ) -> ::windows_core::Result<()> {
        let this = self;
        unsafe {
            (::windows_core::Interface::vtable(this).SetRotationAxis)(
                ::windows_core::Interface::as_raw(this),
                value,
            )
            .ok()
        }
    }
    #[doc = "Required features: `\"Windows_Foundation_Numerics\"`"]
    #[cfg(feature = "Windows_Foundation_Numerics")]
    pub fn ActualOffset(&self) -> ::windows_core::Result<::windows::Foundation::Numerics::Vector3> {
        let this = self;
        unsafe {
            let mut result__ = ::std::mem::zeroed();
            (::windows_core::Interface::vtable(this).ActualOffset)(
                ::windows_core::Interface::as_raw(this),
                &mut result__,
            )
            .from_abi(result__)
        }
    }
    #[doc = "Required features: `\"Windows_Foundation_Numerics\"`"]
    #[cfg(feature = "Windows_Foundation_Numerics")]
    pub fn ActualSize(&self) -> ::windows_core::Result<::windows::Foundation::Numerics::Vector2> {
        let this = self;
        unsafe {
            let mut result__ = ::std::mem::zeroed();
            (::windows_core::Interface::vtable(this).ActualSize)(
                ::windows_core::Interface::as_raw(this),
                &mut result__,
            )
            .from_abi(result__)
        }
    }
    pub fn XamlRoot(&self) -> ::windows_core::Result<XamlRoot> {
        let this = self;
        unsafe {
            let mut result__ = ::std::mem::zeroed();
            (::windows_core::Interface::vtable(this).XamlRoot)(
                ::windows_core::Interface::as_raw(this),
                &mut result__,
            )
            .from_abi(result__)
        }
    }
    pub fn SetXamlRoot<P0>(&self, value: P0) -> ::windows_core::Result<()>
    where
        P0: ::windows_core::IntoParam<XamlRoot>,
    {
        let this = self;
        unsafe {
            (::windows_core::Interface::vtable(this).SetXamlRoot)(
                ::windows_core::Interface::as_raw(this),
                value.into_param().abi(),
            )
            .ok()
        }
    }
    #[doc = "Required features: `\"Microsoft_UI_Xaml_Media\"`"]
    #[cfg(feature = "Microsoft_UI_Xaml_Media")]
    pub fn Shadow(&self) -> ::windows_core::Result<Media::Shadow> {
        let this = self;
        unsafe {
            let mut result__ = ::std::mem::zeroed();
            (::windows_core::Interface::vtable(this).Shadow)(
                ::windows_core::Interface::as_raw(this),
                &mut result__,
            )
            .from_abi(result__)
        }
    }
    #[doc = "Required features: `\"Microsoft_UI_Xaml_Media\"`"]
    #[cfg(feature = "Microsoft_UI_Xaml_Media")]
    pub fn SetShadow<P0>(&self, value: P0) -> ::windows_core::Result<()>
    where
        P0: ::windows_core::TryIntoParam<Media::Shadow>,
    {
        let this = self;
        unsafe {
            (::windows_core::Interface::vtable(this).SetShadow)(
                ::windows_core::Interface::as_raw(this),
                value.try_into_param()?.abi(),
            )
            .ok()
        }
    }
    pub fn RasterizationScale(&self) -> ::windows_core::Result<f64> {
        let this = self;
        unsafe {
            let mut result__ = ::std::mem::zeroed();
            (::windows_core::Interface::vtable(this).RasterizationScale)(
                ::windows_core::Interface::as_raw(this),
                &mut result__,
            )
            .from_abi(result__)
        }
    }
    pub fn SetRasterizationScale(&self, value: f64) -> ::windows_core::Result<()> {
        let this = self;
        unsafe {
            (::windows_core::Interface::vtable(this).SetRasterizationScale)(
                ::windows_core::Interface::as_raw(this),
                value,
            )
            .ok()
        }
    }
    pub fn FocusState(&self) -> ::windows_core::Result<FocusState> {
        let this = self;
        unsafe {
            let mut result__ = ::std::mem::zeroed();
            (::windows_core::Interface::vtable(this).FocusState)(
                ::windows_core::Interface::as_raw(this),
                &mut result__,
            )
            .from_abi(result__)
        }
    }
    pub fn UseSystemFocusVisuals(&self) -> ::windows_core::Result<bool> {
        let this = self;
        unsafe {
            let mut result__ = ::std::mem::zeroed();
            (::windows_core::Interface::vtable(this).UseSystemFocusVisuals)(
                ::windows_core::Interface::as_raw(this),
                &mut result__,
            )
            .from_abi(result__)
        }
    }
    pub fn SetUseSystemFocusVisuals(&self, value: bool) -> ::windows_core::Result<()> {
        let this = self;
        unsafe {
            (::windows_core::Interface::vtable(this).SetUseSystemFocusVisuals)(
                ::windows_core::Interface::as_raw(this),
                value,
            )
            .ok()
        }
    }
    pub fn XYFocusLeft(&self) -> ::windows_core::Result<DependencyObject> {
        let this = self;
        unsafe {
            let mut result__ = ::std::mem::zeroed();
            (::windows_core::Interface::vtable(this).XYFocusLeft)(
                ::windows_core::Interface::as_raw(this),
                &mut result__,
            )
            .from_abi(result__)
        }
    }
    pub fn SetXYFocusLeft<P0>(&self, value: P0) -> ::windows_core::Result<()>
    where
        P0: ::windows_core::TryIntoParam<DependencyObject>,
    {
        let this = self;
        unsafe {
            (::windows_core::Interface::vtable(this).SetXYFocusLeft)(
                ::windows_core::Interface::as_raw(this),
                value.try_into_param()?.abi(),
            )
            .ok()
        }
    }
    pub fn XYFocusRight(&self) -> ::windows_core::Result<DependencyObject> {
        let this = self;
        unsafe {
            let mut result__ = ::std::mem::zeroed();
            (::windows_core::Interface::vtable(this).XYFocusRight)(
                ::windows_core::Interface::as_raw(this),
                &mut result__,
            )
            .from_abi(result__)
        }
    }
    pub fn SetXYFocusRight<P0>(&self, value: P0) -> ::windows_core::Result<()>
    where
        P0: ::windows_core::TryIntoParam<DependencyObject>,
    {
        let this = self;
        unsafe {
            (::windows_core::Interface::vtable(this).SetXYFocusRight)(
                ::windows_core::Interface::as_raw(this),
                value.try_into_param()?.abi(),
            )
            .ok()
        }
    }
    pub fn XYFocusUp(&self) -> ::windows_core::Result<DependencyObject> {
        let this = self;
        unsafe {
            let mut result__ = ::std::mem::zeroed();
            (::windows_core::Interface::vtable(this).XYFocusUp)(
                ::windows_core::Interface::as_raw(this),
                &mut result__,
            )
            .from_abi(result__)
        }
    }
    pub fn SetXYFocusUp<P0>(&self, value: P0) -> ::windows_core::Result<()>
    where
        P0: ::windows_core::TryIntoParam<DependencyObject>,
    {
        let this = self;
        unsafe {
            (::windows_core::Interface::vtable(this).SetXYFocusUp)(
                ::windows_core::Interface::as_raw(this),
                value.try_into_param()?.abi(),
            )
            .ok()
        }
    }
    pub fn XYFocusDown(&self) -> ::windows_core::Result<DependencyObject> {
        let this = self;
        unsafe {
            let mut result__ = ::std::mem::zeroed();
            (::windows_core::Interface::vtable(this).XYFocusDown)(
                ::windows_core::Interface::as_raw(this),
                &mut result__,
            )
            .from_abi(result__)
        }
    }
    pub fn SetXYFocusDown<P0>(&self, value: P0) -> ::windows_core::Result<()>
    where
        P0: ::windows_core::TryIntoParam<DependencyObject>,
    {
        let this = self;
        unsafe {
            (::windows_core::Interface::vtable(this).SetXYFocusDown)(
                ::windows_core::Interface::as_raw(this),
                value.try_into_param()?.abi(),
            )
            .ok()
        }
    }
    pub fn IsTabStop(&self) -> ::windows_core::Result<bool> {
        let this = self;
        unsafe {
            let mut result__ = ::std::mem::zeroed();
            (::windows_core::Interface::vtable(this).IsTabStop)(
                ::windows_core::Interface::as_raw(this),
                &mut result__,
            )
            .from_abi(result__)
        }
    }
    pub fn SetIsTabStop(&self, value: bool) -> ::windows_core::Result<()> {
        let this = self;
        unsafe {
            (::windows_core::Interface::vtable(this).SetIsTabStop)(
                ::windows_core::Interface::as_raw(this),
                value,
            )
            .ok()
        }
    }
    pub fn TabIndex(&self) -> ::windows_core::Result<i32> {
        let this = self;
        unsafe {
            let mut result__ = ::std::mem::zeroed();
            (::windows_core::Interface::vtable(this).TabIndex)(
                ::windows_core::Interface::as_raw(this),
                &mut result__,
            )
            .from_abi(result__)
        }
    }
    pub fn SetTabIndex(&self, value: i32) -> ::windows_core::Result<()> {
        let this = self;
        unsafe {
            (::windows_core::Interface::vtable(this).SetTabIndex)(
                ::windows_core::Interface::as_raw(this),
                value,
            )
            .ok()
        }
    }
    #[doc = "Required features: `\"Microsoft_UI_Xaml_Input\"`, `\"Windows_Foundation\"`"]
    #[cfg(all(feature = "Microsoft_UI_Xaml_Input", feature = "Windows_Foundation"))]
    pub fn KeyUp<P0>(
        &self,
        handler: P0,
    ) -> ::windows_core::Result<::windows::Foundation::EventRegistrationToken>
    where
        P0: ::windows_core::IntoParam<Input::KeyEventHandler>,
    {
        let this = self;
        unsafe {
            let mut result__ = ::std::mem::zeroed();
            (::windows_core::Interface::vtable(this).KeyUp)(
                ::windows_core::Interface::as_raw(this),
                handler.into_param().abi(),
                &mut result__,
            )
            .from_abi(result__)
        }
    }
    #[doc = "Required features: `\"Windows_Foundation\"`"]
    #[cfg(feature = "Windows_Foundation")]
    pub fn RemoveKeyUp(
        &self,
        token: ::windows::Foundation::EventRegistrationToken,
    ) -> ::windows_core::Result<()> {
        let this = self;
        unsafe {
            (::windows_core::Interface::vtable(this).RemoveKeyUp)(
                ::windows_core::Interface::as_raw(this),
                token,
            )
            .ok()
        }
    }
    #[doc = "Required features: `\"Microsoft_UI_Xaml_Input\"`, `\"Windows_Foundation\"`"]
    #[cfg(all(feature = "Microsoft_UI_Xaml_Input", feature = "Windows_Foundation"))]
    pub fn KeyDown<P0>(
        &self,
        handler: P0,
    ) -> ::windows_core::Result<::windows::Foundation::EventRegistrationToken>
    where
        P0: ::windows_core::IntoParam<Input::KeyEventHandler>,
    {
        let this = self;
        unsafe {
            let mut result__ = ::std::mem::zeroed();
            (::windows_core::Interface::vtable(this).KeyDown)(
                ::windows_core::Interface::as_raw(this),
                handler.into_param().abi(),
                &mut result__,
            )
            .from_abi(result__)
        }
    }
    #[doc = "Required features: `\"Windows_Foundation\"`"]
    #[cfg(feature = "Windows_Foundation")]
    pub fn RemoveKeyDown(
        &self,
        token: ::windows::Foundation::EventRegistrationToken,
    ) -> ::windows_core::Result<()> {
        let this = self;
        unsafe {
            (::windows_core::Interface::vtable(this).RemoveKeyDown)(
                ::windows_core::Interface::as_raw(this),
                token,
            )
            .ok()
        }
    }
    #[doc = "Required features: `\"Windows_Foundation\"`"]
    #[cfg(feature = "Windows_Foundation")]
    pub fn GotFocus<P0>(
        &self,
        handler: P0,
    ) -> ::windows_core::Result<::windows::Foundation::EventRegistrationToken>
    where
        P0: ::windows_core::IntoParam<RoutedEventHandler>,
    {
        let this = self;
        unsafe {
            let mut result__ = ::std::mem::zeroed();
            (::windows_core::Interface::vtable(this).GotFocus)(
                ::windows_core::Interface::as_raw(this),
                handler.into_param().abi(),
                &mut result__,
            )
            .from_abi(result__)
        }
    }
    #[doc = "Required features: `\"Windows_Foundation\"`"]
    #[cfg(feature = "Windows_Foundation")]
    pub fn RemoveGotFocus(
        &self,
        token: ::windows::Foundation::EventRegistrationToken,
    ) -> ::windows_core::Result<()> {
        let this = self;
        unsafe {
            (::windows_core::Interface::vtable(this).RemoveGotFocus)(
                ::windows_core::Interface::as_raw(this),
                token,
            )
            .ok()
        }
    }
    #[doc = "Required features: `\"Windows_Foundation\"`"]
    #[cfg(feature = "Windows_Foundation")]
    pub fn LostFocus<P0>(
        &self,
        handler: P0,
    ) -> ::windows_core::Result<::windows::Foundation::EventRegistrationToken>
    where
        P0: ::windows_core::IntoParam<RoutedEventHandler>,
    {
        let this = self;
        unsafe {
            let mut result__ = ::std::mem::zeroed();
            (::windows_core::Interface::vtable(this).LostFocus)(
                ::windows_core::Interface::as_raw(this),
                handler.into_param().abi(),
                &mut result__,
            )
            .from_abi(result__)
        }
    }
    #[doc = "Required features: `\"Windows_Foundation\"`"]
    #[cfg(feature = "Windows_Foundation")]
    pub fn RemoveLostFocus(
        &self,
        token: ::windows::Foundation::EventRegistrationToken,
    ) -> ::windows_core::Result<()> {
        let this = self;
        unsafe {
            (::windows_core::Interface::vtable(this).RemoveLostFocus)(
                ::windows_core::Interface::as_raw(this),
                token,
            )
            .ok()
        }
    }
    #[doc = "Required features: `\"Windows_Foundation\"`"]
    #[cfg(feature = "Windows_Foundation")]
    pub fn DragStarting<P0>(
        &self,
        handler: P0,
    ) -> ::windows_core::Result<::windows::Foundation::EventRegistrationToken>
    where
        P0: ::windows_core::IntoParam<
            ::windows::Foundation::TypedEventHandler<UIElement, DragStartingEventArgs>,
        >,
    {
        let this = self;
        unsafe {
            let mut result__ = ::std::mem::zeroed();
            (::windows_core::Interface::vtable(this).DragStarting)(
                ::windows_core::Interface::as_raw(this),
                handler.into_param().abi(),
                &mut result__,
            )
            .from_abi(result__)
        }
    }
    #[doc = "Required features: `\"Windows_Foundation\"`"]
    #[cfg(feature = "Windows_Foundation")]
    pub fn RemoveDragStarting(
        &self,
        token: ::windows::Foundation::EventRegistrationToken,
    ) -> ::windows_core::Result<()> {
        let this = self;
        unsafe {
            (::windows_core::Interface::vtable(this).RemoveDragStarting)(
                ::windows_core::Interface::as_raw(this),
                token,
            )
            .ok()
        }
    }
    #[doc = "Required features: `\"Windows_Foundation\"`"]
    #[cfg(feature = "Windows_Foundation")]
    pub fn DropCompleted<P0>(
        &self,
        handler: P0,
    ) -> ::windows_core::Result<::windows::Foundation::EventRegistrationToken>
    where
        P0: ::windows_core::IntoParam<
            ::windows::Foundation::TypedEventHandler<UIElement, DropCompletedEventArgs>,
        >,
    {
        let this = self;
        unsafe {
            let mut result__ = ::std::mem::zeroed();
            (::windows_core::Interface::vtable(this).DropCompleted)(
                ::windows_core::Interface::as_raw(this),
                handler.into_param().abi(),
                &mut result__,
            )
            .from_abi(result__)
        }
    }
    #[doc = "Required features: `\"Windows_Foundation\"`"]
    #[cfg(feature = "Windows_Foundation")]
    pub fn RemoveDropCompleted(
        &self,
        token: ::windows::Foundation::EventRegistrationToken,
    ) -> ::windows_core::Result<()> {
        let this = self;
        unsafe {
            (::windows_core::Interface::vtable(this).RemoveDropCompleted)(
                ::windows_core::Interface::as_raw(this),
                token,
            )
            .ok()
        }
    }
    #[doc = "Required features: `\"Microsoft_UI_Xaml_Input\"`, `\"Windows_Foundation\"`"]
    #[cfg(all(feature = "Microsoft_UI_Xaml_Input", feature = "Windows_Foundation"))]
    pub fn CharacterReceived<P0>(
        &self,
        handler: P0,
    ) -> ::windows_core::Result<::windows::Foundation::EventRegistrationToken>
    where
        P0: ::windows_core::IntoParam<
            ::windows::Foundation::TypedEventHandler<
                UIElement,
                Input::CharacterReceivedRoutedEventArgs,
            >,
        >,
    {
        let this = self;
        unsafe {
            let mut result__ = ::std::mem::zeroed();
            (::windows_core::Interface::vtable(this).CharacterReceived)(
                ::windows_core::Interface::as_raw(this),
                handler.into_param().abi(),
                &mut result__,
            )
            .from_abi(result__)
        }
    }
    #[doc = "Required features: `\"Windows_Foundation\"`"]
    #[cfg(feature = "Windows_Foundation")]
    pub fn RemoveCharacterReceived(
        &self,
        token: ::windows::Foundation::EventRegistrationToken,
    ) -> ::windows_core::Result<()> {
        let this = self;
        unsafe {
            (::windows_core::Interface::vtable(this).RemoveCharacterReceived)(
                ::windows_core::Interface::as_raw(this),
                token,
            )
            .ok()
        }
    }
    #[doc = "Required features: `\"Windows_Foundation\"`"]
    #[cfg(feature = "Windows_Foundation")]
    pub fn DragEnter<P0>(
        &self,
        handler: P0,
    ) -> ::windows_core::Result<::windows::Foundation::EventRegistrationToken>
    where
        P0: ::windows_core::IntoParam<DragEventHandler>,
    {
        let this = self;
        unsafe {
            let mut result__ = ::std::mem::zeroed();
            (::windows_core::Interface::vtable(this).DragEnter)(
                ::windows_core::Interface::as_raw(this),
                handler.into_param().abi(),
                &mut result__,
            )
            .from_abi(result__)
        }
    }
    #[doc = "Required features: `\"Windows_Foundation\"`"]
    #[cfg(feature = "Windows_Foundation")]
    pub fn RemoveDragEnter(
        &self,
        token: ::windows::Foundation::EventRegistrationToken,
    ) -> ::windows_core::Result<()> {
        let this = self;
        unsafe {
            (::windows_core::Interface::vtable(this).RemoveDragEnter)(
                ::windows_core::Interface::as_raw(this),
                token,
            )
            .ok()
        }
    }
    #[doc = "Required features: `\"Windows_Foundation\"`"]
    #[cfg(feature = "Windows_Foundation")]
    pub fn DragLeave<P0>(
        &self,
        handler: P0,
    ) -> ::windows_core::Result<::windows::Foundation::EventRegistrationToken>
    where
        P0: ::windows_core::IntoParam<DragEventHandler>,
    {
        let this = self;
        unsafe {
            let mut result__ = ::std::mem::zeroed();
            (::windows_core::Interface::vtable(this).DragLeave)(
                ::windows_core::Interface::as_raw(this),
                handler.into_param().abi(),
                &mut result__,
            )
            .from_abi(result__)
        }
    }
    #[doc = "Required features: `\"Windows_Foundation\"`"]
    #[cfg(feature = "Windows_Foundation")]
    pub fn RemoveDragLeave(
        &self,
        token: ::windows::Foundation::EventRegistrationToken,
    ) -> ::windows_core::Result<()> {
        let this = self;
        unsafe {
            (::windows_core::Interface::vtable(this).RemoveDragLeave)(
                ::windows_core::Interface::as_raw(this),
                token,
            )
            .ok()
        }
    }
    #[doc = "Required features: `\"Windows_Foundation\"`"]
    #[cfg(feature = "Windows_Foundation")]
    pub fn DragOver<P0>(
        &self,
        handler: P0,
    ) -> ::windows_core::Result<::windows::Foundation::EventRegistrationToken>
    where
        P0: ::windows_core::IntoParam<DragEventHandler>,
    {
        let this = self;
        unsafe {
            let mut result__ = ::std::mem::zeroed();
            (::windows_core::Interface::vtable(this).DragOver)(
                ::windows_core::Interface::as_raw(this),
                handler.into_param().abi(),
                &mut result__,
            )
            .from_abi(result__)
        }
    }
    #[doc = "Required features: `\"Windows_Foundation\"`"]
    #[cfg(feature = "Windows_Foundation")]
    pub fn RemoveDragOver(
        &self,
        token: ::windows::Foundation::EventRegistrationToken,
    ) -> ::windows_core::Result<()> {
        let this = self;
        unsafe {
            (::windows_core::Interface::vtable(this).RemoveDragOver)(
                ::windows_core::Interface::as_raw(this),
                token,
            )
            .ok()
        }
    }
    #[doc = "Required features: `\"Windows_Foundation\"`"]
    #[cfg(feature = "Windows_Foundation")]
    pub fn Drop<P0>(
        &self,
        handler: P0,
    ) -> ::windows_core::Result<::windows::Foundation::EventRegistrationToken>
    where
        P0: ::windows_core::IntoParam<DragEventHandler>,
    {
        let this = self;
        unsafe {
            let mut result__ = ::std::mem::zeroed();
            (::windows_core::Interface::vtable(this).Drop)(
                ::windows_core::Interface::as_raw(this),
                handler.into_param().abi(),
                &mut result__,
            )
            .from_abi(result__)
        }
    }
    #[doc = "Required features: `\"Windows_Foundation\"`"]
    #[cfg(feature = "Windows_Foundation")]
    pub fn RemoveDrop(
        &self,
        token: ::windows::Foundation::EventRegistrationToken,
    ) -> ::windows_core::Result<()> {
        let this = self;
        unsafe {
            (::windows_core::Interface::vtable(this).RemoveDrop)(
                ::windows_core::Interface::as_raw(this),
                token,
            )
            .ok()
        }
    }
    #[doc = "Required features: `\"Microsoft_UI_Xaml_Input\"`, `\"Windows_Foundation\"`"]
    #[cfg(all(feature = "Microsoft_UI_Xaml_Input", feature = "Windows_Foundation"))]
    pub fn PointerPressed<P0>(
        &self,
        handler: P0,
    ) -> ::windows_core::Result<::windows::Foundation::EventRegistrationToken>
    where
        P0: ::windows_core::IntoParam<Input::PointerEventHandler>,
    {
        let this = self;
        unsafe {
            let mut result__ = ::std::mem::zeroed();
            (::windows_core::Interface::vtable(this).PointerPressed)(
                ::windows_core::Interface::as_raw(this),
                handler.into_param().abi(),
                &mut result__,
            )
            .from_abi(result__)
        }
    }
    #[doc = "Required features: `\"Windows_Foundation\"`"]
    #[cfg(feature = "Windows_Foundation")]
    pub fn RemovePointerPressed(
        &self,
        token: ::windows::Foundation::EventRegistrationToken,
    ) -> ::windows_core::Result<()> {
        let this = self;
        unsafe {
            (::windows_core::Interface::vtable(this).RemovePointerPressed)(
                ::windows_core::Interface::as_raw(this),
                token,
            )
            .ok()
        }
    }
    #[doc = "Required features: `\"Microsoft_UI_Xaml_Input\"`, `\"Windows_Foundation\"`"]
    #[cfg(all(feature = "Microsoft_UI_Xaml_Input", feature = "Windows_Foundation"))]
    pub fn PointerMoved<P0>(
        &self,
        handler: P0,
    ) -> ::windows_core::Result<::windows::Foundation::EventRegistrationToken>
    where
        P0: ::windows_core::IntoParam<Input::PointerEventHandler>,
    {
        let this = self;
        unsafe {
            let mut result__ = ::std::mem::zeroed();
            (::windows_core::Interface::vtable(this).PointerMoved)(
                ::windows_core::Interface::as_raw(this),
                handler.into_param().abi(),
                &mut result__,
            )
            .from_abi(result__)
        }
    }
    #[doc = "Required features: `\"Windows_Foundation\"`"]
    #[cfg(feature = "Windows_Foundation")]
    pub fn RemovePointerMoved(
        &self,
        token: ::windows::Foundation::EventRegistrationToken,
    ) -> ::windows_core::Result<()> {
        let this = self;
        unsafe {
            (::windows_core::Interface::vtable(this).RemovePointerMoved)(
                ::windows_core::Interface::as_raw(this),
                token,
            )
            .ok()
        }
    }
    #[doc = "Required features: `\"Microsoft_UI_Xaml_Input\"`, `\"Windows_Foundation\"`"]
    #[cfg(all(feature = "Microsoft_UI_Xaml_Input", feature = "Windows_Foundation"))]
    pub fn PointerReleased<P0>(
        &self,
        handler: P0,
    ) -> ::windows_core::Result<::windows::Foundation::EventRegistrationToken>
    where
        P0: ::windows_core::IntoParam<Input::PointerEventHandler>,
    {
        let this = self;
        unsafe {
            let mut result__ = ::std::mem::zeroed();
            (::windows_core::Interface::vtable(this).PointerReleased)(
                ::windows_core::Interface::as_raw(this),
                handler.into_param().abi(),
                &mut result__,
            )
            .from_abi(result__)
        }
    }
    #[doc = "Required features: `\"Windows_Foundation\"`"]
    #[cfg(feature = "Windows_Foundation")]
    pub fn RemovePointerReleased(
        &self,
        token: ::windows::Foundation::EventRegistrationToken,
    ) -> ::windows_core::Result<()> {
        let this = self;
        unsafe {
            (::windows_core::Interface::vtable(this).RemovePointerReleased)(
                ::windows_core::Interface::as_raw(this),
                token,
            )
            .ok()
        }
    }
    #[doc = "Required features: `\"Microsoft_UI_Xaml_Input\"`, `\"Windows_Foundation\"`"]
    #[cfg(all(feature = "Microsoft_UI_Xaml_Input", feature = "Windows_Foundation"))]
    pub fn PointerEntered<P0>(
        &self,
        handler: P0,
    ) -> ::windows_core::Result<::windows::Foundation::EventRegistrationToken>
    where
        P0: ::windows_core::IntoParam<Input::PointerEventHandler>,
    {
        let this = self;
        unsafe {
            let mut result__ = ::std::mem::zeroed();
            (::windows_core::Interface::vtable(this).PointerEntered)(
                ::windows_core::Interface::as_raw(this),
                handler.into_param().abi(),
                &mut result__,
            )
            .from_abi(result__)
        }
    }
    #[doc = "Required features: `\"Windows_Foundation\"`"]
    #[cfg(feature = "Windows_Foundation")]
    pub fn RemovePointerEntered(
        &self,
        token: ::windows::Foundation::EventRegistrationToken,
    ) -> ::windows_core::Result<()> {
        let this = self;
        unsafe {
            (::windows_core::Interface::vtable(this).RemovePointerEntered)(
                ::windows_core::Interface::as_raw(this),
                token,
            )
            .ok()
        }
    }
    #[doc = "Required features: `\"Microsoft_UI_Xaml_Input\"`, `\"Windows_Foundation\"`"]
    #[cfg(all(feature = "Microsoft_UI_Xaml_Input", feature = "Windows_Foundation"))]
    pub fn PointerExited<P0>(
        &self,
        handler: P0,
    ) -> ::windows_core::Result<::windows::Foundation::EventRegistrationToken>
    where
        P0: ::windows_core::IntoParam<Input::PointerEventHandler>,
    {
        let this = self;
        unsafe {
            let mut result__ = ::std::mem::zeroed();
            (::windows_core::Interface::vtable(this).PointerExited)(
                ::windows_core::Interface::as_raw(this),
                handler.into_param().abi(),
                &mut result__,
            )
            .from_abi(result__)
        }
    }
    #[doc = "Required features: `\"Windows_Foundation\"`"]
    #[cfg(feature = "Windows_Foundation")]
    pub fn RemovePointerExited(
        &self,
        token: ::windows::Foundation::EventRegistrationToken,
    ) -> ::windows_core::Result<()> {
        let this = self;
        unsafe {
            (::windows_core::Interface::vtable(this).RemovePointerExited)(
                ::windows_core::Interface::as_raw(this),
                token,
            )
            .ok()
        }
    }
    #[doc = "Required features: `\"Microsoft_UI_Xaml_Input\"`, `\"Windows_Foundation\"`"]
    #[cfg(all(feature = "Microsoft_UI_Xaml_Input", feature = "Windows_Foundation"))]
    pub fn PointerCaptureLost<P0>(
        &self,
        handler: P0,
    ) -> ::windows_core::Result<::windows::Foundation::EventRegistrationToken>
    where
        P0: ::windows_core::IntoParam<Input::PointerEventHandler>,
    {
        let this = self;
        unsafe {
            let mut result__ = ::std::mem::zeroed();
            (::windows_core::Interface::vtable(this).PointerCaptureLost)(
                ::windows_core::Interface::as_raw(this),
                handler.into_param().abi(),
                &mut result__,
            )
            .from_abi(result__)
        }
    }
    #[doc = "Required features: `\"Windows_Foundation\"`"]
    #[cfg(feature = "Windows_Foundation")]
    pub fn RemovePointerCaptureLost(
        &self,
        token: ::windows::Foundation::EventRegistrationToken,
    ) -> ::windows_core::Result<()> {
        let this = self;
        unsafe {
            (::windows_core::Interface::vtable(this).RemovePointerCaptureLost)(
                ::windows_core::Interface::as_raw(this),
                token,
            )
            .ok()
        }
    }
    #[doc = "Required features: `\"Microsoft_UI_Xaml_Input\"`, `\"Windows_Foundation\"`"]
    #[cfg(all(feature = "Microsoft_UI_Xaml_Input", feature = "Windows_Foundation"))]
    pub fn PointerCanceled<P0>(
        &self,
        handler: P0,
    ) -> ::windows_core::Result<::windows::Foundation::EventRegistrationToken>
    where
        P0: ::windows_core::IntoParam<Input::PointerEventHandler>,
    {
        let this = self;
        unsafe {
            let mut result__ = ::std::mem::zeroed();
            (::windows_core::Interface::vtable(this).PointerCanceled)(
                ::windows_core::Interface::as_raw(this),
                handler.into_param().abi(),
                &mut result__,
            )
            .from_abi(result__)
        }
    }
    #[doc = "Required features: `\"Windows_Foundation\"`"]
    #[cfg(feature = "Windows_Foundation")]
    pub fn RemovePointerCanceled(
        &self,
        token: ::windows::Foundation::EventRegistrationToken,
    ) -> ::windows_core::Result<()> {
        let this = self;
        unsafe {
            (::windows_core::Interface::vtable(this).RemovePointerCanceled)(
                ::windows_core::Interface::as_raw(this),
                token,
            )
            .ok()
        }
    }
    #[doc = "Required features: `\"Microsoft_UI_Xaml_Input\"`, `\"Windows_Foundation\"`"]
    #[cfg(all(feature = "Microsoft_UI_Xaml_Input", feature = "Windows_Foundation"))]
    pub fn PointerWheelChanged<P0>(
        &self,
        handler: P0,
    ) -> ::windows_core::Result<::windows::Foundation::EventRegistrationToken>
    where
        P0: ::windows_core::IntoParam<Input::PointerEventHandler>,
    {
        let this = self;
        unsafe {
            let mut result__ = ::std::mem::zeroed();
            (::windows_core::Interface::vtable(this).PointerWheelChanged)(
                ::windows_core::Interface::as_raw(this),
                handler.into_param().abi(),
                &mut result__,
            )
            .from_abi(result__)
        }
    }
    #[doc = "Required features: `\"Windows_Foundation\"`"]
    #[cfg(feature = "Windows_Foundation")]
    pub fn RemovePointerWheelChanged(
        &self,
        token: ::windows::Foundation::EventRegistrationToken,
    ) -> ::windows_core::Result<()> {
        let this = self;
        unsafe {
            (::windows_core::Interface::vtable(this).RemovePointerWheelChanged)(
                ::windows_core::Interface::as_raw(this),
                token,
            )
            .ok()
        }
    }
    #[doc = "Required features: `\"Microsoft_UI_Xaml_Input\"`, `\"Windows_Foundation\"`"]
    #[cfg(all(feature = "Microsoft_UI_Xaml_Input", feature = "Windows_Foundation"))]
    pub fn Tapped<P0>(
        &self,
        handler: P0,
    ) -> ::windows_core::Result<::windows::Foundation::EventRegistrationToken>
    where
        P0: ::windows_core::IntoParam<Input::TappedEventHandler>,
    {
        let this = self;
        unsafe {
            let mut result__ = ::std::mem::zeroed();
            (::windows_core::Interface::vtable(this).Tapped)(
                ::windows_core::Interface::as_raw(this),
                handler.into_param().abi(),
                &mut result__,
            )
            .from_abi(result__)
        }
    }
    #[doc = "Required features: `\"Windows_Foundation\"`"]
    #[cfg(feature = "Windows_Foundation")]
    pub fn RemoveTapped(
        &self,
        token: ::windows::Foundation::EventRegistrationToken,
    ) -> ::windows_core::Result<()> {
        let this = self;
        unsafe {
            (::windows_core::Interface::vtable(this).RemoveTapped)(
                ::windows_core::Interface::as_raw(this),
                token,
            )
            .ok()
        }
    }
    #[doc = "Required features: `\"Microsoft_UI_Xaml_Input\"`, `\"Windows_Foundation\"`"]
    #[cfg(all(feature = "Microsoft_UI_Xaml_Input", feature = "Windows_Foundation"))]
    pub fn DoubleTapped<P0>(
        &self,
        handler: P0,
    ) -> ::windows_core::Result<::windows::Foundation::EventRegistrationToken>
    where
        P0: ::windows_core::IntoParam<Input::DoubleTappedEventHandler>,
    {
        let this = self;
        unsafe {
            let mut result__ = ::std::mem::zeroed();
            (::windows_core::Interface::vtable(this).DoubleTapped)(
                ::windows_core::Interface::as_raw(this),
                handler.into_param().abi(),
                &mut result__,
            )
            .from_abi(result__)
        }
    }
    #[doc = "Required features: `\"Windows_Foundation\"`"]
    #[cfg(feature = "Windows_Foundation")]
    pub fn RemoveDoubleTapped(
        &self,
        token: ::windows::Foundation::EventRegistrationToken,
    ) -> ::windows_core::Result<()> {
        let this = self;
        unsafe {
            (::windows_core::Interface::vtable(this).RemoveDoubleTapped)(
                ::windows_core::Interface::as_raw(this),
                token,
            )
            .ok()
        }
    }
    #[doc = "Required features: `\"Microsoft_UI_Xaml_Input\"`, `\"Windows_Foundation\"`"]
    #[cfg(all(feature = "Microsoft_UI_Xaml_Input", feature = "Windows_Foundation"))]
    pub fn Holding<P0>(
        &self,
        handler: P0,
    ) -> ::windows_core::Result<::windows::Foundation::EventRegistrationToken>
    where
        P0: ::windows_core::IntoParam<Input::HoldingEventHandler>,
    {
        let this = self;
        unsafe {
            let mut result__ = ::std::mem::zeroed();
            (::windows_core::Interface::vtable(this).Holding)(
                ::windows_core::Interface::as_raw(this),
                handler.into_param().abi(),
                &mut result__,
            )
            .from_abi(result__)
        }
    }
    #[doc = "Required features: `\"Windows_Foundation\"`"]
    #[cfg(feature = "Windows_Foundation")]
    pub fn RemoveHolding(
        &self,
        token: ::windows::Foundation::EventRegistrationToken,
    ) -> ::windows_core::Result<()> {
        let this = self;
        unsafe {
            (::windows_core::Interface::vtable(this).RemoveHolding)(
                ::windows_core::Interface::as_raw(this),
                token,
            )
            .ok()
        }
    }
    #[doc = "Required features: `\"Microsoft_UI_Xaml_Input\"`, `\"Windows_Foundation\"`"]
    #[cfg(all(feature = "Microsoft_UI_Xaml_Input", feature = "Windows_Foundation"))]
    pub fn ContextRequested<P0>(
        &self,
        handler: P0,
    ) -> ::windows_core::Result<::windows::Foundation::EventRegistrationToken>
    where
        P0: ::windows_core::IntoParam<
            ::windows::Foundation::TypedEventHandler<UIElement, Input::ContextRequestedEventArgs>,
        >,
    {
        let this = self;
        unsafe {
            let mut result__ = ::std::mem::zeroed();
            (::windows_core::Interface::vtable(this).ContextRequested)(
                ::windows_core::Interface::as_raw(this),
                handler.into_param().abi(),
                &mut result__,
            )
            .from_abi(result__)
        }
    }
    #[doc = "Required features: `\"Windows_Foundation\"`"]
    #[cfg(feature = "Windows_Foundation")]
    pub fn RemoveContextRequested(
        &self,
        token: ::windows::Foundation::EventRegistrationToken,
    ) -> ::windows_core::Result<()> {
        let this = self;
        unsafe {
            (::windows_core::Interface::vtable(this).RemoveContextRequested)(
                ::windows_core::Interface::as_raw(this),
                token,
            )
            .ok()
        }
    }
    #[doc = "Required features: `\"Windows_Foundation\"`"]
    #[cfg(feature = "Windows_Foundation")]
    pub fn ContextCanceled<P0>(
        &self,
        handler: P0,
    ) -> ::windows_core::Result<::windows::Foundation::EventRegistrationToken>
    where
        P0: ::windows_core::IntoParam<
            ::windows::Foundation::TypedEventHandler<UIElement, RoutedEventArgs>,
        >,
    {
        let this = self;
        unsafe {
            let mut result__ = ::std::mem::zeroed();
            (::windows_core::Interface::vtable(this).ContextCanceled)(
                ::windows_core::Interface::as_raw(this),
                handler.into_param().abi(),
                &mut result__,
            )
            .from_abi(result__)
        }
    }
    #[doc = "Required features: `\"Windows_Foundation\"`"]
    #[cfg(feature = "Windows_Foundation")]
    pub fn RemoveContextCanceled(
        &self,
        token: ::windows::Foundation::EventRegistrationToken,
    ) -> ::windows_core::Result<()> {
        let this = self;
        unsafe {
            (::windows_core::Interface::vtable(this).RemoveContextCanceled)(
                ::windows_core::Interface::as_raw(this),
                token,
            )
            .ok()
        }
    }
    #[doc = "Required features: `\"Microsoft_UI_Xaml_Input\"`, `\"Windows_Foundation\"`"]
    #[cfg(all(feature = "Microsoft_UI_Xaml_Input", feature = "Windows_Foundation"))]
    pub fn RightTapped<P0>(
        &self,
        handler: P0,
    ) -> ::windows_core::Result<::windows::Foundation::EventRegistrationToken>
    where
        P0: ::windows_core::IntoParam<Input::RightTappedEventHandler>,
    {
        let this = self;
        unsafe {
            let mut result__ = ::std::mem::zeroed();
            (::windows_core::Interface::vtable(this).RightTapped)(
                ::windows_core::Interface::as_raw(this),
                handler.into_param().abi(),
                &mut result__,
            )
            .from_abi(result__)
        }
    }
    #[doc = "Required features: `\"Windows_Foundation\"`"]
    #[cfg(feature = "Windows_Foundation")]
    pub fn RemoveRightTapped(
        &self,
        token: ::windows::Foundation::EventRegistrationToken,
    ) -> ::windows_core::Result<()> {
        let this = self;
        unsafe {
            (::windows_core::Interface::vtable(this).RemoveRightTapped)(
                ::windows_core::Interface::as_raw(this),
                token,
            )
            .ok()
        }
    }
    #[doc = "Required features: `\"Microsoft_UI_Xaml_Input\"`, `\"Windows_Foundation\"`"]
    #[cfg(all(feature = "Microsoft_UI_Xaml_Input", feature = "Windows_Foundation"))]
    pub fn ManipulationStarting<P0>(
        &self,
        handler: P0,
    ) -> ::windows_core::Result<::windows::Foundation::EventRegistrationToken>
    where
        P0: ::windows_core::IntoParam<Input::ManipulationStartingEventHandler>,
    {
        let this = self;
        unsafe {
            let mut result__ = ::std::mem::zeroed();
            (::windows_core::Interface::vtable(this).ManipulationStarting)(
                ::windows_core::Interface::as_raw(this),
                handler.into_param().abi(),
                &mut result__,
            )
            .from_abi(result__)
        }
    }
    #[doc = "Required features: `\"Windows_Foundation\"`"]
    #[cfg(feature = "Windows_Foundation")]
    pub fn RemoveManipulationStarting(
        &self,
        token: ::windows::Foundation::EventRegistrationToken,
    ) -> ::windows_core::Result<()> {
        let this = self;
        unsafe {
            (::windows_core::Interface::vtable(this).RemoveManipulationStarting)(
                ::windows_core::Interface::as_raw(this),
                token,
            )
            .ok()
        }
    }
    #[doc = "Required features: `\"Microsoft_UI_Xaml_Input\"`, `\"Windows_Foundation\"`"]
    #[cfg(all(feature = "Microsoft_UI_Xaml_Input", feature = "Windows_Foundation"))]
    pub fn ManipulationInertiaStarting<P0>(
        &self,
        handler: P0,
    ) -> ::windows_core::Result<::windows::Foundation::EventRegistrationToken>
    where
        P0: ::windows_core::IntoParam<Input::ManipulationInertiaStartingEventHandler>,
    {
        let this = self;
        unsafe {
            let mut result__ = ::std::mem::zeroed();
            (::windows_core::Interface::vtable(this).ManipulationInertiaStarting)(
                ::windows_core::Interface::as_raw(this),
                handler.into_param().abi(),
                &mut result__,
            )
            .from_abi(result__)
        }
    }
    #[doc = "Required features: `\"Windows_Foundation\"`"]
    #[cfg(feature = "Windows_Foundation")]
    pub fn RemoveManipulationInertiaStarting(
        &self,
        token: ::windows::Foundation::EventRegistrationToken,
    ) -> ::windows_core::Result<()> {
        let this = self;
        unsafe {
            (::windows_core::Interface::vtable(this).RemoveManipulationInertiaStarting)(
                ::windows_core::Interface::as_raw(this),
                token,
            )
            .ok()
        }
    }
    #[doc = "Required features: `\"Microsoft_UI_Xaml_Input\"`, `\"Windows_Foundation\"`"]
    #[cfg(all(feature = "Microsoft_UI_Xaml_Input", feature = "Windows_Foundation"))]
    pub fn ManipulationStarted<P0>(
        &self,
        handler: P0,
    ) -> ::windows_core::Result<::windows::Foundation::EventRegistrationToken>
    where
        P0: ::windows_core::IntoParam<Input::ManipulationStartedEventHandler>,
    {
        let this = self;
        unsafe {
            let mut result__ = ::std::mem::zeroed();
            (::windows_core::Interface::vtable(this).ManipulationStarted)(
                ::windows_core::Interface::as_raw(this),
                handler.into_param().abi(),
                &mut result__,
            )
            .from_abi(result__)
        }
    }
    #[doc = "Required features: `\"Windows_Foundation\"`"]
    #[cfg(feature = "Windows_Foundation")]
    pub fn RemoveManipulationStarted(
        &self,
        token: ::windows::Foundation::EventRegistrationToken,
    ) -> ::windows_core::Result<()> {
        let this = self;
        unsafe {
            (::windows_core::Interface::vtable(this).RemoveManipulationStarted)(
                ::windows_core::Interface::as_raw(this),
                token,
            )
            .ok()
        }
    }
    #[doc = "Required features: `\"Microsoft_UI_Xaml_Input\"`, `\"Windows_Foundation\"`"]
    #[cfg(all(feature = "Microsoft_UI_Xaml_Input", feature = "Windows_Foundation"))]
    pub fn ManipulationDelta<P0>(
        &self,
        handler: P0,
    ) -> ::windows_core::Result<::windows::Foundation::EventRegistrationToken>
    where
        P0: ::windows_core::IntoParam<Input::ManipulationDeltaEventHandler>,
    {
        let this = self;
        unsafe {
            let mut result__ = ::std::mem::zeroed();
            (::windows_core::Interface::vtable(this).ManipulationDelta)(
                ::windows_core::Interface::as_raw(this),
                handler.into_param().abi(),
                &mut result__,
            )
            .from_abi(result__)
        }
    }
    #[doc = "Required features: `\"Windows_Foundation\"`"]
    #[cfg(feature = "Windows_Foundation")]
    pub fn RemoveManipulationDelta(
        &self,
        token: ::windows::Foundation::EventRegistrationToken,
    ) -> ::windows_core::Result<()> {
        let this = self;
        unsafe {
            (::windows_core::Interface::vtable(this).RemoveManipulationDelta)(
                ::windows_core::Interface::as_raw(this),
                token,
            )
            .ok()
        }
    }
    #[doc = "Required features: `\"Microsoft_UI_Xaml_Input\"`, `\"Windows_Foundation\"`"]
    #[cfg(all(feature = "Microsoft_UI_Xaml_Input", feature = "Windows_Foundation"))]
    pub fn ManipulationCompleted<P0>(
        &self,
        handler: P0,
    ) -> ::windows_core::Result<::windows::Foundation::EventRegistrationToken>
    where
        P0: ::windows_core::IntoParam<Input::ManipulationCompletedEventHandler>,
    {
        let this = self;
        unsafe {
            let mut result__ = ::std::mem::zeroed();
            (::windows_core::Interface::vtable(this).ManipulationCompleted)(
                ::windows_core::Interface::as_raw(this),
                handler.into_param().abi(),
                &mut result__,
            )
            .from_abi(result__)
        }
    }
    #[doc = "Required features: `\"Windows_Foundation\"`"]
    #[cfg(feature = "Windows_Foundation")]
    pub fn RemoveManipulationCompleted(
        &self,
        token: ::windows::Foundation::EventRegistrationToken,
    ) -> ::windows_core::Result<()> {
        let this = self;
        unsafe {
            (::windows_core::Interface::vtable(this).RemoveManipulationCompleted)(
                ::windows_core::Interface::as_raw(this),
                token,
            )
            .ok()
        }
    }
    #[doc = "Required features: `\"Microsoft_UI_Xaml_Input\"`, `\"Windows_Foundation\"`"]
    #[cfg(all(feature = "Microsoft_UI_Xaml_Input", feature = "Windows_Foundation"))]
    pub fn AccessKeyDisplayRequested<P0>(
        &self,
        handler: P0,
    ) -> ::windows_core::Result<::windows::Foundation::EventRegistrationToken>
    where
        P0: ::windows_core::IntoParam<
            ::windows::Foundation::TypedEventHandler<
                UIElement,
                Input::AccessKeyDisplayRequestedEventArgs,
            >,
        >,
    {
        let this = self;
        unsafe {
            let mut result__ = ::std::mem::zeroed();
            (::windows_core::Interface::vtable(this).AccessKeyDisplayRequested)(
                ::windows_core::Interface::as_raw(this),
                handler.into_param().abi(),
                &mut result__,
            )
            .from_abi(result__)
        }
    }
    #[doc = "Required features: `\"Windows_Foundation\"`"]
    #[cfg(feature = "Windows_Foundation")]
    pub fn RemoveAccessKeyDisplayRequested(
        &self,
        token: ::windows::Foundation::EventRegistrationToken,
    ) -> ::windows_core::Result<()> {
        let this = self;
        unsafe {
            (::windows_core::Interface::vtable(this).RemoveAccessKeyDisplayRequested)(
                ::windows_core::Interface::as_raw(this),
                token,
            )
            .ok()
        }
    }
    #[doc = "Required features: `\"Microsoft_UI_Xaml_Input\"`, `\"Windows_Foundation\"`"]
    #[cfg(all(feature = "Microsoft_UI_Xaml_Input", feature = "Windows_Foundation"))]
    pub fn AccessKeyDisplayDismissed<P0>(
        &self,
        handler: P0,
    ) -> ::windows_core::Result<::windows::Foundation::EventRegistrationToken>
    where
        P0: ::windows_core::IntoParam<
            ::windows::Foundation::TypedEventHandler<
                UIElement,
                Input::AccessKeyDisplayDismissedEventArgs,
            >,
        >,
    {
        let this = self;
        unsafe {
            let mut result__ = ::std::mem::zeroed();
            (::windows_core::Interface::vtable(this).AccessKeyDisplayDismissed)(
                ::windows_core::Interface::as_raw(this),
                handler.into_param().abi(),
                &mut result__,
            )
            .from_abi(result__)
        }
    }
    #[doc = "Required features: `\"Windows_Foundation\"`"]
    #[cfg(feature = "Windows_Foundation")]
    pub fn RemoveAccessKeyDisplayDismissed(
        &self,
        token: ::windows::Foundation::EventRegistrationToken,
    ) -> ::windows_core::Result<()> {
        let this = self;
        unsafe {
            (::windows_core::Interface::vtable(this).RemoveAccessKeyDisplayDismissed)(
                ::windows_core::Interface::as_raw(this),
                token,
            )
            .ok()
        }
    }
    #[doc = "Required features: `\"Microsoft_UI_Xaml_Input\"`, `\"Windows_Foundation\"`"]
    #[cfg(all(feature = "Microsoft_UI_Xaml_Input", feature = "Windows_Foundation"))]
    pub fn AccessKeyInvoked<P0>(
        &self,
        handler: P0,
    ) -> ::windows_core::Result<::windows::Foundation::EventRegistrationToken>
    where
        P0: ::windows_core::IntoParam<
            ::windows::Foundation::TypedEventHandler<UIElement, Input::AccessKeyInvokedEventArgs>,
        >,
    {
        let this = self;
        unsafe {
            let mut result__ = ::std::mem::zeroed();
            (::windows_core::Interface::vtable(this).AccessKeyInvoked)(
                ::windows_core::Interface::as_raw(this),
                handler.into_param().abi(),
                &mut result__,
            )
            .from_abi(result__)
        }
    }
    #[doc = "Required features: `\"Windows_Foundation\"`"]
    #[cfg(feature = "Windows_Foundation")]
    pub fn RemoveAccessKeyInvoked(
        &self,
        token: ::windows::Foundation::EventRegistrationToken,
    ) -> ::windows_core::Result<()> {
        let this = self;
        unsafe {
            (::windows_core::Interface::vtable(this).RemoveAccessKeyInvoked)(
                ::windows_core::Interface::as_raw(this),
                token,
            )
            .ok()
        }
    }
    #[doc = "Required features: `\"Microsoft_UI_Xaml_Input\"`, `\"Windows_Foundation\"`"]
    #[cfg(all(feature = "Microsoft_UI_Xaml_Input", feature = "Windows_Foundation"))]
    pub fn ProcessKeyboardAccelerators<P0>(
        &self,
        handler: P0,
    ) -> ::windows_core::Result<::windows::Foundation::EventRegistrationToken>
    where
        P0: ::windows_core::IntoParam<
            ::windows::Foundation::TypedEventHandler<
                UIElement,
                Input::ProcessKeyboardAcceleratorEventArgs,
            >,
        >,
    {
        let this = self;
        unsafe {
            let mut result__ = ::std::mem::zeroed();
            (::windows_core::Interface::vtable(this).ProcessKeyboardAccelerators)(
                ::windows_core::Interface::as_raw(this),
                handler.into_param().abi(),
                &mut result__,
            )
            .from_abi(result__)
        }
    }
    #[doc = "Required features: `\"Windows_Foundation\"`"]
    #[cfg(feature = "Windows_Foundation")]
    pub fn RemoveProcessKeyboardAccelerators(
        &self,
        token: ::windows::Foundation::EventRegistrationToken,
    ) -> ::windows_core::Result<()> {
        let this = self;
        unsafe {
            (::windows_core::Interface::vtable(this).RemoveProcessKeyboardAccelerators)(
                ::windows_core::Interface::as_raw(this),
                token,
            )
            .ok()
        }
    }
    #[doc = "Required features: `\"Microsoft_UI_Xaml_Input\"`, `\"Windows_Foundation\"`"]
    #[cfg(all(feature = "Microsoft_UI_Xaml_Input", feature = "Windows_Foundation"))]
    pub fn GettingFocus<P0>(
        &self,
        handler: P0,
    ) -> ::windows_core::Result<::windows::Foundation::EventRegistrationToken>
    where
        P0: ::windows_core::IntoParam<
            ::windows::Foundation::TypedEventHandler<UIElement, Input::GettingFocusEventArgs>,
        >,
    {
        let this = self;
        unsafe {
            let mut result__ = ::std::mem::zeroed();
            (::windows_core::Interface::vtable(this).GettingFocus)(
                ::windows_core::Interface::as_raw(this),
                handler.into_param().abi(),
                &mut result__,
            )
            .from_abi(result__)
        }
    }
    #[doc = "Required features: `\"Windows_Foundation\"`"]
    #[cfg(feature = "Windows_Foundation")]
    pub fn RemoveGettingFocus(
        &self,
        token: ::windows::Foundation::EventRegistrationToken,
    ) -> ::windows_core::Result<()> {
        let this = self;
        unsafe {
            (::windows_core::Interface::vtable(this).RemoveGettingFocus)(
                ::windows_core::Interface::as_raw(this),
                token,
            )
            .ok()
        }
    }
    #[doc = "Required features: `\"Microsoft_UI_Xaml_Input\"`, `\"Windows_Foundation\"`"]
    #[cfg(all(feature = "Microsoft_UI_Xaml_Input", feature = "Windows_Foundation"))]
    pub fn LosingFocus<P0>(
        &self,
        handler: P0,
    ) -> ::windows_core::Result<::windows::Foundation::EventRegistrationToken>
    where
        P0: ::windows_core::IntoParam<
            ::windows::Foundation::TypedEventHandler<UIElement, Input::LosingFocusEventArgs>,
        >,
    {
        let this = self;
        unsafe {
            let mut result__ = ::std::mem::zeroed();
            (::windows_core::Interface::vtable(this).LosingFocus)(
                ::windows_core::Interface::as_raw(this),
                handler.into_param().abi(),
                &mut result__,
            )
            .from_abi(result__)
        }
    }
    #[doc = "Required features: `\"Windows_Foundation\"`"]
    #[cfg(feature = "Windows_Foundation")]
    pub fn RemoveLosingFocus(
        &self,
        token: ::windows::Foundation::EventRegistrationToken,
    ) -> ::windows_core::Result<()> {
        let this = self;
        unsafe {
            (::windows_core::Interface::vtable(this).RemoveLosingFocus)(
                ::windows_core::Interface::as_raw(this),
                token,
            )
            .ok()
        }
    }
    #[doc = "Required features: `\"Microsoft_UI_Xaml_Input\"`, `\"Windows_Foundation\"`"]
    #[cfg(all(feature = "Microsoft_UI_Xaml_Input", feature = "Windows_Foundation"))]
    pub fn NoFocusCandidateFound<P0>(
        &self,
        handler: P0,
    ) -> ::windows_core::Result<::windows::Foundation::EventRegistrationToken>
    where
        P0: ::windows_core::IntoParam<
            ::windows::Foundation::TypedEventHandler<
                UIElement,
                Input::NoFocusCandidateFoundEventArgs,
            >,
        >,
    {
        let this = self;
        unsafe {
            let mut result__ = ::std::mem::zeroed();
            (::windows_core::Interface::vtable(this).NoFocusCandidateFound)(
                ::windows_core::Interface::as_raw(this),
                handler.into_param().abi(),
                &mut result__,
            )
            .from_abi(result__)
        }
    }
    #[doc = "Required features: `\"Windows_Foundation\"`"]
    #[cfg(feature = "Windows_Foundation")]
    pub fn RemoveNoFocusCandidateFound(
        &self,
        token: ::windows::Foundation::EventRegistrationToken,
    ) -> ::windows_core::Result<()> {
        let this = self;
        unsafe {
            (::windows_core::Interface::vtable(this).RemoveNoFocusCandidateFound)(
                ::windows_core::Interface::as_raw(this),
                token,
            )
            .ok()
        }
    }
    #[doc = "Required features: `\"Microsoft_UI_Xaml_Input\"`, `\"Windows_Foundation\"`"]
    #[cfg(all(feature = "Microsoft_UI_Xaml_Input", feature = "Windows_Foundation"))]
    pub fn PreviewKeyDown<P0>(
        &self,
        handler: P0,
    ) -> ::windows_core::Result<::windows::Foundation::EventRegistrationToken>
    where
        P0: ::windows_core::IntoParam<Input::KeyEventHandler>,
    {
        let this = self;
        unsafe {
            let mut result__ = ::std::mem::zeroed();
            (::windows_core::Interface::vtable(this).PreviewKeyDown)(
                ::windows_core::Interface::as_raw(this),
                handler.into_param().abi(),
                &mut result__,
            )
            .from_abi(result__)
        }
    }
    #[doc = "Required features: `\"Windows_Foundation\"`"]
    #[cfg(feature = "Windows_Foundation")]
    pub fn RemovePreviewKeyDown(
        &self,
        token: ::windows::Foundation::EventRegistrationToken,
    ) -> ::windows_core::Result<()> {
        let this = self;
        unsafe {
            (::windows_core::Interface::vtable(this).RemovePreviewKeyDown)(
                ::windows_core::Interface::as_raw(this),
                token,
            )
            .ok()
        }
    }
    #[doc = "Required features: `\"Microsoft_UI_Xaml_Input\"`, `\"Windows_Foundation\"`"]
    #[cfg(all(feature = "Microsoft_UI_Xaml_Input", feature = "Windows_Foundation"))]
    pub fn PreviewKeyUp<P0>(
        &self,
        handler: P0,
    ) -> ::windows_core::Result<::windows::Foundation::EventRegistrationToken>
    where
        P0: ::windows_core::IntoParam<Input::KeyEventHandler>,
    {
        let this = self;
        unsafe {
            let mut result__ = ::std::mem::zeroed();
            (::windows_core::Interface::vtable(this).PreviewKeyUp)(
                ::windows_core::Interface::as_raw(this),
                handler.into_param().abi(),
                &mut result__,
            )
            .from_abi(result__)
        }
    }
    #[doc = "Required features: `\"Windows_Foundation\"`"]
    #[cfg(feature = "Windows_Foundation")]
    pub fn RemovePreviewKeyUp(
        &self,
        token: ::windows::Foundation::EventRegistrationToken,
    ) -> ::windows_core::Result<()> {
        let this = self;
        unsafe {
            (::windows_core::Interface::vtable(this).RemovePreviewKeyUp)(
                ::windows_core::Interface::as_raw(this),
                token,
            )
            .ok()
        }
    }
    #[doc = "Required features: `\"Windows_Foundation\"`"]
    #[cfg(feature = "Windows_Foundation")]
    pub fn BringIntoViewRequested<P0>(
        &self,
        handler: P0,
    ) -> ::windows_core::Result<::windows::Foundation::EventRegistrationToken>
    where
        P0: ::windows_core::IntoParam<
            ::windows::Foundation::TypedEventHandler<UIElement, BringIntoViewRequestedEventArgs>,
        >,
    {
        let this = self;
        unsafe {
            let mut result__ = ::std::mem::zeroed();
            (::windows_core::Interface::vtable(this).BringIntoViewRequested)(
                ::windows_core::Interface::as_raw(this),
                handler.into_param().abi(),
                &mut result__,
            )
            .from_abi(result__)
        }
    }
    #[doc = "Required features: `\"Windows_Foundation\"`"]
    #[cfg(feature = "Windows_Foundation")]
    pub fn RemoveBringIntoViewRequested(
        &self,
        token: ::windows::Foundation::EventRegistrationToken,
    ) -> ::windows_core::Result<()> {
        let this = self;
        unsafe {
            (::windows_core::Interface::vtable(this).RemoveBringIntoViewRequested)(
                ::windows_core::Interface::as_raw(this),
                token,
            )
            .ok()
        }
    }
    #[doc = "Required features: `\"Windows_Foundation\"`"]
    #[cfg(feature = "Windows_Foundation")]
    pub fn Measure(
        &self,
        availablesize: ::windows::Foundation::Size,
    ) -> ::windows_core::Result<()> {
        let this = self;
        unsafe {
            (::windows_core::Interface::vtable(this).Measure)(
                ::windows_core::Interface::as_raw(this),
                availablesize,
            )
            .ok()
        }
    }
    #[doc = "Required features: `\"Windows_Foundation\"`"]
    #[cfg(feature = "Windows_Foundation")]
    pub fn Arrange(&self, finalrect: ::windows::Foundation::Rect) -> ::windows_core::Result<()> {
        let this = self;
        unsafe {
            (::windows_core::Interface::vtable(this).Arrange)(
                ::windows_core::Interface::as_raw(this),
                finalrect,
            )
            .ok()
        }
    }
    #[doc = "Required features: `\"Microsoft_UI_Xaml_Input\"`"]
    #[cfg(feature = "Microsoft_UI_Xaml_Input")]
    pub fn CapturePointer<P0>(&self, value: P0) -> ::windows_core::Result<bool>
    where
        P0: ::windows_core::IntoParam<Input::Pointer>,
    {
        let this = self;
        unsafe {
            let mut result__ = ::std::mem::zeroed();
            (::windows_core::Interface::vtable(this).CapturePointer)(
                ::windows_core::Interface::as_raw(this),
                value.into_param().abi(),
                &mut result__,
            )
            .from_abi(result__)
        }
    }
    #[doc = "Required features: `\"Microsoft_UI_Xaml_Input\"`"]
    #[cfg(feature = "Microsoft_UI_Xaml_Input")]
    pub fn ReleasePointerCapture<P0>(&self, value: P0) -> ::windows_core::Result<()>
    where
        P0: ::windows_core::IntoParam<Input::Pointer>,
    {
        let this = self;
        unsafe {
            (::windows_core::Interface::vtable(this).ReleasePointerCapture)(
                ::windows_core::Interface::as_raw(this),
                value.into_param().abi(),
            )
            .ok()
        }
    }
    pub fn ReleasePointerCaptures(&self) -> ::windows_core::Result<()> {
        let this = self;
        unsafe {
            (::windows_core::Interface::vtable(this).ReleasePointerCaptures)(
                ::windows_core::Interface::as_raw(this),
            )
            .ok()
        }
    }
    pub fn AddHandler<P0, P1>(
        &self,
        routedevent: P0,
        handler: P1,
        handledeventstoo: bool,
    ) -> ::windows_core::Result<()>
    where
        P0: ::windows_core::IntoParam<RoutedEvent>,
        P1: ::windows_core::IntoParam<::windows_core::IInspectable>,
    {
        let this = self;
        unsafe {
            (::windows_core::Interface::vtable(this).AddHandler)(
                ::windows_core::Interface::as_raw(this),
                routedevent.into_param().abi(),
                handler.into_param().abi(),
                handledeventstoo,
            )
            .ok()
        }
    }
    pub fn RemoveHandler<P0, P1>(&self, routedevent: P0, handler: P1) -> ::windows_core::Result<()>
    where
        P0: ::windows_core::IntoParam<RoutedEvent>,
        P1: ::windows_core::IntoParam<::windows_core::IInspectable>,
    {
        let this = self;
        unsafe {
            (::windows_core::Interface::vtable(this).RemoveHandler)(
                ::windows_core::Interface::as_raw(this),
                routedevent.into_param().abi(),
                handler.into_param().abi(),
            )
            .ok()
        }
    }
    #[doc = "Required features: `\"Microsoft_UI_Xaml_Media\"`"]
    #[cfg(feature = "Microsoft_UI_Xaml_Media")]
    pub fn TransformToVisual<P0>(
        &self,
        visual: P0,
    ) -> ::windows_core::Result<Media::GeneralTransform>
    where
        P0: ::windows_core::TryIntoParam<UIElement>,
    {
        let this = self;
        unsafe {
            let mut result__ = ::std::mem::zeroed();
            (::windows_core::Interface::vtable(this).TransformToVisual)(
                ::windows_core::Interface::as_raw(this),
                visual.try_into_param()?.abi(),
                &mut result__,
            )
            .from_abi(result__)
        }
    }
    pub fn InvalidateMeasure(&self) -> ::windows_core::Result<()> {
        let this = self;
        unsafe {
            (::windows_core::Interface::vtable(this).InvalidateMeasure)(
                ::windows_core::Interface::as_raw(this),
            )
            .ok()
        }
    }
    pub fn InvalidateArrange(&self) -> ::windows_core::Result<()> {
        let this = self;
        unsafe {
            (::windows_core::Interface::vtable(this).InvalidateArrange)(
                ::windows_core::Interface::as_raw(this),
            )
            .ok()
        }
    }
    pub fn UpdateLayout(&self) -> ::windows_core::Result<()> {
        let this = self;
        unsafe {
            (::windows_core::Interface::vtable(this).UpdateLayout)(
                ::windows_core::Interface::as_raw(this),
            )
            .ok()
        }
    }
    pub fn CancelDirectManipulations(&self) -> ::windows_core::Result<bool> {
        let this = self;
        unsafe {
            let mut result__ = ::std::mem::zeroed();
            (::windows_core::Interface::vtable(this).CancelDirectManipulations)(
                ::windows_core::Interface::as_raw(this),
                &mut result__,
            )
            .from_abi(result__)
        }
    }
    #[doc = "Required features: `\"Microsoft_UI_Input\"`, `\"Windows_ApplicationModel_DataTransfer\"`, `\"Windows_Foundation\"`"]
    #[cfg(all(
        feature = "Microsoft_UI_Input",
        feature = "Windows_ApplicationModel_DataTransfer",
        feature = "Windows_Foundation"
    ))]
    pub fn StartDragAsync<P0>(
        &self,
        pointerpoint: P0,
    ) -> ::windows_core::Result<
        ::windows::Foundation::IAsyncOperation<
            ::windows::ApplicationModel::DataTransfer::DataPackageOperation,
        >,
    >
    where
        P0: ::windows_core::IntoParam<super::Input::PointerPoint>,
    {
        let this = self;
        unsafe {
            let mut result__ = ::std::mem::zeroed();
            (::windows_core::Interface::vtable(this).StartDragAsync)(
                ::windows_core::Interface::as_raw(this),
                pointerpoint.into_param().abi(),
                &mut result__,
            )
            .from_abi(result__)
        }
    }
    pub fn StartBringIntoView(&self) -> ::windows_core::Result<()> {
        let this = self;
        unsafe {
            (::windows_core::Interface::vtable(this).StartBringIntoView)(
                ::windows_core::Interface::as_raw(this),
            )
            .ok()
        }
    }
    pub fn StartBringIntoViewWithOptions<P0>(&self, options: P0) -> ::windows_core::Result<()>
    where
        P0: ::windows_core::IntoParam<BringIntoViewOptions>,
    {
        let this = self;
        unsafe {
            (::windows_core::Interface::vtable(this).StartBringIntoViewWithOptions)(
                ::windows_core::Interface::as_raw(this),
                options.into_param().abi(),
            )
            .ok()
        }
    }
    #[doc = "Required features: `\"Microsoft_UI_Xaml_Input\"`"]
    #[cfg(feature = "Microsoft_UI_Xaml_Input")]
    pub fn TryInvokeKeyboardAccelerator<P0>(&self, args: P0) -> ::windows_core::Result<()>
    where
        P0: ::windows_core::IntoParam<Input::ProcessKeyboardAcceleratorEventArgs>,
    {
        let this = self;
        unsafe {
            (::windows_core::Interface::vtable(this).TryInvokeKeyboardAccelerator)(
                ::windows_core::Interface::as_raw(this),
                args.into_param().abi(),
            )
            .ok()
        }
    }
    pub fn Focus(&self, value: FocusState) -> ::windows_core::Result<bool> {
        let this = self;
        unsafe {
            let mut result__ = ::std::mem::zeroed();
            (::windows_core::Interface::vtable(this).Focus)(
                ::windows_core::Interface::as_raw(this),
                value,
                &mut result__,
            )
            .from_abi(result__)
        }
    }
    #[doc = "Required features: `\"Microsoft_UI_Composition\"`"]
    #[cfg(feature = "Microsoft_UI_Composition")]
    pub fn StartAnimation<P0>(&self, animation: P0) -> ::windows_core::Result<()>
    where
        P0: ::windows_core::TryIntoParam<super::Composition::ICompositionAnimationBase>,
    {
        let this = self;
        unsafe {
            (::windows_core::Interface::vtable(this).StartAnimation)(
                ::windows_core::Interface::as_raw(this),
                animation.try_into_param()?.abi(),
            )
            .ok()
        }
    }
    #[doc = "Required features: `\"Microsoft_UI_Composition\"`"]
    #[cfg(feature = "Microsoft_UI_Composition")]
    pub fn StopAnimation<P0>(&self, animation: P0) -> ::windows_core::Result<()>
    where
        P0: ::windows_core::TryIntoParam<super::Composition::ICompositionAnimationBase>,
    {
        let this = self;
        unsafe {
            (::windows_core::Interface::vtable(this).StopAnimation)(
                ::windows_core::Interface::as_raw(this),
                animation.try_into_param()?.abi(),
            )
            .ok()
        }
    }
    #[doc = "Required features: `\"Microsoft_UI_Xaml_Automation_Peers\"`"]
    #[cfg(feature = "Microsoft_UI_Xaml_Automation_Peers")]
    pub fn OnCreateAutomationPeer(
        &self,
    ) -> ::windows_core::Result<Automation::Peers::AutomationPeer> {
        let this = &::windows_core::ComInterface::cast::<IUIElementOverrides>(self)?;
        unsafe {
            let mut result__ = ::std::mem::zeroed();
            (::windows_core::Interface::vtable(this).OnCreateAutomationPeer)(
                ::windows_core::Interface::as_raw(this),
                &mut result__,
            )
            .from_abi(result__)
        }
    }
    pub fn OnDisconnectVisualChildren(&self) -> ::windows_core::Result<()> {
        let this = &::windows_core::ComInterface::cast::<IUIElementOverrides>(self)?;
        unsafe {
            (::windows_core::Interface::vtable(this).OnDisconnectVisualChildren)(
                ::windows_core::Interface::as_raw(this),
            )
            .ok()
        }
    }
    #[doc = "Required features: `\"Windows_Foundation_Collections\"`"]
    #[cfg(feature = "Windows_Foundation_Collections")]
    pub fn FindSubElementsForTouchTargeting(
        &self,
        point: ::windows::Foundation::Point,
        boundingrect: ::windows::Foundation::Rect,
    ) -> ::windows_core::Result<
        ::windows::Foundation::Collections::IIterable<
            ::windows::Foundation::Collections::IIterable<::windows::Foundation::Point>,
        >,
    > {
        let this = &::windows_core::ComInterface::cast::<IUIElementOverrides>(self)?;
        unsafe {
            let mut result__ = ::std::mem::zeroed();
            (::windows_core::Interface::vtable(this).FindSubElementsForTouchTargeting)(
                ::windows_core::Interface::as_raw(this),
                point,
                boundingrect,
                &mut result__,
            )
            .from_abi(result__)
        }
    }
    #[doc = "Required features: `\"Windows_Foundation_Collections\"`"]
    #[cfg(feature = "Windows_Foundation_Collections")]
    pub fn GetChildrenInTabFocusOrder(
        &self,
    ) -> ::windows_core::Result<::windows::Foundation::Collections::IIterable<DependencyObject>>
    {
        let this = &::windows_core::ComInterface::cast::<IUIElementOverrides>(self)?;
        unsafe {
            let mut result__ = ::std::mem::zeroed();
            (::windows_core::Interface::vtable(this).GetChildrenInTabFocusOrder)(
                ::windows_core::Interface::as_raw(this),
                &mut result__,
            )
            .from_abi(result__)
        }
    }
    #[doc = "Required features: `\"Microsoft_UI_Xaml_Input\"`"]
    #[cfg(feature = "Microsoft_UI_Xaml_Input")]
    pub fn OnKeyboardAcceleratorInvoked<P0>(&self, args: P0) -> ::windows_core::Result<()>
    where
        P0: ::windows_core::IntoParam<Input::KeyboardAcceleratorInvokedEventArgs>,
    {
        let this = &::windows_core::ComInterface::cast::<IUIElementOverrides>(self)?;
        unsafe {
            (::windows_core::Interface::vtable(this).OnKeyboardAcceleratorInvoked)(
                ::windows_core::Interface::as_raw(this),
                args.into_param().abi(),
            )
            .ok()
        }
    }
    #[doc = "Required features: `\"Microsoft_UI_Xaml_Input\"`"]
    #[cfg(feature = "Microsoft_UI_Xaml_Input")]
    pub fn OnProcessKeyboardAccelerators<P0>(&self, args: P0) -> ::windows_core::Result<()>
    where
        P0: ::windows_core::IntoParam<Input::ProcessKeyboardAcceleratorEventArgs>,
    {
        let this = &::windows_core::ComInterface::cast::<IUIElementOverrides>(self)?;
        unsafe {
            (::windows_core::Interface::vtable(this).OnProcessKeyboardAccelerators)(
                ::windows_core::Interface::as_raw(this),
                args.into_param().abi(),
            )
            .ok()
        }
    }
    pub fn OnBringIntoViewRequested<P0>(&self, e: P0) -> ::windows_core::Result<()>
    where
        P0: ::windows_core::IntoParam<BringIntoViewRequestedEventArgs>,
    {
        let this = &::windows_core::ComInterface::cast::<IUIElementOverrides>(self)?;
        unsafe {
            (::windows_core::Interface::vtable(this).OnBringIntoViewRequested)(
                ::windows_core::Interface::as_raw(this),
                e.into_param().abi(),
            )
            .ok()
        }
    }
    #[doc = "Required features: `\"Microsoft_UI_Composition\"`"]
    #[cfg(feature = "Microsoft_UI_Composition")]
    pub fn PopulatePropertyInfoOverride<P0>(
        &self,
        propertyname: &::windows_core::HSTRING,
        animationpropertyinfo: P0,
    ) -> ::windows_core::Result<()>
    where
        P0: ::windows_core::IntoParam<super::Composition::AnimationPropertyInfo>,
    {
        let this = &::windows_core::ComInterface::cast::<IUIElementOverrides>(self)?;
        unsafe {
            (::windows_core::Interface::vtable(this).PopulatePropertyInfoOverride)(
                ::windows_core::Interface::as_raw(this),
                ::core::mem::transmute_copy(propertyname),
                animationpropertyinfo.into_param().abi(),
            )
            .ok()
        }
    }
    #[doc = "Required features: `\"Microsoft_UI_Input\"`"]
    #[cfg(feature = "Microsoft_UI_Input")]
    pub fn ProtectedCursor(&self) -> ::windows_core::Result<super::Input::InputCursor> {
        let this = &::windows_core::ComInterface::cast::<IUIElementProtected>(self)?;
        unsafe {
            let mut result__ = ::std::mem::zeroed();
            (::windows_core::Interface::vtable(this).ProtectedCursor)(
                ::windows_core::Interface::as_raw(this),
                &mut result__,
            )
            .from_abi(result__)
        }
    }
    #[doc = "Required features: `\"Microsoft_UI_Input\"`"]
    #[cfg(feature = "Microsoft_UI_Input")]
    pub fn SetProtectedCursor<P0>(&self, value: P0) -> ::windows_core::Result<()>
    where
        P0: ::windows_core::TryIntoParam<super::Input::InputCursor>,
    {
        let this = &::windows_core::ComInterface::cast::<IUIElementProtected>(self)?;
        unsafe {
            (::windows_core::Interface::vtable(this).SetProtectedCursor)(
                ::windows_core::Interface::as_raw(this),
                value.try_into_param()?.abi(),
            )
            .ok()
        }
    }
    pub fn KeyDownEvent() -> ::windows_core::Result<RoutedEvent> {
        Self::IUIElementStatics(|this| unsafe {
            let mut result__ = ::std::mem::zeroed();
            (::windows_core::Interface::vtable(this).KeyDownEvent)(
                ::windows_core::Interface::as_raw(this),
                &mut result__,
            )
            .from_abi(result__)
        })
    }
    pub fn KeyUpEvent() -> ::windows_core::Result<RoutedEvent> {
        Self::IUIElementStatics(|this| unsafe {
            let mut result__ = ::std::mem::zeroed();
            (::windows_core::Interface::vtable(this).KeyUpEvent)(
                ::windows_core::Interface::as_raw(this),
                &mut result__,
            )
            .from_abi(result__)
        })
    }
    pub fn PointerEnteredEvent() -> ::windows_core::Result<RoutedEvent> {
        Self::IUIElementStatics(|this| unsafe {
            let mut result__ = ::std::mem::zeroed();
            (::windows_core::Interface::vtable(this).PointerEnteredEvent)(
                ::windows_core::Interface::as_raw(this),
                &mut result__,
            )
            .from_abi(result__)
        })
    }
    pub fn PointerPressedEvent() -> ::windows_core::Result<RoutedEvent> {
        Self::IUIElementStatics(|this| unsafe {
            let mut result__ = ::std::mem::zeroed();
            (::windows_core::Interface::vtable(this).PointerPressedEvent)(
                ::windows_core::Interface::as_raw(this),
                &mut result__,
            )
            .from_abi(result__)
        })
    }
    pub fn PointerMovedEvent() -> ::windows_core::Result<RoutedEvent> {
        Self::IUIElementStatics(|this| unsafe {
            let mut result__ = ::std::mem::zeroed();
            (::windows_core::Interface::vtable(this).PointerMovedEvent)(
                ::windows_core::Interface::as_raw(this),
                &mut result__,
            )
            .from_abi(result__)
        })
    }
    pub fn PointerReleasedEvent() -> ::windows_core::Result<RoutedEvent> {
        Self::IUIElementStatics(|this| unsafe {
            let mut result__ = ::std::mem::zeroed();
            (::windows_core::Interface::vtable(this).PointerReleasedEvent)(
                ::windows_core::Interface::as_raw(this),
                &mut result__,
            )
            .from_abi(result__)
        })
    }
    pub fn PointerExitedEvent() -> ::windows_core::Result<RoutedEvent> {
        Self::IUIElementStatics(|this| unsafe {
            let mut result__ = ::std::mem::zeroed();
            (::windows_core::Interface::vtable(this).PointerExitedEvent)(
                ::windows_core::Interface::as_raw(this),
                &mut result__,
            )
            .from_abi(result__)
        })
    }
    pub fn PointerCaptureLostEvent() -> ::windows_core::Result<RoutedEvent> {
        Self::IUIElementStatics(|this| unsafe {
            let mut result__ = ::std::mem::zeroed();
            (::windows_core::Interface::vtable(this).PointerCaptureLostEvent)(
                ::windows_core::Interface::as_raw(this),
                &mut result__,
            )
            .from_abi(result__)
        })
    }
    pub fn PointerCanceledEvent() -> ::windows_core::Result<RoutedEvent> {
        Self::IUIElementStatics(|this| unsafe {
            let mut result__ = ::std::mem::zeroed();
            (::windows_core::Interface::vtable(this).PointerCanceledEvent)(
                ::windows_core::Interface::as_raw(this),
                &mut result__,
            )
            .from_abi(result__)
        })
    }
    pub fn PointerWheelChangedEvent() -> ::windows_core::Result<RoutedEvent> {
        Self::IUIElementStatics(|this| unsafe {
            let mut result__ = ::std::mem::zeroed();
            (::windows_core::Interface::vtable(this).PointerWheelChangedEvent)(
                ::windows_core::Interface::as_raw(this),
                &mut result__,
            )
            .from_abi(result__)
        })
    }
    pub fn TappedEvent() -> ::windows_core::Result<RoutedEvent> {
        Self::IUIElementStatics(|this| unsafe {
            let mut result__ = ::std::mem::zeroed();
            (::windows_core::Interface::vtable(this).TappedEvent)(
                ::windows_core::Interface::as_raw(this),
                &mut result__,
            )
            .from_abi(result__)
        })
    }
    pub fn DoubleTappedEvent() -> ::windows_core::Result<RoutedEvent> {
        Self::IUIElementStatics(|this| unsafe {
            let mut result__ = ::std::mem::zeroed();
            (::windows_core::Interface::vtable(this).DoubleTappedEvent)(
                ::windows_core::Interface::as_raw(this),
                &mut result__,
            )
            .from_abi(result__)
        })
    }
    pub fn HoldingEvent() -> ::windows_core::Result<RoutedEvent> {
        Self::IUIElementStatics(|this| unsafe {
            let mut result__ = ::std::mem::zeroed();
            (::windows_core::Interface::vtable(this).HoldingEvent)(
                ::windows_core::Interface::as_raw(this),
                &mut result__,
            )
            .from_abi(result__)
        })
    }
    pub fn RightTappedEvent() -> ::windows_core::Result<RoutedEvent> {
        Self::IUIElementStatics(|this| unsafe {
            let mut result__ = ::std::mem::zeroed();
            (::windows_core::Interface::vtable(this).RightTappedEvent)(
                ::windows_core::Interface::as_raw(this),
                &mut result__,
            )
            .from_abi(result__)
        })
    }
    pub fn ManipulationStartingEvent() -> ::windows_core::Result<RoutedEvent> {
        Self::IUIElementStatics(|this| unsafe {
            let mut result__ = ::std::mem::zeroed();
            (::windows_core::Interface::vtable(this).ManipulationStartingEvent)(
                ::windows_core::Interface::as_raw(this),
                &mut result__,
            )
            .from_abi(result__)
        })
    }
    pub fn ManipulationInertiaStartingEvent() -> ::windows_core::Result<RoutedEvent> {
        Self::IUIElementStatics(|this| unsafe {
            let mut result__ = ::std::mem::zeroed();
            (::windows_core::Interface::vtable(this).ManipulationInertiaStartingEvent)(
                ::windows_core::Interface::as_raw(this),
                &mut result__,
            )
            .from_abi(result__)
        })
    }
    pub fn ManipulationStartedEvent() -> ::windows_core::Result<RoutedEvent> {
        Self::IUIElementStatics(|this| unsafe {
            let mut result__ = ::std::mem::zeroed();
            (::windows_core::Interface::vtable(this).ManipulationStartedEvent)(
                ::windows_core::Interface::as_raw(this),
                &mut result__,
            )
            .from_abi(result__)
        })
    }
    pub fn ManipulationDeltaEvent() -> ::windows_core::Result<RoutedEvent> {
        Self::IUIElementStatics(|this| unsafe {
            let mut result__ = ::std::mem::zeroed();
            (::windows_core::Interface::vtable(this).ManipulationDeltaEvent)(
                ::windows_core::Interface::as_raw(this),
                &mut result__,
            )
            .from_abi(result__)
        })
    }
    pub fn ManipulationCompletedEvent() -> ::windows_core::Result<RoutedEvent> {
        Self::IUIElementStatics(|this| unsafe {
            let mut result__ = ::std::mem::zeroed();
            (::windows_core::Interface::vtable(this).ManipulationCompletedEvent)(
                ::windows_core::Interface::as_raw(this),
                &mut result__,
            )
            .from_abi(result__)
        })
    }
    pub fn DragEnterEvent() -> ::windows_core::Result<RoutedEvent> {
        Self::IUIElementStatics(|this| unsafe {
            let mut result__ = ::std::mem::zeroed();
            (::windows_core::Interface::vtable(this).DragEnterEvent)(
                ::windows_core::Interface::as_raw(this),
                &mut result__,
            )
            .from_abi(result__)
        })
    }
    pub fn DragLeaveEvent() -> ::windows_core::Result<RoutedEvent> {
        Self::IUIElementStatics(|this| unsafe {
            let mut result__ = ::std::mem::zeroed();
            (::windows_core::Interface::vtable(this).DragLeaveEvent)(
                ::windows_core::Interface::as_raw(this),
                &mut result__,
            )
            .from_abi(result__)
        })
    }
    pub fn DragOverEvent() -> ::windows_core::Result<RoutedEvent> {
        Self::IUIElementStatics(|this| unsafe {
            let mut result__ = ::std::mem::zeroed();
            (::windows_core::Interface::vtable(this).DragOverEvent)(
                ::windows_core::Interface::as_raw(this),
                &mut result__,
            )
            .from_abi(result__)
        })
    }
    pub fn DropEvent() -> ::windows_core::Result<RoutedEvent> {
        Self::IUIElementStatics(|this| unsafe {
            let mut result__ = ::std::mem::zeroed();
            (::windows_core::Interface::vtable(this).DropEvent)(
                ::windows_core::Interface::as_raw(this),
                &mut result__,
            )
            .from_abi(result__)
        })
    }
    pub fn GettingFocusEvent() -> ::windows_core::Result<RoutedEvent> {
        Self::IUIElementStatics(|this| unsafe {
            let mut result__ = ::std::mem::zeroed();
            (::windows_core::Interface::vtable(this).GettingFocusEvent)(
                ::windows_core::Interface::as_raw(this),
                &mut result__,
            )
            .from_abi(result__)
        })
    }
    pub fn LosingFocusEvent() -> ::windows_core::Result<RoutedEvent> {
        Self::IUIElementStatics(|this| unsafe {
            let mut result__ = ::std::mem::zeroed();
            (::windows_core::Interface::vtable(this).LosingFocusEvent)(
                ::windows_core::Interface::as_raw(this),
                &mut result__,
            )
            .from_abi(result__)
        })
    }
    pub fn NoFocusCandidateFoundEvent() -> ::windows_core::Result<RoutedEvent> {
        Self::IUIElementStatics(|this| unsafe {
            let mut result__ = ::std::mem::zeroed();
            (::windows_core::Interface::vtable(this).NoFocusCandidateFoundEvent)(
                ::windows_core::Interface::as_raw(this),
                &mut result__,
            )
            .from_abi(result__)
        })
    }
    pub fn PreviewKeyDownEvent() -> ::windows_core::Result<RoutedEvent> {
        Self::IUIElementStatics(|this| unsafe {
            let mut result__ = ::std::mem::zeroed();
            (::windows_core::Interface::vtable(this).PreviewKeyDownEvent)(
                ::windows_core::Interface::as_raw(this),
                &mut result__,
            )
            .from_abi(result__)
        })
    }
    pub fn CharacterReceivedEvent() -> ::windows_core::Result<RoutedEvent> {
        Self::IUIElementStatics(|this| unsafe {
            let mut result__ = ::std::mem::zeroed();
            (::windows_core::Interface::vtable(this).CharacterReceivedEvent)(
                ::windows_core::Interface::as_raw(this),
                &mut result__,
            )
            .from_abi(result__)
        })
    }
    pub fn PreviewKeyUpEvent() -> ::windows_core::Result<RoutedEvent> {
        Self::IUIElementStatics(|this| unsafe {
            let mut result__ = ::std::mem::zeroed();
            (::windows_core::Interface::vtable(this).PreviewKeyUpEvent)(
                ::windows_core::Interface::as_raw(this),
                &mut result__,
            )
            .from_abi(result__)
        })
    }
    pub fn BringIntoViewRequestedEvent() -> ::windows_core::Result<RoutedEvent> {
        Self::IUIElementStatics(|this| unsafe {
            let mut result__ = ::std::mem::zeroed();
            (::windows_core::Interface::vtable(this).BringIntoViewRequestedEvent)(
                ::windows_core::Interface::as_raw(this),
                &mut result__,
            )
            .from_abi(result__)
        })
    }
    pub fn ContextRequestedEvent() -> ::windows_core::Result<RoutedEvent> {
        Self::IUIElementStatics(|this| unsafe {
            let mut result__ = ::std::mem::zeroed();
            (::windows_core::Interface::vtable(this).ContextRequestedEvent)(
                ::windows_core::Interface::as_raw(this),
                &mut result__,
            )
            .from_abi(result__)
        })
    }
    pub fn AllowDropProperty() -> ::windows_core::Result<DependencyProperty> {
        Self::IUIElementStatics(|this| unsafe {
            let mut result__ = ::std::mem::zeroed();
            (::windows_core::Interface::vtable(this).AllowDropProperty)(
                ::windows_core::Interface::as_raw(this),
                &mut result__,
            )
            .from_abi(result__)
        })
    }
    pub fn OpacityProperty() -> ::windows_core::Result<DependencyProperty> {
        Self::IUIElementStatics(|this| unsafe {
            let mut result__ = ::std::mem::zeroed();
            (::windows_core::Interface::vtable(this).OpacityProperty)(
                ::windows_core::Interface::as_raw(this),
                &mut result__,
            )
            .from_abi(result__)
        })
    }
    pub fn ClipProperty() -> ::windows_core::Result<DependencyProperty> {
        Self::IUIElementStatics(|this| unsafe {
            let mut result__ = ::std::mem::zeroed();
            (::windows_core::Interface::vtable(this).ClipProperty)(
                ::windows_core::Interface::as_raw(this),
                &mut result__,
            )
            .from_abi(result__)
        })
    }
    pub fn RenderTransformProperty() -> ::windows_core::Result<DependencyProperty> {
        Self::IUIElementStatics(|this| unsafe {
            let mut result__ = ::std::mem::zeroed();
            (::windows_core::Interface::vtable(this).RenderTransformProperty)(
                ::windows_core::Interface::as_raw(this),
                &mut result__,
            )
            .from_abi(result__)
        })
    }
    pub fn ProjectionProperty() -> ::windows_core::Result<DependencyProperty> {
        Self::IUIElementStatics(|this| unsafe {
            let mut result__ = ::std::mem::zeroed();
            (::windows_core::Interface::vtable(this).ProjectionProperty)(
                ::windows_core::Interface::as_raw(this),
                &mut result__,
            )
            .from_abi(result__)
        })
    }
    pub fn Transform3DProperty() -> ::windows_core::Result<DependencyProperty> {
        Self::IUIElementStatics(|this| unsafe {
            let mut result__ = ::std::mem::zeroed();
            (::windows_core::Interface::vtable(this).Transform3DProperty)(
                ::windows_core::Interface::as_raw(this),
                &mut result__,
            )
            .from_abi(result__)
        })
    }
    pub fn RenderTransformOriginProperty() -> ::windows_core::Result<DependencyProperty> {
        Self::IUIElementStatics(|this| unsafe {
            let mut result__ = ::std::mem::zeroed();
            (::windows_core::Interface::vtable(this).RenderTransformOriginProperty)(
                ::windows_core::Interface::as_raw(this),
                &mut result__,
            )
            .from_abi(result__)
        })
    }
    pub fn IsHitTestVisibleProperty() -> ::windows_core::Result<DependencyProperty> {
        Self::IUIElementStatics(|this| unsafe {
            let mut result__ = ::std::mem::zeroed();
            (::windows_core::Interface::vtable(this).IsHitTestVisibleProperty)(
                ::windows_core::Interface::as_raw(this),
                &mut result__,
            )
            .from_abi(result__)
        })
    }
    pub fn VisibilityProperty() -> ::windows_core::Result<DependencyProperty> {
        Self::IUIElementStatics(|this| unsafe {
            let mut result__ = ::std::mem::zeroed();
            (::windows_core::Interface::vtable(this).VisibilityProperty)(
                ::windows_core::Interface::as_raw(this),
                &mut result__,
            )
            .from_abi(result__)
        })
    }
    pub fn UseLayoutRoundingProperty() -> ::windows_core::Result<DependencyProperty> {
        Self::IUIElementStatics(|this| unsafe {
            let mut result__ = ::std::mem::zeroed();
            (::windows_core::Interface::vtable(this).UseLayoutRoundingProperty)(
                ::windows_core::Interface::as_raw(this),
                &mut result__,
            )
            .from_abi(result__)
        })
    }
    pub fn TransitionsProperty() -> ::windows_core::Result<DependencyProperty> {
        Self::IUIElementStatics(|this| unsafe {
            let mut result__ = ::std::mem::zeroed();
            (::windows_core::Interface::vtable(this).TransitionsProperty)(
                ::windows_core::Interface::as_raw(this),
                &mut result__,
            )
            .from_abi(result__)
        })
    }
    pub fn CacheModeProperty() -> ::windows_core::Result<DependencyProperty> {
        Self::IUIElementStatics(|this| unsafe {
            let mut result__ = ::std::mem::zeroed();
            (::windows_core::Interface::vtable(this).CacheModeProperty)(
                ::windows_core::Interface::as_raw(this),
                &mut result__,
            )
            .from_abi(result__)
        })
    }
    pub fn IsTapEnabledProperty() -> ::windows_core::Result<DependencyProperty> {
        Self::IUIElementStatics(|this| unsafe {
            let mut result__ = ::std::mem::zeroed();
            (::windows_core::Interface::vtable(this).IsTapEnabledProperty)(
                ::windows_core::Interface::as_raw(this),
                &mut result__,
            )
            .from_abi(result__)
        })
    }
    pub fn IsDoubleTapEnabledProperty() -> ::windows_core::Result<DependencyProperty> {
        Self::IUIElementStatics(|this| unsafe {
            let mut result__ = ::std::mem::zeroed();
            (::windows_core::Interface::vtable(this).IsDoubleTapEnabledProperty)(
                ::windows_core::Interface::as_raw(this),
                &mut result__,
            )
            .from_abi(result__)
        })
    }
    pub fn CanDragProperty() -> ::windows_core::Result<DependencyProperty> {
        Self::IUIElementStatics(|this| unsafe {
            let mut result__ = ::std::mem::zeroed();
            (::windows_core::Interface::vtable(this).CanDragProperty)(
                ::windows_core::Interface::as_raw(this),
                &mut result__,
            )
            .from_abi(result__)
        })
    }
    pub fn IsRightTapEnabledProperty() -> ::windows_core::Result<DependencyProperty> {
        Self::IUIElementStatics(|this| unsafe {
            let mut result__ = ::std::mem::zeroed();
            (::windows_core::Interface::vtable(this).IsRightTapEnabledProperty)(
                ::windows_core::Interface::as_raw(this),
                &mut result__,
            )
            .from_abi(result__)
        })
    }
    pub fn IsHoldingEnabledProperty() -> ::windows_core::Result<DependencyProperty> {
        Self::IUIElementStatics(|this| unsafe {
            let mut result__ = ::std::mem::zeroed();
            (::windows_core::Interface::vtable(this).IsHoldingEnabledProperty)(
                ::windows_core::Interface::as_raw(this),
                &mut result__,
            )
            .from_abi(result__)
        })
    }
    pub fn ManipulationModeProperty() -> ::windows_core::Result<DependencyProperty> {
        Self::IUIElementStatics(|this| unsafe {
            let mut result__ = ::std::mem::zeroed();
            (::windows_core::Interface::vtable(this).ManipulationModeProperty)(
                ::windows_core::Interface::as_raw(this),
                &mut result__,
            )
            .from_abi(result__)
        })
    }
    pub fn PointerCapturesProperty() -> ::windows_core::Result<DependencyProperty> {
        Self::IUIElementStatics(|this| unsafe {
            let mut result__ = ::std::mem::zeroed();
            (::windows_core::Interface::vtable(this).PointerCapturesProperty)(
                ::windows_core::Interface::as_raw(this),
                &mut result__,
            )
            .from_abi(result__)
        })
    }
    pub fn ContextFlyoutProperty() -> ::windows_core::Result<DependencyProperty> {
        Self::IUIElementStatics(|this| unsafe {
            let mut result__ = ::std::mem::zeroed();
            (::windows_core::Interface::vtable(this).ContextFlyoutProperty)(
                ::windows_core::Interface::as_raw(this),
                &mut result__,
            )
            .from_abi(result__)
        })
    }
    pub fn CompositeModeProperty() -> ::windows_core::Result<DependencyProperty> {
        Self::IUIElementStatics(|this| unsafe {
            let mut result__ = ::std::mem::zeroed();
            (::windows_core::Interface::vtable(this).CompositeModeProperty)(
                ::windows_core::Interface::as_raw(this),
                &mut result__,
            )
            .from_abi(result__)
        })
    }
    pub fn LightsProperty() -> ::windows_core::Result<DependencyProperty> {
        Self::IUIElementStatics(|this| unsafe {
            let mut result__ = ::std::mem::zeroed();
            (::windows_core::Interface::vtable(this).LightsProperty)(
                ::windows_core::Interface::as_raw(this),
                &mut result__,
            )
            .from_abi(result__)
        })
    }
    pub fn CanBeScrollAnchorProperty() -> ::windows_core::Result<DependencyProperty> {
        Self::IUIElementStatics(|this| unsafe {
            let mut result__ = ::std::mem::zeroed();
            (::windows_core::Interface::vtable(this).CanBeScrollAnchorProperty)(
                ::windows_core::Interface::as_raw(this),
                &mut result__,
            )
            .from_abi(result__)
        })
    }
    pub fn ExitDisplayModeOnAccessKeyInvokedProperty() -> ::windows_core::Result<DependencyProperty>
    {
        Self::IUIElementStatics(|this| unsafe {
            let mut result__ = ::std::mem::zeroed();
            (::windows_core::Interface::vtable(this).ExitDisplayModeOnAccessKeyInvokedProperty)(
                ::windows_core::Interface::as_raw(this),
                &mut result__,
            )
            .from_abi(result__)
        })
    }
    pub fn IsAccessKeyScopeProperty() -> ::windows_core::Result<DependencyProperty> {
        Self::IUIElementStatics(|this| unsafe {
            let mut result__ = ::std::mem::zeroed();
            (::windows_core::Interface::vtable(this).IsAccessKeyScopeProperty)(
                ::windows_core::Interface::as_raw(this),
                &mut result__,
            )
            .from_abi(result__)
        })
    }
    pub fn AccessKeyScopeOwnerProperty() -> ::windows_core::Result<DependencyProperty> {
        Self::IUIElementStatics(|this| unsafe {
            let mut result__ = ::std::mem::zeroed();
            (::windows_core::Interface::vtable(this).AccessKeyScopeOwnerProperty)(
                ::windows_core::Interface::as_raw(this),
                &mut result__,
            )
            .from_abi(result__)
        })
    }
    pub fn AccessKeyProperty() -> ::windows_core::Result<DependencyProperty> {
        Self::IUIElementStatics(|this| unsafe {
            let mut result__ = ::std::mem::zeroed();
            (::windows_core::Interface::vtable(this).AccessKeyProperty)(
                ::windows_core::Interface::as_raw(this),
                &mut result__,
            )
            .from_abi(result__)
        })
    }
    pub fn KeyTipPlacementModeProperty() -> ::windows_core::Result<DependencyProperty> {
        Self::IUIElementStatics(|this| unsafe {
            let mut result__ = ::std::mem::zeroed();
            (::windows_core::Interface::vtable(this).KeyTipPlacementModeProperty)(
                ::windows_core::Interface::as_raw(this),
                &mut result__,
            )
            .from_abi(result__)
        })
    }
    pub fn KeyTipHorizontalOffsetProperty() -> ::windows_core::Result<DependencyProperty> {
        Self::IUIElementStatics(|this| unsafe {
            let mut result__ = ::std::mem::zeroed();
            (::windows_core::Interface::vtable(this).KeyTipHorizontalOffsetProperty)(
                ::windows_core::Interface::as_raw(this),
                &mut result__,
            )
            .from_abi(result__)
        })
    }
    pub fn KeyTipVerticalOffsetProperty() -> ::windows_core::Result<DependencyProperty> {
        Self::IUIElementStatics(|this| unsafe {
            let mut result__ = ::std::mem::zeroed();
            (::windows_core::Interface::vtable(this).KeyTipVerticalOffsetProperty)(
                ::windows_core::Interface::as_raw(this),
                &mut result__,
            )
            .from_abi(result__)
        })
    }
    pub fn KeyTipTargetProperty() -> ::windows_core::Result<DependencyProperty> {
        Self::IUIElementStatics(|this| unsafe {
            let mut result__ = ::std::mem::zeroed();
            (::windows_core::Interface::vtable(this).KeyTipTargetProperty)(
                ::windows_core::Interface::as_raw(this),
                &mut result__,
            )
            .from_abi(result__)
        })
    }
    pub fn XYFocusKeyboardNavigationProperty() -> ::windows_core::Result<DependencyProperty> {
        Self::IUIElementStatics(|this| unsafe {
            let mut result__ = ::std::mem::zeroed();
            (::windows_core::Interface::vtable(this).XYFocusKeyboardNavigationProperty)(
                ::windows_core::Interface::as_raw(this),
                &mut result__,
            )
            .from_abi(result__)
        })
    }
    pub fn XYFocusUpNavigationStrategyProperty() -> ::windows_core::Result<DependencyProperty> {
        Self::IUIElementStatics(|this| unsafe {
            let mut result__ = ::std::mem::zeroed();
            (::windows_core::Interface::vtable(this).XYFocusUpNavigationStrategyProperty)(
                ::windows_core::Interface::as_raw(this),
                &mut result__,
            )
            .from_abi(result__)
        })
    }
    pub fn XYFocusDownNavigationStrategyProperty() -> ::windows_core::Result<DependencyProperty> {
        Self::IUIElementStatics(|this| unsafe {
            let mut result__ = ::std::mem::zeroed();
            (::windows_core::Interface::vtable(this).XYFocusDownNavigationStrategyProperty)(
                ::windows_core::Interface::as_raw(this),
                &mut result__,
            )
            .from_abi(result__)
        })
    }
    pub fn XYFocusLeftNavigationStrategyProperty() -> ::windows_core::Result<DependencyProperty> {
        Self::IUIElementStatics(|this| unsafe {
            let mut result__ = ::std::mem::zeroed();
            (::windows_core::Interface::vtable(this).XYFocusLeftNavigationStrategyProperty)(
                ::windows_core::Interface::as_raw(this),
                &mut result__,
            )
            .from_abi(result__)
        })
    }
    pub fn XYFocusRightNavigationStrategyProperty() -> ::windows_core::Result<DependencyProperty> {
        Self::IUIElementStatics(|this| unsafe {
            let mut result__ = ::std::mem::zeroed();
            (::windows_core::Interface::vtable(this).XYFocusRightNavigationStrategyProperty)(
                ::windows_core::Interface::as_raw(this),
                &mut result__,
            )
            .from_abi(result__)
        })
    }
    pub fn KeyboardAcceleratorPlacementTargetProperty() -> ::windows_core::Result<DependencyProperty>
    {
        Self::IUIElementStatics(|this| unsafe {
            let mut result__ = ::std::mem::zeroed();
            (::windows_core::Interface::vtable(this).KeyboardAcceleratorPlacementTargetProperty)(
                ::windows_core::Interface::as_raw(this),
                &mut result__,
            )
            .from_abi(result__)
        })
    }
    pub fn KeyboardAcceleratorPlacementModeProperty() -> ::windows_core::Result<DependencyProperty>
    {
        Self::IUIElementStatics(|this| unsafe {
            let mut result__ = ::std::mem::zeroed();
            (::windows_core::Interface::vtable(this).KeyboardAcceleratorPlacementModeProperty)(
                ::windows_core::Interface::as_raw(this),
                &mut result__,
            )
            .from_abi(result__)
        })
    }
    pub fn HighContrastAdjustmentProperty() -> ::windows_core::Result<DependencyProperty> {
        Self::IUIElementStatics(|this| unsafe {
            let mut result__ = ::std::mem::zeroed();
            (::windows_core::Interface::vtable(this).HighContrastAdjustmentProperty)(
                ::windows_core::Interface::as_raw(this),
                &mut result__,
            )
            .from_abi(result__)
        })
    }
    pub fn TabFocusNavigationProperty() -> ::windows_core::Result<DependencyProperty> {
        Self::IUIElementStatics(|this| unsafe {
            let mut result__ = ::std::mem::zeroed();
            (::windows_core::Interface::vtable(this).TabFocusNavigationProperty)(
                ::windows_core::Interface::as_raw(this),
                &mut result__,
            )
            .from_abi(result__)
        })
    }
    pub fn ShadowProperty() -> ::windows_core::Result<DependencyProperty> {
        Self::IUIElementStatics(|this| unsafe {
            let mut result__ = ::std::mem::zeroed();
            (::windows_core::Interface::vtable(this).ShadowProperty)(
                ::windows_core::Interface::as_raw(this),
                &mut result__,
            )
            .from_abi(result__)
        })
    }
    pub fn FocusStateProperty() -> ::windows_core::Result<DependencyProperty> {
        Self::IUIElementStatics(|this| unsafe {
            let mut result__ = ::std::mem::zeroed();
            (::windows_core::Interface::vtable(this).FocusStateProperty)(
                ::windows_core::Interface::as_raw(this),
                &mut result__,
            )
            .from_abi(result__)
        })
    }
    pub fn UseSystemFocusVisualsProperty() -> ::windows_core::Result<DependencyProperty> {
        Self::IUIElementStatics(|this| unsafe {
            let mut result__ = ::std::mem::zeroed();
            (::windows_core::Interface::vtable(this).UseSystemFocusVisualsProperty)(
                ::windows_core::Interface::as_raw(this),
                &mut result__,
            )
            .from_abi(result__)
        })
    }
    pub fn XYFocusLeftProperty() -> ::windows_core::Result<DependencyProperty> {
        Self::IUIElementStatics(|this| unsafe {
            let mut result__ = ::std::mem::zeroed();
            (::windows_core::Interface::vtable(this).XYFocusLeftProperty)(
                ::windows_core::Interface::as_raw(this),
                &mut result__,
            )
            .from_abi(result__)
        })
    }
    pub fn XYFocusRightProperty() -> ::windows_core::Result<DependencyProperty> {
        Self::IUIElementStatics(|this| unsafe {
            let mut result__ = ::std::mem::zeroed();
            (::windows_core::Interface::vtable(this).XYFocusRightProperty)(
                ::windows_core::Interface::as_raw(this),
                &mut result__,
            )
            .from_abi(result__)
        })
    }
    pub fn XYFocusUpProperty() -> ::windows_core::Result<DependencyProperty> {
        Self::IUIElementStatics(|this| unsafe {
            let mut result__ = ::std::mem::zeroed();
            (::windows_core::Interface::vtable(this).XYFocusUpProperty)(
                ::windows_core::Interface::as_raw(this),
                &mut result__,
            )
            .from_abi(result__)
        })
    }
    pub fn XYFocusDownProperty() -> ::windows_core::Result<DependencyProperty> {
        Self::IUIElementStatics(|this| unsafe {
            let mut result__ = ::std::mem::zeroed();
            (::windows_core::Interface::vtable(this).XYFocusDownProperty)(
                ::windows_core::Interface::as_raw(this),
                &mut result__,
            )
            .from_abi(result__)
        })
    }
    pub fn IsTabStopProperty() -> ::windows_core::Result<DependencyProperty> {
        Self::IUIElementStatics(|this| unsafe {
            let mut result__ = ::std::mem::zeroed();
            (::windows_core::Interface::vtable(this).IsTabStopProperty)(
                ::windows_core::Interface::as_raw(this),
                &mut result__,
            )
            .from_abi(result__)
        })
    }
    pub fn TabIndexProperty() -> ::windows_core::Result<DependencyProperty> {
        Self::IUIElementStatics(|this| unsafe {
            let mut result__ = ::std::mem::zeroed();
            (::windows_core::Interface::vtable(this).TabIndexProperty)(
                ::windows_core::Interface::as_raw(this),
                &mut result__,
            )
            .from_abi(result__)
        })
    }
    #[doc = "Required features: `\"Microsoft_UI_Xaml_Input\"`"]
    #[cfg(feature = "Microsoft_UI_Xaml_Input")]
    pub fn TryStartDirectManipulation<P0>(value: P0) -> ::windows_core::Result<bool>
    where
        P0: ::windows_core::IntoParam<Input::Pointer>,
    {
        Self::IUIElementStatics(|this| unsafe {
            let mut result__ = ::std::mem::zeroed();
            (::windows_core::Interface::vtable(this).TryStartDirectManipulation)(
                ::windows_core::Interface::as_raw(this),
                value.into_param().abi(),
                &mut result__,
            )
            .from_abi(result__)
        })
    }
    pub fn RegisterAsScrollPort<P0>(element: P0) -> ::windows_core::Result<()>
    where
        P0: ::windows_core::TryIntoParam<UIElement>,
    {
        Self::IUIElementStatics(|this| unsafe {
            (::windows_core::Interface::vtable(this).RegisterAsScrollPort)(
                ::windows_core::Interface::as_raw(this),
                element.try_into_param()?.abi(),
            )
            .ok()
        })
    }
    #[doc = "Required features: `\"Microsoft_UI_Composition\"`"]
    #[cfg(feature = "Microsoft_UI_Composition")]
    pub fn GetVisualInternal(&self) -> ::windows_core::Result<super::Composition::Visual> {
        let this =
            &::windows_core::ComInterface::cast::<super::Composition::IVisualElement2>(self)?;
        unsafe {
            let mut result__ = ::std::mem::zeroed();
            (::windows_core::Interface::vtable(this).GetVisualInternal)(
                ::windows_core::Interface::as_raw(this),
                &mut result__,
            )
            .from_abi(result__)
        }
    }
    #[doc(hidden)]
    pub fn IUIElementStatics<R, F: FnOnce(&IUIElementStatics) -> ::windows_core::Result<R>>(
        callback: F,
    ) -> ::windows_core::Result<R> {
        static SHARED: ::windows_core::imp::FactoryCache<UIElement, IUIElementStatics> =
            ::windows_core::imp::FactoryCache::new();
        SHARED.call(callback)
    }
}
impl ::windows_core::RuntimeType for UIElement {
    const SIGNATURE: ::windows_core::imp::ConstBuffer =
        ::windows_core::imp::ConstBuffer::for_class::<Self>();
}
unsafe impl ::windows_core::Interface for UIElement {
    type Vtable = IUIElement_Vtbl;
}
unsafe impl ::windows_core::ComInterface for UIElement {
    const IID: ::windows_core::GUID = <IUIElement as ::windows_core::ComInterface>::IID;
}
impl ::windows_core::RuntimeName for UIElement {
    const NAME: &'static str = "Microsoft.UI.Xaml.UIElement";
}
::windows_core::imp::interface_hierarchy!(
    UIElement,
    ::windows_core::IUnknown,
    ::windows_core::IInspectable
);
#[cfg(feature = "Microsoft_UI_Composition")]
impl ::windows_core::CanTryInto<super::Composition::IAnimationObject> for UIElement {}
#[cfg(feature = "Microsoft_UI_Composition")]
impl ::windows_core::CanTryInto<super::Composition::IVisualElement> for UIElement {}
#[cfg(feature = "Microsoft_UI_Composition")]
impl ::windows_core::CanTryInto<super::Composition::IVisualElement2> for UIElement {}
impl ::windows_core::CanTryInto<DependencyObject> for UIElement {}
unsafe impl ::core::marker::Send for UIElement {}
unsafe impl ::core::marker::Sync for UIElement {}
#[doc = "Required features: `\"Windows_Foundation_Collections\"`"]
#[cfg(feature = "Windows_Foundation_Collections")]
#[repr(transparent)]
#[derive(::core::cmp::PartialEq, ::core::cmp::Eq, ::core::fmt::Debug, ::core::clone::Clone)]
pub struct UIElementWeakCollection(::windows_core::IUnknown);
#[cfg(feature = "Windows_Foundation_Collections")]
impl UIElementWeakCollection {
    #[doc = "Required features: `\"Windows_Foundation_Collections\"`"]
    #[cfg(feature = "Windows_Foundation_Collections")]
    pub fn First(
        &self,
    ) -> ::windows_core::Result<::windows::Foundation::Collections::IIterator<UIElement>> {
        let this = &::windows_core::ComInterface::cast::<
            ::windows::Foundation::Collections::IIterable<UIElement>,
        >(self)?;
        unsafe {
            let mut result__ = ::std::mem::zeroed();
            (::windows_core::Interface::vtable(this).First)(
                ::windows_core::Interface::as_raw(this),
                &mut result__,
            )
            .from_abi(result__)
        }
    }
    #[doc = "Required features: `\"Windows_Foundation_Collections\"`"]
    #[cfg(feature = "Windows_Foundation_Collections")]
    pub unsafe fn CreateInstance<P0>(
        baseinterface: P0,
        innerinterface: &mut ::core::option::Option<::windows_core::IInspectable>,
    ) -> ::windows_core::Result<UIElementWeakCollection>
    where
        P0: ::windows_core::IntoParam<::windows_core::IInspectable>,
    {
        Self::IUIElementWeakCollectionFactory(|this| unsafe {
            let mut result__ = ::std::mem::zeroed();
            (::windows_core::Interface::vtable(this).CreateInstance)(
                ::windows_core::Interface::as_raw(this),
                baseinterface.into_param().abi(),
                innerinterface as *mut _ as _,
                &mut result__,
            )
            .from_abi(result__)
        })
    }
    #[doc = "Required features: `\"Windows_Foundation_Collections\"`"]
    #[cfg(feature = "Windows_Foundation_Collections")]
    pub fn GetAt(&self, index: u32) -> ::windows_core::Result<UIElement> {
        let this = self;
        unsafe {
            let mut result__ = ::std::mem::zeroed();
            (::windows_core::Interface::vtable(this).GetAt)(
                ::windows_core::Interface::as_raw(this),
                index,
                &mut result__,
            )
            .from_abi(result__)
        }
    }
    #[doc = "Required features: `\"Windows_Foundation_Collections\"`"]
    #[cfg(feature = "Windows_Foundation_Collections")]
    pub fn Size(&self) -> ::windows_core::Result<u32> {
        let this = self;
        unsafe {
            let mut result__ = ::std::mem::zeroed();
            (::windows_core::Interface::vtable(this).Size)(
                ::windows_core::Interface::as_raw(this),
                &mut result__,
            )
            .from_abi(result__)
        }
    }
    #[doc = "Required features: `\"Windows_Foundation_Collections\"`"]
    #[cfg(feature = "Windows_Foundation_Collections")]
    pub fn GetView(
        &self,
    ) -> ::windows_core::Result<::windows::Foundation::Collections::IVectorView<UIElement>> {
        let this = self;
        unsafe {
            let mut result__ = ::std::mem::zeroed();
            (::windows_core::Interface::vtable(this).GetView)(
                ::windows_core::Interface::as_raw(this),
                &mut result__,
            )
            .from_abi(result__)
        }
    }
    #[doc = "Required features: `\"Windows_Foundation_Collections\"`"]
    #[cfg(feature = "Windows_Foundation_Collections")]
    pub fn IndexOf<P0>(&self, value: P0, index: &mut u32) -> ::windows_core::Result<bool>
    where
        P0: ::windows_core::TryIntoParam<UIElement>,
    {
        let this = self;
        unsafe {
            let mut result__ = ::std::mem::zeroed();
            (::windows_core::Interface::vtable(this).IndexOf)(
                ::windows_core::Interface::as_raw(this),
                value.try_into_param()?.abi(),
                index,
                &mut result__,
            )
            .from_abi(result__)
        }
    }
    #[doc = "Required features: `\"Windows_Foundation_Collections\"`"]
    #[cfg(feature = "Windows_Foundation_Collections")]
    pub fn SetAt<P0>(&self, index: u32, value: P0) -> ::windows_core::Result<()>
    where
        P0: ::windows_core::TryIntoParam<UIElement>,
    {
        let this = self;
        unsafe {
            (::windows_core::Interface::vtable(this).SetAt)(
                ::windows_core::Interface::as_raw(this),
                index,
                value.try_into_param()?.abi(),
            )
            .ok()
        }
    }
    #[doc = "Required features: `\"Windows_Foundation_Collections\"`"]
    #[cfg(feature = "Windows_Foundation_Collections")]
    pub fn InsertAt<P0>(&self, index: u32, value: P0) -> ::windows_core::Result<()>
    where
        P0: ::windows_core::TryIntoParam<UIElement>,
    {
        let this = self;
        unsafe {
            (::windows_core::Interface::vtable(this).InsertAt)(
                ::windows_core::Interface::as_raw(this),
                index,
                value.try_into_param()?.abi(),
            )
            .ok()
        }
    }
    #[doc = "Required features: `\"Windows_Foundation_Collections\"`"]
    #[cfg(feature = "Windows_Foundation_Collections")]
    pub fn RemoveAt(&self, index: u32) -> ::windows_core::Result<()> {
        let this = self;
        unsafe {
            (::windows_core::Interface::vtable(this).RemoveAt)(
                ::windows_core::Interface::as_raw(this),
                index,
            )
            .ok()
        }
    }
    #[doc = "Required features: `\"Windows_Foundation_Collections\"`"]
    #[cfg(feature = "Windows_Foundation_Collections")]
    pub fn Append<P0>(&self, value: P0) -> ::windows_core::Result<()>
    where
        P0: ::windows_core::TryIntoParam<UIElement>,
    {
        let this = self;
        unsafe {
            (::windows_core::Interface::vtable(this).Append)(
                ::windows_core::Interface::as_raw(this),
                value.try_into_param()?.abi(),
            )
            .ok()
        }
    }
    #[doc = "Required features: `\"Windows_Foundation_Collections\"`"]
    #[cfg(feature = "Windows_Foundation_Collections")]
    pub fn RemoveAtEnd(&self) -> ::windows_core::Result<()> {
        let this = self;
        unsafe {
            (::windows_core::Interface::vtable(this).RemoveAtEnd)(
                ::windows_core::Interface::as_raw(this),
            )
            .ok()
        }
    }
    #[doc = "Required features: `\"Windows_Foundation_Collections\"`"]
    #[cfg(feature = "Windows_Foundation_Collections")]
    pub fn Clear(&self) -> ::windows_core::Result<()> {
        let this = self;
        unsafe {
            (::windows_core::Interface::vtable(this).Clear)(::windows_core::Interface::as_raw(this))
                .ok()
        }
    }
    #[doc = "Required features: `\"Windows_Foundation_Collections\"`"]
    #[cfg(feature = "Windows_Foundation_Collections")]
    pub fn GetMany(
        &self,
        startindex: u32,
        items: &mut [::core::option::Option<UIElement>],
    ) -> ::windows_core::Result<u32> {
        let this = self;
        unsafe {
            let mut result__ = ::std::mem::zeroed();
            (::windows_core::Interface::vtable(this).GetMany)(
                ::windows_core::Interface::as_raw(this),
                startindex,
                items.len().try_into().unwrap(),
                ::core::mem::transmute_copy(&items),
                &mut result__,
            )
            .from_abi(result__)
        }
    }
    #[doc = "Required features: `\"Windows_Foundation_Collections\"`"]
    #[cfg(feature = "Windows_Foundation_Collections")]
    pub fn ReplaceAll(
        &self,
        items: &[::core::option::Option<UIElement>],
    ) -> ::windows_core::Result<()> {
        let this = self;
        unsafe {
            (::windows_core::Interface::vtable(this).ReplaceAll)(
                ::windows_core::Interface::as_raw(this),
                items.len().try_into().unwrap(),
                ::core::mem::transmute(items.as_ptr()),
            )
            .ok()
        }
    }
    #[doc(hidden)]
    pub fn IUIElementWeakCollectionFactory<
        R,
        F: FnOnce(&IUIElementWeakCollectionFactory) -> ::windows_core::Result<R>,
    >(
        callback: F,
    ) -> ::windows_core::Result<R> {
        static SHARED: ::windows_core::imp::FactoryCache<
            UIElementWeakCollection,
            IUIElementWeakCollectionFactory,
        > = ::windows_core::imp::FactoryCache::new();
        SHARED.call(callback)
    }
}
#[cfg(feature = "Windows_Foundation_Collections")]
impl ::windows_core::RuntimeType for UIElementWeakCollection {
    const SIGNATURE: ::windows_core::imp::ConstBuffer =
        ::windows_core::imp::ConstBuffer::for_class::<Self>();
}
#[cfg(feature = "Windows_Foundation_Collections")]
unsafe impl ::windows_core::Interface for UIElementWeakCollection {
    type Vtable = ::windows::Foundation::Collections::IVector_Vtbl<UIElement>;
}
#[cfg(feature = "Windows_Foundation_Collections")]
unsafe impl ::windows_core::ComInterface for UIElementWeakCollection {
    const IID : ::windows_core::GUID = < ::windows::Foundation::Collections:: IVector :: < UIElement > as::windows_core::ComInterface >::IID ;
}
#[cfg(feature = "Windows_Foundation_Collections")]
impl ::windows_core::RuntimeName for UIElementWeakCollection {
    const NAME: &'static str = "Microsoft.UI.Xaml.UIElementWeakCollection";
}
#[cfg(feature = "Windows_Foundation_Collections")]
impl ::core::iter::IntoIterator for UIElementWeakCollection {
    type Item = UIElement;
    type IntoIter = ::windows::Foundation::Collections::VectorIterator<Self::Item>;
    fn into_iter(self) -> Self::IntoIter {
        ::core::iter::IntoIterator::into_iter(&self)
    }
}
#[cfg(feature = "Windows_Foundation_Collections")]
impl ::core::iter::IntoIterator for &UIElementWeakCollection {
    type Item = UIElement;
    type IntoIter = ::windows::Foundation::Collections::VectorIterator<Self::Item>;
    fn into_iter(self) -> Self::IntoIter {
        ::windows::Foundation::Collections::VectorIterator::new(
            ::windows_core::ComInterface::cast(self).ok(),
        )
    }
}
#[cfg(feature = "Windows_Foundation_Collections")]
::windows_core::imp::interface_hierarchy!(
    UIElementWeakCollection,
    ::windows_core::IUnknown,
    ::windows_core::IInspectable
);
#[cfg(feature = "Windows_Foundation_Collections")]
impl ::windows_core::CanTryInto<::windows::Foundation::Collections::IIterable<UIElement>>
    for UIElementWeakCollection
{
}
#[cfg(feature = "Windows_Foundation_Collections")]
impl ::windows_core::CanTryInto<::windows::Foundation::Collections::IVector<UIElement>>
    for UIElementWeakCollection
{
}
#[cfg(feature = "Windows_Foundation_Collections")]
unsafe impl ::core::marker::Send for UIElementWeakCollection {}
#[cfg(feature = "Windows_Foundation_Collections")]
unsafe impl ::core::marker::Sync for UIElementWeakCollection {}
#[repr(transparent)]
#[derive(::core::cmp::PartialEq, ::core::cmp::Eq, ::core::fmt::Debug, ::core::clone::Clone)]
pub struct UnhandledExceptionEventArgs(::windows_core::IUnknown);
impl UnhandledExceptionEventArgs {
    pub fn Exception(&self) -> ::windows_core::Result<::windows_core::HRESULT> {
        let this = self;
        unsafe {
            let mut result__ = ::std::mem::zeroed();
            (::windows_core::Interface::vtable(this).Exception)(
                ::windows_core::Interface::as_raw(this),
                &mut result__,
            )
            .from_abi(result__)
        }
    }
    pub fn Message(&self) -> ::windows_core::Result<::windows_core::HSTRING> {
        let this = self;
        unsafe {
            let mut result__ = ::std::mem::zeroed();
            (::windows_core::Interface::vtable(this).Message)(
                ::windows_core::Interface::as_raw(this),
                &mut result__,
            )
            .from_abi(result__)
        }
    }
    pub fn Handled(&self) -> ::windows_core::Result<bool> {
        let this = self;
        unsafe {
            let mut result__ = ::std::mem::zeroed();
            (::windows_core::Interface::vtable(this).Handled)(
                ::windows_core::Interface::as_raw(this),
                &mut result__,
            )
            .from_abi(result__)
        }
    }
    pub fn SetHandled(&self, value: bool) -> ::windows_core::Result<()> {
        let this = self;
        unsafe {
            (::windows_core::Interface::vtable(this).SetHandled)(
                ::windows_core::Interface::as_raw(this),
                value,
            )
            .ok()
        }
    }
}
impl ::windows_core::RuntimeType for UnhandledExceptionEventArgs {
    const SIGNATURE: ::windows_core::imp::ConstBuffer =
        ::windows_core::imp::ConstBuffer::for_class::<Self>();
}
unsafe impl ::windows_core::Interface for UnhandledExceptionEventArgs {
    type Vtable = IUnhandledExceptionEventArgs_Vtbl;
}
unsafe impl ::windows_core::ComInterface for UnhandledExceptionEventArgs {
    const IID: ::windows_core::GUID =
        <IUnhandledExceptionEventArgs as ::windows_core::ComInterface>::IID;
}
impl ::windows_core::RuntimeName for UnhandledExceptionEventArgs {
    const NAME: &'static str = "Microsoft.UI.Xaml.UnhandledExceptionEventArgs";
}
::windows_core::imp::interface_hierarchy!(
    UnhandledExceptionEventArgs,
    ::windows_core::IUnknown,
    ::windows_core::IInspectable
);
unsafe impl ::core::marker::Send for UnhandledExceptionEventArgs {}
unsafe impl ::core::marker::Sync for UnhandledExceptionEventArgs {}
#[repr(transparent)]
#[derive(::core::cmp::PartialEq, ::core::cmp::Eq, ::core::fmt::Debug, ::core::clone::Clone)]
pub struct Vector3Transition(::windows_core::IUnknown);
impl Vector3Transition {
    #[doc = "Required features: `\"Windows_Foundation\"`"]
    #[cfg(feature = "Windows_Foundation")]
    pub fn Duration(&self) -> ::windows_core::Result<::windows::Foundation::TimeSpan> {
        let this = self;
        unsafe {
            let mut result__ = ::std::mem::zeroed();
            (::windows_core::Interface::vtable(this).Duration)(
                ::windows_core::Interface::as_raw(this),
                &mut result__,
            )
            .from_abi(result__)
        }
    }
    #[doc = "Required features: `\"Windows_Foundation\"`"]
    #[cfg(feature = "Windows_Foundation")]
    pub fn SetDuration(
        &self,
        value: ::windows::Foundation::TimeSpan,
    ) -> ::windows_core::Result<()> {
        let this = self;
        unsafe {
            (::windows_core::Interface::vtable(this).SetDuration)(
                ::windows_core::Interface::as_raw(this),
                value,
            )
            .ok()
        }
    }
    pub fn Components(&self) -> ::windows_core::Result<Vector3TransitionComponents> {
        let this = self;
        unsafe {
            let mut result__ = ::std::mem::zeroed();
            (::windows_core::Interface::vtable(this).Components)(
                ::windows_core::Interface::as_raw(this),
                &mut result__,
            )
            .from_abi(result__)
        }
    }
    pub fn SetComponents(&self, value: Vector3TransitionComponents) -> ::windows_core::Result<()> {
        let this = self;
        unsafe {
            (::windows_core::Interface::vtable(this).SetComponents)(
                ::windows_core::Interface::as_raw(this),
                value,
            )
            .ok()
        }
    }
    pub unsafe fn CreateInstance<P0>(
        baseinterface: P0,
        innerinterface: &mut ::core::option::Option<::windows_core::IInspectable>,
    ) -> ::windows_core::Result<Vector3Transition>
    where
        P0: ::windows_core::IntoParam<::windows_core::IInspectable>,
    {
        Self::IVector3TransitionFactory(|this| unsafe {
            let mut result__ = ::std::mem::zeroed();
            (::windows_core::Interface::vtable(this).CreateInstance)(
                ::windows_core::Interface::as_raw(this),
                baseinterface.into_param().abi(),
                innerinterface as *mut _ as _,
                &mut result__,
            )
            .from_abi(result__)
        })
    }
    #[doc(hidden)]
    pub fn IVector3TransitionFactory<
        R,
        F: FnOnce(&IVector3TransitionFactory) -> ::windows_core::Result<R>,
    >(
        callback: F,
    ) -> ::windows_core::Result<R> {
        static SHARED: ::windows_core::imp::FactoryCache<
            Vector3Transition,
            IVector3TransitionFactory,
        > = ::windows_core::imp::FactoryCache::new();
        SHARED.call(callback)
    }
}
impl ::windows_core::RuntimeType for Vector3Transition {
    const SIGNATURE: ::windows_core::imp::ConstBuffer =
        ::windows_core::imp::ConstBuffer::for_class::<Self>();
}
unsafe impl ::windows_core::Interface for Vector3Transition {
    type Vtable = IVector3Transition_Vtbl;
}
unsafe impl ::windows_core::ComInterface for Vector3Transition {
    const IID: ::windows_core::GUID = <IVector3Transition as ::windows_core::ComInterface>::IID;
}
impl ::windows_core::RuntimeName for Vector3Transition {
    const NAME: &'static str = "Microsoft.UI.Xaml.Vector3Transition";
}
::windows_core::imp::interface_hierarchy!(
    Vector3Transition,
    ::windows_core::IUnknown,
    ::windows_core::IInspectable
);
unsafe impl ::core::marker::Send for Vector3Transition {}
unsafe impl ::core::marker::Sync for Vector3Transition {}
#[repr(transparent)]
#[derive(::core::cmp::PartialEq, ::core::cmp::Eq, ::core::fmt::Debug, ::core::clone::Clone)]
pub struct VisualState(::windows_core::IUnknown);
impl VisualState {
    pub fn new() -> ::windows_core::Result<Self> {
        Self::IActivationFactory(|f| f.ActivateInstance::<Self>())
    }
    fn IActivationFactory<
        R,
        F: FnOnce(&::windows_core::imp::IGenericFactory) -> ::windows_core::Result<R>,
    >(
        callback: F,
    ) -> ::windows_core::Result<R> {
        static SHARED: ::windows_core::imp::FactoryCache<
            VisualState,
            ::windows_core::imp::IGenericFactory,
        > = ::windows_core::imp::FactoryCache::new();
        SHARED.call(callback)
    }
    pub fn GetValue<P0>(&self, dp: P0) -> ::windows_core::Result<::windows_core::IInspectable>
    where
        P0: ::windows_core::IntoParam<DependencyProperty>,
    {
        let this = &::windows_core::ComInterface::cast::<IDependencyObject>(self)?;
        unsafe {
            let mut result__ = ::std::mem::zeroed();
            (::windows_core::Interface::vtable(this).GetValue)(
                ::windows_core::Interface::as_raw(this),
                dp.into_param().abi(),
                &mut result__,
            )
            .from_abi(result__)
        }
    }
    pub fn SetValue<P0, P1>(&self, dp: P0, value: P1) -> ::windows_core::Result<()>
    where
        P0: ::windows_core::IntoParam<DependencyProperty>,
        P1: ::windows_core::IntoParam<::windows_core::IInspectable>,
    {
        let this = &::windows_core::ComInterface::cast::<IDependencyObject>(self)?;
        unsafe {
            (::windows_core::Interface::vtable(this).SetValue)(
                ::windows_core::Interface::as_raw(this),
                dp.into_param().abi(),
                value.into_param().abi(),
            )
            .ok()
        }
    }
    pub fn ClearValue<P0>(&self, dp: P0) -> ::windows_core::Result<()>
    where
        P0: ::windows_core::IntoParam<DependencyProperty>,
    {
        let this = &::windows_core::ComInterface::cast::<IDependencyObject>(self)?;
        unsafe {
            (::windows_core::Interface::vtable(this).ClearValue)(
                ::windows_core::Interface::as_raw(this),
                dp.into_param().abi(),
            )
            .ok()
        }
    }
    pub fn ReadLocalValue<P0>(&self, dp: P0) -> ::windows_core::Result<::windows_core::IInspectable>
    where
        P0: ::windows_core::IntoParam<DependencyProperty>,
    {
        let this = &::windows_core::ComInterface::cast::<IDependencyObject>(self)?;
        unsafe {
            let mut result__ = ::std::mem::zeroed();
            (::windows_core::Interface::vtable(this).ReadLocalValue)(
                ::windows_core::Interface::as_raw(this),
                dp.into_param().abi(),
                &mut result__,
            )
            .from_abi(result__)
        }
    }
    pub fn GetAnimationBaseValue<P0>(
        &self,
        dp: P0,
    ) -> ::windows_core::Result<::windows_core::IInspectable>
    where
        P0: ::windows_core::IntoParam<DependencyProperty>,
    {
        let this = &::windows_core::ComInterface::cast::<IDependencyObject>(self)?;
        unsafe {
            let mut result__ = ::std::mem::zeroed();
            (::windows_core::Interface::vtable(this).GetAnimationBaseValue)(
                ::windows_core::Interface::as_raw(this),
                dp.into_param().abi(),
                &mut result__,
            )
            .from_abi(result__)
        }
    }
    pub fn RegisterPropertyChangedCallback<P0, P1>(
        &self,
        dp: P0,
        callback: P1,
    ) -> ::windows_core::Result<i64>
    where
        P0: ::windows_core::IntoParam<DependencyProperty>,
        P1: ::windows_core::IntoParam<DependencyPropertyChangedCallback>,
    {
        let this = &::windows_core::ComInterface::cast::<IDependencyObject>(self)?;
        unsafe {
            let mut result__ = ::std::mem::zeroed();
            (::windows_core::Interface::vtable(this).RegisterPropertyChangedCallback)(
                ::windows_core::Interface::as_raw(this),
                dp.into_param().abi(),
                callback.into_param().abi(),
                &mut result__,
            )
            .from_abi(result__)
        }
    }
    pub fn UnregisterPropertyChangedCallback<P0>(
        &self,
        dp: P0,
        token: i64,
    ) -> ::windows_core::Result<()>
    where
        P0: ::windows_core::IntoParam<DependencyProperty>,
    {
        let this = &::windows_core::ComInterface::cast::<IDependencyObject>(self)?;
        unsafe {
            (::windows_core::Interface::vtable(this).UnregisterPropertyChangedCallback)(
                ::windows_core::Interface::as_raw(this),
                dp.into_param().abi(),
                token,
            )
            .ok()
        }
    }
    #[doc = "Required features: `\"Windows_UI_Core\"`"]
    #[cfg(feature = "Windows_UI_Core")]
    pub fn Dispatcher(&self) -> ::windows_core::Result<::windows::UI::Core::CoreDispatcher> {
        let this = &::windows_core::ComInterface::cast::<IDependencyObject>(self)?;
        unsafe {
            let mut result__ = ::std::mem::zeroed();
            (::windows_core::Interface::vtable(this).Dispatcher)(
                ::windows_core::Interface::as_raw(this),
                &mut result__,
            )
            .from_abi(result__)
        }
    }
    #[doc = "Required features: `\"Microsoft_UI_Dispatching\"`"]
    #[cfg(feature = "Microsoft_UI_Dispatching")]
    pub fn DispatcherQueue(&self) -> ::windows_core::Result<super::Dispatching::DispatcherQueue> {
        let this = &::windows_core::ComInterface::cast::<IDependencyObject>(self)?;
        unsafe {
            let mut result__ = ::std::mem::zeroed();
            (::windows_core::Interface::vtable(this).DispatcherQueue)(
                ::windows_core::Interface::as_raw(this),
                &mut result__,
            )
            .from_abi(result__)
        }
    }
    pub fn Name(&self) -> ::windows_core::Result<::windows_core::HSTRING> {
        let this = self;
        unsafe {
            let mut result__ = ::std::mem::zeroed();
            (::windows_core::Interface::vtable(this).Name)(
                ::windows_core::Interface::as_raw(this),
                &mut result__,
            )
            .from_abi(result__)
        }
    }
    #[doc = "Required features: `\"Microsoft_UI_Xaml_Media_Animation\"`"]
    #[cfg(feature = "Microsoft_UI_Xaml_Media_Animation")]
    pub fn Storyboard(&self) -> ::windows_core::Result<Media::Animation::Storyboard> {
        let this = self;
        unsafe {
            let mut result__ = ::std::mem::zeroed();
            (::windows_core::Interface::vtable(this).Storyboard)(
                ::windows_core::Interface::as_raw(this),
                &mut result__,
            )
            .from_abi(result__)
        }
    }
    #[doc = "Required features: `\"Microsoft_UI_Xaml_Media_Animation\"`"]
    #[cfg(feature = "Microsoft_UI_Xaml_Media_Animation")]
    pub fn SetStoryboard<P0>(&self, value: P0) -> ::windows_core::Result<()>
    where
        P0: ::windows_core::IntoParam<Media::Animation::Storyboard>,
    {
        let this = self;
        unsafe {
            (::windows_core::Interface::vtable(this).SetStoryboard)(
                ::windows_core::Interface::as_raw(this),
                value.into_param().abi(),
            )
            .ok()
        }
    }
    pub fn Setters(&self) -> ::windows_core::Result<SetterBaseCollection> {
        let this = self;
        unsafe {
            let mut result__ = ::std::mem::zeroed();
            (::windows_core::Interface::vtable(this).Setters)(
                ::windows_core::Interface::as_raw(this),
                &mut result__,
            )
            .from_abi(result__)
        }
    }
    #[doc = "Required features: `\"Windows_Foundation_Collections\"`"]
    #[cfg(feature = "Windows_Foundation_Collections")]
    pub fn StateTriggers(
        &self,
    ) -> ::windows_core::Result<::windows::Foundation::Collections::IVector<StateTriggerBase>> {
        let this = self;
        unsafe {
            let mut result__ = ::std::mem::zeroed();
            (::windows_core::Interface::vtable(this).StateTriggers)(
                ::windows_core::Interface::as_raw(this),
                &mut result__,
            )
            .from_abi(result__)
        }
    }
}
impl ::windows_core::RuntimeType for VisualState {
    const SIGNATURE: ::windows_core::imp::ConstBuffer =
        ::windows_core::imp::ConstBuffer::for_class::<Self>();
}
unsafe impl ::windows_core::Interface for VisualState {
    type Vtable = IVisualState_Vtbl;
}
unsafe impl ::windows_core::ComInterface for VisualState {
    const IID: ::windows_core::GUID = <IVisualState as ::windows_core::ComInterface>::IID;
}
impl ::windows_core::RuntimeName for VisualState {
    const NAME: &'static str = "Microsoft.UI.Xaml.VisualState";
}
::windows_core::imp::interface_hierarchy!(
    VisualState,
    ::windows_core::IUnknown,
    ::windows_core::IInspectable
);
impl ::windows_core::CanTryInto<DependencyObject> for VisualState {}
unsafe impl ::core::marker::Send for VisualState {}
unsafe impl ::core::marker::Sync for VisualState {}
#[repr(transparent)]
#[derive(::core::cmp::PartialEq, ::core::cmp::Eq, ::core::fmt::Debug, ::core::clone::Clone)]
pub struct VisualStateChangedEventArgs(::windows_core::IUnknown);
impl VisualStateChangedEventArgs {
    pub fn new() -> ::windows_core::Result<Self> {
        Self::IActivationFactory(|f| f.ActivateInstance::<Self>())
    }
    fn IActivationFactory<
        R,
        F: FnOnce(&::windows_core::imp::IGenericFactory) -> ::windows_core::Result<R>,
    >(
        callback: F,
    ) -> ::windows_core::Result<R> {
        static SHARED: ::windows_core::imp::FactoryCache<
            VisualStateChangedEventArgs,
            ::windows_core::imp::IGenericFactory,
        > = ::windows_core::imp::FactoryCache::new();
        SHARED.call(callback)
    }
    pub fn OldState(&self) -> ::windows_core::Result<VisualState> {
        let this = self;
        unsafe {
            let mut result__ = ::std::mem::zeroed();
            (::windows_core::Interface::vtable(this).OldState)(
                ::windows_core::Interface::as_raw(this),
                &mut result__,
            )
            .from_abi(result__)
        }
    }
    pub fn SetOldState<P0>(&self, value: P0) -> ::windows_core::Result<()>
    where
        P0: ::windows_core::IntoParam<VisualState>,
    {
        let this = self;
        unsafe {
            (::windows_core::Interface::vtable(this).SetOldState)(
                ::windows_core::Interface::as_raw(this),
                value.into_param().abi(),
            )
            .ok()
        }
    }
    pub fn NewState(&self) -> ::windows_core::Result<VisualState> {
        let this = self;
        unsafe {
            let mut result__ = ::std::mem::zeroed();
            (::windows_core::Interface::vtable(this).NewState)(
                ::windows_core::Interface::as_raw(this),
                &mut result__,
            )
            .from_abi(result__)
        }
    }
    pub fn SetNewState<P0>(&self, value: P0) -> ::windows_core::Result<()>
    where
        P0: ::windows_core::IntoParam<VisualState>,
    {
        let this = self;
        unsafe {
            (::windows_core::Interface::vtable(this).SetNewState)(
                ::windows_core::Interface::as_raw(this),
                value.into_param().abi(),
            )
            .ok()
        }
    }
    #[doc = "Required features: `\"Microsoft_UI_Xaml_Controls\"`"]
    #[cfg(feature = "Microsoft_UI_Xaml_Controls")]
    pub fn Control(&self) -> ::windows_core::Result<Controls::Control> {
        let this = self;
        unsafe {
            let mut result__ = ::std::mem::zeroed();
            (::windows_core::Interface::vtable(this).Control)(
                ::windows_core::Interface::as_raw(this),
                &mut result__,
            )
            .from_abi(result__)
        }
    }
    #[doc = "Required features: `\"Microsoft_UI_Xaml_Controls\"`"]
    #[cfg(feature = "Microsoft_UI_Xaml_Controls")]
    pub fn SetControl<P0>(&self, value: P0) -> ::windows_core::Result<()>
    where
        P0: ::windows_core::TryIntoParam<Controls::Control>,
    {
        let this = self;
        unsafe {
            (::windows_core::Interface::vtable(this).SetControl)(
                ::windows_core::Interface::as_raw(this),
                value.try_into_param()?.abi(),
            )
            .ok()
        }
    }
}
impl ::windows_core::RuntimeType for VisualStateChangedEventArgs {
    const SIGNATURE: ::windows_core::imp::ConstBuffer =
        ::windows_core::imp::ConstBuffer::for_class::<Self>();
}
unsafe impl ::windows_core::Interface for VisualStateChangedEventArgs {
    type Vtable = IVisualStateChangedEventArgs_Vtbl;
}
unsafe impl ::windows_core::ComInterface for VisualStateChangedEventArgs {
    const IID: ::windows_core::GUID =
        <IVisualStateChangedEventArgs as ::windows_core::ComInterface>::IID;
}
impl ::windows_core::RuntimeName for VisualStateChangedEventArgs {
    const NAME: &'static str = "Microsoft.UI.Xaml.VisualStateChangedEventArgs";
}
::windows_core::imp::interface_hierarchy!(
    VisualStateChangedEventArgs,
    ::windows_core::IUnknown,
    ::windows_core::IInspectable
);
unsafe impl ::core::marker::Send for VisualStateChangedEventArgs {}
unsafe impl ::core::marker::Sync for VisualStateChangedEventArgs {}
#[repr(transparent)]
#[derive(::core::cmp::PartialEq, ::core::cmp::Eq, ::core::fmt::Debug, ::core::clone::Clone)]
pub struct VisualStateGroup(::windows_core::IUnknown);
impl VisualStateGroup {
    pub fn new() -> ::windows_core::Result<Self> {
        Self::IActivationFactory(|f| f.ActivateInstance::<Self>())
    }
    fn IActivationFactory<
        R,
        F: FnOnce(&::windows_core::imp::IGenericFactory) -> ::windows_core::Result<R>,
    >(
        callback: F,
    ) -> ::windows_core::Result<R> {
        static SHARED: ::windows_core::imp::FactoryCache<
            VisualStateGroup,
            ::windows_core::imp::IGenericFactory,
        > = ::windows_core::imp::FactoryCache::new();
        SHARED.call(callback)
    }
    pub fn GetValue<P0>(&self, dp: P0) -> ::windows_core::Result<::windows_core::IInspectable>
    where
        P0: ::windows_core::IntoParam<DependencyProperty>,
    {
        let this = &::windows_core::ComInterface::cast::<IDependencyObject>(self)?;
        unsafe {
            let mut result__ = ::std::mem::zeroed();
            (::windows_core::Interface::vtable(this).GetValue)(
                ::windows_core::Interface::as_raw(this),
                dp.into_param().abi(),
                &mut result__,
            )
            .from_abi(result__)
        }
    }
    pub fn SetValue<P0, P1>(&self, dp: P0, value: P1) -> ::windows_core::Result<()>
    where
        P0: ::windows_core::IntoParam<DependencyProperty>,
        P1: ::windows_core::IntoParam<::windows_core::IInspectable>,
    {
        let this = &::windows_core::ComInterface::cast::<IDependencyObject>(self)?;
        unsafe {
            (::windows_core::Interface::vtable(this).SetValue)(
                ::windows_core::Interface::as_raw(this),
                dp.into_param().abi(),
                value.into_param().abi(),
            )
            .ok()
        }
    }
    pub fn ClearValue<P0>(&self, dp: P0) -> ::windows_core::Result<()>
    where
        P0: ::windows_core::IntoParam<DependencyProperty>,
    {
        let this = &::windows_core::ComInterface::cast::<IDependencyObject>(self)?;
        unsafe {
            (::windows_core::Interface::vtable(this).ClearValue)(
                ::windows_core::Interface::as_raw(this),
                dp.into_param().abi(),
            )
            .ok()
        }
    }
    pub fn ReadLocalValue<P0>(&self, dp: P0) -> ::windows_core::Result<::windows_core::IInspectable>
    where
        P0: ::windows_core::IntoParam<DependencyProperty>,
    {
        let this = &::windows_core::ComInterface::cast::<IDependencyObject>(self)?;
        unsafe {
            let mut result__ = ::std::mem::zeroed();
            (::windows_core::Interface::vtable(this).ReadLocalValue)(
                ::windows_core::Interface::as_raw(this),
                dp.into_param().abi(),
                &mut result__,
            )
            .from_abi(result__)
        }
    }
    pub fn GetAnimationBaseValue<P0>(
        &self,
        dp: P0,
    ) -> ::windows_core::Result<::windows_core::IInspectable>
    where
        P0: ::windows_core::IntoParam<DependencyProperty>,
    {
        let this = &::windows_core::ComInterface::cast::<IDependencyObject>(self)?;
        unsafe {
            let mut result__ = ::std::mem::zeroed();
            (::windows_core::Interface::vtable(this).GetAnimationBaseValue)(
                ::windows_core::Interface::as_raw(this),
                dp.into_param().abi(),
                &mut result__,
            )
            .from_abi(result__)
        }
    }
    pub fn RegisterPropertyChangedCallback<P0, P1>(
        &self,
        dp: P0,
        callback: P1,
    ) -> ::windows_core::Result<i64>
    where
        P0: ::windows_core::IntoParam<DependencyProperty>,
        P1: ::windows_core::IntoParam<DependencyPropertyChangedCallback>,
    {
        let this = &::windows_core::ComInterface::cast::<IDependencyObject>(self)?;
        unsafe {
            let mut result__ = ::std::mem::zeroed();
            (::windows_core::Interface::vtable(this).RegisterPropertyChangedCallback)(
                ::windows_core::Interface::as_raw(this),
                dp.into_param().abi(),
                callback.into_param().abi(),
                &mut result__,
            )
            .from_abi(result__)
        }
    }
    pub fn UnregisterPropertyChangedCallback<P0>(
        &self,
        dp: P0,
        token: i64,
    ) -> ::windows_core::Result<()>
    where
        P0: ::windows_core::IntoParam<DependencyProperty>,
    {
        let this = &::windows_core::ComInterface::cast::<IDependencyObject>(self)?;
        unsafe {
            (::windows_core::Interface::vtable(this).UnregisterPropertyChangedCallback)(
                ::windows_core::Interface::as_raw(this),
                dp.into_param().abi(),
                token,
            )
            .ok()
        }
    }
    #[doc = "Required features: `\"Windows_UI_Core\"`"]
    #[cfg(feature = "Windows_UI_Core")]
    pub fn Dispatcher(&self) -> ::windows_core::Result<::windows::UI::Core::CoreDispatcher> {
        let this = &::windows_core::ComInterface::cast::<IDependencyObject>(self)?;
        unsafe {
            let mut result__ = ::std::mem::zeroed();
            (::windows_core::Interface::vtable(this).Dispatcher)(
                ::windows_core::Interface::as_raw(this),
                &mut result__,
            )
            .from_abi(result__)
        }
    }
    #[doc = "Required features: `\"Microsoft_UI_Dispatching\"`"]
    #[cfg(feature = "Microsoft_UI_Dispatching")]
    pub fn DispatcherQueue(&self) -> ::windows_core::Result<super::Dispatching::DispatcherQueue> {
        let this = &::windows_core::ComInterface::cast::<IDependencyObject>(self)?;
        unsafe {
            let mut result__ = ::std::mem::zeroed();
            (::windows_core::Interface::vtable(this).DispatcherQueue)(
                ::windows_core::Interface::as_raw(this),
                &mut result__,
            )
            .from_abi(result__)
        }
    }
    pub fn Name(&self) -> ::windows_core::Result<::windows_core::HSTRING> {
        let this = self;
        unsafe {
            let mut result__ = ::std::mem::zeroed();
            (::windows_core::Interface::vtable(this).Name)(
                ::windows_core::Interface::as_raw(this),
                &mut result__,
            )
            .from_abi(result__)
        }
    }
    #[doc = "Required features: `\"Windows_Foundation_Collections\"`"]
    #[cfg(feature = "Windows_Foundation_Collections")]
    pub fn Transitions(
        &self,
    ) -> ::windows_core::Result<::windows::Foundation::Collections::IVector<VisualTransition>> {
        let this = self;
        unsafe {
            let mut result__ = ::std::mem::zeroed();
            (::windows_core::Interface::vtable(this).Transitions)(
                ::windows_core::Interface::as_raw(this),
                &mut result__,
            )
            .from_abi(result__)
        }
    }
    #[doc = "Required features: `\"Windows_Foundation_Collections\"`"]
    #[cfg(feature = "Windows_Foundation_Collections")]
    pub fn States(
        &self,
    ) -> ::windows_core::Result<::windows::Foundation::Collections::IVector<VisualState>> {
        let this = self;
        unsafe {
            let mut result__ = ::std::mem::zeroed();
            (::windows_core::Interface::vtable(this).States)(
                ::windows_core::Interface::as_raw(this),
                &mut result__,
            )
            .from_abi(result__)
        }
    }
    pub fn CurrentState(&self) -> ::windows_core::Result<VisualState> {
        let this = self;
        unsafe {
            let mut result__ = ::std::mem::zeroed();
            (::windows_core::Interface::vtable(this).CurrentState)(
                ::windows_core::Interface::as_raw(this),
                &mut result__,
            )
            .from_abi(result__)
        }
    }
    #[doc = "Required features: `\"Windows_Foundation\"`"]
    #[cfg(feature = "Windows_Foundation")]
    pub fn CurrentStateChanged<P0>(
        &self,
        handler: P0,
    ) -> ::windows_core::Result<::windows::Foundation::EventRegistrationToken>
    where
        P0: ::windows_core::IntoParam<VisualStateChangedEventHandler>,
    {
        let this = self;
        unsafe {
            let mut result__ = ::std::mem::zeroed();
            (::windows_core::Interface::vtable(this).CurrentStateChanged)(
                ::windows_core::Interface::as_raw(this),
                handler.into_param().abi(),
                &mut result__,
            )
            .from_abi(result__)
        }
    }
    #[doc = "Required features: `\"Windows_Foundation\"`"]
    #[cfg(feature = "Windows_Foundation")]
    pub fn RemoveCurrentStateChanged(
        &self,
        token: ::windows::Foundation::EventRegistrationToken,
    ) -> ::windows_core::Result<()> {
        let this = self;
        unsafe {
            (::windows_core::Interface::vtable(this).RemoveCurrentStateChanged)(
                ::windows_core::Interface::as_raw(this),
                token,
            )
            .ok()
        }
    }
    #[doc = "Required features: `\"Windows_Foundation\"`"]
    #[cfg(feature = "Windows_Foundation")]
    pub fn CurrentStateChanging<P0>(
        &self,
        handler: P0,
    ) -> ::windows_core::Result<::windows::Foundation::EventRegistrationToken>
    where
        P0: ::windows_core::IntoParam<VisualStateChangedEventHandler>,
    {
        let this = self;
        unsafe {
            let mut result__ = ::std::mem::zeroed();
            (::windows_core::Interface::vtable(this).CurrentStateChanging)(
                ::windows_core::Interface::as_raw(this),
                handler.into_param().abi(),
                &mut result__,
            )
            .from_abi(result__)
        }
    }
    #[doc = "Required features: `\"Windows_Foundation\"`"]
    #[cfg(feature = "Windows_Foundation")]
    pub fn RemoveCurrentStateChanging(
        &self,
        token: ::windows::Foundation::EventRegistrationToken,
    ) -> ::windows_core::Result<()> {
        let this = self;
        unsafe {
            (::windows_core::Interface::vtable(this).RemoveCurrentStateChanging)(
                ::windows_core::Interface::as_raw(this),
                token,
            )
            .ok()
        }
    }
}
impl ::windows_core::RuntimeType for VisualStateGroup {
    const SIGNATURE: ::windows_core::imp::ConstBuffer =
        ::windows_core::imp::ConstBuffer::for_class::<Self>();
}
unsafe impl ::windows_core::Interface for VisualStateGroup {
    type Vtable = IVisualStateGroup_Vtbl;
}
unsafe impl ::windows_core::ComInterface for VisualStateGroup {
    const IID: ::windows_core::GUID = <IVisualStateGroup as ::windows_core::ComInterface>::IID;
}
impl ::windows_core::RuntimeName for VisualStateGroup {
    const NAME: &'static str = "Microsoft.UI.Xaml.VisualStateGroup";
}
::windows_core::imp::interface_hierarchy!(
    VisualStateGroup,
    ::windows_core::IUnknown,
    ::windows_core::IInspectable
);
impl ::windows_core::CanTryInto<DependencyObject> for VisualStateGroup {}
unsafe impl ::core::marker::Send for VisualStateGroup {}
unsafe impl ::core::marker::Sync for VisualStateGroup {}
#[repr(transparent)]
#[derive(::core::cmp::PartialEq, ::core::cmp::Eq, ::core::fmt::Debug, ::core::clone::Clone)]
pub struct VisualStateManager(::windows_core::IUnknown);
impl VisualStateManager {
    pub fn GetValue<P0>(&self, dp: P0) -> ::windows_core::Result<::windows_core::IInspectable>
    where
        P0: ::windows_core::IntoParam<DependencyProperty>,
    {
        let this = &::windows_core::ComInterface::cast::<IDependencyObject>(self)?;
        unsafe {
            let mut result__ = ::std::mem::zeroed();
            (::windows_core::Interface::vtable(this).GetValue)(
                ::windows_core::Interface::as_raw(this),
                dp.into_param().abi(),
                &mut result__,
            )
            .from_abi(result__)
        }
    }
    pub fn SetValue<P0, P1>(&self, dp: P0, value: P1) -> ::windows_core::Result<()>
    where
        P0: ::windows_core::IntoParam<DependencyProperty>,
        P1: ::windows_core::IntoParam<::windows_core::IInspectable>,
    {
        let this = &::windows_core::ComInterface::cast::<IDependencyObject>(self)?;
        unsafe {
            (::windows_core::Interface::vtable(this).SetValue)(
                ::windows_core::Interface::as_raw(this),
                dp.into_param().abi(),
                value.into_param().abi(),
            )
            .ok()
        }
    }
    pub fn ClearValue<P0>(&self, dp: P0) -> ::windows_core::Result<()>
    where
        P0: ::windows_core::IntoParam<DependencyProperty>,
    {
        let this = &::windows_core::ComInterface::cast::<IDependencyObject>(self)?;
        unsafe {
            (::windows_core::Interface::vtable(this).ClearValue)(
                ::windows_core::Interface::as_raw(this),
                dp.into_param().abi(),
            )
            .ok()
        }
    }
    pub fn ReadLocalValue<P0>(&self, dp: P0) -> ::windows_core::Result<::windows_core::IInspectable>
    where
        P0: ::windows_core::IntoParam<DependencyProperty>,
    {
        let this = &::windows_core::ComInterface::cast::<IDependencyObject>(self)?;
        unsafe {
            let mut result__ = ::std::mem::zeroed();
            (::windows_core::Interface::vtable(this).ReadLocalValue)(
                ::windows_core::Interface::as_raw(this),
                dp.into_param().abi(),
                &mut result__,
            )
            .from_abi(result__)
        }
    }
    pub fn GetAnimationBaseValue<P0>(
        &self,
        dp: P0,
    ) -> ::windows_core::Result<::windows_core::IInspectable>
    where
        P0: ::windows_core::IntoParam<DependencyProperty>,
    {
        let this = &::windows_core::ComInterface::cast::<IDependencyObject>(self)?;
        unsafe {
            let mut result__ = ::std::mem::zeroed();
            (::windows_core::Interface::vtable(this).GetAnimationBaseValue)(
                ::windows_core::Interface::as_raw(this),
                dp.into_param().abi(),
                &mut result__,
            )
            .from_abi(result__)
        }
    }
    pub fn RegisterPropertyChangedCallback<P0, P1>(
        &self,
        dp: P0,
        callback: P1,
    ) -> ::windows_core::Result<i64>
    where
        P0: ::windows_core::IntoParam<DependencyProperty>,
        P1: ::windows_core::IntoParam<DependencyPropertyChangedCallback>,
    {
        let this = &::windows_core::ComInterface::cast::<IDependencyObject>(self)?;
        unsafe {
            let mut result__ = ::std::mem::zeroed();
            (::windows_core::Interface::vtable(this).RegisterPropertyChangedCallback)(
                ::windows_core::Interface::as_raw(this),
                dp.into_param().abi(),
                callback.into_param().abi(),
                &mut result__,
            )
            .from_abi(result__)
        }
    }
    pub fn UnregisterPropertyChangedCallback<P0>(
        &self,
        dp: P0,
        token: i64,
    ) -> ::windows_core::Result<()>
    where
        P0: ::windows_core::IntoParam<DependencyProperty>,
    {
        let this = &::windows_core::ComInterface::cast::<IDependencyObject>(self)?;
        unsafe {
            (::windows_core::Interface::vtable(this).UnregisterPropertyChangedCallback)(
                ::windows_core::Interface::as_raw(this),
                dp.into_param().abi(),
                token,
            )
            .ok()
        }
    }
    #[doc = "Required features: `\"Windows_UI_Core\"`"]
    #[cfg(feature = "Windows_UI_Core")]
    pub fn Dispatcher(&self) -> ::windows_core::Result<::windows::UI::Core::CoreDispatcher> {
        let this = &::windows_core::ComInterface::cast::<IDependencyObject>(self)?;
        unsafe {
            let mut result__ = ::std::mem::zeroed();
            (::windows_core::Interface::vtable(this).Dispatcher)(
                ::windows_core::Interface::as_raw(this),
                &mut result__,
            )
            .from_abi(result__)
        }
    }
    #[doc = "Required features: `\"Microsoft_UI_Dispatching\"`"]
    #[cfg(feature = "Microsoft_UI_Dispatching")]
    pub fn DispatcherQueue(&self) -> ::windows_core::Result<super::Dispatching::DispatcherQueue> {
        let this = &::windows_core::ComInterface::cast::<IDependencyObject>(self)?;
        unsafe {
            let mut result__ = ::std::mem::zeroed();
            (::windows_core::Interface::vtable(this).DispatcherQueue)(
                ::windows_core::Interface::as_raw(this),
                &mut result__,
            )
            .from_abi(result__)
        }
    }
    pub unsafe fn CreateInstance<P0>(
        baseinterface: P0,
        innerinterface: &mut ::core::option::Option<::windows_core::IInspectable>,
    ) -> ::windows_core::Result<VisualStateManager>
    where
        P0: ::windows_core::IntoParam<::windows_core::IInspectable>,
    {
        Self::IVisualStateManagerFactory(|this| unsafe {
            let mut result__ = ::std::mem::zeroed();
            (::windows_core::Interface::vtable(this).CreateInstance)(
                ::windows_core::Interface::as_raw(this),
                baseinterface.into_param().abi(),
                innerinterface as *mut _ as _,
                &mut result__,
            )
            .from_abi(result__)
        })
    }
    #[doc = "Required features: `\"Microsoft_UI_Xaml_Controls\"`"]
    #[cfg(feature = "Microsoft_UI_Xaml_Controls")]
    pub fn GoToStateCore<P0, P1, P2, P3>(
        &self,
        control: P0,
        templateroot: P1,
        statename: &::windows_core::HSTRING,
        group: P2,
        state: P3,
        usetransitions: bool,
    ) -> ::windows_core::Result<bool>
    where
        P0: ::windows_core::TryIntoParam<Controls::Control>,
        P1: ::windows_core::TryIntoParam<FrameworkElement>,
        P2: ::windows_core::IntoParam<VisualStateGroup>,
        P3: ::windows_core::IntoParam<VisualState>,
    {
        let this = &::windows_core::ComInterface::cast::<IVisualStateManagerOverrides>(self)?;
        unsafe {
            let mut result__ = ::std::mem::zeroed();
            (::windows_core::Interface::vtable(this).GoToStateCore)(
                ::windows_core::Interface::as_raw(this),
                control.try_into_param()?.abi(),
                templateroot.try_into_param()?.abi(),
                ::core::mem::transmute_copy(statename),
                group.into_param().abi(),
                state.into_param().abi(),
                usetransitions,
                &mut result__,
            )
            .from_abi(result__)
        }
    }
    #[doc = "Required features: `\"Microsoft_UI_Xaml_Controls\"`"]
    #[cfg(feature = "Microsoft_UI_Xaml_Controls")]
    pub fn RaiseCurrentStateChanging<P0, P1, P2, P3>(
        &self,
        stategroup: P0,
        oldstate: P1,
        newstate: P2,
        control: P3,
    ) -> ::windows_core::Result<()>
    where
        P0: ::windows_core::IntoParam<VisualStateGroup>,
        P1: ::windows_core::IntoParam<VisualState>,
        P2: ::windows_core::IntoParam<VisualState>,
        P3: ::windows_core::TryIntoParam<Controls::Control>,
    {
        let this = &::windows_core::ComInterface::cast::<IVisualStateManagerProtected>(self)?;
        unsafe {
            (::windows_core::Interface::vtable(this).RaiseCurrentStateChanging)(
                ::windows_core::Interface::as_raw(this),
                stategroup.into_param().abi(),
                oldstate.into_param().abi(),
                newstate.into_param().abi(),
                control.try_into_param()?.abi(),
            )
            .ok()
        }
    }
    #[doc = "Required features: `\"Microsoft_UI_Xaml_Controls\"`"]
    #[cfg(feature = "Microsoft_UI_Xaml_Controls")]
    pub fn RaiseCurrentStateChanged<P0, P1, P2, P3>(
        &self,
        stategroup: P0,
        oldstate: P1,
        newstate: P2,
        control: P3,
    ) -> ::windows_core::Result<()>
    where
        P0: ::windows_core::IntoParam<VisualStateGroup>,
        P1: ::windows_core::IntoParam<VisualState>,
        P2: ::windows_core::IntoParam<VisualState>,
        P3: ::windows_core::TryIntoParam<Controls::Control>,
    {
        let this = &::windows_core::ComInterface::cast::<IVisualStateManagerProtected>(self)?;
        unsafe {
            (::windows_core::Interface::vtable(this).RaiseCurrentStateChanged)(
                ::windows_core::Interface::as_raw(this),
                stategroup.into_param().abi(),
                oldstate.into_param().abi(),
                newstate.into_param().abi(),
                control.try_into_param()?.abi(),
            )
            .ok()
        }
    }
    #[doc = "Required features: `\"Windows_Foundation_Collections\"`"]
    #[cfg(feature = "Windows_Foundation_Collections")]
    pub fn GetVisualStateGroups<P0>(
        obj: P0,
    ) -> ::windows_core::Result<::windows::Foundation::Collections::IVector<VisualStateGroup>>
    where
        P0: ::windows_core::TryIntoParam<FrameworkElement>,
    {
        Self::IVisualStateManagerStatics(|this| unsafe {
            let mut result__ = ::std::mem::zeroed();
            (::windows_core::Interface::vtable(this).GetVisualStateGroups)(
                ::windows_core::Interface::as_raw(this),
                obj.try_into_param()?.abi(),
                &mut result__,
            )
            .from_abi(result__)
        })
    }
    pub fn CustomVisualStateManagerProperty() -> ::windows_core::Result<DependencyProperty> {
        Self::IVisualStateManagerStatics(|this| unsafe {
            let mut result__ = ::std::mem::zeroed();
            (::windows_core::Interface::vtable(this).CustomVisualStateManagerProperty)(
                ::windows_core::Interface::as_raw(this),
                &mut result__,
            )
            .from_abi(result__)
        })
    }
    pub fn GetCustomVisualStateManager<P0>(obj: P0) -> ::windows_core::Result<VisualStateManager>
    where
        P0: ::windows_core::TryIntoParam<FrameworkElement>,
    {
        Self::IVisualStateManagerStatics(|this| unsafe {
            let mut result__ = ::std::mem::zeroed();
            (::windows_core::Interface::vtable(this).GetCustomVisualStateManager)(
                ::windows_core::Interface::as_raw(this),
                obj.try_into_param()?.abi(),
                &mut result__,
            )
            .from_abi(result__)
        })
    }
    pub fn SetCustomVisualStateManager<P0, P1>(obj: P0, value: P1) -> ::windows_core::Result<()>
    where
        P0: ::windows_core::TryIntoParam<FrameworkElement>,
        P1: ::windows_core::TryIntoParam<VisualStateManager>,
    {
        Self::IVisualStateManagerStatics(|this| unsafe {
            (::windows_core::Interface::vtable(this).SetCustomVisualStateManager)(
                ::windows_core::Interface::as_raw(this),
                obj.try_into_param()?.abi(),
                value.try_into_param()?.abi(),
            )
            .ok()
        })
    }
    #[doc = "Required features: `\"Microsoft_UI_Xaml_Controls\"`"]
    #[cfg(feature = "Microsoft_UI_Xaml_Controls")]
    pub fn GoToState<P0>(
        control: P0,
        statename: &::windows_core::HSTRING,
        usetransitions: bool,
    ) -> ::windows_core::Result<bool>
    where
        P0: ::windows_core::TryIntoParam<Controls::Control>,
    {
        Self::IVisualStateManagerStatics(|this| unsafe {
            let mut result__ = ::std::mem::zeroed();
            (::windows_core::Interface::vtable(this).GoToState)(
                ::windows_core::Interface::as_raw(this),
                control.try_into_param()?.abi(),
                ::core::mem::transmute_copy(statename),
                usetransitions,
                &mut result__,
            )
            .from_abi(result__)
        })
    }
    #[doc(hidden)]
    pub fn IVisualStateManagerFactory<
        R,
        F: FnOnce(&IVisualStateManagerFactory) -> ::windows_core::Result<R>,
    >(
        callback: F,
    ) -> ::windows_core::Result<R> {
        static SHARED: ::windows_core::imp::FactoryCache<
            VisualStateManager,
            IVisualStateManagerFactory,
        > = ::windows_core::imp::FactoryCache::new();
        SHARED.call(callback)
    }
    #[doc(hidden)]
    pub fn IVisualStateManagerStatics<
        R,
        F: FnOnce(&IVisualStateManagerStatics) -> ::windows_core::Result<R>,
    >(
        callback: F,
    ) -> ::windows_core::Result<R> {
        static SHARED: ::windows_core::imp::FactoryCache<
            VisualStateManager,
            IVisualStateManagerStatics,
        > = ::windows_core::imp::FactoryCache::new();
        SHARED.call(callback)
    }
}
impl ::windows_core::RuntimeType for VisualStateManager {
    const SIGNATURE: ::windows_core::imp::ConstBuffer =
        ::windows_core::imp::ConstBuffer::for_class::<Self>();
}
unsafe impl ::windows_core::Interface for VisualStateManager {
    type Vtable = IVisualStateManager_Vtbl;
}
unsafe impl ::windows_core::ComInterface for VisualStateManager {
    const IID: ::windows_core::GUID = <IVisualStateManager as ::windows_core::ComInterface>::IID;
}
impl ::windows_core::RuntimeName for VisualStateManager {
    const NAME: &'static str = "Microsoft.UI.Xaml.VisualStateManager";
}
::windows_core::imp::interface_hierarchy!(
    VisualStateManager,
    ::windows_core::IUnknown,
    ::windows_core::IInspectable
);
impl ::windows_core::CanTryInto<DependencyObject> for VisualStateManager {}
unsafe impl ::core::marker::Send for VisualStateManager {}
unsafe impl ::core::marker::Sync for VisualStateManager {}
#[repr(transparent)]
#[derive(::core::cmp::PartialEq, ::core::cmp::Eq, ::core::fmt::Debug, ::core::clone::Clone)]
pub struct VisualTransition(::windows_core::IUnknown);
impl VisualTransition {
    pub fn GetValue<P0>(&self, dp: P0) -> ::windows_core::Result<::windows_core::IInspectable>
    where
        P0: ::windows_core::IntoParam<DependencyProperty>,
    {
        let this = &::windows_core::ComInterface::cast::<IDependencyObject>(self)?;
        unsafe {
            let mut result__ = ::std::mem::zeroed();
            (::windows_core::Interface::vtable(this).GetValue)(
                ::windows_core::Interface::as_raw(this),
                dp.into_param().abi(),
                &mut result__,
            )
            .from_abi(result__)
        }
    }
    pub fn SetValue<P0, P1>(&self, dp: P0, value: P1) -> ::windows_core::Result<()>
    where
        P0: ::windows_core::IntoParam<DependencyProperty>,
        P1: ::windows_core::IntoParam<::windows_core::IInspectable>,
    {
        let this = &::windows_core::ComInterface::cast::<IDependencyObject>(self)?;
        unsafe {
            (::windows_core::Interface::vtable(this).SetValue)(
                ::windows_core::Interface::as_raw(this),
                dp.into_param().abi(),
                value.into_param().abi(),
            )
            .ok()
        }
    }
    pub fn ClearValue<P0>(&self, dp: P0) -> ::windows_core::Result<()>
    where
        P0: ::windows_core::IntoParam<DependencyProperty>,
    {
        let this = &::windows_core::ComInterface::cast::<IDependencyObject>(self)?;
        unsafe {
            (::windows_core::Interface::vtable(this).ClearValue)(
                ::windows_core::Interface::as_raw(this),
                dp.into_param().abi(),
            )
            .ok()
        }
    }
    pub fn ReadLocalValue<P0>(&self, dp: P0) -> ::windows_core::Result<::windows_core::IInspectable>
    where
        P0: ::windows_core::IntoParam<DependencyProperty>,
    {
        let this = &::windows_core::ComInterface::cast::<IDependencyObject>(self)?;
        unsafe {
            let mut result__ = ::std::mem::zeroed();
            (::windows_core::Interface::vtable(this).ReadLocalValue)(
                ::windows_core::Interface::as_raw(this),
                dp.into_param().abi(),
                &mut result__,
            )
            .from_abi(result__)
        }
    }
    pub fn GetAnimationBaseValue<P0>(
        &self,
        dp: P0,
    ) -> ::windows_core::Result<::windows_core::IInspectable>
    where
        P0: ::windows_core::IntoParam<DependencyProperty>,
    {
        let this = &::windows_core::ComInterface::cast::<IDependencyObject>(self)?;
        unsafe {
            let mut result__ = ::std::mem::zeroed();
            (::windows_core::Interface::vtable(this).GetAnimationBaseValue)(
                ::windows_core::Interface::as_raw(this),
                dp.into_param().abi(),
                &mut result__,
            )
            .from_abi(result__)
        }
    }
    pub fn RegisterPropertyChangedCallback<P0, P1>(
        &self,
        dp: P0,
        callback: P1,
    ) -> ::windows_core::Result<i64>
    where
        P0: ::windows_core::IntoParam<DependencyProperty>,
        P1: ::windows_core::IntoParam<DependencyPropertyChangedCallback>,
    {
        let this = &::windows_core::ComInterface::cast::<IDependencyObject>(self)?;
        unsafe {
            let mut result__ = ::std::mem::zeroed();
            (::windows_core::Interface::vtable(this).RegisterPropertyChangedCallback)(
                ::windows_core::Interface::as_raw(this),
                dp.into_param().abi(),
                callback.into_param().abi(),
                &mut result__,
            )
            .from_abi(result__)
        }
    }
    pub fn UnregisterPropertyChangedCallback<P0>(
        &self,
        dp: P0,
        token: i64,
    ) -> ::windows_core::Result<()>
    where
        P0: ::windows_core::IntoParam<DependencyProperty>,
    {
        let this = &::windows_core::ComInterface::cast::<IDependencyObject>(self)?;
        unsafe {
            (::windows_core::Interface::vtable(this).UnregisterPropertyChangedCallback)(
                ::windows_core::Interface::as_raw(this),
                dp.into_param().abi(),
                token,
            )
            .ok()
        }
    }
    #[doc = "Required features: `\"Windows_UI_Core\"`"]
    #[cfg(feature = "Windows_UI_Core")]
    pub fn Dispatcher(&self) -> ::windows_core::Result<::windows::UI::Core::CoreDispatcher> {
        let this = &::windows_core::ComInterface::cast::<IDependencyObject>(self)?;
        unsafe {
            let mut result__ = ::std::mem::zeroed();
            (::windows_core::Interface::vtable(this).Dispatcher)(
                ::windows_core::Interface::as_raw(this),
                &mut result__,
            )
            .from_abi(result__)
        }
    }
    #[doc = "Required features: `\"Microsoft_UI_Dispatching\"`"]
    #[cfg(feature = "Microsoft_UI_Dispatching")]
    pub fn DispatcherQueue(&self) -> ::windows_core::Result<super::Dispatching::DispatcherQueue> {
        let this = &::windows_core::ComInterface::cast::<IDependencyObject>(self)?;
        unsafe {
            let mut result__ = ::std::mem::zeroed();
            (::windows_core::Interface::vtable(this).DispatcherQueue)(
                ::windows_core::Interface::as_raw(this),
                &mut result__,
            )
            .from_abi(result__)
        }
    }
    #[doc = "Required features: `\"Windows_Foundation\"`"]
    #[cfg(feature = "Windows_Foundation")]
    pub fn GeneratedDuration(&self) -> ::windows_core::Result<Duration> {
        let this = self;
        unsafe {
            let mut result__ = ::std::mem::zeroed();
            (::windows_core::Interface::vtable(this).GeneratedDuration)(
                ::windows_core::Interface::as_raw(this),
                &mut result__,
            )
            .from_abi(result__)
        }
    }
    #[doc = "Required features: `\"Windows_Foundation\"`"]
    #[cfg(feature = "Windows_Foundation")]
    pub fn SetGeneratedDuration(&self, value: Duration) -> ::windows_core::Result<()> {
        let this = self;
        unsafe {
            (::windows_core::Interface::vtable(this).SetGeneratedDuration)(
                ::windows_core::Interface::as_raw(this),
                value,
            )
            .ok()
        }
    }
    #[doc = "Required features: `\"Microsoft_UI_Xaml_Media_Animation\"`"]
    #[cfg(feature = "Microsoft_UI_Xaml_Media_Animation")]
    pub fn GeneratedEasingFunction(
        &self,
    ) -> ::windows_core::Result<Media::Animation::EasingFunctionBase> {
        let this = self;
        unsafe {
            let mut result__ = ::std::mem::zeroed();
            (::windows_core::Interface::vtable(this).GeneratedEasingFunction)(
                ::windows_core::Interface::as_raw(this),
                &mut result__,
            )
            .from_abi(result__)
        }
    }
    #[doc = "Required features: `\"Microsoft_UI_Xaml_Media_Animation\"`"]
    #[cfg(feature = "Microsoft_UI_Xaml_Media_Animation")]
    pub fn SetGeneratedEasingFunction<P0>(&self, value: P0) -> ::windows_core::Result<()>
    where
        P0: ::windows_core::TryIntoParam<Media::Animation::EasingFunctionBase>,
    {
        let this = self;
        unsafe {
            (::windows_core::Interface::vtable(this).SetGeneratedEasingFunction)(
                ::windows_core::Interface::as_raw(this),
                value.try_into_param()?.abi(),
            )
            .ok()
        }
    }
    pub fn To(&self) -> ::windows_core::Result<::windows_core::HSTRING> {
        let this = self;
        unsafe {
            let mut result__ = ::std::mem::zeroed();
            (::windows_core::Interface::vtable(this).To)(
                ::windows_core::Interface::as_raw(this),
                &mut result__,
            )
            .from_abi(result__)
        }
    }
    pub fn SetTo(&self, value: &::windows_core::HSTRING) -> ::windows_core::Result<()> {
        let this = self;
        unsafe {
            (::windows_core::Interface::vtable(this).SetTo)(
                ::windows_core::Interface::as_raw(this),
                ::core::mem::transmute_copy(value),
            )
            .ok()
        }
    }
    pub fn From(&self) -> ::windows_core::Result<::windows_core::HSTRING> {
        let this = self;
        unsafe {
            let mut result__ = ::std::mem::zeroed();
            (::windows_core::Interface::vtable(this).From)(
                ::windows_core::Interface::as_raw(this),
                &mut result__,
            )
            .from_abi(result__)
        }
    }
    pub fn SetFrom(&self, value: &::windows_core::HSTRING) -> ::windows_core::Result<()> {
        let this = self;
        unsafe {
            (::windows_core::Interface::vtable(this).SetFrom)(
                ::windows_core::Interface::as_raw(this),
                ::core::mem::transmute_copy(value),
            )
            .ok()
        }
    }
    #[doc = "Required features: `\"Microsoft_UI_Xaml_Media_Animation\"`"]
    #[cfg(feature = "Microsoft_UI_Xaml_Media_Animation")]
    pub fn Storyboard(&self) -> ::windows_core::Result<Media::Animation::Storyboard> {
        let this = self;
        unsafe {
            let mut result__ = ::std::mem::zeroed();
            (::windows_core::Interface::vtable(this).Storyboard)(
                ::windows_core::Interface::as_raw(this),
                &mut result__,
            )
            .from_abi(result__)
        }
    }
    #[doc = "Required features: `\"Microsoft_UI_Xaml_Media_Animation\"`"]
    #[cfg(feature = "Microsoft_UI_Xaml_Media_Animation")]
    pub fn SetStoryboard<P0>(&self, value: P0) -> ::windows_core::Result<()>
    where
        P0: ::windows_core::IntoParam<Media::Animation::Storyboard>,
    {
        let this = self;
        unsafe {
            (::windows_core::Interface::vtable(this).SetStoryboard)(
                ::windows_core::Interface::as_raw(this),
                value.into_param().abi(),
            )
            .ok()
        }
    }
    pub unsafe fn CreateInstance<P0>(
        baseinterface: P0,
        innerinterface: &mut ::core::option::Option<::windows_core::IInspectable>,
    ) -> ::windows_core::Result<VisualTransition>
    where
        P0: ::windows_core::IntoParam<::windows_core::IInspectable>,
    {
        Self::IVisualTransitionFactory(|this| unsafe {
            let mut result__ = ::std::mem::zeroed();
            (::windows_core::Interface::vtable(this).CreateInstance)(
                ::windows_core::Interface::as_raw(this),
                baseinterface.into_param().abi(),
                innerinterface as *mut _ as _,
                &mut result__,
            )
            .from_abi(result__)
        })
    }
    #[doc(hidden)]
    pub fn IVisualTransitionFactory<
        R,
        F: FnOnce(&IVisualTransitionFactory) -> ::windows_core::Result<R>,
    >(
        callback: F,
    ) -> ::windows_core::Result<R> {
        static SHARED: ::windows_core::imp::FactoryCache<
            VisualTransition,
            IVisualTransitionFactory,
        > = ::windows_core::imp::FactoryCache::new();
        SHARED.call(callback)
    }
}
impl ::windows_core::RuntimeType for VisualTransition {
    const SIGNATURE: ::windows_core::imp::ConstBuffer =
        ::windows_core::imp::ConstBuffer::for_class::<Self>();
}
unsafe impl ::windows_core::Interface for VisualTransition {
    type Vtable = IVisualTransition_Vtbl;
}
unsafe impl ::windows_core::ComInterface for VisualTransition {
    const IID: ::windows_core::GUID = <IVisualTransition as ::windows_core::ComInterface>::IID;
}
impl ::windows_core::RuntimeName for VisualTransition {
    const NAME: &'static str = "Microsoft.UI.Xaml.VisualTransition";
}
::windows_core::imp::interface_hierarchy!(
    VisualTransition,
    ::windows_core::IUnknown,
    ::windows_core::IInspectable
);
impl ::windows_core::CanTryInto<DependencyObject> for VisualTransition {}
unsafe impl ::core::marker::Send for VisualTransition {}
unsafe impl ::core::marker::Sync for VisualTransition {}
#[repr(transparent)]
#[derive(::core::cmp::PartialEq, ::core::cmp::Eq, ::core::fmt::Debug, ::core::clone::Clone)]
pub struct Window(::windows_core::IUnknown);
impl Window {
    #[doc = "Required features: `\"Windows_Foundation\"`"]
    #[cfg(feature = "Windows_Foundation")]
    pub fn Bounds(&self) -> ::windows_core::Result<::windows::Foundation::Rect> {
        let this = self;
        unsafe {
            let mut result__ = ::std::mem::zeroed();
            (::windows_core::Interface::vtable(this).Bounds)(
                ::windows_core::Interface::as_raw(this),
                &mut result__,
            )
            .from_abi(result__)
        }
    }
    pub fn Visible(&self) -> ::windows_core::Result<bool> {
        let this = self;
        unsafe {
            let mut result__ = ::std::mem::zeroed();
            (::windows_core::Interface::vtable(this).Visible)(
                ::windows_core::Interface::as_raw(this),
                &mut result__,
            )
            .from_abi(result__)
        }
    }
    pub fn Content(&self) -> ::windows_core::Result<UIElement> {
        let this = self;
        unsafe {
            let mut result__ = ::std::mem::zeroed();
            (::windows_core::Interface::vtable(this).Content)(
                ::windows_core::Interface::as_raw(this),
                &mut result__,
            )
            .from_abi(result__)
        }
    }
    pub fn SetContent<P0>(&self, value: P0) -> ::windows_core::Result<()>
    where
        P0: ::windows_core::TryIntoParam<UIElement>,
    {
        let this = self;
        unsafe {
            (::windows_core::Interface::vtable(this).SetContent)(
                ::windows_core::Interface::as_raw(this),
                value.try_into_param()?.abi(),
            )
            .ok()
        }
    }
    #[doc = "Required features: `\"Windows_UI_Core\"`, `\"deprecated\"`"]
    #[cfg(all(feature = "Windows_UI_Core", feature = "deprecated"))]
    pub fn CoreWindow(&self) -> ::windows_core::Result<::windows::UI::Core::CoreWindow> {
        let this = self;
        unsafe {
            let mut result__ = ::std::mem::zeroed();
            (::windows_core::Interface::vtable(this).CoreWindow)(
                ::windows_core::Interface::as_raw(this),
                &mut result__,
            )
            .from_abi(result__)
        }
    }
    #[doc = "Required features: `\"Microsoft_UI_Composition\"`"]
    #[cfg(feature = "Microsoft_UI_Composition")]
    pub fn Compositor(&self) -> ::windows_core::Result<super::Composition::Compositor> {
        let this = self;
        unsafe {
            let mut result__ = ::std::mem::zeroed();
            (::windows_core::Interface::vtable(this).Compositor)(
                ::windows_core::Interface::as_raw(this),
                &mut result__,
            )
            .from_abi(result__)
        }
    }
    #[doc = "Required features: `\"Windows_UI_Core\"`, `\"deprecated\"`"]
    #[cfg(all(feature = "Windows_UI_Core", feature = "deprecated"))]
    pub fn Dispatcher(&self) -> ::windows_core::Result<::windows::UI::Core::CoreDispatcher> {
        let this = self;
        unsafe {
            let mut result__ = ::std::mem::zeroed();
            (::windows_core::Interface::vtable(this).Dispatcher)(
                ::windows_core::Interface::as_raw(this),
                &mut result__,
            )
            .from_abi(result__)
        }
    }
    #[doc = "Required features: `\"Microsoft_UI_Dispatching\"`"]
    #[cfg(feature = "Microsoft_UI_Dispatching")]
    pub fn DispatcherQueue(&self) -> ::windows_core::Result<super::Dispatching::DispatcherQueue> {
        let this = self;
        unsafe {
            let mut result__ = ::std::mem::zeroed();
            (::windows_core::Interface::vtable(this).DispatcherQueue)(
                ::windows_core::Interface::as_raw(this),
                &mut result__,
            )
            .from_abi(result__)
        }
    }
    pub fn Title(&self) -> ::windows_core::Result<::windows_core::HSTRING> {
        let this = self;
        unsafe {
            let mut result__ = ::std::mem::zeroed();
            (::windows_core::Interface::vtable(this).Title)(
                ::windows_core::Interface::as_raw(this),
                &mut result__,
            )
            .from_abi(result__)
        }
    }
    pub fn SetTitle(&self, value: &::windows_core::HSTRING) -> ::windows_core::Result<()> {
        let this = self;
        unsafe {
            (::windows_core::Interface::vtable(this).SetTitle)(
                ::windows_core::Interface::as_raw(this),
                ::core::mem::transmute_copy(value),
            )
            .ok()
        }
    }
    pub fn ExtendsContentIntoTitleBar(&self) -> ::windows_core::Result<bool> {
        let this = self;
        unsafe {
            let mut result__ = ::std::mem::zeroed();
            (::windows_core::Interface::vtable(this).ExtendsContentIntoTitleBar)(
                ::windows_core::Interface::as_raw(this),
                &mut result__,
            )
            .from_abi(result__)
        }
    }
    pub fn SetExtendsContentIntoTitleBar(&self, value: bool) -> ::windows_core::Result<()> {
        let this = self;
        unsafe {
            (::windows_core::Interface::vtable(this).SetExtendsContentIntoTitleBar)(
                ::windows_core::Interface::as_raw(this),
                value,
            )
            .ok()
        }
    }
    #[doc = "Required features: `\"Windows_Foundation\"`"]
    #[cfg(feature = "Windows_Foundation")]
    pub fn Activated<P0>(
        &self,
        handler: P0,
    ) -> ::windows_core::Result<::windows::Foundation::EventRegistrationToken>
    where
        P0: ::windows_core::IntoParam<
            ::windows::Foundation::TypedEventHandler<
                ::windows_core::IInspectable,
                WindowActivatedEventArgs,
            >,
        >,
    {
        let this = self;
        unsafe {
            let mut result__ = ::std::mem::zeroed();
            (::windows_core::Interface::vtable(this).Activated)(
                ::windows_core::Interface::as_raw(this),
                handler.into_param().abi(),
                &mut result__,
            )
            .from_abi(result__)
        }
    }
    #[doc = "Required features: `\"Windows_Foundation\"`"]
    #[cfg(feature = "Windows_Foundation")]
    pub fn RemoveActivated(
        &self,
        token: ::windows::Foundation::EventRegistrationToken,
    ) -> ::windows_core::Result<()> {
        let this = self;
        unsafe {
            (::windows_core::Interface::vtable(this).RemoveActivated)(
                ::windows_core::Interface::as_raw(this),
                token,
            )
            .ok()
        }
    }
    #[doc = "Required features: `\"Windows_Foundation\"`"]
    #[cfg(feature = "Windows_Foundation")]
    pub fn Closed<P0>(
        &self,
        handler: P0,
    ) -> ::windows_core::Result<::windows::Foundation::EventRegistrationToken>
    where
        P0: ::windows_core::IntoParam<
            ::windows::Foundation::TypedEventHandler<::windows_core::IInspectable, WindowEventArgs>,
        >,
    {
        let this = self;
        unsafe {
            let mut result__ = ::std::mem::zeroed();
            (::windows_core::Interface::vtable(this).Closed)(
                ::windows_core::Interface::as_raw(this),
                handler.into_param().abi(),
                &mut result__,
            )
            .from_abi(result__)
        }
    }
    #[doc = "Required features: `\"Windows_Foundation\"`"]
    #[cfg(feature = "Windows_Foundation")]
    pub fn RemoveClosed(
        &self,
        token: ::windows::Foundation::EventRegistrationToken,
    ) -> ::windows_core::Result<()> {
        let this = self;
        unsafe {
            (::windows_core::Interface::vtable(this).RemoveClosed)(
                ::windows_core::Interface::as_raw(this),
                token,
            )
            .ok()
        }
    }
    #[doc = "Required features: `\"Windows_Foundation\"`"]
    #[cfg(feature = "Windows_Foundation")]
    pub fn SizeChanged<P0>(
        &self,
        handler: P0,
    ) -> ::windows_core::Result<::windows::Foundation::EventRegistrationToken>
    where
        P0: ::windows_core::IntoParam<
            ::windows::Foundation::TypedEventHandler<
                ::windows_core::IInspectable,
                WindowSizeChangedEventArgs,
            >,
        >,
    {
        let this = self;
        unsafe {
            let mut result__ = ::std::mem::zeroed();
            (::windows_core::Interface::vtable(this).SizeChanged)(
                ::windows_core::Interface::as_raw(this),
                handler.into_param().abi(),
                &mut result__,
            )
            .from_abi(result__)
        }
    }
    #[doc = "Required features: `\"Windows_Foundation\"`"]
    #[cfg(feature = "Windows_Foundation")]
    pub fn RemoveSizeChanged(
        &self,
        token: ::windows::Foundation::EventRegistrationToken,
    ) -> ::windows_core::Result<()> {
        let this = self;
        unsafe {
            (::windows_core::Interface::vtable(this).RemoveSizeChanged)(
                ::windows_core::Interface::as_raw(this),
                token,
            )
            .ok()
        }
    }
    #[doc = "Required features: `\"Windows_Foundation\"`"]
    #[cfg(feature = "Windows_Foundation")]
    pub fn VisibilityChanged<P0>(
        &self,
        handler: P0,
    ) -> ::windows_core::Result<::windows::Foundation::EventRegistrationToken>
    where
        P0: ::windows_core::IntoParam<
            ::windows::Foundation::TypedEventHandler<
                ::windows_core::IInspectable,
                WindowVisibilityChangedEventArgs,
            >,
        >,
    {
        let this = self;
        unsafe {
            let mut result__ = ::std::mem::zeroed();
            (::windows_core::Interface::vtable(this).VisibilityChanged)(
                ::windows_core::Interface::as_raw(this),
                handler.into_param().abi(),
                &mut result__,
            )
            .from_abi(result__)
        }
    }
    #[doc = "Required features: `\"Windows_Foundation\"`"]
    #[cfg(feature = "Windows_Foundation")]
    pub fn RemoveVisibilityChanged(
        &self,
        token: ::windows::Foundation::EventRegistrationToken,
    ) -> ::windows_core::Result<()> {
        let this = self;
        unsafe {
            (::windows_core::Interface::vtable(this).RemoveVisibilityChanged)(
                ::windows_core::Interface::as_raw(this),
                token,
            )
            .ok()
        }
    }
    pub fn Activate(&self) -> ::windows_core::Result<()> {
        let this = self;
        unsafe {
            (::windows_core::Interface::vtable(this).Activate)(::windows_core::Interface::as_raw(
                this,
            ))
            .ok()
        }
    }
    pub fn Close(&self) -> ::windows_core::Result<()> {
        let this = self;
        unsafe {
            (::windows_core::Interface::vtable(this).Close)(::windows_core::Interface::as_raw(this))
                .ok()
        }
    }
    pub fn SetTitleBar<P0>(&self, titlebar: P0) -> ::windows_core::Result<()>
    where
        P0: ::windows_core::TryIntoParam<UIElement>,
    {
        let this = self;
        unsafe {
            (::windows_core::Interface::vtable(this).SetTitleBar)(
                ::windows_core::Interface::as_raw(this),
                titlebar.try_into_param()?.abi(),
            )
            .ok()
        }
    }
    #[doc = "Required features: `\"Microsoft_UI_Xaml_Media\"`"]
    #[cfg(feature = "Microsoft_UI_Xaml_Media")]
    pub fn SystemBackdrop(&self) -> ::windows_core::Result<Media::SystemBackdrop> {
        let this = &::windows_core::ComInterface::cast::<IWindow2>(self)?;
        unsafe {
            let mut result__ = ::std::mem::zeroed();
            (::windows_core::Interface::vtable(this).SystemBackdrop)(
                ::windows_core::Interface::as_raw(this),
                &mut result__,
            )
            .from_abi(result__)
        }
    }
    #[doc = "Required features: `\"Microsoft_UI_Xaml_Media\"`"]
    #[cfg(feature = "Microsoft_UI_Xaml_Media")]
    pub fn SetSystemBackdrop<P0>(&self, value: P0) -> ::windows_core::Result<()>
    where
        P0: ::windows_core::TryIntoParam<Media::SystemBackdrop>,
    {
        let this = &::windows_core::ComInterface::cast::<IWindow2>(self)?;
        unsafe {
            (::windows_core::Interface::vtable(this).SetSystemBackdrop)(
                ::windows_core::Interface::as_raw(this),
                value.try_into_param()?.abi(),
            )
            .ok()
        }
    }
    #[doc = "Required features: `\"Microsoft_UI_Windowing\"`"]
    #[cfg(feature = "Microsoft_UI_Windowing")]
    pub fn AppWindow(&self) -> ::windows_core::Result<super::Windowing::AppWindow> {
        let this = &::windows_core::ComInterface::cast::<IWindow2>(self)?;
        unsafe {
            let mut result__ = ::std::mem::zeroed();
            (::windows_core::Interface::vtable(this).AppWindow)(
                ::windows_core::Interface::as_raw(this),
                &mut result__,
            )
            .from_abi(result__)
        }
    }
    pub unsafe fn CreateInstance<P0>(
        baseinterface: P0,
        innerinterface: &mut ::core::option::Option<::windows_core::IInspectable>,
    ) -> ::windows_core::Result<Window>
    where
        P0: ::windows_core::IntoParam<::windows_core::IInspectable>,
    {
        Self::IWindowFactory(|this| unsafe {
            let mut result__ = ::std::mem::zeroed();
            (::windows_core::Interface::vtable(this).CreateInstance)(
                ::windows_core::Interface::as_raw(this),
                baseinterface.into_param().abi(),
                innerinterface as *mut _ as _,
                &mut result__,
            )
            .from_abi(result__)
        })
    }
    pub fn Current() -> ::windows_core::Result<Window> {
        Self::IWindowStatics(|this| unsafe {
            let mut result__ = ::std::mem::zeroed();
            (::windows_core::Interface::vtable(this).Current)(
                ::windows_core::Interface::as_raw(this),
                &mut result__,
            )
            .from_abi(result__)
        })
    }
    #[doc(hidden)]
    pub fn IWindowFactory<R, F: FnOnce(&IWindowFactory) -> ::windows_core::Result<R>>(
        callback: F,
    ) -> ::windows_core::Result<R> {
        static SHARED: ::windows_core::imp::FactoryCache<Window, IWindowFactory> =
            ::windows_core::imp::FactoryCache::new();
        SHARED.call(callback)
    }
    #[doc(hidden)]
    pub fn IWindowStatics<R, F: FnOnce(&IWindowStatics) -> ::windows_core::Result<R>>(
        callback: F,
    ) -> ::windows_core::Result<R> {
        static SHARED: ::windows_core::imp::FactoryCache<Window, IWindowStatics> =
            ::windows_core::imp::FactoryCache::new();
        SHARED.call(callback)
    }
}
impl ::windows_core::RuntimeType for Window {
    const SIGNATURE: ::windows_core::imp::ConstBuffer =
        ::windows_core::imp::ConstBuffer::for_class::<Self>();
}
unsafe impl ::windows_core::Interface for Window {
    type Vtable = IWindow_Vtbl;
}
unsafe impl ::windows_core::ComInterface for Window {
    const IID: ::windows_core::GUID = <IWindow as ::windows_core::ComInterface>::IID;
}
impl ::windows_core::RuntimeName for Window {
    const NAME: &'static str = "Microsoft.UI.Xaml.Window";
}
::windows_core::imp::interface_hierarchy!(
    Window,
    ::windows_core::IUnknown,
    ::windows_core::IInspectable
);
unsafe impl ::core::marker::Send for Window {}
unsafe impl ::core::marker::Sync for Window {}
#[repr(transparent)]
#[derive(::core::cmp::PartialEq, ::core::cmp::Eq, ::core::fmt::Debug, ::core::clone::Clone)]
pub struct WindowActivatedEventArgs(::windows_core::IUnknown);
impl WindowActivatedEventArgs {
    pub fn Handled(&self) -> ::windows_core::Result<bool> {
        let this = self;
        unsafe {
            let mut result__ = ::std::mem::zeroed();
            (::windows_core::Interface::vtable(this).Handled)(
                ::windows_core::Interface::as_raw(this),
                &mut result__,
            )
            .from_abi(result__)
        }
    }
    pub fn SetHandled(&self, value: bool) -> ::windows_core::Result<()> {
        let this = self;
        unsafe {
            (::windows_core::Interface::vtable(this).SetHandled)(
                ::windows_core::Interface::as_raw(this),
                value,
            )
            .ok()
        }
    }
    pub fn WindowActivationState(&self) -> ::windows_core::Result<WindowActivationState> {
        let this = self;
        unsafe {
            let mut result__ = ::std::mem::zeroed();
            (::windows_core::Interface::vtable(this).WindowActivationState)(
                ::windows_core::Interface::as_raw(this),
                &mut result__,
            )
            .from_abi(result__)
        }
    }
}
impl ::windows_core::RuntimeType for WindowActivatedEventArgs {
    const SIGNATURE: ::windows_core::imp::ConstBuffer =
        ::windows_core::imp::ConstBuffer::for_class::<Self>();
}
unsafe impl ::windows_core::Interface for WindowActivatedEventArgs {
    type Vtable = IWindowActivatedEventArgs_Vtbl;
}
unsafe impl ::windows_core::ComInterface for WindowActivatedEventArgs {
    const IID: ::windows_core::GUID =
        <IWindowActivatedEventArgs as ::windows_core::ComInterface>::IID;
}
impl ::windows_core::RuntimeName for WindowActivatedEventArgs {
    const NAME: &'static str = "Microsoft.UI.Xaml.WindowActivatedEventArgs";
}
::windows_core::imp::interface_hierarchy!(
    WindowActivatedEventArgs,
    ::windows_core::IUnknown,
    ::windows_core::IInspectable
);
unsafe impl ::core::marker::Send for WindowActivatedEventArgs {}
unsafe impl ::core::marker::Sync for WindowActivatedEventArgs {}
#[repr(transparent)]
#[derive(::core::cmp::PartialEq, ::core::cmp::Eq, ::core::fmt::Debug, ::core::clone::Clone)]
pub struct WindowEventArgs(::windows_core::IUnknown);
impl WindowEventArgs {
    pub fn Handled(&self) -> ::windows_core::Result<bool> {
        let this = self;
        unsafe {
            let mut result__ = ::std::mem::zeroed();
            (::windows_core::Interface::vtable(this).Handled)(
                ::windows_core::Interface::as_raw(this),
                &mut result__,
            )
            .from_abi(result__)
        }
    }
    pub fn SetHandled(&self, value: bool) -> ::windows_core::Result<()> {
        let this = self;
        unsafe {
            (::windows_core::Interface::vtable(this).SetHandled)(
                ::windows_core::Interface::as_raw(this),
                value,
            )
            .ok()
        }
    }
}
impl ::windows_core::RuntimeType for WindowEventArgs {
    const SIGNATURE: ::windows_core::imp::ConstBuffer =
        ::windows_core::imp::ConstBuffer::for_class::<Self>();
}
unsafe impl ::windows_core::Interface for WindowEventArgs {
    type Vtable = IWindowEventArgs_Vtbl;
}
unsafe impl ::windows_core::ComInterface for WindowEventArgs {
    const IID: ::windows_core::GUID = <IWindowEventArgs as ::windows_core::ComInterface>::IID;
}
impl ::windows_core::RuntimeName for WindowEventArgs {
    const NAME: &'static str = "Microsoft.UI.Xaml.WindowEventArgs";
}
::windows_core::imp::interface_hierarchy!(
    WindowEventArgs,
    ::windows_core::IUnknown,
    ::windows_core::IInspectable
);
unsafe impl ::core::marker::Send for WindowEventArgs {}
unsafe impl ::core::marker::Sync for WindowEventArgs {}
#[repr(transparent)]
#[derive(::core::cmp::PartialEq, ::core::cmp::Eq, ::core::fmt::Debug, ::core::clone::Clone)]
pub struct WindowSizeChangedEventArgs(::windows_core::IUnknown);
impl WindowSizeChangedEventArgs {
    pub fn Handled(&self) -> ::windows_core::Result<bool> {
        let this = self;
        unsafe {
            let mut result__ = ::std::mem::zeroed();
            (::windows_core::Interface::vtable(this).Handled)(
                ::windows_core::Interface::as_raw(this),
                &mut result__,
            )
            .from_abi(result__)
        }
    }
    pub fn SetHandled(&self, value: bool) -> ::windows_core::Result<()> {
        let this = self;
        unsafe {
            (::windows_core::Interface::vtable(this).SetHandled)(
                ::windows_core::Interface::as_raw(this),
                value,
            )
            .ok()
        }
    }
    #[doc = "Required features: `\"Windows_Foundation\"`"]
    #[cfg(feature = "Windows_Foundation")]
    pub fn Size(&self) -> ::windows_core::Result<::windows::Foundation::Size> {
        let this = self;
        unsafe {
            let mut result__ = ::std::mem::zeroed();
            (::windows_core::Interface::vtable(this).Size)(
                ::windows_core::Interface::as_raw(this),
                &mut result__,
            )
            .from_abi(result__)
        }
    }
}
impl ::windows_core::RuntimeType for WindowSizeChangedEventArgs {
    const SIGNATURE: ::windows_core::imp::ConstBuffer =
        ::windows_core::imp::ConstBuffer::for_class::<Self>();
}
unsafe impl ::windows_core::Interface for WindowSizeChangedEventArgs {
    type Vtable = IWindowSizeChangedEventArgs_Vtbl;
}
unsafe impl ::windows_core::ComInterface for WindowSizeChangedEventArgs {
    const IID: ::windows_core::GUID =
        <IWindowSizeChangedEventArgs as ::windows_core::ComInterface>::IID;
}
impl ::windows_core::RuntimeName for WindowSizeChangedEventArgs {
    const NAME: &'static str = "Microsoft.UI.Xaml.WindowSizeChangedEventArgs";
}
::windows_core::imp::interface_hierarchy!(
    WindowSizeChangedEventArgs,
    ::windows_core::IUnknown,
    ::windows_core::IInspectable
);
unsafe impl ::core::marker::Send for WindowSizeChangedEventArgs {}
unsafe impl ::core::marker::Sync for WindowSizeChangedEventArgs {}
#[repr(transparent)]
#[derive(::core::cmp::PartialEq, ::core::cmp::Eq, ::core::fmt::Debug, ::core::clone::Clone)]
pub struct WindowVisibilityChangedEventArgs(::windows_core::IUnknown);
impl WindowVisibilityChangedEventArgs {
    pub fn Handled(&self) -> ::windows_core::Result<bool> {
        let this = self;
        unsafe {
            let mut result__ = ::std::mem::zeroed();
            (::windows_core::Interface::vtable(this).Handled)(
                ::windows_core::Interface::as_raw(this),
                &mut result__,
            )
            .from_abi(result__)
        }
    }
    pub fn SetHandled(&self, value: bool) -> ::windows_core::Result<()> {
        let this = self;
        unsafe {
            (::windows_core::Interface::vtable(this).SetHandled)(
                ::windows_core::Interface::as_raw(this),
                value,
            )
            .ok()
        }
    }
    pub fn Visible(&self) -> ::windows_core::Result<bool> {
        let this = self;
        unsafe {
            let mut result__ = ::std::mem::zeroed();
            (::windows_core::Interface::vtable(this).Visible)(
                ::windows_core::Interface::as_raw(this),
                &mut result__,
            )
            .from_abi(result__)
        }
    }
}
impl ::windows_core::RuntimeType for WindowVisibilityChangedEventArgs {
    const SIGNATURE: ::windows_core::imp::ConstBuffer =
        ::windows_core::imp::ConstBuffer::for_class::<Self>();
}
unsafe impl ::windows_core::Interface for WindowVisibilityChangedEventArgs {
    type Vtable = IWindowVisibilityChangedEventArgs_Vtbl;
}
unsafe impl ::windows_core::ComInterface for WindowVisibilityChangedEventArgs {
    const IID: ::windows_core::GUID =
        <IWindowVisibilityChangedEventArgs as ::windows_core::ComInterface>::IID;
}
impl ::windows_core::RuntimeName for WindowVisibilityChangedEventArgs {
    const NAME: &'static str = "Microsoft.UI.Xaml.WindowVisibilityChangedEventArgs";
}
::windows_core::imp::interface_hierarchy!(
    WindowVisibilityChangedEventArgs,
    ::windows_core::IUnknown,
    ::windows_core::IInspectable
);
unsafe impl ::core::marker::Send for WindowVisibilityChangedEventArgs {}
unsafe impl ::core::marker::Sync for WindowVisibilityChangedEventArgs {}
#[repr(transparent)]
#[derive(::core::cmp::PartialEq, ::core::cmp::Eq, ::core::fmt::Debug, ::core::clone::Clone)]
pub struct XamlResourceReferenceFailedEventArgs(::windows_core::IUnknown);
impl XamlResourceReferenceFailedEventArgs {
    pub fn Message(&self) -> ::windows_core::Result<::windows_core::HSTRING> {
        let this = self;
        unsafe {
            let mut result__ = ::std::mem::zeroed();
            (::windows_core::Interface::vtable(this).Message)(
                ::windows_core::Interface::as_raw(this),
                &mut result__,
            )
            .from_abi(result__)
        }
    }
}
impl ::windows_core::RuntimeType for XamlResourceReferenceFailedEventArgs {
    const SIGNATURE: ::windows_core::imp::ConstBuffer =
        ::windows_core::imp::ConstBuffer::for_class::<Self>();
}
unsafe impl ::windows_core::Interface for XamlResourceReferenceFailedEventArgs {
    type Vtable = IXamlResourceReferenceFailedEventArgs_Vtbl;
}
unsafe impl ::windows_core::ComInterface for XamlResourceReferenceFailedEventArgs {
    const IID: ::windows_core::GUID =
        <IXamlResourceReferenceFailedEventArgs as ::windows_core::ComInterface>::IID;
}
impl ::windows_core::RuntimeName for XamlResourceReferenceFailedEventArgs {
    const NAME: &'static str = "Microsoft.UI.Xaml.XamlResourceReferenceFailedEventArgs";
}
::windows_core::imp::interface_hierarchy!(
    XamlResourceReferenceFailedEventArgs,
    ::windows_core::IUnknown,
    ::windows_core::IInspectable
);
unsafe impl ::core::marker::Send for XamlResourceReferenceFailedEventArgs {}
unsafe impl ::core::marker::Sync for XamlResourceReferenceFailedEventArgs {}
#[repr(transparent)]
#[derive(::core::cmp::PartialEq, ::core::cmp::Eq, ::core::fmt::Debug, ::core::clone::Clone)]
pub struct XamlRoot(::windows_core::IUnknown);
impl XamlRoot {
    pub fn Content(&self) -> ::windows_core::Result<UIElement> {
        let this = self;
        unsafe {
            let mut result__ = ::std::mem::zeroed();
            (::windows_core::Interface::vtable(this).Content)(
                ::windows_core::Interface::as_raw(this),
                &mut result__,
            )
            .from_abi(result__)
        }
    }
    #[doc = "Required features: `\"Windows_Foundation\"`"]
    #[cfg(feature = "Windows_Foundation")]
    pub fn Size(&self) -> ::windows_core::Result<::windows::Foundation::Size> {
        let this = self;
        unsafe {
            let mut result__ = ::std::mem::zeroed();
            (::windows_core::Interface::vtable(this).Size)(
                ::windows_core::Interface::as_raw(this),
                &mut result__,
            )
            .from_abi(result__)
        }
    }
    pub fn RasterizationScale(&self) -> ::windows_core::Result<f64> {
        let this = self;
        unsafe {
            let mut result__ = ::std::mem::zeroed();
            (::windows_core::Interface::vtable(this).RasterizationScale)(
                ::windows_core::Interface::as_raw(this),
                &mut result__,
            )
            .from_abi(result__)
        }
    }
    pub fn IsHostVisible(&self) -> ::windows_core::Result<bool> {
        let this = self;
        unsafe {
            let mut result__ = ::std::mem::zeroed();
            (::windows_core::Interface::vtable(this).IsHostVisible)(
                ::windows_core::Interface::as_raw(this),
                &mut result__,
            )
            .from_abi(result__)
        }
    }
    #[doc = "Required features: `\"Windows_Foundation\"`"]
    #[cfg(feature = "Windows_Foundation")]
    pub fn Changed<P0>(
        &self,
        handler: P0,
    ) -> ::windows_core::Result<::windows::Foundation::EventRegistrationToken>
    where
        P0: ::windows_core::IntoParam<
            ::windows::Foundation::TypedEventHandler<XamlRoot, XamlRootChangedEventArgs>,
        >,
    {
        let this = self;
        unsafe {
            let mut result__ = ::std::mem::zeroed();
            (::windows_core::Interface::vtable(this).Changed)(
                ::windows_core::Interface::as_raw(this),
                handler.into_param().abi(),
                &mut result__,
            )
            .from_abi(result__)
        }
    }
    #[doc = "Required features: `\"Windows_Foundation\"`"]
    #[cfg(feature = "Windows_Foundation")]
    pub fn RemoveChanged(
        &self,
        token: ::windows::Foundation::EventRegistrationToken,
    ) -> ::windows_core::Result<()> {
        let this = self;
        unsafe {
            (::windows_core::Interface::vtable(this).RemoveChanged)(
                ::windows_core::Interface::as_raw(this),
                token,
            )
            .ok()
        }
    }
    #[doc = "Required features: `\"Microsoft_UI_Content\"`"]
    #[cfg(feature = "Microsoft_UI_Content")]
    pub fn ContentIslandEnvironment(
        &self,
    ) -> ::windows_core::Result<super::Content::ContentIslandEnvironment> {
        let this = &::windows_core::ComInterface::cast::<IXamlRoot2>(self)?;
        unsafe {
            let mut result__ = ::std::mem::zeroed();
            (::windows_core::Interface::vtable(this).ContentIslandEnvironment)(
                ::windows_core::Interface::as_raw(this),
                &mut result__,
            )
            .from_abi(result__)
        }
    }
}
impl ::windows_core::RuntimeType for XamlRoot {
    const SIGNATURE: ::windows_core::imp::ConstBuffer =
        ::windows_core::imp::ConstBuffer::for_class::<Self>();
}
unsafe impl ::windows_core::Interface for XamlRoot {
    type Vtable = IXamlRoot_Vtbl;
}
unsafe impl ::windows_core::ComInterface for XamlRoot {
    const IID: ::windows_core::GUID = <IXamlRoot as ::windows_core::ComInterface>::IID;
}
impl ::windows_core::RuntimeName for XamlRoot {
    const NAME: &'static str = "Microsoft.UI.Xaml.XamlRoot";
}
::windows_core::imp::interface_hierarchy!(
    XamlRoot,
    ::windows_core::IUnknown,
    ::windows_core::IInspectable
);
unsafe impl ::core::marker::Send for XamlRoot {}
unsafe impl ::core::marker::Sync for XamlRoot {}
#[repr(transparent)]
#[derive(::core::cmp::PartialEq, ::core::cmp::Eq, ::core::fmt::Debug, ::core::clone::Clone)]
pub struct XamlRootChangedEventArgs(::windows_core::IUnknown);
impl XamlRootChangedEventArgs {}
impl ::windows_core::RuntimeType for XamlRootChangedEventArgs {
    const SIGNATURE: ::windows_core::imp::ConstBuffer =
        ::windows_core::imp::ConstBuffer::for_class::<Self>();
}
unsafe impl ::windows_core::Interface for XamlRootChangedEventArgs {
    type Vtable = IXamlRootChangedEventArgs_Vtbl;
}
unsafe impl ::windows_core::ComInterface for XamlRootChangedEventArgs {
    const IID: ::windows_core::GUID =
        <IXamlRootChangedEventArgs as ::windows_core::ComInterface>::IID;
}
impl ::windows_core::RuntimeName for XamlRootChangedEventArgs {
    const NAME: &'static str = "Microsoft.UI.Xaml.XamlRootChangedEventArgs";
}
::windows_core::imp::interface_hierarchy!(
    XamlRootChangedEventArgs,
    ::windows_core::IUnknown,
    ::windows_core::IInspectable
);
unsafe impl ::core::marker::Send for XamlRootChangedEventArgs {}
unsafe impl ::core::marker::Sync for XamlRootChangedEventArgs {}
#[repr(transparent)]
#[derive(::core::cmp::PartialEq, ::core::cmp::Eq)]
pub struct ApplicationHighContrastAdjustment(pub u32);
impl ApplicationHighContrastAdjustment {
    pub const None: Self = Self(0u32);
    pub const Auto: Self = Self(4294967295u32);
}
impl ::core::marker::Copy for ApplicationHighContrastAdjustment {}
impl ::core::clone::Clone for ApplicationHighContrastAdjustment {
    fn clone(&self) -> Self {
        *self
    }
}
impl ::core::default::Default for ApplicationHighContrastAdjustment {
    fn default() -> Self {
        Self(0)
    }
}
impl ::windows_core::TypeKind for ApplicationHighContrastAdjustment {
    type TypeKind = ::windows_core::CopyType;
}
impl ::core::fmt::Debug for ApplicationHighContrastAdjustment {
    fn fmt(&self, f: &mut ::core::fmt::Formatter<'_>) -> ::core::fmt::Result {
        f.debug_tuple("ApplicationHighContrastAdjustment").field(&self.0).finish()
    }
}
impl ApplicationHighContrastAdjustment {
    pub const fn contains(&self, other: Self) -> bool {
        self.0 & other.0 == other.0
    }
}
impl ::core::ops::BitOr for ApplicationHighContrastAdjustment {
    type Output = Self;
    fn bitor(self, other: Self) -> Self {
        Self(self.0 | other.0)
    }
}
impl ::core::ops::BitAnd for ApplicationHighContrastAdjustment {
    type Output = Self;
    fn bitand(self, other: Self) -> Self {
        Self(self.0 & other.0)
    }
}
impl ::core::ops::BitOrAssign for ApplicationHighContrastAdjustment {
    fn bitor_assign(&mut self, other: Self) {
        self.0.bitor_assign(other.0)
    }
}
impl ::core::ops::BitAndAssign for ApplicationHighContrastAdjustment {
    fn bitand_assign(&mut self, other: Self) {
        self.0.bitand_assign(other.0)
    }
}
impl ::core::ops::Not for ApplicationHighContrastAdjustment {
    type Output = Self;
    fn not(self) -> Self {
        Self(self.0.not())
    }
}
impl ::windows_core::RuntimeType for ApplicationHighContrastAdjustment {
    const SIGNATURE: ::windows_core::imp::ConstBuffer =
        ::windows_core::imp::ConstBuffer::from_slice(
            b"enum(Microsoft.UI.Xaml.ApplicationHighContrastAdjustment;u4)",
        );
}
#[repr(transparent)]
#[derive(::core::cmp::PartialEq, ::core::cmp::Eq)]
pub struct ApplicationRequiresPointerMode(pub i32);
impl ApplicationRequiresPointerMode {
    pub const Auto: Self = Self(0i32);
    pub const WhenRequested: Self = Self(1i32);
}
impl ::core::marker::Copy for ApplicationRequiresPointerMode {}
impl ::core::clone::Clone for ApplicationRequiresPointerMode {
    fn clone(&self) -> Self {
        *self
    }
}
impl ::core::default::Default for ApplicationRequiresPointerMode {
    fn default() -> Self {
        Self(0)
    }
}
impl ::windows_core::TypeKind for ApplicationRequiresPointerMode {
    type TypeKind = ::windows_core::CopyType;
}
impl ::core::fmt::Debug for ApplicationRequiresPointerMode {
    fn fmt(&self, f: &mut ::core::fmt::Formatter<'_>) -> ::core::fmt::Result {
        f.debug_tuple("ApplicationRequiresPointerMode").field(&self.0).finish()
    }
}
impl ::windows_core::RuntimeType for ApplicationRequiresPointerMode {
    const SIGNATURE: ::windows_core::imp::ConstBuffer =
        ::windows_core::imp::ConstBuffer::from_slice(
            b"enum(Microsoft.UI.Xaml.ApplicationRequiresPointerMode;i4)",
        );
}
#[repr(transparent)]
#[derive(::core::cmp::PartialEq, ::core::cmp::Eq)]
pub struct ApplicationTheme(pub i32);
impl ApplicationTheme {
    pub const Light: Self = Self(0i32);
    pub const Dark: Self = Self(1i32);
}
impl ::core::marker::Copy for ApplicationTheme {}
impl ::core::clone::Clone for ApplicationTheme {
    fn clone(&self) -> Self {
        *self
    }
}
impl ::core::default::Default for ApplicationTheme {
    fn default() -> Self {
        Self(0)
    }
}
impl ::windows_core::TypeKind for ApplicationTheme {
    type TypeKind = ::windows_core::CopyType;
}
impl ::core::fmt::Debug for ApplicationTheme {
    fn fmt(&self, f: &mut ::core::fmt::Formatter<'_>) -> ::core::fmt::Result {
        f.debug_tuple("ApplicationTheme").field(&self.0).finish()
    }
}
impl ::windows_core::RuntimeType for ApplicationTheme {
    const SIGNATURE: ::windows_core::imp::ConstBuffer =
        ::windows_core::imp::ConstBuffer::from_slice(
            b"enum(Microsoft.UI.Xaml.ApplicationTheme;i4)",
        );
}
#[repr(transparent)]
#[derive(::core::cmp::PartialEq, ::core::cmp::Eq)]
pub struct AutomationTextAttributesEnum(pub i32);
impl AutomationTextAttributesEnum {
    pub const AnimationStyleAttribute: Self = Self(40000i32);
    pub const BackgroundColorAttribute: Self = Self(40001i32);
    pub const BulletStyleAttribute: Self = Self(40002i32);
    pub const CapStyleAttribute: Self = Self(40003i32);
    pub const CultureAttribute: Self = Self(40004i32);
    pub const FontNameAttribute: Self = Self(40005i32);
    pub const FontSizeAttribute: Self = Self(40006i32);
    pub const FontWeightAttribute: Self = Self(40007i32);
    pub const ForegroundColorAttribute: Self = Self(40008i32);
    pub const HorizontalTextAlignmentAttribute: Self = Self(40009i32);
    pub const IndentationFirstLineAttribute: Self = Self(40010i32);
    pub const IndentationLeadingAttribute: Self = Self(40011i32);
    pub const IndentationTrailingAttribute: Self = Self(40012i32);
    pub const IsHiddenAttribute: Self = Self(40013i32);
    pub const IsItalicAttribute: Self = Self(40014i32);
    pub const IsReadOnlyAttribute: Self = Self(40015i32);
    pub const IsSubscriptAttribute: Self = Self(40016i32);
    pub const IsSuperscriptAttribute: Self = Self(40017i32);
    pub const MarginBottomAttribute: Self = Self(40018i32);
    pub const MarginLeadingAttribute: Self = Self(40019i32);
    pub const MarginTopAttribute: Self = Self(40020i32);
    pub const MarginTrailingAttribute: Self = Self(40021i32);
    pub const OutlineStylesAttribute: Self = Self(40022i32);
    pub const OverlineColorAttribute: Self = Self(40023i32);
    pub const OverlineStyleAttribute: Self = Self(40024i32);
    pub const StrikethroughColorAttribute: Self = Self(40025i32);
    pub const StrikethroughStyleAttribute: Self = Self(40026i32);
    pub const TabsAttribute: Self = Self(40027i32);
    pub const TextFlowDirectionsAttribute: Self = Self(40028i32);
    pub const UnderlineColorAttribute: Self = Self(40029i32);
    pub const UnderlineStyleAttribute: Self = Self(40030i32);
    pub const AnnotationTypesAttribute: Self = Self(40031i32);
    pub const AnnotationObjectsAttribute: Self = Self(40032i32);
    pub const StyleNameAttribute: Self = Self(40033i32);
    pub const StyleIdAttribute: Self = Self(40034i32);
    pub const LinkAttribute: Self = Self(40035i32);
    pub const IsActiveAttribute: Self = Self(40036i32);
    pub const SelectionActiveEndAttribute: Self = Self(40037i32);
    pub const CaretPositionAttribute: Self = Self(40038i32);
    pub const CaretBidiModeAttribute: Self = Self(40039i32);
}
impl ::core::marker::Copy for AutomationTextAttributesEnum {}
impl ::core::clone::Clone for AutomationTextAttributesEnum {
    fn clone(&self) -> Self {
        *self
    }
}
impl ::core::default::Default for AutomationTextAttributesEnum {
    fn default() -> Self {
        Self(0)
    }
}
impl ::windows_core::TypeKind for AutomationTextAttributesEnum {
    type TypeKind = ::windows_core::CopyType;
}
impl ::core::fmt::Debug for AutomationTextAttributesEnum {
    fn fmt(&self, f: &mut ::core::fmt::Formatter<'_>) -> ::core::fmt::Result {
        f.debug_tuple("AutomationTextAttributesEnum").field(&self.0).finish()
    }
}
impl ::windows_core::RuntimeType for AutomationTextAttributesEnum {
    const SIGNATURE: ::windows_core::imp::ConstBuffer =
        ::windows_core::imp::ConstBuffer::from_slice(
            b"enum(Microsoft.UI.Xaml.AutomationTextAttributesEnum;i4)",
        );
}
#[repr(transparent)]
#[derive(::core::cmp::PartialEq, ::core::cmp::Eq)]
pub struct DurationType(pub i32);
impl DurationType {
    pub const Automatic: Self = Self(0i32);
    pub const TimeSpan: Self = Self(1i32);
    pub const Forever: Self = Self(2i32);
}
impl ::core::marker::Copy for DurationType {}
impl ::core::clone::Clone for DurationType {
    fn clone(&self) -> Self {
        *self
    }
}
impl ::core::default::Default for DurationType {
    fn default() -> Self {
        Self(0)
    }
}
impl ::windows_core::TypeKind for DurationType {
    type TypeKind = ::windows_core::CopyType;
}
impl ::core::fmt::Debug for DurationType {
    fn fmt(&self, f: &mut ::core::fmt::Formatter<'_>) -> ::core::fmt::Result {
        f.debug_tuple("DurationType").field(&self.0).finish()
    }
}
impl ::windows_core::RuntimeType for DurationType {
    const SIGNATURE: ::windows_core::imp::ConstBuffer =
        ::windows_core::imp::ConstBuffer::from_slice(b"enum(Microsoft.UI.Xaml.DurationType;i4)");
}
#[repr(transparent)]
#[derive(::core::cmp::PartialEq, ::core::cmp::Eq)]
pub struct ElementHighContrastAdjustment(pub u32);
impl ElementHighContrastAdjustment {
    pub const None: Self = Self(0u32);
    pub const Application: Self = Self(2147483648u32);
    pub const Auto: Self = Self(4294967295u32);
}
impl ::core::marker::Copy for ElementHighContrastAdjustment {}
impl ::core::clone::Clone for ElementHighContrastAdjustment {
    fn clone(&self) -> Self {
        *self
    }
}
impl ::core::default::Default for ElementHighContrastAdjustment {
    fn default() -> Self {
        Self(0)
    }
}
impl ::windows_core::TypeKind for ElementHighContrastAdjustment {
    type TypeKind = ::windows_core::CopyType;
}
impl ::core::fmt::Debug for ElementHighContrastAdjustment {
    fn fmt(&self, f: &mut ::core::fmt::Formatter<'_>) -> ::core::fmt::Result {
        f.debug_tuple("ElementHighContrastAdjustment").field(&self.0).finish()
    }
}
impl ElementHighContrastAdjustment {
    pub const fn contains(&self, other: Self) -> bool {
        self.0 & other.0 == other.0
    }
}
impl ::core::ops::BitOr for ElementHighContrastAdjustment {
    type Output = Self;
    fn bitor(self, other: Self) -> Self {
        Self(self.0 | other.0)
    }
}
impl ::core::ops::BitAnd for ElementHighContrastAdjustment {
    type Output = Self;
    fn bitand(self, other: Self) -> Self {
        Self(self.0 & other.0)
    }
}
impl ::core::ops::BitOrAssign for ElementHighContrastAdjustment {
    fn bitor_assign(&mut self, other: Self) {
        self.0.bitor_assign(other.0)
    }
}
impl ::core::ops::BitAndAssign for ElementHighContrastAdjustment {
    fn bitand_assign(&mut self, other: Self) {
        self.0.bitand_assign(other.0)
    }
}
impl ::core::ops::Not for ElementHighContrastAdjustment {
    type Output = Self;
    fn not(self) -> Self {
        Self(self.0.not())
    }
}
impl ::windows_core::RuntimeType for ElementHighContrastAdjustment {
    const SIGNATURE: ::windows_core::imp::ConstBuffer =
        ::windows_core::imp::ConstBuffer::from_slice(
            b"enum(Microsoft.UI.Xaml.ElementHighContrastAdjustment;u4)",
        );
}
#[repr(transparent)]
#[derive(::core::cmp::PartialEq, ::core::cmp::Eq)]
pub struct ElementSoundKind(pub i32);
impl ElementSoundKind {
    pub const Focus: Self = Self(0i32);
    pub const Invoke: Self = Self(1i32);
    pub const Show: Self = Self(2i32);
    pub const Hide: Self = Self(3i32);
    pub const MovePrevious: Self = Self(4i32);
    pub const MoveNext: Self = Self(5i32);
    pub const GoBack: Self = Self(6i32);
}
impl ::core::marker::Copy for ElementSoundKind {}
impl ::core::clone::Clone for ElementSoundKind {
    fn clone(&self) -> Self {
        *self
    }
}
impl ::core::default::Default for ElementSoundKind {
    fn default() -> Self {
        Self(0)
    }
}
impl ::windows_core::TypeKind for ElementSoundKind {
    type TypeKind = ::windows_core::CopyType;
}
impl ::core::fmt::Debug for ElementSoundKind {
    fn fmt(&self, f: &mut ::core::fmt::Formatter<'_>) -> ::core::fmt::Result {
        f.debug_tuple("ElementSoundKind").field(&self.0).finish()
    }
}
impl ::windows_core::RuntimeType for ElementSoundKind {
    const SIGNATURE: ::windows_core::imp::ConstBuffer =
        ::windows_core::imp::ConstBuffer::from_slice(
            b"enum(Microsoft.UI.Xaml.ElementSoundKind;i4)",
        );
}
#[repr(transparent)]
#[derive(::core::cmp::PartialEq, ::core::cmp::Eq)]
pub struct ElementSoundMode(pub i32);
impl ElementSoundMode {
    pub const Default: Self = Self(0i32);
    pub const FocusOnly: Self = Self(1i32);
    pub const Off: Self = Self(2i32);
}
impl ::core::marker::Copy for ElementSoundMode {}
impl ::core::clone::Clone for ElementSoundMode {
    fn clone(&self) -> Self {
        *self
    }
}
impl ::core::default::Default for ElementSoundMode {
    fn default() -> Self {
        Self(0)
    }
}
impl ::windows_core::TypeKind for ElementSoundMode {
    type TypeKind = ::windows_core::CopyType;
}
impl ::core::fmt::Debug for ElementSoundMode {
    fn fmt(&self, f: &mut ::core::fmt::Formatter<'_>) -> ::core::fmt::Result {
        f.debug_tuple("ElementSoundMode").field(&self.0).finish()
    }
}
impl ::windows_core::RuntimeType for ElementSoundMode {
    const SIGNATURE: ::windows_core::imp::ConstBuffer =
        ::windows_core::imp::ConstBuffer::from_slice(
            b"enum(Microsoft.UI.Xaml.ElementSoundMode;i4)",
        );
}
#[repr(transparent)]
#[derive(::core::cmp::PartialEq, ::core::cmp::Eq)]
pub struct ElementSoundPlayerState(pub i32);
impl ElementSoundPlayerState {
    pub const Auto: Self = Self(0i32);
    pub const Off: Self = Self(1i32);
    pub const On: Self = Self(2i32);
}
impl ::core::marker::Copy for ElementSoundPlayerState {}
impl ::core::clone::Clone for ElementSoundPlayerState {
    fn clone(&self) -> Self {
        *self
    }
}
impl ::core::default::Default for ElementSoundPlayerState {
    fn default() -> Self {
        Self(0)
    }
}
impl ::windows_core::TypeKind for ElementSoundPlayerState {
    type TypeKind = ::windows_core::CopyType;
}
impl ::core::fmt::Debug for ElementSoundPlayerState {
    fn fmt(&self, f: &mut ::core::fmt::Formatter<'_>) -> ::core::fmt::Result {
        f.debug_tuple("ElementSoundPlayerState").field(&self.0).finish()
    }
}
impl ::windows_core::RuntimeType for ElementSoundPlayerState {
    const SIGNATURE: ::windows_core::imp::ConstBuffer =
        ::windows_core::imp::ConstBuffer::from_slice(
            b"enum(Microsoft.UI.Xaml.ElementSoundPlayerState;i4)",
        );
}
#[repr(transparent)]
#[derive(::core::cmp::PartialEq, ::core::cmp::Eq)]
pub struct ElementSpatialAudioMode(pub i32);
impl ElementSpatialAudioMode {
    pub const Auto: Self = Self(0i32);
    pub const Off: Self = Self(1i32);
    pub const On: Self = Self(2i32);
}
impl ::core::marker::Copy for ElementSpatialAudioMode {}
impl ::core::clone::Clone for ElementSpatialAudioMode {
    fn clone(&self) -> Self {
        *self
    }
}
impl ::core::default::Default for ElementSpatialAudioMode {
    fn default() -> Self {
        Self(0)
    }
}
impl ::windows_core::TypeKind for ElementSpatialAudioMode {
    type TypeKind = ::windows_core::CopyType;
}
impl ::core::fmt::Debug for ElementSpatialAudioMode {
    fn fmt(&self, f: &mut ::core::fmt::Formatter<'_>) -> ::core::fmt::Result {
        f.debug_tuple("ElementSpatialAudioMode").field(&self.0).finish()
    }
}
impl ::windows_core::RuntimeType for ElementSpatialAudioMode {
    const SIGNATURE: ::windows_core::imp::ConstBuffer =
        ::windows_core::imp::ConstBuffer::from_slice(
            b"enum(Microsoft.UI.Xaml.ElementSpatialAudioMode;i4)",
        );
}
#[repr(transparent)]
#[derive(::core::cmp::PartialEq, ::core::cmp::Eq)]
pub struct ElementTheme(pub i32);
impl ElementTheme {
    pub const Default: Self = Self(0i32);
    pub const Light: Self = Self(1i32);
    pub const Dark: Self = Self(2i32);
}
impl ::core::marker::Copy for ElementTheme {}
impl ::core::clone::Clone for ElementTheme {
    fn clone(&self) -> Self {
        *self
    }
}
impl ::core::default::Default for ElementTheme {
    fn default() -> Self {
        Self(0)
    }
}
impl ::windows_core::TypeKind for ElementTheme {
    type TypeKind = ::windows_core::CopyType;
}
impl ::core::fmt::Debug for ElementTheme {
    fn fmt(&self, f: &mut ::core::fmt::Formatter<'_>) -> ::core::fmt::Result {
        f.debug_tuple("ElementTheme").field(&self.0).finish()
    }
}
impl ::windows_core::RuntimeType for ElementTheme {
    const SIGNATURE: ::windows_core::imp::ConstBuffer =
        ::windows_core::imp::ConstBuffer::from_slice(b"enum(Microsoft.UI.Xaml.ElementTheme;i4)");
}
#[repr(transparent)]
#[derive(::core::cmp::PartialEq, ::core::cmp::Eq)]
pub struct FlowDirection(pub i32);
impl FlowDirection {
    pub const LeftToRight: Self = Self(0i32);
    pub const RightToLeft: Self = Self(1i32);
}
impl ::core::marker::Copy for FlowDirection {}
impl ::core::clone::Clone for FlowDirection {
    fn clone(&self) -> Self {
        *self
    }
}
impl ::core::default::Default for FlowDirection {
    fn default() -> Self {
        Self(0)
    }
}
impl ::windows_core::TypeKind for FlowDirection {
    type TypeKind = ::windows_core::CopyType;
}
impl ::core::fmt::Debug for FlowDirection {
    fn fmt(&self, f: &mut ::core::fmt::Formatter<'_>) -> ::core::fmt::Result {
        f.debug_tuple("FlowDirection").field(&self.0).finish()
    }
}
impl ::windows_core::RuntimeType for FlowDirection {
    const SIGNATURE: ::windows_core::imp::ConstBuffer =
        ::windows_core::imp::ConstBuffer::from_slice(b"enum(Microsoft.UI.Xaml.FlowDirection;i4)");
}
#[repr(transparent)]
#[derive(::core::cmp::PartialEq, ::core::cmp::Eq)]
pub struct FocusState(pub i32);
impl FocusState {
    pub const Unfocused: Self = Self(0i32);
    pub const Pointer: Self = Self(1i32);
    pub const Keyboard: Self = Self(2i32);
    pub const Programmatic: Self = Self(3i32);
}
impl ::core::marker::Copy for FocusState {}
impl ::core::clone::Clone for FocusState {
    fn clone(&self) -> Self {
        *self
    }
}
impl ::core::default::Default for FocusState {
    fn default() -> Self {
        Self(0)
    }
}
impl ::windows_core::TypeKind for FocusState {
    type TypeKind = ::windows_core::CopyType;
}
impl ::core::fmt::Debug for FocusState {
    fn fmt(&self, f: &mut ::core::fmt::Formatter<'_>) -> ::core::fmt::Result {
        f.debug_tuple("FocusState").field(&self.0).finish()
    }
}
impl ::windows_core::RuntimeType for FocusState {
    const SIGNATURE: ::windows_core::imp::ConstBuffer =
        ::windows_core::imp::ConstBuffer::from_slice(b"enum(Microsoft.UI.Xaml.FocusState;i4)");
}
#[repr(transparent)]
#[derive(::core::cmp::PartialEq, ::core::cmp::Eq)]
pub struct FocusVisualKind(pub i32);
impl FocusVisualKind {
    pub const DottedLine: Self = Self(0i32);
    pub const HighVisibility: Self = Self(1i32);
    pub const Reveal: Self = Self(2i32);
}
impl ::core::marker::Copy for FocusVisualKind {}
impl ::core::clone::Clone for FocusVisualKind {
    fn clone(&self) -> Self {
        *self
    }
}
impl ::core::default::Default for FocusVisualKind {
    fn default() -> Self {
        Self(0)
    }
}
impl ::windows_core::TypeKind for FocusVisualKind {
    type TypeKind = ::windows_core::CopyType;
}
impl ::core::fmt::Debug for FocusVisualKind {
    fn fmt(&self, f: &mut ::core::fmt::Formatter<'_>) -> ::core::fmt::Result {
        f.debug_tuple("FocusVisualKind").field(&self.0).finish()
    }
}
impl ::windows_core::RuntimeType for FocusVisualKind {
    const SIGNATURE: ::windows_core::imp::ConstBuffer =
        ::windows_core::imp::ConstBuffer::from_slice(b"enum(Microsoft.UI.Xaml.FocusVisualKind;i4)");
}
#[repr(transparent)]
#[derive(::core::cmp::PartialEq, ::core::cmp::Eq)]
pub struct FontCapitals(pub i32);
impl FontCapitals {
    pub const Normal: Self = Self(0i32);
    pub const AllSmallCaps: Self = Self(1i32);
    pub const SmallCaps: Self = Self(2i32);
    pub const AllPetiteCaps: Self = Self(3i32);
    pub const PetiteCaps: Self = Self(4i32);
    pub const Unicase: Self = Self(5i32);
    pub const Titling: Self = Self(6i32);
}
impl ::core::marker::Copy for FontCapitals {}
impl ::core::clone::Clone for FontCapitals {
    fn clone(&self) -> Self {
        *self
    }
}
impl ::core::default::Default for FontCapitals {
    fn default() -> Self {
        Self(0)
    }
}
impl ::windows_core::TypeKind for FontCapitals {
    type TypeKind = ::windows_core::CopyType;
}
impl ::core::fmt::Debug for FontCapitals {
    fn fmt(&self, f: &mut ::core::fmt::Formatter<'_>) -> ::core::fmt::Result {
        f.debug_tuple("FontCapitals").field(&self.0).finish()
    }
}
impl ::windows_core::RuntimeType for FontCapitals {
    const SIGNATURE: ::windows_core::imp::ConstBuffer =
        ::windows_core::imp::ConstBuffer::from_slice(b"enum(Microsoft.UI.Xaml.FontCapitals;i4)");
}
#[repr(transparent)]
#[derive(::core::cmp::PartialEq, ::core::cmp::Eq)]
pub struct FontEastAsianLanguage(pub i32);
impl FontEastAsianLanguage {
    pub const Normal: Self = Self(0i32);
    pub const HojoKanji: Self = Self(1i32);
    pub const Jis04: Self = Self(2i32);
    pub const Jis78: Self = Self(3i32);
    pub const Jis83: Self = Self(4i32);
    pub const Jis90: Self = Self(5i32);
    pub const NlcKanji: Self = Self(6i32);
    pub const Simplified: Self = Self(7i32);
    pub const Traditional: Self = Self(8i32);
    pub const TraditionalNames: Self = Self(9i32);
}
impl ::core::marker::Copy for FontEastAsianLanguage {}
impl ::core::clone::Clone for FontEastAsianLanguage {
    fn clone(&self) -> Self {
        *self
    }
}
impl ::core::default::Default for FontEastAsianLanguage {
    fn default() -> Self {
        Self(0)
    }
}
impl ::windows_core::TypeKind for FontEastAsianLanguage {
    type TypeKind = ::windows_core::CopyType;
}
impl ::core::fmt::Debug for FontEastAsianLanguage {
    fn fmt(&self, f: &mut ::core::fmt::Formatter<'_>) -> ::core::fmt::Result {
        f.debug_tuple("FontEastAsianLanguage").field(&self.0).finish()
    }
}
impl ::windows_core::RuntimeType for FontEastAsianLanguage {
    const SIGNATURE: ::windows_core::imp::ConstBuffer =
        ::windows_core::imp::ConstBuffer::from_slice(
            b"enum(Microsoft.UI.Xaml.FontEastAsianLanguage;i4)",
        );
}
#[repr(transparent)]
#[derive(::core::cmp::PartialEq, ::core::cmp::Eq)]
pub struct FontEastAsianWidths(pub i32);
impl FontEastAsianWidths {
    pub const Normal: Self = Self(0i32);
    pub const Full: Self = Self(1i32);
    pub const Half: Self = Self(2i32);
    pub const Proportional: Self = Self(3i32);
    pub const Quarter: Self = Self(4i32);
    pub const Third: Self = Self(5i32);
}
impl ::core::marker::Copy for FontEastAsianWidths {}
impl ::core::clone::Clone for FontEastAsianWidths {
    fn clone(&self) -> Self {
        *self
    }
}
impl ::core::default::Default for FontEastAsianWidths {
    fn default() -> Self {
        Self(0)
    }
}
impl ::windows_core::TypeKind for FontEastAsianWidths {
    type TypeKind = ::windows_core::CopyType;
}
impl ::core::fmt::Debug for FontEastAsianWidths {
    fn fmt(&self, f: &mut ::core::fmt::Formatter<'_>) -> ::core::fmt::Result {
        f.debug_tuple("FontEastAsianWidths").field(&self.0).finish()
    }
}
impl ::windows_core::RuntimeType for FontEastAsianWidths {
    const SIGNATURE: ::windows_core::imp::ConstBuffer =
        ::windows_core::imp::ConstBuffer::from_slice(
            b"enum(Microsoft.UI.Xaml.FontEastAsianWidths;i4)",
        );
}
#[repr(transparent)]
#[derive(::core::cmp::PartialEq, ::core::cmp::Eq)]
pub struct FontFraction(pub i32);
impl FontFraction {
    pub const Normal: Self = Self(0i32);
    pub const Stacked: Self = Self(1i32);
    pub const Slashed: Self = Self(2i32);
}
impl ::core::marker::Copy for FontFraction {}
impl ::core::clone::Clone for FontFraction {
    fn clone(&self) -> Self {
        *self
    }
}
impl ::core::default::Default for FontFraction {
    fn default() -> Self {
        Self(0)
    }
}
impl ::windows_core::TypeKind for FontFraction {
    type TypeKind = ::windows_core::CopyType;
}
impl ::core::fmt::Debug for FontFraction {
    fn fmt(&self, f: &mut ::core::fmt::Formatter<'_>) -> ::core::fmt::Result {
        f.debug_tuple("FontFraction").field(&self.0).finish()
    }
}
impl ::windows_core::RuntimeType for FontFraction {
    const SIGNATURE: ::windows_core::imp::ConstBuffer =
        ::windows_core::imp::ConstBuffer::from_slice(b"enum(Microsoft.UI.Xaml.FontFraction;i4)");
}
#[repr(transparent)]
#[derive(::core::cmp::PartialEq, ::core::cmp::Eq)]
pub struct FontNumeralAlignment(pub i32);
impl FontNumeralAlignment {
    pub const Normal: Self = Self(0i32);
    pub const Proportional: Self = Self(1i32);
    pub const Tabular: Self = Self(2i32);
}
impl ::core::marker::Copy for FontNumeralAlignment {}
impl ::core::clone::Clone for FontNumeralAlignment {
    fn clone(&self) -> Self {
        *self
    }
}
impl ::core::default::Default for FontNumeralAlignment {
    fn default() -> Self {
        Self(0)
    }
}
impl ::windows_core::TypeKind for FontNumeralAlignment {
    type TypeKind = ::windows_core::CopyType;
}
impl ::core::fmt::Debug for FontNumeralAlignment {
    fn fmt(&self, f: &mut ::core::fmt::Formatter<'_>) -> ::core::fmt::Result {
        f.debug_tuple("FontNumeralAlignment").field(&self.0).finish()
    }
}
impl ::windows_core::RuntimeType for FontNumeralAlignment {
    const SIGNATURE: ::windows_core::imp::ConstBuffer =
        ::windows_core::imp::ConstBuffer::from_slice(
            b"enum(Microsoft.UI.Xaml.FontNumeralAlignment;i4)",
        );
}
#[repr(transparent)]
#[derive(::core::cmp::PartialEq, ::core::cmp::Eq)]
pub struct FontNumeralStyle(pub i32);
impl FontNumeralStyle {
    pub const Normal: Self = Self(0i32);
    pub const Lining: Self = Self(1i32);
    pub const OldStyle: Self = Self(2i32);
}
impl ::core::marker::Copy for FontNumeralStyle {}
impl ::core::clone::Clone for FontNumeralStyle {
    fn clone(&self) -> Self {
        *self
    }
}
impl ::core::default::Default for FontNumeralStyle {
    fn default() -> Self {
        Self(0)
    }
}
impl ::windows_core::TypeKind for FontNumeralStyle {
    type TypeKind = ::windows_core::CopyType;
}
impl ::core::fmt::Debug for FontNumeralStyle {
    fn fmt(&self, f: &mut ::core::fmt::Formatter<'_>) -> ::core::fmt::Result {
        f.debug_tuple("FontNumeralStyle").field(&self.0).finish()
    }
}
impl ::windows_core::RuntimeType for FontNumeralStyle {
    const SIGNATURE: ::windows_core::imp::ConstBuffer =
        ::windows_core::imp::ConstBuffer::from_slice(
            b"enum(Microsoft.UI.Xaml.FontNumeralStyle;i4)",
        );
}
#[repr(transparent)]
#[derive(::core::cmp::PartialEq, ::core::cmp::Eq)]
pub struct FontVariants(pub i32);
impl FontVariants {
    pub const Normal: Self = Self(0i32);
    pub const Superscript: Self = Self(1i32);
    pub const Subscript: Self = Self(2i32);
    pub const Ordinal: Self = Self(3i32);
    pub const Inferior: Self = Self(4i32);
    pub const Ruby: Self = Self(5i32);
}
impl ::core::marker::Copy for FontVariants {}
impl ::core::clone::Clone for FontVariants {
    fn clone(&self) -> Self {
        *self
    }
}
impl ::core::default::Default for FontVariants {
    fn default() -> Self {
        Self(0)
    }
}
impl ::windows_core::TypeKind for FontVariants {
    type TypeKind = ::windows_core::CopyType;
}
impl ::core::fmt::Debug for FontVariants {
    fn fmt(&self, f: &mut ::core::fmt::Formatter<'_>) -> ::core::fmt::Result {
        f.debug_tuple("FontVariants").field(&self.0).finish()
    }
}
impl ::windows_core::RuntimeType for FontVariants {
    const SIGNATURE: ::windows_core::imp::ConstBuffer =
        ::windows_core::imp::ConstBuffer::from_slice(b"enum(Microsoft.UI.Xaml.FontVariants;i4)");
}
#[repr(transparent)]
#[derive(::core::cmp::PartialEq, ::core::cmp::Eq)]
pub struct GridUnitType(pub i32);
impl GridUnitType {
    pub const Auto: Self = Self(0i32);
    pub const Pixel: Self = Self(1i32);
    pub const Star: Self = Self(2i32);
}
impl ::core::marker::Copy for GridUnitType {}
impl ::core::clone::Clone for GridUnitType {
    fn clone(&self) -> Self {
        *self
    }
}
impl ::core::default::Default for GridUnitType {
    fn default() -> Self {
        Self(0)
    }
}
impl ::windows_core::TypeKind for GridUnitType {
    type TypeKind = ::windows_core::CopyType;
}
impl ::core::fmt::Debug for GridUnitType {
    fn fmt(&self, f: &mut ::core::fmt::Formatter<'_>) -> ::core::fmt::Result {
        f.debug_tuple("GridUnitType").field(&self.0).finish()
    }
}
impl ::windows_core::RuntimeType for GridUnitType {
    const SIGNATURE: ::windows_core::imp::ConstBuffer =
        ::windows_core::imp::ConstBuffer::from_slice(b"enum(Microsoft.UI.Xaml.GridUnitType;i4)");
}
#[repr(transparent)]
#[derive(::core::cmp::PartialEq, ::core::cmp::Eq)]
pub struct HorizontalAlignment(pub i32);
impl HorizontalAlignment {
    pub const Left: Self = Self(0i32);
    pub const Center: Self = Self(1i32);
    pub const Right: Self = Self(2i32);
    pub const Stretch: Self = Self(3i32);
}
impl ::core::marker::Copy for HorizontalAlignment {}
impl ::core::clone::Clone for HorizontalAlignment {
    fn clone(&self) -> Self {
        *self
    }
}
impl ::core::default::Default for HorizontalAlignment {
    fn default() -> Self {
        Self(0)
    }
}
impl ::windows_core::TypeKind for HorizontalAlignment {
    type TypeKind = ::windows_core::CopyType;
}
impl ::core::fmt::Debug for HorizontalAlignment {
    fn fmt(&self, f: &mut ::core::fmt::Formatter<'_>) -> ::core::fmt::Result {
        f.debug_tuple("HorizontalAlignment").field(&self.0).finish()
    }
}
impl ::windows_core::RuntimeType for HorizontalAlignment {
    const SIGNATURE: ::windows_core::imp::ConstBuffer =
        ::windows_core::imp::ConstBuffer::from_slice(
            b"enum(Microsoft.UI.Xaml.HorizontalAlignment;i4)",
        );
}
#[repr(transparent)]
#[derive(::core::cmp::PartialEq, ::core::cmp::Eq)]
pub struct LineStackingStrategy(pub i32);
impl LineStackingStrategy {
    pub const MaxHeight: Self = Self(0i32);
    pub const BlockLineHeight: Self = Self(1i32);
    pub const BaselineToBaseline: Self = Self(2i32);
}
impl ::core::marker::Copy for LineStackingStrategy {}
impl ::core::clone::Clone for LineStackingStrategy {
    fn clone(&self) -> Self {
        *self
    }
}
impl ::core::default::Default for LineStackingStrategy {
    fn default() -> Self {
        Self(0)
    }
}
impl ::windows_core::TypeKind for LineStackingStrategy {
    type TypeKind = ::windows_core::CopyType;
}
impl ::core::fmt::Debug for LineStackingStrategy {
    fn fmt(&self, f: &mut ::core::fmt::Formatter<'_>) -> ::core::fmt::Result {
        f.debug_tuple("LineStackingStrategy").field(&self.0).finish()
    }
}
impl ::windows_core::RuntimeType for LineStackingStrategy {
    const SIGNATURE: ::windows_core::imp::ConstBuffer =
        ::windows_core::imp::ConstBuffer::from_slice(
            b"enum(Microsoft.UI.Xaml.LineStackingStrategy;i4)",
        );
}
#[repr(transparent)]
#[derive(::core::cmp::PartialEq, ::core::cmp::Eq)]
pub struct OpticalMarginAlignment(pub i32);
impl OpticalMarginAlignment {
    pub const None: Self = Self(0i32);
    pub const TrimSideBearings: Self = Self(1i32);
}
impl ::core::marker::Copy for OpticalMarginAlignment {}
impl ::core::clone::Clone for OpticalMarginAlignment {
    fn clone(&self) -> Self {
        *self
    }
}
impl ::core::default::Default for OpticalMarginAlignment {
    fn default() -> Self {
        Self(0)
    }
}
impl ::windows_core::TypeKind for OpticalMarginAlignment {
    type TypeKind = ::windows_core::CopyType;
}
impl ::core::fmt::Debug for OpticalMarginAlignment {
    fn fmt(&self, f: &mut ::core::fmt::Formatter<'_>) -> ::core::fmt::Result {
        f.debug_tuple("OpticalMarginAlignment").field(&self.0).finish()
    }
}
impl ::windows_core::RuntimeType for OpticalMarginAlignment {
    const SIGNATURE: ::windows_core::imp::ConstBuffer =
        ::windows_core::imp::ConstBuffer::from_slice(
            b"enum(Microsoft.UI.Xaml.OpticalMarginAlignment;i4)",
        );
}
#[repr(transparent)]
#[derive(::core::cmp::PartialEq, ::core::cmp::Eq)]
pub struct TextAlignment(pub i32);
impl TextAlignment {
    pub const Center: Self = Self(0i32);
    pub const Left: Self = Self(1i32);
    pub const Start: Self = Self(1i32);
    pub const Right: Self = Self(2i32);
    pub const End: Self = Self(2i32);
    pub const Justify: Self = Self(3i32);
    pub const DetectFromContent: Self = Self(4i32);
}
impl ::core::marker::Copy for TextAlignment {}
impl ::core::clone::Clone for TextAlignment {
    fn clone(&self) -> Self {
        *self
    }
}
impl ::core::default::Default for TextAlignment {
    fn default() -> Self {
        Self(0)
    }
}
impl ::windows_core::TypeKind for TextAlignment {
    type TypeKind = ::windows_core::CopyType;
}
impl ::core::fmt::Debug for TextAlignment {
    fn fmt(&self, f: &mut ::core::fmt::Formatter<'_>) -> ::core::fmt::Result {
        f.debug_tuple("TextAlignment").field(&self.0).finish()
    }
}
impl ::windows_core::RuntimeType for TextAlignment {
    const SIGNATURE: ::windows_core::imp::ConstBuffer =
        ::windows_core::imp::ConstBuffer::from_slice(b"enum(Microsoft.UI.Xaml.TextAlignment;i4)");
}
#[repr(transparent)]
#[derive(::core::cmp::PartialEq, ::core::cmp::Eq)]
pub struct TextLineBounds(pub i32);
impl TextLineBounds {
    pub const Full: Self = Self(0i32);
    pub const TrimToCapHeight: Self = Self(1i32);
    pub const TrimToBaseline: Self = Self(2i32);
    pub const Tight: Self = Self(3i32);
}
impl ::core::marker::Copy for TextLineBounds {}
impl ::core::clone::Clone for TextLineBounds {
    fn clone(&self) -> Self {
        *self
    }
}
impl ::core::default::Default for TextLineBounds {
    fn default() -> Self {
        Self(0)
    }
}
impl ::windows_core::TypeKind for TextLineBounds {
    type TypeKind = ::windows_core::CopyType;
}
impl ::core::fmt::Debug for TextLineBounds {
    fn fmt(&self, f: &mut ::core::fmt::Formatter<'_>) -> ::core::fmt::Result {
        f.debug_tuple("TextLineBounds").field(&self.0).finish()
    }
}
impl ::windows_core::RuntimeType for TextLineBounds {
    const SIGNATURE: ::windows_core::imp::ConstBuffer =
        ::windows_core::imp::ConstBuffer::from_slice(b"enum(Microsoft.UI.Xaml.TextLineBounds;i4)");
}
#[repr(transparent)]
#[derive(::core::cmp::PartialEq, ::core::cmp::Eq)]
pub struct TextReadingOrder(pub i32);
impl TextReadingOrder {
    pub const Default: Self = Self(0i32);
    pub const UseFlowDirection: Self = Self(0i32);
    pub const DetectFromContent: Self = Self(1i32);
}
impl ::core::marker::Copy for TextReadingOrder {}
impl ::core::clone::Clone for TextReadingOrder {
    fn clone(&self) -> Self {
        *self
    }
}
impl ::core::default::Default for TextReadingOrder {
    fn default() -> Self {
        Self(0)
    }
}
impl ::windows_core::TypeKind for TextReadingOrder {
    type TypeKind = ::windows_core::CopyType;
}
impl ::core::fmt::Debug for TextReadingOrder {
    fn fmt(&self, f: &mut ::core::fmt::Formatter<'_>) -> ::core::fmt::Result {
        f.debug_tuple("TextReadingOrder").field(&self.0).finish()
    }
}
impl ::windows_core::RuntimeType for TextReadingOrder {
    const SIGNATURE: ::windows_core::imp::ConstBuffer =
        ::windows_core::imp::ConstBuffer::from_slice(
            b"enum(Microsoft.UI.Xaml.TextReadingOrder;i4)",
        );
}
#[repr(transparent)]
#[derive(::core::cmp::PartialEq, ::core::cmp::Eq)]
pub struct TextTrimming(pub i32);
impl TextTrimming {
    pub const None: Self = Self(0i32);
    pub const CharacterEllipsis: Self = Self(1i32);
    pub const WordEllipsis: Self = Self(2i32);
    pub const Clip: Self = Self(3i32);
}
impl ::core::marker::Copy for TextTrimming {}
impl ::core::clone::Clone for TextTrimming {
    fn clone(&self) -> Self {
        *self
    }
}
impl ::core::default::Default for TextTrimming {
    fn default() -> Self {
        Self(0)
    }
}
impl ::windows_core::TypeKind for TextTrimming {
    type TypeKind = ::windows_core::CopyType;
}
impl ::core::fmt::Debug for TextTrimming {
    fn fmt(&self, f: &mut ::core::fmt::Formatter<'_>) -> ::core::fmt::Result {
        f.debug_tuple("TextTrimming").field(&self.0).finish()
    }
}
impl ::windows_core::RuntimeType for TextTrimming {
    const SIGNATURE: ::windows_core::imp::ConstBuffer =
        ::windows_core::imp::ConstBuffer::from_slice(b"enum(Microsoft.UI.Xaml.TextTrimming;i4)");
}
#[repr(transparent)]
#[derive(::core::cmp::PartialEq, ::core::cmp::Eq)]
pub struct TextWrapping(pub i32);
impl TextWrapping {
    pub const NoWrap: Self = Self(1i32);
    pub const Wrap: Self = Self(2i32);
    pub const WrapWholeWords: Self = Self(3i32);
}
impl ::core::marker::Copy for TextWrapping {}
impl ::core::clone::Clone for TextWrapping {
    fn clone(&self) -> Self {
        *self
    }
}
impl ::core::default::Default for TextWrapping {
    fn default() -> Self {
        Self(0)
    }
}
impl ::windows_core::TypeKind for TextWrapping {
    type TypeKind = ::windows_core::CopyType;
}
impl ::core::fmt::Debug for TextWrapping {
    fn fmt(&self, f: &mut ::core::fmt::Formatter<'_>) -> ::core::fmt::Result {
        f.debug_tuple("TextWrapping").field(&self.0).finish()
    }
}
impl ::windows_core::RuntimeType for TextWrapping {
    const SIGNATURE: ::windows_core::imp::ConstBuffer =
        ::windows_core::imp::ConstBuffer::from_slice(b"enum(Microsoft.UI.Xaml.TextWrapping;i4)");
}
#[repr(transparent)]
#[derive(::core::cmp::PartialEq, ::core::cmp::Eq)]
pub struct Vector3TransitionComponents(pub u32);
impl Vector3TransitionComponents {
    pub const X: Self = Self(1u32);
    pub const Y: Self = Self(2u32);
    pub const Z: Self = Self(4u32);
}
impl ::core::marker::Copy for Vector3TransitionComponents {}
impl ::core::clone::Clone for Vector3TransitionComponents {
    fn clone(&self) -> Self {
        *self
    }
}
impl ::core::default::Default for Vector3TransitionComponents {
    fn default() -> Self {
        Self(0)
    }
}
impl ::windows_core::TypeKind for Vector3TransitionComponents {
    type TypeKind = ::windows_core::CopyType;
}
impl ::core::fmt::Debug for Vector3TransitionComponents {
    fn fmt(&self, f: &mut ::core::fmt::Formatter<'_>) -> ::core::fmt::Result {
        f.debug_tuple("Vector3TransitionComponents").field(&self.0).finish()
    }
}
impl Vector3TransitionComponents {
    pub const fn contains(&self, other: Self) -> bool {
        self.0 & other.0 == other.0
    }
}
impl ::core::ops::BitOr for Vector3TransitionComponents {
    type Output = Self;
    fn bitor(self, other: Self) -> Self {
        Self(self.0 | other.0)
    }
}
impl ::core::ops::BitAnd for Vector3TransitionComponents {
    type Output = Self;
    fn bitand(self, other: Self) -> Self {
        Self(self.0 & other.0)
    }
}
impl ::core::ops::BitOrAssign for Vector3TransitionComponents {
    fn bitor_assign(&mut self, other: Self) {
        self.0.bitor_assign(other.0)
    }
}
impl ::core::ops::BitAndAssign for Vector3TransitionComponents {
    fn bitand_assign(&mut self, other: Self) {
        self.0.bitand_assign(other.0)
    }
}
impl ::core::ops::Not for Vector3TransitionComponents {
    type Output = Self;
    fn not(self) -> Self {
        Self(self.0.not())
    }
}
impl ::windows_core::RuntimeType for Vector3TransitionComponents {
    const SIGNATURE: ::windows_core::imp::ConstBuffer =
        ::windows_core::imp::ConstBuffer::from_slice(
            b"enum(Microsoft.UI.Xaml.Vector3TransitionComponents;u4)",
        );
}
#[repr(transparent)]
#[derive(::core::cmp::PartialEq, ::core::cmp::Eq)]
pub struct VerticalAlignment(pub i32);
impl VerticalAlignment {
    pub const Top: Self = Self(0i32);
    pub const Center: Self = Self(1i32);
    pub const Bottom: Self = Self(2i32);
    pub const Stretch: Self = Self(3i32);
}
impl ::core::marker::Copy for VerticalAlignment {}
impl ::core::clone::Clone for VerticalAlignment {
    fn clone(&self) -> Self {
        *self
    }
}
impl ::core::default::Default for VerticalAlignment {
    fn default() -> Self {
        Self(0)
    }
}
impl ::windows_core::TypeKind for VerticalAlignment {
    type TypeKind = ::windows_core::CopyType;
}
impl ::core::fmt::Debug for VerticalAlignment {
    fn fmt(&self, f: &mut ::core::fmt::Formatter<'_>) -> ::core::fmt::Result {
        f.debug_tuple("VerticalAlignment").field(&self.0).finish()
    }
}
impl ::windows_core::RuntimeType for VerticalAlignment {
    const SIGNATURE: ::windows_core::imp::ConstBuffer =
        ::windows_core::imp::ConstBuffer::from_slice(
            b"enum(Microsoft.UI.Xaml.VerticalAlignment;i4)",
        );
}
#[repr(transparent)]
#[derive(::core::cmp::PartialEq, ::core::cmp::Eq)]
pub struct Visibility(pub i32);
impl Visibility {
    pub const Visible: Self = Self(0i32);
    pub const Collapsed: Self = Self(1i32);
}
impl ::core::marker::Copy for Visibility {}
impl ::core::clone::Clone for Visibility {
    fn clone(&self) -> Self {
        *self
    }
}
impl ::core::default::Default for Visibility {
    fn default() -> Self {
        Self(0)
    }
}
impl ::windows_core::TypeKind for Visibility {
    type TypeKind = ::windows_core::CopyType;
}
impl ::core::fmt::Debug for Visibility {
    fn fmt(&self, f: &mut ::core::fmt::Formatter<'_>) -> ::core::fmt::Result {
        f.debug_tuple("Visibility").field(&self.0).finish()
    }
}
impl ::windows_core::RuntimeType for Visibility {
    const SIGNATURE: ::windows_core::imp::ConstBuffer =
        ::windows_core::imp::ConstBuffer::from_slice(b"enum(Microsoft.UI.Xaml.Visibility;i4)");
}
#[repr(transparent)]
#[derive(::core::cmp::PartialEq, ::core::cmp::Eq)]
pub struct WindowActivationState(pub i32);
impl WindowActivationState {
    pub const CodeActivated: Self = Self(0i32);
    pub const Deactivated: Self = Self(1i32);
    pub const PointerActivated: Self = Self(2i32);
}
impl ::core::marker::Copy for WindowActivationState {}
impl ::core::clone::Clone for WindowActivationState {
    fn clone(&self) -> Self {
        *self
    }
}
impl ::core::default::Default for WindowActivationState {
    fn default() -> Self {
        Self(0)
    }
}
impl ::windows_core::TypeKind for WindowActivationState {
    type TypeKind = ::windows_core::CopyType;
}
impl ::core::fmt::Debug for WindowActivationState {
    fn fmt(&self, f: &mut ::core::fmt::Formatter<'_>) -> ::core::fmt::Result {
        f.debug_tuple("WindowActivationState").field(&self.0).finish()
    }
}
impl ::windows_core::RuntimeType for WindowActivationState {
    const SIGNATURE: ::windows_core::imp::ConstBuffer =
        ::windows_core::imp::ConstBuffer::from_slice(
            b"enum(Microsoft.UI.Xaml.WindowActivationState;i4)",
        );
}
#[repr(C)]
pub struct CornerRadius {
    pub TopLeft: f64,
    pub TopRight: f64,
    pub BottomRight: f64,
    pub BottomLeft: f64,
}
impl ::core::marker::Copy for CornerRadius {}
impl ::core::clone::Clone for CornerRadius {
    fn clone(&self) -> Self {
        *self
    }
}
impl ::core::fmt::Debug for CornerRadius {
    fn fmt(&self, f: &mut ::core::fmt::Formatter<'_>) -> ::core::fmt::Result {
        f.debug_struct("CornerRadius")
            .field("TopLeft", &self.TopLeft)
            .field("TopRight", &self.TopRight)
            .field("BottomRight", &self.BottomRight)
            .field("BottomLeft", &self.BottomLeft)
            .finish()
    }
}
impl ::windows_core::TypeKind for CornerRadius {
    type TypeKind = ::windows_core::CopyType;
}
impl ::windows_core::RuntimeType for CornerRadius {
    const SIGNATURE: ::windows_core::imp::ConstBuffer =
        ::windows_core::imp::ConstBuffer::from_slice(
            b"struct(Microsoft.UI.Xaml.CornerRadius;f8;f8;f8;f8)",
        );
}
impl ::core::cmp::PartialEq for CornerRadius {
    fn eq(&self, other: &Self) -> bool {
        self.TopLeft == other.TopLeft
            && self.TopRight == other.TopRight
            && self.BottomRight == other.BottomRight
            && self.BottomLeft == other.BottomLeft
    }
}
impl ::core::cmp::Eq for CornerRadius {}
impl ::core::default::Default for CornerRadius {
    fn default() -> Self {
        unsafe { ::core::mem::zeroed() }
    }
}
#[repr(C)]
#[doc = "Required features: `\"Windows_Foundation\"`"]
#[cfg(feature = "Windows_Foundation")]
pub struct Duration {
    pub TimeSpan: ::windows::Foundation::TimeSpan,
    pub Type: DurationType,
}
#[cfg(feature = "Windows_Foundation")]
impl ::core::marker::Copy for Duration {}
#[cfg(feature = "Windows_Foundation")]
impl ::core::clone::Clone for Duration {
    fn clone(&self) -> Self {
        *self
    }
}
#[cfg(feature = "Windows_Foundation")]
impl ::core::fmt::Debug for Duration {
    fn fmt(&self, f: &mut ::core::fmt::Formatter<'_>) -> ::core::fmt::Result {
        f.debug_struct("Duration")
            .field("TimeSpan", &self.TimeSpan)
            .field("Type", &self.Type)
            .finish()
    }
}
#[cfg(feature = "Windows_Foundation")]
impl ::windows_core::TypeKind for Duration {
    type TypeKind = ::windows_core::CopyType;
}
#[cfg(feature = "Windows_Foundation")]
impl ::windows_core::RuntimeType for Duration {
    const SIGNATURE : ::windows_core::imp::ConstBuffer =::windows_core::imp::ConstBuffer::from_slice ( b"struct(Microsoft.UI.Xaml.Duration;struct(Windows.Foundation.TimeSpan;i8);enum(Microsoft.UI.Xaml.DurationType;i4))" ) ;
}
#[cfg(feature = "Windows_Foundation")]
impl ::core::cmp::PartialEq for Duration {
    fn eq(&self, other: &Self) -> bool {
        self.TimeSpan == other.TimeSpan && self.Type == other.Type
    }
}
#[cfg(feature = "Windows_Foundation")]
impl ::core::cmp::Eq for Duration {}
#[cfg(feature = "Windows_Foundation")]
impl ::core::default::Default for Duration {
    fn default() -> Self {
        unsafe { ::core::mem::zeroed() }
    }
}
#[repr(C)]
pub struct GridLength {
    pub Value: f64,
    pub GridUnitType: GridUnitType,
}
impl ::core::marker::Copy for GridLength {}
impl ::core::clone::Clone for GridLength {
    fn clone(&self) -> Self {
        *self
    }
}
impl ::core::fmt::Debug for GridLength {
    fn fmt(&self, f: &mut ::core::fmt::Formatter<'_>) -> ::core::fmt::Result {
        f.debug_struct("GridLength")
            .field("Value", &self.Value)
            .field("GridUnitType", &self.GridUnitType)
            .finish()
    }
}
impl ::windows_core::TypeKind for GridLength {
    type TypeKind = ::windows_core::CopyType;
}
impl ::windows_core::RuntimeType for GridLength {
    const SIGNATURE: ::windows_core::imp::ConstBuffer =
        ::windows_core::imp::ConstBuffer::from_slice(
            b"struct(Microsoft.UI.Xaml.GridLength;f8;enum(Microsoft.UI.Xaml.GridUnitType;i4))",
        );
}
impl ::core::cmp::PartialEq for GridLength {
    fn eq(&self, other: &Self) -> bool {
        self.Value == other.Value && self.GridUnitType == other.GridUnitType
    }
}
impl ::core::cmp::Eq for GridLength {}
impl ::core::default::Default for GridLength {
    fn default() -> Self {
        unsafe { ::core::mem::zeroed() }
    }
}
#[repr(C)]
pub struct Thickness {
    pub Left: f64,
    pub Top: f64,
    pub Right: f64,
    pub Bottom: f64,
}
impl ::core::marker::Copy for Thickness {}
impl ::core::clone::Clone for Thickness {
    fn clone(&self) -> Self {
        *self
    }
}
impl ::core::fmt::Debug for Thickness {
    fn fmt(&self, f: &mut ::core::fmt::Formatter<'_>) -> ::core::fmt::Result {
        f.debug_struct("Thickness")
            .field("Left", &self.Left)
            .field("Top", &self.Top)
            .field("Right", &self.Right)
            .field("Bottom", &self.Bottom)
            .finish()
    }
}
impl ::windows_core::TypeKind for Thickness {
    type TypeKind = ::windows_core::CopyType;
}
impl ::windows_core::RuntimeType for Thickness {
    const SIGNATURE: ::windows_core::imp::ConstBuffer =
        ::windows_core::imp::ConstBuffer::from_slice(
            b"struct(Microsoft.UI.Xaml.Thickness;f8;f8;f8;f8)",
        );
}
impl ::core::cmp::PartialEq for Thickness {
    fn eq(&self, other: &Self) -> bool {
        self.Left == other.Left
            && self.Top == other.Top
            && self.Right == other.Right
            && self.Bottom == other.Bottom
    }
}
impl ::core::cmp::Eq for Thickness {}
impl ::core::default::Default for Thickness {
    fn default() -> Self {
        unsafe { ::core::mem::zeroed() }
    }
}
#[repr(transparent)]
#[derive(::core::cmp::PartialEq, ::core::cmp::Eq, ::core::fmt::Debug, ::core::clone::Clone)]
pub struct ApplicationInitializationCallback(pub ::windows_core::IUnknown);
impl ApplicationInitializationCallback {
    pub fn new<
        F: FnMut(
                ::core::option::Option<&ApplicationInitializationCallbackParams>,
            ) -> ::windows_core::Result<()>
            + ::core::marker::Send
            + 'static,
    >(
        invoke: F,
    ) -> Self {
        let com = ApplicationInitializationCallbackBox::<F> {
            vtable: &ApplicationInitializationCallbackBox::<F>::VTABLE,
            count: ::windows_core::imp::RefCount::new(1),
            invoke,
        };
        unsafe { ::core::mem::transmute(::std::boxed::Box::new(com)) }
    }
    pub fn Invoke<P0>(&self, p: P0) -> ::windows_core::Result<()>
    where
        P0: ::windows_core::IntoParam<ApplicationInitializationCallbackParams>,
    {
        let this = self;
        unsafe {
            (::windows_core::Interface::vtable(this).Invoke)(
                ::windows_core::Interface::as_raw(this),
                p.into_param().abi(),
            )
            .ok()
        }
    }
}
#[repr(C)]
struct ApplicationInitializationCallbackBox<
    F: FnMut(
            ::core::option::Option<&ApplicationInitializationCallbackParams>,
        ) -> ::windows_core::Result<()>
        + ::core::marker::Send
        + 'static,
> {
    vtable: *const ApplicationInitializationCallback_Vtbl,
    invoke: F,
    count: ::windows_core::imp::RefCount,
}
impl<
        F: FnMut(
                ::core::option::Option<&ApplicationInitializationCallbackParams>,
            ) -> ::windows_core::Result<()>
            + ::core::marker::Send
            + 'static,
    > ApplicationInitializationCallbackBox<F>
{
    const VTABLE: ApplicationInitializationCallback_Vtbl = ApplicationInitializationCallback_Vtbl {
        base__: ::windows_core::IUnknown_Vtbl {
            QueryInterface: Self::QueryInterface,
            AddRef: Self::AddRef,
            Release: Self::Release,
        },
        Invoke: Self::Invoke,
    };
    unsafe extern "system" fn QueryInterface(
        this: *mut ::core::ffi::c_void,
        iid: *const ::windows_core::GUID,
        interface: *mut *mut ::core::ffi::c_void,
    ) -> ::windows_core::HRESULT {
        let this = this as *mut *mut ::core::ffi::c_void as *mut Self;
        if iid.is_null() || interface.is_null() {
            return ::windows_core::HRESULT(-2147467261);
        }
        *interface = if *iid
            == <ApplicationInitializationCallback as ::windows_core::ComInterface>::IID
            || *iid == <::windows_core::IUnknown as ::windows_core::ComInterface>::IID
            || *iid == <::windows_core::imp::IAgileObject as ::windows_core::ComInterface>::IID
        {
            &mut (*this).vtable as *mut _ as _
        } else {
            ::core::ptr::null_mut()
        };
        if (*interface).is_null() {
            ::windows_core::HRESULT(-2147467262)
        } else {
            (*this).count.add_ref();
            ::windows_core::HRESULT(0)
        }
    }
    unsafe extern "system" fn AddRef(this: *mut ::core::ffi::c_void) -> u32 {
        let this = this as *mut *mut ::core::ffi::c_void as *mut Self;
        (*this).count.add_ref()
    }
    unsafe extern "system" fn Release(this: *mut ::core::ffi::c_void) -> u32 {
        let this = this as *mut *mut ::core::ffi::c_void as *mut Self;
        let remaining = (*this).count.release();
        if remaining == 0 {
            let _ = ::std::boxed::Box::from_raw(this);
        }
        remaining
    }
    unsafe extern "system" fn Invoke(
        this: *mut ::core::ffi::c_void,
        p: *mut ::core::ffi::c_void,
    ) -> ::windows_core::HRESULT {
        let this = this as *mut *mut ::core::ffi::c_void as *mut Self;
        ((*this).invoke)(::windows_core::from_raw_borrowed(&p)).into()
    }
}
unsafe impl ::windows_core::Interface for ApplicationInitializationCallback {
    type Vtable = ApplicationInitializationCallback_Vtbl;
}
unsafe impl ::windows_core::ComInterface for ApplicationInitializationCallback {
    const IID: ::windows_core::GUID =
        ::windows_core::GUID::from_u128(0xd8eef1c9_1234_56f1_9963_45dd9c80a661);
}
impl ::windows_core::RuntimeType for ApplicationInitializationCallback {
    const SIGNATURE: ::windows_core::imp::ConstBuffer =
        ::windows_core::imp::ConstBuffer::for_interface::<Self>();
}
#[repr(C)]
#[doc(hidden)]
pub struct ApplicationInitializationCallback_Vtbl {
    pub base__: ::windows_core::IUnknown_Vtbl,
    pub Invoke: unsafe extern "system" fn(
        this: *mut ::core::ffi::c_void,
        p: *mut ::core::ffi::c_void,
    ) -> ::windows_core::HRESULT,
}
#[repr(transparent)]
#[derive(::core::cmp::PartialEq, ::core::cmp::Eq, ::core::fmt::Debug, ::core::clone::Clone)]
pub struct BindingFailedEventHandler(pub ::windows_core::IUnknown);
impl BindingFailedEventHandler {
    pub fn new<
        F: FnMut(
                ::core::option::Option<&::windows_core::IInspectable>,
                ::core::option::Option<&BindingFailedEventArgs>,
            ) -> ::windows_core::Result<()>
            + ::core::marker::Send
            + 'static,
    >(
        invoke: F,
    ) -> Self {
        let com = BindingFailedEventHandlerBox::<F> {
            vtable: &BindingFailedEventHandlerBox::<F>::VTABLE,
            count: ::windows_core::imp::RefCount::new(1),
            invoke,
        };
        unsafe { ::core::mem::transmute(::std::boxed::Box::new(com)) }
    }
    pub fn Invoke<P0, P1>(&self, sender: P0, e: P1) -> ::windows_core::Result<()>
    where
        P0: ::windows_core::IntoParam<::windows_core::IInspectable>,
        P1: ::windows_core::IntoParam<BindingFailedEventArgs>,
    {
        let this = self;
        unsafe {
            (::windows_core::Interface::vtable(this).Invoke)(
                ::windows_core::Interface::as_raw(this),
                sender.into_param().abi(),
                e.into_param().abi(),
            )
            .ok()
        }
    }
}
#[repr(C)]
struct BindingFailedEventHandlerBox<
    F: FnMut(
            ::core::option::Option<&::windows_core::IInspectable>,
            ::core::option::Option<&BindingFailedEventArgs>,
        ) -> ::windows_core::Result<()>
        + ::core::marker::Send
        + 'static,
> {
    vtable: *const BindingFailedEventHandler_Vtbl,
    invoke: F,
    count: ::windows_core::imp::RefCount,
}
impl<
        F: FnMut(
                ::core::option::Option<&::windows_core::IInspectable>,
                ::core::option::Option<&BindingFailedEventArgs>,
            ) -> ::windows_core::Result<()>
            + ::core::marker::Send
            + 'static,
    > BindingFailedEventHandlerBox<F>
{
    const VTABLE: BindingFailedEventHandler_Vtbl = BindingFailedEventHandler_Vtbl {
        base__: ::windows_core::IUnknown_Vtbl {
            QueryInterface: Self::QueryInterface,
            AddRef: Self::AddRef,
            Release: Self::Release,
        },
        Invoke: Self::Invoke,
    };
    unsafe extern "system" fn QueryInterface(
        this: *mut ::core::ffi::c_void,
        iid: *const ::windows_core::GUID,
        interface: *mut *mut ::core::ffi::c_void,
    ) -> ::windows_core::HRESULT {
        let this = this as *mut *mut ::core::ffi::c_void as *mut Self;
        if iid.is_null() || interface.is_null() {
            return ::windows_core::HRESULT(-2147467261);
        }
        *interface = if *iid == <BindingFailedEventHandler as ::windows_core::ComInterface>::IID
            || *iid == <::windows_core::IUnknown as ::windows_core::ComInterface>::IID
            || *iid == <::windows_core::imp::IAgileObject as ::windows_core::ComInterface>::IID
        {
            &mut (*this).vtable as *mut _ as _
        } else {
            ::core::ptr::null_mut()
        };
        if (*interface).is_null() {
            ::windows_core::HRESULT(-2147467262)
        } else {
            (*this).count.add_ref();
            ::windows_core::HRESULT(0)
        }
    }
    unsafe extern "system" fn AddRef(this: *mut ::core::ffi::c_void) -> u32 {
        let this = this as *mut *mut ::core::ffi::c_void as *mut Self;
        (*this).count.add_ref()
    }
    unsafe extern "system" fn Release(this: *mut ::core::ffi::c_void) -> u32 {
        let this = this as *mut *mut ::core::ffi::c_void as *mut Self;
        let remaining = (*this).count.release();
        if remaining == 0 {
            let _ = ::std::boxed::Box::from_raw(this);
        }
        remaining
    }
    unsafe extern "system" fn Invoke(
        this: *mut ::core::ffi::c_void,
        sender: *mut ::core::ffi::c_void,
        e: *mut ::core::ffi::c_void,
    ) -> ::windows_core::HRESULT {
        let this = this as *mut *mut ::core::ffi::c_void as *mut Self;
        ((*this).invoke)(
            ::windows_core::from_raw_borrowed(&sender),
            ::windows_core::from_raw_borrowed(&e),
        )
        .into()
    }
}
unsafe impl ::windows_core::Interface for BindingFailedEventHandler {
    type Vtable = BindingFailedEventHandler_Vtbl;
}
unsafe impl ::windows_core::ComInterface for BindingFailedEventHandler {
    const IID: ::windows_core::GUID =
        ::windows_core::GUID::from_u128(0xa3160ab0_a8a9_5f38_af17_5cd91a2b33f5);
}
impl ::windows_core::RuntimeType for BindingFailedEventHandler {
    const SIGNATURE: ::windows_core::imp::ConstBuffer =
        ::windows_core::imp::ConstBuffer::for_interface::<Self>();
}
#[repr(C)]
#[doc(hidden)]
pub struct BindingFailedEventHandler_Vtbl {
    pub base__: ::windows_core::IUnknown_Vtbl,
    pub Invoke: unsafe extern "system" fn(
        this: *mut ::core::ffi::c_void,
        sender: *mut ::core::ffi::c_void,
        e: *mut ::core::ffi::c_void,
    ) -> ::windows_core::HRESULT,
}
#[repr(transparent)]
#[derive(::core::cmp::PartialEq, ::core::cmp::Eq, ::core::fmt::Debug, ::core::clone::Clone)]
pub struct CreateDefaultValueCallback(pub ::windows_core::IUnknown);
impl CreateDefaultValueCallback {
    pub fn new<
        F: FnMut() -> ::windows_core::Result<::windows_core::IInspectable>
            + ::core::marker::Send
            + 'static,
    >(
        invoke: F,
    ) -> Self {
        let com = CreateDefaultValueCallbackBox::<F> {
            vtable: &CreateDefaultValueCallbackBox::<F>::VTABLE,
            count: ::windows_core::imp::RefCount::new(1),
            invoke,
        };
        unsafe { ::core::mem::transmute(::std::boxed::Box::new(com)) }
    }
    pub fn Invoke(&self) -> ::windows_core::Result<::windows_core::IInspectable> {
        let this = self;
        unsafe {
            let mut result__ = ::std::mem::zeroed();
            (::windows_core::Interface::vtable(this).Invoke)(
                ::windows_core::Interface::as_raw(this),
                &mut result__,
            )
            .from_abi(result__)
        }
    }
}
#[repr(C)]
struct CreateDefaultValueCallbackBox<
    F: FnMut() -> ::windows_core::Result<::windows_core::IInspectable>
        + ::core::marker::Send
        + 'static,
> {
    vtable: *const CreateDefaultValueCallback_Vtbl,
    invoke: F,
    count: ::windows_core::imp::RefCount,
}
impl<
        F: FnMut() -> ::windows_core::Result<::windows_core::IInspectable>
            + ::core::marker::Send
            + 'static,
    > CreateDefaultValueCallbackBox<F>
{
    const VTABLE: CreateDefaultValueCallback_Vtbl = CreateDefaultValueCallback_Vtbl {
        base__: ::windows_core::IUnknown_Vtbl {
            QueryInterface: Self::QueryInterface,
            AddRef: Self::AddRef,
            Release: Self::Release,
        },
        Invoke: Self::Invoke,
    };
    unsafe extern "system" fn QueryInterface(
        this: *mut ::core::ffi::c_void,
        iid: *const ::windows_core::GUID,
        interface: *mut *mut ::core::ffi::c_void,
    ) -> ::windows_core::HRESULT {
        let this = this as *mut *mut ::core::ffi::c_void as *mut Self;
        if iid.is_null() || interface.is_null() {
            return ::windows_core::HRESULT(-2147467261);
        }
        *interface = if *iid == <CreateDefaultValueCallback as ::windows_core::ComInterface>::IID
            || *iid == <::windows_core::IUnknown as ::windows_core::ComInterface>::IID
            || *iid == <::windows_core::imp::IAgileObject as ::windows_core::ComInterface>::IID
        {
            &mut (*this).vtable as *mut _ as _
        } else {
            ::core::ptr::null_mut()
        };
        if (*interface).is_null() {
            ::windows_core::HRESULT(-2147467262)
        } else {
            (*this).count.add_ref();
            ::windows_core::HRESULT(0)
        }
    }
    unsafe extern "system" fn AddRef(this: *mut ::core::ffi::c_void) -> u32 {
        let this = this as *mut *mut ::core::ffi::c_void as *mut Self;
        (*this).count.add_ref()
    }
    unsafe extern "system" fn Release(this: *mut ::core::ffi::c_void) -> u32 {
        let this = this as *mut *mut ::core::ffi::c_void as *mut Self;
        let remaining = (*this).count.release();
        if remaining == 0 {
            let _ = ::std::boxed::Box::from_raw(this);
        }
        remaining
    }
    unsafe extern "system" fn Invoke(
        this: *mut ::core::ffi::c_void,
        result__: *mut *mut ::core::ffi::c_void,
    ) -> ::windows_core::HRESULT {
        let this = this as *mut *mut ::core::ffi::c_void as *mut Self;
        match ((*this).invoke)() {
            ::core::result::Result::Ok(ok__) => {
                ::core::ptr::write(result__, ::core::mem::transmute_copy(&ok__));
                ::core::mem::forget(ok__);
                ::windows_core::HRESULT(0)
            }
            ::core::result::Result::Err(err) => err.into(),
        }
    }
}
unsafe impl ::windows_core::Interface for CreateDefaultValueCallback {
    type Vtable = CreateDefaultValueCallback_Vtbl;
}
unsafe impl ::windows_core::ComInterface for CreateDefaultValueCallback {
    const IID: ::windows_core::GUID =
        ::windows_core::GUID::from_u128(0x7f808c05_2ac4_5ad9_ac8a_26890333d81e);
}
impl ::windows_core::RuntimeType for CreateDefaultValueCallback {
    const SIGNATURE: ::windows_core::imp::ConstBuffer =
        ::windows_core::imp::ConstBuffer::for_interface::<Self>();
}
#[repr(C)]
#[doc(hidden)]
pub struct CreateDefaultValueCallback_Vtbl {
    pub base__: ::windows_core::IUnknown_Vtbl,
    pub Invoke: unsafe extern "system" fn(
        this: *mut ::core::ffi::c_void,
        result__: *mut *mut ::core::ffi::c_void,
    ) -> ::windows_core::HRESULT,
}
#[repr(transparent)]
#[derive(::core::cmp::PartialEq, ::core::cmp::Eq, ::core::fmt::Debug, ::core::clone::Clone)]
pub struct DependencyPropertyChangedCallback(pub ::windows_core::IUnknown);
impl DependencyPropertyChangedCallback {
    pub fn new<
        F: FnMut(
                ::core::option::Option<&DependencyObject>,
                ::core::option::Option<&DependencyProperty>,
            ) -> ::windows_core::Result<()>
            + ::core::marker::Send
            + 'static,
    >(
        invoke: F,
    ) -> Self {
        let com = DependencyPropertyChangedCallbackBox::<F> {
            vtable: &DependencyPropertyChangedCallbackBox::<F>::VTABLE,
            count: ::windows_core::imp::RefCount::new(1),
            invoke,
        };
        unsafe { ::core::mem::transmute(::std::boxed::Box::new(com)) }
    }
    pub fn Invoke<P0, P1>(&self, sender: P0, dp: P1) -> ::windows_core::Result<()>
    where
        P0: ::windows_core::TryIntoParam<DependencyObject>,
        P1: ::windows_core::IntoParam<DependencyProperty>,
    {
        let this = self;
        unsafe {
            (::windows_core::Interface::vtable(this).Invoke)(
                ::windows_core::Interface::as_raw(this),
                sender.try_into_param()?.abi(),
                dp.into_param().abi(),
            )
            .ok()
        }
    }
}
#[repr(C)]
struct DependencyPropertyChangedCallbackBox<
    F: FnMut(
            ::core::option::Option<&DependencyObject>,
            ::core::option::Option<&DependencyProperty>,
        ) -> ::windows_core::Result<()>
        + ::core::marker::Send
        + 'static,
> {
    vtable: *const DependencyPropertyChangedCallback_Vtbl,
    invoke: F,
    count: ::windows_core::imp::RefCount,
}
impl<
        F: FnMut(
                ::core::option::Option<&DependencyObject>,
                ::core::option::Option<&DependencyProperty>,
            ) -> ::windows_core::Result<()>
            + ::core::marker::Send
            + 'static,
    > DependencyPropertyChangedCallbackBox<F>
{
    const VTABLE: DependencyPropertyChangedCallback_Vtbl = DependencyPropertyChangedCallback_Vtbl {
        base__: ::windows_core::IUnknown_Vtbl {
            QueryInterface: Self::QueryInterface,
            AddRef: Self::AddRef,
            Release: Self::Release,
        },
        Invoke: Self::Invoke,
    };
    unsafe extern "system" fn QueryInterface(
        this: *mut ::core::ffi::c_void,
        iid: *const ::windows_core::GUID,
        interface: *mut *mut ::core::ffi::c_void,
    ) -> ::windows_core::HRESULT {
        let this = this as *mut *mut ::core::ffi::c_void as *mut Self;
        if iid.is_null() || interface.is_null() {
            return ::windows_core::HRESULT(-2147467261);
        }
        *interface = if *iid
            == <DependencyPropertyChangedCallback as ::windows_core::ComInterface>::IID
            || *iid == <::windows_core::IUnknown as ::windows_core::ComInterface>::IID
            || *iid == <::windows_core::imp::IAgileObject as ::windows_core::ComInterface>::IID
        {
            &mut (*this).vtable as *mut _ as _
        } else {
            ::core::ptr::null_mut()
        };
        if (*interface).is_null() {
            ::windows_core::HRESULT(-2147467262)
        } else {
            (*this).count.add_ref();
            ::windows_core::HRESULT(0)
        }
    }
    unsafe extern "system" fn AddRef(this: *mut ::core::ffi::c_void) -> u32 {
        let this = this as *mut *mut ::core::ffi::c_void as *mut Self;
        (*this).count.add_ref()
    }
    unsafe extern "system" fn Release(this: *mut ::core::ffi::c_void) -> u32 {
        let this = this as *mut *mut ::core::ffi::c_void as *mut Self;
        let remaining = (*this).count.release();
        if remaining == 0 {
            let _ = ::std::boxed::Box::from_raw(this);
        }
        remaining
    }
    unsafe extern "system" fn Invoke(
        this: *mut ::core::ffi::c_void,
        sender: *mut ::core::ffi::c_void,
        dp: *mut ::core::ffi::c_void,
    ) -> ::windows_core::HRESULT {
        let this = this as *mut *mut ::core::ffi::c_void as *mut Self;
        ((*this).invoke)(
            ::windows_core::from_raw_borrowed(&sender),
            ::windows_core::from_raw_borrowed(&dp),
        )
        .into()
    }
}
unsafe impl ::windows_core::Interface for DependencyPropertyChangedCallback {
    type Vtable = DependencyPropertyChangedCallback_Vtbl;
}
unsafe impl ::windows_core::ComInterface for DependencyPropertyChangedCallback {
    const IID: ::windows_core::GUID =
        ::windows_core::GUID::from_u128(0xf055bb21_219b_5b0c_805d_bcaedae15458);
}
impl ::windows_core::RuntimeType for DependencyPropertyChangedCallback {
    const SIGNATURE: ::windows_core::imp::ConstBuffer =
        ::windows_core::imp::ConstBuffer::for_interface::<Self>();
}
#[repr(C)]
#[doc(hidden)]
pub struct DependencyPropertyChangedCallback_Vtbl {
    pub base__: ::windows_core::IUnknown_Vtbl,
    pub Invoke: unsafe extern "system" fn(
        this: *mut ::core::ffi::c_void,
        sender: *mut ::core::ffi::c_void,
        dp: *mut ::core::ffi::c_void,
    ) -> ::windows_core::HRESULT,
}
#[repr(transparent)]
#[derive(::core::cmp::PartialEq, ::core::cmp::Eq, ::core::fmt::Debug, ::core::clone::Clone)]
pub struct DependencyPropertyChangedEventHandler(pub ::windows_core::IUnknown);
impl DependencyPropertyChangedEventHandler {
    pub fn new<
        F: FnMut(
                ::core::option::Option<&::windows_core::IInspectable>,
                ::core::option::Option<&DependencyPropertyChangedEventArgs>,
            ) -> ::windows_core::Result<()>
            + ::core::marker::Send
            + 'static,
    >(
        invoke: F,
    ) -> Self {
        let com = DependencyPropertyChangedEventHandlerBox::<F> {
            vtable: &DependencyPropertyChangedEventHandlerBox::<F>::VTABLE,
            count: ::windows_core::imp::RefCount::new(1),
            invoke,
        };
        unsafe { ::core::mem::transmute(::std::boxed::Box::new(com)) }
    }
    pub fn Invoke<P0, P1>(&self, sender: P0, e: P1) -> ::windows_core::Result<()>
    where
        P0: ::windows_core::IntoParam<::windows_core::IInspectable>,
        P1: ::windows_core::IntoParam<DependencyPropertyChangedEventArgs>,
    {
        let this = self;
        unsafe {
            (::windows_core::Interface::vtable(this).Invoke)(
                ::windows_core::Interface::as_raw(this),
                sender.into_param().abi(),
                e.into_param().abi(),
            )
            .ok()
        }
    }
}
#[repr(C)]
struct DependencyPropertyChangedEventHandlerBox<
    F: FnMut(
            ::core::option::Option<&::windows_core::IInspectable>,
            ::core::option::Option<&DependencyPropertyChangedEventArgs>,
        ) -> ::windows_core::Result<()>
        + ::core::marker::Send
        + 'static,
> {
    vtable: *const DependencyPropertyChangedEventHandler_Vtbl,
    invoke: F,
    count: ::windows_core::imp::RefCount,
}
impl<
        F: FnMut(
                ::core::option::Option<&::windows_core::IInspectable>,
                ::core::option::Option<&DependencyPropertyChangedEventArgs>,
            ) -> ::windows_core::Result<()>
            + ::core::marker::Send
            + 'static,
    > DependencyPropertyChangedEventHandlerBox<F>
{
    const VTABLE: DependencyPropertyChangedEventHandler_Vtbl =
        DependencyPropertyChangedEventHandler_Vtbl {
            base__: ::windows_core::IUnknown_Vtbl {
                QueryInterface: Self::QueryInterface,
                AddRef: Self::AddRef,
                Release: Self::Release,
            },
            Invoke: Self::Invoke,
        };
    unsafe extern "system" fn QueryInterface(
        this: *mut ::core::ffi::c_void,
        iid: *const ::windows_core::GUID,
        interface: *mut *mut ::core::ffi::c_void,
    ) -> ::windows_core::HRESULT {
        let this = this as *mut *mut ::core::ffi::c_void as *mut Self;
        if iid.is_null() || interface.is_null() {
            return ::windows_core::HRESULT(-2147467261);
        }
        *interface = if *iid
            == <DependencyPropertyChangedEventHandler as ::windows_core::ComInterface>::IID
            || *iid == <::windows_core::IUnknown as ::windows_core::ComInterface>::IID
            || *iid == <::windows_core::imp::IAgileObject as ::windows_core::ComInterface>::IID
        {
            &mut (*this).vtable as *mut _ as _
        } else {
            ::core::ptr::null_mut()
        };
        if (*interface).is_null() {
            ::windows_core::HRESULT(-2147467262)
        } else {
            (*this).count.add_ref();
            ::windows_core::HRESULT(0)
        }
    }
    unsafe extern "system" fn AddRef(this: *mut ::core::ffi::c_void) -> u32 {
        let this = this as *mut *mut ::core::ffi::c_void as *mut Self;
        (*this).count.add_ref()
    }
    unsafe extern "system" fn Release(this: *mut ::core::ffi::c_void) -> u32 {
        let this = this as *mut *mut ::core::ffi::c_void as *mut Self;
        let remaining = (*this).count.release();
        if remaining == 0 {
            let _ = ::std::boxed::Box::from_raw(this);
        }
        remaining
    }
    unsafe extern "system" fn Invoke(
        this: *mut ::core::ffi::c_void,
        sender: *mut ::core::ffi::c_void,
        e: *mut ::core::ffi::c_void,
    ) -> ::windows_core::HRESULT {
        let this = this as *mut *mut ::core::ffi::c_void as *mut Self;
        ((*this).invoke)(
            ::windows_core::from_raw_borrowed(&sender),
            ::windows_core::from_raw_borrowed(&e),
        )
        .into()
    }
}
unsafe impl ::windows_core::Interface for DependencyPropertyChangedEventHandler {
    type Vtable = DependencyPropertyChangedEventHandler_Vtbl;
}
unsafe impl ::windows_core::ComInterface for DependencyPropertyChangedEventHandler {
    const IID: ::windows_core::GUID =
        ::windows_core::GUID::from_u128(0x4be8dc75_373d_5f4e_a0b4_54b9eeafb4a9);
}
impl ::windows_core::RuntimeType for DependencyPropertyChangedEventHandler {
    const SIGNATURE: ::windows_core::imp::ConstBuffer =
        ::windows_core::imp::ConstBuffer::for_interface::<Self>();
}
#[repr(C)]
#[doc(hidden)]
pub struct DependencyPropertyChangedEventHandler_Vtbl {
    pub base__: ::windows_core::IUnknown_Vtbl,
    pub Invoke: unsafe extern "system" fn(
        this: *mut ::core::ffi::c_void,
        sender: *mut ::core::ffi::c_void,
        e: *mut ::core::ffi::c_void,
    ) -> ::windows_core::HRESULT,
}
#[repr(transparent)]
#[derive(::core::cmp::PartialEq, ::core::cmp::Eq, ::core::fmt::Debug, ::core::clone::Clone)]
pub struct DragEventHandler(pub ::windows_core::IUnknown);
impl DragEventHandler {
    pub fn new<
        F: FnMut(
                ::core::option::Option<&::windows_core::IInspectable>,
                ::core::option::Option<&DragEventArgs>,
            ) -> ::windows_core::Result<()>
            + ::core::marker::Send
            + 'static,
    >(
        invoke: F,
    ) -> Self {
        let com = DragEventHandlerBox::<F> {
            vtable: &DragEventHandlerBox::<F>::VTABLE,
            count: ::windows_core::imp::RefCount::new(1),
            invoke,
        };
        unsafe { ::core::mem::transmute(::std::boxed::Box::new(com)) }
    }
    pub fn Invoke<P0, P1>(&self, sender: P0, e: P1) -> ::windows_core::Result<()>
    where
        P0: ::windows_core::IntoParam<::windows_core::IInspectable>,
        P1: ::windows_core::IntoParam<DragEventArgs>,
    {
        let this = self;
        unsafe {
            (::windows_core::Interface::vtable(this).Invoke)(
                ::windows_core::Interface::as_raw(this),
                sender.into_param().abi(),
                e.into_param().abi(),
            )
            .ok()
        }
    }
}
#[repr(C)]
struct DragEventHandlerBox<
    F: FnMut(
            ::core::option::Option<&::windows_core::IInspectable>,
            ::core::option::Option<&DragEventArgs>,
        ) -> ::windows_core::Result<()>
        + ::core::marker::Send
        + 'static,
> {
    vtable: *const DragEventHandler_Vtbl,
    invoke: F,
    count: ::windows_core::imp::RefCount,
}
impl<
        F: FnMut(
                ::core::option::Option<&::windows_core::IInspectable>,
                ::core::option::Option<&DragEventArgs>,
            ) -> ::windows_core::Result<()>
            + ::core::marker::Send
            + 'static,
    > DragEventHandlerBox<F>
{
    const VTABLE: DragEventHandler_Vtbl = DragEventHandler_Vtbl {
        base__: ::windows_core::IUnknown_Vtbl {
            QueryInterface: Self::QueryInterface,
            AddRef: Self::AddRef,
            Release: Self::Release,
        },
        Invoke: Self::Invoke,
    };
    unsafe extern "system" fn QueryInterface(
        this: *mut ::core::ffi::c_void,
        iid: *const ::windows_core::GUID,
        interface: *mut *mut ::core::ffi::c_void,
    ) -> ::windows_core::HRESULT {
        let this = this as *mut *mut ::core::ffi::c_void as *mut Self;
        if iid.is_null() || interface.is_null() {
            return ::windows_core::HRESULT(-2147467261);
        }
        *interface = if *iid == <DragEventHandler as ::windows_core::ComInterface>::IID
            || *iid == <::windows_core::IUnknown as ::windows_core::ComInterface>::IID
            || *iid == <::windows_core::imp::IAgileObject as ::windows_core::ComInterface>::IID
        {
            &mut (*this).vtable as *mut _ as _
        } else {
            ::core::ptr::null_mut()
        };
        if (*interface).is_null() {
            ::windows_core::HRESULT(-2147467262)
        } else {
            (*this).count.add_ref();
            ::windows_core::HRESULT(0)
        }
    }
    unsafe extern "system" fn AddRef(this: *mut ::core::ffi::c_void) -> u32 {
        let this = this as *mut *mut ::core::ffi::c_void as *mut Self;
        (*this).count.add_ref()
    }
    unsafe extern "system" fn Release(this: *mut ::core::ffi::c_void) -> u32 {
        let this = this as *mut *mut ::core::ffi::c_void as *mut Self;
        let remaining = (*this).count.release();
        if remaining == 0 {
            let _ = ::std::boxed::Box::from_raw(this);
        }
        remaining
    }
    unsafe extern "system" fn Invoke(
        this: *mut ::core::ffi::c_void,
        sender: *mut ::core::ffi::c_void,
        e: *mut ::core::ffi::c_void,
    ) -> ::windows_core::HRESULT {
        let this = this as *mut *mut ::core::ffi::c_void as *mut Self;
        ((*this).invoke)(
            ::windows_core::from_raw_borrowed(&sender),
            ::windows_core::from_raw_borrowed(&e),
        )
        .into()
    }
}
unsafe impl ::windows_core::Interface for DragEventHandler {
    type Vtable = DragEventHandler_Vtbl;
}
unsafe impl ::windows_core::ComInterface for DragEventHandler {
    const IID: ::windows_core::GUID =
        ::windows_core::GUID::from_u128(0x277afc83_cb67_56c8_b601_1b9c0f1c3d32);
}
impl ::windows_core::RuntimeType for DragEventHandler {
    const SIGNATURE: ::windows_core::imp::ConstBuffer =
        ::windows_core::imp::ConstBuffer::for_interface::<Self>();
}
#[repr(C)]
#[doc(hidden)]
pub struct DragEventHandler_Vtbl {
    pub base__: ::windows_core::IUnknown_Vtbl,
    pub Invoke: unsafe extern "system" fn(
        this: *mut ::core::ffi::c_void,
        sender: *mut ::core::ffi::c_void,
        e: *mut ::core::ffi::c_void,
    ) -> ::windows_core::HRESULT,
}
#[doc = "Required features: `\"Windows_ApplicationModel\"`"]
#[cfg(feature = "Windows_ApplicationModel")]
#[repr(transparent)]
#[derive(::core::cmp::PartialEq, ::core::cmp::Eq, ::core::fmt::Debug, ::core::clone::Clone)]
pub struct EnteredBackgroundEventHandler(pub ::windows_core::IUnknown);
#[cfg(feature = "Windows_ApplicationModel")]
impl EnteredBackgroundEventHandler {
    pub fn new<
        F: FnMut(
                ::core::option::Option<&::windows_core::IInspectable>,
                ::core::option::Option<&::windows::ApplicationModel::EnteredBackgroundEventArgs>,
            ) -> ::windows_core::Result<()>
            + ::core::marker::Send
            + 'static,
    >(
        invoke: F,
    ) -> Self {
        let com = EnteredBackgroundEventHandlerBox::<F> {
            vtable: &EnteredBackgroundEventHandlerBox::<F>::VTABLE,
            count: ::windows_core::imp::RefCount::new(1),
            invoke,
        };
        unsafe { ::core::mem::transmute(::std::boxed::Box::new(com)) }
    }
    #[doc = "Required features: `\"Windows_ApplicationModel\"`"]
    #[cfg(feature = "Windows_ApplicationModel")]
    pub fn Invoke<P0, P1>(&self, sender: P0, e: P1) -> ::windows_core::Result<()>
    where
        P0: ::windows_core::IntoParam<::windows_core::IInspectable>,
        P1: ::windows_core::IntoParam<::windows::ApplicationModel::EnteredBackgroundEventArgs>,
    {
        let this = self;
        unsafe {
            (::windows_core::Interface::vtable(this).Invoke)(
                ::windows_core::Interface::as_raw(this),
                sender.into_param().abi(),
                e.into_param().abi(),
            )
            .ok()
        }
    }
}
#[cfg(feature = "Windows_ApplicationModel")]
#[repr(C)]
struct EnteredBackgroundEventHandlerBox<
    F: FnMut(
            ::core::option::Option<&::windows_core::IInspectable>,
            ::core::option::Option<&::windows::ApplicationModel::EnteredBackgroundEventArgs>,
        ) -> ::windows_core::Result<()>
        + ::core::marker::Send
        + 'static,
> {
    vtable: *const EnteredBackgroundEventHandler_Vtbl,
    invoke: F,
    count: ::windows_core::imp::RefCount,
}
#[cfg(feature = "Windows_ApplicationModel")]
impl<
        F: FnMut(
                ::core::option::Option<&::windows_core::IInspectable>,
                ::core::option::Option<&::windows::ApplicationModel::EnteredBackgroundEventArgs>,
            ) -> ::windows_core::Result<()>
            + ::core::marker::Send
            + 'static,
    > EnteredBackgroundEventHandlerBox<F>
{
    const VTABLE: EnteredBackgroundEventHandler_Vtbl = EnteredBackgroundEventHandler_Vtbl {
        base__: ::windows_core::IUnknown_Vtbl {
            QueryInterface: Self::QueryInterface,
            AddRef: Self::AddRef,
            Release: Self::Release,
        },
        Invoke: Self::Invoke,
    };
    unsafe extern "system" fn QueryInterface(
        this: *mut ::core::ffi::c_void,
        iid: *const ::windows_core::GUID,
        interface: *mut *mut ::core::ffi::c_void,
    ) -> ::windows_core::HRESULT {
        let this = this as *mut *mut ::core::ffi::c_void as *mut Self;
        if iid.is_null() || interface.is_null() {
            return ::windows_core::HRESULT(-2147467261);
        }
        *interface = if *iid == <EnteredBackgroundEventHandler as ::windows_core::ComInterface>::IID
            || *iid == <::windows_core::IUnknown as ::windows_core::ComInterface>::IID
            || *iid == <::windows_core::imp::IAgileObject as ::windows_core::ComInterface>::IID
        {
            &mut (*this).vtable as *mut _ as _
        } else {
            ::core::ptr::null_mut()
        };
        if (*interface).is_null() {
            ::windows_core::HRESULT(-2147467262)
        } else {
            (*this).count.add_ref();
            ::windows_core::HRESULT(0)
        }
    }
    unsafe extern "system" fn AddRef(this: *mut ::core::ffi::c_void) -> u32 {
        let this = this as *mut *mut ::core::ffi::c_void as *mut Self;
        (*this).count.add_ref()
    }
    unsafe extern "system" fn Release(this: *mut ::core::ffi::c_void) -> u32 {
        let this = this as *mut *mut ::core::ffi::c_void as *mut Self;
        let remaining = (*this).count.release();
        if remaining == 0 {
            let _ = ::std::boxed::Box::from_raw(this);
        }
        remaining
    }
    unsafe extern "system" fn Invoke(
        this: *mut ::core::ffi::c_void,
        sender: *mut ::core::ffi::c_void,
        e: *mut ::core::ffi::c_void,
    ) -> ::windows_core::HRESULT {
        let this = this as *mut *mut ::core::ffi::c_void as *mut Self;
        ((*this).invoke)(
            ::windows_core::from_raw_borrowed(&sender),
            ::windows_core::from_raw_borrowed(&e),
        )
        .into()
    }
}
#[cfg(feature = "Windows_ApplicationModel")]
unsafe impl ::windows_core::Interface for EnteredBackgroundEventHandler {
    type Vtable = EnteredBackgroundEventHandler_Vtbl;
}
#[cfg(feature = "Windows_ApplicationModel")]
unsafe impl ::windows_core::ComInterface for EnteredBackgroundEventHandler {
    const IID: ::windows_core::GUID =
        ::windows_core::GUID::from_u128(0xf9a5148d_8f72_553f_b479_21b68610899d);
}
#[cfg(feature = "Windows_ApplicationModel")]
impl ::windows_core::RuntimeType for EnteredBackgroundEventHandler {
    const SIGNATURE: ::windows_core::imp::ConstBuffer =
        ::windows_core::imp::ConstBuffer::for_interface::<Self>();
}
#[cfg(feature = "Windows_ApplicationModel")]
#[repr(C)]
#[doc(hidden)]
pub struct EnteredBackgroundEventHandler_Vtbl {
    pub base__: ::windows_core::IUnknown_Vtbl,
    #[cfg(feature = "Windows_ApplicationModel")]
    pub Invoke: unsafe extern "system" fn(
        this: *mut ::core::ffi::c_void,
        sender: *mut ::core::ffi::c_void,
        e: *mut ::core::ffi::c_void,
    ) -> ::windows_core::HRESULT,
    #[cfg(not(feature = "Windows_ApplicationModel"))]
    Invoke: usize,
}
#[repr(transparent)]
#[derive(::core::cmp::PartialEq, ::core::cmp::Eq, ::core::fmt::Debug, ::core::clone::Clone)]
pub struct ExceptionRoutedEventHandler(pub ::windows_core::IUnknown);
impl ExceptionRoutedEventHandler {
    pub fn new<
        F: FnMut(
                ::core::option::Option<&::windows_core::IInspectable>,
                ::core::option::Option<&ExceptionRoutedEventArgs>,
            ) -> ::windows_core::Result<()>
            + ::core::marker::Send
            + 'static,
    >(
        invoke: F,
    ) -> Self {
        let com = ExceptionRoutedEventHandlerBox::<F> {
            vtable: &ExceptionRoutedEventHandlerBox::<F>::VTABLE,
            count: ::windows_core::imp::RefCount::new(1),
            invoke,
        };
        unsafe { ::core::mem::transmute(::std::boxed::Box::new(com)) }
    }
    pub fn Invoke<P0, P1>(&self, sender: P0, e: P1) -> ::windows_core::Result<()>
    where
        P0: ::windows_core::IntoParam<::windows_core::IInspectable>,
        P1: ::windows_core::TryIntoParam<ExceptionRoutedEventArgs>,
    {
        let this = self;
        unsafe {
            (::windows_core::Interface::vtable(this).Invoke)(
                ::windows_core::Interface::as_raw(this),
                sender.into_param().abi(),
                e.try_into_param()?.abi(),
            )
            .ok()
        }
    }
}
#[repr(C)]
struct ExceptionRoutedEventHandlerBox<
    F: FnMut(
            ::core::option::Option<&::windows_core::IInspectable>,
            ::core::option::Option<&ExceptionRoutedEventArgs>,
        ) -> ::windows_core::Result<()>
        + ::core::marker::Send
        + 'static,
> {
    vtable: *const ExceptionRoutedEventHandler_Vtbl,
    invoke: F,
    count: ::windows_core::imp::RefCount,
}
impl<
        F: FnMut(
                ::core::option::Option<&::windows_core::IInspectable>,
                ::core::option::Option<&ExceptionRoutedEventArgs>,
            ) -> ::windows_core::Result<()>
            + ::core::marker::Send
            + 'static,
    > ExceptionRoutedEventHandlerBox<F>
{
    const VTABLE: ExceptionRoutedEventHandler_Vtbl = ExceptionRoutedEventHandler_Vtbl {
        base__: ::windows_core::IUnknown_Vtbl {
            QueryInterface: Self::QueryInterface,
            AddRef: Self::AddRef,
            Release: Self::Release,
        },
        Invoke: Self::Invoke,
    };
    unsafe extern "system" fn QueryInterface(
        this: *mut ::core::ffi::c_void,
        iid: *const ::windows_core::GUID,
        interface: *mut *mut ::core::ffi::c_void,
    ) -> ::windows_core::HRESULT {
        let this = this as *mut *mut ::core::ffi::c_void as *mut Self;
        if iid.is_null() || interface.is_null() {
            return ::windows_core::HRESULT(-2147467261);
        }
        *interface = if *iid == <ExceptionRoutedEventHandler as ::windows_core::ComInterface>::IID
            || *iid == <::windows_core::IUnknown as ::windows_core::ComInterface>::IID
            || *iid == <::windows_core::imp::IAgileObject as ::windows_core::ComInterface>::IID
        {
            &mut (*this).vtable as *mut _ as _
        } else {
            ::core::ptr::null_mut()
        };
        if (*interface).is_null() {
            ::windows_core::HRESULT(-2147467262)
        } else {
            (*this).count.add_ref();
            ::windows_core::HRESULT(0)
        }
    }
    unsafe extern "system" fn AddRef(this: *mut ::core::ffi::c_void) -> u32 {
        let this = this as *mut *mut ::core::ffi::c_void as *mut Self;
        (*this).count.add_ref()
    }
    unsafe extern "system" fn Release(this: *mut ::core::ffi::c_void) -> u32 {
        let this = this as *mut *mut ::core::ffi::c_void as *mut Self;
        let remaining = (*this).count.release();
        if remaining == 0 {
            let _ = ::std::boxed::Box::from_raw(this);
        }
        remaining
    }
    unsafe extern "system" fn Invoke(
        this: *mut ::core::ffi::c_void,
        sender: *mut ::core::ffi::c_void,
        e: *mut ::core::ffi::c_void,
    ) -> ::windows_core::HRESULT {
        let this = this as *mut *mut ::core::ffi::c_void as *mut Self;
        ((*this).invoke)(
            ::windows_core::from_raw_borrowed(&sender),
            ::windows_core::from_raw_borrowed(&e),
        )
        .into()
    }
}
unsafe impl ::windows_core::Interface for ExceptionRoutedEventHandler {
    type Vtable = ExceptionRoutedEventHandler_Vtbl;
}
unsafe impl ::windows_core::ComInterface for ExceptionRoutedEventHandler {
    const IID: ::windows_core::GUID =
        ::windows_core::GUID::from_u128(0x45fbb85d_54f9_5a2a_8a38_00a3b7761f96);
}
impl ::windows_core::RuntimeType for ExceptionRoutedEventHandler {
    const SIGNATURE: ::windows_core::imp::ConstBuffer =
        ::windows_core::imp::ConstBuffer::for_interface::<Self>();
}
#[repr(C)]
#[doc(hidden)]
pub struct ExceptionRoutedEventHandler_Vtbl {
    pub base__: ::windows_core::IUnknown_Vtbl,
    pub Invoke: unsafe extern "system" fn(
        this: *mut ::core::ffi::c_void,
        sender: *mut ::core::ffi::c_void,
        e: *mut ::core::ffi::c_void,
    ) -> ::windows_core::HRESULT,
}
#[doc = "Required features: `\"Windows_ApplicationModel\"`"]
#[cfg(feature = "Windows_ApplicationModel")]
#[repr(transparent)]
#[derive(::core::cmp::PartialEq, ::core::cmp::Eq, ::core::fmt::Debug, ::core::clone::Clone)]
pub struct LeavingBackgroundEventHandler(pub ::windows_core::IUnknown);
#[cfg(feature = "Windows_ApplicationModel")]
impl LeavingBackgroundEventHandler {
    pub fn new<
        F: FnMut(
                ::core::option::Option<&::windows_core::IInspectable>,
                ::core::option::Option<&::windows::ApplicationModel::LeavingBackgroundEventArgs>,
            ) -> ::windows_core::Result<()>
            + ::core::marker::Send
            + 'static,
    >(
        invoke: F,
    ) -> Self {
        let com = LeavingBackgroundEventHandlerBox::<F> {
            vtable: &LeavingBackgroundEventHandlerBox::<F>::VTABLE,
            count: ::windows_core::imp::RefCount::new(1),
            invoke,
        };
        unsafe { ::core::mem::transmute(::std::boxed::Box::new(com)) }
    }
    #[doc = "Required features: `\"Windows_ApplicationModel\"`"]
    #[cfg(feature = "Windows_ApplicationModel")]
    pub fn Invoke<P0, P1>(&self, sender: P0, e: P1) -> ::windows_core::Result<()>
    where
        P0: ::windows_core::IntoParam<::windows_core::IInspectable>,
        P1: ::windows_core::IntoParam<::windows::ApplicationModel::LeavingBackgroundEventArgs>,
    {
        let this = self;
        unsafe {
            (::windows_core::Interface::vtable(this).Invoke)(
                ::windows_core::Interface::as_raw(this),
                sender.into_param().abi(),
                e.into_param().abi(),
            )
            .ok()
        }
    }
}
#[cfg(feature = "Windows_ApplicationModel")]
#[repr(C)]
struct LeavingBackgroundEventHandlerBox<
    F: FnMut(
            ::core::option::Option<&::windows_core::IInspectable>,
            ::core::option::Option<&::windows::ApplicationModel::LeavingBackgroundEventArgs>,
        ) -> ::windows_core::Result<()>
        + ::core::marker::Send
        + 'static,
> {
    vtable: *const LeavingBackgroundEventHandler_Vtbl,
    invoke: F,
    count: ::windows_core::imp::RefCount,
}
#[cfg(feature = "Windows_ApplicationModel")]
impl<
        F: FnMut(
                ::core::option::Option<&::windows_core::IInspectable>,
                ::core::option::Option<&::windows::ApplicationModel::LeavingBackgroundEventArgs>,
            ) -> ::windows_core::Result<()>
            + ::core::marker::Send
            + 'static,
    > LeavingBackgroundEventHandlerBox<F>
{
    const VTABLE: LeavingBackgroundEventHandler_Vtbl = LeavingBackgroundEventHandler_Vtbl {
        base__: ::windows_core::IUnknown_Vtbl {
            QueryInterface: Self::QueryInterface,
            AddRef: Self::AddRef,
            Release: Self::Release,
        },
        Invoke: Self::Invoke,
    };
    unsafe extern "system" fn QueryInterface(
        this: *mut ::core::ffi::c_void,
        iid: *const ::windows_core::GUID,
        interface: *mut *mut ::core::ffi::c_void,
    ) -> ::windows_core::HRESULT {
        let this = this as *mut *mut ::core::ffi::c_void as *mut Self;
        if iid.is_null() || interface.is_null() {
            return ::windows_core::HRESULT(-2147467261);
        }
        *interface = if *iid == <LeavingBackgroundEventHandler as ::windows_core::ComInterface>::IID
            || *iid == <::windows_core::IUnknown as ::windows_core::ComInterface>::IID
            || *iid == <::windows_core::imp::IAgileObject as ::windows_core::ComInterface>::IID
        {
            &mut (*this).vtable as *mut _ as _
        } else {
            ::core::ptr::null_mut()
        };
        if (*interface).is_null() {
            ::windows_core::HRESULT(-2147467262)
        } else {
            (*this).count.add_ref();
            ::windows_core::HRESULT(0)
        }
    }
    unsafe extern "system" fn AddRef(this: *mut ::core::ffi::c_void) -> u32 {
        let this = this as *mut *mut ::core::ffi::c_void as *mut Self;
        (*this).count.add_ref()
    }
    unsafe extern "system" fn Release(this: *mut ::core::ffi::c_void) -> u32 {
        let this = this as *mut *mut ::core::ffi::c_void as *mut Self;
        let remaining = (*this).count.release();
        if remaining == 0 {
            let _ = ::std::boxed::Box::from_raw(this);
        }
        remaining
    }
    unsafe extern "system" fn Invoke(
        this: *mut ::core::ffi::c_void,
        sender: *mut ::core::ffi::c_void,
        e: *mut ::core::ffi::c_void,
    ) -> ::windows_core::HRESULT {
        let this = this as *mut *mut ::core::ffi::c_void as *mut Self;
        ((*this).invoke)(
            ::windows_core::from_raw_borrowed(&sender),
            ::windows_core::from_raw_borrowed(&e),
        )
        .into()
    }
}
#[cfg(feature = "Windows_ApplicationModel")]
unsafe impl ::windows_core::Interface for LeavingBackgroundEventHandler {
    type Vtable = LeavingBackgroundEventHandler_Vtbl;
}
#[cfg(feature = "Windows_ApplicationModel")]
unsafe impl ::windows_core::ComInterface for LeavingBackgroundEventHandler {
    const IID: ::windows_core::GUID =
        ::windows_core::GUID::from_u128(0x3d723b94_fbcf_5c0d_b6ef_5062e68bf9f8);
}
#[cfg(feature = "Windows_ApplicationModel")]
impl ::windows_core::RuntimeType for LeavingBackgroundEventHandler {
    const SIGNATURE: ::windows_core::imp::ConstBuffer =
        ::windows_core::imp::ConstBuffer::for_interface::<Self>();
}
#[cfg(feature = "Windows_ApplicationModel")]
#[repr(C)]
#[doc(hidden)]
pub struct LeavingBackgroundEventHandler_Vtbl {
    pub base__: ::windows_core::IUnknown_Vtbl,
    #[cfg(feature = "Windows_ApplicationModel")]
    pub Invoke: unsafe extern "system" fn(
        this: *mut ::core::ffi::c_void,
        sender: *mut ::core::ffi::c_void,
        e: *mut ::core::ffi::c_void,
    ) -> ::windows_core::HRESULT,
    #[cfg(not(feature = "Windows_ApplicationModel"))]
    Invoke: usize,
}
#[repr(transparent)]
#[derive(::core::cmp::PartialEq, ::core::cmp::Eq, ::core::fmt::Debug, ::core::clone::Clone)]
pub struct PropertyChangedCallback(pub ::windows_core::IUnknown);
impl PropertyChangedCallback {
    pub fn new<
        F: FnMut(
                ::core::option::Option<&DependencyObject>,
                ::core::option::Option<&DependencyPropertyChangedEventArgs>,
            ) -> ::windows_core::Result<()>
            + ::core::marker::Send
            + 'static,
    >(
        invoke: F,
    ) -> Self {
        let com = PropertyChangedCallbackBox::<F> {
            vtable: &PropertyChangedCallbackBox::<F>::VTABLE,
            count: ::windows_core::imp::RefCount::new(1),
            invoke,
        };
        unsafe { ::core::mem::transmute(::std::boxed::Box::new(com)) }
    }
    pub fn Invoke<P0, P1>(&self, d: P0, e: P1) -> ::windows_core::Result<()>
    where
        P0: ::windows_core::TryIntoParam<DependencyObject>,
        P1: ::windows_core::IntoParam<DependencyPropertyChangedEventArgs>,
    {
        let this = self;
        unsafe {
            (::windows_core::Interface::vtable(this).Invoke)(
                ::windows_core::Interface::as_raw(this),
                d.try_into_param()?.abi(),
                e.into_param().abi(),
            )
            .ok()
        }
    }
}
#[repr(C)]
struct PropertyChangedCallbackBox<
    F: FnMut(
            ::core::option::Option<&DependencyObject>,
            ::core::option::Option<&DependencyPropertyChangedEventArgs>,
        ) -> ::windows_core::Result<()>
        + ::core::marker::Send
        + 'static,
> {
    vtable: *const PropertyChangedCallback_Vtbl,
    invoke: F,
    count: ::windows_core::imp::RefCount,
}
impl<
        F: FnMut(
                ::core::option::Option<&DependencyObject>,
                ::core::option::Option<&DependencyPropertyChangedEventArgs>,
            ) -> ::windows_core::Result<()>
            + ::core::marker::Send
            + 'static,
    > PropertyChangedCallbackBox<F>
{
    const VTABLE: PropertyChangedCallback_Vtbl = PropertyChangedCallback_Vtbl {
        base__: ::windows_core::IUnknown_Vtbl {
            QueryInterface: Self::QueryInterface,
            AddRef: Self::AddRef,
            Release: Self::Release,
        },
        Invoke: Self::Invoke,
    };
    unsafe extern "system" fn QueryInterface(
        this: *mut ::core::ffi::c_void,
        iid: *const ::windows_core::GUID,
        interface: *mut *mut ::core::ffi::c_void,
    ) -> ::windows_core::HRESULT {
        let this = this as *mut *mut ::core::ffi::c_void as *mut Self;
        if iid.is_null() || interface.is_null() {
            return ::windows_core::HRESULT(-2147467261);
        }
        *interface = if *iid == <PropertyChangedCallback as ::windows_core::ComInterface>::IID
            || *iid == <::windows_core::IUnknown as ::windows_core::ComInterface>::IID
            || *iid == <::windows_core::imp::IAgileObject as ::windows_core::ComInterface>::IID
        {
            &mut (*this).vtable as *mut _ as _
        } else {
            ::core::ptr::null_mut()
        };
        if (*interface).is_null() {
            ::windows_core::HRESULT(-2147467262)
        } else {
            (*this).count.add_ref();
            ::windows_core::HRESULT(0)
        }
    }
    unsafe extern "system" fn AddRef(this: *mut ::core::ffi::c_void) -> u32 {
        let this = this as *mut *mut ::core::ffi::c_void as *mut Self;
        (*this).count.add_ref()
    }
    unsafe extern "system" fn Release(this: *mut ::core::ffi::c_void) -> u32 {
        let this = this as *mut *mut ::core::ffi::c_void as *mut Self;
        let remaining = (*this).count.release();
        if remaining == 0 {
            let _ = ::std::boxed::Box::from_raw(this);
        }
        remaining
    }
    unsafe extern "system" fn Invoke(
        this: *mut ::core::ffi::c_void,
        d: *mut ::core::ffi::c_void,
        e: *mut ::core::ffi::c_void,
    ) -> ::windows_core::HRESULT {
        let this = this as *mut *mut ::core::ffi::c_void as *mut Self;
        ((*this).invoke)(
            ::windows_core::from_raw_borrowed(&d),
            ::windows_core::from_raw_borrowed(&e),
        )
        .into()
    }
}
unsafe impl ::windows_core::Interface for PropertyChangedCallback {
    type Vtable = PropertyChangedCallback_Vtbl;
}
unsafe impl ::windows_core::ComInterface for PropertyChangedCallback {
    const IID: ::windows_core::GUID =
        ::windows_core::GUID::from_u128(0x5fd9243a_2422_53c9_8d6f_f1ba1a0bba9a);
}
impl ::windows_core::RuntimeType for PropertyChangedCallback {
    const SIGNATURE: ::windows_core::imp::ConstBuffer =
        ::windows_core::imp::ConstBuffer::for_interface::<Self>();
}
#[repr(C)]
#[doc(hidden)]
pub struct PropertyChangedCallback_Vtbl {
    pub base__: ::windows_core::IUnknown_Vtbl,
    pub Invoke: unsafe extern "system" fn(
        this: *mut ::core::ffi::c_void,
        d: *mut ::core::ffi::c_void,
        e: *mut ::core::ffi::c_void,
    ) -> ::windows_core::HRESULT,
}
#[repr(transparent)]
#[derive(::core::cmp::PartialEq, ::core::cmp::Eq, ::core::fmt::Debug, ::core::clone::Clone)]
pub struct RoutedEventHandler(pub ::windows_core::IUnknown);
impl RoutedEventHandler {
    pub fn new<
        F: FnMut(
                ::core::option::Option<&::windows_core::IInspectable>,
                ::core::option::Option<&RoutedEventArgs>,
            ) -> ::windows_core::Result<()>
            + ::core::marker::Send
            + 'static,
    >(
        invoke: F,
    ) -> Self {
        let com = RoutedEventHandlerBox::<F> {
            vtable: &RoutedEventHandlerBox::<F>::VTABLE,
            count: ::windows_core::imp::RefCount::new(1),
            invoke,
        };
        unsafe { ::core::mem::transmute(::std::boxed::Box::new(com)) }
    }
    pub fn Invoke<P0, P1>(&self, sender: P0, e: P1) -> ::windows_core::Result<()>
    where
        P0: ::windows_core::IntoParam<::windows_core::IInspectable>,
        P1: ::windows_core::TryIntoParam<RoutedEventArgs>,
    {
        let this = self;
        unsafe {
            (::windows_core::Interface::vtable(this).Invoke)(
                ::windows_core::Interface::as_raw(this),
                sender.into_param().abi(),
                e.try_into_param()?.abi(),
            )
            .ok()
        }
    }
}
#[repr(C)]
struct RoutedEventHandlerBox<
    F: FnMut(
            ::core::option::Option<&::windows_core::IInspectable>,
            ::core::option::Option<&RoutedEventArgs>,
        ) -> ::windows_core::Result<()>
        + ::core::marker::Send
        + 'static,
> {
    vtable: *const RoutedEventHandler_Vtbl,
    invoke: F,
    count: ::windows_core::imp::RefCount,
}
impl<
        F: FnMut(
                ::core::option::Option<&::windows_core::IInspectable>,
                ::core::option::Option<&RoutedEventArgs>,
            ) -> ::windows_core::Result<()>
            + ::core::marker::Send
            + 'static,
    > RoutedEventHandlerBox<F>
{
    const VTABLE: RoutedEventHandler_Vtbl = RoutedEventHandler_Vtbl {
        base__: ::windows_core::IUnknown_Vtbl {
            QueryInterface: Self::QueryInterface,
            AddRef: Self::AddRef,
            Release: Self::Release,
        },
        Invoke: Self::Invoke,
    };
    unsafe extern "system" fn QueryInterface(
        this: *mut ::core::ffi::c_void,
        iid: *const ::windows_core::GUID,
        interface: *mut *mut ::core::ffi::c_void,
    ) -> ::windows_core::HRESULT {
        let this = this as *mut *mut ::core::ffi::c_void as *mut Self;
        if iid.is_null() || interface.is_null() {
            return ::windows_core::HRESULT(-2147467261);
        }
        *interface = if *iid == <RoutedEventHandler as ::windows_core::ComInterface>::IID
            || *iid == <::windows_core::IUnknown as ::windows_core::ComInterface>::IID
            || *iid == <::windows_core::imp::IAgileObject as ::windows_core::ComInterface>::IID
        {
            &mut (*this).vtable as *mut _ as _
        } else {
            ::core::ptr::null_mut()
        };
        if (*interface).is_null() {
            ::windows_core::HRESULT(-2147467262)
        } else {
            (*this).count.add_ref();
            ::windows_core::HRESULT(0)
        }
    }
    unsafe extern "system" fn AddRef(this: *mut ::core::ffi::c_void) -> u32 {
        let this = this as *mut *mut ::core::ffi::c_void as *mut Self;
        (*this).count.add_ref()
    }
    unsafe extern "system" fn Release(this: *mut ::core::ffi::c_void) -> u32 {
        let this = this as *mut *mut ::core::ffi::c_void as *mut Self;
        let remaining = (*this).count.release();
        if remaining == 0 {
            let _ = ::std::boxed::Box::from_raw(this);
        }
        remaining
    }
    unsafe extern "system" fn Invoke(
        this: *mut ::core::ffi::c_void,
        sender: *mut ::core::ffi::c_void,
        e: *mut ::core::ffi::c_void,
    ) -> ::windows_core::HRESULT {
        let this = this as *mut *mut ::core::ffi::c_void as *mut Self;
        ((*this).invoke)(
            ::windows_core::from_raw_borrowed(&sender),
            ::windows_core::from_raw_borrowed(&e),
        )
        .into()
    }
}
unsafe impl ::windows_core::Interface for RoutedEventHandler {
    type Vtable = RoutedEventHandler_Vtbl;
}
unsafe impl ::windows_core::ComInterface for RoutedEventHandler {
    const IID: ::windows_core::GUID =
        ::windows_core::GUID::from_u128(0xdae23d85_69ca_5bdf_805b_6161a3a215cc);
}
impl ::windows_core::RuntimeType for RoutedEventHandler {
    const SIGNATURE: ::windows_core::imp::ConstBuffer =
        ::windows_core::imp::ConstBuffer::for_interface::<Self>();
}
#[repr(C)]
#[doc(hidden)]
pub struct RoutedEventHandler_Vtbl {
    pub base__: ::windows_core::IUnknown_Vtbl,
    pub Invoke: unsafe extern "system" fn(
        this: *mut ::core::ffi::c_void,
        sender: *mut ::core::ffi::c_void,
        e: *mut ::core::ffi::c_void,
    ) -> ::windows_core::HRESULT,
}
#[repr(transparent)]
#[derive(::core::cmp::PartialEq, ::core::cmp::Eq, ::core::fmt::Debug, ::core::clone::Clone)]
pub struct SizeChangedEventHandler(pub ::windows_core::IUnknown);
impl SizeChangedEventHandler {
    pub fn new<
        F: FnMut(
                ::core::option::Option<&::windows_core::IInspectable>,
                ::core::option::Option<&SizeChangedEventArgs>,
            ) -> ::windows_core::Result<()>
            + ::core::marker::Send
            + 'static,
    >(
        invoke: F,
    ) -> Self {
        let com = SizeChangedEventHandlerBox::<F> {
            vtable: &SizeChangedEventHandlerBox::<F>::VTABLE,
            count: ::windows_core::imp::RefCount::new(1),
            invoke,
        };
        unsafe { ::core::mem::transmute(::std::boxed::Box::new(com)) }
    }
    pub fn Invoke<P0, P1>(&self, sender: P0, e: P1) -> ::windows_core::Result<()>
    where
        P0: ::windows_core::IntoParam<::windows_core::IInspectable>,
        P1: ::windows_core::IntoParam<SizeChangedEventArgs>,
    {
        let this = self;
        unsafe {
            (::windows_core::Interface::vtable(this).Invoke)(
                ::windows_core::Interface::as_raw(this),
                sender.into_param().abi(),
                e.into_param().abi(),
            )
            .ok()
        }
    }
}
#[repr(C)]
struct SizeChangedEventHandlerBox<
    F: FnMut(
            ::core::option::Option<&::windows_core::IInspectable>,
            ::core::option::Option<&SizeChangedEventArgs>,
        ) -> ::windows_core::Result<()>
        + ::core::marker::Send
        + 'static,
> {
    vtable: *const SizeChangedEventHandler_Vtbl,
    invoke: F,
    count: ::windows_core::imp::RefCount,
}
impl<
        F: FnMut(
                ::core::option::Option<&::windows_core::IInspectable>,
                ::core::option::Option<&SizeChangedEventArgs>,
            ) -> ::windows_core::Result<()>
            + ::core::marker::Send
            + 'static,
    > SizeChangedEventHandlerBox<F>
{
    const VTABLE: SizeChangedEventHandler_Vtbl = SizeChangedEventHandler_Vtbl {
        base__: ::windows_core::IUnknown_Vtbl {
            QueryInterface: Self::QueryInterface,
            AddRef: Self::AddRef,
            Release: Self::Release,
        },
        Invoke: Self::Invoke,
    };
    unsafe extern "system" fn QueryInterface(
        this: *mut ::core::ffi::c_void,
        iid: *const ::windows_core::GUID,
        interface: *mut *mut ::core::ffi::c_void,
    ) -> ::windows_core::HRESULT {
        let this = this as *mut *mut ::core::ffi::c_void as *mut Self;
        if iid.is_null() || interface.is_null() {
            return ::windows_core::HRESULT(-2147467261);
        }
        *interface = if *iid == <SizeChangedEventHandler as ::windows_core::ComInterface>::IID
            || *iid == <::windows_core::IUnknown as ::windows_core::ComInterface>::IID
            || *iid == <::windows_core::imp::IAgileObject as ::windows_core::ComInterface>::IID
        {
            &mut (*this).vtable as *mut _ as _
        } else {
            ::core::ptr::null_mut()
        };
        if (*interface).is_null() {
            ::windows_core::HRESULT(-2147467262)
        } else {
            (*this).count.add_ref();
            ::windows_core::HRESULT(0)
        }
    }
    unsafe extern "system" fn AddRef(this: *mut ::core::ffi::c_void) -> u32 {
        let this = this as *mut *mut ::core::ffi::c_void as *mut Self;
        (*this).count.add_ref()
    }
    unsafe extern "system" fn Release(this: *mut ::core::ffi::c_void) -> u32 {
        let this = this as *mut *mut ::core::ffi::c_void as *mut Self;
        let remaining = (*this).count.release();
        if remaining == 0 {
            let _ = ::std::boxed::Box::from_raw(this);
        }
        remaining
    }
    unsafe extern "system" fn Invoke(
        this: *mut ::core::ffi::c_void,
        sender: *mut ::core::ffi::c_void,
        e: *mut ::core::ffi::c_void,
    ) -> ::windows_core::HRESULT {
        let this = this as *mut *mut ::core::ffi::c_void as *mut Self;
        ((*this).invoke)(
            ::windows_core::from_raw_borrowed(&sender),
            ::windows_core::from_raw_borrowed(&e),
        )
        .into()
    }
}
unsafe impl ::windows_core::Interface for SizeChangedEventHandler {
    type Vtable = SizeChangedEventHandler_Vtbl;
}
unsafe impl ::windows_core::ComInterface for SizeChangedEventHandler {
    const IID: ::windows_core::GUID =
        ::windows_core::GUID::from_u128(0x8d7b1a58_14c6_51c9_892c_9fcce368e77d);
}
impl ::windows_core::RuntimeType for SizeChangedEventHandler {
    const SIGNATURE: ::windows_core::imp::ConstBuffer =
        ::windows_core::imp::ConstBuffer::for_interface::<Self>();
}
#[repr(C)]
#[doc(hidden)]
pub struct SizeChangedEventHandler_Vtbl {
    pub base__: ::windows_core::IUnknown_Vtbl,
    pub Invoke: unsafe extern "system" fn(
        this: *mut ::core::ffi::c_void,
        sender: *mut ::core::ffi::c_void,
        e: *mut ::core::ffi::c_void,
    ) -> ::windows_core::HRESULT,
}
#[doc = "Required features: `\"Windows_ApplicationModel\"`"]
#[cfg(feature = "Windows_ApplicationModel")]
#[repr(transparent)]
#[derive(::core::cmp::PartialEq, ::core::cmp::Eq, ::core::fmt::Debug, ::core::clone::Clone)]
pub struct SuspendingEventHandler(pub ::windows_core::IUnknown);
#[cfg(feature = "Windows_ApplicationModel")]
impl SuspendingEventHandler {
    pub fn new<
        F: FnMut(
                ::core::option::Option<&::windows_core::IInspectable>,
                ::core::option::Option<&::windows::ApplicationModel::SuspendingEventArgs>,
            ) -> ::windows_core::Result<()>
            + ::core::marker::Send
            + 'static,
    >(
        invoke: F,
    ) -> Self {
        let com = SuspendingEventHandlerBox::<F> {
            vtable: &SuspendingEventHandlerBox::<F>::VTABLE,
            count: ::windows_core::imp::RefCount::new(1),
            invoke,
        };
        unsafe { ::core::mem::transmute(::std::boxed::Box::new(com)) }
    }
    #[doc = "Required features: `\"Windows_ApplicationModel\"`"]
    #[cfg(feature = "Windows_ApplicationModel")]
    pub fn Invoke<P0, P1>(&self, sender: P0, e: P1) -> ::windows_core::Result<()>
    where
        P0: ::windows_core::IntoParam<::windows_core::IInspectable>,
        P1: ::windows_core::IntoParam<::windows::ApplicationModel::SuspendingEventArgs>,
    {
        let this = self;
        unsafe {
            (::windows_core::Interface::vtable(this).Invoke)(
                ::windows_core::Interface::as_raw(this),
                sender.into_param().abi(),
                e.into_param().abi(),
            )
            .ok()
        }
    }
}
#[cfg(feature = "Windows_ApplicationModel")]
#[repr(C)]
struct SuspendingEventHandlerBox<
    F: FnMut(
            ::core::option::Option<&::windows_core::IInspectable>,
            ::core::option::Option<&::windows::ApplicationModel::SuspendingEventArgs>,
        ) -> ::windows_core::Result<()>
        + ::core::marker::Send
        + 'static,
> {
    vtable: *const SuspendingEventHandler_Vtbl,
    invoke: F,
    count: ::windows_core::imp::RefCount,
}
#[cfg(feature = "Windows_ApplicationModel")]
impl<
        F: FnMut(
                ::core::option::Option<&::windows_core::IInspectable>,
                ::core::option::Option<&::windows::ApplicationModel::SuspendingEventArgs>,
            ) -> ::windows_core::Result<()>
            + ::core::marker::Send
            + 'static,
    > SuspendingEventHandlerBox<F>
{
    const VTABLE: SuspendingEventHandler_Vtbl = SuspendingEventHandler_Vtbl {
        base__: ::windows_core::IUnknown_Vtbl {
            QueryInterface: Self::QueryInterface,
            AddRef: Self::AddRef,
            Release: Self::Release,
        },
        Invoke: Self::Invoke,
    };
    unsafe extern "system" fn QueryInterface(
        this: *mut ::core::ffi::c_void,
        iid: *const ::windows_core::GUID,
        interface: *mut *mut ::core::ffi::c_void,
    ) -> ::windows_core::HRESULT {
        let this = this as *mut *mut ::core::ffi::c_void as *mut Self;
        if iid.is_null() || interface.is_null() {
            return ::windows_core::HRESULT(-2147467261);
        }
        *interface = if *iid == <SuspendingEventHandler as ::windows_core::ComInterface>::IID
            || *iid == <::windows_core::IUnknown as ::windows_core::ComInterface>::IID
            || *iid == <::windows_core::imp::IAgileObject as ::windows_core::ComInterface>::IID
        {
            &mut (*this).vtable as *mut _ as _
        } else {
            ::core::ptr::null_mut()
        };
        if (*interface).is_null() {
            ::windows_core::HRESULT(-2147467262)
        } else {
            (*this).count.add_ref();
            ::windows_core::HRESULT(0)
        }
    }
    unsafe extern "system" fn AddRef(this: *mut ::core::ffi::c_void) -> u32 {
        let this = this as *mut *mut ::core::ffi::c_void as *mut Self;
        (*this).count.add_ref()
    }
    unsafe extern "system" fn Release(this: *mut ::core::ffi::c_void) -> u32 {
        let this = this as *mut *mut ::core::ffi::c_void as *mut Self;
        let remaining = (*this).count.release();
        if remaining == 0 {
            let _ = ::std::boxed::Box::from_raw(this);
        }
        remaining
    }
    unsafe extern "system" fn Invoke(
        this: *mut ::core::ffi::c_void,
        sender: *mut ::core::ffi::c_void,
        e: *mut ::core::ffi::c_void,
    ) -> ::windows_core::HRESULT {
        let this = this as *mut *mut ::core::ffi::c_void as *mut Self;
        ((*this).invoke)(
            ::windows_core::from_raw_borrowed(&sender),
            ::windows_core::from_raw_borrowed(&e),
        )
        .into()
    }
}
#[cfg(feature = "Windows_ApplicationModel")]
unsafe impl ::windows_core::Interface for SuspendingEventHandler {
    type Vtable = SuspendingEventHandler_Vtbl;
}
#[cfg(feature = "Windows_ApplicationModel")]
unsafe impl ::windows_core::ComInterface for SuspendingEventHandler {
    const IID: ::windows_core::GUID =
        ::windows_core::GUID::from_u128(0xe4beec79_95fd_5841_aceb_01a8a1fb73d0);
}
#[cfg(feature = "Windows_ApplicationModel")]
impl ::windows_core::RuntimeType for SuspendingEventHandler {
    const SIGNATURE: ::windows_core::imp::ConstBuffer =
        ::windows_core::imp::ConstBuffer::for_interface::<Self>();
}
#[cfg(feature = "Windows_ApplicationModel")]
#[repr(C)]
#[doc(hidden)]
pub struct SuspendingEventHandler_Vtbl {
    pub base__: ::windows_core::IUnknown_Vtbl,
    #[cfg(feature = "Windows_ApplicationModel")]
    pub Invoke: unsafe extern "system" fn(
        this: *mut ::core::ffi::c_void,
        sender: *mut ::core::ffi::c_void,
        e: *mut ::core::ffi::c_void,
    ) -> ::windows_core::HRESULT,
    #[cfg(not(feature = "Windows_ApplicationModel"))]
    Invoke: usize,
}
#[repr(transparent)]
#[derive(::core::cmp::PartialEq, ::core::cmp::Eq, ::core::fmt::Debug, ::core::clone::Clone)]
pub struct UnhandledExceptionEventHandler(pub ::windows_core::IUnknown);
impl UnhandledExceptionEventHandler {
    pub fn new<
        F: FnMut(
                ::core::option::Option<&::windows_core::IInspectable>,
                ::core::option::Option<&UnhandledExceptionEventArgs>,
            ) -> ::windows_core::Result<()>
            + ::core::marker::Send
            + 'static,
    >(
        invoke: F,
    ) -> Self {
        let com = UnhandledExceptionEventHandlerBox::<F> {
            vtable: &UnhandledExceptionEventHandlerBox::<F>::VTABLE,
            count: ::windows_core::imp::RefCount::new(1),
            invoke,
        };
        unsafe { ::core::mem::transmute(::std::boxed::Box::new(com)) }
    }
    pub fn Invoke<P0, P1>(&self, sender: P0, e: P1) -> ::windows_core::Result<()>
    where
        P0: ::windows_core::IntoParam<::windows_core::IInspectable>,
        P1: ::windows_core::IntoParam<UnhandledExceptionEventArgs>,
    {
        let this = self;
        unsafe {
            (::windows_core::Interface::vtable(this).Invoke)(
                ::windows_core::Interface::as_raw(this),
                sender.into_param().abi(),
                e.into_param().abi(),
            )
            .ok()
        }
    }
}
#[repr(C)]
struct UnhandledExceptionEventHandlerBox<
    F: FnMut(
            ::core::option::Option<&::windows_core::IInspectable>,
            ::core::option::Option<&UnhandledExceptionEventArgs>,
        ) -> ::windows_core::Result<()>
        + ::core::marker::Send
        + 'static,
> {
    vtable: *const UnhandledExceptionEventHandler_Vtbl,
    invoke: F,
    count: ::windows_core::imp::RefCount,
}
impl<
        F: FnMut(
                ::core::option::Option<&::windows_core::IInspectable>,
                ::core::option::Option<&UnhandledExceptionEventArgs>,
            ) -> ::windows_core::Result<()>
            + ::core::marker::Send
            + 'static,
    > UnhandledExceptionEventHandlerBox<F>
{
    const VTABLE: UnhandledExceptionEventHandler_Vtbl = UnhandledExceptionEventHandler_Vtbl {
        base__: ::windows_core::IUnknown_Vtbl {
            QueryInterface: Self::QueryInterface,
            AddRef: Self::AddRef,
            Release: Self::Release,
        },
        Invoke: Self::Invoke,
    };
    unsafe extern "system" fn QueryInterface(
        this: *mut ::core::ffi::c_void,
        iid: *const ::windows_core::GUID,
        interface: *mut *mut ::core::ffi::c_void,
    ) -> ::windows_core::HRESULT {
        let this = this as *mut *mut ::core::ffi::c_void as *mut Self;
        if iid.is_null() || interface.is_null() {
            return ::windows_core::HRESULT(-2147467261);
        }
        *interface = if *iid
            == <UnhandledExceptionEventHandler as ::windows_core::ComInterface>::IID
            || *iid == <::windows_core::IUnknown as ::windows_core::ComInterface>::IID
            || *iid == <::windows_core::imp::IAgileObject as ::windows_core::ComInterface>::IID
        {
            &mut (*this).vtable as *mut _ as _
        } else {
            ::core::ptr::null_mut()
        };
        if (*interface).is_null() {
            ::windows_core::HRESULT(-2147467262)
        } else {
            (*this).count.add_ref();
            ::windows_core::HRESULT(0)
        }
    }
    unsafe extern "system" fn AddRef(this: *mut ::core::ffi::c_void) -> u32 {
        let this = this as *mut *mut ::core::ffi::c_void as *mut Self;
        (*this).count.add_ref()
    }
    unsafe extern "system" fn Release(this: *mut ::core::ffi::c_void) -> u32 {
        let this = this as *mut *mut ::core::ffi::c_void as *mut Self;
        let remaining = (*this).count.release();
        if remaining == 0 {
            let _ = ::std::boxed::Box::from_raw(this);
        }
        remaining
    }
    unsafe extern "system" fn Invoke(
        this: *mut ::core::ffi::c_void,
        sender: *mut ::core::ffi::c_void,
        e: *mut ::core::ffi::c_void,
    ) -> ::windows_core::HRESULT {
        let this = this as *mut *mut ::core::ffi::c_void as *mut Self;
        ((*this).invoke)(
            ::windows_core::from_raw_borrowed(&sender),
            ::windows_core::from_raw_borrowed(&e),
        )
        .into()
    }
}
unsafe impl ::windows_core::Interface for UnhandledExceptionEventHandler {
    type Vtable = UnhandledExceptionEventHandler_Vtbl;
}
unsafe impl ::windows_core::ComInterface for UnhandledExceptionEventHandler {
    const IID: ::windows_core::GUID =
        ::windows_core::GUID::from_u128(0x3427c1b6_5eca_5631_84b8_5bae732fb67f);
}
impl ::windows_core::RuntimeType for UnhandledExceptionEventHandler {
    const SIGNATURE: ::windows_core::imp::ConstBuffer =
        ::windows_core::imp::ConstBuffer::for_interface::<Self>();
}
#[repr(C)]
#[doc(hidden)]
pub struct UnhandledExceptionEventHandler_Vtbl {
    pub base__: ::windows_core::IUnknown_Vtbl,
    pub Invoke: unsafe extern "system" fn(
        this: *mut ::core::ffi::c_void,
        sender: *mut ::core::ffi::c_void,
        e: *mut ::core::ffi::c_void,
    ) -> ::windows_core::HRESULT,
}
#[repr(transparent)]
#[derive(::core::cmp::PartialEq, ::core::cmp::Eq, ::core::fmt::Debug, ::core::clone::Clone)]
pub struct VisualStateChangedEventHandler(pub ::windows_core::IUnknown);
impl VisualStateChangedEventHandler {
    pub fn new<
        F: FnMut(
                ::core::option::Option<&::windows_core::IInspectable>,
                ::core::option::Option<&VisualStateChangedEventArgs>,
            ) -> ::windows_core::Result<()>
            + ::core::marker::Send
            + 'static,
    >(
        invoke: F,
    ) -> Self {
        let com = VisualStateChangedEventHandlerBox::<F> {
            vtable: &VisualStateChangedEventHandlerBox::<F>::VTABLE,
            count: ::windows_core::imp::RefCount::new(1),
            invoke,
        };
        unsafe { ::core::mem::transmute(::std::boxed::Box::new(com)) }
    }
    pub fn Invoke<P0, P1>(&self, sender: P0, e: P1) -> ::windows_core::Result<()>
    where
        P0: ::windows_core::IntoParam<::windows_core::IInspectable>,
        P1: ::windows_core::IntoParam<VisualStateChangedEventArgs>,
    {
        let this = self;
        unsafe {
            (::windows_core::Interface::vtable(this).Invoke)(
                ::windows_core::Interface::as_raw(this),
                sender.into_param().abi(),
                e.into_param().abi(),
            )
            .ok()
        }
    }
}
#[repr(C)]
struct VisualStateChangedEventHandlerBox<
    F: FnMut(
            ::core::option::Option<&::windows_core::IInspectable>,
            ::core::option::Option<&VisualStateChangedEventArgs>,
        ) -> ::windows_core::Result<()>
        + ::core::marker::Send
        + 'static,
> {
    vtable: *const VisualStateChangedEventHandler_Vtbl,
    invoke: F,
    count: ::windows_core::imp::RefCount,
}
impl<
        F: FnMut(
                ::core::option::Option<&::windows_core::IInspectable>,
                ::core::option::Option<&VisualStateChangedEventArgs>,
            ) -> ::windows_core::Result<()>
            + ::core::marker::Send
            + 'static,
    > VisualStateChangedEventHandlerBox<F>
{
    const VTABLE: VisualStateChangedEventHandler_Vtbl = VisualStateChangedEventHandler_Vtbl {
        base__: ::windows_core::IUnknown_Vtbl {
            QueryInterface: Self::QueryInterface,
            AddRef: Self::AddRef,
            Release: Self::Release,
        },
        Invoke: Self::Invoke,
    };
    unsafe extern "system" fn QueryInterface(
        this: *mut ::core::ffi::c_void,
        iid: *const ::windows_core::GUID,
        interface: *mut *mut ::core::ffi::c_void,
    ) -> ::windows_core::HRESULT {
        let this = this as *mut *mut ::core::ffi::c_void as *mut Self;
        if iid.is_null() || interface.is_null() {
            return ::windows_core::HRESULT(-2147467261);
        }
        *interface = if *iid
            == <VisualStateChangedEventHandler as ::windows_core::ComInterface>::IID
            || *iid == <::windows_core::IUnknown as ::windows_core::ComInterface>::IID
            || *iid == <::windows_core::imp::IAgileObject as ::windows_core::ComInterface>::IID
        {
            &mut (*this).vtable as *mut _ as _
        } else {
            ::core::ptr::null_mut()
        };
        if (*interface).is_null() {
            ::windows_core::HRESULT(-2147467262)
        } else {
            (*this).count.add_ref();
            ::windows_core::HRESULT(0)
        }
    }
    unsafe extern "system" fn AddRef(this: *mut ::core::ffi::c_void) -> u32 {
        let this = this as *mut *mut ::core::ffi::c_void as *mut Self;
        (*this).count.add_ref()
    }
    unsafe extern "system" fn Release(this: *mut ::core::ffi::c_void) -> u32 {
        let this = this as *mut *mut ::core::ffi::c_void as *mut Self;
        let remaining = (*this).count.release();
        if remaining == 0 {
            let _ = ::std::boxed::Box::from_raw(this);
        }
        remaining
    }
    unsafe extern "system" fn Invoke(
        this: *mut ::core::ffi::c_void,
        sender: *mut ::core::ffi::c_void,
        e: *mut ::core::ffi::c_void,
    ) -> ::windows_core::HRESULT {
        let this = this as *mut *mut ::core::ffi::c_void as *mut Self;
        ((*this).invoke)(
            ::windows_core::from_raw_borrowed(&sender),
            ::windows_core::from_raw_borrowed(&e),
        )
        .into()
    }
}
unsafe impl ::windows_core::Interface for VisualStateChangedEventHandler {
    type Vtable = VisualStateChangedEventHandler_Vtbl;
}
unsafe impl ::windows_core::ComInterface for VisualStateChangedEventHandler {
    const IID: ::windows_core::GUID =
        ::windows_core::GUID::from_u128(0xcdbbd854_0539_5bff_b448_33193d2f41b8);
}
impl ::windows_core::RuntimeType for VisualStateChangedEventHandler {
    const SIGNATURE: ::windows_core::imp::ConstBuffer =
        ::windows_core::imp::ConstBuffer::for_interface::<Self>();
}
#[repr(C)]
#[doc(hidden)]
pub struct VisualStateChangedEventHandler_Vtbl {
    pub base__: ::windows_core::IUnknown_Vtbl,
    pub Invoke: unsafe extern "system" fn(
        this: *mut ::core::ffi::c_void,
        sender: *mut ::core::ffi::c_void,
        e: *mut ::core::ffi::c_void,
    ) -> ::windows_core::HRESULT,
}
#[cfg(feature = "implement")]
::core::include!("impl.rs");
